
UART_Ring_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d0  080047d0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d8  080047d8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080047e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000068  08004848  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08004848  000066f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd78  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe8  00000000  00000000  00012e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00014df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f8  00000000  00000000  00015840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029193  00000000  00000000  00016038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb83  00000000  00000000  0003f1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7bc3  00000000  00000000  0004bd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f4  00000000  00000000  00143954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00146a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004684 	.word	0x08004684

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08004684 	.word	0x08004684

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Ringbuf_init>:
ring_buffer *_rx_buffer;
ring_buffer *_tx_buffer;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void) {
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	_rx_buffer = &rx_buffer;
 8000584:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <Ringbuf_init+0x3c>)
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <Ringbuf_init+0x40>)
 8000588:	601a      	str	r2, [r3, #0]
	_tx_buffer = &tx_buffer;
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <Ringbuf_init+0x44>)
 800058c:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <Ringbuf_init+0x48>)
 800058e:	601a      	str	r2, [r3, #0]

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000590:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <Ringbuf_init+0x4c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <Ringbuf_init+0x4c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f042 0201 	orr.w	r2, r2, #1
 800059e:	609a      	str	r2, [r3, #8]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <Ringbuf_init+0x4c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <Ringbuf_init+0x4c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f042 0220 	orr.w	r2, r2, #32
 80005ae:	601a      	str	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000494 	.word	0x20000494
 80005c0:	20000084 	.word	0x20000084
 80005c4:	20000498 	.word	0x20000498
 80005c8:	2000028c 	.word	0x2000028c
 80005cc:	2000049c 	.word	0x2000049c

080005d0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer) {
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int) (buffer->head + 1) % UART_BUFFER_SIZE;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80005e2:	3301      	adds	r3, #1
 80005e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005e8:	60fb      	str	r3, [r7, #12]

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != buffer->tail) {
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d009      	beq.n	800060a <store_char+0x3a>
		buffer->buffer[buffer->head] = c;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	79f9      	ldrb	r1, [r7, #7]
 8000600:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <Uart_read>:
		return 1;
	else
		return -1;
}

int Uart_read(void) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
	// if the head isn't ahead of the tail, we don't have any characters
	if (_rx_buffer->head == _rx_buffer->tail) {
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <Uart_read+0x54>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <Uart_read+0x54>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800062e:	429a      	cmp	r2, r3
 8000630:	d102      	bne.n	8000638 <Uart_read+0x20>
		return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e013      	b.n	8000660 <Uart_read+0x48>
	} else {
		unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <Uart_read+0x54>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <Uart_read+0x54>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000644:	5cd3      	ldrb	r3, [r2, r3]
 8000646:	71fb      	strb	r3, [r7, #7]
		_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 8000648:	4b08      	ldr	r3, [pc, #32]	@ (800066c <Uart_read+0x54>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <Uart_read+0x54>)
 8000654:	681b      	ldr	r3, [r3, #0]
				% UART_BUFFER_SIZE;
 8000656:	f3c2 0208 	ubfx	r2, r2, #0, #9
		_rx_buffer->tail = (unsigned int) (_rx_buffer->tail + 1)
 800065a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		return (char)c;
 800065e:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	20000494 	.word	0x20000494

08000670 <IsDataAvailable>:
	return 0;
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
//	printf("Reciver Head Buffer : %d\r\n", _rx_buffer->head);
//	printf("Transmit tail Buffer : %d\r\n", _tx_buffer->tail);
	uint16_t A = (uint16_t) (UART_BUFFER_SIZE + _rx_buffer->head
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <IsDataAvailable+0x38>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
			- _rx_buffer->tail) % UART_BUFFER_SIZE;
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <IsDataAvailable+0x38>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000688:	b29b      	uxth	r3, r3
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	b29b      	uxth	r3, r3
	uint16_t A = (uint16_t) (UART_BUFFER_SIZE + _rx_buffer->head
 800068e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000692:	b29b      	uxth	r3, r3
 8000694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000698:	80fb      	strh	r3, [r7, #6]
	//printf("Is Data Available : %d\n", A);
	return A;
 800069a:	88fb      	ldrh	r3, [r7, #6]
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	20000494 	.word	0x20000494

080006ac <Uart_isr>:
		return 1;
	else
		return 0;
}

void Uart_isr(UART_HandleTypeDef *huart) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_ISR_RXNE) != RESET)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d014      	beq.n	80006f8 <Uart_isr+0x4c>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00f      	beq.n	80006f8 <Uart_isr+0x4c>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		huart->Instance->ISR; /* Read status register */
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	69db      	ldr	r3, [r3, #28]
		unsigned char c = huart->Instance->RDR; /* Read data register */
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	73fb      	strb	r3, [r7, #15]
		store_char(c, _rx_buffer);  // store data in buffer
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <Uart_isr+0xb8>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff6d 	bl	80005d0 <store_char>
		return;
 80006f6:	e032      	b.n	800075e <Uart_isr+0xb2>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_ISR_TXE) != RESET)
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d02d      	beq.n	800075e <Uart_isr+0xb2>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000708:	2b00      	cmp	r3, #0
 800070a:	d028      	beq.n	800075e <Uart_isr+0xb2>
		if (tx_buffer.head == tx_buffer.tail) {
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <Uart_isr+0xbc>)
 800070e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <Uart_isr+0xbc>)
 8000714:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000718:	429a      	cmp	r2, r3
 800071a:	d108      	bne.n	800072e <Uart_isr+0x82>
			// Buffer empty, so disable interrupts
			__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800072a:	601a      	str	r2, [r3, #0]

			huart->Instance->ISR;
			huart->Instance->TDR = c;

		}
		return;
 800072c:	e016      	b.n	800075c <Uart_isr+0xb0>
			unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <Uart_isr+0xbc>)
 8000730:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000734:	4a0c      	ldr	r2, [pc, #48]	@ (8000768 <Uart_isr+0xbc>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	73bb      	strb	r3, [r7, #14]
			tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <Uart_isr+0xbc>)
 800073c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000740:	3301      	adds	r3, #1
 8000742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <Uart_isr+0xbc>)
 8000748:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
			huart->Instance->ISR;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	69db      	ldr	r3, [r3, #28]
			huart->Instance->TDR = c;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	7bba      	ldrb	r2, [r7, #14]
 8000758:	b292      	uxth	r2, r2
 800075a:	851a      	strh	r2, [r3, #40]	@ 0x28
		return;
 800075c:	bf00      	nop
	}
}
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000494 	.word	0x20000494
 8000768:	2000028c 	.word	0x2000028c

0800076c <writedata>:
//	memset(buffer, 0, 100);
//	break;
//	}
//}

void writedata(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
    memset(name, 0, sizeof(name));
 8000772:	2214      	movs	r2, #20
 8000774:	2100      	movs	r1, #0
 8000776:	4841      	ldr	r0, [pc, #260]	@ (800087c <writedata+0x110>)
 8000778:	f003 fa78 	bl	8003c6c <memset>
    memset(age, 0, sizeof(age));
 800077c:	2203      	movs	r2, #3
 800077e:	2100      	movs	r1, #0
 8000780:	483f      	ldr	r0, [pc, #252]	@ (8000880 <writedata+0x114>)
 8000782:	f003 fa73 	bl	8003c6c <memset>

    printf("\r\nPlease Enter your name:\r\n");
 8000786:	483f      	ldr	r0, [pc, #252]	@ (8000884 <writedata+0x118>)
 8000788:	f003 f990 	bl	8003aac <puts>

    fflush(stdout); // Ensure any buffered output is flushed
 800078c:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <writedata+0x11c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	4618      	mov	r0, r3
 8000794:	f003 f844 	bl	8003820 <fflush>
    HAL_Delay(10000); // Add a delay to ensure stability
 8000798:	f242 7010 	movw	r0, #10000	@ 0x2710
 800079c:	f000 fbaa 	bl	8000ef4 <HAL_Delay>

    // Read user input for name
    int idx = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
    do {
        if (IsDataAvailable()) {
 80007a4:	f7ff ff64 	bl	8000670 <IsDataAvailable>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d019      	beq.n	80007e2 <writedata+0x76>
            char c = Uart_read();
 80007ae:	f7ff ff33 	bl	8000618 <Uart_read>
 80007b2:	4603      	mov	r3, r0
 80007b4:	70fb      	strb	r3, [r7, #3]
            printf("%c", c); // Echo back character to console
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 f919 	bl	80039f0 <putchar>
            fflush(stdout); // Ensure character is displayed immediately
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <writedata+0x11c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 f82b 	bl	8003820 <fflush>
            if (c == '\n') {
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	2b0a      	cmp	r3, #10
 80007ce:	d00e      	beq.n	80007ee <writedata+0x82>
                break; // Exit loop when Enter is pressed
            }
            name[idx++] = c;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	4929      	ldr	r1, [pc, #164]	@ (800087c <writedata+0x110>)
 80007d8:	78fa      	ldrb	r2, [r7, #3]
 80007da:	54ca      	strb	r2, [r1, r3]
            HAL_Delay(10); // Small delay for stability
 80007dc:	200a      	movs	r0, #10
 80007de:	f000 fb89 	bl	8000ef4 <HAL_Delay>
        }
    } while (IsDataAvailable());
 80007e2:	f7ff ff45 	bl	8000670 <IsDataAvailable>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1db      	bne.n	80007a4 <writedata+0x38>
 80007ec:	e000      	b.n	80007f0 <writedata+0x84>
                break; // Exit loop when Enter is pressed
 80007ee:	bf00      	nop
    name[idx] = '\0'; // Ensure null termination
 80007f0:	4a22      	ldr	r2, [pc, #136]	@ (800087c <writedata+0x110>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]

    printf("\r\nPlease Enter your Age:\r\n");
 80007fa:	4824      	ldr	r0, [pc, #144]	@ (800088c <writedata+0x120>)
 80007fc:	f003 f956 	bl	8003aac <puts>
    fflush(stdout);
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <writedata+0x11c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f80a 	bl	8003820 <fflush>
    HAL_Delay(10000);
 800080c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000810:	f000 fb70 	bl	8000ef4 <HAL_Delay>

    // Read user input for age
    idx = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
    do {
        if (IsDataAvailable()) {
 8000818:	f7ff ff2a 	bl	8000670 <IsDataAvailable>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <writedata+0xea>
            char c = Uart_read();
 8000822:	f7ff fef9 	bl	8000618 <Uart_read>
 8000826:	4603      	mov	r3, r0
 8000828:	70bb      	strb	r3, [r7, #2]
            printf("%c", c); // Echo back character to console
 800082a:	78bb      	ldrb	r3, [r7, #2]
 800082c:	4618      	mov	r0, r3
 800082e:	f003 f8df 	bl	80039f0 <putchar>
            fflush(stdout); // Ensure character is displayed immediately
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <writedata+0x11c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fff1 	bl	8003820 <fflush>
            if (c == '\n') {
 800083e:	78bb      	ldrb	r3, [r7, #2]
 8000840:	2b0a      	cmp	r3, #10
 8000842:	d00e      	beq.n	8000862 <writedata+0xf6>
                break; // Exit loop when Enter is pressed
            }
            age[idx++] = c;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <writedata+0x114>)
 800084c:	78ba      	ldrb	r2, [r7, #2]
 800084e:	54ca      	strb	r2, [r1, r3]
            HAL_Delay(10); // Small delay for stability
 8000850:	200a      	movs	r0, #10
 8000852:	f000 fb4f 	bl	8000ef4 <HAL_Delay>
        }
    } while (IsDataAvailable());
 8000856:	f7ff ff0b 	bl	8000670 <IsDataAvailable>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1db      	bne.n	8000818 <writedata+0xac>
 8000860:	e000      	b.n	8000864 <writedata+0xf8>
                break; // Exit loop when Enter is pressed
 8000862:	bf00      	nop
    age[idx] = '\0'; // Ensure null termination
 8000864:	4a06      	ldr	r2, [pc, #24]	@ (8000880 <writedata+0x114>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]

    printf("\r\nData written successfully!\r\n");
 800086e:	4808      	ldr	r0, [pc, #32]	@ (8000890 <writedata+0x124>)
 8000870:	f003 f91c 	bl	8003aac <puts>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000058c 	.word	0x2000058c
 8000880:	200005a0 	.word	0x200005a0
 8000884:	0800469c 	.word	0x0800469c
 8000888:	20000018 	.word	0x20000018
 800088c:	080046b8 	.word	0x080046b8
 8000890:	080046d4 	.word	0x080046d4

08000894 <printData>:


void printData(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	printf("\r\nName : %s\r\n", name);
 8000898:	4904      	ldr	r1, [pc, #16]	@ (80008ac <printData+0x18>)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <printData+0x1c>)
 800089c:	f003 f896 	bl	80039cc <iprintf>
	printf("\r\nAge : %s\r\n", age);
 80008a0:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <printData+0x20>)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <printData+0x24>)
 80008a4:	f003 f892 	bl	80039cc <iprintf>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000058c 	.word	0x2000058c
 80008b0:	080046f4 	.word	0x080046f4
 80008b4:	200005a0 	.word	0x200005a0
 80008b8:	08004704 	.word	0x08004704

080008bc <printMenu>:

void printMenu(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	printf("\r\nMenu:\n%s", MY_MENU);
 80008c0:	4902      	ldr	r1, [pc, #8]	@ (80008cc <printMenu+0x10>)
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <printMenu+0x14>)
 80008c4:	f003 f882 	bl	80039cc <iprintf>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	08004714 	.word	0x08004714
 80008d0:	08004738 	.word	0x08004738

080008d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008d8:	f000 fa97 	bl	8000e0a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008dc:	f000 f850 	bl	8000980 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008e0:	f000 f8cc 	bl	8000a7c <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80008e4:	f000 f89e 	bl	8000a24 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	Ringbuf_init();
 80008e8:	f7ff fe4a 	bl	8000580 <Ringbuf_init>
//	  break;
//  }
//  HAL_UART_Transmit(&hlpuart1,(uint8_t *)buffer, sizeof(buffer),1000);
//
//  HAL_Delay(1000);
	printf("\r\nMenu:\n%s", MY_MENU);
 80008ec:	491f      	ldr	r1, [pc, #124]	@ (800096c <main+0x98>)
 80008ee:	4820      	ldr	r0, [pc, #128]	@ (8000970 <main+0x9c>)
 80008f0:	f003 f86c 	bl	80039cc <iprintf>
////	  }
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*) buffer, sizeof(buffer), 1000);
//		memset(buffer, 0, 100);
//		HAL_Delay(100);
		do{
		if (IsDataAvailable()) {
 80008f4:	f7ff febc 	bl	8000670 <IsDataAvailable>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d02b      	beq.n	8000956 <main+0x82>
			cmd = Uart_read();
 80008fe:	f7ff fe8b 	bl	8000618 <Uart_read>
 8000902:	4603      	mov	r3, r0
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <main+0xa0>)
 8000906:	6013      	str	r3, [r2, #0]
			switch (cmd) {
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <main+0xa0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b4d      	cmp	r3, #77	@ 0x4d
 800090e:	d006      	beq.n	800091e <main+0x4a>
 8000910:	2b4d      	cmp	r3, #77	@ 0x4d
 8000912:	dc1c      	bgt.n	800094e <main+0x7a>
 8000914:	2b31      	cmp	r3, #49	@ 0x31
 8000916:	d00a      	beq.n	800092e <main+0x5a>
 8000918:	2b32      	cmp	r3, #50	@ 0x32
 800091a:	d010      	beq.n	800093e <main+0x6a>
 800091c:	e017      	b.n	800094e <main+0x7a>
			case 'M':
				memset(buffer, 0, 100);
 800091e:	2264      	movs	r2, #100	@ 0x64
 8000920:	2100      	movs	r1, #0
 8000922:	4815      	ldr	r0, [pc, #84]	@ (8000978 <main+0xa4>)
 8000924:	f003 f9a2 	bl	8003c6c <memset>
				printMenu();
 8000928:	f7ff ffc8 	bl	80008bc <printMenu>
				break;
 800092c:	e013      	b.n	8000956 <main+0x82>

			case '1':
				memset(buffer, 0, 100);
 800092e:	2264      	movs	r2, #100	@ 0x64
 8000930:	2100      	movs	r1, #0
 8000932:	4811      	ldr	r0, [pc, #68]	@ (8000978 <main+0xa4>)
 8000934:	f003 f99a 	bl	8003c6c <memset>
				writedata();
 8000938:	f7ff ff18 	bl	800076c <writedata>
				break;
 800093c:	e00b      	b.n	8000956 <main+0x82>

			case '2':
				memset(buffer, 0, 100);
 800093e:	2264      	movs	r2, #100	@ 0x64
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <main+0xa4>)
 8000944:	f003 f992 	bl	8003c6c <memset>
				printData();
 8000948:	f7ff ffa4 	bl	8000894 <printData>
				break;
 800094c:	e003      	b.n	8000956 <main+0x82>
			default:
				printf("Invalid Input\r\n");
 800094e:	480b      	ldr	r0, [pc, #44]	@ (800097c <main+0xa8>)
 8000950:	f003 f8ac 	bl	8003aac <puts>
				break;
 8000954:	bf00      	nop
			}
		}
		}while(IsDataAvailable());
 8000956:	f7ff fe8b 	bl	8000670 <IsDataAvailable>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1c9      	bne.n	80008f4 <main+0x20>
		HAL_Delay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000964:	f000 fac6 	bl	8000ef4 <HAL_Delay>
	while (1) {
 8000968:	e7c4      	b.n	80008f4 <main+0x20>
 800096a:	bf00      	nop
 800096c:	08004714 	.word	0x08004714
 8000970:	08004738 	.word	0x08004738
 8000974:	20000588 	.word	0x20000588
 8000978:	20000524 	.word	0x20000524
 800097c:	08004744 	.word	0x08004744

08000980 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b096      	sub	sp, #88	@ 0x58
 8000984:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2244      	movs	r2, #68	@ 0x44
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f003 f96c 	bl	8003c6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80009a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009a6:	f000 fd7b 	bl	80014a0 <HAL_PWREx_ControlVoltageScaling>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80009b0:	f000 f888 	bl	8000ac4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009bc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009be:	2340      	movs	r3, #64	@ 0x40
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80009ce:	230a      	movs	r3, #10
 80009d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fdc2 	bl	800156c <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x72>
		Error_Handler();
 80009ee:	f000 f869 	bl	8000ac4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2303      	movs	r3, #3
 80009f8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a02:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 f9c7 	bl	8001da0 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x9c>
		Error_Handler();
 8000a18:	f000 f854 	bl	8000ac4 <Error_Handler>
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3758      	adds	r7, #88	@ 0x58
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <MX_LPUART1_UART_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_LPUART1_UART_Init+0x50>)
 8000a62:	f002 f88b 	bl	8002b7c <HAL_UART_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 8000a6c:	f000 f82a 	bl	8000ac4 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000049c 	.word	0x2000049c
 8000a78:	40008000 	.word	0x40008000

08000a7c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_GPIO_Init+0x44>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <MX_GPIO_Init+0x44>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_GPIO_Init+0x44>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_EnableVddIO2();
 8000a9a:	f000 fd57 	bl	800154c <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <MX_GPIO_Init+0x44>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <MX_GPIO_Init+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <MX_GPIO_Init+0x44>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_MspInit+0x44>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ada:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <HAL_MspInit+0x44>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <HAL_MspInit+0x44>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <HAL_MspInit+0x44>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af2:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_MspInit+0x44>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	228c      	movs	r2, #140	@ 0x8c
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f897 	bl	8003c6c <memset>
  if(huart->Instance==LPUART1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a26      	ldr	r2, [pc, #152]	@ (8000bdc <HAL_UART_MspInit+0xc4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d145      	bne.n	8000bd4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fb47 	bl	80021e8 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b60:	f7ff ffb0 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b64:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b68:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b70:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7c:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b88:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_UART_MspInit+0xc8>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000b94:	f000 fcda 	bl	800154c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b98:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <HAL_UART_MspInit+0xcc>)
 8000bc0:	f000 face 	bl	8001160 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2046      	movs	r0, #70	@ 0x46
 8000bca:	f000 fa92 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000bce:	2046      	movs	r0, #70	@ 0x46
 8000bd0:	f000 faab 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	37b0      	adds	r7, #176	@ 0xb0
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40008000 	.word	0x40008000
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48001800 	.word	0x48001800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3e:	f000 f939 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	Uart_isr(&hlpuart1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <LPUART1_IRQHandler+0x10>)
 8000c4e:	f7ff fd2d 	bl	80006ac <Uart_isr>
  /* USER CODE END LPUART1_IRQn 0 */
  //HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000049c 	.word	0x2000049c

08000c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e00a      	b.n	8000c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6e:	f3af 8000 	nop.w
 8000c72:	4601      	mov	r1, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf0      	blt.n	8000c6e <_read+0x12>
  }

  return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (const unsigned char *)ptr, len, 100);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	2364      	movs	r3, #100	@ 0x64
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <_write+0x24>)
 8000cae:	f001 ffb3 	bl	8002c18 <HAL_UART_Transmit>
  return len;
 8000cb2:	687b      	ldr	r3, [r7, #4]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000049c 	.word	0x2000049c

08000cc0 <_close>:

int _close(int file)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_isatty>:

int _isatty(int file)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d00:	2301      	movs	r3, #1
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b085      	sub	sp, #20
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	@ (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 ffd6 	bl	8003d08 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20050000 	.word	0x20050000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200005a4 	.word	0x200005a4
 8000d90:	200006f8 	.word	0x200006f8

08000d94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dbc:	f7ff ffea 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	@ (8000df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <LoopForever+0xe>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e04 <LoopForever+0x16>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de6:	f002 ff95 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dea:	f7ff fd73 	bl	80008d4 <main>

08000dee <LoopForever>:

LoopForever:
    b LoopForever
 8000dee:	e7fe      	b.n	8000dee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dfc:	080047e0 	.word	0x080047e0
  ldr r2, =_sbss
 8000e00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e04:	200006f8 	.word	0x200006f8

08000e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_2_IRQHandler>

08000e0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f961 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f80e 	bl	8000e3c <HAL_InitTick>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e001      	b.n	8000e30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2c:	f7ff fe50 	bl	8000ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e48:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <HAL_InitTick+0x6c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d023      	beq.n	8000e98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <HAL_InitTick+0x70>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_InitTick+0x6c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f96d 	bl	8001146 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10f      	bne.n	8000e92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d809      	bhi.n	8000e8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f937 	bl	80010f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e84:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_InitTick+0x74>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e007      	b.n	8000e9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e004      	b.n	8000e9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
 8000e96:	e001      	b.n	8000e9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	200005a8 	.word	0x200005a8

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200005a8 	.word	0x200005a8

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	e166      	b.n	800143e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8158 	beq.w	8001438 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d005      	beq.n	80011a0 <HAL_GPIO_Init+0x40>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d130      	bne.n	8001202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f003 0201 	and.w	r2, r3, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b03      	cmp	r3, #3
 800120c:	d017      	beq.n	800123e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d123      	bne.n	8001292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	6939      	ldr	r1, [r7, #16]
 800128e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0203 	and.w	r2, r3, #3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80b2 	beq.w	8001438 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d4:	4b61      	ldr	r3, [pc, #388]	@ (800145c <HAL_GPIO_Init+0x2fc>)
 80012d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d8:	4a60      	ldr	r2, [pc, #384]	@ (800145c <HAL_GPIO_Init+0x2fc>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e0:	4b5e      	ldr	r3, [pc, #376]	@ (800145c <HAL_GPIO_Init+0x2fc>)
 80012e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001460 <HAL_GPIO_Init+0x300>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001316:	d02b      	beq.n	8001370 <HAL_GPIO_Init+0x210>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a52      	ldr	r2, [pc, #328]	@ (8001464 <HAL_GPIO_Init+0x304>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d025      	beq.n	800136c <HAL_GPIO_Init+0x20c>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a51      	ldr	r2, [pc, #324]	@ (8001468 <HAL_GPIO_Init+0x308>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d01f      	beq.n	8001368 <HAL_GPIO_Init+0x208>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a50      	ldr	r2, [pc, #320]	@ (800146c <HAL_GPIO_Init+0x30c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d019      	beq.n	8001364 <HAL_GPIO_Init+0x204>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <HAL_GPIO_Init+0x310>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d013      	beq.n	8001360 <HAL_GPIO_Init+0x200>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a4e      	ldr	r2, [pc, #312]	@ (8001474 <HAL_GPIO_Init+0x314>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d00d      	beq.n	800135c <HAL_GPIO_Init+0x1fc>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <HAL_GPIO_Init+0x318>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_Init+0x1f8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x31c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_GPIO_Init+0x1f4>
 8001350:	2307      	movs	r3, #7
 8001352:	e00e      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001354:	2308      	movs	r3, #8
 8001356:	e00c      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001358:	2306      	movs	r3, #6
 800135a:	e00a      	b.n	8001372 <HAL_GPIO_Init+0x212>
 800135c:	2305      	movs	r3, #5
 800135e:	e008      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001360:	2304      	movs	r3, #4
 8001362:	e006      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001364:	2303      	movs	r3, #3
 8001366:	e004      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001368:	2302      	movs	r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x212>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <HAL_GPIO_Init+0x212>
 8001370:	2300      	movs	r3, #0
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	f002 0203 	and.w	r2, r2, #3
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	4093      	lsls	r3, r2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001382:	4937      	ldr	r1, [pc, #220]	@ (8001460 <HAL_GPIO_Init+0x300>)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001390:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <HAL_GPIO_Init+0x320>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <HAL_GPIO_Init+0x320>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ba:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <HAL_GPIO_Init+0x320>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013de:	4a28      	ldr	r2, [pc, #160]	@ (8001480 <HAL_GPIO_Init+0x320>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <HAL_GPIO_Init+0x320>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_GPIO_Init+0x320>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <HAL_GPIO_Init+0x320>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001432:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <HAL_GPIO_Init+0x320>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	f47f ae91 	bne.w	8001170 <HAL_GPIO_Init+0x10>
  }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000
 8001464:	48000400 	.word	0x48000400
 8001468:	48000800 	.word	0x48000800
 800146c:	48000c00 	.word	0x48000c00
 8001470:	48001000 	.word	0x48001000
 8001474:	48001400 	.word	0x48001400
 8001478:	48001800 	.word	0x48001800
 800147c:	48001c00 	.word	0x48001c00
 8001480:	40010400 	.word	0x40010400

08001484 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <HAL_PWREx_GetVoltageRange+0x18>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ae:	d130      	bne.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b0:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014bc:	d038      	beq.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2232      	movs	r2, #50	@ 0x32
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	3301      	adds	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e4:	e002      	b.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f8:	d102      	bne.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f2      	bne.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150c:	d110      	bne.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e00f      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151e:	d007      	beq.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001528:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800152e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40007000 	.word	0x40007000
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83

0800154c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155a:	6053      	str	r3, [r2, #4]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007000 	.word	0x40007000

0800156c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f000 bc08 	b.w	8001d90 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001580:	4b96      	ldr	r3, [pc, #600]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800158a:	4b94      	ldr	r3, [pc, #592]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80e4 	beq.w	800176a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4c>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	f040 808b 	bne.w	80016c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	f040 8087 	bne.w	80016c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b8:	4b88      	ldr	r3, [pc, #544]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x64>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e3df      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	4b81      	ldr	r3, [pc, #516]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <HAL_RCC_OscConfig+0x7e>
 80015e0:	4b7e      	ldr	r3, [pc, #504]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e8:	e005      	b.n	80015f6 <HAL_RCC_OscConfig+0x8a>
 80015ea:	4b7c      	ldr	r3, [pc, #496]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80015ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d223      	bcs.n	8001642 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fd92 	bl	8002128 <RCC_SetFlashLatencyFromMSIRange>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e3c0      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160e:	4b73      	ldr	r3, [pc, #460]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a72      	ldr	r2, [pc, #456]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b70      	ldr	r3, [pc, #448]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	496d      	ldr	r1, [pc, #436]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001628:	4313      	orrs	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162c:	4b6b      	ldr	r3, [pc, #428]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	4968      	ldr	r1, [pc, #416]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
 8001640:	e025      	b.n	800168e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001642:	4b66      	ldr	r3, [pc, #408]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a65      	ldr	r2, [pc, #404]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b63      	ldr	r3, [pc, #396]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4960      	ldr	r1, [pc, #384]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001660:	4b5e      	ldr	r3, [pc, #376]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	495b      	ldr	r1, [pc, #364]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fd52 	bl	8002128 <RCC_SetFlashLatencyFromMSIRange>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e380      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800168e:	f000 fc87 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001692:	4602      	mov	r2, r0
 8001694:	4b51      	ldr	r3, [pc, #324]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	4950      	ldr	r1, [pc, #320]	@ (80017e0 <HAL_RCC_OscConfig+0x274>)
 80016a0:	5ccb      	ldrb	r3, [r1, r3]
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	4a4e      	ldr	r2, [pc, #312]	@ (80017e4 <HAL_RCC_OscConfig+0x278>)
 80016ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ae:	4b4e      	ldr	r3, [pc, #312]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fbc2 	bl	8000e3c <HAL_InitTick>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d052      	beq.n	8001768 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	e364      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d032      	beq.n	8001734 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ce:	4b43      	ldr	r3, [pc, #268]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a42      	ldr	r2, [pc, #264]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016da:	f7ff fbff 	bl	8000edc <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e2:	f7ff fbfb 	bl	8000edc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e34d      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f4:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001700:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a35      	ldr	r2, [pc, #212]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b33      	ldr	r3, [pc, #204]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4930      	ldr	r1, [pc, #192]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171e:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	492b      	ldr	r1, [pc, #172]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
 8001732:	e01a      	b.n	800176a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a28      	ldr	r2, [pc, #160]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001740:	f7ff fbcc 	bl	8000edc <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001748:	f7ff fbc8 	bl	8000edc <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e31a      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800175a:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x1dc>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d073      	beq.n	800185e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b08      	cmp	r3, #8
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x21c>
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d10e      	bne.n	80017a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d10b      	bne.n	80017a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d063      	beq.n	800185c <HAL_RCC_OscConfig+0x2f0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d15f      	bne.n	800185c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e2f7      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x24c>
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a0b      	ldr	r2, [pc, #44]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e025      	b.n	8001804 <HAL_RCC_OscConfig+0x298>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c0:	d114      	bne.n	80017ec <HAL_RCC_OscConfig+0x280>
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a02      	ldr	r2, [pc, #8]	@ (80017dc <HAL_RCC_OscConfig+0x270>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e013      	b.n	8001804 <HAL_RCC_OscConfig+0x298>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	08004754 	.word	0x08004754
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004
 80017ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a9f      	ldr	r2, [pc, #636]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fb66 	bl	8000edc <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fb62 	bl	8000edc <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e2b4      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001826:	4b92      	ldr	r3, [pc, #584]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x2a8>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fb52 	bl	8000edc <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fb4e 	bl	8000edc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	@ 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e2a0      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184e:	4b88      	ldr	r3, [pc, #544]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x2d0>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d060      	beq.n	800192c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b04      	cmp	r3, #4
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x310>
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d119      	bne.n	80018aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d116      	bne.n	80018aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_OscConfig+0x328>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e27d      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	4973      	ldr	r1, [pc, #460]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a8:	e040      	b.n	800192c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d023      	beq.n	80018fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff fb0d 	bl	8000edc <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c6:	f7ff fb09 	bl	8000edc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e25b      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d8:	4b65      	ldr	r3, [pc, #404]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b62      	ldr	r3, [pc, #392]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	495f      	ldr	r1, [pc, #380]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	e018      	b.n	800192c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff fae9 	bl	8000edc <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff fae5 	bl	8000edc <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e237      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001920:	4b53      	ldr	r3, [pc, #332]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01c      	beq.n	800197a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001940:	4b4b      	ldr	r3, [pc, #300]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001946:	4a4a      	ldr	r2, [pc, #296]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fac4 	bl	8000edc <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fac0 	bl	8000edc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e212      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196a:	4b41      	ldr	r3, [pc, #260]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 800196c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ef      	beq.n	8001958 <HAL_RCC_OscConfig+0x3ec>
 8001978:	e01b      	b.n	80019b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001980:	4a3b      	ldr	r2, [pc, #236]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff faa7 	bl	8000edc <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff faa3 	bl	8000edc <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1f5      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a4:	4b32      	ldr	r3, [pc, #200]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ef      	bne.n	8001992 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80a6 	beq.w	8001b0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10d      	bne.n	80019ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d0:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	4a26      	ldr	r2, [pc, #152]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019da:	6593      	str	r3, [r2, #88]	@ 0x58
 80019dc:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e8:	2301      	movs	r3, #1
 80019ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ec:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <HAL_RCC_OscConfig+0x508>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d118      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a74 <HAL_RCC_OscConfig+0x508>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a74 <HAL_RCC_OscConfig+0x508>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a04:	f7ff fa6a 	bl	8000edc <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0c:	f7ff fa66 	bl	8000edc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1b8      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_RCC_OscConfig+0x508>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d108      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4d8>
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a42:	e029      	b.n	8001a98 <HAL_RCC_OscConfig+0x52c>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d115      	bne.n	8001a78 <HAL_RCC_OscConfig+0x50c>
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a52:	4a07      	ldr	r2, [pc, #28]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a62:	4a03      	ldr	r2, [pc, #12]	@ (8001a70 <HAL_RCC_OscConfig+0x504>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x52c>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	4b9d      	ldr	r3, [pc, #628]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7e:	4a9c      	ldr	r2, [pc, #624]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a88:	4b99      	ldr	r3, [pc, #612]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8e:	4a98      	ldr	r2, [pc, #608]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d016      	beq.n	8001ace <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fa1c 	bl	8000edc <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fa18 	bl	8000edc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e168      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001abe:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ed      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x53c>
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff fa05 	bl	8000edc <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff fa01 	bl	8000edc <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e151      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aec:	4b80      	ldr	r3, [pc, #512]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ed      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b00:	4b7b      	ldr	r3, [pc, #492]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	4a7a      	ldr	r2, [pc, #488]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d03c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b20:	4b73      	ldr	r3, [pc, #460]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b26:	4a72      	ldr	r2, [pc, #456]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff f9d4 	bl	8000edc <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b38:	f7ff f9d0 	bl	8000edc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e122      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b4a:	4b69      	ldr	r3, [pc, #420]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ef      	beq.n	8001b38 <HAL_RCC_OscConfig+0x5cc>
 8001b58:	e01b      	b.n	8001b92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b5a:	4b65      	ldr	r3, [pc, #404]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b60:	4a63      	ldr	r2, [pc, #396]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f9b7 	bl	8000edc <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b72:	f7ff f9b3 	bl	8000edc <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e105      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b84:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ef      	bne.n	8001b72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80f9 	beq.w	8001d8e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	f040 80cf 	bne.w	8001d44 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ba6:	4b52      	ldr	r3, [pc, #328]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0203 	and.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d12c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d123      	bne.n	8001c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d11b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d113      	bne.n	8001c14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d109      	bne.n	8001c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	085b      	lsrs	r3, r3, #1
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d071      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d068      	beq.n	8001cec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c1a:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c26:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0ac      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c36:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001c3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c42:	f7ff f94b 	bl	8000edc <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff f947 	bl	8000edc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e099      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_RCC_OscConfig+0x788>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c82:	0212      	lsls	r2, r2, #8
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c8a:	0852      	lsrs	r2, r2, #1
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	0552      	lsls	r2, r2, #21
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c96:	0852      	lsrs	r2, r2, #1
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0652      	lsls	r2, r2, #25
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ca2:	06d2      	lsls	r2, r2, #27
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	4912      	ldr	r1, [pc, #72]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cac:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc4:	f7ff f90a 	bl	8000edc <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff f906 	bl	8000edc <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e058      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <HAL_RCC_OscConfig+0x784>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cea:	e050      	b.n	8001d8e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e04f      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf8:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d144      	bne.n	8001d8e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d10:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a20      	ldr	r2, [pc, #128]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d1c:	f7ff f8de 	bl	8000edc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff f8da 	bl	8000edc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e02c      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x7b8>
 8001d42:	e024      	b.n	8001d8e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d01f      	beq.n	8001d8a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff f8c1 	bl	8000edc <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f8bd 	bl	8000edc <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4905      	ldr	r1, [pc, #20]	@ (8001d98 <HAL_RCC_OscConfig+0x82c>)
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_RCC_OscConfig+0x830>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
 8001d88:	e001      	b.n	8001d8e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	feeefffc 	.word	0xfeeefffc

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0e7      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b75      	ldr	r3, [pc, #468]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d910      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b72      	ldr	r3, [pc, #456]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4970      	ldr	r1, [pc, #448]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0cf      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d010      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4b66      	ldr	r3, [pc, #408]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d908      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b63      	ldr	r3, [pc, #396]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4960      	ldr	r1, [pc, #384]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d04c      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	4b5a      	ldr	r3, [pc, #360]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d121      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0a6      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	4b54      	ldr	r3, [pc, #336]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e09a      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e56:	4b4e      	ldr	r3, [pc, #312]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e08e      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e086      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e76:	4b46      	ldr	r3, [pc, #280]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4943      	ldr	r1, [pc, #268]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e88:	f7ff f828 	bl	8000edc <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7ff f824 	bl	8000edc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e06e      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 020c 	and.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1eb      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d208      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	492b      	ldr	r1, [pc, #172]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d210      	bcs.n	8001f16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 0207 	bic.w	r2, r3, #7
 8001efc:	4923      	ldr	r1, [pc, #140]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f04:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e036      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4918      	ldr	r1, [pc, #96]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4910      	ldr	r1, [pc, #64]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f54:	f000 f824 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	490b      	ldr	r1, [pc, #44]	@ (8001f94 <HAL_RCC_ClockConfig+0x1f4>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f70:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_ClockConfig+0x1fc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe ff5f 	bl	8000e3c <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f82:	7afb      	ldrb	r3, [r7, #11]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08004754 	.word	0x08004754
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4b3e      	ldr	r3, [pc, #248]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d121      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d11e      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fe0:	4b31      	ldr	r3, [pc, #196]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10d      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d102      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002018:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	e004      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d101      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002026:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d134      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800202e:	4b1e      	ldr	r3, [pc, #120]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d003      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0xa6>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d003      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0xac>
 8002044:	e005      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002048:	617b      	str	r3, [r7, #20]
      break;
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800204e:	617b      	str	r3, [r7, #20]
      break;
 8002050:	e002      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002058:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	3301      	adds	r3, #1
 8002064:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	fb03 f202 	mul.w	r2, r3, r2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	0e5b      	lsrs	r3, r3, #25
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	3301      	adds	r3, #1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002098:	69bb      	ldr	r3, [r7, #24]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	@ 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	0800476c 	.word	0x0800476c
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200

080020b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_RCC_GetHCLKFreq+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020d4:	f7ff fff0 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4904      	ldr	r1, [pc, #16]	@ (80020f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08004764 	.word	0x08004764

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002100:	f7ff ffda 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0adb      	lsrs	r3, r3, #11
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4904      	ldr	r1, [pc, #16]	@ (8002124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	08004764 	.word	0x08004764

08002128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002134:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002140:	f7ff f9a0 	bl	8001484 <HAL_PWREx_GetVoltageRange>
 8002144:	6178      	str	r0, [r7, #20]
 8002146:	e014      	b.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214c:	4a24      	ldr	r2, [pc, #144]	@ (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002152:	6593      	str	r3, [r2, #88]	@ 0x58
 8002154:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002160:	f7ff f990 	bl	8001484 <HAL_PWREx_GetVoltageRange>
 8002164:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002170:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002178:	d10b      	bne.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b80      	cmp	r3, #128	@ 0x80
 800217e:	d919      	bls.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2ba0      	cmp	r3, #160	@ 0xa0
 8002184:	d902      	bls.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002186:	2302      	movs	r3, #2
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e013      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800218c:	2301      	movs	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e010      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b80      	cmp	r3, #128	@ 0x80
 8002196:	d902      	bls.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002198:	2303      	movs	r3, #3
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e00a      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b80      	cmp	r3, #128	@ 0x80
 80021a2:	d102      	bne.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a4:	2302      	movs	r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e004      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b70      	cmp	r3, #112	@ 0x70
 80021ae:	d101      	bne.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021b0:	2301      	movs	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 0207 	bic.w	r2, r3, #7
 80021bc:	4909      	ldr	r1, [pc, #36]	@ (80021e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021c4:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021f0:	2300      	movs	r3, #0
 80021f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021f4:	2300      	movs	r3, #0
 80021f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002200:	2b00      	cmp	r3, #0
 8002202:	d041      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002208:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800220c:	d02a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800220e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002212:	d824      	bhi.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002214:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002218:	d008      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800221a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800221e:	d81e      	bhi.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002228:	d010      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800222a:	e018      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800222c:	4b86      	ldr	r3, [pc, #536]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a85      	ldr	r2, [pc, #532]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002236:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002238:	e015      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f000 facd 	bl	80027e0 <RCCEx_PLLSAI1_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800224a:	e00c      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3320      	adds	r3, #32
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fbb6 	bl	80029c4 <RCCEx_PLLSAI2_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800225c:	e003      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	74fb      	strb	r3, [r7, #19]
      break;
 8002262:	e000      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800226c:	4b76      	ldr	r3, [pc, #472]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800227a:	4973      	ldr	r1, [pc, #460]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002282:	e001      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d041      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002298:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800229c:	d02a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800229e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022a2:	d824      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022a8:	d008      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022ae:	d81e      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b8:	d010      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ba:	e018      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022bc:	4b62      	ldr	r3, [pc, #392]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a61      	ldr	r2, [pc, #388]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022c8:	e015      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fa85 	bl	80027e0 <RCCEx_PLLSAI1_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022da:	e00c      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3320      	adds	r3, #32
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fb6e 	bl	80029c4 <RCCEx_PLLSAI2_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ec:	e003      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	74fb      	strb	r3, [r7, #19]
      break;
 80022f2:	e000      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022fc:	4b52      	ldr	r3, [pc, #328]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002302:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800230a:	494f      	ldr	r1, [pc, #316]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002312:	e001      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a0 	beq.w	8002466 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800232a:	4b47      	ldr	r3, [pc, #284]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	4b41      	ldr	r3, [pc, #260]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	4a40      	ldr	r2, [pc, #256]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	@ 0x58
 800234c:	4b3e      	ldr	r3, [pc, #248]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002358:	2301      	movs	r3, #1
 800235a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235c:	4b3b      	ldr	r3, [pc, #236]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a3a      	ldr	r2, [pc, #232]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002368:	f7fe fdb8 	bl	8000edc <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800236e:	e009      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002370:	f7fe fdb4 	bl	8000edc <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d902      	bls.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	74fb      	strb	r3, [r7, #19]
        break;
 8002382:	e005      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002384:	4b31      	ldr	r3, [pc, #196]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ef      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d15c      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002396:	4b2c      	ldr	r3, [pc, #176]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01f      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d019      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b4:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023c0:	4b21      	ldr	r3, [pc, #132]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	4a20      	ldr	r2, [pc, #128]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023e0:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd73 	bl	8000edc <HAL_GetTick>
 80023f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f8:	e00b      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fd6f 	bl	8000edc <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d902      	bls.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	74fb      	strb	r3, [r7, #19]
            break;
 8002410:	e006      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ec      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002436:	4904      	ldr	r1, [pc, #16]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800243e:	e009      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
 8002444:	e006      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002454:	7c7b      	ldrb	r3, [r7, #17]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d105      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4ba6      	ldr	r3, [pc, #664]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	4aa5      	ldr	r2, [pc, #660]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002464:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002472:	4ba0      	ldr	r3, [pc, #640]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002478:	f023 0203 	bic.w	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002480:	499c      	ldr	r1, [pc, #624]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002494:	4b97      	ldr	r3, [pc, #604]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	f023 020c 	bic.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a2:	4994      	ldr	r1, [pc, #592]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b6:	4b8f      	ldr	r3, [pc, #572]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	498b      	ldr	r1, [pc, #556]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d8:	4b86      	ldr	r3, [pc, #536]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	4983      	ldr	r1, [pc, #524]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024fa:	4b7e      	ldr	r3, [pc, #504]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002508:	497a      	ldr	r1, [pc, #488]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800251c:	4b75      	ldr	r3, [pc, #468]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252a:	4972      	ldr	r1, [pc, #456]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800253e:	4b6d      	ldr	r3, [pc, #436]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002544:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254c:	4969      	ldr	r1, [pc, #420]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002560:	4b64      	ldr	r3, [pc, #400]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002566:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800256e:	4961      	ldr	r1, [pc, #388]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002582:	4b5c      	ldr	r3, [pc, #368]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002588:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002590:	4958      	ldr	r1, [pc, #352]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a4:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b2:	4950      	ldr	r1, [pc, #320]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025c6:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	4947      	ldr	r1, [pc, #284]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025e8:	4b42      	ldr	r3, [pc, #264]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f6:	493f      	ldr	r1, [pc, #252]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d028      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800260a:	4b3a      	ldr	r3, [pc, #232]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002610:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	4936      	ldr	r1, [pc, #216]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002624:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002628:	d106      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262a:	4b32      	ldr	r3, [pc, #200]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4a31      	ldr	r2, [pc, #196]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002630:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002634:	60d3      	str	r3, [r2, #12]
 8002636:	e011      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002640:	d10c      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	2101      	movs	r1, #1
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f8c9 	bl	80027e0 <RCCEx_PLLSAI1_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d028      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002668:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002676:	491f      	ldr	r1, [pc, #124]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002686:	d106      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002688:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a19      	ldr	r2, [pc, #100]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002692:	60d3      	str	r3, [r2, #12]
 8002694:	e011      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800269e:	d10c      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f89a 	bl	80027e0 <RCCEx_PLLSAI1_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c6:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026d4:	4907      	ldr	r1, [pc, #28]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026e4:	d108      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e6:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4a02      	ldr	r2, [pc, #8]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f0:	60d3      	str	r3, [r2, #12]
 80026f2:	e013      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80026f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f869 	bl	80027e0 <RCCEx_PLLSAI1_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02f      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002728:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002736:	4929      	ldr	r1, [pc, #164]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002746:	d10d      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	2102      	movs	r1, #2
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f846 	bl	80027e0 <RCCEx_PLLSAI1_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d014      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	74bb      	strb	r3, [r7, #18]
 8002762:	e011      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800276c:	d10c      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3320      	adds	r3, #32
 8002772:	2102      	movs	r1, #2
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f925 	bl	80029c4 <RCCEx_PLLSAI2_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027a4:	490d      	ldr	r1, [pc, #52]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027c8:	4904      	ldr	r1, [pc, #16]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000

080027e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ee:	4b74      	ldr	r3, [pc, #464]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d018      	beq.n	800282c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027fa:	4b71      	ldr	r3, [pc, #452]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0203 	and.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d10d      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
       ||
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002812:	4b6b      	ldr	r3, [pc, #428]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
       ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d047      	beq.n	80028b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e044      	b.n	80028b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d018      	beq.n	8002866 <RCCEx_PLLSAI1_Config+0x86>
 8002834:	2b03      	cmp	r3, #3
 8002836:	d825      	bhi.n	8002884 <RCCEx_PLLSAI1_Config+0xa4>
 8002838:	2b01      	cmp	r3, #1
 800283a:	d002      	beq.n	8002842 <RCCEx_PLLSAI1_Config+0x62>
 800283c:	2b02      	cmp	r3, #2
 800283e:	d009      	beq.n	8002854 <RCCEx_PLLSAI1_Config+0x74>
 8002840:	e020      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002842:	4b5f      	ldr	r3, [pc, #380]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11d      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002852:	e01a      	b.n	800288a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002854:	4b5a      	ldr	r3, [pc, #360]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d116      	bne.n	800288e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002864:	e013      	b.n	800288e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002866:	4b56      	ldr	r3, [pc, #344]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10f      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002872:	4b53      	ldr	r3, [pc, #332]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002882:	e006      	b.n	8002892 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      break;
 8002888:	e004      	b.n	8002894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800288a:	bf00      	nop
 800288c:	e002      	b.n	8002894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800288e:	bf00      	nop
 8002890:	e000      	b.n	8002894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002892:	bf00      	nop
    }

    if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10d      	bne.n	80028b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800289a:	4b49      	ldr	r3, [pc, #292]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	430b      	orrs	r3, r1
 80028b0:	4943      	ldr	r1, [pc, #268]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d17c      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028bc:	4b40      	ldr	r3, [pc, #256]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3f      	ldr	r2, [pc, #252]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c8:	f7fe fb08 	bl	8000edc <HAL_GetTick>
 80028cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028ce:	e009      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d0:	f7fe fb04 	bl	8000edc <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d902      	bls.n	80028e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	73fb      	strb	r3, [r7, #15]
        break;
 80028e2:	e005      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ef      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d15f      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d110      	bne.n	800291e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028fc:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002904:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6892      	ldr	r2, [r2, #8]
 800290c:	0211      	lsls	r1, r2, #8
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68d2      	ldr	r2, [r2, #12]
 8002912:	06d2      	lsls	r2, r2, #27
 8002914:	430a      	orrs	r2, r1
 8002916:	492a      	ldr	r1, [pc, #168]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	610b      	str	r3, [r1, #16]
 800291c:	e027      	b.n	800296e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d112      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002924:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800292c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	0211      	lsls	r1, r2, #8
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6912      	ldr	r2, [r2, #16]
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0552      	lsls	r2, r2, #21
 8002940:	430a      	orrs	r2, r1
 8002942:	491f      	ldr	r1, [pc, #124]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	610b      	str	r3, [r1, #16]
 8002948:	e011      	b.n	800296e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800294a:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002952:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6892      	ldr	r2, [r2, #8]
 800295a:	0211      	lsls	r1, r2, #8
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6952      	ldr	r2, [r2, #20]
 8002960:	0852      	lsrs	r2, r2, #1
 8002962:	3a01      	subs	r2, #1
 8002964:	0652      	lsls	r2, r2, #25
 8002966:	430a      	orrs	r2, r1
 8002968:	4915      	ldr	r1, [pc, #84]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296a:	4313      	orrs	r3, r2
 800296c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800296e:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a13      	ldr	r2, [pc, #76]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002974:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002978:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7fe faaf 	bl	8000edc <HAL_GetTick>
 800297e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002980:	e009      	b.n	8002996 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002982:	f7fe faab 	bl	8000edc <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d902      	bls.n	8002996 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	73fb      	strb	r3, [r7, #15]
          break;
 8002994:	e005      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0ef      	beq.n	8002982 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4903      	ldr	r1, [pc, #12]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000

080029c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029d2:	4b69      	ldr	r3, [pc, #420]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d018      	beq.n	8002a10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029de:	4b66      	ldr	r3, [pc, #408]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0203 	and.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d10d      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
       ||
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029f6:	4b60      	ldr	r3, [pc, #384]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
       ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d047      	beq.n	8002a9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e044      	b.n	8002a9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d018      	beq.n	8002a4a <RCCEx_PLLSAI2_Config+0x86>
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d825      	bhi.n	8002a68 <RCCEx_PLLSAI2_Config+0xa4>
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d002      	beq.n	8002a26 <RCCEx_PLLSAI2_Config+0x62>
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d009      	beq.n	8002a38 <RCCEx_PLLSAI2_Config+0x74>
 8002a24:	e020      	b.n	8002a68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a26:	4b54      	ldr	r3, [pc, #336]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11d      	bne.n	8002a6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e01a      	b.n	8002a6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a38:	4b4f      	ldr	r3, [pc, #316]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d116      	bne.n	8002a72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e013      	b.n	8002a72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a56:	4b48      	ldr	r3, [pc, #288]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a66:	e006      	b.n	8002a76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e004      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10d      	bne.n	8002a9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	430b      	orrs	r3, r1
 8002a94:	4938      	ldr	r1, [pc, #224]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d166      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002aa0:	4b35      	ldr	r3, [pc, #212]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a34      	ldr	r2, [pc, #208]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aac:	f7fe fa16 	bl	8000edc <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ab2:	e009      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ab4:	f7fe fa12 	bl	8000edc <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d902      	bls.n	8002ac8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ac6:	e005      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ef      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d149      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d110      	bne.n	8002b02 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ae0:	4b25      	ldr	r3, [pc, #148]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002ae8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6892      	ldr	r2, [r2, #8]
 8002af0:	0211      	lsls	r1, r2, #8
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68d2      	ldr	r2, [r2, #12]
 8002af6:	06d2      	lsls	r2, r2, #27
 8002af8:	430a      	orrs	r2, r1
 8002afa:	491f      	ldr	r1, [pc, #124]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	614b      	str	r3, [r1, #20]
 8002b00:	e011      	b.n	8002b26 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b02:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6892      	ldr	r2, [r2, #8]
 8002b12:	0211      	lsls	r1, r2, #8
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6912      	ldr	r2, [r2, #16]
 8002b18:	0852      	lsrs	r2, r2, #1
 8002b1a:	3a01      	subs	r2, #1
 8002b1c:	0652      	lsls	r2, r2, #25
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	4915      	ldr	r1, [pc, #84]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b26:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a13      	ldr	r2, [pc, #76]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7fe f9d3 	bl	8000edc <HAL_GetTick>
 8002b36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b38:	e009      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b3a:	f7fe f9cf 	bl	8000edc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d902      	bls.n	8002b4e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b4c:	e005      	b.n	8002b5a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ef      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4903      	ldr	r1, [pc, #12]	@ (8002b78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e040      	b.n	8002c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd ffba 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	@ 0x24
 8002ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fb6a 	bl	800329c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f8af 	bl	8002d2c <UART_SetConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e01b      	b.n	8002c10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fbe9 	bl	80033e0 <UART_CheckIdleState>
 8002c0e:	4603      	mov	r3, r0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d177      	bne.n	8002d20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_UART_Transmit+0x24>
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e070      	b.n	8002d22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2221      	movs	r2, #33	@ 0x21
 8002c4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4e:	f7fe f945 	bl	8000edc <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6c:	d108      	bne.n	8002c80 <HAL_UART_Transmit+0x68>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e003      	b.n	8002c88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c88:	e02f      	b.n	8002cea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fc4b 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e03b      	b.n	8002d22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e007      	b.n	8002cd8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1c9      	bne.n	8002c8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2140      	movs	r1, #64	@ 0x40
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fc15 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e005      	b.n	8002d22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b08a      	sub	sp, #40	@ 0x28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4ba4      	ldr	r3, [pc, #656]	@ (8002fec <UART_SetConfig+0x2c0>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a99      	ldr	r2, [pc, #612]	@ (8002ff0 <UART_SetConfig+0x2c4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	4313      	orrs	r3, r2
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da8:	430a      	orrs	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a90      	ldr	r2, [pc, #576]	@ (8002ff4 <UART_SetConfig+0x2c8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d126      	bne.n	8002e04 <UART_SetConfig+0xd8>
 8002db6:	4b90      	ldr	r3, [pc, #576]	@ (8002ff8 <UART_SetConfig+0x2cc>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d81b      	bhi.n	8002dfc <UART_SetConfig+0xd0>
 8002dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <UART_SetConfig+0xa0>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002ddd 	.word	0x08002ddd
 8002dd0:	08002ded 	.word	0x08002ded
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002df5 	.word	0x08002df5
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002de2:	e116      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002de4:	2302      	movs	r3, #2
 8002de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dea:	e112      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002dec:	2304      	movs	r3, #4
 8002dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df2:	e10e      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002df4:	2308      	movs	r3, #8
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfa:	e10a      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e02:	e106      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a7c      	ldr	r2, [pc, #496]	@ (8002ffc <UART_SetConfig+0x2d0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d138      	bne.n	8002e80 <UART_SetConfig+0x154>
 8002e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002ff8 <UART_SetConfig+0x2cc>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b0c      	cmp	r3, #12
 8002e1a:	d82d      	bhi.n	8002e78 <UART_SetConfig+0x14c>
 8002e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <UART_SetConfig+0xf8>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08002e79 	.word	0x08002e79
 8002e2c:	08002e79 	.word	0x08002e79
 8002e30:	08002e79 	.word	0x08002e79
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08002e79 	.word	0x08002e79
 8002e3c:	08002e79 	.word	0x08002e79
 8002e40:	08002e79 	.word	0x08002e79
 8002e44:	08002e61 	.word	0x08002e61
 8002e48:	08002e79 	.word	0x08002e79
 8002e4c:	08002e79 	.word	0x08002e79
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	08002e71 	.word	0x08002e71
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5e:	e0d8      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002e60:	2302      	movs	r3, #2
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e66:	e0d4      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e6e:	e0d0      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002e70:	2308      	movs	r3, #8
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e76:	e0cc      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e7e:	e0c8      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5e      	ldr	r2, [pc, #376]	@ (8003000 <UART_SetConfig+0x2d4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d125      	bne.n	8002ed6 <UART_SetConfig+0x1aa>
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff8 <UART_SetConfig+0x2cc>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d016      	beq.n	8002ec6 <UART_SetConfig+0x19a>
 8002e98:	2b30      	cmp	r3, #48	@ 0x30
 8002e9a:	d818      	bhi.n	8002ece <UART_SetConfig+0x1a2>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d00a      	beq.n	8002eb6 <UART_SetConfig+0x18a>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d814      	bhi.n	8002ece <UART_SetConfig+0x1a2>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <UART_SetConfig+0x182>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d008      	beq.n	8002ebe <UART_SetConfig+0x192>
 8002eac:	e00f      	b.n	8002ece <UART_SetConfig+0x1a2>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb4:	e0ad      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ebc:	e0a9      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec4:	e0a5      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ecc:	e0a1      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002ece:	2310      	movs	r3, #16
 8002ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ed4:	e09d      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a4a      	ldr	r2, [pc, #296]	@ (8003004 <UART_SetConfig+0x2d8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d125      	bne.n	8002f2c <UART_SetConfig+0x200>
 8002ee0:	4b45      	ldr	r3, [pc, #276]	@ (8002ff8 <UART_SetConfig+0x2cc>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eec:	d016      	beq.n	8002f1c <UART_SetConfig+0x1f0>
 8002eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ef0:	d818      	bhi.n	8002f24 <UART_SetConfig+0x1f8>
 8002ef2:	2b80      	cmp	r3, #128	@ 0x80
 8002ef4:	d00a      	beq.n	8002f0c <UART_SetConfig+0x1e0>
 8002ef6:	2b80      	cmp	r3, #128	@ 0x80
 8002ef8:	d814      	bhi.n	8002f24 <UART_SetConfig+0x1f8>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <UART_SetConfig+0x1d8>
 8002efe:	2b40      	cmp	r3, #64	@ 0x40
 8002f00:	d008      	beq.n	8002f14 <UART_SetConfig+0x1e8>
 8002f02:	e00f      	b.n	8002f24 <UART_SetConfig+0x1f8>
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f0a:	e082      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f12:	e07e      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f14:	2304      	movs	r3, #4
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f1a:	e07a      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f22:	e076      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f24:	2310      	movs	r3, #16
 8002f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2a:	e072      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a35      	ldr	r2, [pc, #212]	@ (8003008 <UART_SetConfig+0x2dc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d12a      	bne.n	8002f8c <UART_SetConfig+0x260>
 8002f36:	4b30      	ldr	r3, [pc, #192]	@ (8002ff8 <UART_SetConfig+0x2cc>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f44:	d01a      	beq.n	8002f7c <UART_SetConfig+0x250>
 8002f46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f4a:	d81b      	bhi.n	8002f84 <UART_SetConfig+0x258>
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f50:	d00c      	beq.n	8002f6c <UART_SetConfig+0x240>
 8002f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f56:	d815      	bhi.n	8002f84 <UART_SetConfig+0x258>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <UART_SetConfig+0x238>
 8002f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f60:	d008      	beq.n	8002f74 <UART_SetConfig+0x248>
 8002f62:	e00f      	b.n	8002f84 <UART_SetConfig+0x258>
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6a:	e052      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f72:	e04e      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f74:	2304      	movs	r3, #4
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7a:	e04a      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f82:	e046      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f84:	2310      	movs	r3, #16
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8a:	e042      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a17      	ldr	r2, [pc, #92]	@ (8002ff0 <UART_SetConfig+0x2c4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d13a      	bne.n	800300c <UART_SetConfig+0x2e0>
 8002f96:	4b18      	ldr	r3, [pc, #96]	@ (8002ff8 <UART_SetConfig+0x2cc>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fa4:	d01a      	beq.n	8002fdc <UART_SetConfig+0x2b0>
 8002fa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002faa:	d81b      	bhi.n	8002fe4 <UART_SetConfig+0x2b8>
 8002fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb0:	d00c      	beq.n	8002fcc <UART_SetConfig+0x2a0>
 8002fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb6:	d815      	bhi.n	8002fe4 <UART_SetConfig+0x2b8>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <UART_SetConfig+0x298>
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc0:	d008      	beq.n	8002fd4 <UART_SetConfig+0x2a8>
 8002fc2:	e00f      	b.n	8002fe4 <UART_SetConfig+0x2b8>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fca:	e022      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd2:	e01e      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fda:	e01a      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002fdc:	2308      	movs	r3, #8
 8002fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe2:	e016      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fea:	e012      	b.n	8003012 <UART_SetConfig+0x2e6>
 8002fec:	efff69f3 	.word	0xefff69f3
 8002ff0:	40008000 	.word	0x40008000
 8002ff4:	40013800 	.word	0x40013800
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40004400 	.word	0x40004400
 8003000:	40004800 	.word	0x40004800
 8003004:	40004c00 	.word	0x40004c00
 8003008:	40005000 	.word	0x40005000
 800300c:	2310      	movs	r3, #16
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a9f      	ldr	r2, [pc, #636]	@ (8003294 <UART_SetConfig+0x568>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d17a      	bne.n	8003112 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800301c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003020:	2b08      	cmp	r3, #8
 8003022:	d824      	bhi.n	800306e <UART_SetConfig+0x342>
 8003024:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <UART_SetConfig+0x300>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	08003051 	.word	0x08003051
 8003030:	0800306f 	.word	0x0800306f
 8003034:	08003059 	.word	0x08003059
 8003038:	0800306f 	.word	0x0800306f
 800303c:	0800305f 	.word	0x0800305f
 8003040:	0800306f 	.word	0x0800306f
 8003044:	0800306f 	.word	0x0800306f
 8003048:	0800306f 	.word	0x0800306f
 800304c:	08003067 	.word	0x08003067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7ff f83e 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003054:	61f8      	str	r0, [r7, #28]
        break;
 8003056:	e010      	b.n	800307a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003058:	4b8f      	ldr	r3, [pc, #572]	@ (8003298 <UART_SetConfig+0x56c>)
 800305a:	61fb      	str	r3, [r7, #28]
        break;
 800305c:	e00d      	b.n	800307a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305e:	f7fe ff9f 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8003062:	61f8      	str	r0, [r7, #28]
        break;
 8003064:	e009      	b.n	800307a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800306a:	61fb      	str	r3, [r7, #28]
        break;
 800306c:	e005      	b.n	800307a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003078:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80fb 	beq.w	8003278 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	429a      	cmp	r2, r3
 8003090:	d305      	bcc.n	800309e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	429a      	cmp	r2, r3
 800309c:	d903      	bls.n	80030a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030a4:	e0e8      	b.n	8003278 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2200      	movs	r2, #0
 80030aa:	461c      	mov	r4, r3
 80030ac:	4615      	mov	r5, r2
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	022b      	lsls	r3, r5, #8
 80030b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030bc:	0222      	lsls	r2, r4, #8
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	6849      	ldr	r1, [r1, #4]
 80030c2:	0849      	lsrs	r1, r1, #1
 80030c4:	2000      	movs	r0, #0
 80030c6:	4688      	mov	r8, r1
 80030c8:	4681      	mov	r9, r0
 80030ca:	eb12 0a08 	adds.w	sl, r2, r8
 80030ce:	eb43 0b09 	adc.w	fp, r3, r9
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030e0:	4650      	mov	r0, sl
 80030e2:	4659      	mov	r1, fp
 80030e4:	f7fd f8d4 	bl	8000290 <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4613      	mov	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030f6:	d308      	bcc.n	800310a <UART_SetConfig+0x3de>
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030fe:	d204      	bcs.n	800310a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	e0b6      	b.n	8003278 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003110:	e0b2      	b.n	8003278 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311a:	d15e      	bne.n	80031da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800311c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003120:	2b08      	cmp	r3, #8
 8003122:	d828      	bhi.n	8003176 <UART_SetConfig+0x44a>
 8003124:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <UART_SetConfig+0x400>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003151 	.word	0x08003151
 8003130:	08003159 	.word	0x08003159
 8003134:	08003161 	.word	0x08003161
 8003138:	08003177 	.word	0x08003177
 800313c:	08003167 	.word	0x08003167
 8003140:	08003177 	.word	0x08003177
 8003144:	08003177 	.word	0x08003177
 8003148:	08003177 	.word	0x08003177
 800314c:	0800316f 	.word	0x0800316f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003150:	f7fe ffbe 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003154:	61f8      	str	r0, [r7, #28]
        break;
 8003156:	e014      	b.n	8003182 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003158:	f7fe ffd0 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 800315c:	61f8      	str	r0, [r7, #28]
        break;
 800315e:	e010      	b.n	8003182 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003160:	4b4d      	ldr	r3, [pc, #308]	@ (8003298 <UART_SetConfig+0x56c>)
 8003162:	61fb      	str	r3, [r7, #28]
        break;
 8003164:	e00d      	b.n	8003182 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003166:	f7fe ff1b 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 800316a:	61f8      	str	r0, [r7, #28]
        break;
 800316c:	e009      	b.n	8003182 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003172:	61fb      	str	r3, [r7, #28]
        break;
 8003174:	e005      	b.n	8003182 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003180:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d077      	beq.n	8003278 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005a      	lsls	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	441a      	add	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d916      	bls.n	80031d2 <UART_SetConfig+0x4a6>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031aa:	d212      	bcs.n	80031d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f023 030f 	bic.w	r3, r3, #15
 80031b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	8afb      	ldrh	r3, [r7, #22]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	8afa      	ldrh	r2, [r7, #22]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	e052      	b.n	8003278 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031d8:	e04e      	b.n	8003278 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d827      	bhi.n	8003232 <UART_SetConfig+0x506>
 80031e2:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <UART_SetConfig+0x4bc>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	08003215 	.word	0x08003215
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	08003233 	.word	0x08003233
 80031f8:	08003223 	.word	0x08003223
 80031fc:	08003233 	.word	0x08003233
 8003200:	08003233 	.word	0x08003233
 8003204:	08003233 	.word	0x08003233
 8003208:	0800322b 	.word	0x0800322b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800320c:	f7fe ff60 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003210:	61f8      	str	r0, [r7, #28]
        break;
 8003212:	e014      	b.n	800323e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7fe ff72 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003218:	61f8      	str	r0, [r7, #28]
        break;
 800321a:	e010      	b.n	800323e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <UART_SetConfig+0x56c>)
 800321e:	61fb      	str	r3, [r7, #28]
        break;
 8003220:	e00d      	b.n	800323e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7fe febd 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8003226:	61f8      	str	r0, [r7, #28]
        break;
 8003228:	e009      	b.n	800323e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322e:	61fb      	str	r3, [r7, #28]
        break;
 8003230:	e005      	b.n	800323e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800323c:	bf00      	nop
    }

    if (pclk != 0U)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d019      	beq.n	8003278 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	085a      	lsrs	r2, r3, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	441a      	add	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d909      	bls.n	8003272 <UART_SetConfig+0x546>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003264:	d205      	bcs.n	8003272 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	e002      	b.n	8003278 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003284:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003288:	4618      	mov	r0, r3
 800328a:	3728      	adds	r7, #40	@ 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003292:	bf00      	nop
 8003294:	40008000 	.word	0x40008000
 8003298:	00f42400 	.word	0x00f42400

0800329c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01a      	beq.n	80033b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339a:	d10a      	bne.n	80033b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b098      	sub	sp, #96	@ 0x60
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033f0:	f7fd fd74 	bl	8000edc <HAL_GetTick>
 80033f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d12e      	bne.n	8003462 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f88c 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d021      	beq.n	8003462 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800342c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003432:	653b      	str	r3, [r7, #80]	@ 0x50
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800343c:	647b      	str	r3, [r7, #68]	@ 0x44
 800343e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800344a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e6      	bne.n	800341e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e062      	b.n	8003528 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d149      	bne.n	8003504 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003470:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003478:	2200      	movs	r2, #0
 800347a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f856 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03c      	beq.n	8003504 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	623b      	str	r3, [r7, #32]
   return(result);
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e6      	bne.n	800348a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3308      	adds	r3, #8
 80034c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3308      	adds	r3, #8
 80034da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034dc:	61fa      	str	r2, [r7, #28]
 80034de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	69b9      	ldr	r1, [r7, #24]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e5      	bne.n	80034bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e011      	b.n	8003528 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3758      	adds	r7, #88	@ 0x58
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003540:	e049      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d045      	beq.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fd fcc7 	bl	8000edc <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <UART_WaitOnFlagUntilTimeout+0x30>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e048      	b.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d031      	beq.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d110      	bne.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2208      	movs	r2, #8
 8003586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f838 	bl	80035fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2208      	movs	r2, #8
 8003592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e029      	b.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035b0:	d111      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f81e 	bl	80035fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e00f      	b.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d0a6      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035fe:	b480      	push	{r7}
 8003600:	b095      	sub	sp, #84	@ 0x54
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800361a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003624:	643b      	str	r3, [r7, #64]	@ 0x40
 8003626:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800362a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e6      	bne.n	8003606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3308      	adds	r3, #8
 800363e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	61fb      	str	r3, [r7, #28]
   return(result);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3308      	adds	r3, #8
 8003656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003658:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800365e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e5      	bne.n	8003638 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003670:	2b01      	cmp	r3, #1
 8003672:	d118      	bne.n	80036a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	60bb      	str	r3, [r7, #8]
   return(result);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f023 0310 	bic.w	r3, r3, #16
 8003688:	647b      	str	r3, [r7, #68]	@ 0x44
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6979      	ldr	r1, [r7, #20]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	613b      	str	r3, [r7, #16]
   return(result);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e6      	bne.n	8003674 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036ba:	bf00      	nop
 80036bc:	3754      	adds	r7, #84	@ 0x54
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <__sflush_r>:
 80036c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d0:	0716      	lsls	r6, r2, #28
 80036d2:	4605      	mov	r5, r0
 80036d4:	460c      	mov	r4, r1
 80036d6:	d454      	bmi.n	8003782 <__sflush_r+0xba>
 80036d8:	684b      	ldr	r3, [r1, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	dc02      	bgt.n	80036e4 <__sflush_r+0x1c>
 80036de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	dd48      	ble.n	8003776 <__sflush_r+0xae>
 80036e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036e6:	2e00      	cmp	r6, #0
 80036e8:	d045      	beq.n	8003776 <__sflush_r+0xae>
 80036ea:	2300      	movs	r3, #0
 80036ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036f0:	682f      	ldr	r7, [r5, #0]
 80036f2:	6a21      	ldr	r1, [r4, #32]
 80036f4:	602b      	str	r3, [r5, #0]
 80036f6:	d030      	beq.n	800375a <__sflush_r+0x92>
 80036f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	0759      	lsls	r1, r3, #29
 80036fe:	d505      	bpl.n	800370c <__sflush_r+0x44>
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	1ad2      	subs	r2, r2, r3
 8003704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003706:	b10b      	cbz	r3, 800370c <__sflush_r+0x44>
 8003708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800370a:	1ad2      	subs	r2, r2, r3
 800370c:	2300      	movs	r3, #0
 800370e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003710:	6a21      	ldr	r1, [r4, #32]
 8003712:	4628      	mov	r0, r5
 8003714:	47b0      	blx	r6
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	d106      	bne.n	800372a <__sflush_r+0x62>
 800371c:	6829      	ldr	r1, [r5, #0]
 800371e:	291d      	cmp	r1, #29
 8003720:	d82b      	bhi.n	800377a <__sflush_r+0xb2>
 8003722:	4a2a      	ldr	r2, [pc, #168]	@ (80037cc <__sflush_r+0x104>)
 8003724:	410a      	asrs	r2, r1
 8003726:	07d6      	lsls	r6, r2, #31
 8003728:	d427      	bmi.n	800377a <__sflush_r+0xb2>
 800372a:	2200      	movs	r2, #0
 800372c:	6062      	str	r2, [r4, #4]
 800372e:	04d9      	lsls	r1, r3, #19
 8003730:	6922      	ldr	r2, [r4, #16]
 8003732:	6022      	str	r2, [r4, #0]
 8003734:	d504      	bpl.n	8003740 <__sflush_r+0x78>
 8003736:	1c42      	adds	r2, r0, #1
 8003738:	d101      	bne.n	800373e <__sflush_r+0x76>
 800373a:	682b      	ldr	r3, [r5, #0]
 800373c:	b903      	cbnz	r3, 8003740 <__sflush_r+0x78>
 800373e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003742:	602f      	str	r7, [r5, #0]
 8003744:	b1b9      	cbz	r1, 8003776 <__sflush_r+0xae>
 8003746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800374a:	4299      	cmp	r1, r3
 800374c:	d002      	beq.n	8003754 <__sflush_r+0x8c>
 800374e:	4628      	mov	r0, r5
 8003750:	f000 fb08 	bl	8003d64 <_free_r>
 8003754:	2300      	movs	r3, #0
 8003756:	6363      	str	r3, [r4, #52]	@ 0x34
 8003758:	e00d      	b.n	8003776 <__sflush_r+0xae>
 800375a:	2301      	movs	r3, #1
 800375c:	4628      	mov	r0, r5
 800375e:	47b0      	blx	r6
 8003760:	4602      	mov	r2, r0
 8003762:	1c50      	adds	r0, r2, #1
 8003764:	d1c9      	bne.n	80036fa <__sflush_r+0x32>
 8003766:	682b      	ldr	r3, [r5, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0c6      	beq.n	80036fa <__sflush_r+0x32>
 800376c:	2b1d      	cmp	r3, #29
 800376e:	d001      	beq.n	8003774 <__sflush_r+0xac>
 8003770:	2b16      	cmp	r3, #22
 8003772:	d11e      	bne.n	80037b2 <__sflush_r+0xea>
 8003774:	602f      	str	r7, [r5, #0]
 8003776:	2000      	movs	r0, #0
 8003778:	e022      	b.n	80037c0 <__sflush_r+0xf8>
 800377a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800377e:	b21b      	sxth	r3, r3
 8003780:	e01b      	b.n	80037ba <__sflush_r+0xf2>
 8003782:	690f      	ldr	r7, [r1, #16]
 8003784:	2f00      	cmp	r7, #0
 8003786:	d0f6      	beq.n	8003776 <__sflush_r+0xae>
 8003788:	0793      	lsls	r3, r2, #30
 800378a:	680e      	ldr	r6, [r1, #0]
 800378c:	bf08      	it	eq
 800378e:	694b      	ldreq	r3, [r1, #20]
 8003790:	600f      	str	r7, [r1, #0]
 8003792:	bf18      	it	ne
 8003794:	2300      	movne	r3, #0
 8003796:	eba6 0807 	sub.w	r8, r6, r7
 800379a:	608b      	str	r3, [r1, #8]
 800379c:	f1b8 0f00 	cmp.w	r8, #0
 80037a0:	dde9      	ble.n	8003776 <__sflush_r+0xae>
 80037a2:	6a21      	ldr	r1, [r4, #32]
 80037a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80037a6:	4643      	mov	r3, r8
 80037a8:	463a      	mov	r2, r7
 80037aa:	4628      	mov	r0, r5
 80037ac:	47b0      	blx	r6
 80037ae:	2800      	cmp	r0, #0
 80037b0:	dc08      	bgt.n	80037c4 <__sflush_r+0xfc>
 80037b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037ba:	81a3      	strh	r3, [r4, #12]
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c4:	4407      	add	r7, r0
 80037c6:	eba8 0800 	sub.w	r8, r8, r0
 80037ca:	e7e7      	b.n	800379c <__sflush_r+0xd4>
 80037cc:	dfbffffe 	.word	0xdfbffffe

080037d0 <_fflush_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	690b      	ldr	r3, [r1, #16]
 80037d4:	4605      	mov	r5, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	b913      	cbnz	r3, 80037e0 <_fflush_r+0x10>
 80037da:	2500      	movs	r5, #0
 80037dc:	4628      	mov	r0, r5
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	b118      	cbz	r0, 80037ea <_fflush_r+0x1a>
 80037e2:	6a03      	ldr	r3, [r0, #32]
 80037e4:	b90b      	cbnz	r3, 80037ea <_fflush_r+0x1a>
 80037e6:	f000 f8bb 	bl	8003960 <__sinit>
 80037ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f3      	beq.n	80037da <_fflush_r+0xa>
 80037f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037f4:	07d0      	lsls	r0, r2, #31
 80037f6:	d404      	bmi.n	8003802 <_fflush_r+0x32>
 80037f8:	0599      	lsls	r1, r3, #22
 80037fa:	d402      	bmi.n	8003802 <_fflush_r+0x32>
 80037fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037fe:	f000 faae 	bl	8003d5e <__retarget_lock_acquire_recursive>
 8003802:	4628      	mov	r0, r5
 8003804:	4621      	mov	r1, r4
 8003806:	f7ff ff5f 	bl	80036c8 <__sflush_r>
 800380a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800380c:	07da      	lsls	r2, r3, #31
 800380e:	4605      	mov	r5, r0
 8003810:	d4e4      	bmi.n	80037dc <_fflush_r+0xc>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	059b      	lsls	r3, r3, #22
 8003816:	d4e1      	bmi.n	80037dc <_fflush_r+0xc>
 8003818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800381a:	f000 faa1 	bl	8003d60 <__retarget_lock_release_recursive>
 800381e:	e7dd      	b.n	80037dc <_fflush_r+0xc>

08003820 <fflush>:
 8003820:	4601      	mov	r1, r0
 8003822:	b920      	cbnz	r0, 800382e <fflush+0xe>
 8003824:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <fflush+0x18>)
 8003826:	4905      	ldr	r1, [pc, #20]	@ (800383c <fflush+0x1c>)
 8003828:	4805      	ldr	r0, [pc, #20]	@ (8003840 <fflush+0x20>)
 800382a:	f000 b8b1 	b.w	8003990 <_fwalk_sglue>
 800382e:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <fflush+0x24>)
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	f7ff bfcd 	b.w	80037d0 <_fflush_r>
 8003836:	bf00      	nop
 8003838:	2000000c 	.word	0x2000000c
 800383c:	080037d1 	.word	0x080037d1
 8003840:	2000001c 	.word	0x2000001c
 8003844:	20000018 	.word	0x20000018

08003848 <std>:
 8003848:	2300      	movs	r3, #0
 800384a:	b510      	push	{r4, lr}
 800384c:	4604      	mov	r4, r0
 800384e:	e9c0 3300 	strd	r3, r3, [r0]
 8003852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003856:	6083      	str	r3, [r0, #8]
 8003858:	8181      	strh	r1, [r0, #12]
 800385a:	6643      	str	r3, [r0, #100]	@ 0x64
 800385c:	81c2      	strh	r2, [r0, #14]
 800385e:	6183      	str	r3, [r0, #24]
 8003860:	4619      	mov	r1, r3
 8003862:	2208      	movs	r2, #8
 8003864:	305c      	adds	r0, #92	@ 0x5c
 8003866:	f000 fa01 	bl	8003c6c <memset>
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <std+0x58>)
 800386c:	6263      	str	r3, [r4, #36]	@ 0x24
 800386e:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <std+0x5c>)
 8003870:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <std+0x60>)
 8003874:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <std+0x64>)
 8003878:	6323      	str	r3, [r4, #48]	@ 0x30
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <std+0x68>)
 800387c:	6224      	str	r4, [r4, #32]
 800387e:	429c      	cmp	r4, r3
 8003880:	d006      	beq.n	8003890 <std+0x48>
 8003882:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003886:	4294      	cmp	r4, r2
 8003888:	d002      	beq.n	8003890 <std+0x48>
 800388a:	33d0      	adds	r3, #208	@ 0xd0
 800388c:	429c      	cmp	r4, r3
 800388e:	d105      	bne.n	800389c <std+0x54>
 8003890:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003898:	f000 ba60 	b.w	8003d5c <__retarget_lock_init_recursive>
 800389c:	bd10      	pop	{r4, pc}
 800389e:	bf00      	nop
 80038a0:	08003abd 	.word	0x08003abd
 80038a4:	08003adf 	.word	0x08003adf
 80038a8:	08003b17 	.word	0x08003b17
 80038ac:	08003b3b 	.word	0x08003b3b
 80038b0:	200005ac 	.word	0x200005ac

080038b4 <stdio_exit_handler>:
 80038b4:	4a02      	ldr	r2, [pc, #8]	@ (80038c0 <stdio_exit_handler+0xc>)
 80038b6:	4903      	ldr	r1, [pc, #12]	@ (80038c4 <stdio_exit_handler+0x10>)
 80038b8:	4803      	ldr	r0, [pc, #12]	@ (80038c8 <stdio_exit_handler+0x14>)
 80038ba:	f000 b869 	b.w	8003990 <_fwalk_sglue>
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	080037d1 	.word	0x080037d1
 80038c8:	2000001c 	.word	0x2000001c

080038cc <cleanup_stdio>:
 80038cc:	6841      	ldr	r1, [r0, #4]
 80038ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <cleanup_stdio+0x34>)
 80038d0:	4299      	cmp	r1, r3
 80038d2:	b510      	push	{r4, lr}
 80038d4:	4604      	mov	r4, r0
 80038d6:	d001      	beq.n	80038dc <cleanup_stdio+0x10>
 80038d8:	f7ff ff7a 	bl	80037d0 <_fflush_r>
 80038dc:	68a1      	ldr	r1, [r4, #8]
 80038de:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <cleanup_stdio+0x38>)
 80038e0:	4299      	cmp	r1, r3
 80038e2:	d002      	beq.n	80038ea <cleanup_stdio+0x1e>
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff ff73 	bl	80037d0 <_fflush_r>
 80038ea:	68e1      	ldr	r1, [r4, #12]
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <cleanup_stdio+0x3c>)
 80038ee:	4299      	cmp	r1, r3
 80038f0:	d004      	beq.n	80038fc <cleanup_stdio+0x30>
 80038f2:	4620      	mov	r0, r4
 80038f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f8:	f7ff bf6a 	b.w	80037d0 <_fflush_r>
 80038fc:	bd10      	pop	{r4, pc}
 80038fe:	bf00      	nop
 8003900:	200005ac 	.word	0x200005ac
 8003904:	20000614 	.word	0x20000614
 8003908:	2000067c 	.word	0x2000067c

0800390c <global_stdio_init.part.0>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <global_stdio_init.part.0+0x30>)
 8003910:	4c0b      	ldr	r4, [pc, #44]	@ (8003940 <global_stdio_init.part.0+0x34>)
 8003912:	4a0c      	ldr	r2, [pc, #48]	@ (8003944 <global_stdio_init.part.0+0x38>)
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	4620      	mov	r0, r4
 8003918:	2200      	movs	r2, #0
 800391a:	2104      	movs	r1, #4
 800391c:	f7ff ff94 	bl	8003848 <std>
 8003920:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003924:	2201      	movs	r2, #1
 8003926:	2109      	movs	r1, #9
 8003928:	f7ff ff8e 	bl	8003848 <std>
 800392c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003930:	2202      	movs	r2, #2
 8003932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003936:	2112      	movs	r1, #18
 8003938:	f7ff bf86 	b.w	8003848 <std>
 800393c:	200006e4 	.word	0x200006e4
 8003940:	200005ac 	.word	0x200005ac
 8003944:	080038b5 	.word	0x080038b5

08003948 <__sfp_lock_acquire>:
 8003948:	4801      	ldr	r0, [pc, #4]	@ (8003950 <__sfp_lock_acquire+0x8>)
 800394a:	f000 ba08 	b.w	8003d5e <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	200006ed 	.word	0x200006ed

08003954 <__sfp_lock_release>:
 8003954:	4801      	ldr	r0, [pc, #4]	@ (800395c <__sfp_lock_release+0x8>)
 8003956:	f000 ba03 	b.w	8003d60 <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	200006ed 	.word	0x200006ed

08003960 <__sinit>:
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	f7ff fff0 	bl	8003948 <__sfp_lock_acquire>
 8003968:	6a23      	ldr	r3, [r4, #32]
 800396a:	b11b      	cbz	r3, 8003974 <__sinit+0x14>
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f7ff bff0 	b.w	8003954 <__sfp_lock_release>
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <__sinit+0x28>)
 8003976:	6223      	str	r3, [r4, #32]
 8003978:	4b04      	ldr	r3, [pc, #16]	@ (800398c <__sinit+0x2c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f5      	bne.n	800396c <__sinit+0xc>
 8003980:	f7ff ffc4 	bl	800390c <global_stdio_init.part.0>
 8003984:	e7f2      	b.n	800396c <__sinit+0xc>
 8003986:	bf00      	nop
 8003988:	080038cd 	.word	0x080038cd
 800398c:	200006e4 	.word	0x200006e4

08003990 <_fwalk_sglue>:
 8003990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003994:	4607      	mov	r7, r0
 8003996:	4688      	mov	r8, r1
 8003998:	4614      	mov	r4, r2
 800399a:	2600      	movs	r6, #0
 800399c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a0:	f1b9 0901 	subs.w	r9, r9, #1
 80039a4:	d505      	bpl.n	80039b2 <_fwalk_sglue+0x22>
 80039a6:	6824      	ldr	r4, [r4, #0]
 80039a8:	2c00      	cmp	r4, #0
 80039aa:	d1f7      	bne.n	800399c <_fwalk_sglue+0xc>
 80039ac:	4630      	mov	r0, r6
 80039ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b2:	89ab      	ldrh	r3, [r5, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d907      	bls.n	80039c8 <_fwalk_sglue+0x38>
 80039b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039bc:	3301      	adds	r3, #1
 80039be:	d003      	beq.n	80039c8 <_fwalk_sglue+0x38>
 80039c0:	4629      	mov	r1, r5
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	4306      	orrs	r6, r0
 80039c8:	3568      	adds	r5, #104	@ 0x68
 80039ca:	e7e9      	b.n	80039a0 <_fwalk_sglue+0x10>

080039cc <iprintf>:
 80039cc:	b40f      	push	{r0, r1, r2, r3}
 80039ce:	b507      	push	{r0, r1, r2, lr}
 80039d0:	4906      	ldr	r1, [pc, #24]	@ (80039ec <iprintf+0x20>)
 80039d2:	ab04      	add	r3, sp, #16
 80039d4:	6808      	ldr	r0, [r1, #0]
 80039d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80039da:	6881      	ldr	r1, [r0, #8]
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	f000 fae3 	bl	8003fa8 <_vfiprintf_r>
 80039e2:	b003      	add	sp, #12
 80039e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e8:	b004      	add	sp, #16
 80039ea:	4770      	bx	lr
 80039ec:	20000018 	.word	0x20000018

080039f0 <putchar>:
 80039f0:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <putchar+0xc>)
 80039f2:	4601      	mov	r1, r0
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	6882      	ldr	r2, [r0, #8]
 80039f8:	f000 bdde 	b.w	80045b8 <_putc_r>
 80039fc:	20000018 	.word	0x20000018

08003a00 <_puts_r>:
 8003a00:	6a03      	ldr	r3, [r0, #32]
 8003a02:	b570      	push	{r4, r5, r6, lr}
 8003a04:	6884      	ldr	r4, [r0, #8]
 8003a06:	4605      	mov	r5, r0
 8003a08:	460e      	mov	r6, r1
 8003a0a:	b90b      	cbnz	r3, 8003a10 <_puts_r+0x10>
 8003a0c:	f7ff ffa8 	bl	8003960 <__sinit>
 8003a10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a12:	07db      	lsls	r3, r3, #31
 8003a14:	d405      	bmi.n	8003a22 <_puts_r+0x22>
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	0598      	lsls	r0, r3, #22
 8003a1a:	d402      	bmi.n	8003a22 <_puts_r+0x22>
 8003a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a1e:	f000 f99e 	bl	8003d5e <__retarget_lock_acquire_recursive>
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	0719      	lsls	r1, r3, #28
 8003a26:	d502      	bpl.n	8003a2e <_puts_r+0x2e>
 8003a28:	6923      	ldr	r3, [r4, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d135      	bne.n	8003a9a <_puts_r+0x9a>
 8003a2e:	4621      	mov	r1, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	f000 f8c5 	bl	8003bc0 <__swsetup_r>
 8003a36:	b380      	cbz	r0, 8003a9a <_puts_r+0x9a>
 8003a38:	f04f 35ff 	mov.w	r5, #4294967295
 8003a3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a3e:	07da      	lsls	r2, r3, #31
 8003a40:	d405      	bmi.n	8003a4e <_puts_r+0x4e>
 8003a42:	89a3      	ldrh	r3, [r4, #12]
 8003a44:	059b      	lsls	r3, r3, #22
 8003a46:	d402      	bmi.n	8003a4e <_puts_r+0x4e>
 8003a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a4a:	f000 f989 	bl	8003d60 <__retarget_lock_release_recursive>
 8003a4e:	4628      	mov	r0, r5
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	da04      	bge.n	8003a60 <_puts_r+0x60>
 8003a56:	69a2      	ldr	r2, [r4, #24]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	dc17      	bgt.n	8003a8c <_puts_r+0x8c>
 8003a5c:	290a      	cmp	r1, #10
 8003a5e:	d015      	beq.n	8003a8c <_puts_r+0x8c>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	6022      	str	r2, [r4, #0]
 8003a66:	7019      	strb	r1, [r3, #0]
 8003a68:	68a3      	ldr	r3, [r4, #8]
 8003a6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60a3      	str	r3, [r4, #8]
 8003a72:	2900      	cmp	r1, #0
 8003a74:	d1ed      	bne.n	8003a52 <_puts_r+0x52>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	da11      	bge.n	8003a9e <_puts_r+0x9e>
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	210a      	movs	r1, #10
 8003a7e:	4628      	mov	r0, r5
 8003a80:	f000 f85f 	bl	8003b42 <__swbuf_r>
 8003a84:	3001      	adds	r0, #1
 8003a86:	d0d7      	beq.n	8003a38 <_puts_r+0x38>
 8003a88:	250a      	movs	r5, #10
 8003a8a:	e7d7      	b.n	8003a3c <_puts_r+0x3c>
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f000 f857 	bl	8003b42 <__swbuf_r>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d1e7      	bne.n	8003a68 <_puts_r+0x68>
 8003a98:	e7ce      	b.n	8003a38 <_puts_r+0x38>
 8003a9a:	3e01      	subs	r6, #1
 8003a9c:	e7e4      	b.n	8003a68 <_puts_r+0x68>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	6022      	str	r2, [r4, #0]
 8003aa4:	220a      	movs	r2, #10
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e7ee      	b.n	8003a88 <_puts_r+0x88>
	...

08003aac <puts>:
 8003aac:	4b02      	ldr	r3, [pc, #8]	@ (8003ab8 <puts+0xc>)
 8003aae:	4601      	mov	r1, r0
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	f7ff bfa5 	b.w	8003a00 <_puts_r>
 8003ab6:	bf00      	nop
 8003ab8:	20000018 	.word	0x20000018

08003abc <__sread>:
 8003abc:	b510      	push	{r4, lr}
 8003abe:	460c      	mov	r4, r1
 8003ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac4:	f000 f8fc 	bl	8003cc0 <_read_r>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	bfab      	itete	ge
 8003acc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ace:	89a3      	ldrhlt	r3, [r4, #12]
 8003ad0:	181b      	addge	r3, r3, r0
 8003ad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ad6:	bfac      	ite	ge
 8003ad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ada:	81a3      	strhlt	r3, [r4, #12]
 8003adc:	bd10      	pop	{r4, pc}

08003ade <__swrite>:
 8003ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae2:	461f      	mov	r7, r3
 8003ae4:	898b      	ldrh	r3, [r1, #12]
 8003ae6:	05db      	lsls	r3, r3, #23
 8003ae8:	4605      	mov	r5, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	4616      	mov	r6, r2
 8003aee:	d505      	bpl.n	8003afc <__swrite+0x1e>
 8003af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af4:	2302      	movs	r3, #2
 8003af6:	2200      	movs	r2, #0
 8003af8:	f000 f8d0 	bl	8003c9c <_lseek_r>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b06:	81a3      	strh	r3, [r4, #12]
 8003b08:	4632      	mov	r2, r6
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b12:	f000 b8e7 	b.w	8003ce4 <_write_r>

08003b16 <__sseek>:
 8003b16:	b510      	push	{r4, lr}
 8003b18:	460c      	mov	r4, r1
 8003b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1e:	f000 f8bd 	bl	8003c9c <_lseek_r>
 8003b22:	1c43      	adds	r3, r0, #1
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	bf15      	itete	ne
 8003b28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b32:	81a3      	strheq	r3, [r4, #12]
 8003b34:	bf18      	it	ne
 8003b36:	81a3      	strhne	r3, [r4, #12]
 8003b38:	bd10      	pop	{r4, pc}

08003b3a <__sclose>:
 8003b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3e:	f000 b89d 	b.w	8003c7c <_close_r>

08003b42 <__swbuf_r>:
 8003b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b44:	460e      	mov	r6, r1
 8003b46:	4614      	mov	r4, r2
 8003b48:	4605      	mov	r5, r0
 8003b4a:	b118      	cbz	r0, 8003b54 <__swbuf_r+0x12>
 8003b4c:	6a03      	ldr	r3, [r0, #32]
 8003b4e:	b90b      	cbnz	r3, 8003b54 <__swbuf_r+0x12>
 8003b50:	f7ff ff06 	bl	8003960 <__sinit>
 8003b54:	69a3      	ldr	r3, [r4, #24]
 8003b56:	60a3      	str	r3, [r4, #8]
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	071a      	lsls	r2, r3, #28
 8003b5c:	d501      	bpl.n	8003b62 <__swbuf_r+0x20>
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	b943      	cbnz	r3, 8003b74 <__swbuf_r+0x32>
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f000 f82b 	bl	8003bc0 <__swsetup_r>
 8003b6a:	b118      	cbz	r0, 8003b74 <__swbuf_r+0x32>
 8003b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8003b70:	4638      	mov	r0, r7
 8003b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	6922      	ldr	r2, [r4, #16]
 8003b78:	1a98      	subs	r0, r3, r2
 8003b7a:	6963      	ldr	r3, [r4, #20]
 8003b7c:	b2f6      	uxtb	r6, r6
 8003b7e:	4283      	cmp	r3, r0
 8003b80:	4637      	mov	r7, r6
 8003b82:	dc05      	bgt.n	8003b90 <__swbuf_r+0x4e>
 8003b84:	4621      	mov	r1, r4
 8003b86:	4628      	mov	r0, r5
 8003b88:	f7ff fe22 	bl	80037d0 <_fflush_r>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d1ed      	bne.n	8003b6c <__swbuf_r+0x2a>
 8003b90:	68a3      	ldr	r3, [r4, #8]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	60a3      	str	r3, [r4, #8]
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	6022      	str	r2, [r4, #0]
 8003b9c:	701e      	strb	r6, [r3, #0]
 8003b9e:	6962      	ldr	r2, [r4, #20]
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d004      	beq.n	8003bb0 <__swbuf_r+0x6e>
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	07db      	lsls	r3, r3, #31
 8003baa:	d5e1      	bpl.n	8003b70 <__swbuf_r+0x2e>
 8003bac:	2e0a      	cmp	r6, #10
 8003bae:	d1df      	bne.n	8003b70 <__swbuf_r+0x2e>
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f7ff fe0c 	bl	80037d0 <_fflush_r>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d0d9      	beq.n	8003b70 <__swbuf_r+0x2e>
 8003bbc:	e7d6      	b.n	8003b6c <__swbuf_r+0x2a>
	...

08003bc0 <__swsetup_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4b29      	ldr	r3, [pc, #164]	@ (8003c68 <__swsetup_r+0xa8>)
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	460c      	mov	r4, r1
 8003bca:	b118      	cbz	r0, 8003bd4 <__swsetup_r+0x14>
 8003bcc:	6a03      	ldr	r3, [r0, #32]
 8003bce:	b90b      	cbnz	r3, 8003bd4 <__swsetup_r+0x14>
 8003bd0:	f7ff fec6 	bl	8003960 <__sinit>
 8003bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd8:	0719      	lsls	r1, r3, #28
 8003bda:	d422      	bmi.n	8003c22 <__swsetup_r+0x62>
 8003bdc:	06da      	lsls	r2, r3, #27
 8003bde:	d407      	bmi.n	8003bf0 <__swsetup_r+0x30>
 8003be0:	2209      	movs	r2, #9
 8003be2:	602a      	str	r2, [r5, #0]
 8003be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003be8:	81a3      	strh	r3, [r4, #12]
 8003bea:	f04f 30ff 	mov.w	r0, #4294967295
 8003bee:	e033      	b.n	8003c58 <__swsetup_r+0x98>
 8003bf0:	0758      	lsls	r0, r3, #29
 8003bf2:	d512      	bpl.n	8003c1a <__swsetup_r+0x5a>
 8003bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bf6:	b141      	cbz	r1, 8003c0a <__swsetup_r+0x4a>
 8003bf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bfc:	4299      	cmp	r1, r3
 8003bfe:	d002      	beq.n	8003c06 <__swsetup_r+0x46>
 8003c00:	4628      	mov	r0, r5
 8003c02:	f000 f8af 	bl	8003d64 <_free_r>
 8003c06:	2300      	movs	r3, #0
 8003c08:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c10:	81a3      	strh	r3, [r4, #12]
 8003c12:	2300      	movs	r3, #0
 8003c14:	6063      	str	r3, [r4, #4]
 8003c16:	6923      	ldr	r3, [r4, #16]
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	f043 0308 	orr.w	r3, r3, #8
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	b94b      	cbnz	r3, 8003c3a <__swsetup_r+0x7a>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c30:	d003      	beq.n	8003c3a <__swsetup_r+0x7a>
 8003c32:	4621      	mov	r1, r4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 fc83 	bl	8004540 <__smakebuf_r>
 8003c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c3e:	f013 0201 	ands.w	r2, r3, #1
 8003c42:	d00a      	beq.n	8003c5a <__swsetup_r+0x9a>
 8003c44:	2200      	movs	r2, #0
 8003c46:	60a2      	str	r2, [r4, #8]
 8003c48:	6962      	ldr	r2, [r4, #20]
 8003c4a:	4252      	negs	r2, r2
 8003c4c:	61a2      	str	r2, [r4, #24]
 8003c4e:	6922      	ldr	r2, [r4, #16]
 8003c50:	b942      	cbnz	r2, 8003c64 <__swsetup_r+0xa4>
 8003c52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c56:	d1c5      	bne.n	8003be4 <__swsetup_r+0x24>
 8003c58:	bd38      	pop	{r3, r4, r5, pc}
 8003c5a:	0799      	lsls	r1, r3, #30
 8003c5c:	bf58      	it	pl
 8003c5e:	6962      	ldrpl	r2, [r4, #20]
 8003c60:	60a2      	str	r2, [r4, #8]
 8003c62:	e7f4      	b.n	8003c4e <__swsetup_r+0x8e>
 8003c64:	2000      	movs	r0, #0
 8003c66:	e7f7      	b.n	8003c58 <__swsetup_r+0x98>
 8003c68:	20000018 	.word	0x20000018

08003c6c <memset>:
 8003c6c:	4402      	add	r2, r0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d100      	bne.n	8003c76 <memset+0xa>
 8003c74:	4770      	bx	lr
 8003c76:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7a:	e7f9      	b.n	8003c70 <memset+0x4>

08003c7c <_close_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4d06      	ldr	r5, [pc, #24]	@ (8003c98 <_close_r+0x1c>)
 8003c80:	2300      	movs	r3, #0
 8003c82:	4604      	mov	r4, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fd f81a 	bl	8000cc0 <_close>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_close_r+0x1a>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_close_r+0x1a>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	200006e8 	.word	0x200006e8

08003c9c <_lseek_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4d07      	ldr	r5, [pc, #28]	@ (8003cbc <_lseek_r+0x20>)
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	602a      	str	r2, [r5, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f7fd f82f 	bl	8000d0e <_lseek>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_lseek_r+0x1e>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_lseek_r+0x1e>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	200006e8 	.word	0x200006e8

08003cc0 <_read_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4d07      	ldr	r5, [pc, #28]	@ (8003ce0 <_read_r+0x20>)
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	602a      	str	r2, [r5, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7fc ffc4 	bl	8000c5c <_read>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_read_r+0x1e>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_read_r+0x1e>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	200006e8 	.word	0x200006e8

08003ce4 <_write_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4d07      	ldr	r5, [pc, #28]	@ (8003d04 <_write_r+0x20>)
 8003ce8:	4604      	mov	r4, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	602a      	str	r2, [r5, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fc ffd0 	bl	8000c98 <_write>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_write_r+0x1e>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_write_r+0x1e>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	200006e8 	.word	0x200006e8

08003d08 <__errno>:
 8003d08:	4b01      	ldr	r3, [pc, #4]	@ (8003d10 <__errno+0x8>)
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000018 	.word	0x20000018

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	4d0d      	ldr	r5, [pc, #52]	@ (8003d4c <__libc_init_array+0x38>)
 8003d18:	4c0d      	ldr	r4, [pc, #52]	@ (8003d50 <__libc_init_array+0x3c>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	2600      	movs	r6, #0
 8003d20:	42a6      	cmp	r6, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	4d0b      	ldr	r5, [pc, #44]	@ (8003d54 <__libc_init_array+0x40>)
 8003d26:	4c0c      	ldr	r4, [pc, #48]	@ (8003d58 <__libc_init_array+0x44>)
 8003d28:	f000 fcac 	bl	8004684 <_init>
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	2600      	movs	r6, #0
 8003d32:	42a6      	cmp	r6, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3c:	4798      	blx	r3
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d46:	4798      	blx	r3
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	080047d8 	.word	0x080047d8
 8003d50:	080047d8 	.word	0x080047d8
 8003d54:	080047d8 	.word	0x080047d8
 8003d58:	080047dc 	.word	0x080047dc

08003d5c <__retarget_lock_init_recursive>:
 8003d5c:	4770      	bx	lr

08003d5e <__retarget_lock_acquire_recursive>:
 8003d5e:	4770      	bx	lr

08003d60 <__retarget_lock_release_recursive>:
 8003d60:	4770      	bx	lr
	...

08003d64 <_free_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4605      	mov	r5, r0
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	d041      	beq.n	8003df0 <_free_r+0x8c>
 8003d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d70:	1f0c      	subs	r4, r1, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bfb8      	it	lt
 8003d76:	18e4      	addlt	r4, r4, r3
 8003d78:	f000 f8e0 	bl	8003f3c <__malloc_lock>
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003df4 <_free_r+0x90>)
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	b933      	cbnz	r3, 8003d90 <_free_r+0x2c>
 8003d82:	6063      	str	r3, [r4, #4]
 8003d84:	6014      	str	r4, [r2, #0]
 8003d86:	4628      	mov	r0, r5
 8003d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d8c:	f000 b8dc 	b.w	8003f48 <__malloc_unlock>
 8003d90:	42a3      	cmp	r3, r4
 8003d92:	d908      	bls.n	8003da6 <_free_r+0x42>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	1821      	adds	r1, r4, r0
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	bf01      	itttt	eq
 8003d9c:	6819      	ldreq	r1, [r3, #0]
 8003d9e:	685b      	ldreq	r3, [r3, #4]
 8003da0:	1809      	addeq	r1, r1, r0
 8003da2:	6021      	streq	r1, [r4, #0]
 8003da4:	e7ed      	b.n	8003d82 <_free_r+0x1e>
 8003da6:	461a      	mov	r2, r3
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b10b      	cbz	r3, 8003db0 <_free_r+0x4c>
 8003dac:	42a3      	cmp	r3, r4
 8003dae:	d9fa      	bls.n	8003da6 <_free_r+0x42>
 8003db0:	6811      	ldr	r1, [r2, #0]
 8003db2:	1850      	adds	r0, r2, r1
 8003db4:	42a0      	cmp	r0, r4
 8003db6:	d10b      	bne.n	8003dd0 <_free_r+0x6c>
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	4401      	add	r1, r0
 8003dbc:	1850      	adds	r0, r2, r1
 8003dbe:	4283      	cmp	r3, r0
 8003dc0:	6011      	str	r1, [r2, #0]
 8003dc2:	d1e0      	bne.n	8003d86 <_free_r+0x22>
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	6053      	str	r3, [r2, #4]
 8003dca:	4408      	add	r0, r1
 8003dcc:	6010      	str	r0, [r2, #0]
 8003dce:	e7da      	b.n	8003d86 <_free_r+0x22>
 8003dd0:	d902      	bls.n	8003dd8 <_free_r+0x74>
 8003dd2:	230c      	movs	r3, #12
 8003dd4:	602b      	str	r3, [r5, #0]
 8003dd6:	e7d6      	b.n	8003d86 <_free_r+0x22>
 8003dd8:	6820      	ldr	r0, [r4, #0]
 8003dda:	1821      	adds	r1, r4, r0
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	bf04      	itt	eq
 8003de0:	6819      	ldreq	r1, [r3, #0]
 8003de2:	685b      	ldreq	r3, [r3, #4]
 8003de4:	6063      	str	r3, [r4, #4]
 8003de6:	bf04      	itt	eq
 8003de8:	1809      	addeq	r1, r1, r0
 8003dea:	6021      	streq	r1, [r4, #0]
 8003dec:	6054      	str	r4, [r2, #4]
 8003dee:	e7ca      	b.n	8003d86 <_free_r+0x22>
 8003df0:	bd38      	pop	{r3, r4, r5, pc}
 8003df2:	bf00      	nop
 8003df4:	200006f4 	.word	0x200006f4

08003df8 <sbrk_aligned>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8003e38 <sbrk_aligned+0x40>)
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	6831      	ldr	r1, [r6, #0]
 8003e00:	4605      	mov	r5, r0
 8003e02:	b911      	cbnz	r1, 8003e0a <sbrk_aligned+0x12>
 8003e04:	f000 fc2e 	bl	8004664 <_sbrk_r>
 8003e08:	6030      	str	r0, [r6, #0]
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 fc29 	bl	8004664 <_sbrk_r>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d103      	bne.n	8003e1e <sbrk_aligned+0x26>
 8003e16:	f04f 34ff 	mov.w	r4, #4294967295
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	bd70      	pop	{r4, r5, r6, pc}
 8003e1e:	1cc4      	adds	r4, r0, #3
 8003e20:	f024 0403 	bic.w	r4, r4, #3
 8003e24:	42a0      	cmp	r0, r4
 8003e26:	d0f8      	beq.n	8003e1a <sbrk_aligned+0x22>
 8003e28:	1a21      	subs	r1, r4, r0
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 fc1a 	bl	8004664 <_sbrk_r>
 8003e30:	3001      	adds	r0, #1
 8003e32:	d1f2      	bne.n	8003e1a <sbrk_aligned+0x22>
 8003e34:	e7ef      	b.n	8003e16 <sbrk_aligned+0x1e>
 8003e36:	bf00      	nop
 8003e38:	200006f0 	.word	0x200006f0

08003e3c <_malloc_r>:
 8003e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e40:	1ccd      	adds	r5, r1, #3
 8003e42:	f025 0503 	bic.w	r5, r5, #3
 8003e46:	3508      	adds	r5, #8
 8003e48:	2d0c      	cmp	r5, #12
 8003e4a:	bf38      	it	cc
 8003e4c:	250c      	movcc	r5, #12
 8003e4e:	2d00      	cmp	r5, #0
 8003e50:	4606      	mov	r6, r0
 8003e52:	db01      	blt.n	8003e58 <_malloc_r+0x1c>
 8003e54:	42a9      	cmp	r1, r5
 8003e56:	d904      	bls.n	8003e62 <_malloc_r+0x26>
 8003e58:	230c      	movs	r3, #12
 8003e5a:	6033      	str	r3, [r6, #0]
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f38 <_malloc_r+0xfc>
 8003e66:	f000 f869 	bl	8003f3c <__malloc_lock>
 8003e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e6e:	461c      	mov	r4, r3
 8003e70:	bb44      	cbnz	r4, 8003ec4 <_malloc_r+0x88>
 8003e72:	4629      	mov	r1, r5
 8003e74:	4630      	mov	r0, r6
 8003e76:	f7ff ffbf 	bl	8003df8 <sbrk_aligned>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	d158      	bne.n	8003f32 <_malloc_r+0xf6>
 8003e80:	f8d8 4000 	ldr.w	r4, [r8]
 8003e84:	4627      	mov	r7, r4
 8003e86:	2f00      	cmp	r7, #0
 8003e88:	d143      	bne.n	8003f12 <_malloc_r+0xd6>
 8003e8a:	2c00      	cmp	r4, #0
 8003e8c:	d04b      	beq.n	8003f26 <_malloc_r+0xea>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	4639      	mov	r1, r7
 8003e92:	4630      	mov	r0, r6
 8003e94:	eb04 0903 	add.w	r9, r4, r3
 8003e98:	f000 fbe4 	bl	8004664 <_sbrk_r>
 8003e9c:	4581      	cmp	r9, r0
 8003e9e:	d142      	bne.n	8003f26 <_malloc_r+0xea>
 8003ea0:	6821      	ldr	r1, [r4, #0]
 8003ea2:	1a6d      	subs	r5, r5, r1
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f7ff ffa6 	bl	8003df8 <sbrk_aligned>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d03a      	beq.n	8003f26 <_malloc_r+0xea>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	442b      	add	r3, r5
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	bb62      	cbnz	r2, 8003f18 <_malloc_r+0xdc>
 8003ebe:	f8c8 7000 	str.w	r7, [r8]
 8003ec2:	e00f      	b.n	8003ee4 <_malloc_r+0xa8>
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	1b52      	subs	r2, r2, r5
 8003ec8:	d420      	bmi.n	8003f0c <_malloc_r+0xd0>
 8003eca:	2a0b      	cmp	r2, #11
 8003ecc:	d917      	bls.n	8003efe <_malloc_r+0xc2>
 8003ece:	1961      	adds	r1, r4, r5
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	6025      	str	r5, [r4, #0]
 8003ed4:	bf18      	it	ne
 8003ed6:	6059      	strne	r1, [r3, #4]
 8003ed8:	6863      	ldr	r3, [r4, #4]
 8003eda:	bf08      	it	eq
 8003edc:	f8c8 1000 	streq.w	r1, [r8]
 8003ee0:	5162      	str	r2, [r4, r5]
 8003ee2:	604b      	str	r3, [r1, #4]
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f000 f82f 	bl	8003f48 <__malloc_unlock>
 8003eea:	f104 000b 	add.w	r0, r4, #11
 8003eee:	1d23      	adds	r3, r4, #4
 8003ef0:	f020 0007 	bic.w	r0, r0, #7
 8003ef4:	1ac2      	subs	r2, r0, r3
 8003ef6:	bf1c      	itt	ne
 8003ef8:	1a1b      	subne	r3, r3, r0
 8003efa:	50a3      	strne	r3, [r4, r2]
 8003efc:	e7af      	b.n	8003e5e <_malloc_r+0x22>
 8003efe:	6862      	ldr	r2, [r4, #4]
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	bf0c      	ite	eq
 8003f04:	f8c8 2000 	streq.w	r2, [r8]
 8003f08:	605a      	strne	r2, [r3, #4]
 8003f0a:	e7eb      	b.n	8003ee4 <_malloc_r+0xa8>
 8003f0c:	4623      	mov	r3, r4
 8003f0e:	6864      	ldr	r4, [r4, #4]
 8003f10:	e7ae      	b.n	8003e70 <_malloc_r+0x34>
 8003f12:	463c      	mov	r4, r7
 8003f14:	687f      	ldr	r7, [r7, #4]
 8003f16:	e7b6      	b.n	8003e86 <_malloc_r+0x4a>
 8003f18:	461a      	mov	r2, r3
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	42a3      	cmp	r3, r4
 8003f1e:	d1fb      	bne.n	8003f18 <_malloc_r+0xdc>
 8003f20:	2300      	movs	r3, #0
 8003f22:	6053      	str	r3, [r2, #4]
 8003f24:	e7de      	b.n	8003ee4 <_malloc_r+0xa8>
 8003f26:	230c      	movs	r3, #12
 8003f28:	6033      	str	r3, [r6, #0]
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f000 f80c 	bl	8003f48 <__malloc_unlock>
 8003f30:	e794      	b.n	8003e5c <_malloc_r+0x20>
 8003f32:	6005      	str	r5, [r0, #0]
 8003f34:	e7d6      	b.n	8003ee4 <_malloc_r+0xa8>
 8003f36:	bf00      	nop
 8003f38:	200006f4 	.word	0x200006f4

08003f3c <__malloc_lock>:
 8003f3c:	4801      	ldr	r0, [pc, #4]	@ (8003f44 <__malloc_lock+0x8>)
 8003f3e:	f7ff bf0e 	b.w	8003d5e <__retarget_lock_acquire_recursive>
 8003f42:	bf00      	nop
 8003f44:	200006ec 	.word	0x200006ec

08003f48 <__malloc_unlock>:
 8003f48:	4801      	ldr	r0, [pc, #4]	@ (8003f50 <__malloc_unlock+0x8>)
 8003f4a:	f7ff bf09 	b.w	8003d60 <__retarget_lock_release_recursive>
 8003f4e:	bf00      	nop
 8003f50:	200006ec 	.word	0x200006ec

08003f54 <__sfputc_r>:
 8003f54:	6893      	ldr	r3, [r2, #8]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	b410      	push	{r4}
 8003f5c:	6093      	str	r3, [r2, #8]
 8003f5e:	da08      	bge.n	8003f72 <__sfputc_r+0x1e>
 8003f60:	6994      	ldr	r4, [r2, #24]
 8003f62:	42a3      	cmp	r3, r4
 8003f64:	db01      	blt.n	8003f6a <__sfputc_r+0x16>
 8003f66:	290a      	cmp	r1, #10
 8003f68:	d103      	bne.n	8003f72 <__sfputc_r+0x1e>
 8003f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f6e:	f7ff bde8 	b.w	8003b42 <__swbuf_r>
 8003f72:	6813      	ldr	r3, [r2, #0]
 8003f74:	1c58      	adds	r0, r3, #1
 8003f76:	6010      	str	r0, [r2, #0]
 8003f78:	7019      	strb	r1, [r3, #0]
 8003f7a:	4608      	mov	r0, r1
 8003f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <__sfputs_r>:
 8003f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f84:	4606      	mov	r6, r0
 8003f86:	460f      	mov	r7, r1
 8003f88:	4614      	mov	r4, r2
 8003f8a:	18d5      	adds	r5, r2, r3
 8003f8c:	42ac      	cmp	r4, r5
 8003f8e:	d101      	bne.n	8003f94 <__sfputs_r+0x12>
 8003f90:	2000      	movs	r0, #0
 8003f92:	e007      	b.n	8003fa4 <__sfputs_r+0x22>
 8003f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f98:	463a      	mov	r2, r7
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f7ff ffda 	bl	8003f54 <__sfputc_r>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d1f3      	bne.n	8003f8c <__sfputs_r+0xa>
 8003fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fa8 <_vfiprintf_r>:
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	460d      	mov	r5, r1
 8003fae:	b09d      	sub	sp, #116	@ 0x74
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	4698      	mov	r8, r3
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	b118      	cbz	r0, 8003fc0 <_vfiprintf_r+0x18>
 8003fb8:	6a03      	ldr	r3, [r0, #32]
 8003fba:	b90b      	cbnz	r3, 8003fc0 <_vfiprintf_r+0x18>
 8003fbc:	f7ff fcd0 	bl	8003960 <__sinit>
 8003fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fc2:	07d9      	lsls	r1, r3, #31
 8003fc4:	d405      	bmi.n	8003fd2 <_vfiprintf_r+0x2a>
 8003fc6:	89ab      	ldrh	r3, [r5, #12]
 8003fc8:	059a      	lsls	r2, r3, #22
 8003fca:	d402      	bmi.n	8003fd2 <_vfiprintf_r+0x2a>
 8003fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fce:	f7ff fec6 	bl	8003d5e <__retarget_lock_acquire_recursive>
 8003fd2:	89ab      	ldrh	r3, [r5, #12]
 8003fd4:	071b      	lsls	r3, r3, #28
 8003fd6:	d501      	bpl.n	8003fdc <_vfiprintf_r+0x34>
 8003fd8:	692b      	ldr	r3, [r5, #16]
 8003fda:	b99b      	cbnz	r3, 8004004 <_vfiprintf_r+0x5c>
 8003fdc:	4629      	mov	r1, r5
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f7ff fdee 	bl	8003bc0 <__swsetup_r>
 8003fe4:	b170      	cbz	r0, 8004004 <_vfiprintf_r+0x5c>
 8003fe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fe8:	07dc      	lsls	r4, r3, #31
 8003fea:	d504      	bpl.n	8003ff6 <_vfiprintf_r+0x4e>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	b01d      	add	sp, #116	@ 0x74
 8003ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff6:	89ab      	ldrh	r3, [r5, #12]
 8003ff8:	0598      	lsls	r0, r3, #22
 8003ffa:	d4f7      	bmi.n	8003fec <_vfiprintf_r+0x44>
 8003ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ffe:	f7ff feaf 	bl	8003d60 <__retarget_lock_release_recursive>
 8004002:	e7f3      	b.n	8003fec <_vfiprintf_r+0x44>
 8004004:	2300      	movs	r3, #0
 8004006:	9309      	str	r3, [sp, #36]	@ 0x24
 8004008:	2320      	movs	r3, #32
 800400a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800400e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004012:	2330      	movs	r3, #48	@ 0x30
 8004014:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80041c4 <_vfiprintf_r+0x21c>
 8004018:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800401c:	f04f 0901 	mov.w	r9, #1
 8004020:	4623      	mov	r3, r4
 8004022:	469a      	mov	sl, r3
 8004024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004028:	b10a      	cbz	r2, 800402e <_vfiprintf_r+0x86>
 800402a:	2a25      	cmp	r2, #37	@ 0x25
 800402c:	d1f9      	bne.n	8004022 <_vfiprintf_r+0x7a>
 800402e:	ebba 0b04 	subs.w	fp, sl, r4
 8004032:	d00b      	beq.n	800404c <_vfiprintf_r+0xa4>
 8004034:	465b      	mov	r3, fp
 8004036:	4622      	mov	r2, r4
 8004038:	4629      	mov	r1, r5
 800403a:	4630      	mov	r0, r6
 800403c:	f7ff ffa1 	bl	8003f82 <__sfputs_r>
 8004040:	3001      	adds	r0, #1
 8004042:	f000 80a7 	beq.w	8004194 <_vfiprintf_r+0x1ec>
 8004046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004048:	445a      	add	r2, fp
 800404a:	9209      	str	r2, [sp, #36]	@ 0x24
 800404c:	f89a 3000 	ldrb.w	r3, [sl]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 809f 	beq.w	8004194 <_vfiprintf_r+0x1ec>
 8004056:	2300      	movs	r3, #0
 8004058:	f04f 32ff 	mov.w	r2, #4294967295
 800405c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004060:	f10a 0a01 	add.w	sl, sl, #1
 8004064:	9304      	str	r3, [sp, #16]
 8004066:	9307      	str	r3, [sp, #28]
 8004068:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800406c:	931a      	str	r3, [sp, #104]	@ 0x68
 800406e:	4654      	mov	r4, sl
 8004070:	2205      	movs	r2, #5
 8004072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004076:	4853      	ldr	r0, [pc, #332]	@ (80041c4 <_vfiprintf_r+0x21c>)
 8004078:	f7fc f8ba 	bl	80001f0 <memchr>
 800407c:	9a04      	ldr	r2, [sp, #16]
 800407e:	b9d8      	cbnz	r0, 80040b8 <_vfiprintf_r+0x110>
 8004080:	06d1      	lsls	r1, r2, #27
 8004082:	bf44      	itt	mi
 8004084:	2320      	movmi	r3, #32
 8004086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800408a:	0713      	lsls	r3, r2, #28
 800408c:	bf44      	itt	mi
 800408e:	232b      	movmi	r3, #43	@ 0x2b
 8004090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004094:	f89a 3000 	ldrb.w	r3, [sl]
 8004098:	2b2a      	cmp	r3, #42	@ 0x2a
 800409a:	d015      	beq.n	80040c8 <_vfiprintf_r+0x120>
 800409c:	9a07      	ldr	r2, [sp, #28]
 800409e:	4654      	mov	r4, sl
 80040a0:	2000      	movs	r0, #0
 80040a2:	f04f 0c0a 	mov.w	ip, #10
 80040a6:	4621      	mov	r1, r4
 80040a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ac:	3b30      	subs	r3, #48	@ 0x30
 80040ae:	2b09      	cmp	r3, #9
 80040b0:	d94b      	bls.n	800414a <_vfiprintf_r+0x1a2>
 80040b2:	b1b0      	cbz	r0, 80040e2 <_vfiprintf_r+0x13a>
 80040b4:	9207      	str	r2, [sp, #28]
 80040b6:	e014      	b.n	80040e2 <_vfiprintf_r+0x13a>
 80040b8:	eba0 0308 	sub.w	r3, r0, r8
 80040bc:	fa09 f303 	lsl.w	r3, r9, r3
 80040c0:	4313      	orrs	r3, r2
 80040c2:	9304      	str	r3, [sp, #16]
 80040c4:	46a2      	mov	sl, r4
 80040c6:	e7d2      	b.n	800406e <_vfiprintf_r+0xc6>
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	1d19      	adds	r1, r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	9103      	str	r1, [sp, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bfbb      	ittet	lt
 80040d4:	425b      	neglt	r3, r3
 80040d6:	f042 0202 	orrlt.w	r2, r2, #2
 80040da:	9307      	strge	r3, [sp, #28]
 80040dc:	9307      	strlt	r3, [sp, #28]
 80040de:	bfb8      	it	lt
 80040e0:	9204      	strlt	r2, [sp, #16]
 80040e2:	7823      	ldrb	r3, [r4, #0]
 80040e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80040e6:	d10a      	bne.n	80040fe <_vfiprintf_r+0x156>
 80040e8:	7863      	ldrb	r3, [r4, #1]
 80040ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80040ec:	d132      	bne.n	8004154 <_vfiprintf_r+0x1ac>
 80040ee:	9b03      	ldr	r3, [sp, #12]
 80040f0:	1d1a      	adds	r2, r3, #4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	9203      	str	r2, [sp, #12]
 80040f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040fa:	3402      	adds	r4, #2
 80040fc:	9305      	str	r3, [sp, #20]
 80040fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80041d4 <_vfiprintf_r+0x22c>
 8004102:	7821      	ldrb	r1, [r4, #0]
 8004104:	2203      	movs	r2, #3
 8004106:	4650      	mov	r0, sl
 8004108:	f7fc f872 	bl	80001f0 <memchr>
 800410c:	b138      	cbz	r0, 800411e <_vfiprintf_r+0x176>
 800410e:	9b04      	ldr	r3, [sp, #16]
 8004110:	eba0 000a 	sub.w	r0, r0, sl
 8004114:	2240      	movs	r2, #64	@ 0x40
 8004116:	4082      	lsls	r2, r0
 8004118:	4313      	orrs	r3, r2
 800411a:	3401      	adds	r4, #1
 800411c:	9304      	str	r3, [sp, #16]
 800411e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004122:	4829      	ldr	r0, [pc, #164]	@ (80041c8 <_vfiprintf_r+0x220>)
 8004124:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004128:	2206      	movs	r2, #6
 800412a:	f7fc f861 	bl	80001f0 <memchr>
 800412e:	2800      	cmp	r0, #0
 8004130:	d03f      	beq.n	80041b2 <_vfiprintf_r+0x20a>
 8004132:	4b26      	ldr	r3, [pc, #152]	@ (80041cc <_vfiprintf_r+0x224>)
 8004134:	bb1b      	cbnz	r3, 800417e <_vfiprintf_r+0x1d6>
 8004136:	9b03      	ldr	r3, [sp, #12]
 8004138:	3307      	adds	r3, #7
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	3308      	adds	r3, #8
 8004140:	9303      	str	r3, [sp, #12]
 8004142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004144:	443b      	add	r3, r7
 8004146:	9309      	str	r3, [sp, #36]	@ 0x24
 8004148:	e76a      	b.n	8004020 <_vfiprintf_r+0x78>
 800414a:	fb0c 3202 	mla	r2, ip, r2, r3
 800414e:	460c      	mov	r4, r1
 8004150:	2001      	movs	r0, #1
 8004152:	e7a8      	b.n	80040a6 <_vfiprintf_r+0xfe>
 8004154:	2300      	movs	r3, #0
 8004156:	3401      	adds	r4, #1
 8004158:	9305      	str	r3, [sp, #20]
 800415a:	4619      	mov	r1, r3
 800415c:	f04f 0c0a 	mov.w	ip, #10
 8004160:	4620      	mov	r0, r4
 8004162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004166:	3a30      	subs	r2, #48	@ 0x30
 8004168:	2a09      	cmp	r2, #9
 800416a:	d903      	bls.n	8004174 <_vfiprintf_r+0x1cc>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0c6      	beq.n	80040fe <_vfiprintf_r+0x156>
 8004170:	9105      	str	r1, [sp, #20]
 8004172:	e7c4      	b.n	80040fe <_vfiprintf_r+0x156>
 8004174:	fb0c 2101 	mla	r1, ip, r1, r2
 8004178:	4604      	mov	r4, r0
 800417a:	2301      	movs	r3, #1
 800417c:	e7f0      	b.n	8004160 <_vfiprintf_r+0x1b8>
 800417e:	ab03      	add	r3, sp, #12
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	462a      	mov	r2, r5
 8004184:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <_vfiprintf_r+0x228>)
 8004186:	a904      	add	r1, sp, #16
 8004188:	4630      	mov	r0, r6
 800418a:	f3af 8000 	nop.w
 800418e:	4607      	mov	r7, r0
 8004190:	1c78      	adds	r0, r7, #1
 8004192:	d1d6      	bne.n	8004142 <_vfiprintf_r+0x19a>
 8004194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004196:	07d9      	lsls	r1, r3, #31
 8004198:	d405      	bmi.n	80041a6 <_vfiprintf_r+0x1fe>
 800419a:	89ab      	ldrh	r3, [r5, #12]
 800419c:	059a      	lsls	r2, r3, #22
 800419e:	d402      	bmi.n	80041a6 <_vfiprintf_r+0x1fe>
 80041a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041a2:	f7ff fddd 	bl	8003d60 <__retarget_lock_release_recursive>
 80041a6:	89ab      	ldrh	r3, [r5, #12]
 80041a8:	065b      	lsls	r3, r3, #25
 80041aa:	f53f af1f 	bmi.w	8003fec <_vfiprintf_r+0x44>
 80041ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041b0:	e71e      	b.n	8003ff0 <_vfiprintf_r+0x48>
 80041b2:	ab03      	add	r3, sp, #12
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	462a      	mov	r2, r5
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <_vfiprintf_r+0x228>)
 80041ba:	a904      	add	r1, sp, #16
 80041bc:	4630      	mov	r0, r6
 80041be:	f000 f879 	bl	80042b4 <_printf_i>
 80041c2:	e7e4      	b.n	800418e <_vfiprintf_r+0x1e6>
 80041c4:	0800479c 	.word	0x0800479c
 80041c8:	080047a6 	.word	0x080047a6
 80041cc:	00000000 	.word	0x00000000
 80041d0:	08003f83 	.word	0x08003f83
 80041d4:	080047a2 	.word	0x080047a2

080041d8 <_printf_common>:
 80041d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041dc:	4616      	mov	r6, r2
 80041de:	4698      	mov	r8, r3
 80041e0:	688a      	ldr	r2, [r1, #8]
 80041e2:	690b      	ldr	r3, [r1, #16]
 80041e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	bfb8      	it	lt
 80041ec:	4613      	movlt	r3, r2
 80041ee:	6033      	str	r3, [r6, #0]
 80041f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041f4:	4607      	mov	r7, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	b10a      	cbz	r2, 80041fe <_printf_common+0x26>
 80041fa:	3301      	adds	r3, #1
 80041fc:	6033      	str	r3, [r6, #0]
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	0699      	lsls	r1, r3, #26
 8004202:	bf42      	ittt	mi
 8004204:	6833      	ldrmi	r3, [r6, #0]
 8004206:	3302      	addmi	r3, #2
 8004208:	6033      	strmi	r3, [r6, #0]
 800420a:	6825      	ldr	r5, [r4, #0]
 800420c:	f015 0506 	ands.w	r5, r5, #6
 8004210:	d106      	bne.n	8004220 <_printf_common+0x48>
 8004212:	f104 0a19 	add.w	sl, r4, #25
 8004216:	68e3      	ldr	r3, [r4, #12]
 8004218:	6832      	ldr	r2, [r6, #0]
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	42ab      	cmp	r3, r5
 800421e:	dc26      	bgt.n	800426e <_printf_common+0x96>
 8004220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004224:	6822      	ldr	r2, [r4, #0]
 8004226:	3b00      	subs	r3, #0
 8004228:	bf18      	it	ne
 800422a:	2301      	movne	r3, #1
 800422c:	0692      	lsls	r2, r2, #26
 800422e:	d42b      	bmi.n	8004288 <_printf_common+0xb0>
 8004230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004234:	4641      	mov	r1, r8
 8004236:	4638      	mov	r0, r7
 8004238:	47c8      	blx	r9
 800423a:	3001      	adds	r0, #1
 800423c:	d01e      	beq.n	800427c <_printf_common+0xa4>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	6922      	ldr	r2, [r4, #16]
 8004242:	f003 0306 	and.w	r3, r3, #6
 8004246:	2b04      	cmp	r3, #4
 8004248:	bf02      	ittt	eq
 800424a:	68e5      	ldreq	r5, [r4, #12]
 800424c:	6833      	ldreq	r3, [r6, #0]
 800424e:	1aed      	subeq	r5, r5, r3
 8004250:	68a3      	ldr	r3, [r4, #8]
 8004252:	bf0c      	ite	eq
 8004254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004258:	2500      	movne	r5, #0
 800425a:	4293      	cmp	r3, r2
 800425c:	bfc4      	itt	gt
 800425e:	1a9b      	subgt	r3, r3, r2
 8004260:	18ed      	addgt	r5, r5, r3
 8004262:	2600      	movs	r6, #0
 8004264:	341a      	adds	r4, #26
 8004266:	42b5      	cmp	r5, r6
 8004268:	d11a      	bne.n	80042a0 <_printf_common+0xc8>
 800426a:	2000      	movs	r0, #0
 800426c:	e008      	b.n	8004280 <_printf_common+0xa8>
 800426e:	2301      	movs	r3, #1
 8004270:	4652      	mov	r2, sl
 8004272:	4641      	mov	r1, r8
 8004274:	4638      	mov	r0, r7
 8004276:	47c8      	blx	r9
 8004278:	3001      	adds	r0, #1
 800427a:	d103      	bne.n	8004284 <_printf_common+0xac>
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004284:	3501      	adds	r5, #1
 8004286:	e7c6      	b.n	8004216 <_printf_common+0x3e>
 8004288:	18e1      	adds	r1, r4, r3
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	2030      	movs	r0, #48	@ 0x30
 800428e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004292:	4422      	add	r2, r4
 8004294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800429c:	3302      	adds	r3, #2
 800429e:	e7c7      	b.n	8004230 <_printf_common+0x58>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4622      	mov	r2, r4
 80042a4:	4641      	mov	r1, r8
 80042a6:	4638      	mov	r0, r7
 80042a8:	47c8      	blx	r9
 80042aa:	3001      	adds	r0, #1
 80042ac:	d0e6      	beq.n	800427c <_printf_common+0xa4>
 80042ae:	3601      	adds	r6, #1
 80042b0:	e7d9      	b.n	8004266 <_printf_common+0x8e>
	...

080042b4 <_printf_i>:
 80042b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	7e0f      	ldrb	r7, [r1, #24]
 80042ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042bc:	2f78      	cmp	r7, #120	@ 0x78
 80042be:	4691      	mov	r9, r2
 80042c0:	4680      	mov	r8, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	469a      	mov	sl, r3
 80042c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042ca:	d807      	bhi.n	80042dc <_printf_i+0x28>
 80042cc:	2f62      	cmp	r7, #98	@ 0x62
 80042ce:	d80a      	bhi.n	80042e6 <_printf_i+0x32>
 80042d0:	2f00      	cmp	r7, #0
 80042d2:	f000 80d2 	beq.w	800447a <_printf_i+0x1c6>
 80042d6:	2f58      	cmp	r7, #88	@ 0x58
 80042d8:	f000 80b9 	beq.w	800444e <_printf_i+0x19a>
 80042dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042e4:	e03a      	b.n	800435c <_printf_i+0xa8>
 80042e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042ea:	2b15      	cmp	r3, #21
 80042ec:	d8f6      	bhi.n	80042dc <_printf_i+0x28>
 80042ee:	a101      	add	r1, pc, #4	@ (adr r1, 80042f4 <_printf_i+0x40>)
 80042f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042f4:	0800434d 	.word	0x0800434d
 80042f8:	08004361 	.word	0x08004361
 80042fc:	080042dd 	.word	0x080042dd
 8004300:	080042dd 	.word	0x080042dd
 8004304:	080042dd 	.word	0x080042dd
 8004308:	080042dd 	.word	0x080042dd
 800430c:	08004361 	.word	0x08004361
 8004310:	080042dd 	.word	0x080042dd
 8004314:	080042dd 	.word	0x080042dd
 8004318:	080042dd 	.word	0x080042dd
 800431c:	080042dd 	.word	0x080042dd
 8004320:	08004461 	.word	0x08004461
 8004324:	0800438b 	.word	0x0800438b
 8004328:	0800441b 	.word	0x0800441b
 800432c:	080042dd 	.word	0x080042dd
 8004330:	080042dd 	.word	0x080042dd
 8004334:	08004483 	.word	0x08004483
 8004338:	080042dd 	.word	0x080042dd
 800433c:	0800438b 	.word	0x0800438b
 8004340:	080042dd 	.word	0x080042dd
 8004344:	080042dd 	.word	0x080042dd
 8004348:	08004423 	.word	0x08004423
 800434c:	6833      	ldr	r3, [r6, #0]
 800434e:	1d1a      	adds	r2, r3, #4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6032      	str	r2, [r6, #0]
 8004354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800435c:	2301      	movs	r3, #1
 800435e:	e09d      	b.n	800449c <_printf_i+0x1e8>
 8004360:	6833      	ldr	r3, [r6, #0]
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	1d19      	adds	r1, r3, #4
 8004366:	6031      	str	r1, [r6, #0]
 8004368:	0606      	lsls	r6, r0, #24
 800436a:	d501      	bpl.n	8004370 <_printf_i+0xbc>
 800436c:	681d      	ldr	r5, [r3, #0]
 800436e:	e003      	b.n	8004378 <_printf_i+0xc4>
 8004370:	0645      	lsls	r5, r0, #25
 8004372:	d5fb      	bpl.n	800436c <_printf_i+0xb8>
 8004374:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004378:	2d00      	cmp	r5, #0
 800437a:	da03      	bge.n	8004384 <_printf_i+0xd0>
 800437c:	232d      	movs	r3, #45	@ 0x2d
 800437e:	426d      	negs	r5, r5
 8004380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004384:	4859      	ldr	r0, [pc, #356]	@ (80044ec <_printf_i+0x238>)
 8004386:	230a      	movs	r3, #10
 8004388:	e011      	b.n	80043ae <_printf_i+0xfa>
 800438a:	6821      	ldr	r1, [r4, #0]
 800438c:	6833      	ldr	r3, [r6, #0]
 800438e:	0608      	lsls	r0, r1, #24
 8004390:	f853 5b04 	ldr.w	r5, [r3], #4
 8004394:	d402      	bmi.n	800439c <_printf_i+0xe8>
 8004396:	0649      	lsls	r1, r1, #25
 8004398:	bf48      	it	mi
 800439a:	b2ad      	uxthmi	r5, r5
 800439c:	2f6f      	cmp	r7, #111	@ 0x6f
 800439e:	4853      	ldr	r0, [pc, #332]	@ (80044ec <_printf_i+0x238>)
 80043a0:	6033      	str	r3, [r6, #0]
 80043a2:	bf14      	ite	ne
 80043a4:	230a      	movne	r3, #10
 80043a6:	2308      	moveq	r3, #8
 80043a8:	2100      	movs	r1, #0
 80043aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043ae:	6866      	ldr	r6, [r4, #4]
 80043b0:	60a6      	str	r6, [r4, #8]
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	bfa2      	ittt	ge
 80043b6:	6821      	ldrge	r1, [r4, #0]
 80043b8:	f021 0104 	bicge.w	r1, r1, #4
 80043bc:	6021      	strge	r1, [r4, #0]
 80043be:	b90d      	cbnz	r5, 80043c4 <_printf_i+0x110>
 80043c0:	2e00      	cmp	r6, #0
 80043c2:	d04b      	beq.n	800445c <_printf_i+0x1a8>
 80043c4:	4616      	mov	r6, r2
 80043c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ca:	fb03 5711 	mls	r7, r3, r1, r5
 80043ce:	5dc7      	ldrb	r7, [r0, r7]
 80043d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043d4:	462f      	mov	r7, r5
 80043d6:	42bb      	cmp	r3, r7
 80043d8:	460d      	mov	r5, r1
 80043da:	d9f4      	bls.n	80043c6 <_printf_i+0x112>
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d10b      	bne.n	80043f8 <_printf_i+0x144>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	07df      	lsls	r7, r3, #31
 80043e4:	d508      	bpl.n	80043f8 <_printf_i+0x144>
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	6861      	ldr	r1, [r4, #4]
 80043ea:	4299      	cmp	r1, r3
 80043ec:	bfde      	ittt	le
 80043ee:	2330      	movle	r3, #48	@ 0x30
 80043f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043f8:	1b92      	subs	r2, r2, r6
 80043fa:	6122      	str	r2, [r4, #16]
 80043fc:	f8cd a000 	str.w	sl, [sp]
 8004400:	464b      	mov	r3, r9
 8004402:	aa03      	add	r2, sp, #12
 8004404:	4621      	mov	r1, r4
 8004406:	4640      	mov	r0, r8
 8004408:	f7ff fee6 	bl	80041d8 <_printf_common>
 800440c:	3001      	adds	r0, #1
 800440e:	d14a      	bne.n	80044a6 <_printf_i+0x1f2>
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	b004      	add	sp, #16
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f043 0320 	orr.w	r3, r3, #32
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	4833      	ldr	r0, [pc, #204]	@ (80044f0 <_printf_i+0x23c>)
 8004424:	2778      	movs	r7, #120	@ 0x78
 8004426:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	6831      	ldr	r1, [r6, #0]
 800442e:	061f      	lsls	r7, r3, #24
 8004430:	f851 5b04 	ldr.w	r5, [r1], #4
 8004434:	d402      	bmi.n	800443c <_printf_i+0x188>
 8004436:	065f      	lsls	r7, r3, #25
 8004438:	bf48      	it	mi
 800443a:	b2ad      	uxthmi	r5, r5
 800443c:	6031      	str	r1, [r6, #0]
 800443e:	07d9      	lsls	r1, r3, #31
 8004440:	bf44      	itt	mi
 8004442:	f043 0320 	orrmi.w	r3, r3, #32
 8004446:	6023      	strmi	r3, [r4, #0]
 8004448:	b11d      	cbz	r5, 8004452 <_printf_i+0x19e>
 800444a:	2310      	movs	r3, #16
 800444c:	e7ac      	b.n	80043a8 <_printf_i+0xf4>
 800444e:	4827      	ldr	r0, [pc, #156]	@ (80044ec <_printf_i+0x238>)
 8004450:	e7e9      	b.n	8004426 <_printf_i+0x172>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	f023 0320 	bic.w	r3, r3, #32
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	e7f6      	b.n	800444a <_printf_i+0x196>
 800445c:	4616      	mov	r6, r2
 800445e:	e7bd      	b.n	80043dc <_printf_i+0x128>
 8004460:	6833      	ldr	r3, [r6, #0]
 8004462:	6825      	ldr	r5, [r4, #0]
 8004464:	6961      	ldr	r1, [r4, #20]
 8004466:	1d18      	adds	r0, r3, #4
 8004468:	6030      	str	r0, [r6, #0]
 800446a:	062e      	lsls	r6, r5, #24
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	d501      	bpl.n	8004474 <_printf_i+0x1c0>
 8004470:	6019      	str	r1, [r3, #0]
 8004472:	e002      	b.n	800447a <_printf_i+0x1c6>
 8004474:	0668      	lsls	r0, r5, #25
 8004476:	d5fb      	bpl.n	8004470 <_printf_i+0x1bc>
 8004478:	8019      	strh	r1, [r3, #0]
 800447a:	2300      	movs	r3, #0
 800447c:	6123      	str	r3, [r4, #16]
 800447e:	4616      	mov	r6, r2
 8004480:	e7bc      	b.n	80043fc <_printf_i+0x148>
 8004482:	6833      	ldr	r3, [r6, #0]
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	6032      	str	r2, [r6, #0]
 8004488:	681e      	ldr	r6, [r3, #0]
 800448a:	6862      	ldr	r2, [r4, #4]
 800448c:	2100      	movs	r1, #0
 800448e:	4630      	mov	r0, r6
 8004490:	f7fb feae 	bl	80001f0 <memchr>
 8004494:	b108      	cbz	r0, 800449a <_printf_i+0x1e6>
 8004496:	1b80      	subs	r0, r0, r6
 8004498:	6060      	str	r0, [r4, #4]
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	6123      	str	r3, [r4, #16]
 800449e:	2300      	movs	r3, #0
 80044a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044a4:	e7aa      	b.n	80043fc <_printf_i+0x148>
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	4632      	mov	r2, r6
 80044aa:	4649      	mov	r1, r9
 80044ac:	4640      	mov	r0, r8
 80044ae:	47d0      	blx	sl
 80044b0:	3001      	adds	r0, #1
 80044b2:	d0ad      	beq.n	8004410 <_printf_i+0x15c>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	079b      	lsls	r3, r3, #30
 80044b8:	d413      	bmi.n	80044e2 <_printf_i+0x22e>
 80044ba:	68e0      	ldr	r0, [r4, #12]
 80044bc:	9b03      	ldr	r3, [sp, #12]
 80044be:	4298      	cmp	r0, r3
 80044c0:	bfb8      	it	lt
 80044c2:	4618      	movlt	r0, r3
 80044c4:	e7a6      	b.n	8004414 <_printf_i+0x160>
 80044c6:	2301      	movs	r3, #1
 80044c8:	4632      	mov	r2, r6
 80044ca:	4649      	mov	r1, r9
 80044cc:	4640      	mov	r0, r8
 80044ce:	47d0      	blx	sl
 80044d0:	3001      	adds	r0, #1
 80044d2:	d09d      	beq.n	8004410 <_printf_i+0x15c>
 80044d4:	3501      	adds	r5, #1
 80044d6:	68e3      	ldr	r3, [r4, #12]
 80044d8:	9903      	ldr	r1, [sp, #12]
 80044da:	1a5b      	subs	r3, r3, r1
 80044dc:	42ab      	cmp	r3, r5
 80044de:	dcf2      	bgt.n	80044c6 <_printf_i+0x212>
 80044e0:	e7eb      	b.n	80044ba <_printf_i+0x206>
 80044e2:	2500      	movs	r5, #0
 80044e4:	f104 0619 	add.w	r6, r4, #25
 80044e8:	e7f5      	b.n	80044d6 <_printf_i+0x222>
 80044ea:	bf00      	nop
 80044ec:	080047ad 	.word	0x080047ad
 80044f0:	080047be 	.word	0x080047be

080044f4 <__swhatbuf_r>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	460c      	mov	r4, r1
 80044f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fc:	2900      	cmp	r1, #0
 80044fe:	b096      	sub	sp, #88	@ 0x58
 8004500:	4615      	mov	r5, r2
 8004502:	461e      	mov	r6, r3
 8004504:	da0d      	bge.n	8004522 <__swhatbuf_r+0x2e>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	bf14      	ite	ne
 8004512:	2340      	movne	r3, #64	@ 0x40
 8004514:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004518:	2000      	movs	r0, #0
 800451a:	6031      	str	r1, [r6, #0]
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	b016      	add	sp, #88	@ 0x58
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	466a      	mov	r2, sp
 8004524:	f000 f87c 	bl	8004620 <_fstat_r>
 8004528:	2800      	cmp	r0, #0
 800452a:	dbec      	blt.n	8004506 <__swhatbuf_r+0x12>
 800452c:	9901      	ldr	r1, [sp, #4]
 800452e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004536:	4259      	negs	r1, r3
 8004538:	4159      	adcs	r1, r3
 800453a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800453e:	e7eb      	b.n	8004518 <__swhatbuf_r+0x24>

08004540 <__smakebuf_r>:
 8004540:	898b      	ldrh	r3, [r1, #12]
 8004542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004544:	079d      	lsls	r5, r3, #30
 8004546:	4606      	mov	r6, r0
 8004548:	460c      	mov	r4, r1
 800454a:	d507      	bpl.n	800455c <__smakebuf_r+0x1c>
 800454c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	6123      	str	r3, [r4, #16]
 8004554:	2301      	movs	r3, #1
 8004556:	6163      	str	r3, [r4, #20]
 8004558:	b003      	add	sp, #12
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455c:	ab01      	add	r3, sp, #4
 800455e:	466a      	mov	r2, sp
 8004560:	f7ff ffc8 	bl	80044f4 <__swhatbuf_r>
 8004564:	9f00      	ldr	r7, [sp, #0]
 8004566:	4605      	mov	r5, r0
 8004568:	4639      	mov	r1, r7
 800456a:	4630      	mov	r0, r6
 800456c:	f7ff fc66 	bl	8003e3c <_malloc_r>
 8004570:	b948      	cbnz	r0, 8004586 <__smakebuf_r+0x46>
 8004572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004576:	059a      	lsls	r2, r3, #22
 8004578:	d4ee      	bmi.n	8004558 <__smakebuf_r+0x18>
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	e7e2      	b.n	800454c <__smakebuf_r+0xc>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	6020      	str	r0, [r4, #0]
 800458a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	9b01      	ldr	r3, [sp, #4]
 8004592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004596:	b15b      	cbz	r3, 80045b0 <__smakebuf_r+0x70>
 8004598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800459c:	4630      	mov	r0, r6
 800459e:	f000 f851 	bl	8004644 <_isatty_r>
 80045a2:	b128      	cbz	r0, 80045b0 <__smakebuf_r+0x70>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	431d      	orrs	r5, r3
 80045b4:	81a5      	strh	r5, [r4, #12]
 80045b6:	e7cf      	b.n	8004558 <__smakebuf_r+0x18>

080045b8 <_putc_r>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	460d      	mov	r5, r1
 80045bc:	4614      	mov	r4, r2
 80045be:	4606      	mov	r6, r0
 80045c0:	b118      	cbz	r0, 80045ca <_putc_r+0x12>
 80045c2:	6a03      	ldr	r3, [r0, #32]
 80045c4:	b90b      	cbnz	r3, 80045ca <_putc_r+0x12>
 80045c6:	f7ff f9cb 	bl	8003960 <__sinit>
 80045ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045cc:	07d8      	lsls	r0, r3, #31
 80045ce:	d405      	bmi.n	80045dc <_putc_r+0x24>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	0599      	lsls	r1, r3, #22
 80045d4:	d402      	bmi.n	80045dc <_putc_r+0x24>
 80045d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045d8:	f7ff fbc1 	bl	8003d5e <__retarget_lock_acquire_recursive>
 80045dc:	68a3      	ldr	r3, [r4, #8]
 80045de:	3b01      	subs	r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	60a3      	str	r3, [r4, #8]
 80045e4:	da05      	bge.n	80045f2 <_putc_r+0x3a>
 80045e6:	69a2      	ldr	r2, [r4, #24]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	db12      	blt.n	8004612 <_putc_r+0x5a>
 80045ec:	b2eb      	uxtb	r3, r5
 80045ee:	2b0a      	cmp	r3, #10
 80045f0:	d00f      	beq.n	8004612 <_putc_r+0x5a>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	6022      	str	r2, [r4, #0]
 80045f8:	701d      	strb	r5, [r3, #0]
 80045fa:	b2ed      	uxtb	r5, r5
 80045fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045fe:	07da      	lsls	r2, r3, #31
 8004600:	d405      	bmi.n	800460e <_putc_r+0x56>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	059b      	lsls	r3, r3, #22
 8004606:	d402      	bmi.n	800460e <_putc_r+0x56>
 8004608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800460a:	f7ff fba9 	bl	8003d60 <__retarget_lock_release_recursive>
 800460e:	4628      	mov	r0, r5
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	4629      	mov	r1, r5
 8004614:	4622      	mov	r2, r4
 8004616:	4630      	mov	r0, r6
 8004618:	f7ff fa93 	bl	8003b42 <__swbuf_r>
 800461c:	4605      	mov	r5, r0
 800461e:	e7ed      	b.n	80045fc <_putc_r+0x44>

08004620 <_fstat_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4d07      	ldr	r5, [pc, #28]	@ (8004640 <_fstat_r+0x20>)
 8004624:	2300      	movs	r3, #0
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	f7fc fb53 	bl	8000cd8 <_fstat>
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	d102      	bne.n	800463c <_fstat_r+0x1c>
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	b103      	cbz	r3, 800463c <_fstat_r+0x1c>
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	bd38      	pop	{r3, r4, r5, pc}
 800463e:	bf00      	nop
 8004640:	200006e8 	.word	0x200006e8

08004644 <_isatty_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d06      	ldr	r5, [pc, #24]	@ (8004660 <_isatty_r+0x1c>)
 8004648:	2300      	movs	r3, #0
 800464a:	4604      	mov	r4, r0
 800464c:	4608      	mov	r0, r1
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	f7fc fb52 	bl	8000cf8 <_isatty>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_isatty_r+0x1a>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_isatty_r+0x1a>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	200006e8 	.word	0x200006e8

08004664 <_sbrk_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d06      	ldr	r5, [pc, #24]	@ (8004680 <_sbrk_r+0x1c>)
 8004668:	2300      	movs	r3, #0
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	602b      	str	r3, [r5, #0]
 8004670:	f7fc fb5a 	bl	8000d28 <_sbrk>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_sbrk_r+0x1a>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_sbrk_r+0x1a>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	200006e8 	.word	0x200006e8

08004684 <_init>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	bf00      	nop
 8004688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468a:	bc08      	pop	{r3}
 800468c:	469e      	mov	lr, r3
 800468e:	4770      	bx	lr

08004690 <_fini>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	bf00      	nop
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr


4.1_USART_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004068  08004068  00005068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b0  080040b0  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  080040b0  080040b0  000050b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040b8  080040b8  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080040c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000001c  080040dc  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080040dc  000060d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfac  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d18  00000000  00000000  00011ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00013d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000770  00000000  00000000  000146c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025986  00000000  00000000  00014e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c23f  00000000  00000000  0003a7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e75ab  00000000  00000000  000469fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012dfa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d0  00000000  00000000  0012dfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001306bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004050 	.word	0x08004050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004050 	.word	0x08004050

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <ledBlink>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t data_to_send[] = "Hello, UART!\r\n";
uint8_t Rx_data[10];

void ledBlink(uint8_t times) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < times; i++) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
 80004c6:	e00b      	b.n	80004e0 <ledBlink+0x28>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004c8:	2120      	movs	r1, #32
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ce:	f000 fe0b 	bl	80010e8 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 80004d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004d6:	f000 fa91 	bl	80009fc <HAL_Delay>
    for (uint8_t i = 0; i < times; i++) {
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	3301      	adds	r3, #1
 80004de:	73fb      	strb	r3, [r7, #15]
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3ef      	bcc.n	80004c8 <ledBlink+0x10>
    }
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa04 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f89e 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f86c 	bl	80005e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart2, (const uint8_t *)data_to_send, sizeof(data_to_send));
 8000508:	220f      	movs	r2, #15
 800050a:	4909      	ldr	r1, [pc, #36]	@ (8000530 <main+0x3c>)
 800050c:	4809      	ldr	r0, [pc, #36]	@ (8000534 <main+0x40>)
 800050e:	f002 f973 	bl	80027f8 <HAL_UART_Transmit_IT>
  HAL_Delay(500);
 8000512:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000516:	f000 fa71 	bl	80009fc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart2, Rx_data, 10);
 800051a:	220a      	movs	r2, #10
 800051c:	4906      	ldr	r1, [pc, #24]	@ (8000538 <main+0x44>)
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <main+0x40>)
 8000520:	f002 f9c8 	bl	80028b4 <HAL_UART_Receive_IT>
    HAL_Delay(1000);
 8000524:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000528:	f000 fa68 	bl	80009fc <HAL_Delay>
    HAL_UART_Receive_IT(&huart2, Rx_data, 10);
 800052c:	bf00      	nop
 800052e:	e7f4      	b.n	800051a <main+0x26>
 8000530:	20000000 	.word	0x20000000
 8000534:	20000038 	.word	0x20000038
 8000538:	200000c0 	.word	0x200000c0

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	@ 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2244      	movs	r2, #68	@ 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fd54 	bl	8003ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000562:	f000 fde9 	bl	8001138 <HAL_PWREx_ControlVoltageScaling>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800056c:	f000 f8c6 	bl	80006fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2310      	movs	r3, #16
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058a:	230a      	movs	r3, #10
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058e:	2307      	movs	r3, #7
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fe20 	bl	80011e4 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005aa:	f000 f8a7 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2303      	movs	r3, #3
 80005b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f9e8 	bl	800199c <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d2:	f000 f893 	bl	80006fc <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3758      	adds	r7, #88	@ 0x58
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005e6:	4a15      	ldr	r2, [pc, #84]	@ (800063c <MX_USART2_UART_Init+0x5c>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ea:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000624:	f002 f89a 	bl	800275c <HAL_UART_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800062e:	f000 f865 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000038 	.word	0x20000038
 800063c:	40004400 	.word	0x40004400

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_GPIO_Init+0x5c>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <MX_GPIO_Init+0x5c>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_GPIO_Init+0x5c>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2120      	movs	r1, #32
 8000670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000674:	f000 fd20 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000678:	2320      	movs	r3, #32
 800067a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f000 fb68 	bl	8000d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    if (huart == &huart2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a09      	ldr	r2, [pc, #36]	@ (80006d0 <HAL_UART_TxCpltCallback+0x30>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d10b      	bne.n	80006c8 <HAL_UART_TxCpltCallback+0x28>
    {
        // Toggle the LED
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006b0:	2120      	movs	r1, #32
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b6:	f000 fd17 	bl	80010e8 <HAL_GPIO_TogglePin>
        // Delay for 100 milliseconds
        HAL_Delay(1000);
 80006ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006be:	f000 f99d 	bl	80009fc <HAL_Delay>
        // Blink the LED 5 times
        ledBlink(6);
 80006c2:	2006      	movs	r0, #6
 80006c4:	f7ff fef8 	bl	80004b8 <ledBlink>
    }
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000038 	.word	0x20000038

080006d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
    if (huart == &huart2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <HAL_UART_RxCpltCallback+0x24>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d104      	bne.n	80006ee <HAL_UART_RxCpltCallback+0x1a>
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006e4:	2120      	movs	r1, #32
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f000 fcfd 	bl	80010e8 <HAL_GPIO_TogglePin>
    }
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000038 	.word	0x20000038

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <Error_Handler+0x8>

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <HAL_MspInit+0x44>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000712:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <HAL_MspInit+0x44>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6613      	str	r3, [r2, #96]	@ 0x60
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <HAL_MspInit+0x44>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <HAL_MspInit+0x44>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000730:	6593      	str	r3, [r2, #88]	@ 0x58
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_MspInit+0x44>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0ac      	sub	sp, #176	@ 0xb0
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2288      	movs	r2, #136	@ 0x88
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fc41 	bl	8003ff8 <memset>
  if(huart->Instance==USART2)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a25      	ldr	r2, [pc, #148]	@ (8000810 <HAL_UART_MspInit+0xc0>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d143      	bne.n	8000808 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000784:	2300      	movs	r3, #0
 8000786:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fb29 	bl	8001de4 <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000798:	f7ff ffb0 	bl	80006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <HAL_UART_MspInit+0xc4>)
 800079e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000814 <HAL_UART_MspInit+0xc4>)
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <HAL_UART_MspInit+0xc4>)
 80007aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_UART_MspInit+0xc4>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <HAL_UART_MspInit+0xc4>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <HAL_UART_MspInit+0xc4>)
 80007c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 80007cc:	230c      	movs	r3, #12
 80007ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e4:	2307      	movs	r3, #7
 80007e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f4:	f000 fab6 	bl	8000d64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2026      	movs	r0, #38	@ 0x26
 80007fe:	f000 f9fc 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000802:	2026      	movs	r0, #38	@ 0x26
 8000804:	f000 fa15 	bl	8000c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	37b0      	adds	r7, #176	@ 0xb0
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40004400 	.word	0x40004400
 8000814:	40021000 	.word	0x40021000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <NMI_Handler+0x4>

08000820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <MemManage_Handler+0x4>

08000830 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <UsageFault_Handler+0x4>

08000840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 f8a5 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800087c:	4802      	ldr	r0, [pc, #8]	@ (8000888 <USART2_IRQHandler+0x10>)
 800087e:	f002 f865 	bl	800294c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000038 	.word	0x20000038

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b4:	f7ff ffea 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f003 fb93 	bl	8004008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e2:	f7ff fe07 	bl	80004f4 <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80008f4:	080040c0 	.word	0x080040c0
  ldr r2, =_sbss
 80008f8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80008fc:	200000d0 	.word	0x200000d0

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_Init+0x3c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a0b      	ldr	r2, [pc, #44]	@ (8000940 <HAL_Init+0x3c>)
 8000914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000918:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f962 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f80f 	bl	8000944 <HAL_InitTick>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	e001      	b.n	8000936 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000932:	f7ff fee9 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000936:	79fb      	ldrb	r3, [r7, #7]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <HAL_InitTick+0x6c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d023      	beq.n	80009a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_InitTick+0x70>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_InitTick+0x6c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f96d 	bl	8000c4e <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10f      	bne.n	800099a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d809      	bhi.n	8000994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f937 	bl	8000bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <HAL_InitTick+0x74>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e007      	b.n	80009a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e001      	b.n	80009a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000018 	.word	0x20000018
 80009b4:	20000010 	.word	0x20000010
 80009b8:	20000014 	.word	0x20000014

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000018 	.word	0x20000018
 80009e0:	200000cc 	.word	0x200000cc

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	200000cc 	.word	0x200000cc

080009fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a04:	f7ff ffee 	bl	80009e4 <HAL_GetTick>
 8000a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a14:	d005      	beq.n	8000a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_Delay+0x44>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a22:	bf00      	nop
 8000a24:	f7ff ffde 	bl	80009e4 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d8f7      	bhi.n	8000a24 <HAL_Delay+0x28>
  {
  }
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000018 	.word	0x20000018

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4907      	ldr	r1, [pc, #28]	@ (8000ae0 <__NVIC_EnableIRQ+0x38>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff29 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff3e 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff31 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d008      	beq.n	8000c90 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2204      	movs	r2, #4
 8000c82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e022      	b.n	8000cd6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 020e 	bic.w	r2, r2, #14
 8000c9e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0201 	bic.w	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb4:	f003 021c 	and.w	r2, r3, #28
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d005      	beq.n	8000d06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e029      	b.n	8000d5a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 020e 	bic.w	r2, r2, #14
 8000d14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f003 021c 	and.w	r2, r3, #28
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	4798      	blx	r3
    }
  }
  return status;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e17f      	b.n	8001074 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8171 	beq.w	800106e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	f003 0201 	and.w	r2, r3, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d118      	bne.n	8000e44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	f003 0201 	and.w	r2, r3, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d017      	beq.n	8000e80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	6939      	ldr	r1, [r7, #16]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80ac 	beq.w	800106e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b5f      	ldr	r3, [pc, #380]	@ (8001094 <HAL_GPIO_Init+0x330>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001094 <HAL_GPIO_Init+0x330>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f22:	4b5c      	ldr	r3, [pc, #368]	@ (8001094 <HAL_GPIO_Init+0x330>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2e:	4a5a      	ldr	r2, [pc, #360]	@ (8001098 <HAL_GPIO_Init+0x334>)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x242>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800109c <HAL_GPIO_Init+0x338>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x23e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	@ (80010a0 <HAL_GPIO_Init+0x33c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x23a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80010a4 <HAL_GPIO_Init+0x340>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x236>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	@ (80010a8 <HAL_GPIO_Init+0x344>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x232>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80010ac <HAL_GPIO_Init+0x348>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x22e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4a      	ldr	r2, [pc, #296]	@ (80010b0 <HAL_GPIO_Init+0x34c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x22a>
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	e00c      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f8e:	2307      	movs	r3, #7
 8000f90:	e00a      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f92:	2305      	movs	r3, #5
 8000f94:	e008      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e004      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e002      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	f002 0203 	and.w	r2, r2, #3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb8:	4937      	ldr	r1, [pc, #220]	@ (8001098 <HAL_GPIO_Init+0x334>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <HAL_GPIO_Init+0x350>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fea:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <HAL_GPIO_Init+0x350>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ff0:	4b30      	ldr	r3, [pc, #192]	@ (80010b4 <HAL_GPIO_Init+0x350>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001014:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <HAL_GPIO_Init+0x350>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <HAL_GPIO_Init+0x350>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103e:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <HAL_GPIO_Init+0x350>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <HAL_GPIO_Init+0x350>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <HAL_GPIO_Init+0x350>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa22 f303 	lsr.w	r3, r2, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	f47f ae78 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	48000400 	.word	0x48000400
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000c00 	.word	0x48000c00
 80010a8:	48001000 	.word	0x48001000
 80010ac:	48001400 	.word	0x48001400
 80010b0:	48001800 	.word	0x48001800
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43d9      	mvns	r1, r3
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	400b      	ands	r3, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001120:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <HAL_PWREx_GetVoltageRange+0x18>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40007000 	.word	0x40007000

08001138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001146:	d130      	bne.n	80011aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001148:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001154:	d038      	beq.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001156:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800115e:	4a1e      	ldr	r2, [pc, #120]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001160:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001164:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2232      	movs	r2, #50	@ 0x32
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9b      	lsrs	r3, r3, #18
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800117c:	e002      	b.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3b01      	subs	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800118c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001190:	d102      	bne.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f2      	bne.n	800117e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a4:	d110      	bne.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e00f      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b6:	d007      	beq.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c0:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40007000 	.word	0x40007000
 80011dc:	20000010 	.word	0x20000010
 80011e0:	431bde83 	.word	0x431bde83

080011e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e3ca      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f6:	4b97      	ldr	r3, [pc, #604]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001200:	4b94      	ldr	r3, [pc, #592]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 80e4 	beq.w	80013e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_RCC_OscConfig+0x4a>
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b0c      	cmp	r3, #12
 8001222:	f040 808b 	bne.w	800133c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2b01      	cmp	r3, #1
 800122a:	f040 8087 	bne.w	800133c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800122e:	4b89      	ldr	r3, [pc, #548]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x62>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e3a2      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1a      	ldr	r2, [r3, #32]
 800124a:	4b82      	ldr	r3, [pc, #520]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <HAL_RCC_OscConfig+0x7c>
 8001256:	4b7f      	ldr	r3, [pc, #508]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800125e:	e005      	b.n	800126c <HAL_RCC_OscConfig+0x88>
 8001260:	4b7c      	ldr	r3, [pc, #496]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800126c:	4293      	cmp	r3, r2
 800126e:	d223      	bcs.n	80012b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fd55 	bl	8001d24 <RCC_SetFlashLatencyFromMSIRange>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e383      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001284:	4b73      	ldr	r3, [pc, #460]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a72      	ldr	r2, [pc, #456]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b70      	ldr	r3, [pc, #448]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	496d      	ldr	r1, [pc, #436]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	4968      	ldr	r1, [pc, #416]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
 80012b6:	e025      	b.n	8001304 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b8:	4b66      	ldr	r3, [pc, #408]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a65      	ldr	r2, [pc, #404]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b63      	ldr	r3, [pc, #396]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4960      	ldr	r1, [pc, #384]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	495b      	ldr	r1, [pc, #364]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fd15 	bl	8001d24 <RCC_SetFlashLatencyFromMSIRange>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e343      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001304:	f000 fc4a 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b52      	ldr	r3, [pc, #328]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	4950      	ldr	r1, [pc, #320]	@ (8001458 <HAL_RCC_OscConfig+0x274>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	4a4e      	ldr	r2, [pc, #312]	@ (800145c <HAL_RCC_OscConfig+0x278>)
 8001322:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001324:	4b4e      	ldr	r3, [pc, #312]	@ (8001460 <HAL_RCC_OscConfig+0x27c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fb0b 	bl	8000944 <HAL_InitTick>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d052      	beq.n	80013de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	e327      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d032      	beq.n	80013aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001344:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a42      	ldr	r2, [pc, #264]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb48 	bl	80009e4 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001358:	f7ff fb44 	bl	80009e4 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e310      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136a:	4b3a      	ldr	r3, [pc, #232]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001376:	4b37      	ldr	r3, [pc, #220]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a36      	ldr	r2, [pc, #216]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4931      	ldr	r1, [pc, #196]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001394:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	492c      	ldr	r1, [pc, #176]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e01a      	b.n	80013e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a29      	ldr	r2, [pc, #164]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb15 	bl	80009e4 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013be:	f7ff fb11 	bl	80009e4 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e2dd      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d0:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x1da>
 80013dc:	e000      	b.n	80013e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d074      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x21a>
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	d10e      	bne.n	8001416 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d10b      	bne.n	8001416 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d064      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d160      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e2ba      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x24a>
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e026      	b.n	800147c <HAL_RCC_OscConfig+0x298>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001436:	d115      	bne.n	8001464 <HAL_RCC_OscConfig+0x280>
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800143e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a02      	ldr	r2, [pc, #8]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x298>
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	08004068 	.word	0x08004068
 800145c:	20000010 	.word	0x20000010
 8001460:	20000014 	.word	0x20000014
 8001464:	4ba0      	ldr	r3, [pc, #640]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a9f      	ldr	r2, [pc, #636]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b9d      	ldr	r3, [pc, #628]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a9c      	ldr	r2, [pc, #624]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff faae 	bl	80009e4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff faaa 	bl	80009e4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e276      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	4b92      	ldr	r3, [pc, #584]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x2a8>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fa9a 	bl	80009e4 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fa96 	bl	80009e4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	@ 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e262      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c6:	4b88      	ldr	r3, [pc, #544]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2d0>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d060      	beq.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_OscConfig+0x310>
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d119      	bne.n	8001522 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d116      	bne.n	8001522 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f4:	4b7c      	ldr	r3, [pc, #496]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x328>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e23f      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b76      	ldr	r3, [pc, #472]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	4973      	ldr	r1, [pc, #460]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001520:	e040      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d023      	beq.n	8001572 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152a:	4b6f      	ldr	r3, [pc, #444]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6e      	ldr	r2, [pc, #440]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fa55 	bl	80009e4 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff fa51 	bl	80009e4 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e21d      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001550:	4b65      	ldr	r3, [pc, #404]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b62      	ldr	r3, [pc, #392]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	495f      	ldr	r1, [pc, #380]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e018      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001572:	4b5d      	ldr	r3, [pc, #372]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a5c      	ldr	r2, [pc, #368]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800157c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fa31 	bl	80009e4 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fa2d 	bl	80009e4 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e1f9      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001598:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d03c      	beq.n	800162a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b8:	4b4b      	ldr	r3, [pc, #300]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015be:	4a4a      	ldr	r2, [pc, #296]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fa0c 	bl	80009e4 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fa08 	bl	80009e4 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1d4      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e2:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ef      	beq.n	80015d0 <HAL_RCC_OscConfig+0x3ec>
 80015f0:	e01b      	b.n	800162a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f2:	4b3d      	ldr	r3, [pc, #244]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f8:	4a3b      	ldr	r2, [pc, #236]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7ff f9ef 	bl	80009e4 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff f9eb 	bl	80009e4 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1b7      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161c:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ef      	bne.n	800160a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80a6 	beq.w	8001784 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800163c:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10d      	bne.n	8001664 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164c:	4a26      	ldr	r2, [pc, #152]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800164e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001652:	6593      	str	r3, [r2, #88]	@ 0x58
 8001654:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001660:	2301      	movs	r3, #1
 8001662:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001664:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <HAL_RCC_OscConfig+0x508>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d118      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001670:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <HAL_RCC_OscConfig+0x508>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <HAL_RCC_OscConfig+0x508>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167c:	f7ff f9b2 	bl	80009e4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001684:	f7ff f9ae 	bl	80009e4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e17a      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <HAL_RCC_OscConfig+0x508>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d108      	bne.n	80016bc <HAL_RCC_OscConfig+0x4d8>
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ba:	e029      	b.n	8001710 <HAL_RCC_OscConfig+0x52c>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d115      	bne.n	80016f0 <HAL_RCC_OscConfig+0x50c>
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ca:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016da:	4a03      	ldr	r2, [pc, #12]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x52c>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
 80016f0:	4b9c      	ldr	r3, [pc, #624]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a9b      	ldr	r2, [pc, #620]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001700:	4b98      	ldr	r3, [pc, #608]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001706:	4a97      	ldr	r2, [pc, #604]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d016      	beq.n	8001746 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff f964 	bl	80009e4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff f960 	bl	80009e4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e12a      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001736:	4b8b      	ldr	r3, [pc, #556]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ed      	beq.n	8001720 <HAL_RCC_OscConfig+0x53c>
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff f94d 	bl	80009e4 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff f949 	bl	80009e4 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e113      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001764:	4b7f      	ldr	r3, [pc, #508]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ed      	bne.n	800174e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001772:	7ffb      	ldrb	r3, [r7, #31]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001778:	4b7a      	ldr	r3, [pc, #488]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177c:	4a79      	ldr	r2, [pc, #484]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80fe 	beq.w	800198a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	2b02      	cmp	r3, #2
 8001794:	f040 80d0 	bne.w	8001938 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001798:	4b72      	ldr	r3, [pc, #456]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d130      	bne.n	800180e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	3b01      	subs	r3, #1
 80017b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d127      	bne.n	800180e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d11f      	bne.n	800180e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017d8:	2a07      	cmp	r2, #7
 80017da:	bf14      	ite	ne
 80017dc:	2201      	movne	r2, #1
 80017de:	2200      	moveq	r2, #0
 80017e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d113      	bne.n	800180e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d109      	bne.n	800180e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	3b01      	subs	r3, #1
 8001808:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d06e      	beq.n	80018ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d069      	beq.n	80018e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001820:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0ad      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001830:	4b4c      	ldr	r3, [pc, #304]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4b      	ldr	r2, [pc, #300]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800183c:	f7ff f8d2 	bl	80009e4 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff f8ce 	bl	80009e4 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e09a      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001856:	4b43      	ldr	r3, [pc, #268]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001862:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	4b40      	ldr	r3, [pc, #256]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001868:	4013      	ands	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001872:	3a01      	subs	r2, #1
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	4311      	orrs	r1, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800187c:	0212      	lsls	r2, r2, #8
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001884:	0852      	lsrs	r2, r2, #1
 8001886:	3a01      	subs	r2, #1
 8001888:	0552      	lsls	r2, r2, #21
 800188a:	4311      	orrs	r1, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001890:	0852      	lsrs	r2, r2, #1
 8001892:	3a01      	subs	r2, #1
 8001894:	0652      	lsls	r2, r2, #25
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800189c:	0912      	lsrs	r2, r2, #4
 800189e:	0452      	lsls	r2, r2, #17
 80018a0:	430a      	orrs	r2, r1
 80018a2:	4930      	ldr	r1, [pc, #192]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018c0:	f7ff f890 	bl	80009e4 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f88c 	bl	80009e4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e058      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e6:	e050      	b.n	800198a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e04f      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d148      	bne.n	800198a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a19      	ldr	r2, [pc, #100]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 80018fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001902:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001904:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4a16      	ldr	r2, [pc, #88]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 800190a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001910:	f7ff f868 	bl	80009e4 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f864 	bl	80009e4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e030      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x734>
 8001936:	e028      	b.n	800198a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d023      	beq.n	8001986 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_RCC_OscConfig+0x780>)
 8001944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f84b 	bl	80009e4 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	e00c      	b.n	800196c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff f847 	bl	80009e4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d905      	bls.n	800196c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e013      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
 8001964:	40021000 	.word	0x40021000
 8001968:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RCC_OscConfig+0x7b0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ec      	bne.n	8001952 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_RCC_OscConfig+0x7b0>)
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	4905      	ldr	r1, [pc, #20]	@ (8001994 <HAL_RCC_OscConfig+0x7b0>)
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_RCC_OscConfig+0x7b4>)
 8001980:	4013      	ands	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
 8001984:	e001      	b.n	800198a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	feeefffc 	.word	0xfeeefffc

0800199c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0e7      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b75      	ldr	r3, [pc, #468]	@ (8001b88 <HAL_RCC_ClockConfig+0x1ec>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b72      	ldr	r3, [pc, #456]	@ (8001b88 <HAL_RCC_ClockConfig+0x1ec>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0207 	bic.w	r2, r3, #7
 80019c6:	4970      	ldr	r1, [pc, #448]	@ (8001b88 <HAL_RCC_ClockConfig+0x1ec>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001b88 <HAL_RCC_ClockConfig+0x1ec>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0cf      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d010      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	4b66      	ldr	r3, [pc, #408]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d908      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fc:	4b63      	ldr	r3, [pc, #396]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4960      	ldr	r1, [pc, #384]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d04c      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	4b5a      	ldr	r3, [pc, #360]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d121      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0a6      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3a:	4b54      	ldr	r3, [pc, #336]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e09a      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a52:	4b4e      	ldr	r3, [pc, #312]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e08e      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a62:	4b4a      	ldr	r3, [pc, #296]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e086      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b46      	ldr	r3, [pc, #280]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4943      	ldr	r1, [pc, #268]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a84:	f7fe ffae 	bl	80009e4 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7fe ffaa 	bl	80009e4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e06e      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d208      	bcs.n	8001ae2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	492b      	ldr	r1, [pc, #172]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae2:	4b29      	ldr	r3, [pc, #164]	@ (8001b88 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d210      	bcs.n	8001b12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af0:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <HAL_RCC_ClockConfig+0x1ec>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 0207 	bic.w	r2, r3, #7
 8001af8:	4923      	ldr	r1, [pc, #140]	@ (8001b88 <HAL_RCC_ClockConfig+0x1ec>)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b00:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <HAL_RCC_ClockConfig+0x1ec>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e036      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4918      	ldr	r1, [pc, #96]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4910      	ldr	r1, [pc, #64]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b50:	f000 f824 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	490b      	ldr	r1, [pc, #44]	@ (8001b90 <HAL_RCC_ClockConfig+0x1f4>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_RCC_ClockConfig+0x1fc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fee5 	bl	8000944 <HAL_InitTick>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08004068 	.word	0x08004068
 8001b94:	20000010 	.word	0x20000010
 8001b98:	20000014 	.word	0x20000014

08001b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001baa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d121      	bne.n	8001c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d11e      	bne.n	8001c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bdc:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10d      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c14:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x110>)
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	e004      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c20:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d134      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d003      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0xac>
 8001c40:	e005      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x110>)
 8001c44:	617b      	str	r3, [r7, #20]
      break;
 8001c46:	e005      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c4a:	617b      	str	r3, [r7, #20]
      break;
 8001c4c:	e002      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	617b      	str	r3, [r7, #20]
      break;
 8001c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c54:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	3301      	adds	r3, #1
 8001c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	fb03 f202 	mul.w	r2, r3, r2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	0e5b      	lsrs	r3, r3, #25
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	3301      	adds	r3, #1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c94:	69bb      	ldr	r3, [r7, #24]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08004080 	.word	0x08004080
 8001cac:	00f42400 	.word	0x00f42400
 8001cb0:	007a1200 	.word	0x007a1200

08001cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000010 	.word	0x20000010

08001ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cd0:	f7ff fff0 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4904      	ldr	r1, [pc, #16]	@ (8001cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08004078 	.word	0x08004078

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cfc:	f7ff ffda 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0adb      	lsrs	r3, r3, #11
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4904      	ldr	r1, [pc, #16]	@ (8001d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08004078 	.word	0x08004078

08001d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d30:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d3c:	f7ff f9ee 	bl	800111c <HAL_PWREx_GetVoltageRange>
 8001d40:	6178      	str	r0, [r7, #20]
 8001d42:	e014      	b.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	4b25      	ldr	r3, [pc, #148]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d48:	4a24      	ldr	r2, [pc, #144]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d50:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d5c:	f7ff f9de 	bl	800111c <HAL_PWREx_GetVoltageRange>
 8001d60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d62:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	4a1d      	ldr	r2, [pc, #116]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d74:	d10b      	bne.n	8001d8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b80      	cmp	r3, #128	@ 0x80
 8001d7a:	d919      	bls.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d80:	d902      	bls.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	e013      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d88:	2301      	movs	r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	e010      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b80      	cmp	r3, #128	@ 0x80
 8001d92:	d902      	bls.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d94:	2303      	movs	r3, #3
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e00a      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	@ 0x80
 8001d9e:	d102      	bne.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da0:	2302      	movs	r3, #2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e004      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b70      	cmp	r3, #112	@ 0x70
 8001daa:	d101      	bne.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dac:	2301      	movs	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 0207 	bic.w	r2, r3, #7
 8001db8:	4909      	ldr	r1, [pc, #36]	@ (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dc0:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40022000 	.word	0x40022000

08001de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dec:	2300      	movs	r3, #0
 8001dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001df0:	2300      	movs	r3, #0
 8001df2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d041      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e04:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e08:	d02a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e0e:	d824      	bhi.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e14:	d008      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e1a:	d81e      	bhi.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e24:	d010      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e26:	e018      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e28:	4b86      	ldr	r3, [pc, #536]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a85      	ldr	r2, [pc, #532]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e34:	e015      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fabb 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8001e42:	4603      	mov	r3, r0
 8001e44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e46:	e00c      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fba6 	bl	80025a0 <RCCEx_PLLSAI2_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e58:	e003      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e5e:	e000      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e62:	7cfb      	ldrb	r3, [r7, #19]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e68:	4b76      	ldr	r3, [pc, #472]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e76:	4973      	ldr	r1, [pc, #460]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e7e:	e001      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e80:	7cfb      	ldrb	r3, [r7, #19]
 8001e82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d041      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e98:	d02a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e9e:	d824      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ea0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ea6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eaa:	d81e      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eb6:	e018      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a61      	ldr	r2, [pc, #388]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fa73 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed6:	e00c      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3320      	adds	r3, #32
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fb5e 	bl	80025a0 <RCCEx_PLLSAI2_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee8:	e003      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	74fb      	strb	r3, [r7, #19]
      break;
 8001eee:	e000      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef8:	4b52      	ldr	r3, [pc, #328]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f06:	494f      	ldr	r1, [pc, #316]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f0e:	e001      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a0 	beq.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f26:	4b47      	ldr	r3, [pc, #284]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b41      	ldr	r3, [pc, #260]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	4a40      	ldr	r2, [pc, #256]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f48:	4b3e      	ldr	r3, [pc, #248]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f58:	4b3b      	ldr	r3, [pc, #236]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f64:	f7fe fd3e 	bl	80009e4 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f6a:	e009      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7fe fd3a 	bl	80009e4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d902      	bls.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f7e:	e005      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f80:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ef      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d15c      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f92:	4b2c      	ldr	r3, [pc, #176]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01f      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d019      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb0:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fbc:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc2:	4a20      	ldr	r2, [pc, #128]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fdc:	4a19      	ldr	r2, [pc, #100]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7fe fcf9 	bl	80009e4 <HAL_GetTick>
 8001ff2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff4:	e00b      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fcf5 	bl	80009e4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d902      	bls.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	74fb      	strb	r3, [r7, #19]
            break;
 800200c:	e006      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ec      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002022:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002028:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002032:	4904      	ldr	r1, [pc, #16]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800203a:	e009      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	74bb      	strb	r3, [r7, #18]
 8002040:	e006      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002050:	7c7b      	ldrb	r3, [r7, #17]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b9e      	ldr	r3, [pc, #632]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205a:	4a9d      	ldr	r2, [pc, #628]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002060:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206e:	4b98      	ldr	r3, [pc, #608]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002074:	f023 0203 	bic.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207c:	4994      	ldr	r1, [pc, #592]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002090:	4b8f      	ldr	r3, [pc, #572]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002096:	f023 020c 	bic.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209e:	498c      	ldr	r1, [pc, #560]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020b2:	4b87      	ldr	r3, [pc, #540]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	4983      	ldr	r1, [pc, #524]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020d4:	4b7e      	ldr	r3, [pc, #504]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	497b      	ldr	r1, [pc, #492]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020f6:	4b76      	ldr	r3, [pc, #472]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002104:	4972      	ldr	r1, [pc, #456]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002118:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	496a      	ldr	r1, [pc, #424]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800213a:	4b65      	ldr	r3, [pc, #404]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002140:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	4961      	ldr	r1, [pc, #388]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800215c:	4b5c      	ldr	r3, [pc, #368]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216a:	4959      	ldr	r1, [pc, #356]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217e:	4b54      	ldr	r3, [pc, #336]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002184:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218c:	4950      	ldr	r1, [pc, #320]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a0:	4b4b      	ldr	r3, [pc, #300]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ae:	4948      	ldr	r1, [pc, #288]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021c2:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	493f      	ldr	r1, [pc, #252]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d028      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e4:	4b3a      	ldr	r3, [pc, #232]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f2:	4937      	ldr	r1, [pc, #220]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002202:	d106      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002204:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a31      	ldr	r2, [pc, #196]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800220e:	60d3      	str	r3, [r2, #12]
 8002210:	e011      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002216:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800221a:	d10c      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3304      	adds	r3, #4
 8002220:	2101      	movs	r1, #1
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8c8 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002232:	7cfb      	ldrb	r3, [r7, #19]
 8002234:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d028      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002242:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	491f      	ldr	r1, [pc, #124]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002260:	d106      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002262:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800226c:	60d3      	str	r3, [r2, #12]
 800226e:	e011      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002274:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002278:	d10c      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	2101      	movs	r1, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f899 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d02b      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ae:	4908      	ldr	r1, [pc, #32]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022be:	d109      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a02      	ldr	r2, [pc, #8]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ca:	60d3      	str	r3, [r2, #12]
 80022cc:	e014      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2101      	movs	r1, #1
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f867 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 80022ea:	4603      	mov	r3, r0
 80022ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02f      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002304:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002312:	4928      	ldr	r1, [pc, #160]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800231e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002322:	d10d      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	2102      	movs	r1, #2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f844 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	74bb      	strb	r3, [r7, #18]
 800233e:	e011      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002348:	d10c      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3320      	adds	r3, #32
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f925 	bl	80025a0 <RCCEx_PLLSAI2_Config>
 8002356:	4603      	mov	r3, r0
 8002358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002370:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002376:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800237e:	490d      	ldr	r1, [pc, #52]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002392:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002398:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023a2:	4904      	ldr	r1, [pc, #16]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000

080023b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023c6:	4b75      	ldr	r3, [pc, #468]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d018      	beq.n	8002404 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023d2:	4b72      	ldr	r3, [pc, #456]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0203 	and.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10d      	bne.n	80023fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
       ||
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023ea:	4b6c      	ldr	r3, [pc, #432]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
       ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d047      	beq.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e044      	b.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d018      	beq.n	800243e <RCCEx_PLLSAI1_Config+0x86>
 800240c:	2b03      	cmp	r3, #3
 800240e:	d825      	bhi.n	800245c <RCCEx_PLLSAI1_Config+0xa4>
 8002410:	2b01      	cmp	r3, #1
 8002412:	d002      	beq.n	800241a <RCCEx_PLLSAI1_Config+0x62>
 8002414:	2b02      	cmp	r3, #2
 8002416:	d009      	beq.n	800242c <RCCEx_PLLSAI1_Config+0x74>
 8002418:	e020      	b.n	800245c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800241a:	4b60      	ldr	r3, [pc, #384]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11d      	bne.n	8002462 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242a:	e01a      	b.n	8002462 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800242c:	4b5b      	ldr	r3, [pc, #364]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e013      	b.n	8002466 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800243e:	4b57      	ldr	r3, [pc, #348]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800244a:	4b54      	ldr	r3, [pc, #336]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800245a:	e006      	b.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      break;
 8002460:	e004      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002462:	bf00      	nop
 8002464:	e002      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002466:	bf00      	nop
 8002468:	e000      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800246a:	bf00      	nop
    }

    if(status == HAL_OK)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002472:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	430b      	orrs	r3, r1
 8002488:	4944      	ldr	r1, [pc, #272]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d17d      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002494:	4b41      	ldr	r3, [pc, #260]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a40      	ldr	r2, [pc, #256]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800249e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe faa0 	bl	80009e4 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024a6:	e009      	b.n	80024bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a8:	f7fe fa9c 	bl	80009e4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ba:	e005      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024bc:	4b37      	ldr	r3, [pc, #220]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ef      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d160      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d111      	bne.n	80024f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d4:	4b31      	ldr	r3, [pc, #196]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	0211      	lsls	r1, r2, #8
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	0912      	lsrs	r2, r2, #4
 80024ec:	0452      	lsls	r2, r2, #17
 80024ee:	430a      	orrs	r2, r1
 80024f0:	492a      	ldr	r1, [pc, #168]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	610b      	str	r3, [r1, #16]
 80024f6:	e027      	b.n	8002548 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d112      	bne.n	8002524 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fe:	4b27      	ldr	r3, [pc, #156]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002506:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	0211      	lsls	r1, r2, #8
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6912      	ldr	r2, [r2, #16]
 8002514:	0852      	lsrs	r2, r2, #1
 8002516:	3a01      	subs	r2, #1
 8002518:	0552      	lsls	r2, r2, #21
 800251a:	430a      	orrs	r2, r1
 800251c:	491f      	ldr	r1, [pc, #124]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	610b      	str	r3, [r1, #16]
 8002522:	e011      	b.n	8002548 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002524:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800252c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6892      	ldr	r2, [r2, #8]
 8002534:	0211      	lsls	r1, r2, #8
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6952      	ldr	r2, [r2, #20]
 800253a:	0852      	lsrs	r2, r2, #1
 800253c:	3a01      	subs	r2, #1
 800253e:	0652      	lsls	r2, r2, #25
 8002540:	430a      	orrs	r2, r1
 8002542:	4916      	ldr	r1, [pc, #88]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a13      	ldr	r2, [pc, #76]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002552:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe fa46 	bl	80009e4 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800255a:	e009      	b.n	8002570 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800255c:	f7fe fa42 	bl	80009e4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d902      	bls.n	8002570 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	73fb      	strb	r3, [r7, #15]
          break;
 800256e:	e005      	b.n	800257c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002570:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ef      	beq.n	800255c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	4904      	ldr	r1, [pc, #16]	@ (800259c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d018      	beq.n	80025ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025ba:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d10d      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
       ||
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025d2:	4b61      	ldr	r3, [pc, #388]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
       ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d047      	beq.n	8002676 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e044      	b.n	8002676 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d018      	beq.n	8002626 <RCCEx_PLLSAI2_Config+0x86>
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d825      	bhi.n	8002644 <RCCEx_PLLSAI2_Config+0xa4>
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d002      	beq.n	8002602 <RCCEx_PLLSAI2_Config+0x62>
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d009      	beq.n	8002614 <RCCEx_PLLSAI2_Config+0x74>
 8002600:	e020      	b.n	8002644 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002602:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11d      	bne.n	800264a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002612:	e01a      	b.n	800264a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002614:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002624:	e013      	b.n	800264e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002626:	4b4c      	ldr	r3, [pc, #304]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002632:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002642:	e006      	b.n	8002652 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e004      	b.n	8002654 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002652:	bf00      	nop
    }

    if(status == HAL_OK)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800265a:	4b3f      	ldr	r3, [pc, #252]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	430b      	orrs	r3, r1
 8002670:	4939      	ldr	r1, [pc, #228]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d167      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800267c:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a35      	ldr	r2, [pc, #212]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002688:	f7fe f9ac 	bl	80009e4 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800268e:	e009      	b.n	80026a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002690:	f7fe f9a8 	bl	80009e4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	73fb      	strb	r3, [r7, #15]
        break;
 80026a2:	e005      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ef      	bne.n	8002690 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d14a      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026bc:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	0912      	lsrs	r2, r2, #4
 80026d4:	0452      	lsls	r2, r2, #17
 80026d6:	430a      	orrs	r2, r1
 80026d8:	491f      	ldr	r1, [pc, #124]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	614b      	str	r3, [r1, #20]
 80026de:	e011      	b.n	8002704 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6892      	ldr	r2, [r2, #8]
 80026f0:	0211      	lsls	r1, r2, #8
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6912      	ldr	r2, [r2, #16]
 80026f6:	0852      	lsrs	r2, r2, #1
 80026f8:	3a01      	subs	r2, #1
 80026fa:	0652      	lsls	r2, r2, #25
 80026fc:	430a      	orrs	r2, r1
 80026fe:	4916      	ldr	r1, [pc, #88]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002700:	4313      	orrs	r3, r2
 8002702:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a13      	ldr	r2, [pc, #76]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe f968 	bl	80009e4 <HAL_GetTick>
 8002714:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002716:	e009      	b.n	800272c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002718:	f7fe f964 	bl	80009e4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d902      	bls.n	800272c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	73fb      	strb	r3, [r7, #15]
          break;
 800272a:	e005      	b.n	8002738 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800272c:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ef      	beq.n	8002718 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4904      	ldr	r1, [pc, #16]	@ (8002758 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e040      	b.n	80027f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fd ffe6 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	@ 0x24
 8002788:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fe8a 	bl	80034bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fbcf 	bl	8002f4c <UART_SetConfig>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e01b      	b.n	80027f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 ff09 	bl	8003600 <UART_CheckIdleState>
 80027ee:	4603      	mov	r3, r0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b08b      	sub	sp, #44	@ 0x2c
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800280a:	2b20      	cmp	r3, #32
 800280c:	d147      	bne.n	800289e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_Transmit_IT+0x22>
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e040      	b.n	80028a0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2221      	movs	r2, #33	@ 0x21
 8002846:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002850:	d107      	bne.n	8002862 <HAL_UART_Transmit_IT+0x6a>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <HAL_UART_Transmit_IT+0xb4>)
 800285e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002860:	e002      	b.n	8002868 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <HAL_UART_Transmit_IT+0xb8>)
 8002866:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	e853 3f00 	ldrex	r3, [r3]
 8002874:	613b      	str	r3, [r7, #16]
   return(result);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288a:	69f9      	ldr	r1, [r7, #28]
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	e841 2300 	strex	r3, r2, [r1]
 8002892:	61bb      	str	r3, [r7, #24]
   return(result);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e6      	bne.n	8002868 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	372c      	adds	r7, #44	@ 0x2c
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	08003b57 	.word	0x08003b57
 80028b0:	08003aa1 	.word	0x08003aa1

080028b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	@ 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d137      	bne.n	800293c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_UART_Receive_IT+0x24>
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e030      	b.n	800293e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a18      	ldr	r2, [pc, #96]	@ (8002948 <HAL_UART_Receive_IT+0x94>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01f      	beq.n	800292c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d018      	beq.n	800292c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	e853 3f00 	ldrex	r3, [r3]
 8002906:	613b      	str	r3, [r7, #16]
   return(result);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	623b      	str	r3, [r7, #32]
 800291a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291c:	69f9      	ldr	r1, [r7, #28]
 800291e:	6a3a      	ldr	r2, [r7, #32]
 8002920:	e841 2300 	strex	r3, r2, [r1]
 8002924:	61bb      	str	r3, [r7, #24]
   return(result);
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e6      	bne.n	80028fa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	461a      	mov	r2, r3
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 ff74 	bl	8003820 <UART_Start_Receive_IT>
 8002938:	4603      	mov	r3, r0
 800293a:	e000      	b.n	800293e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3728      	adds	r7, #40	@ 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40008000 	.word	0x40008000

0800294c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b0ba      	sub	sp, #232	@ 0xe8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002972:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002976:	f640 030f 	movw	r3, #2063	@ 0x80f
 800297a:	4013      	ands	r3, r2
 800297c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d115      	bne.n	80029b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00f      	beq.n	80029b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 82ae 	beq.w	8002f06 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
      }
      return;
 80029b2:	e2a8      	b.n	8002f06 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80029b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8117 	beq.w	8002bec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80029ce:	4b85      	ldr	r3, [pc, #532]	@ (8002be4 <HAL_UART_IRQHandler+0x298>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 810a 	beq.w	8002bec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d011      	beq.n	8002a08 <HAL_UART_IRQHandler+0xbc>
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2201      	movs	r2, #1
 80029f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d011      	beq.n	8002a38 <HAL_UART_IRQHandler+0xec>
 8002a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2202      	movs	r2, #2
 8002a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a2e:	f043 0204 	orr.w	r2, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d011      	beq.n	8002a68 <HAL_UART_IRQHandler+0x11c>
 8002a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2204      	movs	r2, #4
 8002a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d017      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2208      	movs	r2, #8
 8002a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a9a:	f043 0208 	orr.w	r2, r3, #8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x18a>
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8214 	beq.w	8002f0a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1e:	2b40      	cmp	r3, #64	@ 0x40
 8002b20:	d005      	beq.n	8002b2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04f      	beq.n	8002bce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 ff3c 	bl	80039ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3e:	2b40      	cmp	r3, #64	@ 0x40
 8002b40:	d141      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3308      	adds	r3, #8
 8002b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3308      	adds	r3, #8
 8002b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1d9      	bne.n	8002b42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d013      	beq.n	8002bbe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9a:	4a13      	ldr	r2, [pc, #76]	@ (8002be8 <HAL_UART_IRQHandler+0x29c>)
 8002b9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f89d 	bl	8000ce2 <HAL_DMA_Abort_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d017      	beq.n	8002bde <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	e00f      	b.n	8002bde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9ae 	bl	8002f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	e00b      	b.n	8002bde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f9aa 	bl	8002f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	e007      	b.n	8002bde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f9a6 	bl	8002f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002bdc:	e195      	b.n	8002f0a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bde:	bf00      	nop
    return;
 8002be0:	e193      	b.n	8002f0a <HAL_UART_IRQHandler+0x5be>
 8002be2:	bf00      	nop
 8002be4:	04000120 	.word	0x04000120
 8002be8:	08003a75 	.word	0x08003a75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f040 814e 	bne.w	8002e92 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8147 	beq.w	8002e92 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8140 	beq.w	8002e92 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2210      	movs	r2, #16
 8002c18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b40      	cmp	r3, #64	@ 0x40
 8002c26:	f040 80b8 	bne.w	8002d9a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8167 	beq.w	8002f0e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	f080 815f 	bcs.w	8002f0e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8086 	bne.w	8002d78 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ca2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1da      	bne.n	8002c6c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3308      	adds	r3, #8
 8002cbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc0:	e853 3f00 	ldrex	r3, [r3]
 8002cc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ce2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e1      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3308      	adds	r3, #8
 8002d12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e3      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d48:	f023 0310 	bic.w	r3, r3, #16
 8002d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e4      	bne.n	8002d38 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd ff77 	bl	8000c66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8ce 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d98:	e0b9      	b.n	8002f0e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80ab 	beq.w	8002f12 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a6 	beq.w	8002f12 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e4      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3308      	adds	r3, #8
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e20:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e3      	bne.n	8002dfc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 0310 	bic.w	r3, r3, #16
 8002e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	617b      	str	r3, [r7, #20]
   return(result);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e4      	bne.n	8002e48 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f852 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e90:	e03f      	b.n	8002f12 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <HAL_UART_IRQHandler+0x570>
 8002e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f001 f895 	bl	8003fe4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eba:	e02d      	b.n	8002f18 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01c      	beq.n	8002f16 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
    }
    return;
 8002ee4:	e017      	b.n	8002f16 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_UART_IRQHandler+0x5cc>
 8002ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fe89 	bl	8003c16 <UART_EndTransmit_IT>
    return;
 8002f04:	e008      	b.n	8002f18 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002f06:	bf00      	nop
 8002f08:	e006      	b.n	8002f18 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002f0a:	bf00      	nop
 8002f0c:	e004      	b.n	8002f18 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002f16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f18:	37e8      	adds	r7, #232	@ 0xe8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop

08002f20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b08a      	sub	sp, #40	@ 0x28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4ba4      	ldr	r3, [pc, #656]	@ (800320c <UART_SetConfig+0x2c0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a99      	ldr	r2, [pc, #612]	@ (8003210 <UART_SetConfig+0x2c4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a90      	ldr	r2, [pc, #576]	@ (8003214 <UART_SetConfig+0x2c8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d126      	bne.n	8003024 <UART_SetConfig+0xd8>
 8002fd6:	4b90      	ldr	r3, [pc, #576]	@ (8003218 <UART_SetConfig+0x2cc>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d81b      	bhi.n	800301c <UART_SetConfig+0xd0>
 8002fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <UART_SetConfig+0xa0>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	0800300d 	.word	0x0800300d
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003015 	.word	0x08003015
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003002:	e116      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003004:	2302      	movs	r3, #2
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300a:	e112      	b.n	8003232 <UART_SetConfig+0x2e6>
 800300c:	2304      	movs	r3, #4
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003012:	e10e      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003014:	2308      	movs	r3, #8
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301a:	e10a      	b.n	8003232 <UART_SetConfig+0x2e6>
 800301c:	2310      	movs	r3, #16
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003022:	e106      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a7c      	ldr	r2, [pc, #496]	@ (800321c <UART_SetConfig+0x2d0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d138      	bne.n	80030a0 <UART_SetConfig+0x154>
 800302e:	4b7a      	ldr	r3, [pc, #488]	@ (8003218 <UART_SetConfig+0x2cc>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b0c      	cmp	r3, #12
 800303a:	d82d      	bhi.n	8003098 <UART_SetConfig+0x14c>
 800303c:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0xf8>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003079 	.word	0x08003079
 8003048:	08003099 	.word	0x08003099
 800304c:	08003099 	.word	0x08003099
 8003050:	08003099 	.word	0x08003099
 8003054:	08003089 	.word	0x08003089
 8003058:	08003099 	.word	0x08003099
 800305c:	08003099 	.word	0x08003099
 8003060:	08003099 	.word	0x08003099
 8003064:	08003081 	.word	0x08003081
 8003068:	08003099 	.word	0x08003099
 800306c:	08003099 	.word	0x08003099
 8003070:	08003099 	.word	0x08003099
 8003074:	08003091 	.word	0x08003091
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307e:	e0d8      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003080:	2302      	movs	r3, #2
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003086:	e0d4      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003088:	2304      	movs	r3, #4
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308e:	e0d0      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003090:	2308      	movs	r3, #8
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003096:	e0cc      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003098:	2310      	movs	r3, #16
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309e:	e0c8      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003220 <UART_SetConfig+0x2d4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d125      	bne.n	80030f6 <UART_SetConfig+0x1aa>
 80030aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003218 <UART_SetConfig+0x2cc>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030b4:	2b30      	cmp	r3, #48	@ 0x30
 80030b6:	d016      	beq.n	80030e6 <UART_SetConfig+0x19a>
 80030b8:	2b30      	cmp	r3, #48	@ 0x30
 80030ba:	d818      	bhi.n	80030ee <UART_SetConfig+0x1a2>
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d00a      	beq.n	80030d6 <UART_SetConfig+0x18a>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d814      	bhi.n	80030ee <UART_SetConfig+0x1a2>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <UART_SetConfig+0x182>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d008      	beq.n	80030de <UART_SetConfig+0x192>
 80030cc:	e00f      	b.n	80030ee <UART_SetConfig+0x1a2>
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d4:	e0ad      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030d6:	2302      	movs	r3, #2
 80030d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030dc:	e0a9      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030de:	2304      	movs	r3, #4
 80030e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e4:	e0a5      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030e6:	2308      	movs	r3, #8
 80030e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ec:	e0a1      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030ee:	2310      	movs	r3, #16
 80030f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f4:	e09d      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003224 <UART_SetConfig+0x2d8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d125      	bne.n	800314c <UART_SetConfig+0x200>
 8003100:	4b45      	ldr	r3, [pc, #276]	@ (8003218 <UART_SetConfig+0x2cc>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800310a:	2bc0      	cmp	r3, #192	@ 0xc0
 800310c:	d016      	beq.n	800313c <UART_SetConfig+0x1f0>
 800310e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003110:	d818      	bhi.n	8003144 <UART_SetConfig+0x1f8>
 8003112:	2b80      	cmp	r3, #128	@ 0x80
 8003114:	d00a      	beq.n	800312c <UART_SetConfig+0x1e0>
 8003116:	2b80      	cmp	r3, #128	@ 0x80
 8003118:	d814      	bhi.n	8003144 <UART_SetConfig+0x1f8>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <UART_SetConfig+0x1d8>
 800311e:	2b40      	cmp	r3, #64	@ 0x40
 8003120:	d008      	beq.n	8003134 <UART_SetConfig+0x1e8>
 8003122:	e00f      	b.n	8003144 <UART_SetConfig+0x1f8>
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312a:	e082      	b.n	8003232 <UART_SetConfig+0x2e6>
 800312c:	2302      	movs	r3, #2
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003132:	e07e      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003134:	2304      	movs	r3, #4
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313a:	e07a      	b.n	8003232 <UART_SetConfig+0x2e6>
 800313c:	2308      	movs	r3, #8
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003142:	e076      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003144:	2310      	movs	r3, #16
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314a:	e072      	b.n	8003232 <UART_SetConfig+0x2e6>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a35      	ldr	r2, [pc, #212]	@ (8003228 <UART_SetConfig+0x2dc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d12a      	bne.n	80031ac <UART_SetConfig+0x260>
 8003156:	4b30      	ldr	r3, [pc, #192]	@ (8003218 <UART_SetConfig+0x2cc>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003164:	d01a      	beq.n	800319c <UART_SetConfig+0x250>
 8003166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800316a:	d81b      	bhi.n	80031a4 <UART_SetConfig+0x258>
 800316c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003170:	d00c      	beq.n	800318c <UART_SetConfig+0x240>
 8003172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003176:	d815      	bhi.n	80031a4 <UART_SetConfig+0x258>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <UART_SetConfig+0x238>
 800317c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003180:	d008      	beq.n	8003194 <UART_SetConfig+0x248>
 8003182:	e00f      	b.n	80031a4 <UART_SetConfig+0x258>
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e052      	b.n	8003232 <UART_SetConfig+0x2e6>
 800318c:	2302      	movs	r3, #2
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003192:	e04e      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003194:	2304      	movs	r3, #4
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319a:	e04a      	b.n	8003232 <UART_SetConfig+0x2e6>
 800319c:	2308      	movs	r3, #8
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a2:	e046      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031a4:	2310      	movs	r3, #16
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031aa:	e042      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a17      	ldr	r2, [pc, #92]	@ (8003210 <UART_SetConfig+0x2c4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d13a      	bne.n	800322c <UART_SetConfig+0x2e0>
 80031b6:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <UART_SetConfig+0x2cc>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031c4:	d01a      	beq.n	80031fc <UART_SetConfig+0x2b0>
 80031c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031ca:	d81b      	bhi.n	8003204 <UART_SetConfig+0x2b8>
 80031cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d0:	d00c      	beq.n	80031ec <UART_SetConfig+0x2a0>
 80031d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d6:	d815      	bhi.n	8003204 <UART_SetConfig+0x2b8>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <UART_SetConfig+0x298>
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e0:	d008      	beq.n	80031f4 <UART_SetConfig+0x2a8>
 80031e2:	e00f      	b.n	8003204 <UART_SetConfig+0x2b8>
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ea:	e022      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f2:	e01e      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fa:	e01a      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003202:	e016      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320a:	e012      	b.n	8003232 <UART_SetConfig+0x2e6>
 800320c:	efff69f3 	.word	0xefff69f3
 8003210:	40008000 	.word	0x40008000
 8003214:	40013800 	.word	0x40013800
 8003218:	40021000 	.word	0x40021000
 800321c:	40004400 	.word	0x40004400
 8003220:	40004800 	.word	0x40004800
 8003224:	40004c00 	.word	0x40004c00
 8003228:	40005000 	.word	0x40005000
 800322c:	2310      	movs	r3, #16
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a9f      	ldr	r2, [pc, #636]	@ (80034b4 <UART_SetConfig+0x568>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d17a      	bne.n	8003332 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800323c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003240:	2b08      	cmp	r3, #8
 8003242:	d824      	bhi.n	800328e <UART_SetConfig+0x342>
 8003244:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <UART_SetConfig+0x300>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003271 	.word	0x08003271
 8003250:	0800328f 	.word	0x0800328f
 8003254:	08003279 	.word	0x08003279
 8003258:	0800328f 	.word	0x0800328f
 800325c:	0800327f 	.word	0x0800327f
 8003260:	0800328f 	.word	0x0800328f
 8003264:	0800328f 	.word	0x0800328f
 8003268:	0800328f 	.word	0x0800328f
 800326c:	08003287 	.word	0x08003287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7fe fd2c 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 8003274:	61f8      	str	r0, [r7, #28]
        break;
 8003276:	e010      	b.n	800329a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003278:	4b8f      	ldr	r3, [pc, #572]	@ (80034b8 <UART_SetConfig+0x56c>)
 800327a:	61fb      	str	r3, [r7, #28]
        break;
 800327c:	e00d      	b.n	800329a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327e:	f7fe fc8d 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8003282:	61f8      	str	r0, [r7, #28]
        break;
 8003284:	e009      	b.n	800329a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328a:	61fb      	str	r3, [r7, #28]
        break;
 800328c:	e005      	b.n	800329a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80fb 	beq.w	8003498 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d305      	bcc.n	80032be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d903      	bls.n	80032c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032c4:	e0e8      	b.n	8003498 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2200      	movs	r2, #0
 80032ca:	461c      	mov	r4, r3
 80032cc:	4615      	mov	r5, r2
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	022b      	lsls	r3, r5, #8
 80032d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032dc:	0222      	lsls	r2, r4, #8
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	6849      	ldr	r1, [r1, #4]
 80032e2:	0849      	lsrs	r1, r1, #1
 80032e4:	2000      	movs	r0, #0
 80032e6:	4688      	mov	r8, r1
 80032e8:	4681      	mov	r9, r0
 80032ea:	eb12 0a08 	adds.w	sl, r2, r8
 80032ee:	eb43 0b09 	adc.w	fp, r3, r9
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003300:	4650      	mov	r0, sl
 8003302:	4659      	mov	r1, fp
 8003304:	f7fc ff60 	bl	80001c8 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003316:	d308      	bcc.n	800332a <UART_SetConfig+0x3de>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800331e:	d204      	bcs.n	800332a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	e0b6      	b.n	8003498 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003330:	e0b2      	b.n	8003498 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800333a:	d15e      	bne.n	80033fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800333c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003340:	2b08      	cmp	r3, #8
 8003342:	d828      	bhi.n	8003396 <UART_SetConfig+0x44a>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <UART_SetConfig+0x400>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	08003397 	.word	0x08003397
 800335c:	08003387 	.word	0x08003387
 8003360:	08003397 	.word	0x08003397
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe fcac 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 8003374:	61f8      	str	r0, [r7, #28]
        break;
 8003376:	e014      	b.n	80033a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7fe fcbe 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 800337c:	61f8      	str	r0, [r7, #28]
        break;
 800337e:	e010      	b.n	80033a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003380:	4b4d      	ldr	r3, [pc, #308]	@ (80034b8 <UART_SetConfig+0x56c>)
 8003382:	61fb      	str	r3, [r7, #28]
        break;
 8003384:	e00d      	b.n	80033a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7fe fc09 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 800338a:	61f8      	str	r0, [r7, #28]
        break;
 800338c:	e009      	b.n	80033a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003392:	61fb      	str	r3, [r7, #28]
        break;
 8003394:	e005      	b.n	80033a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d077      	beq.n	8003498 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005a      	lsls	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	441a      	add	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d916      	bls.n	80033f2 <UART_SetConfig+0x4a6>
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ca:	d212      	bcs.n	80033f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f023 030f 	bic.w	r3, r3, #15
 80033d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	8afb      	ldrh	r3, [r7, #22]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	8afa      	ldrh	r2, [r7, #22]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	e052      	b.n	8003498 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033f8:	e04e      	b.n	8003498 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d827      	bhi.n	8003452 <UART_SetConfig+0x506>
 8003402:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <UART_SetConfig+0x4bc>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	0800342d 	.word	0x0800342d
 800340c:	08003435 	.word	0x08003435
 8003410:	0800343d 	.word	0x0800343d
 8003414:	08003453 	.word	0x08003453
 8003418:	08003443 	.word	0x08003443
 800341c:	08003453 	.word	0x08003453
 8003420:	08003453 	.word	0x08003453
 8003424:	08003453 	.word	0x08003453
 8003428:	0800344b 	.word	0x0800344b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800342c:	f7fe fc4e 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 8003430:	61f8      	str	r0, [r7, #28]
        break;
 8003432:	e014      	b.n	800345e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7fe fc60 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8003438:	61f8      	str	r0, [r7, #28]
        break;
 800343a:	e010      	b.n	800345e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800343c:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <UART_SetConfig+0x56c>)
 800343e:	61fb      	str	r3, [r7, #28]
        break;
 8003440:	e00d      	b.n	800345e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003442:	f7fe fbab 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8003446:	61f8      	str	r0, [r7, #28]
        break;
 8003448:	e009      	b.n	800345e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800344e:	61fb      	str	r3, [r7, #28]
        break;
 8003450:	e005      	b.n	800345e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800345c:	bf00      	nop
    }

    if (pclk != 0U)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	085a      	lsrs	r2, r3, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	441a      	add	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0f      	cmp	r3, #15
 800347c:	d909      	bls.n	8003492 <UART_SetConfig+0x546>
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003484:	d205      	bcs.n	8003492 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	e002      	b.n	8003498 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3728      	adds	r7, #40	@ 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b2:	bf00      	nop
 80034b4:	40008000 	.word	0x40008000
 80034b8:	00f42400 	.word	0x00f42400

080034bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ba:	d10a      	bne.n	80035d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b098      	sub	sp, #96	@ 0x60
 8003604:	af02      	add	r7, sp, #8
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003610:	f7fd f9e8 	bl	80009e4 <HAL_GetTick>
 8003614:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d12e      	bne.n	8003682 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003624:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f88c 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d021      	beq.n	8003682 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003652:	653b      	str	r3, [r7, #80]	@ 0x50
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44
 800365e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800366a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e6      	bne.n	800363e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e062      	b.n	8003748 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d149      	bne.n	8003724 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003690:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f856 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d03c      	beq.n	8003724 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	623b      	str	r3, [r7, #32]
   return(result);
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e6      	bne.n	80036aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3308      	adds	r3, #8
 80036e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3308      	adds	r3, #8
 80036fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036fc:	61fa      	str	r2, [r7, #28]
 80036fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	617b      	str	r3, [r7, #20]
   return(result);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e5      	bne.n	80036dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e011      	b.n	8003748 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3758      	adds	r7, #88	@ 0x58
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003760:	e049      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d045      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7fd f93b 	bl	80009e4 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <UART_WaitOnFlagUntilTimeout+0x30>
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e048      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d031      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d110      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2208      	movs	r2, #8
 80037a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f8ff 	bl	80039ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2208      	movs	r2, #8
 80037b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e029      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d0:	d111      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f8e5 	bl	80039ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d0a6      	beq.n	8003762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003820:	b480      	push	{r7}
 8003822:	b097      	sub	sp, #92	@ 0x5c
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003852:	d10e      	bne.n	8003872 <UART_Start_Receive_IT+0x52>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <UART_Start_Receive_IT+0x48>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003862:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003866:	e02d      	b.n	80038c4 <UART_Start_Receive_IT+0xa4>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	22ff      	movs	r2, #255	@ 0xff
 800386c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003870:	e028      	b.n	80038c4 <UART_Start_Receive_IT+0xa4>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <UART_Start_Receive_IT+0x76>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <UART_Start_Receive_IT+0x6c>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	22ff      	movs	r2, #255	@ 0xff
 8003886:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800388a:	e01b      	b.n	80038c4 <UART_Start_Receive_IT+0xa4>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	227f      	movs	r2, #127	@ 0x7f
 8003890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003894:	e016      	b.n	80038c4 <UART_Start_Receive_IT+0xa4>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800389e:	d10d      	bne.n	80038bc <UART_Start_Receive_IT+0x9c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <UART_Start_Receive_IT+0x92>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	227f      	movs	r2, #127	@ 0x7f
 80038ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038b0:	e008      	b.n	80038c4 <UART_Start_Receive_IT+0xa4>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	223f      	movs	r2, #63	@ 0x3f
 80038b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038ba:	e003      	b.n	80038c4 <UART_Start_Receive_IT+0xa4>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2222      	movs	r2, #34	@ 0x22
 80038d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3308      	adds	r3, #8
 80038f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80038f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80038fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e5      	bne.n	80038d4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003910:	d107      	bne.n	8003922 <UART_Start_Receive_IT+0x102>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a21      	ldr	r2, [pc, #132]	@ (80039a4 <UART_Start_Receive_IT+0x184>)
 800391e:	669a      	str	r2, [r3, #104]	@ 0x68
 8003920:	e002      	b.n	8003928 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a20      	ldr	r2, [pc, #128]	@ (80039a8 <UART_Start_Receive_IT+0x188>)
 8003926:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d019      	beq.n	8003964 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003950:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e6      	bne.n	8003930 <UART_Start_Receive_IT+0x110>
 8003962:	e018      	b.n	8003996 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	613b      	str	r3, [r7, #16]
   return(result);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f043 0320 	orr.w	r3, r3, #32
 8003978:	653b      	str	r3, [r7, #80]	@ 0x50
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	69f9      	ldr	r1, [r7, #28]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e6      	bne.n	8003964 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	375c      	adds	r7, #92	@ 0x5c
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	08003e29 	.word	0x08003e29
 80039a8:	08003c6d 	.word	0x08003c6d

080039ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b095      	sub	sp, #84	@ 0x54
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80039d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e6      	bne.n	80039b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3308      	adds	r3, #8
 8003a04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e5      	bne.n	80039e6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d118      	bne.n	8003a54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f023 0310 	bic.w	r3, r3, #16
 8003a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	6979      	ldr	r1, [r7, #20]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e6      	bne.n	8003a22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a68:	bf00      	nop
 8003a6a:	3754      	adds	r7, #84	@ 0x54
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff fa44 	bl	8002f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b08f      	sub	sp, #60	@ 0x3c
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aac:	2b21      	cmp	r3, #33	@ 0x21
 8003aae:	d14c      	bne.n	8003b4a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d132      	bne.n	8003b22 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003adc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e6      	bne.n	8003abc <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6979      	ldr	r1, [r7, #20]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e6      	bne.n	8003aee <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003b20:	e013      	b.n	8003b4a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b26:	781a      	ldrb	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003b4a:	bf00      	nop
 8003b4c:	373c      	adds	r7, #60	@ 0x3c
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b091      	sub	sp, #68	@ 0x44
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b62:	2b21      	cmp	r3, #33	@ 0x21
 8003b64:	d151      	bne.n	8003c0a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d132      	bne.n	8003bd8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e6      	bne.n	8003b72 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e6      	bne.n	8003ba4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003bd6:	e018      	b.n	8003c0a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be0:	881a      	ldrh	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bea:	b292      	uxth	r2, r2
 8003bec:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	1c9a      	adds	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003c0a:	bf00      	nop
 8003c0c:	3744      	adds	r7, #68	@ 0x44
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b088      	sub	sp, #32
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6979      	ldr	r1, [r7, #20]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fc fd1f 	bl	80006a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c62:	bf00      	nop
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b09c      	sub	sp, #112	@ 0x70
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c84:	2b22      	cmp	r3, #34	@ 0x22
 8003c86:	f040 80be 	bne.w	8003e06 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003c90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c98:	b2d9      	uxtb	r1, r3
 8003c9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 80a3 	bne.w	8003e1a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e6      	bne.n	8003cd4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3308      	adds	r3, #8
 8003d24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d26:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e5      	bne.n	8003d06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a34      	ldr	r2, [pc, #208]	@ (8003e24 <UART_RxISR_8BIT+0x1b8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d01f      	beq.n	8003d98 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d018      	beq.n	8003d98 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	623b      	str	r3, [r7, #32]
   return(result);
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e6      	bne.n	8003d66 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d12e      	bne.n	8003dfe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0310 	bic.w	r3, r3, #16
 8003dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	69b9      	ldr	r1, [r7, #24]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e6      	bne.n	8003da6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d103      	bne.n	8003dee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2210      	movs	r2, #16
 8003dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff f89c 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dfc:	e00d      	b.n	8003e1a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fc fc68 	bl	80006d4 <HAL_UART_RxCpltCallback>
}
 8003e04:	e009      	b.n	8003e1a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	8b1b      	ldrh	r3, [r3, #24]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0208 	orr.w	r2, r2, #8
 8003e16:	b292      	uxth	r2, r2
 8003e18:	831a      	strh	r2, [r3, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	3770      	adds	r7, #112	@ 0x70
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40008000 	.word	0x40008000

08003e28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b09c      	sub	sp, #112	@ 0x70
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e36:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e40:	2b22      	cmp	r3, #34	@ 0x22
 8003e42:	f040 80be 	bne.w	8003fc2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e54:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e56:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003e5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003e5e:	4013      	ands	r3, r2
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e64:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6a:	1c9a      	adds	r2, r3, #2
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 80a3 	bne.w	8003fd6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eae:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eb0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003eb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e6      	bne.n	8003e90 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ee2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ee8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a34      	ldr	r2, [pc, #208]	@ (8003fe0 <UART_RxISR_16BIT+0x1b8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d01f      	beq.n	8003f54 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f42:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e6      	bne.n	8003f22 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d12e      	bne.n	8003fba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6979      	ldr	r1, [r7, #20]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e6      	bne.n	8003f62 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d103      	bne.n	8003faa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2210      	movs	r2, #16
 8003fa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe ffbe 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fb8:	e00d      	b.n	8003fd6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fc fb8a 	bl	80006d4 <HAL_UART_RxCpltCallback>
}
 8003fc0:	e009      	b.n	8003fd6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	8b1b      	ldrh	r3, [r3, #24]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0208 	orr.w	r2, r2, #8
 8003fd2:	b292      	uxth	r2, r2
 8003fd4:	831a      	strh	r2, [r3, #24]
}
 8003fd6:	bf00      	nop
 8003fd8:	3770      	adds	r7, #112	@ 0x70
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40008000 	.word	0x40008000

08003fe4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <memset>:
 8003ff8:	4402      	add	r2, r0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d100      	bne.n	8004002 <memset+0xa>
 8004000:	4770      	bx	lr
 8004002:	f803 1b01 	strb.w	r1, [r3], #1
 8004006:	e7f9      	b.n	8003ffc <memset+0x4>

08004008 <__libc_init_array>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	4d0d      	ldr	r5, [pc, #52]	@ (8004040 <__libc_init_array+0x38>)
 800400c:	4c0d      	ldr	r4, [pc, #52]	@ (8004044 <__libc_init_array+0x3c>)
 800400e:	1b64      	subs	r4, r4, r5
 8004010:	10a4      	asrs	r4, r4, #2
 8004012:	2600      	movs	r6, #0
 8004014:	42a6      	cmp	r6, r4
 8004016:	d109      	bne.n	800402c <__libc_init_array+0x24>
 8004018:	4d0b      	ldr	r5, [pc, #44]	@ (8004048 <__libc_init_array+0x40>)
 800401a:	4c0c      	ldr	r4, [pc, #48]	@ (800404c <__libc_init_array+0x44>)
 800401c:	f000 f818 	bl	8004050 <_init>
 8004020:	1b64      	subs	r4, r4, r5
 8004022:	10a4      	asrs	r4, r4, #2
 8004024:	2600      	movs	r6, #0
 8004026:	42a6      	cmp	r6, r4
 8004028:	d105      	bne.n	8004036 <__libc_init_array+0x2e>
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004030:	4798      	blx	r3
 8004032:	3601      	adds	r6, #1
 8004034:	e7ee      	b.n	8004014 <__libc_init_array+0xc>
 8004036:	f855 3b04 	ldr.w	r3, [r5], #4
 800403a:	4798      	blx	r3
 800403c:	3601      	adds	r6, #1
 800403e:	e7f2      	b.n	8004026 <__libc_init_array+0x1e>
 8004040:	080040b8 	.word	0x080040b8
 8004044:	080040b8 	.word	0x080040b8
 8004048:	080040b8 	.word	0x080040b8
 800404c:	080040bc 	.word	0x080040bc

08004050 <_init>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr

0800405c <_fini>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr

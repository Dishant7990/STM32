
9.2_TIM_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002840  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080029c8  080029c8  000039c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a08  08002a08  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a08  08002a08  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a08  08002a08  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a08  08002a08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a0c  08002a0c  00003a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a10  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002a1c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002a1c  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a283  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f2  00000000  00000000  0000e2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0000fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fc  00000000  00000000  00010860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025388  00000000  00000000  0001115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7db  00000000  00000000  000364e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e90da  00000000  00000000  00042cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bd99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003028  00000000  00000000  0012bddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0012ee04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029b0 	.word	0x080029b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080029b0 	.word	0x080029b0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa44 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f836 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8fe 	bl	80003d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8de 	bl	8000398 <MX_DMA_Init>
  MX_TIM2_Init();
 80001dc:	f000 f882 	bl	80002e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //TIM2->CCR1 = 64;
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	4815      	ldr	r0, [pc, #84]	@ (8000238 <main+0x70>)
 80001e4:	f001 fd80 	bl	8001ce8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while (CH1_DC < 65535) {
 80001e8:	e00c      	b.n	8000204 <main+0x3c>
			TIM2->CCR1 = CH1_DC;
 80001ea:	4b14      	ldr	r3, [pc, #80]	@ (800023c <main+0x74>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001f2:	635a      	str	r2, [r3, #52]	@ 0x34
			CH1_DC += 70;
 80001f4:	4b11      	ldr	r3, [pc, #68]	@ (800023c <main+0x74>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	3346      	adds	r3, #70	@ 0x46
 80001fa:	4a10      	ldr	r2, [pc, #64]	@ (800023c <main+0x74>)
 80001fc:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 80001fe:	2001      	movs	r0, #1
 8000200:	f000 faa6 	bl	8000750 <HAL_Delay>
		while (CH1_DC < 65535) {
 8000204:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <main+0x74>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800020c:	4293      	cmp	r3, r2
 800020e:	ddec      	ble.n	80001ea <main+0x22>
		}
		while (CH1_DC > 0) {
 8000210:	e00c      	b.n	800022c <main+0x64>
			TIM2->CCR1 = CH1_DC;
 8000212:	4b0a      	ldr	r3, [pc, #40]	@ (800023c <main+0x74>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800021a:	635a      	str	r2, [r3, #52]	@ 0x34
			CH1_DC -= 70;
 800021c:	4b07      	ldr	r3, [pc, #28]	@ (800023c <main+0x74>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	3b46      	subs	r3, #70	@ 0x46
 8000222:	4a06      	ldr	r2, [pc, #24]	@ (800023c <main+0x74>)
 8000224:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 8000226:	2001      	movs	r0, #1
 8000228:	f000 fa92 	bl	8000750 <HAL_Delay>
		while (CH1_DC > 0) {
 800022c:	4b03      	ldr	r3, [pc, #12]	@ (800023c <main+0x74>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	dcee      	bgt.n	8000212 <main+0x4a>
		while (CH1_DC < 65535) {
 8000234:	e7e6      	b.n	8000204 <main+0x3c>
 8000236:	bf00      	nop
 8000238:	20000028 	.word	0x20000028
 800023c:	200000bc 	.word	0x200000bc

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	@ 0x58
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2244      	movs	r2, #68	@ 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fb82 	bl	8002958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000262:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000266:	f000 fec9 	bl	8000ffc <HAL_PWREx_ControlVoltageScaling>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000270:	f000 f8d4 	bl	800041c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	2302      	movs	r3, #2
 8000276:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800027c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	2310      	movs	r3, #16
 8000280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800028e:	230a      	movs	r3, #10
 8000290:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000292:	2307      	movs	r3, #7
 8000294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 ff00 	bl	80010a8 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ae:	f000 f8b5 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2303      	movs	r3, #3
 80002b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002c6:	463b      	mov	r3, r7
 80002c8:	2104      	movs	r1, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fac8 	bl	8001860 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002d6:	f000 f8a1 	bl	800041c <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3758      	adds	r7, #88	@ 0x58
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	@ 0x28
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ea:	f107 031c 	add.w	r3, r7, #28
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f6:	463b      	mov	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	615a      	str	r2, [r3, #20]
 8000306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000308:	4b22      	ldr	r3, [pc, #136]	@ (8000394 <MX_TIM2_Init+0xb0>)
 800030a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800030e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000310:	4b20      	ldr	r3, [pc, #128]	@ (8000394 <MX_TIM2_Init+0xb0>)
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000316:	4b1f      	ldr	r3, [pc, #124]	@ (8000394 <MX_TIM2_Init+0xb0>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800031c:	4b1d      	ldr	r3, [pc, #116]	@ (8000394 <MX_TIM2_Init+0xb0>)
 800031e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000324:	4b1b      	ldr	r3, [pc, #108]	@ (8000394 <MX_TIM2_Init+0xb0>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800032a:	4b1a      	ldr	r3, [pc, #104]	@ (8000394 <MX_TIM2_Init+0xb0>)
 800032c:	2280      	movs	r2, #128	@ 0x80
 800032e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000330:	4818      	ldr	r0, [pc, #96]	@ (8000394 <MX_TIM2_Init+0xb0>)
 8000332:	f001 fc81 	bl	8001c38 <HAL_TIM_PWM_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800033c:	f000 f86e 	bl	800041c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000348:	f107 031c 	add.w	r3, r7, #28
 800034c:	4619      	mov	r1, r3
 800034e:	4811      	ldr	r0, [pc, #68]	@ (8000394 <MX_TIM2_Init+0xb0>)
 8000350:	f002 fa7a 	bl	8002848 <HAL_TIMEx_MasterConfigSynchronization>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800035a:	f000 f85f 	bl	800041c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800035e:	2360      	movs	r3, #96	@ 0x60
 8000360:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800036e:	463b      	mov	r3, r7
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	4807      	ldr	r0, [pc, #28]	@ (8000394 <MX_TIM2_Init+0xb0>)
 8000376:	f001 fdbd 	bl	8001ef4 <HAL_TIM_PWM_ConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000380:	f000 f84c 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000384:	4803      	ldr	r0, [pc, #12]	@ (8000394 <MX_TIM2_Init+0xb0>)
 8000386:	f000 f8bd 	bl	8000504 <HAL_TIM_MspPostInit>

}
 800038a:	bf00      	nop
 800038c:	3728      	adds	r7, #40	@ 0x28
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000028 	.word	0x20000028

08000398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_DMA_Init+0x38>)
 80003a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003a2:	4a0b      	ldr	r2, [pc, #44]	@ (80003d0 <MX_DMA_Init+0x38>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80003aa:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_DMA_Init+0x38>)
 80003ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	200f      	movs	r0, #15
 80003bc:	f000 fac7 	bl	800094e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003c0:	200f      	movs	r0, #15
 80003c2:	f000 fae0 	bl	8000986 <HAL_NVIC_EnableIRQ>

}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_GPIO_Init+0x44>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003de:	4a0e      	ldr	r2, [pc, #56]	@ (8000418 <MX_GPIO_Init+0x44>)
 80003e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_GPIO_Init+0x44>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_GPIO_Init+0x44>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f6:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <MX_GPIO_Init+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_GPIO_Init+0x44>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <Error_Handler+0x8>

08000428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <HAL_MspInit+0x44>)
 8000430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000432:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <HAL_MspInit+0x44>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6613      	str	r3, [r2, #96]	@ 0x60
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <HAL_MspInit+0x44>)
 800043c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b09      	ldr	r3, [pc, #36]	@ (800046c <HAL_MspInit+0x44>)
 8000448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800044a:	4a08      	ldr	r2, [pc, #32]	@ (800046c <HAL_MspInit+0x44>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000450:	6593      	str	r3, [r2, #88]	@ 0x58
 8000452:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_MspInit+0x44>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000480:	d136      	bne.n	80004f0 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000482:	4b1d      	ldr	r3, [pc, #116]	@ (80004f8 <HAL_TIM_PWM_MspInit+0x88>)
 8000484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000486:	4a1c      	ldr	r2, [pc, #112]	@ (80004f8 <HAL_TIM_PWM_MspInit+0x88>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6593      	str	r3, [r2, #88]	@ 0x58
 800048e:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <HAL_TIM_PWM_MspInit+0x88>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800049a:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 800049c:	4a18      	ldr	r2, [pc, #96]	@ (8000500 <HAL_TIM_PWM_MspInit+0x90>)
 800049e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 80004a0:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004a8:	2210      	movs	r2, #16
 80004aa:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004ac:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80004b2:	4b12      	ldr	r3, [pc, #72]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004b4:	2280      	movs	r2, #128	@ 0x80
 80004b6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80004b8:	4b10      	ldr	r3, [pc, #64]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004be:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80004c0:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80004c6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80004d4:	4809      	ldr	r0, [pc, #36]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004d6:	f000 fa71 	bl	80009bc <HAL_DMA_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 80004e0:	f7ff ff9c 	bl	800041c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80004ea:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <HAL_TIM_PWM_MspInit+0x8c>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	20000074 	.word	0x20000074
 8000500:	40020058 	.word	0x40020058

08000504 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000524:	d11c      	bne.n	8000560 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <HAL_TIM_MspPostInit+0x64>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <HAL_TIM_MspPostInit+0x64>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <HAL_TIM_MspPostInit+0x64>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800053e:	2320      	movs	r3, #32
 8000540:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	2302      	movs	r3, #2
 8000544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800054e:	2301      	movs	r3, #1
 8000550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055c:	f000 fb96 	bl	8000c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <NMI_Handler+0x4>

08000574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <MemManage_Handler+0x4>

08000584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <UsageFault_Handler+0x4>

08000594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c2:	f000 f8a5 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <DMA1_Channel5_IRQHandler+0x10>)
 80005d2:	f000 faab 	bl	8000b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000074 	.word	0x20000074

080005e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <SystemInit+0x20>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ea:	4a05      	ldr	r2, [pc, #20]	@ (8000600 <SystemInit+0x20>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000604:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800063c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000608:	f7ff ffea 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480c      	ldr	r0, [pc, #48]	@ (8000640 <LoopForever+0x6>)
  ldr r1, =_edata
 800060e:	490d      	ldr	r1, [pc, #52]	@ (8000644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000610:	4a0d      	ldr	r2, [pc, #52]	@ (8000648 <LoopForever+0xe>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	@ (800064c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000624:	4c0a      	ldr	r4, [pc, #40]	@ (8000650 <LoopForever+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000632:	f002 f999 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000636:	f7ff fdc7 	bl	80001c8 <main>

0800063a <LoopForever>:

LoopForever:
    b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800063c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000648:	08002a10 	.word	0x08002a10
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000650:	200000c4 	.word	0x200000c4

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <HAL_Init+0x3c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a0b      	ldr	r2, [pc, #44]	@ (8000694 <HAL_Init+0x3c>)
 8000668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800066c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066e:	2003      	movs	r0, #3
 8000670:	f000 f962 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f80f 	bl	8000698 <HAL_InitTick>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000680:	2301      	movs	r3, #1
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	e001      	b.n	800068a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000686:	f7ff fecf 	bl	8000428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800068a:	79fb      	ldrb	r3, [r7, #7]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40022000 	.word	0x40022000

08000698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006a4:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <HAL_InitTick+0x6c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d023      	beq.n	80006f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <HAL_InitTick+0x70>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <HAL_InitTick+0x6c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80006be:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f96d 	bl	80009a2 <HAL_SYSTICK_Config>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d10f      	bne.n	80006ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	d809      	bhi.n	80006e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d4:	2200      	movs	r2, #0
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f000 f937 	bl	800094e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e0:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_InitTick+0x74>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e007      	b.n	80006f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e004      	b.n	80006f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e001      	b.n	80006f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000008 	.word	0x20000008
 8000708:	20000000 	.word	0x20000000
 800070c:	20000004 	.word	0x20000004

08000710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_IncTick+0x20>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_IncTick+0x24>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <HAL_IncTick+0x24>)
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008
 8000734:	200000c0 	.word	0x200000c0

08000738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <HAL_GetTick+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	200000c0 	.word	0x200000c0

08000750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000758:	f7ff ffee 	bl	8000738 <HAL_GetTick>
 800075c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000768:	d005      	beq.n	8000776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_Delay+0x44>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000776:	bf00      	nop
 8000778:	f7ff ffde 	bl	8000738 <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d8f7      	bhi.n	8000778 <HAL_Delay+0x28>
  {
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	db0b      	blt.n	8000826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4907      	ldr	r1, [pc, #28]	@ (8000834 <__NVIC_EnableIRQ+0x38>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	@ (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	@ (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	@ 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	@ 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f7ff ff8e 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff29 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff3e 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff8e 	bl	800088c <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff31 	bl	80007fc <__NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffa2 	bl	80008f4 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e098      	b.n	8000b00 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b4d      	ldr	r3, [pc, #308]	@ (8000b0c <HAL_DMA_Init+0x150>)
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d80f      	bhi.n	80009fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b10 <HAL_DMA_Init+0x154>)
 80009e2:	4413      	add	r3, r2
 80009e4:	4a4b      	ldr	r2, [pc, #300]	@ (8000b14 <HAL_DMA_Init+0x158>)
 80009e6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ea:	091b      	lsrs	r3, r3, #4
 80009ec:	009a      	lsls	r2, r3, #2
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a48      	ldr	r2, [pc, #288]	@ (8000b18 <HAL_DMA_Init+0x15c>)
 80009f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80009f8:	e00e      	b.n	8000a18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b46      	ldr	r3, [pc, #280]	@ (8000b1c <HAL_DMA_Init+0x160>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a43      	ldr	r2, [pc, #268]	@ (8000b14 <HAL_DMA_Init+0x158>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	009a      	lsls	r2, r3, #2
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a42      	ldr	r2, [pc, #264]	@ (8000b20 <HAL_DMA_Init+0x164>)
 8000a16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a72:	d039      	beq.n	8000ae8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a27      	ldr	r2, [pc, #156]	@ (8000b18 <HAL_DMA_Init+0x15c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d11a      	bne.n	8000ab4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000a7e:	4b29      	ldr	r3, [pc, #164]	@ (8000b24 <HAL_DMA_Init+0x168>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	f003 031c 	and.w	r3, r3, #28
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	4924      	ldr	r1, [pc, #144]	@ (8000b24 <HAL_DMA_Init+0x168>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000a98:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <HAL_DMA_Init+0x168>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6859      	ldr	r1, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	f003 031c 	and.w	r3, r3, #28
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	491d      	ldr	r1, [pc, #116]	@ (8000b24 <HAL_DMA_Init+0x168>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	600b      	str	r3, [r1, #0]
 8000ab2:	e019      	b.n	8000ae8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_DMA_Init+0x16c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abc:	f003 031c 	and.w	r3, r3, #28
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	4917      	ldr	r1, [pc, #92]	@ (8000b28 <HAL_DMA_Init+0x16c>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <HAL_DMA_Init+0x16c>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6859      	ldr	r1, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	f003 031c 	and.w	r3, r3, #28
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	4911      	ldr	r1, [pc, #68]	@ (8000b28 <HAL_DMA_Init+0x16c>)
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2201      	movs	r2, #1
 8000af2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40020407 	.word	0x40020407
 8000b10:	bffdfff8 	.word	0xbffdfff8
 8000b14:	cccccccd 	.word	0xcccccccd
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	bffdfbf8 	.word	0xbffdfbf8
 8000b20:	40020400 	.word	0x40020400
 8000b24:	400200a8 	.word	0x400200a8
 8000b28:	400204a8 	.word	0x400204a8

08000b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b48:	f003 031c 	and.w	r3, r3, #28
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d026      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0x7a>
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d021      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 0320 	and.w	r3, r3, #32
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d107      	bne.n	8000b80 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0204 	bic.w	r2, r2, #4
 8000b7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b84:	f003 021c 	and.w	r2, r3, #28
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d071      	beq.n	8000c80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000ba4:	e06c      	b.n	8000c80 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f003 031c 	and.w	r3, r3, #28
 8000bae:	2202      	movs	r2, #2
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d02e      	beq.n	8000c18 <HAL_DMA_IRQHandler+0xec>
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d029      	beq.n	8000c18 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10b      	bne.n	8000bea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 020a 	bic.w	r2, r2, #10
 8000be0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f003 021c 	and.w	r2, r3, #28
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d038      	beq.n	8000c80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000c16:	e033      	b.n	8000c80 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1c:	f003 031c 	and.w	r3, r3, #28
 8000c20:	2208      	movs	r2, #8
 8000c22:	409a      	lsls	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d02a      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x156>
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d025      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 020e 	bic.w	r2, r2, #14
 8000c44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f003 021c 	and.w	r2, r3, #28
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d004      	beq.n	8000c82 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e17f      	b.n	8000f9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8171 	beq.w	8000f96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d005      	beq.n	8000ccc <HAL_GPIO_Init+0x40>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d130      	bne.n	8000d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d02:	2201      	movs	r2, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	f003 0201 	and.w	r2, r3, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d118      	bne.n	8000d6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	6939      	ldr	r1, [r7, #16]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80ac 	beq.w	8000f96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fbc <HAL_GPIO_Init+0x330>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e42:	4a5e      	ldr	r2, [pc, #376]	@ (8000fbc <HAL_GPIO_Init+0x330>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8000fbc <HAL_GPIO_Init+0x330>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e56:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc0 <HAL_GPIO_Init+0x334>)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e80:	d025      	beq.n	8000ece <HAL_GPIO_Init+0x242>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc4 <HAL_GPIO_Init+0x338>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01f      	beq.n	8000eca <HAL_GPIO_Init+0x23e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc8 <HAL_GPIO_Init+0x33c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x23a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4d      	ldr	r2, [pc, #308]	@ (8000fcc <HAL_GPIO_Init+0x340>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x236>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd0 <HAL_GPIO_Init+0x344>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x232>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd4 <HAL_GPIO_Init+0x348>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x22e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd8 <HAL_GPIO_Init+0x34c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x22a>
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	e00c      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e00a      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000eba:	2305      	movs	r3, #5
 8000ebc:	e008      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e004      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4093      	lsls	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee0:	4937      	ldr	r1, [pc, #220]	@ (8000fc0 <HAL_GPIO_Init+0x334>)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eee:	4b3b      	ldr	r3, [pc, #236]	@ (8000fdc <HAL_GPIO_Init+0x350>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f12:	4a32      	ldr	r2, [pc, #200]	@ (8000fdc <HAL_GPIO_Init+0x350>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f18:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <HAL_GPIO_Init+0x350>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f3c:	4a27      	ldr	r2, [pc, #156]	@ (8000fdc <HAL_GPIO_Init+0x350>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_GPIO_Init+0x350>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f66:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <HAL_GPIO_Init+0x350>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <HAL_GPIO_Init+0x350>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f90:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <HAL_GPIO_Init+0x350>)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f47f ae78 	bne.w	8000c9c <HAL_GPIO_Init+0x10>
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000c00 	.word	0x48000c00
 8000fd0:	48001000 	.word	0x48001000
 8000fd4:	48001400 	.word	0x48001400
 8000fd8:	48001800 	.word	0x48001800
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40007000 	.word	0x40007000

08000ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800100a:	d130      	bne.n	800106e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800100c:	4b23      	ldr	r3, [pc, #140]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001018:	d038      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001022:	4a1e      	ldr	r2, [pc, #120]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001024:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2232      	movs	r2, #50	@ 0x32
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9b      	lsrs	r3, r3, #18
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001040:	e002      	b.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3b01      	subs	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001054:	d102      	bne.n	800105c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f2      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001068:	d110      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e00f      	b.n	800108e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800107a:	d007      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001084:	4a05      	ldr	r2, [pc, #20]	@ (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800108a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40007000 	.word	0x40007000
 80010a0:	20000000 	.word	0x20000000
 80010a4:	431bde83 	.word	0x431bde83

080010a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e3ca      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ba:	4b97      	ldr	r3, [pc, #604]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c4:	4b94      	ldr	r3, [pc, #592]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80e4 	beq.w	80012a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <HAL_RCC_OscConfig+0x4a>
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b0c      	cmp	r3, #12
 80010e6:	f040 808b 	bne.w	8001200 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8087 	bne.w	8001200 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010f2:	4b89      	ldr	r3, [pc, #548]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_RCC_OscConfig+0x62>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e3a2      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1a      	ldr	r2, [r3, #32]
 800110e:	4b82      	ldr	r3, [pc, #520]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <HAL_RCC_OscConfig+0x7c>
 800111a:	4b7f      	ldr	r3, [pc, #508]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001122:	e005      	b.n	8001130 <HAL_RCC_OscConfig+0x88>
 8001124:	4b7c      	ldr	r3, [pc, #496]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001130:	4293      	cmp	r3, r2
 8001132:	d223      	bcs.n	800117c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fd1d 	bl	8001b78 <RCC_SetFlashLatencyFromMSIRange>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e383      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001148:	4b73      	ldr	r3, [pc, #460]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a72      	ldr	r2, [pc, #456]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b70      	ldr	r3, [pc, #448]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	496d      	ldr	r1, [pc, #436]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001166:	4b6c      	ldr	r3, [pc, #432]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	4968      	ldr	r1, [pc, #416]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
 800117a:	e025      	b.n	80011c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800117c:	4b66      	ldr	r3, [pc, #408]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a65      	ldr	r2, [pc, #404]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b63      	ldr	r3, [pc, #396]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4960      	ldr	r1, [pc, #384]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800119a:	4b5f      	ldr	r3, [pc, #380]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	495b      	ldr	r1, [pc, #364]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d109      	bne.n	80011c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fcdd 	bl	8001b78 <RCC_SetFlashLatencyFromMSIRange>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e343      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011c8:	f000 fc4a 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 80011cc:	4602      	mov	r2, r0
 80011ce:	4b52      	ldr	r3, [pc, #328]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	4950      	ldr	r1, [pc, #320]	@ (800131c <HAL_RCC_OscConfig+0x274>)
 80011da:	5ccb      	ldrb	r3, [r1, r3]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_RCC_OscConfig+0x278>)
 80011e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001324 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fa53 	bl	8000698 <HAL_InitTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d052      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	e327      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d032      	beq.n	800126e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001208:	4b43      	ldr	r3, [pc, #268]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a42      	ldr	r2, [pc, #264]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001214:	f7ff fa90 	bl	8000738 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121c:	f7ff fa8c 	bl	8000738 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e310      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800122e:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123a:	4b37      	ldr	r3, [pc, #220]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a36      	ldr	r2, [pc, #216]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b34      	ldr	r3, [pc, #208]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4931      	ldr	r1, [pc, #196]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001258:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	492c      	ldr	r1, [pc, #176]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
 800126c:	e01a      	b.n	80012a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800126e:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a29      	ldr	r2, [pc, #164]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800127a:	f7ff fa5d 	bl	8000738 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001282:	f7ff fa59 	bl	8000738 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e2dd      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x1da>
 80012a0:	e000      	b.n	80012a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d074      	beq.n	800139a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x21a>
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d10e      	bne.n	80012da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d10b      	bne.n	80012da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d064      	beq.n	8001398 <HAL_RCC_OscConfig+0x2f0>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d160      	bne.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e2ba      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x24a>
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80012ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e026      	b.n	8001340 <HAL_RCC_OscConfig+0x298>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012fa:	d115      	bne.n	8001328 <HAL_RCC_OscConfig+0x280>
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 8001302:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a02      	ldr	r2, [pc, #8]	@ (8001318 <HAL_RCC_OscConfig+0x270>)
 800130e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e014      	b.n	8001340 <HAL_RCC_OscConfig+0x298>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	080029c8 	.word	0x080029c8
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004
 8001328:	4ba0      	ldr	r3, [pc, #640]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a9f      	ldr	r2, [pc, #636]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b9d      	ldr	r3, [pc, #628]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a9c      	ldr	r2, [pc, #624]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff f9f6 	bl	8000738 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff f9f2 	bl	8000738 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e276      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001362:	4b92      	ldr	r3, [pc, #584]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x2a8>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff f9e2 	bl	8000738 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff f9de 	bl	8000738 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e262      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	4b88      	ldr	r3, [pc, #544]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d0>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d060      	beq.n	8001468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_OscConfig+0x310>
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d119      	bne.n	80013e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d116      	bne.n	80013e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b8:	4b7c      	ldr	r3, [pc, #496]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_OscConfig+0x328>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e23f      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b76      	ldr	r3, [pc, #472]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	4973      	ldr	r1, [pc, #460]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e4:	e040      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d023      	beq.n	8001436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ee:	4b6f      	ldr	r3, [pc, #444]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6e      	ldr	r2, [pc, #440]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff f99d 	bl	8000738 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff f999 	bl	8000738 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e21d      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001414:	4b65      	ldr	r3, [pc, #404]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b62      	ldr	r3, [pc, #392]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	495f      	ldr	r1, [pc, #380]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e018      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b5d      	ldr	r3, [pc, #372]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a5c      	ldr	r2, [pc, #368]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800143c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff f979 	bl	8000738 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff f975 	bl	8000738 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1f9      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145c:	4b53      	ldr	r3, [pc, #332]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d03c      	beq.n	80014ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147c:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001482:	4a4a      	ldr	r2, [pc, #296]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff f954 	bl	8000738 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff f950 	bl	8000738 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1d4      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a6:	4b41      	ldr	r3, [pc, #260]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ef      	beq.n	8001494 <HAL_RCC_OscConfig+0x3ec>
 80014b4:	e01b      	b.n	80014ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80014b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014bc:	4a3b      	ldr	r2, [pc, #236]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff f937 	bl	8000738 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff f933 	bl	8000738 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1b7      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e0:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80014e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ef      	bne.n	80014ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a6 	beq.w	8001648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001500:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	4b27      	ldr	r3, [pc, #156]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	4a26      	ldr	r2, [pc, #152]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001516:	6593      	str	r3, [r2, #88]	@ 0x58
 8001518:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001524:	2301      	movs	r3, #1
 8001526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_RCC_OscConfig+0x508>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d118      	bne.n	8001566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <HAL_RCC_OscConfig+0x508>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <HAL_RCC_OscConfig+0x508>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001540:	f7ff f8fa 	bl	8000738 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff f8f6 	bl	8000738 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e17a      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_RCC_OscConfig+0x508>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d8>
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800157e:	e029      	b.n	80015d4 <HAL_RCC_OscConfig+0x52c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d115      	bne.n	80015b4 <HAL_RCC_OscConfig+0x50c>
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158e:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800159e:	4a03      	ldr	r2, [pc, #12]	@ (80015ac <HAL_RCC_OscConfig+0x504>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x52c>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40007000 	.word	0x40007000
 80015b4:	4b9c      	ldr	r3, [pc, #624]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ba:	4a9b      	ldr	r2, [pc, #620]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015c4:	4b98      	ldr	r3, [pc, #608]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80015c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ca:	4a97      	ldr	r2, [pc, #604]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d016      	beq.n	800160a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff f8ac 	bl	8000738 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff f8a8 	bl	8000738 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e12a      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ed      	beq.n	80015e4 <HAL_RCC_OscConfig+0x53c>
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff f895 	bl	8000738 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff f891 	bl	8000738 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e113      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001628:	4b7f      	ldr	r3, [pc, #508]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ed      	bne.n	8001612 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b7a      	ldr	r3, [pc, #488]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001640:	4a79      	ldr	r2, [pc, #484]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001646:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80fe 	beq.w	800184e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001656:	2b02      	cmp	r3, #2
 8001658:	f040 80d0 	bne.w	80017fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800165c:	4b72      	ldr	r3, [pc, #456]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166c:	429a      	cmp	r2, r3
 800166e:	d130      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	3b01      	subs	r3, #1
 800167c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d127      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800168e:	429a      	cmp	r2, r3
 8001690:	d11f      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800169c:	2a07      	cmp	r2, #7
 800169e:	bf14      	ite	ne
 80016a0:	2201      	movne	r2, #1
 80016a2:	2200      	moveq	r2, #0
 80016a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d113      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d06e      	beq.n	80017b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d069      	beq.n	80017ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016d8:	4b53      	ldr	r3, [pc, #332]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016e4:	4b50      	ldr	r3, [pc, #320]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0ad      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80016fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001700:	f7ff f81a 	bl	8000738 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f816 	bl	8000738 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e09a      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171a:	4b43      	ldr	r3, [pc, #268]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001726:	4b40      	ldr	r3, [pc, #256]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	4b40      	ldr	r3, [pc, #256]	@ (800182c <HAL_RCC_OscConfig+0x784>)
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001736:	3a01      	subs	r2, #1
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001740:	0212      	lsls	r2, r2, #8
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001748:	0852      	lsrs	r2, r2, #1
 800174a:	3a01      	subs	r2, #1
 800174c:	0552      	lsls	r2, r2, #21
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001754:	0852      	lsrs	r2, r2, #1
 8001756:	3a01      	subs	r2, #1
 8001758:	0652      	lsls	r2, r2, #25
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001760:	0912      	lsrs	r2, r2, #4
 8001762:	0452      	lsls	r2, r2, #17
 8001764:	430a      	orrs	r2, r1
 8001766:	4930      	ldr	r1, [pc, #192]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800176c:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2d      	ldr	r2, [pc, #180]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 8001772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001778:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a2a      	ldr	r2, [pc, #168]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001784:	f7fe ffd8 	bl	8000738 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7fe ffd4 	bl	8000738 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e058      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017aa:	e050      	b.n	800184e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e04f      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d148      	bne.n	800184e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017c8:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a16      	ldr	r2, [pc, #88]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017d4:	f7fe ffb0 	bl	8000738 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7fe ffac 	bl	8000738 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e030      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x734>
 80017fa:	e028      	b.n	800184e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d023      	beq.n	800184a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a08      	ldr	r2, [pc, #32]	@ (8001828 <HAL_RCC_OscConfig+0x780>)
 8001808:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800180c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7fe ff93 	bl	8000738 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001814:	e00c      	b.n	8001830 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7fe ff8f 	bl	8000738 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d905      	bls.n	8001830 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e013      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
 8001828:	40021000 	.word	0x40021000
 800182c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_RCC_OscConfig+0x7b0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ec      	bne.n	8001816 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_RCC_OscConfig+0x7b0>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4905      	ldr	r1, [pc, #20]	@ (8001858 <HAL_RCC_OscConfig+0x7b0>)
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_RCC_OscConfig+0x7b4>)
 8001844:	4013      	ands	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	e001      	b.n	800184e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	feeefffc 	.word	0xfeeefffc

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0e7      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b75      	ldr	r3, [pc, #468]	@ (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d910      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b72      	ldr	r3, [pc, #456]	@ (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 0207 	bic.w	r2, r3, #7
 800188a:	4970      	ldr	r1, [pc, #448]	@ (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b6e      	ldr	r3, [pc, #440]	@ (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0cf      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d010      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b66      	ldr	r3, [pc, #408]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018bc:	429a      	cmp	r2, r3
 80018be:	d908      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b63      	ldr	r3, [pc, #396]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4960      	ldr	r1, [pc, #384]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d04c      	beq.n	8001978 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0a6      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fe:	4b54      	ldr	r3, [pc, #336]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e09a      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001916:	4b4e      	ldr	r3, [pc, #312]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e08e      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001926:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e086      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b46      	ldr	r3, [pc, #280]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4943      	ldr	r1, [pc, #268]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001948:	f7fe fef6 	bl	8000738 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7fe fef2 	bl	8000738 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e06e      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b3a      	ldr	r3, [pc, #232]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d010      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001990:	429a      	cmp	r2, r3
 8001992:	d208      	bcs.n	80019a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	492b      	ldr	r1, [pc, #172]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a6:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d210      	bcs.n	80019d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b4:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 0207 	bic.w	r2, r3, #7
 80019bc:	4923      	ldr	r1, [pc, #140]	@ (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c4:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <HAL_RCC_ClockConfig+0x1ec>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e036      	b.n	8001a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	4918      	ldr	r1, [pc, #96]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4910      	ldr	r1, [pc, #64]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a14:	f000 f824 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	490b      	ldr	r1, [pc, #44]	@ (8001a54 <HAL_RCC_ClockConfig+0x1f4>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_ClockConfig+0x1fc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fe2d 	bl	8000698 <HAL_InitTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a42:	7afb      	ldrb	r3, [r7, #11]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	080029c8 	.word	0x080029c8
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a78:	4b3b      	ldr	r3, [pc, #236]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x34>
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d121      	bne.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d11e      	bne.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a94:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001aa0:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e005      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001abc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10d      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	e004      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ae4:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ae6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d134      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aee:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d003      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0xac>
 8001b04:	e005      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b08:	617b      	str	r3, [r7, #20]
      break;
 8001b0a:	e005      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b0e:	617b      	str	r3, [r7, #20]
      break;
 8001b10:	e002      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	617b      	str	r3, [r7, #20]
      break;
 8001b16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	3301      	adds	r3, #1
 8001b24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	fb03 f202 	mul.w	r2, r3, r2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	0e5b      	lsrs	r3, r3, #25
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	3301      	adds	r3, #1
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b58:	69bb      	ldr	r3, [r7, #24]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	@ 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	080029d8 	.word	0x080029d8
 8001b70:	00f42400 	.word	0x00f42400
 8001b74:	007a1200 	.word	0x007a1200

08001b78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b90:	f7ff fa26 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 8001b94:	6178      	str	r0, [r7, #20]
 8001b96:	e014      	b.n	8001bc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba4:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bb0:	f7ff fa16 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 8001bb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	4a1d      	ldr	r2, [pc, #116]	@ (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bc8:	d10b      	bne.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	d919      	bls.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bd4:	d902      	bls.n	8001bdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e013      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e010      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b80      	cmp	r3, #128	@ 0x80
 8001be6:	d902      	bls.n	8001bee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001be8:	2303      	movs	r3, #3
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	e00a      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b80      	cmp	r3, #128	@ 0x80
 8001bf2:	d102      	bne.n	8001bfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	e004      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b70      	cmp	r3, #112	@ 0x70
 8001bfe:	d101      	bne.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c00:	2301      	movs	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 0207 	bic.w	r2, r3, #7
 8001c0c:	4909      	ldr	r1, [pc, #36]	@ (8001c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c14:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e049      	b.n	8001cde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fc06 	bl	8000470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3304      	adds	r3, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f000 fa50 	bl	800211c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_TIM_PWM_Start+0x24>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e03c      	b.n	8001d86 <HAL_TIM_PWM_Start+0x9e>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d109      	bne.n	8001d26 <HAL_TIM_PWM_Start+0x3e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	e02f      	b.n	8001d86 <HAL_TIM_PWM_Start+0x9e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d109      	bne.n	8001d40 <HAL_TIM_PWM_Start+0x58>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e022      	b.n	8001d86 <HAL_TIM_PWM_Start+0x9e>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d109      	bne.n	8001d5a <HAL_TIM_PWM_Start+0x72>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e015      	b.n	8001d86 <HAL_TIM_PWM_Start+0x9e>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d109      	bne.n	8001d74 <HAL_TIM_PWM_Start+0x8c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e008      	b.n	8001d86 <HAL_TIM_PWM_Start+0x9e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e09c      	b.n	8001ec8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <HAL_TIM_PWM_Start+0xb6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d9c:	e023      	b.n	8001de6 <HAL_TIM_PWM_Start+0xfe>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d104      	bne.n	8001dae <HAL_TIM_PWM_Start+0xc6>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dac:	e01b      	b.n	8001de6 <HAL_TIM_PWM_Start+0xfe>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d104      	bne.n	8001dbe <HAL_TIM_PWM_Start+0xd6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dbc:	e013      	b.n	8001de6 <HAL_TIM_PWM_Start+0xfe>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	d104      	bne.n	8001dce <HAL_TIM_PWM_Start+0xe6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001dcc:	e00b      	b.n	8001de6 <HAL_TIM_PWM_Start+0xfe>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d104      	bne.n	8001dde <HAL_TIM_PWM_Start+0xf6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ddc:	e003      	b.n	8001de6 <HAL_TIM_PWM_Start+0xfe>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	6839      	ldr	r1, [r7, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fd04 	bl	80027fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a35      	ldr	r2, [pc, #212]	@ (8001ed0 <HAL_TIM_PWM_Start+0x1e8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_TIM_PWM_Start+0x13e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a34      	ldr	r2, [pc, #208]	@ (8001ed4 <HAL_TIM_PWM_Start+0x1ec>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00e      	beq.n	8001e26 <HAL_TIM_PWM_Start+0x13e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a32      	ldr	r2, [pc, #200]	@ (8001ed8 <HAL_TIM_PWM_Start+0x1f0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_TIM_PWM_Start+0x13e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a31      	ldr	r2, [pc, #196]	@ (8001edc <HAL_TIM_PWM_Start+0x1f4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d004      	beq.n	8001e26 <HAL_TIM_PWM_Start+0x13e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee0 <HAL_TIM_PWM_Start+0x1f8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_PWM_Start+0x142>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_TIM_PWM_Start+0x144>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <HAL_TIM_PWM_Start+0x1e8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01d      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x19e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e52:	d018      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x19e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a22      	ldr	r2, [pc, #136]	@ (8001ee4 <HAL_TIM_PWM_Start+0x1fc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x19e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_TIM_PWM_Start+0x200>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00e      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x19e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001eec <HAL_TIM_PWM_Start+0x204>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x19e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <HAL_TIM_PWM_Start+0x1ec>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x19e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <HAL_TIM_PWM_Start+0x1f0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d115      	bne.n	8001eb2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <HAL_TIM_PWM_Start+0x208>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d015      	beq.n	8001ec4 <HAL_TIM_PWM_Start+0x1dc>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9e:	d011      	beq.n	8001ec4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb0:	e008      	b.n	8001ec4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e000      	b.n	8001ec6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40012c00 	.word	0x40012c00
 8001ed4:	40013400 	.word	0x40013400
 8001ed8:	40014000 	.word	0x40014000
 8001edc:	40014400 	.word	0x40014400
 8001ee0:	40014800 	.word	0x40014800
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	40000c00 	.word	0x40000c00
 8001ef0:	00010007 	.word	0x00010007

08001ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e0ff      	b.n	8002112 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b14      	cmp	r3, #20
 8001f1e:	f200 80f0 	bhi.w	8002102 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001f22:	a201      	add	r2, pc, #4	@ (adr r2, 8001f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f7d 	.word	0x08001f7d
 8001f2c:	08002103 	.word	0x08002103
 8001f30:	08002103 	.word	0x08002103
 8001f34:	08002103 	.word	0x08002103
 8001f38:	08001fbd 	.word	0x08001fbd
 8001f3c:	08002103 	.word	0x08002103
 8001f40:	08002103 	.word	0x08002103
 8001f44:	08002103 	.word	0x08002103
 8001f48:	08001fff 	.word	0x08001fff
 8001f4c:	08002103 	.word	0x08002103
 8001f50:	08002103 	.word	0x08002103
 8001f54:	08002103 	.word	0x08002103
 8001f58:	0800203f 	.word	0x0800203f
 8001f5c:	08002103 	.word	0x08002103
 8001f60:	08002103 	.word	0x08002103
 8001f64:	08002103 	.word	0x08002103
 8001f68:	08002081 	.word	0x08002081
 8001f6c:	08002103 	.word	0x08002103
 8001f70:	08002103 	.word	0x08002103
 8001f74:	08002103 	.word	0x08002103
 8001f78:	080020c1 	.word	0x080020c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f964 	bl	8002250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0208 	orr.w	r2, r2, #8
 8001f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6999      	ldr	r1, [r3, #24]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	619a      	str	r2, [r3, #24]
      break;
 8001fba:	e0a5      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f9d4 	bl	8002370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6999      	ldr	r1, [r3, #24]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	021a      	lsls	r2, r3, #8
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	619a      	str	r2, [r3, #24]
      break;
 8001ffc:	e084      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fa3d 	bl	8002484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0208 	orr.w	r2, r2, #8
 8002018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69da      	ldr	r2, [r3, #28]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0204 	bic.w	r2, r2, #4
 8002028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69d9      	ldr	r1, [r3, #28]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	61da      	str	r2, [r3, #28]
      break;
 800203c:	e064      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 faa5 	bl	8002594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69d9      	ldr	r1, [r3, #28]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	61da      	str	r2, [r3, #28]
      break;
 800207e:	e043      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 faee 	bl	8002668 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0208 	orr.w	r2, r2, #8
 800209a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80020be:	e023      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fb32 	bl	8002730 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	021a      	lsls	r2, r3, #8
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002100:	e002      	b.n	8002108 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
      break;
 8002106:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002110:	7dfb      	ldrb	r3, [r7, #23]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop

0800211c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a40      	ldr	r2, [pc, #256]	@ (8002230 <TIM_Base_SetConfig+0x114>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213a:	d00f      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3d      	ldr	r2, [pc, #244]	@ (8002234 <TIM_Base_SetConfig+0x118>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00b      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3c      	ldr	r2, [pc, #240]	@ (8002238 <TIM_Base_SetConfig+0x11c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3b      	ldr	r2, [pc, #236]	@ (800223c <TIM_Base_SetConfig+0x120>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <TIM_Base_SetConfig+0x124>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d108      	bne.n	800216e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <TIM_Base_SetConfig+0x114>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <TIM_Base_SetConfig+0x9a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d01b      	beq.n	80021b6 <TIM_Base_SetConfig+0x9a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2c      	ldr	r2, [pc, #176]	@ (8002234 <TIM_Base_SetConfig+0x118>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d017      	beq.n	80021b6 <TIM_Base_SetConfig+0x9a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <TIM_Base_SetConfig+0x11c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <TIM_Base_SetConfig+0x9a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <TIM_Base_SetConfig+0x120>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00f      	beq.n	80021b6 <TIM_Base_SetConfig+0x9a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a29      	ldr	r2, [pc, #164]	@ (8002240 <TIM_Base_SetConfig+0x124>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00b      	beq.n	80021b6 <TIM_Base_SetConfig+0x9a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <TIM_Base_SetConfig+0x128>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <TIM_Base_SetConfig+0x9a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a27      	ldr	r2, [pc, #156]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0x9a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a26      	ldr	r2, [pc, #152]	@ (800224c <TIM_Base_SetConfig+0x130>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d108      	bne.n	80021c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <TIM_Base_SetConfig+0x114>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00f      	beq.n	8002214 <TIM_Base_SetConfig+0xf8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <TIM_Base_SetConfig+0x124>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00b      	beq.n	8002214 <TIM_Base_SetConfig+0xf8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a11      	ldr	r2, [pc, #68]	@ (8002244 <TIM_Base_SetConfig+0x128>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <TIM_Base_SetConfig+0xf8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_Base_SetConfig+0xf8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0f      	ldr	r2, [pc, #60]	@ (800224c <TIM_Base_SetConfig+0x130>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	615a      	str	r2, [r3, #20]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40012c00 	.word	0x40012c00
 8002234:	40000400 	.word	0x40000400
 8002238:	40000800 	.word	0x40000800
 800223c:	40000c00 	.word	0x40000c00
 8002240:	40013400 	.word	0x40013400
 8002244:	40014000 	.word	0x40014000
 8002248:	40014400 	.word	0x40014400
 800224c:	40014800 	.word	0x40014800

08002250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f023 0201 	bic.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800227e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f023 0302 	bic.w	r3, r3, #2
 800229c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a2c      	ldr	r2, [pc, #176]	@ (800235c <TIM_OC1_SetConfig+0x10c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00f      	beq.n	80022d0 <TIM_OC1_SetConfig+0x80>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002360 <TIM_OC1_SetConfig+0x110>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00b      	beq.n	80022d0 <TIM_OC1_SetConfig+0x80>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002364 <TIM_OC1_SetConfig+0x114>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d007      	beq.n	80022d0 <TIM_OC1_SetConfig+0x80>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a29      	ldr	r2, [pc, #164]	@ (8002368 <TIM_OC1_SetConfig+0x118>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <TIM_OC1_SetConfig+0x80>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a28      	ldr	r2, [pc, #160]	@ (800236c <TIM_OC1_SetConfig+0x11c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d10c      	bne.n	80022ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f023 0308 	bic.w	r3, r3, #8
 80022d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4313      	orrs	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1b      	ldr	r2, [pc, #108]	@ (800235c <TIM_OC1_SetConfig+0x10c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00f      	beq.n	8002312 <TIM_OC1_SetConfig+0xc2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <TIM_OC1_SetConfig+0x110>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00b      	beq.n	8002312 <TIM_OC1_SetConfig+0xc2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <TIM_OC1_SetConfig+0x114>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <TIM_OC1_SetConfig+0xc2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <TIM_OC1_SetConfig+0x118>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <TIM_OC1_SetConfig+0xc2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a17      	ldr	r2, [pc, #92]	@ (800236c <TIM_OC1_SetConfig+0x11c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d111      	bne.n	8002336 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	621a      	str	r2, [r3, #32]
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40012c00 	.word	0x40012c00
 8002360:	40013400 	.word	0x40013400
 8002364:	40014000 	.word	0x40014000
 8002368:	40014400 	.word	0x40014400
 800236c:	40014800 	.word	0x40014800

08002370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f023 0210 	bic.w	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800239e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f023 0320 	bic.w	r3, r3, #32
 80023be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a28      	ldr	r2, [pc, #160]	@ (8002470 <TIM_OC2_SetConfig+0x100>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_OC2_SetConfig+0x6c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a27      	ldr	r2, [pc, #156]	@ (8002474 <TIM_OC2_SetConfig+0x104>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d10d      	bne.n	80023f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <TIM_OC2_SetConfig+0x100>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00f      	beq.n	8002420 <TIM_OC2_SetConfig+0xb0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a1c      	ldr	r2, [pc, #112]	@ (8002474 <TIM_OC2_SetConfig+0x104>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00b      	beq.n	8002420 <TIM_OC2_SetConfig+0xb0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a1b      	ldr	r2, [pc, #108]	@ (8002478 <TIM_OC2_SetConfig+0x108>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <TIM_OC2_SetConfig+0xb0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a1a      	ldr	r2, [pc, #104]	@ (800247c <TIM_OC2_SetConfig+0x10c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_OC2_SetConfig+0xb0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a19      	ldr	r2, [pc, #100]	@ (8002480 <TIM_OC2_SetConfig+0x110>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d113      	bne.n	8002448 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800242e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	621a      	str	r2, [r3, #32]
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40013400 	.word	0x40013400
 8002478:	40014000 	.word	0x40014000
 800247c:	40014400 	.word	0x40014400
 8002480:	40014800 	.word	0x40014800

08002484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a27      	ldr	r2, [pc, #156]	@ (8002580 <TIM_OC3_SetConfig+0xfc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d003      	beq.n	80024ee <TIM_OC3_SetConfig+0x6a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a26      	ldr	r2, [pc, #152]	@ (8002584 <TIM_OC3_SetConfig+0x100>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10d      	bne.n	800250a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1c      	ldr	r2, [pc, #112]	@ (8002580 <TIM_OC3_SetConfig+0xfc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00f      	beq.n	8002532 <TIM_OC3_SetConfig+0xae>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <TIM_OC3_SetConfig+0x100>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00b      	beq.n	8002532 <TIM_OC3_SetConfig+0xae>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a1a      	ldr	r2, [pc, #104]	@ (8002588 <TIM_OC3_SetConfig+0x104>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <TIM_OC3_SetConfig+0xae>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a19      	ldr	r2, [pc, #100]	@ (800258c <TIM_OC3_SetConfig+0x108>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d003      	beq.n	8002532 <TIM_OC3_SetConfig+0xae>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <TIM_OC3_SetConfig+0x10c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d113      	bne.n	800255a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	621a      	str	r2, [r3, #32]
}
 8002574:	bf00      	nop
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40013400 	.word	0x40013400
 8002588:	40014000 	.word	0x40014000
 800258c:	40014400 	.word	0x40014400
 8002590:	40014800 	.word	0x40014800

08002594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	031b      	lsls	r3, r3, #12
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <TIM_OC4_SetConfig+0xc0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00f      	beq.n	8002618 <TIM_OC4_SetConfig+0x84>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a17      	ldr	r2, [pc, #92]	@ (8002658 <TIM_OC4_SetConfig+0xc4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00b      	beq.n	8002618 <TIM_OC4_SetConfig+0x84>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a16      	ldr	r2, [pc, #88]	@ (800265c <TIM_OC4_SetConfig+0xc8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <TIM_OC4_SetConfig+0x84>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a15      	ldr	r2, [pc, #84]	@ (8002660 <TIM_OC4_SetConfig+0xcc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d003      	beq.n	8002618 <TIM_OC4_SetConfig+0x84>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <TIM_OC4_SetConfig+0xd0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d109      	bne.n	800262c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800261e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	621a      	str	r2, [r3, #32]
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40013400 	.word	0x40013400
 800265c:	40014000 	.word	0x40014000
 8002660:	40014400 	.word	0x40014400
 8002664:	40014800 	.word	0x40014800

08002668 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800269a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80026ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a17      	ldr	r2, [pc, #92]	@ (800271c <TIM_OC5_SetConfig+0xb4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00f      	beq.n	80026e2 <TIM_OC5_SetConfig+0x7a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a16      	ldr	r2, [pc, #88]	@ (8002720 <TIM_OC5_SetConfig+0xb8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00b      	beq.n	80026e2 <TIM_OC5_SetConfig+0x7a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a15      	ldr	r2, [pc, #84]	@ (8002724 <TIM_OC5_SetConfig+0xbc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <TIM_OC5_SetConfig+0x7a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a14      	ldr	r2, [pc, #80]	@ (8002728 <TIM_OC5_SetConfig+0xc0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d003      	beq.n	80026e2 <TIM_OC5_SetConfig+0x7a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a13      	ldr	r2, [pc, #76]	@ (800272c <TIM_OC5_SetConfig+0xc4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d109      	bne.n	80026f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40013400 	.word	0x40013400
 8002724:	40014000 	.word	0x40014000
 8002728:	40014400 	.word	0x40014400
 800272c:	40014800 	.word	0x40014800

08002730 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800275e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	051b      	lsls	r3, r3, #20
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <TIM_OC6_SetConfig+0xb8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00f      	beq.n	80027ac <TIM_OC6_SetConfig+0x7c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a17      	ldr	r2, [pc, #92]	@ (80027ec <TIM_OC6_SetConfig+0xbc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00b      	beq.n	80027ac <TIM_OC6_SetConfig+0x7c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a16      	ldr	r2, [pc, #88]	@ (80027f0 <TIM_OC6_SetConfig+0xc0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d007      	beq.n	80027ac <TIM_OC6_SetConfig+0x7c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <TIM_OC6_SetConfig+0xc4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d003      	beq.n	80027ac <TIM_OC6_SetConfig+0x7c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <TIM_OC6_SetConfig+0xc8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d109      	bne.n	80027c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	029b      	lsls	r3, r3, #10
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	621a      	str	r2, [r3, #32]
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40013400 	.word	0x40013400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800

080027fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2201      	movs	r2, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	43db      	mvns	r3, r3
 800281e:	401a      	ands	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800285c:	2302      	movs	r3, #2
 800285e:	e068      	b.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2e      	ldr	r2, [pc, #184]	@ (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2d      	ldr	r2, [pc, #180]	@ (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d108      	bne.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800289a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01d      	beq.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d018      	beq.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	@ (800294c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00e      	beq.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a13      	ldr	r2, [pc, #76]	@ (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10c      	bne.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800290c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	4313      	orrs	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40013400 	.word	0x40013400
 8002948:	40000400 	.word	0x40000400
 800294c:	40000800 	.word	0x40000800
 8002950:	40000c00 	.word	0x40000c00
 8002954:	40014000 	.word	0x40014000

08002958 <memset>:
 8002958:	4402      	add	r2, r0
 800295a:	4603      	mov	r3, r0
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4d0d      	ldr	r5, [pc, #52]	@ (80029a0 <__libc_init_array+0x38>)
 800296c:	4c0d      	ldr	r4, [pc, #52]	@ (80029a4 <__libc_init_array+0x3c>)
 800296e:	1b64      	subs	r4, r4, r5
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	2600      	movs	r6, #0
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	4d0b      	ldr	r5, [pc, #44]	@ (80029a8 <__libc_init_array+0x40>)
 800297a:	4c0c      	ldr	r4, [pc, #48]	@ (80029ac <__libc_init_array+0x44>)
 800297c:	f000 f818 	bl	80029b0 <_init>
 8002980:	1b64      	subs	r4, r4, r5
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	2600      	movs	r6, #0
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f855 3b04 	ldr.w	r3, [r5], #4
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08002a08 	.word	0x08002a08
 80029a4:	08002a08 	.word	0x08002a08
 80029a8:	08002a08 	.word	0x08002a08
 80029ac:	08002a0c 	.word	0x08002a0c

080029b0 <_init>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	bf00      	nop
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr

080029bc <_fini>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	bf00      	nop
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr

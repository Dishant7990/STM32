
11.0_USB_VIRTUAL_COMPORT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aec  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08008bac  08008bac  00009bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d44  08008d44  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008d44  08008d44  00009d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d4c  08008d4c  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d50  08008d50  00009d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008d54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001350  200001d8  08008f2c  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001528  08008f2c  0000a528  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c440  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5d  00000000  00000000  00016640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  000191a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000818  00000000  00000000  00019cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016837  00000000  00000000  0001a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa9d  00000000  00000000  00030d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000791bd  00000000  00000000  000407a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce0  00000000  00000000  000b99a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000bc684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008b94 	.word	0x08008b94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08008b94 	.word	0x08008b94

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 f9ba 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f81a 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f88e 	bl	80005e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004cc:	f006 fec8 	bl	8007260 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  CDC_Transmit_FS(TxBuffer, TxBufferLen);
	  HAL_Delay(1000);
 80004d0:	23fa      	movs	r3, #250	@ 0xfa
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fa1f 	bl	8000918 <HAL_Delay>
	  printf("Counter : %d\r\n", counter++);
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <main+0x38>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	1c51      	adds	r1, r2, #1
 80004e0:	4b04      	ldr	r3, [pc, #16]	@ (80004f4 <main+0x38>)
 80004e2:	6019      	str	r1, [r3, #0]
 80004e4:	4b04      	ldr	r3, [pc, #16]	@ (80004f8 <main+0x3c>)
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f007 fcb5 	bl	8007e58 <iprintf>
	  HAL_Delay(1000);
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	e7ee      	b.n	80004d0 <main+0x14>
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	200001f4 	.word	0x200001f4
 80004f8:	08008bac 	.word	0x08008bac

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b09d      	sub	sp, #116	@ 0x74
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	2438      	movs	r4, #56	@ 0x38
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2338      	movs	r3, #56	@ 0x38
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f007 fcff 	bl	8007f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000512:	2324      	movs	r3, #36	@ 0x24
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f007 fcf7 	bl	8007f10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2324      	movs	r3, #36	@ 0x24
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f007 fcf0 	bl	8007f10 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <SystemClock_Config+0xe4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a2b      	ldr	r2, [pc, #172]	@ (80005e4 <SystemClock_Config+0xe8>)
 8000536:	401a      	ands	r2, r3
 8000538:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <SystemClock_Config+0xe4>)
 800053a:	2180      	movs	r1, #128	@ 0x80
 800053c:	0109      	lsls	r1, r1, #4
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2222      	movs	r2, #34	@ 0x22
 8000548:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2210      	movs	r2, #16
 8000554:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2201      	movs	r2, #1
 800055a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2202      	movs	r2, #2
 8000560:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	0412      	lsls	r2, r2, #16
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	187b      	adds	r3, r7, r1
 8000578:	0018      	movs	r0, r3
 800057a:	f002 f921 	bl	80027c0 <HAL_RCC_OscConfig>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000582:	f000 f857 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	2124      	movs	r1, #36	@ 0x24
 8000588:	187b      	adds	r3, r7, r1
 800058a:	220f      	movs	r2, #15
 800058c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2203      	movs	r2, #3
 8000592:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 fccc 	bl	8002f48 <HAL_RCC_ClockConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005b4:	f000 f83e 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2240      	movs	r2, #64	@ 0x40
 80005bc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005be:	003b      	movs	r3, r7
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	04d2      	lsls	r2, r2, #19
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 feab 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005d2:	f000 f82f 	bl	8000634 <Error_Handler>
  }
}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b01d      	add	sp, #116	@ 0x74
 80005dc:	bd90      	pop	{r4, r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	40007000 	.word	0x40007000
 80005e4:	ffffe7ff 	.word	0xffffe7ff

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <MX_GPIO_Init+0x28>)
 80005f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <MX_GPIO_Init+0x28>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	430a      	orrs	r2, r1
 80005f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <MX_GPIO_Init+0x28>)
 80005fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005fe:	2201      	movs	r2, #1
 8000600:	4013      	ands	r3, r2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	40021000 	.word	0x40021000

08000614 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */
void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    CDC_Transmit_FS(Buf, Len);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b29a      	uxth	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f006 feae 	bl	8007388 <CDC_Transmit_FS>
}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	e7fd      	b.n	800063c <Error_Handler+0x8>

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <HAL_MspInit+0x24>)
 8000646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_MspInit+0x24>)
 800064a:	2101      	movs	r1, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <HAL_MspInit+0x24>)
 8000652:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000654:	4b03      	ldr	r3, [pc, #12]	@ (8000664 <HAL_MspInit+0x24>)
 8000656:	2180      	movs	r1, #128	@ 0x80
 8000658:	0549      	lsls	r1, r1, #21
 800065a:	430a      	orrs	r2, r1
 800065c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	e7fd      	b.n	800066c <NMI_Handler+0x4>

08000670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	e7fd      	b.n	8000674 <HardFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f926 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <USB_IRQHandler+0x14>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fb60 	bl	8000d68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	20000ec8 	.word	0x20000ec8

080006b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e00a      	b.n	80006dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006c6:	e000      	b.n	80006ca <_read+0x16>
 80006c8:	bf00      	nop
 80006ca:	0001      	movs	r1, r0
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	60ba      	str	r2, [r7, #8]
 80006d2:	b2ca      	uxtb	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3301      	adds	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbf0      	blt.n	80006c6 <_read+0x12>
  }

  return len;
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	0018      	movs	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b006      	add	sp, #24
 80006ec:	bd80      	pop	{r7, pc}

080006ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	CDC_Transmit_FS((const unsigned char *) ptr, len);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f006 fe40 	bl	8007388 <CDC_Transmit_FS>
  return len;
 8000708:	687b      	ldr	r3, [r7, #4]
}
 800070a:	0018      	movs	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	b004      	add	sp, #16
 8000710:	bd80      	pop	{r7, pc}

08000712 <_close>:

int _close(int file)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800071a:	2301      	movs	r3, #1
 800071c:	425b      	negs	r3, r3
}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}

08000726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	2280      	movs	r2, #128	@ 0x80
 8000734:	0192      	lsls	r2, r2, #6
 8000736:	605a      	str	r2, [r3, #4]
  return 0;
 8000738:	2300      	movs	r3, #0
}
 800073a:	0018      	movs	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}

08000742 <_isatty>:

int _isatty(int file)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800074a:	2301      	movs	r3, #1
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}

08000754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000760:	2300      	movs	r3, #0
}
 8000762:	0018      	movs	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	b004      	add	sp, #16
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000774:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <_sbrk+0x5c>)
 8000776:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <_sbrk+0x60>)
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <_sbrk+0x64>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <_sbrk+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	18d3      	adds	r3, r2, r3
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	429a      	cmp	r2, r3
 800079a:	d207      	bcs.n	80007ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800079c:	f007 fc0e 	bl	8007fbc <__errno>
 80007a0:	0003      	movs	r3, r0
 80007a2:	220c      	movs	r2, #12
 80007a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	425b      	negs	r3, r3
 80007aa:	e009      	b.n	80007c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	18d2      	adds	r2, r2, r3
 80007ba:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <_sbrk+0x64>)
 80007bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b006      	add	sp, #24
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20002000 	.word	0x20002000
 80007cc:	00000400 	.word	0x00000400
 80007d0:	200001f8 	.word	0x200001f8
 80007d4:	20001528 	.word	0x20001528

080007d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80007e4:	480d      	ldr	r0, [pc, #52]	@ (800081c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e8:	f7ff fff6 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	@ (8000824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <LoopForever+0xe>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	@ (8000830 <LoopForever+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000812:	f007 fbd9 	bl	8007fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000816:	f7ff fe51 	bl	80004bc <main>

0800081a <LoopForever>:

LoopForever:
    b LoopForever
 800081a:	e7fe      	b.n	800081a <LoopForever>
  ldr   r0, =_estack
 800081c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000828:	08008d54 	.word	0x08008d54
  ldr r2, =_sbss
 800082c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000830:	20001528 	.word	0x20001528

08000834 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_COMP_IRQHandler>
	...

08000838 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000844:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <HAL_Init+0x3c>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_Init+0x3c>)
 800084a:	2140      	movs	r1, #64	@ 0x40
 800084c:	430a      	orrs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000850:	2000      	movs	r0, #0
 8000852:	f000 f811 	bl	8000878 <HAL_InitTick>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d003      	beq.n	8000862 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	e001      	b.n	8000866 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000862:	f7ff feed 	bl	8000640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_InitTick+0x5c>)
 8000882:	681c      	ldr	r4, [r3, #0]
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <HAL_InitTick+0x60>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	0019      	movs	r1, r3
 800088a:	23fa      	movs	r3, #250	@ 0xfa
 800088c:	0098      	lsls	r0, r3, #2
 800088e:	f7ff fc45 	bl	800011c <__udivsi3>
 8000892:	0003      	movs	r3, r0
 8000894:	0019      	movs	r1, r3
 8000896:	0020      	movs	r0, r4
 8000898:	f7ff fc40 	bl	800011c <__udivsi3>
 800089c:	0003      	movs	r3, r0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 f92f 	bl	8000b02 <HAL_SYSTICK_Config>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e00f      	b.n	80008cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d80b      	bhi.n	80008ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	2301      	movs	r3, #1
 80008b6:	425b      	negs	r3, r3
 80008b8:	2200      	movs	r2, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 f8fc 	bl	8000ab8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_InitTick+0x64>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b003      	add	sp, #12
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000004 	.word	0x20000004

080008e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_IncTick+0x1c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	001a      	movs	r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x20>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	18d2      	adds	r2, r2, r3
 80008f0:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <HAL_IncTick+0x20>)
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	20000008 	.word	0x20000008
 8000900:	200001fc 	.word	0x200001fc

08000904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b02      	ldr	r3, [pc, #8]	@ (8000914 <HAL_GetTick+0x10>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	200001fc 	.word	0x200001fc

08000918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff fff0 	bl	8000904 <HAL_GetTick>
 8000924:	0003      	movs	r3, r0
 8000926:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	d005      	beq.n	800093e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <HAL_Delay+0x44>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	001a      	movs	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	189b      	adds	r3, r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	f7ff ffe0 	bl	8000904 <HAL_GetTick>
 8000944:	0002      	movs	r2, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d8f7      	bhi.n	8000940 <HAL_Delay+0x28>
  {
  }
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	20000008 	.word	0x20000008

08000960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	0002      	movs	r2, r0
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b7f      	cmp	r3, #127	@ 0x7f
 8000972:	d809      	bhi.n	8000988 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	231f      	movs	r3, #31
 800097c:	401a      	ands	r2, r3
 800097e:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <__NVIC_EnableIRQ+0x30>)
 8000980:	2101      	movs	r1, #1
 8000982:	4091      	lsls	r1, r2
 8000984:	000a      	movs	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
  }
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80009a8:	d828      	bhi.n	80009fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000a68 <__NVIC_SetPriority+0xd4>)
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	33c0      	adds	r3, #192	@ 0xc0
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	589b      	ldr	r3, [r3, r2]
 80009ba:	1dfa      	adds	r2, r7, #7
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	0011      	movs	r1, r2
 80009c0:	2203      	movs	r2, #3
 80009c2:	400a      	ands	r2, r1
 80009c4:	00d2      	lsls	r2, r2, #3
 80009c6:	21ff      	movs	r1, #255	@ 0xff
 80009c8:	4091      	lsls	r1, r2
 80009ca:	000a      	movs	r2, r1
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	22ff      	movs	r2, #255	@ 0xff
 80009d8:	401a      	ands	r2, r3
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0018      	movs	r0, r3
 80009e0:	2303      	movs	r3, #3
 80009e2:	4003      	ands	r3, r0
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e8:	481f      	ldr	r0, [pc, #124]	@ (8000a68 <__NVIC_SetPriority+0xd4>)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	430a      	orrs	r2, r1
 80009f4:	33c0      	adds	r3, #192	@ 0xc0
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009fa:	e031      	b.n	8000a60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <__NVIC_SetPriority+0xd8>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	0019      	movs	r1, r3
 8000a04:	230f      	movs	r3, #15
 8000a06:	400b      	ands	r3, r1
 8000a08:	3b08      	subs	r3, #8
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3306      	adds	r3, #6
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	3304      	adds	r3, #4
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1dfa      	adds	r2, r7, #7
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	400a      	ands	r2, r1
 8000a20:	00d2      	lsls	r2, r2, #3
 8000a22:	21ff      	movs	r1, #255	@ 0xff
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	43d2      	mvns	r2, r2
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	019b      	lsls	r3, r3, #6
 8000a32:	22ff      	movs	r2, #255	@ 0xff
 8000a34:	401a      	ands	r2, r3
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	4003      	ands	r3, r0
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a44:	4809      	ldr	r0, [pc, #36]	@ (8000a6c <__NVIC_SetPriority+0xd8>)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	001c      	movs	r4, r3
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	4023      	ands	r3, r4
 8000a50:	3b08      	subs	r3, #8
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	430a      	orrs	r2, r1
 8000a56:	3306      	adds	r3, #6
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	18c3      	adds	r3, r0, r3
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b003      	add	sp, #12
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	045b      	lsls	r3, r3, #17
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d301      	bcc.n	8000a88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a84:	2301      	movs	r3, #1
 8000a86:	e010      	b.n	8000aaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <SysTick_Config+0x44>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	3a01      	subs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a90:	2301      	movs	r3, #1
 8000a92:	425b      	negs	r3, r3
 8000a94:	2103      	movs	r1, #3
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff ff7c 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <SysTick_Config+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <SysTick_Config+0x44>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	1c02      	adds	r2, r0, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ff5d 	bl	8000994 <__NVIC_SetPriority>
}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	0002      	movs	r2, r0
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff ff33 	bl	8000960 <__NVIC_EnableIRQ>
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff ffaf 	bl	8000a70 <SysTick_Config>
 8000b12:	0003      	movs	r3, r0
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	b08b      	sub	sp, #44	@ 0x2c
 8000b20:	af06      	add	r7, sp, #24
 8000b22:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e0f0      	b.n	8000d10 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a79      	ldr	r2, [pc, #484]	@ (8000d18 <HAL_PCD_Init+0x1fc>)
 8000b32:	5c9b      	ldrb	r3, [r3, r2]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d108      	bne.n	8000b4c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	23aa      	movs	r3, #170	@ 0xaa
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	2100      	movs	r1, #0
 8000b42:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f006 fd6c 	bl	8007624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a72      	ldr	r2, [pc, #456]	@ (8000d18 <HAL_PCD_Init+0x1fc>)
 8000b50:	2103      	movs	r1, #3
 8000b52:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f002 fd87 	bl	800366c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b5e:	230f      	movs	r3, #15
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e049      	b.n	8000bfc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b68:	200f      	movs	r0, #15
 8000b6a:	183b      	adds	r3, r7, r0
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	0013      	movs	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	189b      	adds	r3, r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	18cb      	adds	r3, r1, r3
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b82:	183b      	adds	r3, r7, r0
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	0013      	movs	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	189b      	adds	r3, r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	183a      	adds	r2, r7, r0
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b98:	183b      	adds	r3, r7, r0
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	189b      	adds	r3, r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	18cb      	adds	r3, r1, r3
 8000baa:	3303      	adds	r3, #3
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bb0:	183b      	adds	r3, r7, r0
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	189b      	adds	r3, r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	18cb      	adds	r3, r1, r3
 8000bc0:	3338      	adds	r3, #56	@ 0x38
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bc6:	183b      	adds	r3, r7, r0
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	0013      	movs	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	189b      	adds	r3, r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	18cb      	adds	r3, r1, r3
 8000bd6:	333c      	adds	r3, #60	@ 0x3c
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bdc:	183b      	adds	r3, r7, r0
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	0013      	movs	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	189b      	adds	r3, r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	18cb      	adds	r3, r1, r3
 8000bec:	3340      	adds	r3, #64	@ 0x40
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	183b      	adds	r3, r7, r0
 8000bf8:	3201      	adds	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3ae      	bcc.n	8000b68 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e056      	b.n	8000cc0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c12:	240f      	movs	r4, #15
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	236a      	movs	r3, #106	@ 0x6a
 8000c1c:	33ff      	adds	r3, #255	@ 0xff
 8000c1e:	0019      	movs	r1, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	189b      	adds	r3, r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	18c3      	adds	r3, r0, r3
 8000c2a:	185b      	adds	r3, r3, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	23b4      	movs	r3, #180	@ 0xb4
 8000c38:	0059      	lsls	r1, r3, #1
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	189b      	adds	r3, r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	18c3      	adds	r3, r0, r3
 8000c44:	185b      	adds	r3, r3, r1
 8000c46:	193a      	adds	r2, r7, r4
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	236c      	movs	r3, #108	@ 0x6c
 8000c54:	33ff      	adds	r3, #255	@ 0xff
 8000c56:	0019      	movs	r1, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	189b      	adds	r3, r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	18c3      	adds	r3, r0, r3
 8000c62:	185b      	adds	r3, r3, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	23bc      	movs	r3, #188	@ 0xbc
 8000c70:	0059      	lsls	r1, r3, #1
 8000c72:	0013      	movs	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	189b      	adds	r3, r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	18c3      	adds	r3, r0, r3
 8000c7c:	185b      	adds	r3, r3, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	23be      	movs	r3, #190	@ 0xbe
 8000c8a:	0059      	lsls	r1, r3, #1
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	189b      	adds	r3, r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	18c3      	adds	r3, r0, r3
 8000c96:	185b      	adds	r3, r3, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	23c0      	movs	r3, #192	@ 0xc0
 8000ca4:	0059      	lsls	r1, r3, #1
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	18c3      	adds	r3, r0, r3
 8000cb0:	185b      	adds	r3, r3, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	3201      	adds	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3a1      	bcc.n	8000c12 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	466a      	mov	r2, sp
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	001a      	movs	r2, r3
 8000cda:	3210      	adds	r2, #16
 8000cdc:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000cde:	c170      	stmia	r1!, {r4, r5, r6}
 8000ce0:	ca30      	ldmia	r2!, {r4, r5}
 8000ce2:	c130      	stmia	r1!, {r4, r5}
 8000ce4:	6859      	ldr	r1, [r3, #4]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	f002 fcd9 	bl	80036a0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2224      	movs	r2, #36	@ 0x24
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <HAL_PCD_Init+0x1fc>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d103      	bne.n	8000d0e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f001 fd23 	bl	8002754 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b005      	add	sp, #20
 8000d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d18:	000002a9 	.word	0x000002a9

08000d1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	23aa      	movs	r3, #170	@ 0xaa
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	5cd3      	ldrb	r3, [r2, r3]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_PCD_Start+0x18>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e014      	b.n	8000d5e <HAL_PCD_Start+0x42>
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	23aa      	movs	r3, #170	@ 0xaa
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 fc7c 	bl	8003640 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f004 fc7f 	bl	8005650 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	23aa      	movs	r3, #170	@ 0xaa
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	2100      	movs	r1, #0
 8000d5a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	0018      	movs	r0, r3
 8000d76:	f004 fc81 	bl	800567c <USB_ReadInterrupts>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	4013      	ands	r3, r2
 8000d86:	d004      	beq.n	8000d92 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fb62 	bl	8001454 <PCD_EP_ISR_Handler>

    return;
 8000d90:	e11d      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d015      	beq.n	8000dc8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2244      	movs	r2, #68	@ 0x44
 8000da2:	5a9b      	ldrh	r3, [r3, r2]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	498a      	ldr	r1, [pc, #552]	@ (8000fd4 <HAL_PCD_IRQHandler+0x26c>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	b291      	uxth	r1, r2
 8000db0:	2244      	movs	r2, #68	@ 0x44
 8000db2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	0018      	movs	r0, r3
 8000db8:	f006 fcb7 	bl	800772a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 f915 	bl	8000ff0 <HAL_PCD_SetAddress>

    return;
 8000dc6:	e102      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	2380      	movs	r3, #128	@ 0x80
 8000dcc:	01db      	lsls	r3, r3, #7
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d00c      	beq.n	8000dec <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2244      	movs	r2, #68	@ 0x44
 8000dd8:	5a9b      	ldrh	r3, [r3, r2]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	497d      	ldr	r1, [pc, #500]	@ (8000fd8 <HAL_PCD_IRQHandler+0x270>)
 8000de2:	400a      	ands	r2, r1
 8000de4:	b291      	uxth	r1, r2
 8000de6:	2244      	movs	r2, #68	@ 0x44
 8000de8:	5299      	strh	r1, [r3, r2]

    return;
 8000dea:	e0f0      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	4013      	ands	r3, r2
 8000df4:	d00c      	beq.n	8000e10 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2244      	movs	r2, #68	@ 0x44
 8000dfc:	5a9b      	ldrh	r3, [r3, r2]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4975      	ldr	r1, [pc, #468]	@ (8000fdc <HAL_PCD_IRQHandler+0x274>)
 8000e06:	400a      	ands	r2, r1
 8000e08:	b291      	uxth	r1, r2
 8000e0a:	2244      	movs	r2, #68	@ 0x44
 8000e0c:	5299      	strh	r1, [r3, r2]

    return;
 8000e0e:	e0de      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	2380      	movs	r3, #128	@ 0x80
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	4013      	ands	r3, r2
 8000e18:	d038      	beq.n	8000e8c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2240      	movs	r2, #64	@ 0x40
 8000e20:	5a9b      	ldrh	r3, [r3, r2]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2104      	movs	r1, #4
 8000e2a:	438a      	bics	r2, r1
 8000e2c:	b291      	uxth	r1, r2
 8000e2e:	2240      	movs	r2, #64	@ 0x40
 8000e30:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2240      	movs	r2, #64	@ 0x40
 8000e38:	5a9b      	ldrh	r3, [r3, r2]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2108      	movs	r1, #8
 8000e42:	438a      	bics	r2, r1
 8000e44:	b291      	uxth	r1, r2
 8000e46:	2240      	movs	r2, #64	@ 0x40
 8000e48:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	23b8      	movs	r3, #184	@ 0xb8
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	5cd3      	ldrb	r3, [r2, r3]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d109      	bne.n	8000e6a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	23b8      	movs	r3, #184	@ 0xb8
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2100      	movs	r1, #0
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 fc9f 	bl	80027a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f006 fc9d 	bl	80077ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2244      	movs	r2, #68	@ 0x44
 8000e78:	5a9b      	ldrh	r3, [r3, r2]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4957      	ldr	r1, [pc, #348]	@ (8000fe0 <HAL_PCD_IRQHandler+0x278>)
 8000e82:	400a      	ands	r2, r1
 8000e84:	b291      	uxth	r1, r2
 8000e86:	2244      	movs	r2, #68	@ 0x44
 8000e88:	5299      	strh	r1, [r3, r2]

    return;
 8000e8a:	e0a0      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	2380      	movs	r3, #128	@ 0x80
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4013      	ands	r3, r2
 8000e94:	d028      	beq.n	8000ee8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2240      	movs	r2, #64	@ 0x40
 8000e9c:	5a9b      	ldrh	r3, [r3, r2]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	b291      	uxth	r1, r2
 8000eaa:	2240      	movs	r2, #64	@ 0x40
 8000eac:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2244      	movs	r2, #68	@ 0x44
 8000eb4:	5a9b      	ldrh	r3, [r3, r2]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4949      	ldr	r1, [pc, #292]	@ (8000fe4 <HAL_PCD_IRQHandler+0x27c>)
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	b291      	uxth	r1, r2
 8000ec2:	2244      	movs	r2, #68	@ 0x44
 8000ec4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2240      	movs	r2, #64	@ 0x40
 8000ecc:	5a9b      	ldrh	r3, [r3, r2]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	b291      	uxth	r1, r2
 8000eda:	2240      	movs	r2, #64	@ 0x40
 8000edc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f006 fc47 	bl	8007774 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ee6:	e072      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2280      	movs	r2, #128	@ 0x80
 8000eec:	4013      	ands	r3, r2
 8000eee:	d046      	beq.n	8000f7e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2244      	movs	r2, #68	@ 0x44
 8000ef6:	5a9b      	ldrh	r3, [r3, r2]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	438a      	bics	r2, r1
 8000f02:	b291      	uxth	r1, r2
 8000f04:	2244      	movs	r2, #68	@ 0x44
 8000f06:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	23b8      	movs	r3, #184	@ 0xb8
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d12f      	bne.n	8000f74 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2240      	movs	r2, #64	@ 0x40
 8000f1a:	5a9b      	ldrh	r3, [r3, r2]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2104      	movs	r1, #4
 8000f24:	430a      	orrs	r2, r1
 8000f26:	b291      	uxth	r1, r2
 8000f28:	2240      	movs	r2, #64	@ 0x40
 8000f2a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2240      	movs	r2, #64	@ 0x40
 8000f32:	5a9b      	ldrh	r3, [r3, r2]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	b291      	uxth	r1, r2
 8000f40:	2240      	movs	r2, #64	@ 0x40
 8000f42:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	23b8      	movs	r3, #184	@ 0xb8
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2254      	movs	r2, #84	@ 0x54
 8000f54:	5a9b      	ldrh	r3, [r3, r2]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	223c      	movs	r2, #60	@ 0x3c
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	0019      	movs	r1, r3
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	23b9      	movs	r3, #185	@ 0xb9
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 fc1b 	bl	80027a8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000f72:	e02c      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f006 fbfc 	bl	8007774 <HAL_PCD_SuspendCallback>
    return;
 8000f7c:	e027      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4013      	ands	r3, r2
 8000f86:	d010      	beq.n	8000faa <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2244      	movs	r2, #68	@ 0x44
 8000f8e:	5a9b      	ldrh	r3, [r3, r2]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4914      	ldr	r1, [pc, #80]	@ (8000fe8 <HAL_PCD_IRQHandler+0x280>)
 8000f98:	400a      	ands	r2, r1
 8000f9a:	b291      	uxth	r1, r2
 8000f9c:	2244      	movs	r2, #68	@ 0x44
 8000f9e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f006 fbb2 	bl	800770c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000fa8:	e011      	b.n	8000fce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d00c      	beq.n	8000fce <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2244      	movs	r2, #68	@ 0x44
 8000fba:	5a9b      	ldrh	r3, [r3, r2]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	490a      	ldr	r1, [pc, #40]	@ (8000fec <HAL_PCD_IRQHandler+0x284>)
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	b291      	uxth	r1, r2
 8000fc8:	2244      	movs	r2, #68	@ 0x44
 8000fca:	5299      	strh	r1, [r3, r2]

    return;
 8000fcc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	fffffbff 	.word	0xfffffbff
 8000fd8:	ffffbfff 	.word	0xffffbfff
 8000fdc:	ffffdfff 	.word	0xffffdfff
 8000fe0:	ffffefff 	.word	0xffffefff
 8000fe4:	fffff7ff 	.word	0xfffff7ff
 8000fe8:	fffffdff 	.word	0xfffffdff
 8000fec:	fffffeff 	.word	0xfffffeff

08000ff0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	1cfb      	adds	r3, r7, #3
 8000ffc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	23aa      	movs	r3, #170	@ 0xaa
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	5cd3      	ldrb	r3, [r2, r3]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <HAL_PCD_SetAddress+0x1e>
 800100a:	2302      	movs	r3, #2
 800100c:	e017      	b.n	800103e <HAL_PCD_SetAddress+0x4e>
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	23aa      	movs	r3, #170	@ 0xaa
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	2101      	movs	r1, #1
 8001016:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	1cfa      	adds	r2, r7, #3
 800101c:	2124      	movs	r1, #36	@ 0x24
 800101e:	7812      	ldrb	r2, [r2, #0]
 8001020:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	1cfb      	adds	r3, r7, #3
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	0019      	movs	r1, r3
 800102c:	0010      	movs	r0, r2
 800102e:	f004 fafb 	bl	8005628 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	23aa      	movs	r3, #170	@ 0xaa
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	2100      	movs	r1, #0
 800103a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001046:	b590      	push	{r4, r7, lr}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	000c      	movs	r4, r1
 8001050:	0010      	movs	r0, r2
 8001052:	0019      	movs	r1, r3
 8001054:	1cfb      	adds	r3, r7, #3
 8001056:	1c22      	adds	r2, r4, #0
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	003b      	movs	r3, r7
 800105c:	1c02      	adds	r2, r0, #0
 800105e:	801a      	strh	r2, [r3, #0]
 8001060:	1cbb      	adds	r3, r7, #2
 8001062:	1c0a      	adds	r2, r1, #0
 8001064:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001066:	230b      	movs	r3, #11
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800106e:	1cfb      	adds	r3, r7, #3
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	da0f      	bge.n	8001098 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001078:	1cfb      	adds	r3, r7, #3
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2207      	movs	r2, #7
 800107e:	4013      	ands	r3, r2
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	0013      	movs	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	189b      	adds	r3, r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2201      	movs	r2, #1
 8001094:	705a      	strb	r2, [r3, #1]
 8001096:	e00f      	b.n	80010b8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001098:	1cfb      	adds	r3, r7, #3
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2207      	movs	r2, #7
 800109e:	401a      	ands	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	189b      	adds	r3, r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	3369      	adds	r3, #105	@ 0x69
 80010aa:	33ff      	adds	r3, #255	@ 0xff
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	18d3      	adds	r3, r2, r3
 80010b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010b8:	1cfb      	adds	r3, r7, #3
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2207      	movs	r2, #7
 80010be:	4013      	ands	r3, r2
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010c6:	003b      	movs	r3, r7
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1cba      	adds	r2, r7, #2
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010d6:	1cbb      	adds	r3, r7, #2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d102      	bne.n	80010e4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	23aa      	movs	r3, #170	@ 0xaa
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_PCD_EP_Open+0xae>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e013      	b.n	800111c <HAL_PCD_EP_Open+0xd6>
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	23aa      	movs	r3, #170	@ 0xaa
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	2101      	movs	r1, #1
 80010fc:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f002 faf2 	bl	80036f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	23aa      	movs	r3, #170	@ 0xaa
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	2100      	movs	r1, #0
 8001114:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001116:	230b      	movs	r3, #11
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b005      	add	sp, #20
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	000a      	movs	r2, r1
 800112e:	1cfb      	adds	r3, r7, #3
 8001130:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001132:	1cfb      	adds	r3, r7, #3
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b25b      	sxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	da0f      	bge.n	800115c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800113c:	1cfb      	adds	r3, r7, #3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2207      	movs	r2, #7
 8001142:	4013      	ands	r3, r2
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	0013      	movs	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	189b      	adds	r3, r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2201      	movs	r2, #1
 8001158:	705a      	strb	r2, [r3, #1]
 800115a:	e00f      	b.n	800117c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800115c:	1cfb      	adds	r3, r7, #3
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2207      	movs	r2, #7
 8001162:	401a      	ands	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	189b      	adds	r3, r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	3369      	adds	r3, #105	@ 0x69
 800116e:	33ff      	adds	r3, #255	@ 0xff
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	18d3      	adds	r3, r2, r3
 8001174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800117c:	1cfb      	adds	r3, r7, #3
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2207      	movs	r2, #7
 8001182:	4013      	ands	r3, r2
 8001184:	b2da      	uxtb	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	23aa      	movs	r3, #170	@ 0xaa
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	5cd3      	ldrb	r3, [r2, r3]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_PCD_EP_Close+0x76>
 8001196:	2302      	movs	r3, #2
 8001198:	e011      	b.n	80011be <HAL_PCD_EP_Close+0x9a>
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	23aa      	movs	r3, #170	@ 0xaa
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	2101      	movs	r1, #1
 80011a2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	0011      	movs	r1, r2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f002 fe41 	bl	8003e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	23aa      	movs	r3, #170	@ 0xaa
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	2100      	movs	r1, #0
 80011ba:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	200b      	movs	r0, #11
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	1c0a      	adds	r2, r1, #0
 80011d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011da:	0001      	movs	r1, r0
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2207      	movs	r2, #7
 80011e2:	401a      	ands	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	189b      	adds	r3, r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	3369      	adds	r3, #105	@ 0x69
 80011ee:	33ff      	adds	r3, #255	@ 0xff
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2200      	movs	r2, #0
 800120c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2207      	movs	r2, #7
 8001214:	4013      	ands	r3, r2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f002 ffc5 	bl	80041b4 <USB_EPStartXfer>

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b006      	add	sp, #24
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	000a      	movs	r2, r1
 800123e:	1cfb      	adds	r3, r7, #3
 8001240:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001242:	1cfb      	adds	r3, r7, #3
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2207      	movs	r2, #7
 8001248:	401a      	ands	r2, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	23c2      	movs	r3, #194	@ 0xc2
 800124e:	0059      	lsls	r1, r3, #1
 8001250:	0013      	movs	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	189b      	adds	r3, r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	18c3      	adds	r3, r0, r3
 800125a:	185b      	adds	r3, r3, r1
 800125c:	681b      	ldr	r3, [r3, #0]
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	200b      	movs	r0, #11
 8001274:	183b      	adds	r3, r7, r0
 8001276:	1c0a      	adds	r2, r1, #0
 8001278:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800127a:	183b      	adds	r3, r7, r0
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2207      	movs	r2, #7
 8001280:	4013      	ands	r3, r2
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	0013      	movs	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	189b      	adds	r3, r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	18d3      	adds	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2224      	movs	r2, #36	@ 0x24
 80012a2:	2101      	movs	r1, #1
 80012a4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	2201      	movs	r2, #1
 80012b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012b8:	183b      	adds	r3, r7, r0
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2207      	movs	r2, #7
 80012be:	4013      	ands	r3, r2
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	0011      	movs	r1, r2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f002 ff70 	bl	80041b4 <USB_EPStartXfer>

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b006      	add	sp, #24
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	000a      	movs	r2, r1
 80012e8:	1cfb      	adds	r3, r7, #3
 80012ea:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012ec:	1cfb      	adds	r3, r7, #3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2207      	movs	r2, #7
 80012f2:	401a      	ands	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d901      	bls.n	8001300 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e046      	b.n	800138e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001300:	1cfb      	adds	r3, r7, #3
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b25b      	sxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	da0f      	bge.n	800132a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800130a:	1cfb      	adds	r3, r7, #3
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2207      	movs	r2, #7
 8001310:	4013      	ands	r3, r2
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	0013      	movs	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	189b      	adds	r3, r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	18d3      	adds	r3, r2, r3
 8001320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2201      	movs	r2, #1
 8001326:	705a      	strb	r2, [r3, #1]
 8001328:	e00d      	b.n	8001346 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800132a:	1cfb      	adds	r3, r7, #3
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	0013      	movs	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	189b      	adds	r3, r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	3369      	adds	r3, #105	@ 0x69
 8001338:	33ff      	adds	r3, #255	@ 0xff
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2201      	movs	r2, #1
 800134a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800134c:	1cfb      	adds	r3, r7, #3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2207      	movs	r2, #7
 8001352:	4013      	ands	r3, r2
 8001354:	b2da      	uxtb	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	23aa      	movs	r3, #170	@ 0xaa
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_PCD_EP_SetStall+0x8c>
 8001366:	2302      	movs	r3, #2
 8001368:	e011      	b.n	800138e <HAL_PCD_EP_SetStall+0xb0>
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	23aa      	movs	r3, #170	@ 0xaa
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	2101      	movs	r1, #1
 8001372:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f004 f851 	bl	8005424 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	23aa      	movs	r3, #170	@ 0xaa
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	2100      	movs	r1, #0
 800138a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	000a      	movs	r2, r1
 80013a0:	1cfb      	adds	r3, r7, #3
 80013a2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013a4:	1cfb      	adds	r3, r7, #3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	220f      	movs	r2, #15
 80013aa:	401a      	ands	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d901      	bls.n	80013b8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e048      	b.n	800144a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013b8:	1cfb      	adds	r3, r7, #3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da0f      	bge.n	80013e2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2207      	movs	r2, #7
 80013c8:	4013      	ands	r3, r2
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	0013      	movs	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2201      	movs	r2, #1
 80013de:	705a      	strb	r2, [r3, #1]
 80013e0:	e00f      	b.n	8001402 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013e2:	1cfb      	adds	r3, r7, #3
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2207      	movs	r2, #7
 80013e8:	401a      	ands	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	189b      	adds	r3, r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	3369      	adds	r3, #105	@ 0x69
 80013f4:	33ff      	adds	r3, #255	@ 0xff
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	18d3      	adds	r3, r2, r3
 80013fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001408:	1cfb      	adds	r3, r7, #3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2207      	movs	r2, #7
 800140e:	4013      	ands	r3, r2
 8001410:	b2da      	uxtb	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	23aa      	movs	r3, #170	@ 0xaa
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_PCD_EP_ClrStall+0x90>
 8001422:	2302      	movs	r3, #2
 8001424:	e011      	b.n	800144a <HAL_PCD_EP_ClrStall+0xb4>
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	23aa      	movs	r3, #170	@ 0xaa
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	2101      	movs	r1, #1
 800142e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f004 f843 	bl	80054c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	23aa      	movs	r3, #170	@ 0xaa
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	2100      	movs	r1, #0
 8001446:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b004      	add	sp, #16
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b096      	sub	sp, #88	@ 0x58
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800145c:	f000 fbec 	bl	8001c38 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	204e      	movs	r0, #78	@ 0x4e
 8001466:	183b      	adds	r3, r7, r0
 8001468:	2144      	movs	r1, #68	@ 0x44
 800146a:	5a52      	ldrh	r2, [r2, r1]
 800146c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800146e:	183b      	adds	r3, r7, r0
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	244d      	movs	r4, #77	@ 0x4d
 8001476:	193b      	adds	r3, r7, r4
 8001478:	210f      	movs	r1, #15
 800147a:	400a      	ands	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800147e:	193b      	adds	r3, r7, r4
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d000      	beq.n	8001488 <PCD_EP_ISR_Handler+0x34>
 8001486:	e18f      	b.n	80017a8 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001488:	183b      	adds	r3, r7, r0
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	2210      	movs	r2, #16
 800148e:	4013      	ands	r3, r2
 8001490:	d155      	bne.n	800153e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	200e      	movs	r0, #14
 800149c:	183b      	adds	r3, r7, r0
 800149e:	49bb      	ldr	r1, [pc, #748]	@ (800178c <PCD_EP_ISR_Handler+0x338>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	183a      	adds	r2, r7, r0
 80014aa:	8812      	ldrh	r2, [r2, #0]
 80014ac:	49b8      	ldr	r1, [pc, #736]	@ (8001790 <PCD_EP_ISR_Handler+0x33c>)
 80014ae:	430a      	orrs	r2, r1
 80014b0:	b292      	uxth	r2, r2
 80014b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3328      	adds	r3, #40	@ 0x28
 80014b8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2250      	movs	r2, #80	@ 0x50
 80014c0:	5a9b      	ldrh	r3, [r3, r2]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	001a      	movs	r2, r3
 80014c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	18d2      	adds	r2, r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	18d3      	adds	r3, r2, r3
 80014d4:	4aaf      	ldr	r2, [pc, #700]	@ (8001794 <PCD_EP_ISR_Handler+0x340>)
 80014d6:	4694      	mov	ip, r2
 80014d8:	4463      	add	r3, ip
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	059b      	lsls	r3, r3, #22
 80014de:	0d9a      	lsrs	r2, r3, #22
 80014e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	18d2      	adds	r2, r2, r3
 80014ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2100      	movs	r1, #0
 80014f6:	0018      	movs	r0, r3
 80014f8:	f006 f8ea 	bl	80076d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2224      	movs	r2, #36	@ 0x24
 8001500:	5c9b      	ldrb	r3, [r3, r2]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <PCD_EP_ISR_Handler+0xb8>
 8001508:	f000 fb96 	bl	8001c38 <PCD_EP_ISR_Handler+0x7e4>
 800150c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <PCD_EP_ISR_Handler+0xc4>
 8001514:	f000 fb90 	bl	8001c38 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2224      	movs	r2, #36	@ 0x24
 800151c:	5c9b      	ldrb	r3, [r3, r2]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	4252      	negs	r2, r2
 8001524:	4313      	orrs	r3, r2
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0011      	movs	r1, r2
 800152e:	224c      	movs	r2, #76	@ 0x4c
 8001530:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2224      	movs	r2, #36	@ 0x24
 8001536:	2100      	movs	r1, #0
 8001538:	5499      	strb	r1, [r3, r2]
 800153a:	f000 fb7d 	bl	8001c38 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3369      	adds	r3, #105	@ 0x69
 8001542:	33ff      	adds	r3, #255	@ 0xff
 8001544:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	214a      	movs	r1, #74	@ 0x4a
 800154c:	187b      	adds	r3, r7, r1
 800154e:	8812      	ldrh	r2, [r2, #0]
 8001550:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001552:	187b      	adds	r3, r7, r1
 8001554:	881a      	ldrh	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4013      	ands	r3, r2
 800155c:	d037      	beq.n	80015ce <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2250      	movs	r2, #80	@ 0x50
 8001564:	5a9b      	ldrh	r3, [r3, r2]
 8001566:	b29b      	uxth	r3, r3
 8001568:	001a      	movs	r2, r3
 800156a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	18d2      	adds	r2, r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	18d3      	adds	r3, r2, r3
 8001578:	4a87      	ldr	r2, [pc, #540]	@ (8001798 <PCD_EP_ISR_Handler+0x344>)
 800157a:	4694      	mov	ip, r2
 800157c:	4463      	add	r3, ip
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	059b      	lsls	r3, r3, #22
 8001582:	0d9a      	lsrs	r2, r3, #22
 8001584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001586:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	22ac      	movs	r2, #172	@ 0xac
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	1899      	adds	r1, r3, r2
 8001594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001596:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800159a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800159c:	b29b      	uxth	r3, r3
 800159e:	f004 f8c4 	bl	800572a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	2010      	movs	r0, #16
 80015ac:	183b      	adds	r3, r7, r0
 80015ae:	497b      	ldr	r1, [pc, #492]	@ (800179c <PCD_EP_ISR_Handler+0x348>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	183a      	adds	r2, r7, r0
 80015ba:	8812      	ldrh	r2, [r2, #0]
 80015bc:	2180      	movs	r1, #128	@ 0x80
 80015be:	430a      	orrs	r2, r1
 80015c0:	b292      	uxth	r2, r2
 80015c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f006 f84c 	bl	8007664 <HAL_PCD_SetupStageCallback>
 80015cc:	e334      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015ce:	234a      	movs	r3, #74	@ 0x4a
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	5e9b      	ldrsh	r3, [r3, r2]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db00      	blt.n	80015dc <PCD_EP_ISR_Handler+0x188>
 80015da:	e32d      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	201e      	movs	r0, #30
 80015e6:	183b      	adds	r3, r7, r0
 80015e8:	496c      	ldr	r1, [pc, #432]	@ (800179c <PCD_EP_ISR_Handler+0x348>)
 80015ea:	400a      	ands	r2, r1
 80015ec:	801a      	strh	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	183a      	adds	r2, r7, r0
 80015f4:	8812      	ldrh	r2, [r2, #0]
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	430a      	orrs	r2, r1
 80015fa:	b292      	uxth	r2, r2
 80015fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2250      	movs	r2, #80	@ 0x50
 8001604:	5a9b      	ldrh	r3, [r3, r2]
 8001606:	b29b      	uxth	r3, r3
 8001608:	001a      	movs	r2, r3
 800160a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	18d2      	adds	r2, r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	18d3      	adds	r3, r2, r3
 8001618:	4a5f      	ldr	r2, [pc, #380]	@ (8001798 <PCD_EP_ISR_Handler+0x344>)
 800161a:	4694      	mov	ip, r2
 800161c:	4463      	add	r3, ip
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	059b      	lsls	r3, r3, #22
 8001622:	0d9a      	lsrs	r2, r3, #22
 8001624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001626:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01a      	beq.n	8001666 <PCD_EP_ISR_Handler+0x212>
 8001630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d016      	beq.n	8001666 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800163e:	6959      	ldr	r1, [r3, #20]
 8001640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001642:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001646:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001648:	b29b      	uxth	r3, r3
 800164a:	f004 f86e 	bl	800572a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800164e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	18d2      	adds	r2, r2, r3
 8001658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800165a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2100      	movs	r1, #0
 8001660:	0018      	movs	r0, r3
 8001662:	f006 f814 	bl	800768e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	214a      	movs	r1, #74	@ 0x4a
 800166c:	187b      	adds	r3, r7, r1
 800166e:	8812      	ldrh	r2, [r2, #0]
 8001670:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001672:	187b      	adds	r3, r7, r1
 8001674:	881a      	ldrh	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	4013      	ands	r3, r2
 800167c:	d000      	beq.n	8001680 <PCD_EP_ISR_Handler+0x22c>
 800167e:	e2db      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
 8001680:	187b      	adds	r3, r7, r1
 8001682:	881a      	ldrh	r2, [r3, #0]
 8001684:	23c0      	movs	r3, #192	@ 0xc0
 8001686:	019b      	lsls	r3, r3, #6
 8001688:	401a      	ands	r2, r3
 800168a:	23c0      	movs	r3, #192	@ 0xc0
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	429a      	cmp	r2, r3
 8001690:	d100      	bne.n	8001694 <PCD_EP_ISR_Handler+0x240>
 8001692:	e2d1      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2250      	movs	r2, #80	@ 0x50
 80016a0:	5a9b      	ldrh	r3, [r3, r2]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	001a      	movs	r2, r3
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	189b      	adds	r3, r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001798 <PCD_EP_ISR_Handler+0x344>)
 80016b0:	4694      	mov	ip, r2
 80016b2:	4463      	add	r3, ip
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	059b      	lsls	r3, r3, #22
 80016be:	0d9b      	lsrs	r3, r3, #22
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	801a      	strh	r2, [r3, #0]
 80016c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80016cc:	d91a      	bls.n	8001704 <PCD_EP_ISR_Handler+0x2b0>
 80016ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80016d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	221f      	movs	r2, #31
 80016dc:	4013      	ands	r3, r2
 80016de:	d102      	bne.n	80016e6 <PCD_EP_ISR_Handler+0x292>
 80016e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016e2:	3b01      	subs	r3, #1
 80016e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4a25      	ldr	r2, [pc, #148]	@ (8001790 <PCD_EP_ISR_Handler+0x33c>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	801a      	strh	r2, [r3, #0]
 8001702:	e023      	b.n	800174c <PCD_EP_ISR_Handler+0x2f8>
 8001704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d108      	bne.n	800171e <PCD_EP_ISR_Handler+0x2ca>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4a1f      	ldr	r2, [pc, #124]	@ (8001790 <PCD_EP_ISR_Handler+0x33c>)
 8001714:	4313      	orrs	r3, r2
 8001716:	b29a      	uxth	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	801a      	strh	r2, [r3, #0]
 800171c:	e016      	b.n	800174c <PCD_EP_ISR_Handler+0x2f8>
 800171e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	647b      	str	r3, [r7, #68]	@ 0x44
 8001726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d002      	beq.n	8001736 <PCD_EP_ISR_Handler+0x2e2>
 8001730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001732:	3301      	adds	r3, #1
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b29a      	uxth	r2, r3
 800173c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800173e:	b29b      	uxth	r3, r3
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	b29b      	uxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b29a      	uxth	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29a      	uxth	r2, r3
 8001754:	2012      	movs	r0, #18
 8001756:	183b      	adds	r3, r7, r0
 8001758:	4911      	ldr	r1, [pc, #68]	@ (80017a0 <PCD_EP_ISR_Handler+0x34c>)
 800175a:	400a      	ands	r2, r1
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	183b      	adds	r3, r7, r0
 8001760:	183a      	adds	r2, r7, r0
 8001762:	8812      	ldrh	r2, [r2, #0]
 8001764:	2180      	movs	r1, #128	@ 0x80
 8001766:	0149      	lsls	r1, r1, #5
 8001768:	404a      	eors	r2, r1
 800176a:	801a      	strh	r2, [r3, #0]
 800176c:	183b      	adds	r3, r7, r0
 800176e:	183a      	adds	r2, r7, r0
 8001770:	8812      	ldrh	r2, [r2, #0]
 8001772:	2180      	movs	r1, #128	@ 0x80
 8001774:	0189      	lsls	r1, r1, #6
 8001776:	404a      	eors	r2, r1
 8001778:	801a      	strh	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	183a      	adds	r2, r7, r0
 8001780:	8812      	ldrh	r2, [r2, #0]
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <PCD_EP_ISR_Handler+0x350>)
 8001784:	430a      	orrs	r2, r1
 8001786:	b292      	uxth	r2, r2
 8001788:	801a      	strh	r2, [r3, #0]
 800178a:	e255      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
 800178c:	ffff8f0f 	.word	0xffff8f0f
 8001790:	ffff8000 	.word	0xffff8000
 8001794:	00000402 	.word	0x00000402
 8001798:	00000406 	.word	0x00000406
 800179c:	00000f8f 	.word	0x00000f8f
 80017a0:	ffffbf8f 	.word	0xffffbf8f
 80017a4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	001a      	movs	r2, r3
 80017ae:	204d      	movs	r0, #77	@ 0x4d
 80017b0:	183b      	adds	r3, r7, r0
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	18d2      	adds	r2, r2, r3
 80017b8:	214a      	movs	r1, #74	@ 0x4a
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2200      	movs	r2, #0
 80017c4:	5e9b      	ldrsh	r3, [r3, r2]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db00      	blt.n	80017cc <PCD_EP_ISR_Handler+0x378>
 80017ca:	e0fa      	b.n	80019c2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	001a      	movs	r2, r3
 80017d2:	183b      	adds	r3, r7, r0
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	2448      	movs	r4, #72	@ 0x48
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	49d1      	ldr	r1, [pc, #836]	@ (8001b28 <PCD_EP_ISR_Handler+0x6d4>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	801a      	strh	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	001a      	movs	r2, r3
 80017ee:	183b      	adds	r3, r7, r0
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	18d3      	adds	r3, r2, r3
 80017f6:	193a      	adds	r2, r7, r4
 80017f8:	8812      	ldrh	r2, [r2, #0]
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	430a      	orrs	r2, r1
 80017fe:	b292      	uxth	r2, r2
 8001800:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001802:	183b      	adds	r3, r7, r0
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	0013      	movs	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	189b      	adds	r3, r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	3369      	adds	r3, #105	@ 0x69
 8001810:	33ff      	adds	r3, #255	@ 0xff
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	18d3      	adds	r3, r2, r3
 8001816:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800181a:	7b1b      	ldrb	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d125      	bne.n	800186c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2250      	movs	r2, #80	@ 0x50
 8001826:	5a9b      	ldrh	r3, [r3, r2]
 8001828:	b29b      	uxth	r3, r3
 800182a:	001a      	movs	r2, r3
 800182c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	18d2      	adds	r2, r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	18d3      	adds	r3, r2, r3
 800183a:	4abc      	ldr	r2, [pc, #752]	@ (8001b2c <PCD_EP_ISR_Handler+0x6d8>)
 800183c:	4694      	mov	ip, r2
 800183e:	4463      	add	r3, ip
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	2450      	movs	r4, #80	@ 0x50
 8001844:	193b      	adds	r3, r7, r4
 8001846:	0592      	lsls	r2, r2, #22
 8001848:	0d92      	lsrs	r2, r2, #22
 800184a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800184c:	193b      	adds	r3, r7, r4
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d100      	bne.n	8001856 <PCD_EP_ISR_Handler+0x402>
 8001854:	e08d      	b.n	8001972 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185c:	6959      	ldr	r1, [r3, #20]
 800185e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001860:	88da      	ldrh	r2, [r3, #6]
 8001862:	193b      	adds	r3, r7, r4
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	f003 ff60 	bl	800572a <USB_ReadPMA>
 800186a:	e082      	b.n	8001972 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800186c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186e:	78db      	ldrb	r3, [r3, #3]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d10c      	bne.n	800188e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001874:	2350      	movs	r3, #80	@ 0x50
 8001876:	18fc      	adds	r4, r7, r3
 8001878:	234a      	movs	r3, #74	@ 0x4a
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	881a      	ldrh	r2, [r3, #0]
 800187e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	0018      	movs	r0, r3
 8001884:	f000 f9ec 	bl	8001c60 <HAL_PCD_EP_DB_Receive>
 8001888:	0003      	movs	r3, r0
 800188a:	8023      	strh	r3, [r4, #0]
 800188c:	e071      	b.n	8001972 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	001a      	movs	r2, r3
 8001894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	18d3      	adds	r3, r2, r3
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	2052      	movs	r0, #82	@ 0x52
 80018a2:	183b      	adds	r3, r7, r0
 80018a4:	49a2      	ldr	r1, [pc, #648]	@ (8001b30 <PCD_EP_ISR_Handler+0x6dc>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	801a      	strh	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	001a      	movs	r2, r3
 80018b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	18d3      	adds	r3, r2, r3
 80018b8:	183a      	adds	r2, r7, r0
 80018ba:	8812      	ldrh	r2, [r2, #0]
 80018bc:	499d      	ldr	r1, [pc, #628]	@ (8001b34 <PCD_EP_ISR_Handler+0x6e0>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	b292      	uxth	r2, r2
 80018c2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	001a      	movs	r2, r3
 80018ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	001a      	movs	r2, r3
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	01db      	lsls	r3, r3, #7
 80018dc:	4013      	ands	r3, r2
 80018de:	d024      	beq.n	800192a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2250      	movs	r2, #80	@ 0x50
 80018e6:	5a9b      	ldrh	r3, [r3, r2]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	001a      	movs	r2, r3
 80018ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	18d2      	adds	r2, r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	18d3      	adds	r3, r2, r3
 80018fa:	4a8f      	ldr	r2, [pc, #572]	@ (8001b38 <PCD_EP_ISR_Handler+0x6e4>)
 80018fc:	4694      	mov	ip, r2
 80018fe:	4463      	add	r3, ip
 8001900:	881a      	ldrh	r2, [r3, #0]
 8001902:	2450      	movs	r4, #80	@ 0x50
 8001904:	193b      	adds	r3, r7, r4
 8001906:	0592      	lsls	r2, r2, #22
 8001908:	0d92      	lsrs	r2, r2, #22
 800190a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800190c:	193b      	adds	r3, r7, r4
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d02e      	beq.n	8001972 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800191a:	6959      	ldr	r1, [r3, #20]
 800191c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800191e:	891a      	ldrh	r2, [r3, #8]
 8001920:	193b      	adds	r3, r7, r4
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f003 ff01 	bl	800572a <USB_ReadPMA>
 8001928:	e023      	b.n	8001972 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2250      	movs	r2, #80	@ 0x50
 8001930:	5a9b      	ldrh	r3, [r3, r2]
 8001932:	b29b      	uxth	r3, r3
 8001934:	001a      	movs	r2, r3
 8001936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	18d2      	adds	r2, r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	4a79      	ldr	r2, [pc, #484]	@ (8001b2c <PCD_EP_ISR_Handler+0x6d8>)
 8001946:	4694      	mov	ip, r2
 8001948:	4463      	add	r3, ip
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	2450      	movs	r4, #80	@ 0x50
 800194e:	193b      	adds	r3, r7, r4
 8001950:	0592      	lsls	r2, r2, #22
 8001952:	0d92      	lsrs	r2, r2, #22
 8001954:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001956:	193b      	adds	r3, r7, r4
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001964:	6959      	ldr	r1, [r3, #20]
 8001966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001968:	895a      	ldrh	r2, [r3, #10]
 800196a:	193b      	adds	r3, r7, r4
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	f003 fedc 	bl	800572a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	2150      	movs	r1, #80	@ 0x50
 8001978:	187b      	adds	r3, r7, r1
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	18d2      	adds	r2, r2, r3
 800197e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001980:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	187b      	adds	r3, r7, r1
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	18d2      	adds	r2, r2, r3
 800198c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <PCD_EP_ISR_Handler+0x550>
 8001998:	187b      	adds	r3, r7, r1
 800199a:	881a      	ldrh	r2, [r3, #0]
 800199c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	0011      	movs	r1, r2
 80019ac:	0018      	movs	r0, r3
 80019ae:	f005 fe6e 	bl	800768e <HAL_PCD_DataOutStageCallback>
 80019b2:	e006      	b.n	80019c2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f002 fbf9 	bl	80041b4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019c2:	244a      	movs	r4, #74	@ 0x4a
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	4013      	ands	r3, r2
 80019cc:	d100      	bne.n	80019d0 <PCD_EP_ISR_Handler+0x57c>
 80019ce:	e133      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80019d0:	204d      	movs	r0, #77	@ 0x4d
 80019d2:	183b      	adds	r3, r7, r0
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	0013      	movs	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	189b      	adds	r3, r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	18d3      	adds	r3, r2, r3
 80019e4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	001a      	movs	r2, r3
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	2542      	movs	r5, #66	@ 0x42
 80019fa:	197b      	adds	r3, r7, r5
 80019fc:	494f      	ldr	r1, [pc, #316]	@ (8001b3c <PCD_EP_ISR_Handler+0x6e8>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	001a      	movs	r2, r3
 8001a08:	183b      	adds	r3, r7, r0
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	18d3      	adds	r3, r2, r3
 8001a10:	197a      	adds	r2, r7, r5
 8001a12:	8812      	ldrh	r2, [r2, #0]
 8001a14:	494a      	ldr	r1, [pc, #296]	@ (8001b40 <PCD_EP_ISR_Handler+0x6ec>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a1e:	78db      	ldrb	r3, [r3, #3]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d000      	beq.n	8001a26 <PCD_EP_ISR_Handler+0x5d2>
 8001a24:	e0af      	b.n	8001b86 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a2e:	7b1b      	ldrb	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d100      	bne.n	8001a36 <PCD_EP_ISR_Handler+0x5e2>
 8001a34:	e09f      	b.n	8001b76 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2240      	movs	r2, #64	@ 0x40
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d046      	beq.n	8001ace <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d125      	bne.n	8001a94 <PCD_EP_ISR_Handler+0x640>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2250      	movs	r2, #80	@ 0x50
 8001a54:	5a9b      	ldrh	r3, [r3, r2]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	001a      	movs	r2, r3
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	189b      	adds	r3, r3, r2
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	00da      	lsls	r2, r3, #3
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	18d3      	adds	r3, r2, r3
 8001a6a:	4a33      	ldr	r2, [pc, #204]	@ (8001b38 <PCD_EP_ISR_Handler+0x6e4>)
 8001a6c:	4694      	mov	ip, r2
 8001a6e:	4463      	add	r3, ip
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	059b      	lsls	r3, r3, #22
 8001a7a:	0d9b      	lsrs	r3, r3, #22
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4a2d      	ldr	r2, [pc, #180]	@ (8001b40 <PCD_EP_ISR_Handler+0x6ec>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	e070      	b.n	8001b76 <PCD_EP_ISR_Handler+0x722>
 8001a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d16c      	bne.n	8001b76 <PCD_EP_ISR_Handler+0x722>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2250      	movs	r2, #80	@ 0x50
 8001aa8:	5a9b      	ldrh	r3, [r3, r2]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	001a      	movs	r2, r3
 8001aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab0:	189b      	adds	r3, r3, r2
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	00da      	lsls	r2, r3, #3
 8001aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001abc:	18d3      	adds	r3, r2, r3
 8001abe:	4a1e      	ldr	r2, [pc, #120]	@ (8001b38 <PCD_EP_ISR_Handler+0x6e4>)
 8001ac0:	4694      	mov	ip, r2
 8001ac2:	4463      	add	r3, ip
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac8:	2200      	movs	r2, #0
 8001aca:	801a      	strh	r2, [r3, #0]
 8001acc:	e053      	b.n	8001b76 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad6:	785b      	ldrb	r3, [r3, #1]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d133      	bne.n	8001b44 <PCD_EP_ISR_Handler+0x6f0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2250      	movs	r2, #80	@ 0x50
 8001ae8:	5a9b      	ldrh	r3, [r3, r2]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	001a      	movs	r2, r3
 8001aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001af0:	189b      	adds	r3, r3, r2
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	00da      	lsls	r2, r3, #3
 8001afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afc:	18d3      	adds	r3, r2, r3
 8001afe:	4a0b      	ldr	r2, [pc, #44]	@ (8001b2c <PCD_EP_ISR_Handler+0x6d8>)
 8001b00:	4694      	mov	ip, r2
 8001b02:	4463      	add	r3, ip
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	059b      	lsls	r3, r3, #22
 8001b0e:	0d9b      	lsrs	r3, r3, #22
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b14:	801a      	strh	r2, [r3, #0]
 8001b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <PCD_EP_ISR_Handler+0x6ec>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	e026      	b.n	8001b76 <PCD_EP_ISR_Handler+0x722>
 8001b28:	00000f8f 	.word	0x00000f8f
 8001b2c:	00000406 	.word	0x00000406
 8001b30:	ffff8f8f 	.word	0xffff8f8f
 8001b34:	ffff80c0 	.word	0xffff80c0
 8001b38:	00000402 	.word	0x00000402
 8001b3c:	ffff8f0f 	.word	0xffff8f0f
 8001b40:	ffff8000 	.word	0xffff8000
 8001b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b46:	785b      	ldrb	r3, [r3, #1]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d114      	bne.n	8001b76 <PCD_EP_ISR_Handler+0x722>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2250      	movs	r2, #80	@ 0x50
 8001b52:	5a9b      	ldrh	r3, [r3, r2]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	001a      	movs	r2, r3
 8001b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	00da      	lsls	r2, r3, #3
 8001b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b66:	18d3      	adds	r3, r2, r3
 8001b68:	4a3b      	ldr	r2, [pc, #236]	@ (8001c58 <PCD_EP_ISR_Handler+0x804>)
 8001b6a:	4694      	mov	ip, r2
 8001b6c:	4463      	add	r3, ip
 8001b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b72:	2200      	movs	r2, #0
 8001b74:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f005 fda6 	bl	80076d0 <HAL_PCD_DataInStageCallback>
 8001b84:	e058      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001b86:	234a      	movs	r3, #74	@ 0x4a
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	881a      	ldrh	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4013      	ands	r3, r2
 8001b92:	d149      	bne.n	8001c28 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2250      	movs	r2, #80	@ 0x50
 8001b9a:	5a9b      	ldrh	r3, [r3, r2]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	18d2      	adds	r2, r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	18d3      	adds	r3, r2, r3
 8001bae:	4a2b      	ldr	r2, [pc, #172]	@ (8001c5c <PCD_EP_ISR_Handler+0x808>)
 8001bb0:	4694      	mov	ip, r2
 8001bb2:	4463      	add	r3, ip
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	2140      	movs	r1, #64	@ 0x40
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	0592      	lsls	r2, r2, #22
 8001bbc:	0d92      	lsrs	r2, r2, #22
 8001bbe:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d907      	bls.n	8001bdc <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd8:	619a      	str	r2, [r3, #24]
 8001bda:	e002      	b.n	8001be2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0011      	movs	r1, r2
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f005 fd6c 	bl	80076d0 <HAL_PCD_DataInStageCallback>
 8001bf8:	e01e      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	2140      	movs	r1, #64	@ 0x40
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	18d2      	adds	r2, r2, r3
 8001c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c08:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	18d2      	adds	r2, r2, r3
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c1e:	0011      	movs	r1, r2
 8001c20:	0018      	movs	r0, r3
 8001c22:	f002 fac7 	bl	80041b4 <USB_EPStartXfer>
 8001c26:	e007      	b.n	8001c38 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c28:	234a      	movs	r3, #74	@ 0x4a
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	881a      	ldrh	r2, [r3, #0]
 8001c2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f930 	bl	8001e98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2244      	movs	r2, #68	@ 0x44
 8001c3e:	5a9b      	ldrh	r3, [r3, r2]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da01      	bge.n	8001c4c <PCD_EP_ISR_Handler+0x7f8>
 8001c48:	f7ff fc0a 	bl	8001460 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b016      	add	sp, #88	@ 0x58
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	00000406 	.word	0x00000406
 8001c5c:	00000402 	.word	0x00000402

08001c60 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b089      	sub	sp, #36	@ 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	1dbb      	adds	r3, r7, #6
 8001c6c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	881a      	ldrh	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	d100      	bne.n	8001c7c <HAL_PCD_EP_DB_Receive+0x1c>
 8001c7a:	e07d      	b.n	8001d78 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2250      	movs	r2, #80	@ 0x50
 8001c82:	5a9b      	ldrh	r3, [r3, r2]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	001a      	movs	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	18d2      	adds	r2, r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	18d3      	adds	r3, r2, r3
 8001c96:	4a7a      	ldr	r2, [pc, #488]	@ (8001e80 <HAL_PCD_EP_DB_Receive+0x220>)
 8001c98:	4694      	mov	ip, r2
 8001c9a:	4463      	add	r3, ip
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	211a      	movs	r1, #26
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	0592      	lsls	r2, r2, #22
 8001ca4:	0d92      	lsrs	r2, r2, #22
 8001ca6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d307      	bcc.n	8001cc4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	1ad2      	subs	r2, r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	619a      	str	r2, [r3, #24]
 8001cc2:	e002      	b.n	8001cca <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d121      	bne.n	8001d16 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	18d3      	adds	r3, r2, r3
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	2018      	movs	r0, #24
 8001ce6:	183b      	adds	r3, r7, r0
 8001ce8:	4966      	ldr	r1, [pc, #408]	@ (8001e84 <HAL_PCD_EP_DB_Receive+0x224>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	183b      	adds	r3, r7, r0
 8001cf0:	183a      	adds	r2, r7, r0
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	0189      	lsls	r1, r1, #6
 8001cf8:	404a      	eors	r2, r1
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	001a      	movs	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	18d3      	adds	r3, r2, r3
 8001d0a:	183a      	adds	r2, r7, r0
 8001d0c:	8812      	ldrh	r2, [r2, #0]
 8001d0e:	495e      	ldr	r1, [pc, #376]	@ (8001e88 <HAL_PCD_EP_DB_Receive+0x228>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	b292      	uxth	r2, r2
 8001d14:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d16:	1dbb      	adds	r3, r7, #6
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	2240      	movs	r2, #64	@ 0x40
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d01a      	beq.n	8001d56 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	001a      	movs	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	18d3      	adds	r3, r2, r3
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	2016      	movs	r0, #22
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	4955      	ldr	r1, [pc, #340]	@ (8001e8c <HAL_PCD_EP_DB_Receive+0x22c>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	801a      	strh	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	001a      	movs	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	18d3      	adds	r3, r2, r3
 8001d4a:	183a      	adds	r2, r7, r0
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	4950      	ldr	r1, [pc, #320]	@ (8001e90 <HAL_PCD_EP_DB_Receive+0x230>)
 8001d50:	430a      	orrs	r2, r1
 8001d52:	b292      	uxth	r2, r2
 8001d54:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001d56:	241a      	movs	r4, #26
 8001d58:	193b      	adds	r3, r7, r4
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d100      	bne.n	8001d62 <HAL_PCD_EP_DB_Receive+0x102>
 8001d60:	e086      	b.n	8001e70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	6959      	ldr	r1, [r3, #20]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	891a      	ldrh	r2, [r3, #8]
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	f003 fcda 	bl	800572a <USB_ReadPMA>
 8001d76:	e07b      	b.n	8001e70 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2250      	movs	r2, #80	@ 0x50
 8001d7e:	5a9b      	ldrh	r3, [r3, r2]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	001a      	movs	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	18d2      	adds	r2, r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	18d3      	adds	r3, r2, r3
 8001d92:	4a40      	ldr	r2, [pc, #256]	@ (8001e94 <HAL_PCD_EP_DB_Receive+0x234>)
 8001d94:	4694      	mov	ip, r2
 8001d96:	4463      	add	r3, ip
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	211a      	movs	r1, #26
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	0592      	lsls	r2, r2, #22
 8001da0:	0d92      	lsrs	r2, r2, #22
 8001da2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d307      	bcc.n	8001dc0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	1ad2      	subs	r2, r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	619a      	str	r2, [r3, #24]
 8001dbe:	e002      	b.n	8001dc6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d121      	bne.n	8001e12 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	18d3      	adds	r3, r2, r3
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	201e      	movs	r0, #30
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	4927      	ldr	r1, [pc, #156]	@ (8001e84 <HAL_PCD_EP_DB_Receive+0x224>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	183a      	adds	r2, r7, r0
 8001dee:	8812      	ldrh	r2, [r2, #0]
 8001df0:	2180      	movs	r1, #128	@ 0x80
 8001df2:	0189      	lsls	r1, r1, #6
 8001df4:	404a      	eors	r2, r1
 8001df6:	801a      	strh	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	183a      	adds	r2, r7, r0
 8001e08:	8812      	ldrh	r2, [r2, #0]
 8001e0a:	491f      	ldr	r1, [pc, #124]	@ (8001e88 <HAL_PCD_EP_DB_Receive+0x228>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e12:	1dbb      	adds	r3, r7, #6
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	2240      	movs	r2, #64	@ 0x40
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d11a      	bne.n	8001e52 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	001a      	movs	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	18d3      	adds	r3, r2, r3
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	201c      	movs	r0, #28
 8001e30:	183b      	adds	r3, r7, r0
 8001e32:	4916      	ldr	r1, [pc, #88]	@ (8001e8c <HAL_PCD_EP_DB_Receive+0x22c>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	183a      	adds	r2, r7, r0
 8001e48:	8812      	ldrh	r2, [r2, #0]
 8001e4a:	4911      	ldr	r1, [pc, #68]	@ (8001e90 <HAL_PCD_EP_DB_Receive+0x230>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	b292      	uxth	r2, r2
 8001e50:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001e52:	241a      	movs	r4, #26
 8001e54:	193b      	adds	r3, r7, r4
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	6959      	ldr	r1, [r3, #20]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	895a      	ldrh	r2, [r3, #10]
 8001e68:	193b      	adds	r3, r7, r4
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f003 fc5d 	bl	800572a <USB_ReadPMA>
    }
  }

  return count;
 8001e70:	231a      	movs	r3, #26
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	881b      	ldrh	r3, [r3, #0]
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b009      	add	sp, #36	@ 0x24
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	00000402 	.word	0x00000402
 8001e84:	ffffbf8f 	.word	0xffffbf8f
 8001e88:	ffff8080 	.word	0xffff8080
 8001e8c:	ffff8f8f 	.word	0xffff8f8f
 8001e90:	ffff80c0 	.word	0xffff80c0
 8001e94:	00000406 	.word	0x00000406

08001e98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0a4      	sub	sp, #144	@ 0x90
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	1dbb      	adds	r3, r7, #6
 8001ea4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ea6:	1dbb      	adds	r3, r7, #6
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	2240      	movs	r2, #64	@ 0x40
 8001eac:	4013      	ands	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8001eb0:	e1e4      	b.n	800227c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2250      	movs	r2, #80	@ 0x50
 8001eb8:	5a9b      	ldrh	r3, [r3, r2]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	18d2      	adds	r2, r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	18d3      	adds	r3, r2, r3
 8001ecc:	4ad0      	ldr	r2, [pc, #832]	@ (8002210 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001ece:	4694      	mov	ip, r2
 8001ed0:	4463      	add	r3, ip
 8001ed2:	881a      	ldrh	r2, [r3, #0]
 8001ed4:	2186      	movs	r1, #134	@ 0x86
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	0592      	lsls	r2, r2, #22
 8001eda:	0d92      	lsrs	r2, r2, #22
 8001edc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d907      	bls.n	8001efa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	1ad2      	subs	r2, r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	619a      	str	r2, [r3, #24]
 8001ef8:	e002      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d000      	beq.n	8001f0a <HAL_PCD_EP_DB_Transmit+0x72>
 8001f08:	e0b5      	b.n	8002076 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d125      	bne.n	8001f5e <HAL_PCD_EP_DB_Transmit+0xc6>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2250      	movs	r2, #80	@ 0x50
 8001f1e:	5a9b      	ldrh	r3, [r3, r2]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	001a      	movs	r2, r3
 8001f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	00da      	lsls	r2, r3, #3
 8001f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f32:	18d3      	adds	r3, r2, r3
 8001f34:	4ab6      	ldr	r2, [pc, #728]	@ (8002210 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001f36:	4694      	mov	ip, r2
 8001f38:	4463      	add	r3, ip
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	059b      	lsls	r3, r3, #22
 8001f44:	0d9b      	lsrs	r3, r3, #22
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4ab0      	ldr	r2, [pc, #704]	@ (8002214 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5a:	801a      	strh	r2, [r3, #0]
 8001f5c:	e01b      	b.n	8001f96 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d117      	bne.n	8001f96 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2250      	movs	r2, #80	@ 0x50
 8001f72:	5a9b      	ldrh	r3, [r3, r2]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	001a      	movs	r2, r3
 8001f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f7a:	189b      	adds	r3, r3, r2
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	00da      	lsls	r2, r3, #3
 8001f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f86:	18d3      	adds	r3, r2, r3
 8001f88:	4aa1      	ldr	r2, [pc, #644]	@ (8002210 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001f8a:	4694      	mov	ip, r2
 8001f8c:	4463      	add	r3, ip
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f92:	2200      	movs	r2, #0
 8001f94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d125      	bne.n	8001ff0 <HAL_PCD_EP_DB_Transmit+0x158>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2250      	movs	r2, #80	@ 0x50
 8001fb0:	5a9b      	ldrh	r3, [r3, r2]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	189b      	adds	r3, r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	00da      	lsls	r2, r3, #3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	4a94      	ldr	r2, [pc, #592]	@ (8002218 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001fc8:	4694      	mov	ip, r2
 8001fca:	4463      	add	r3, ip
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	059b      	lsls	r3, r3, #22
 8001fd6:	0d9b      	lsrs	r3, r3, #22
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4a8b      	ldr	r2, [pc, #556]	@ (8002214 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	e018      	b.n	8002022 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d114      	bne.n	8002022 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2250      	movs	r2, #80	@ 0x50
 8001ffe:	5a9b      	ldrh	r3, [r3, r2]
 8002000:	b29b      	uxth	r3, r3
 8002002:	001a      	movs	r2, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	189b      	adds	r3, r3, r2
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	00da      	lsls	r2, r3, #3
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	18d3      	adds	r3, r2, r3
 8002014:	4a80      	ldr	r2, [pc, #512]	@ (8002218 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002016:	4694      	mov	ip, r2
 8002018:	4463      	add	r3, ip
 800201a:	623b      	str	r3, [r7, #32]
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	2200      	movs	r2, #0
 8002020:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0011      	movs	r1, r2
 800202a:	0018      	movs	r0, r3
 800202c:	f005 fb50 	bl	80076d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002030:	1dbb      	adds	r3, r7, #6
 8002032:	881a      	ldrh	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	01db      	lsls	r3, r3, #7
 8002038:	4013      	ands	r3, r2
 800203a:	d100      	bne.n	800203e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800203c:	e309      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	001a      	movs	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	18d3      	adds	r3, r2, r3
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29a      	uxth	r2, r3
 8002050:	2016      	movs	r0, #22
 8002052:	183b      	adds	r3, r7, r0
 8002054:	4971      	ldr	r1, [pc, #452]	@ (800221c <HAL_PCD_EP_DB_Transmit+0x384>)
 8002056:	400a      	ands	r2, r1
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	001a      	movs	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	18d3      	adds	r3, r2, r3
 8002068:	183a      	adds	r2, r7, r0
 800206a:	8812      	ldrh	r2, [r2, #0]
 800206c:	496c      	ldr	r1, [pc, #432]	@ (8002220 <HAL_PCD_EP_DB_Transmit+0x388>)
 800206e:	430a      	orrs	r2, r1
 8002070:	b292      	uxth	r2, r2
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	e2ed      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002076:	1dbb      	adds	r3, r7, #6
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	01db      	lsls	r3, r3, #7
 800207e:	4013      	ands	r3, r2
 8002080:	d01a      	beq.n	80020b8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	001a      	movs	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	18d3      	adds	r3, r2, r3
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29a      	uxth	r2, r3
 8002094:	208a      	movs	r0, #138	@ 0x8a
 8002096:	183b      	adds	r3, r7, r0
 8002098:	4960      	ldr	r1, [pc, #384]	@ (800221c <HAL_PCD_EP_DB_Transmit+0x384>)
 800209a:	400a      	ands	r2, r1
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	001a      	movs	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	183a      	adds	r2, r7, r0
 80020ae:	8812      	ldrh	r2, [r2, #0]
 80020b0:	495b      	ldr	r1, [pc, #364]	@ (8002220 <HAL_PCD_EP_DB_Transmit+0x388>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	b292      	uxth	r2, r2
 80020b6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2224      	movs	r2, #36	@ 0x24
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d000      	beq.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x22c>
 80020c2:	e2c6      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	2186      	movs	r1, #134	@ 0x86
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	18d2      	adds	r2, r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	18d2      	adds	r2, r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d30c      	bcc.n	8002108 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	218c      	movs	r1, #140	@ 0x8c
 80020f4:	187a      	adds	r2, r7, r1
 80020f6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1ad2      	subs	r2, r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	621a      	str	r2, [r3, #32]
 8002106:	e01a      	b.n	800213e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002110:	2386      	movs	r3, #134	@ 0x86
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	228c      	movs	r2, #140	@ 0x8c
 8002118:	18ba      	adds	r2, r7, r2
 800211a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2224      	movs	r2, #36	@ 0x24
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]
 8002124:	e00b      	b.n	800213e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2224      	movs	r2, #36	@ 0x24
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	228c      	movs	r2, #140	@ 0x8c
 8002134:	18ba      	adds	r2, r7, r2
 8002136:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d000      	beq.n	8002148 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002146:	e06d      	b.n	8002224 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2250      	movs	r2, #80	@ 0x50
 8002154:	5a9b      	ldrh	r3, [r3, r2]
 8002156:	b29b      	uxth	r3, r3
 8002158:	001a      	movs	r2, r3
 800215a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800215c:	189b      	adds	r3, r3, r2
 800215e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	00da      	lsls	r2, r3, #3
 8002166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002168:	18d3      	adds	r3, r2, r3
 800216a:	4a29      	ldr	r2, [pc, #164]	@ (8002210 <HAL_PCD_EP_DB_Transmit+0x378>)
 800216c:	4694      	mov	ip, r2
 800216e:	4463      	add	r3, ip
 8002170:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	059b      	lsls	r3, r3, #22
 800217a:	0d9b      	lsrs	r3, r3, #22
 800217c:	b29a      	uxth	r2, r3
 800217e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	228c      	movs	r2, #140	@ 0x8c
 8002184:	18bb      	adds	r3, r7, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b3e      	cmp	r3, #62	@ 0x3e
 800218a:	d91a      	bls.n	80021c2 <HAL_PCD_EP_DB_Transmit+0x32a>
 800218c:	18bb      	adds	r3, r7, r2
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002194:	18bb      	adds	r3, r7, r2
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	221f      	movs	r2, #31
 800219a:	4013      	ands	r3, r2
 800219c:	d102      	bne.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800219e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021a0:	3b01      	subs	r3, #1
 80021a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	029b      	lsls	r3, r3, #10
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	e04f      	b.n	8002262 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80021c2:	238c      	movs	r3, #140	@ 0x8c
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <HAL_PCD_EP_DB_Transmit+0x346>
 80021cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4a10      	ldr	r2, [pc, #64]	@ (8002214 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	e041      	b.n	8002262 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80021de:	228c      	movs	r2, #140	@ 0x8c
 80021e0:	18bb      	adds	r3, r7, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021e8:	18bb      	adds	r3, r7, r2
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d002      	beq.n	80021f8 <HAL_PCD_EP_DB_Transmit+0x360>
 80021f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021f4:	3301      	adds	r3, #1
 80021f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002200:	b29b      	uxth	r3, r3
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	b29b      	uxth	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b29a      	uxth	r2, r3
 800220a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220c:	801a      	strh	r2, [r3, #0]
 800220e:	e028      	b.n	8002262 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002210:	00000402 	.word	0x00000402
 8002214:	ffff8000 	.word	0xffff8000
 8002218:	00000406 	.word	0x00000406
 800221c:	ffff8f8f 	.word	0xffff8f8f
 8002220:	ffffc080 	.word	0xffffc080
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d11a      	bne.n	8002262 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	647b      	str	r3, [r7, #68]	@ 0x44
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2250      	movs	r2, #80	@ 0x50
 8002238:	5a9b      	ldrh	r3, [r3, r2]
 800223a:	b29b      	uxth	r3, r3
 800223c:	001a      	movs	r2, r3
 800223e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002240:	189b      	adds	r3, r3, r2
 8002242:	647b      	str	r3, [r7, #68]	@ 0x44
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00da      	lsls	r2, r3, #3
 800224a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224c:	18d3      	adds	r3, r2, r3
 800224e:	4adb      	ldr	r2, [pc, #876]	@ (80025bc <HAL_PCD_EP_DB_Transmit+0x724>)
 8002250:	4694      	mov	ip, r2
 8002252:	4463      	add	r3, ip
 8002254:	643b      	str	r3, [r7, #64]	@ 0x40
 8002256:	238c      	movs	r3, #140	@ 0x8c
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b29a      	uxth	r2, r3
 800225e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002260:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	6959      	ldr	r1, [r3, #20]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	891a      	ldrh	r2, [r3, #8]
 800226e:	238c      	movs	r3, #140	@ 0x8c
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f003 fa0f 	bl	8005698 <USB_WritePMA>
 800227a:	e1ea      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2250      	movs	r2, #80	@ 0x50
 8002282:	5a9b      	ldrh	r3, [r3, r2]
 8002284:	b29b      	uxth	r3, r3
 8002286:	001a      	movs	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	18d2      	adds	r2, r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	4aca      	ldr	r2, [pc, #808]	@ (80025c0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002298:	4694      	mov	ip, r2
 800229a:	4463      	add	r3, ip
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	2186      	movs	r1, #134	@ 0x86
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	0592      	lsls	r2, r2, #22
 80022a4:	0d92      	lsrs	r2, r2, #22
 80022a6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d307      	bcc.n	80022c4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	1ad2      	subs	r2, r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	619a      	str	r2, [r3, #24]
 80022c2:	e002      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d000      	beq.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x43c>
 80022d2:	e0bb      	b.n	800244c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d125      	bne.n	8002328 <HAL_PCD_EP_DB_Transmit+0x490>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2250      	movs	r2, #80	@ 0x50
 80022e8:	5a9b      	ldrh	r3, [r3, r2]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	001a      	movs	r2, r3
 80022ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022f0:	189b      	adds	r3, r3, r2
 80022f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	00da      	lsls	r2, r3, #3
 80022fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	4aaf      	ldr	r2, [pc, #700]	@ (80025bc <HAL_PCD_EP_DB_Transmit+0x724>)
 8002300:	4694      	mov	ip, r2
 8002302:	4463      	add	r3, ip
 8002304:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	059b      	lsls	r3, r3, #22
 800230e:	0d9b      	lsrs	r3, r3, #22
 8002310:	b29a      	uxth	r2, r3
 8002312:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002314:	801a      	strh	r2, [r3, #0]
 8002316:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4aa9      	ldr	r2, [pc, #676]	@ (80025c4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	b29a      	uxth	r2, r3
 8002322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002324:	801a      	strh	r2, [r3, #0]
 8002326:	e01b      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d117      	bne.n	8002360 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	667b      	str	r3, [r7, #100]	@ 0x64
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2250      	movs	r2, #80	@ 0x50
 800233c:	5a9b      	ldrh	r3, [r3, r2]
 800233e:	b29b      	uxth	r3, r3
 8002340:	001a      	movs	r2, r3
 8002342:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002344:	189b      	adds	r3, r3, r2
 8002346:	667b      	str	r3, [r7, #100]	@ 0x64
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	00da      	lsls	r2, r3, #3
 800234e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002350:	18d3      	adds	r3, r2, r3
 8002352:	4a9a      	ldr	r2, [pc, #616]	@ (80025bc <HAL_PCD_EP_DB_Transmit+0x724>)
 8002354:	4694      	mov	ip, r2
 8002356:	4463      	add	r3, ip
 8002358:	663b      	str	r3, [r7, #96]	@ 0x60
 800235a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800235c:	2200      	movs	r2, #0
 800235e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	677b      	str	r3, [r7, #116]	@ 0x74
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	785b      	ldrb	r3, [r3, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d12b      	bne.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x52e>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2250      	movs	r2, #80	@ 0x50
 800237a:	5a9b      	ldrh	r3, [r3, r2]
 800237c:	b29b      	uxth	r3, r3
 800237e:	001a      	movs	r2, r3
 8002380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002382:	189b      	adds	r3, r3, r2
 8002384:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	00da      	lsls	r2, r3, #3
 800238c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800238e:	18d3      	adds	r3, r2, r3
 8002390:	4a8b      	ldr	r2, [pc, #556]	@ (80025c0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002392:	4694      	mov	ip, r2
 8002394:	4463      	add	r3, ip
 8002396:	2180      	movs	r1, #128	@ 0x80
 8002398:	187a      	adds	r2, r7, r1
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	187b      	adds	r3, r7, r1
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	059b      	lsls	r3, r3, #22
 80023a6:	0d9b      	lsrs	r3, r3, #22
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4a82      	ldr	r2, [pc, #520]	@ (80025c4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b29a      	uxth	r2, r3
 80023be:	187b      	adds	r3, r7, r1
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	801a      	strh	r2, [r3, #0]
 80023c4:	e018      	b.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x560>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d114      	bne.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x560>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2250      	movs	r2, #80	@ 0x50
 80023d4:	5a9b      	ldrh	r3, [r3, r2]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	001a      	movs	r2, r3
 80023da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	677b      	str	r3, [r7, #116]	@ 0x74
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	00da      	lsls	r2, r3, #3
 80023e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023e8:	18d3      	adds	r3, r2, r3
 80023ea:	4a75      	ldr	r2, [pc, #468]	@ (80025c0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80023ec:	4694      	mov	ip, r2
 80023ee:	4463      	add	r3, ip
 80023f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80023f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023f4:	2200      	movs	r2, #0
 80023f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	0011      	movs	r1, r2
 8002400:	0018      	movs	r0, r3
 8002402:	f005 f965 	bl	80076d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002406:	1dbb      	adds	r3, r7, #6
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	01db      	lsls	r3, r3, #7
 800240e:	4013      	ands	r3, r2
 8002410:	d000      	beq.n	8002414 <HAL_PCD_EP_DB_Transmit+0x57c>
 8002412:	e11e      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	001a      	movs	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	18d3      	adds	r3, r2, r3
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29a      	uxth	r2, r3
 8002426:	2088      	movs	r0, #136	@ 0x88
 8002428:	183b      	adds	r3, r7, r0
 800242a:	4967      	ldr	r1, [pc, #412]	@ (80025c8 <HAL_PCD_EP_DB_Transmit+0x730>)
 800242c:	400a      	ands	r2, r1
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	001a      	movs	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	18d3      	adds	r3, r2, r3
 800243e:	183a      	adds	r2, r7, r0
 8002440:	8812      	ldrh	r2, [r2, #0]
 8002442:	4962      	ldr	r1, [pc, #392]	@ (80025cc <HAL_PCD_EP_DB_Transmit+0x734>)
 8002444:	430a      	orrs	r2, r1
 8002446:	b292      	uxth	r2, r2
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e102      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	01db      	lsls	r3, r3, #7
 8002454:	4013      	ands	r3, r2
 8002456:	d11a      	bne.n	800248e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	001a      	movs	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b29a      	uxth	r2, r3
 800246a:	204e      	movs	r0, #78	@ 0x4e
 800246c:	183b      	adds	r3, r7, r0
 800246e:	4956      	ldr	r1, [pc, #344]	@ (80025c8 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002470:	400a      	ands	r2, r1
 8002472:	801a      	strh	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	001a      	movs	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	183a      	adds	r2, r7, r0
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	4951      	ldr	r1, [pc, #324]	@ (80025cc <HAL_PCD_EP_DB_Transmit+0x734>)
 8002488:	430a      	orrs	r2, r1
 800248a:	b292      	uxth	r2, r2
 800248c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2224      	movs	r2, #36	@ 0x24
 8002492:	5c9b      	ldrb	r3, [r3, r2]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d000      	beq.n	800249a <HAL_PCD_EP_DB_Transmit+0x602>
 8002498:	e0db      	b.n	8002652 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	2186      	movs	r1, #134	@ 0x86
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	18d2      	adds	r2, r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	18d2      	adds	r2, r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d30c      	bcc.n	80024de <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	218c      	movs	r1, #140	@ 0x8c
 80024ca:	187a      	adds	r2, r7, r1
 80024cc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6a1a      	ldr	r2, [r3, #32]
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1ad2      	subs	r2, r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	621a      	str	r2, [r3, #32]
 80024dc:	e01a      	b.n	8002514 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80024e6:	2386      	movs	r3, #134	@ 0x86
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	228c      	movs	r2, #140	@ 0x8c
 80024ee:	18ba      	adds	r2, r7, r2
 80024f0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2224      	movs	r2, #36	@ 0x24
 80024f6:	2100      	movs	r1, #0
 80024f8:	5499      	strb	r1, [r3, r2]
 80024fa:	e00b      	b.n	8002514 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	228c      	movs	r2, #140	@ 0x8c
 8002502:	18ba      	adds	r2, r7, r2
 8002504:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2224      	movs	r2, #36	@ 0x24
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	657b      	str	r3, [r7, #84]	@ 0x54
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d000      	beq.n	8002524 <HAL_PCD_EP_DB_Transmit+0x68c>
 8002522:	e06e      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x76a>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2250      	movs	r2, #80	@ 0x50
 8002530:	5a9b      	ldrh	r3, [r3, r2]
 8002532:	b29b      	uxth	r3, r3
 8002534:	001a      	movs	r2, r3
 8002536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002538:	189b      	adds	r3, r3, r2
 800253a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00da      	lsls	r2, r3, #3
 8002542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002544:	18d3      	adds	r3, r2, r3
 8002546:	4a1e      	ldr	r2, [pc, #120]	@ (80025c0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002548:	4694      	mov	ip, r2
 800254a:	4463      	add	r3, ip
 800254c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800254e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	059b      	lsls	r3, r3, #22
 8002556:	0d9b      	lsrs	r3, r3, #22
 8002558:	b29a      	uxth	r2, r3
 800255a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	228c      	movs	r2, #140	@ 0x8c
 8002560:	18bb      	adds	r3, r7, r2
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b3e      	cmp	r3, #62	@ 0x3e
 8002566:	d91a      	bls.n	800259e <HAL_PCD_EP_DB_Transmit+0x706>
 8002568:	18bb      	adds	r3, r7, r2
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002570:	18bb      	adds	r3, r7, r2
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	221f      	movs	r2, #31
 8002576:	4013      	ands	r3, r2
 8002578:	d102      	bne.n	8002580 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800257a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800257c:	3b01      	subs	r3, #1
 800257e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29a      	uxth	r2, r3
 8002586:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002588:	b29b      	uxth	r3, r3
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	b29b      	uxth	r3, r3
 800258e:	4313      	orrs	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	4a0c      	ldr	r2, [pc, #48]	@ (80025c4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	b29a      	uxth	r2, r3
 8002598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	e04d      	b.n	800263a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800259e:	238c      	movs	r3, #140	@ 0x8c
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d113      	bne.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x738>
 80025a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	4a05      	ldr	r2, [pc, #20]	@ (80025c4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e03f      	b.n	800263a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	00000402 	.word	0x00000402
 80025c0:	00000406 	.word	0x00000406
 80025c4:	ffff8000 	.word	0xffff8000
 80025c8:	ffff8f8f 	.word	0xffff8f8f
 80025cc:	ffffc080 	.word	0xffffc080
 80025d0:	228c      	movs	r2, #140	@ 0x8c
 80025d2:	18bb      	adds	r3, r7, r2
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025da:	18bb      	adds	r3, r7, r2
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d002      	beq.n	80025ea <HAL_PCD_EP_DB_Transmit+0x752>
 80025e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025e6:	3301      	adds	r3, #1
 80025e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	029b      	lsls	r3, r3, #10
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e01b      	b.n	800263a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d117      	bne.n	800263a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2250      	movs	r2, #80	@ 0x50
 8002610:	5a9b      	ldrh	r3, [r3, r2]
 8002612:	b29b      	uxth	r3, r3
 8002614:	001a      	movs	r2, r3
 8002616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002618:	189b      	adds	r3, r3, r2
 800261a:	657b      	str	r3, [r7, #84]	@ 0x54
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	00da      	lsls	r2, r3, #3
 8002622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002624:	18d3      	adds	r3, r2, r3
 8002626:	4a21      	ldr	r2, [pc, #132]	@ (80026ac <HAL_PCD_EP_DB_Transmit+0x814>)
 8002628:	4694      	mov	ip, r2
 800262a:	4463      	add	r3, ip
 800262c:	653b      	str	r3, [r7, #80]	@ 0x50
 800262e:	238c      	movs	r3, #140	@ 0x8c
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	b29a      	uxth	r2, r3
 8002636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002638:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6959      	ldr	r1, [r3, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	895a      	ldrh	r2, [r3, #10]
 8002646:	238c      	movs	r3, #140	@ 0x8c
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f003 f823 	bl	8005698 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	001a      	movs	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	18d3      	adds	r3, r2, r3
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29a      	uxth	r2, r3
 8002664:	2014      	movs	r0, #20
 8002666:	183b      	adds	r3, r7, r0
 8002668:	4911      	ldr	r1, [pc, #68]	@ (80026b0 <HAL_PCD_EP_DB_Transmit+0x818>)
 800266a:	400a      	ands	r2, r1
 800266c:	801a      	strh	r2, [r3, #0]
 800266e:	183b      	adds	r3, r7, r0
 8002670:	183a      	adds	r2, r7, r0
 8002672:	8812      	ldrh	r2, [r2, #0]
 8002674:	2110      	movs	r1, #16
 8002676:	404a      	eors	r2, r1
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	183b      	adds	r3, r7, r0
 800267c:	183a      	adds	r2, r7, r0
 800267e:	8812      	ldrh	r2, [r2, #0]
 8002680:	2120      	movs	r1, #32
 8002682:	404a      	eors	r2, r1
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	001a      	movs	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	18d3      	adds	r3, r2, r3
 8002694:	183a      	adds	r2, r7, r0
 8002696:	8812      	ldrh	r2, [r2, #0]
 8002698:	4906      	ldr	r1, [pc, #24]	@ (80026b4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800269a:	430a      	orrs	r2, r1
 800269c:	b292      	uxth	r2, r2
 800269e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b024      	add	sp, #144	@ 0x90
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	00000406 	.word	0x00000406
 80026b0:	ffff8fbf 	.word	0xffff8fbf
 80026b4:	ffff8080 	.word	0xffff8080

080026b8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	0008      	movs	r0, r1
 80026c2:	0011      	movs	r1, r2
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	240a      	movs	r4, #10
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	1c02      	adds	r2, r0, #0
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	2308      	movs	r3, #8
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	1c0a      	adds	r2, r1, #0
 80026d4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026d6:	0021      	movs	r1, r4
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	2280      	movs	r2, #128	@ 0x80
 80026de:	4013      	ands	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00c      	beq.n	8002700 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	2207      	movs	r2, #7
 80026ec:	4013      	ands	r3, r2
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	0013      	movs	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	189b      	adds	r3, r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	18d3      	adds	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e00b      	b.n	8002718 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002700:	230a      	movs	r3, #10
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	881a      	ldrh	r2, [r3, #0]
 8002706:	0013      	movs	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	189b      	adds	r3, r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	3369      	adds	r3, #105	@ 0x69
 8002710:	33ff      	adds	r3, #255	@ 0xff
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	18d3      	adds	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002718:	2308      	movs	r3, #8
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	b29a      	uxth	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	80da      	strh	r2, [r3, #6]
 8002730:	e00b      	b.n	800274a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2201      	movs	r2, #1
 8002736:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	b29a      	uxth	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0c1b      	lsrs	r3, r3, #16
 8002744:	b29a      	uxth	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b007      	add	sp, #28
 8002752:	bd90      	pop	{r4, r7, pc}

08002754 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	23ba      	movs	r3, #186	@ 0xba
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	2101      	movs	r1, #1
 800276a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	23b8      	movs	r3, #184	@ 0xb8
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	2100      	movs	r1, #0
 8002774:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2254      	movs	r2, #84	@ 0x54
 800277a:	5a9b      	ldrh	r3, [r3, r2]
 800277c:	b29b      	uxth	r3, r3
 800277e:	2201      	movs	r2, #1
 8002780:	4313      	orrs	r3, r2
 8002782:	b299      	uxth	r1, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2254      	movs	r2, #84	@ 0x54
 8002788:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2254      	movs	r2, #84	@ 0x54
 800278e:	5a9b      	ldrh	r3, [r3, r2]
 8002790:	b29b      	uxth	r3, r3
 8002792:	2202      	movs	r2, #2
 8002794:	4313      	orrs	r3, r2
 8002796:	b299      	uxth	r1, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2254      	movs	r2, #84	@ 0x54
 800279c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	000a      	movs	r2, r1
 80027b2:	1cfb      	adds	r3, r7, #3
 80027b4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f000 fbaf 	bl	8002f32 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d4:	4bcf      	ldr	r3, [pc, #828]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	220c      	movs	r2, #12
 80027da:	4013      	ands	r3, r2
 80027dc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027de:	4bcd      	ldr	r3, [pc, #820]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	025b      	lsls	r3, r3, #9
 80027e6:	4013      	ands	r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2201      	movs	r2, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	d100      	bne.n	80027f6 <HAL_RCC_OscConfig+0x36>
 80027f4:	e07e      	b.n	80028f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d007      	beq.n	800280c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d112      	bne.n	8002828 <HAL_RCC_OscConfig+0x68>
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	025b      	lsls	r3, r3, #9
 8002808:	429a      	cmp	r2, r3
 800280a:	d10d      	bne.n	8002828 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	4bc1      	ldr	r3, [pc, #772]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	029b      	lsls	r3, r3, #10
 8002814:	4013      	ands	r3, r2
 8002816:	d100      	bne.n	800281a <HAL_RCC_OscConfig+0x5a>
 8002818:	e06b      	b.n	80028f2 <HAL_RCC_OscConfig+0x132>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d167      	bne.n	80028f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f000 fb85 	bl	8002f32 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	025b      	lsls	r3, r3, #9
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x84>
 8002834:	4bb7      	ldr	r3, [pc, #732]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4bb6      	ldr	r3, [pc, #728]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800283a:	2180      	movs	r1, #128	@ 0x80
 800283c:	0249      	lsls	r1, r1, #9
 800283e:	430a      	orrs	r2, r1
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e027      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	23a0      	movs	r3, #160	@ 0xa0
 800284a:	02db      	lsls	r3, r3, #11
 800284c:	429a      	cmp	r2, r3
 800284e:	d10e      	bne.n	800286e <HAL_RCC_OscConfig+0xae>
 8002850:	4bb0      	ldr	r3, [pc, #704]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4baf      	ldr	r3, [pc, #700]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	02c9      	lsls	r1, r1, #11
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	4bad      	ldr	r3, [pc, #692]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4bac      	ldr	r3, [pc, #688]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002864:	2180      	movs	r1, #128	@ 0x80
 8002866:	0249      	lsls	r1, r1, #9
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	e012      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 800286e:	4ba9      	ldr	r3, [pc, #676]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4ba8      	ldr	r3, [pc, #672]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002874:	49a8      	ldr	r1, [pc, #672]	@ (8002b18 <HAL_RCC_OscConfig+0x358>)
 8002876:	400a      	ands	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	4ba6      	ldr	r3, [pc, #664]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	025b      	lsls	r3, r3, #9
 8002882:	4013      	ands	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4ba2      	ldr	r3, [pc, #648]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4ba1      	ldr	r3, [pc, #644]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800288e:	49a3      	ldr	r1, [pc, #652]	@ (8002b1c <HAL_RCC_OscConfig+0x35c>)
 8002890:	400a      	ands	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d015      	beq.n	80028c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe f832 	bl	8000904 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028a4:	e009      	b.n	80028ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a6:	f7fe f82d 	bl	8000904 <HAL_GetTick>
 80028aa:	0002      	movs	r2, r0
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b64      	cmp	r3, #100	@ 0x64
 80028b2:	d902      	bls.n	80028ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	f000 fb3c 	bl	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ba:	4b96      	ldr	r3, [pc, #600]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	029b      	lsls	r3, r3, #10
 80028c2:	4013      	ands	r3, r2
 80028c4:	d0ef      	beq.n	80028a6 <HAL_RCC_OscConfig+0xe6>
 80028c6:	e015      	b.n	80028f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe f81c 	bl	8000904 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d2:	f7fe f817 	bl	8000904 <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	@ 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e326      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	029b      	lsls	r3, r3, #10
 80028ec:	4013      	ands	r3, r2
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x112>
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2202      	movs	r2, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	d100      	bne.n	8002900 <HAL_RCC_OscConfig+0x140>
 80028fe:	e08b      	b.n	8002a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d13e      	bne.n	8002990 <HAL_RCC_OscConfig+0x1d0>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d13b      	bne.n	8002990 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002918:	4b7e      	ldr	r3, [pc, #504]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	4013      	ands	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_RCC_OscConfig+0x16c>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e302      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b79      	ldr	r3, [pc, #484]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a7b      	ldr	r2, [pc, #492]	@ (8002b20 <HAL_RCC_OscConfig+0x360>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	021a      	lsls	r2, r3, #8
 800293c:	4b75      	ldr	r3, [pc, #468]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002942:	4b74      	ldr	r3, [pc, #464]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2209      	movs	r2, #9
 8002948:	4393      	bics	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	4b71      	ldr	r3, [pc, #452]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002954:	f000 fc40 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 8002958:	0001      	movs	r1, r0
 800295a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	220f      	movs	r2, #15
 8002962:	4013      	ands	r3, r2
 8002964:	4a6f      	ldr	r2, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x364>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	000a      	movs	r2, r1
 800296a:	40da      	lsrs	r2, r3
 800296c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b28 <HAL_RCC_OscConfig+0x368>)
 800296e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002970:	4b6e      	ldr	r3, [pc, #440]	@ (8002b2c <HAL_RCC_OscConfig+0x36c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2513      	movs	r5, #19
 8002976:	197c      	adds	r4, r7, r5
 8002978:	0018      	movs	r0, r3
 800297a:	f7fd ff7d 	bl	8000878 <HAL_InitTick>
 800297e:	0003      	movs	r3, r0
 8002980:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002982:	197b      	adds	r3, r7, r5
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d046      	beq.n	8002a18 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800298a:	197b      	adds	r3, r7, r5
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	e2d0      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d027      	beq.n	80029e6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002996:	4b5f      	ldr	r3, [pc, #380]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2209      	movs	r2, #9
 800299c:	4393      	bics	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fd ffac 	bl	8000904 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b2:	f7fd ffa7 	bl	8000904 <HAL_GetTick>
 80029b6:	0002      	movs	r2, r0
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e2b6      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2204      	movs	r2, #4
 80029ca:	4013      	ands	r3, r2
 80029cc:	d0f1      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b51      	ldr	r3, [pc, #324]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a53      	ldr	r2, [pc, #332]	@ (8002b20 <HAL_RCC_OscConfig+0x360>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	021a      	lsls	r2, r3, #8
 80029de:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	e018      	b.n	8002a18 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 80029ec:	2101      	movs	r1, #1
 80029ee:	438a      	bics	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fd ff87 	bl	8000904 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fd ff82 	bl	8000904 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e291      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a0e:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2204      	movs	r2, #4
 8002a14:	4013      	ands	r3, r2
 8002a16:	d1f1      	bne.n	80029fc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d100      	bne.n	8002a24 <HAL_RCC_OscConfig+0x264>
 8002a22:	e0a1      	b.n	8002b68 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d140      	bne.n	8002aac <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4013      	ands	r3, r2
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x282>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e277      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a42:	4b34      	ldr	r3, [pc, #208]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4a3a      	ldr	r2, [pc, #232]	@ (8002b30 <HAL_RCC_OscConfig+0x370>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a50:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a56:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	0a19      	lsrs	r1, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	061a      	lsls	r2, r3, #24
 8002a64:	4b2b      	ldr	r3, [pc, #172]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	0b5b      	lsrs	r3, r3, #13
 8002a70:	3301      	adds	r3, #1
 8002a72:	2280      	movs	r2, #128	@ 0x80
 8002a74:	0212      	lsls	r2, r2, #8
 8002a76:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a78:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	210f      	movs	r1, #15
 8002a80:	400b      	ands	r3, r1
 8002a82:	4928      	ldr	r1, [pc, #160]	@ (8002b24 <HAL_RCC_OscConfig+0x364>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_RCC_OscConfig+0x368>)
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a8c:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <HAL_RCC_OscConfig+0x36c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2513      	movs	r5, #19
 8002a92:	197c      	adds	r4, r7, r5
 8002a94:	0018      	movs	r0, r3
 8002a96:	f7fd feef 	bl	8000878 <HAL_InitTick>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a9e:	197b      	adds	r3, r7, r5
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d060      	beq.n	8002b68 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002aa6:	197b      	adds	r3, r7, r5
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d03f      	beq.n	8002b34 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b16      	ldr	r3, [pc, #88]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	0049      	lsls	r1, r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fd ff1f 	bl	8000904 <HAL_GetTick>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002acc:	f7fd ff1a 	bl	8000904 <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e229      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ade:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a10      	ldr	r2, [pc, #64]	@ (8002b30 <HAL_RCC_OscConfig+0x370>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	0a19      	lsrs	r1, r3, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	061a      	lsls	r2, r3, #24
 8002b0c:	4b01      	ldr	r3, [pc, #4]	@ (8002b14 <HAL_RCC_OscConfig+0x354>)
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	e029      	b.n	8002b68 <HAL_RCC_OscConfig+0x3a8>
 8002b14:	40021000 	.word	0x40021000
 8002b18:	fffeffff 	.word	0xfffeffff
 8002b1c:	fffbffff 	.word	0xfffbffff
 8002b20:	ffffe0ff 	.word	0xffffe0ff
 8002b24:	08008c04 	.word	0x08008c04
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b34:	4bbd      	ldr	r3, [pc, #756]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4bbc      	ldr	r3, [pc, #752]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002b3a:	49bd      	ldr	r1, [pc, #756]	@ (8002e30 <HAL_RCC_OscConfig+0x670>)
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fd fee0 	bl	8000904 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4a:	f7fd fedb 	bl	8000904 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1ea      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b5c:	4bb3      	ldr	r3, [pc, #716]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d036      	beq.n	8002be0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d019      	beq.n	8002bae <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7a:	4bac      	ldr	r3, [pc, #688]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b7e:	4bab      	ldr	r3, [pc, #684]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7fd febd 	bl	8000904 <HAL_GetTick>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fd feb8 	bl	8000904 <HAL_GetTick>
 8002b94:	0002      	movs	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ba2:	4ba2      	ldr	r3, [pc, #648]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d0f1      	beq.n	8002b90 <HAL_RCC_OscConfig+0x3d0>
 8002bac:	e018      	b.n	8002be0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bae:	4b9f      	ldr	r3, [pc, #636]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002bb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	438a      	bics	r2, r1
 8002bb8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fd fea3 	bl	8000904 <HAL_GetTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fd fe9e 	bl	8000904 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1ad      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bd6:	4b95      	ldr	r3, [pc, #596]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d1f1      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2204      	movs	r2, #4
 8002be6:	4013      	ands	r3, r2
 8002be8:	d100      	bne.n	8002bec <HAL_RCC_OscConfig+0x42c>
 8002bea:	e0ae      	b.n	8002d4a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bec:	2027      	movs	r0, #39	@ 0x27
 8002bee:	183b      	adds	r3, r7, r0
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002bf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	055b      	lsls	r3, r3, #21
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b8a      	ldr	r3, [pc, #552]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c04:	4b89      	ldr	r3, [pc, #548]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002c06:	2180      	movs	r1, #128	@ 0x80
 8002c08:	0549      	lsls	r1, r1, #21
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002c0e:	183b      	adds	r3, r7, r0
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b87      	ldr	r3, [pc, #540]	@ (8002e34 <HAL_RCC_OscConfig+0x674>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d11a      	bne.n	8002c56 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c20:	4b84      	ldr	r3, [pc, #528]	@ (8002e34 <HAL_RCC_OscConfig+0x674>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b83      	ldr	r3, [pc, #524]	@ (8002e34 <HAL_RCC_OscConfig+0x674>)
 8002c26:	2180      	movs	r1, #128	@ 0x80
 8002c28:	0049      	lsls	r1, r1, #1
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7fd fe69 	bl	8000904 <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fd fe64 	bl	8000904 <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	@ 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e173      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e34 <HAL_RCC_OscConfig+0x674>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4b2>
 8002c62:	4b72      	ldr	r3, [pc, #456]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c66:	4b71      	ldr	r3, [pc, #452]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002c68:	2180      	movs	r1, #128	@ 0x80
 8002c6a:	0049      	lsls	r1, r1, #1
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c70:	e031      	b.n	8002cd6 <HAL_RCC_OscConfig+0x516>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4d4>
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c7e:	4b6b      	ldr	r3, [pc, #428]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002c80:	496b      	ldr	r1, [pc, #428]	@ (8002e30 <HAL_RCC_OscConfig+0x670>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c86:	4b69      	ldr	r3, [pc, #420]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002c88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c8a:	4b68      	ldr	r3, [pc, #416]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002c8c:	496a      	ldr	r1, [pc, #424]	@ (8002e38 <HAL_RCC_OscConfig+0x678>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c92:	e020      	b.n	8002cd6 <HAL_RCC_OscConfig+0x516>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	23a0      	movs	r3, #160	@ 0xa0
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d10e      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4fe>
 8002ca0:	4b62      	ldr	r3, [pc, #392]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002ca2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca4:	4b61      	ldr	r3, [pc, #388]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	00c9      	lsls	r1, r1, #3
 8002caa:	430a      	orrs	r2, r1
 8002cac:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cae:	4b5f      	ldr	r3, [pc, #380]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002cb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002cb4:	2180      	movs	r1, #128	@ 0x80
 8002cb6:	0049      	lsls	r1, r1, #1
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x516>
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cc2:	4b5a      	ldr	r3, [pc, #360]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002cc4:	495a      	ldr	r1, [pc, #360]	@ (8002e30 <HAL_RCC_OscConfig+0x670>)
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cca:	4b58      	ldr	r3, [pc, #352]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002ccc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cce:	4b57      	ldr	r3, [pc, #348]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002cd0:	4959      	ldr	r1, [pc, #356]	@ (8002e38 <HAL_RCC_OscConfig+0x678>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fd fe11 	bl	8000904 <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce6:	e009      	b.n	8002cfc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fd fe0c 	bl	8000904 <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	4a52      	ldr	r2, [pc, #328]	@ (8002e3c <HAL_RCC_OscConfig+0x67c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e11a      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002cfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d0ef      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x528>
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fd fdfb 	bl	8000904 <HAL_GetTick>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d12:	e009      	b.n	8002d28 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7fd fdf6 	bl	8000904 <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a47      	ldr	r2, [pc, #284]	@ (8002e3c <HAL_RCC_OscConfig+0x67c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e104      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d28:	4b40      	ldr	r3, [pc, #256]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002d2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4013      	ands	r3, r2
 8002d32:	d1ef      	bne.n	8002d14 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d34:	2327      	movs	r3, #39	@ 0x27
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d42:	4b3a      	ldr	r3, [pc, #232]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002d44:	493e      	ldr	r1, [pc, #248]	@ (8002e40 <HAL_RCC_OscConfig+0x680>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	4013      	ands	r3, r2
 8002d52:	d049      	beq.n	8002de8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d026      	beq.n	8002daa <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d5c:	4b33      	ldr	r3, [pc, #204]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b32      	ldr	r3, [pc, #200]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002d62:	2101      	movs	r1, #1
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	4b30      	ldr	r3, [pc, #192]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002d6e:	2101      	movs	r1, #1
 8002d70:	430a      	orrs	r2, r1
 8002d72:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d74:	4b33      	ldr	r3, [pc, #204]	@ (8002e44 <HAL_RCC_OscConfig+0x684>)
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	4b32      	ldr	r3, [pc, #200]	@ (8002e44 <HAL_RCC_OscConfig+0x684>)
 8002d7a:	2180      	movs	r1, #128	@ 0x80
 8002d7c:	0189      	lsls	r1, r1, #6
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fd fdbf 	bl	8000904 <HAL_GetTick>
 8002d86:	0003      	movs	r3, r0
 8002d88:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d8c:	f7fd fdba 	bl	8000904 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0c9      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d9e:	4b23      	ldr	r3, [pc, #140]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2202      	movs	r2, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	d0f1      	beq.n	8002d8c <HAL_RCC_OscConfig+0x5cc>
 8002da8:	e01e      	b.n	8002de8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	4b1f      	ldr	r3, [pc, #124]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	438a      	bics	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <HAL_RCC_OscConfig+0x684>)
 8002db8:	6a1a      	ldr	r2, [r3, #32]
 8002dba:	4b22      	ldr	r3, [pc, #136]	@ (8002e44 <HAL_RCC_OscConfig+0x684>)
 8002dbc:	4922      	ldr	r1, [pc, #136]	@ (8002e48 <HAL_RCC_OscConfig+0x688>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd fd9f 	bl	8000904 <HAL_GetTick>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dcc:	f7fd fd9a 	bl	8000904 <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0a9      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dde:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d1f1      	bne.n	8002dcc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d100      	bne.n	8002df2 <HAL_RCC_OscConfig+0x632>
 8002df0:	e09e      	b.n	8002f30 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d100      	bne.n	8002dfa <HAL_RCC_OscConfig+0x63a>
 8002df8:	e077      	b.n	8002eea <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d158      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <HAL_RCC_OscConfig+0x66c>)
 8002e08:	4910      	ldr	r1, [pc, #64]	@ (8002e4c <HAL_RCC_OscConfig+0x68c>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fd fd79 	bl	8000904 <HAL_GetTick>
 8002e12:	0003      	movs	r3, r0
 8002e14:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e16:	e01b      	b.n	8002e50 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fd fd74 	bl	8000904 <HAL_GetTick>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d914      	bls.n	8002e50 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e083      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	fffffeff 	.word	0xfffffeff
 8002e34:	40007000 	.word	0x40007000
 8002e38:	fffffbff 	.word	0xfffffbff
 8002e3c:	00001388 	.word	0x00001388
 8002e40:	efffffff 	.word	0xefffffff
 8002e44:	40010000 	.word	0x40010000
 8002e48:	ffffdfff 	.word	0xffffdfff
 8002e4c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e50:	4b3a      	ldr	r3, [pc, #232]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	049b      	lsls	r3, r3, #18
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d1dd      	bne.n	8002e18 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5c:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a37      	ldr	r2, [pc, #220]	@ (8002f40 <HAL_RCC_OscConfig+0x780>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e74:	431a      	orrs	r2, r3
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b2e      	ldr	r3, [pc, #184]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002e82:	2180      	movs	r1, #128	@ 0x80
 8002e84:	0449      	lsls	r1, r1, #17
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fd fd3b 	bl	8000904 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fd fd36 	bl	8000904 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ea6:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	049b      	lsls	r3, r3, #18
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x6d4>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4b21      	ldr	r3, [pc, #132]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b20      	ldr	r3, [pc, #128]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002eba:	4922      	ldr	r1, [pc, #136]	@ (8002f44 <HAL_RCC_OscConfig+0x784>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fd20 	bl	8000904 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fd fd1b 	bl	8000904 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e02a      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002edc:	4b17      	ldr	r3, [pc, #92]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	049b      	lsls	r3, r3, #18
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d1f0      	bne.n	8002eca <HAL_RCC_OscConfig+0x70a>
 8002ee8:	e022      	b.n	8002f30 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e01d      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	025b      	lsls	r3, r3, #9
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d10f      	bne.n	8002f2c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	23f0      	movs	r3, #240	@ 0xf0
 8002f10:	039b      	lsls	r3, r3, #14
 8002f12:	401a      	ands	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	23c0      	movs	r3, #192	@ 0xc0
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	401a      	ands	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b00a      	add	sp, #40	@ 0x28
 8002f38:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	ff02ffff 	.word	0xff02ffff
 8002f44:	feffffff 	.word	0xfeffffff

08002f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e128      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b96      	ldr	r3, [pc, #600]	@ (80031b8 <HAL_RCC_ClockConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d91e      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b93      	ldr	r3, [pc, #588]	@ (80031b8 <HAL_RCC_ClockConfig+0x270>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4393      	bics	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	4b90      	ldr	r3, [pc, #576]	@ (80031b8 <HAL_RCC_ClockConfig+0x270>)
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f7c:	f7fd fcc2 	bl	8000904 <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f84:	e009      	b.n	8002f9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f86:	f7fd fcbd 	bl	8000904 <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	4a8a      	ldr	r2, [pc, #552]	@ (80031bc <HAL_RCC_ClockConfig+0x274>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e109      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b87      	ldr	r3, [pc, #540]	@ (80031b8 <HAL_RCC_ClockConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2202      	movs	r2, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb2:	4b83      	ldr	r3, [pc, #524]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	22f0      	movs	r2, #240	@ 0xf0
 8002fb8:	4393      	bics	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b7f      	ldr	r3, [pc, #508]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x8a>
 8002fd0:	e089      	b.n	80030e6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fda:	4b79      	ldr	r3, [pc, #484]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	029b      	lsls	r3, r3, #10
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d120      	bne.n	8003028 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e0e1      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff2:	4b73      	ldr	r3, [pc, #460]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	049b      	lsls	r3, r3, #18
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d114      	bne.n	8003028 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0d5      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d106      	bne.n	8003018 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800300a:	4b6d      	ldr	r3, [pc, #436]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2204      	movs	r2, #4
 8003010:	4013      	ands	r3, r2
 8003012:	d109      	bne.n	8003028 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0ca      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003018:	4b69      	ldr	r3, [pc, #420]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4013      	ands	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0c2      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003028:	4b65      	ldr	r3, [pc, #404]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2203      	movs	r2, #3
 800302e:	4393      	bics	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4b62      	ldr	r3, [pc, #392]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 8003038:	430a      	orrs	r2, r1
 800303a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303c:	f7fd fc62 	bl	8000904 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d111      	bne.n	8003070 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800304c:	e009      	b.n	8003062 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f7fd fc59 	bl	8000904 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	4a58      	ldr	r2, [pc, #352]	@ (80031bc <HAL_RCC_ClockConfig+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0a5      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003062:	4b57      	ldr	r3, [pc, #348]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	220c      	movs	r2, #12
 8003068:	4013      	ands	r3, r2
 800306a:	2b08      	cmp	r3, #8
 800306c:	d1ef      	bne.n	800304e <HAL_RCC_ClockConfig+0x106>
 800306e:	e03a      	b.n	80030e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d111      	bne.n	800309c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003078:	e009      	b.n	800308e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307a:	f7fd fc43 	bl	8000904 <HAL_GetTick>
 800307e:	0002      	movs	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	4a4d      	ldr	r2, [pc, #308]	@ (80031bc <HAL_RCC_ClockConfig+0x274>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e08f      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308e:	4b4c      	ldr	r3, [pc, #304]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	220c      	movs	r2, #12
 8003094:	4013      	ands	r3, r2
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d1ef      	bne.n	800307a <HAL_RCC_ClockConfig+0x132>
 800309a:	e024      	b.n	80030e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d11b      	bne.n	80030dc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a4:	e009      	b.n	80030ba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a6:	f7fd fc2d 	bl	8000904 <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	4a42      	ldr	r2, [pc, #264]	@ (80031bc <HAL_RCC_ClockConfig+0x274>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e079      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ba:	4b41      	ldr	r3, [pc, #260]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	220c      	movs	r2, #12
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d1ef      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x15e>
 80030c6:	e00e      	b.n	80030e6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fd fc1c 	bl	8000904 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	4a3a      	ldr	r2, [pc, #232]	@ (80031bc <HAL_RCC_ClockConfig+0x274>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e068      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030dc:	4b38      	ldr	r3, [pc, #224]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	220c      	movs	r2, #12
 80030e2:	4013      	ands	r3, r2
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e6:	4b34      	ldr	r3, [pc, #208]	@ (80031b8 <HAL_RCC_ClockConfig+0x270>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2201      	movs	r2, #1
 80030ec:	4013      	ands	r3, r2
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d21e      	bcs.n	8003132 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f4:	4b30      	ldr	r3, [pc, #192]	@ (80031b8 <HAL_RCC_ClockConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4393      	bics	r3, r2
 80030fc:	0019      	movs	r1, r3
 80030fe:	4b2e      	ldr	r3, [pc, #184]	@ (80031b8 <HAL_RCC_ClockConfig+0x270>)
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003106:	f7fd fbfd 	bl	8000904 <HAL_GetTick>
 800310a:	0003      	movs	r3, r0
 800310c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	e009      	b.n	8003124 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7fd fbf8 	bl	8000904 <HAL_GetTick>
 8003114:	0002      	movs	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	4a28      	ldr	r2, [pc, #160]	@ (80031bc <HAL_RCC_ClockConfig+0x274>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e044      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003124:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_RCC_ClockConfig+0x270>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	4013      	ands	r3, r2
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d1ee      	bne.n	8003110 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2204      	movs	r2, #4
 8003138:	4013      	ands	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a20      	ldr	r2, [pc, #128]	@ (80031c4 <HAL_RCC_ClockConfig+0x27c>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	4b1d      	ldr	r3, [pc, #116]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2208      	movs	r2, #8
 8003156:	4013      	ands	r3, r2
 8003158:	d00a      	beq.n	8003170 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800315a:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4a1a      	ldr	r2, [pc, #104]	@ (80031c8 <HAL_RCC_ClockConfig+0x280>)
 8003160:	4013      	ands	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00da      	lsls	r2, r3, #3
 800316a:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 800316c:	430a      	orrs	r2, r1
 800316e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003170:	f000 f832 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 8003174:	0001      	movs	r1, r0
 8003176:	4b12      	ldr	r3, [pc, #72]	@ (80031c0 <HAL_RCC_ClockConfig+0x278>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	220f      	movs	r2, #15
 800317e:	4013      	ands	r3, r2
 8003180:	4a12      	ldr	r2, [pc, #72]	@ (80031cc <HAL_RCC_ClockConfig+0x284>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	000a      	movs	r2, r1
 8003186:	40da      	lsrs	r2, r3
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <HAL_RCC_ClockConfig+0x288>)
 800318a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <HAL_RCC_ClockConfig+0x28c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	250b      	movs	r5, #11
 8003192:	197c      	adds	r4, r7, r5
 8003194:	0018      	movs	r0, r3
 8003196:	f7fd fb6f 	bl	8000878 <HAL_InitTick>
 800319a:	0003      	movs	r3, r0
 800319c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800319e:	197b      	adds	r3, r7, r5
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80031a6:	197b      	adds	r3, r7, r5
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	e000      	b.n	80031ae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b004      	add	sp, #16
 80031b4:	bdb0      	pop	{r4, r5, r7, pc}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	40022000 	.word	0x40022000
 80031bc:	00001388 	.word	0x00001388
 80031c0:	40021000 	.word	0x40021000
 80031c4:	fffff8ff 	.word	0xfffff8ff
 80031c8:	ffffc7ff 	.word	0xffffc7ff
 80031cc:	08008c04 	.word	0x08008c04
 80031d0:	20000000 	.word	0x20000000
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b08e      	sub	sp, #56	@ 0x38
 80031dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80031de:	4b4c      	ldr	r3, [pc, #304]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x138>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e6:	230c      	movs	r3, #12
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d014      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x40>
 80031ee:	d900      	bls.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1a>
 80031f0:	e07b      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x112>
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x24>
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d00b      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fa:	e076      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031fc:	4b44      	ldr	r3, [pc, #272]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x138>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2210      	movs	r2, #16
 8003202:	4013      	ands	r3, r2
 8003204:	d002      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003206:	4b43      	ldr	r3, [pc, #268]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800320a:	e07c      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800320c:	4b42      	ldr	r3, [pc, #264]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x140>)
 800320e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003210:	e079      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003212:	4b42      	ldr	r3, [pc, #264]	@ (800331c <HAL_RCC_GetSysClockFreq+0x144>)
 8003214:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003216:	e076      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321a:	0c9a      	lsrs	r2, r3, #18
 800321c:	230f      	movs	r3, #15
 800321e:	401a      	ands	r2, r3
 8003220:	4b3f      	ldr	r3, [pc, #252]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x148>)
 8003222:	5c9b      	ldrb	r3, [r3, r2]
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003228:	0d9a      	lsrs	r2, r3, #22
 800322a:	2303      	movs	r3, #3
 800322c:	4013      	ands	r3, r2
 800322e:	3301      	adds	r3, #1
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003232:	4b37      	ldr	r3, [pc, #220]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x138>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	025b      	lsls	r3, r3, #9
 800323a:	4013      	ands	r3, r2
 800323c:	d01a      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	4a35      	ldr	r2, [pc, #212]	@ (800331c <HAL_RCC_GetSysClockFreq+0x144>)
 8003248:	2300      	movs	r3, #0
 800324a:	69b8      	ldr	r0, [r7, #24]
 800324c:	69f9      	ldr	r1, [r7, #28]
 800324e:	f7fd f811 	bl	8000274 <__aeabi_lmul>
 8003252:	0002      	movs	r2, r0
 8003254:	000b      	movs	r3, r1
 8003256:	0010      	movs	r0, r2
 8003258:	0019      	movs	r1, r3
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f7fc ffe5 	bl	8000234 <__aeabi_uldivmod>
 800326a:	0002      	movs	r2, r0
 800326c:	000b      	movs	r3, r1
 800326e:	0013      	movs	r3, r2
 8003270:	637b      	str	r3, [r7, #52]	@ 0x34
 8003272:	e037      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003274:	4b26      	ldr	r3, [pc, #152]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x138>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2210      	movs	r2, #16
 800327a:	4013      	ands	r3, r2
 800327c:	d01a      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4a23      	ldr	r2, [pc, #140]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003288:	2300      	movs	r3, #0
 800328a:	68b8      	ldr	r0, [r7, #8]
 800328c:	68f9      	ldr	r1, [r7, #12]
 800328e:	f7fc fff1 	bl	8000274 <__aeabi_lmul>
 8003292:	0002      	movs	r2, r0
 8003294:	000b      	movs	r3, r1
 8003296:	0010      	movs	r0, r2
 8003298:	0019      	movs	r1, r3
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f7fc ffc5 	bl	8000234 <__aeabi_uldivmod>
 80032aa:	0002      	movs	r2, r0
 80032ac:	000b      	movs	r3, r1
 80032ae:	0013      	movs	r3, r2
 80032b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b2:	e017      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	0018      	movs	r0, r3
 80032b8:	2300      	movs	r3, #0
 80032ba:	0019      	movs	r1, r3
 80032bc:	4a16      	ldr	r2, [pc, #88]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x140>)
 80032be:	2300      	movs	r3, #0
 80032c0:	f7fc ffd8 	bl	8000274 <__aeabi_lmul>
 80032c4:	0002      	movs	r2, r0
 80032c6:	000b      	movs	r3, r1
 80032c8:	0010      	movs	r0, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	001c      	movs	r4, r3
 80032d0:	2300      	movs	r3, #0
 80032d2:	001d      	movs	r5, r3
 80032d4:	0022      	movs	r2, r4
 80032d6:	002b      	movs	r3, r5
 80032d8:	f7fc ffac 	bl	8000234 <__aeabi_uldivmod>
 80032dc:	0002      	movs	r2, r0
 80032de:	000b      	movs	r3, r1
 80032e0:	0013      	movs	r3, r2
 80032e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80032e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80032e8:	e00d      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032ea:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x138>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0b5b      	lsrs	r3, r3, #13
 80032f0:	2207      	movs	r2, #7
 80032f2:	4013      	ands	r3, r2
 80032f4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	3301      	adds	r3, #1
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0212      	lsls	r2, r2, #8
 80032fe:	409a      	lsls	r2, r3
 8003300:	0013      	movs	r3, r2
 8003302:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003304:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b00e      	add	sp, #56	@ 0x38
 800330e:	bdb0      	pop	{r4, r5, r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	003d0900 	.word	0x003d0900
 8003318:	00f42400 	.word	0x00f42400
 800331c:	007a1200 	.word	0x007a1200
 8003320:	08008c14 	.word	0x08008c14

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800332c:	2317      	movs	r3, #23
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2220      	movs	r2, #32
 800333a:	4013      	ands	r3, r2
 800333c:	d106      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	2380      	movs	r3, #128	@ 0x80
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	4013      	ands	r3, r2
 8003348:	d100      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800334a:	e104      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334c:	4bb1      	ldr	r3, [pc, #708]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800334e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	055b      	lsls	r3, r3, #21
 8003354:	4013      	ands	r3, r2
 8003356:	d10a      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4bae      	ldr	r3, [pc, #696]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800335c:	4bad      	ldr	r3, [pc, #692]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335e:	2180      	movs	r1, #128	@ 0x80
 8003360:	0549      	lsls	r1, r1, #21
 8003362:	430a      	orrs	r2, r1
 8003364:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003366:	2317      	movs	r3, #23
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4baa      	ldr	r3, [pc, #680]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	2380      	movs	r3, #128	@ 0x80
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4013      	ands	r3, r2
 8003378:	d11a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337a:	4ba7      	ldr	r3, [pc, #668]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4ba6      	ldr	r3, [pc, #664]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003380:	2180      	movs	r1, #128	@ 0x80
 8003382:	0049      	lsls	r1, r1, #1
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003388:	f7fd fabc 	bl	8000904 <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fd fab7 	bl	8000904 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b64      	cmp	r3, #100	@ 0x64
 800339e:	d901      	bls.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e133      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b9c      	ldr	r3, [pc, #624]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033b0:	4b98      	ldr	r3, [pc, #608]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	23c0      	movs	r3, #192	@ 0xc0
 80033b6:	039b      	lsls	r3, r3, #14
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	23c0      	movs	r3, #192	@ 0xc0
 80033c2:	039b      	lsls	r3, r3, #14
 80033c4:	4013      	ands	r3, r2
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d107      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	23c0      	movs	r3, #192	@ 0xc0
 80033d2:	039b      	lsls	r3, r3, #14
 80033d4:	4013      	ands	r3, r2
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d013      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	23c0      	movs	r3, #192	@ 0xc0
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	401a      	ands	r2, r3
 80033e6:	23c0      	movs	r3, #192	@ 0xc0
 80033e8:	029b      	lsls	r3, r3, #10
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10a      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80033ee:	4b89      	ldr	r3, [pc, #548]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	029b      	lsls	r3, r3, #10
 80033f6:	401a      	ands	r2, r3
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d101      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e103      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003404:	4b83      	ldr	r3, [pc, #524]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003406:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003408:	23c0      	movs	r3, #192	@ 0xc0
 800340a:	029b      	lsls	r3, r3, #10
 800340c:	4013      	ands	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d049      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	23c0      	movs	r3, #192	@ 0xc0
 800341c:	029b      	lsls	r3, r3, #10
 800341e:	4013      	ands	r3, r2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	429a      	cmp	r2, r3
 8003424:	d004      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2220      	movs	r2, #32
 800342c:	4013      	ands	r3, r2
 800342e:	d10d      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	23c0      	movs	r3, #192	@ 0xc0
 8003436:	029b      	lsls	r3, r3, #10
 8003438:	4013      	ands	r3, r2
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d034      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4013      	ands	r3, r2
 800344a:	d02e      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800344c:	4b71      	ldr	r3, [pc, #452]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800344e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003450:	4a72      	ldr	r2, [pc, #456]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003452:	4013      	ands	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003456:	4b6f      	ldr	r3, [pc, #444]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800345a:	4b6e      	ldr	r3, [pc, #440]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800345c:	2180      	movs	r1, #128	@ 0x80
 800345e:	0309      	lsls	r1, r1, #12
 8003460:	430a      	orrs	r2, r1
 8003462:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003464:	4b6b      	ldr	r3, [pc, #428]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003466:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003468:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800346a:	496d      	ldr	r1, [pc, #436]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800346c:	400a      	ands	r2, r1
 800346e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003470:	4b68      	ldr	r3, [pc, #416]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	2380      	movs	r3, #128	@ 0x80
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4013      	ands	r3, r2
 800347e:	d014      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fd fa40 	bl	8000904 <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003488:	e009      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fd fa3b 	bl	8000904 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	4a63      	ldr	r2, [pc, #396]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0b6      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800349e:	4b5d      	ldr	r3, [pc, #372]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034a2:	2380      	movs	r3, #128	@ 0x80
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4013      	ands	r3, r2
 80034a8:	d0ef      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	2380      	movs	r3, #128	@ 0x80
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	4013      	ands	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	23c0      	movs	r3, #192	@ 0xc0
 80034bc:	029b      	lsls	r3, r3, #10
 80034be:	401a      	ands	r2, r3
 80034c0:	23c0      	movs	r3, #192	@ 0xc0
 80034c2:	029b      	lsls	r3, r3, #10
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80034c8:	4b52      	ldr	r3, [pc, #328]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a56      	ldr	r2, [pc, #344]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	0019      	movs	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	23c0      	movs	r3, #192	@ 0xc0
 80034d8:	039b      	lsls	r3, r3, #14
 80034da:	401a      	ands	r2, r3
 80034dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034de:	430a      	orrs	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	23c0      	movs	r3, #192	@ 0xc0
 80034ec:	029b      	lsls	r3, r3, #10
 80034ee:	401a      	ands	r2, r3
 80034f0:	4b48      	ldr	r3, [pc, #288]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034f2:	430a      	orrs	r2, r1
 80034f4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2220      	movs	r2, #32
 80034fc:	4013      	ands	r3, r2
 80034fe:	d01f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	23c0      	movs	r3, #192	@ 0xc0
 8003506:	029b      	lsls	r3, r3, #10
 8003508:	401a      	ands	r2, r3
 800350a:	23c0      	movs	r3, #192	@ 0xc0
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	429a      	cmp	r2, r3
 8003510:	d10c      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003512:	4b40      	ldr	r3, [pc, #256]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a44      	ldr	r2, [pc, #272]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	23c0      	movs	r3, #192	@ 0xc0
 8003522:	039b      	lsls	r3, r3, #14
 8003524:	401a      	ands	r2, r3
 8003526:	4b3b      	ldr	r3, [pc, #236]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800352e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	23c0      	movs	r3, #192	@ 0xc0
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	401a      	ands	r2, r3
 800353a:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800353c:	430a      	orrs	r2, r1
 800353e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003540:	2317      	movs	r3, #23
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b32      	ldr	r3, [pc, #200]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800354c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800354e:	4b31      	ldr	r3, [pc, #196]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003550:	4936      	ldr	r1, [pc, #216]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003552:	400a      	ands	r2, r1
 8003554:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	4013      	ands	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003560:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003564:	2203      	movs	r2, #3
 8003566:	4393      	bics	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	4b29      	ldr	r3, [pc, #164]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003570:	430a      	orrs	r2, r1
 8003572:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2202      	movs	r2, #2
 800357a:	4013      	ands	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800357e:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003582:	220c      	movs	r2, #12
 8003584:	4393      	bics	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800358e:	430a      	orrs	r2, r1
 8003590:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2204      	movs	r2, #4
 8003598:	4013      	ands	r3, r2
 800359a:	d009      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800359e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a0:	4a23      	ldr	r2, [pc, #140]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035ac:	430a      	orrs	r2, r1
 80035ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2208      	movs	r2, #8
 80035b6:	4013      	ands	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ba:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035be:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035ca:	430a      	orrs	r2, r1
 80035cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2240      	movs	r2, #64	@ 0x40
 80035d4:	4013      	ands	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	4a16      	ldr	r2, [pc, #88]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80035de:	4013      	ands	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1a      	ldr	r2, [r3, #32]
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035e8:	430a      	orrs	r2, r1
 80035ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2280      	movs	r2, #128	@ 0x80
 80035f2:	4013      	ands	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80035f6:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fa:	4a10      	ldr	r2, [pc, #64]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003606:	430a      	orrs	r2, r1
 8003608:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b006      	add	sp, #24
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
 800361c:	fffcffff 	.word	0xfffcffff
 8003620:	fff7ffff 	.word	0xfff7ffff
 8003624:	00001388 	.word	0x00001388
 8003628:	ffcfffff 	.word	0xffcfffff
 800362c:	efffffff 	.word	0xefffffff
 8003630:	fffff3ff 	.word	0xfffff3ff
 8003634:	ffffcfff 	.word	0xffffcfff
 8003638:	fbffffff 	.word	0xfbffffff
 800363c:	fff3ffff 	.word	0xfff3ffff

08003640 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2244      	movs	r2, #68	@ 0x44
 800364c:	2100      	movs	r1, #0
 800364e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <USB_EnableGlobalInt+0x28>)
 8003652:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	b299      	uxth	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2240      	movs	r2, #64	@ 0x40
 800365c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bd80      	pop	{r7, pc}
 8003668:	0000bf80 	.word	0x0000bf80

0800366c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003674:	4b09      	ldr	r3, [pc, #36]	@ (800369c <USB_DisableGlobalInt+0x30>)
 8003676:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2240      	movs	r2, #64	@ 0x40
 800367c:	5a9b      	ldrh	r3, [r3, r2]
 800367e:	b29b      	uxth	r3, r3
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	b292      	uxth	r2, r2
 8003684:	43d2      	mvns	r2, r2
 8003686:	b292      	uxth	r2, r2
 8003688:	4013      	ands	r3, r2
 800368a:	b299      	uxth	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2240      	movs	r2, #64	@ 0x40
 8003690:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}
 800369c:	0000bf80 	.word	0x0000bf80

080036a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036a0:	b084      	sub	sp, #16
 80036a2:	b590      	push	{r4, r7, lr}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	2004      	movs	r0, #4
 80036ac:	2410      	movs	r4, #16
 80036ae:	1900      	adds	r0, r0, r4
 80036b0:	2408      	movs	r4, #8
 80036b2:	46a4      	mov	ip, r4
 80036b4:	44bc      	add	ip, r7
 80036b6:	4460      	add	r0, ip
 80036b8:	6001      	str	r1, [r0, #0]
 80036ba:	6042      	str	r2, [r0, #4]
 80036bc:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2240      	movs	r2, #64	@ 0x40
 80036c2:	2101      	movs	r1, #1
 80036c4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2240      	movs	r2, #64	@ 0x40
 80036ca:	2100      	movs	r1, #0
 80036cc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2244      	movs	r2, #68	@ 0x44
 80036d2:	2100      	movs	r1, #0
 80036d4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2250      	movs	r2, #80	@ 0x50
 80036da:	2100      	movs	r1, #0
 80036dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b003      	add	sp, #12
 80036e6:	bc90      	pop	{r4, r7}
 80036e8:	bc08      	pop	{r3}
 80036ea:	b004      	add	sp, #16
 80036ec:	4718      	bx	r3
	...

080036f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b09c      	sub	sp, #112	@ 0x70
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80036fa:	236f      	movs	r3, #111	@ 0x6f
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	18d3      	adds	r3, r2, r3
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29a      	uxth	r2, r3
 8003710:	236c      	movs	r3, #108	@ 0x6c
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	49a3      	ldr	r1, [pc, #652]	@ (80039a4 <USB_ActivateEndpoint+0x2b4>)
 8003716:	400a      	ands	r2, r1
 8003718:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	78db      	ldrb	r3, [r3, #3]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d017      	beq.n	8003752 <USB_ActivateEndpoint+0x62>
 8003722:	dc28      	bgt.n	8003776 <USB_ActivateEndpoint+0x86>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d00e      	beq.n	8003746 <USB_ActivateEndpoint+0x56>
 8003728:	dc25      	bgt.n	8003776 <USB_ActivateEndpoint+0x86>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <USB_ActivateEndpoint+0x44>
 800372e:	2b01      	cmp	r3, #1
 8003730:	d018      	beq.n	8003764 <USB_ActivateEndpoint+0x74>
 8003732:	e020      	b.n	8003776 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003734:	226c      	movs	r2, #108	@ 0x6c
 8003736:	18bb      	adds	r3, r7, r2
 8003738:	18ba      	adds	r2, r7, r2
 800373a:	8812      	ldrh	r2, [r2, #0]
 800373c:	2180      	movs	r1, #128	@ 0x80
 800373e:	0089      	lsls	r1, r1, #2
 8003740:	430a      	orrs	r2, r1
 8003742:	801a      	strh	r2, [r3, #0]
      break;
 8003744:	e01c      	b.n	8003780 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003746:	226c      	movs	r2, #108	@ 0x6c
 8003748:	18bb      	adds	r3, r7, r2
 800374a:	18ba      	adds	r2, r7, r2
 800374c:	8812      	ldrh	r2, [r2, #0]
 800374e:	801a      	strh	r2, [r3, #0]
      break;
 8003750:	e016      	b.n	8003780 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003752:	226c      	movs	r2, #108	@ 0x6c
 8003754:	18bb      	adds	r3, r7, r2
 8003756:	18ba      	adds	r2, r7, r2
 8003758:	8812      	ldrh	r2, [r2, #0]
 800375a:	21c0      	movs	r1, #192	@ 0xc0
 800375c:	00c9      	lsls	r1, r1, #3
 800375e:	430a      	orrs	r2, r1
 8003760:	801a      	strh	r2, [r3, #0]
      break;
 8003762:	e00d      	b.n	8003780 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003764:	226c      	movs	r2, #108	@ 0x6c
 8003766:	18bb      	adds	r3, r7, r2
 8003768:	18ba      	adds	r2, r7, r2
 800376a:	8812      	ldrh	r2, [r2, #0]
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	00c9      	lsls	r1, r1, #3
 8003770:	430a      	orrs	r2, r1
 8003772:	801a      	strh	r2, [r3, #0]
      break;
 8003774:	e004      	b.n	8003780 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003776:	236f      	movs	r3, #111	@ 0x6f
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
      break;
 800377e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	18d3      	adds	r3, r2, r3
 800378a:	226c      	movs	r2, #108	@ 0x6c
 800378c:	18ba      	adds	r2, r7, r2
 800378e:	8812      	ldrh	r2, [r2, #0]
 8003790:	4985      	ldr	r1, [pc, #532]	@ (80039a8 <USB_ActivateEndpoint+0x2b8>)
 8003792:	430a      	orrs	r2, r1
 8003794:	b292      	uxth	r2, r2
 8003796:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	18d3      	adds	r3, r2, r3
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	4a80      	ldr	r2, [pc, #512]	@ (80039ac <USB_ActivateEndpoint+0x2bc>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	b21a      	sxth	r2, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	b21b      	sxth	r3, r3
 80037b4:	4313      	orrs	r3, r2
 80037b6:	b21a      	sxth	r2, r3
 80037b8:	2166      	movs	r1, #102	@ 0x66
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	801a      	strh	r2, [r3, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	18d3      	adds	r3, r2, r3
 80037c8:	187a      	adds	r2, r7, r1
 80037ca:	8812      	ldrh	r2, [r2, #0]
 80037cc:	4976      	ldr	r1, [pc, #472]	@ (80039a8 <USB_ActivateEndpoint+0x2b8>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	b292      	uxth	r2, r2
 80037d2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	7b1b      	ldrb	r3, [r3, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d000      	beq.n	80037de <USB_ActivateEndpoint+0xee>
 80037dc:	e178      	b.n	8003ad0 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d100      	bne.n	80037e8 <USB_ActivateEndpoint+0xf8>
 80037e6:	e07a      	b.n	80038de <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2250      	movs	r2, #80	@ 0x50
 80037f0:	5a9b      	ldrh	r3, [r3, r2]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	001a      	movs	r2, r3
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	00da      	lsls	r2, r3, #3
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	18d3      	adds	r3, r2, r3
 8003806:	2280      	movs	r2, #128	@ 0x80
 8003808:	00d2      	lsls	r2, r2, #3
 800380a:	4694      	mov	ip, r2
 800380c:	4463      	add	r3, ip
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	88db      	ldrh	r3, [r3, #6]
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	b29b      	uxth	r3, r3
 8003818:	18db      	adds	r3, r3, r3
 800381a:	b29a      	uxth	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	18d2      	adds	r2, r2, r3
 800382a:	2112      	movs	r1, #18
 800382c:	187b      	adds	r3, r7, r1
 800382e:	8812      	ldrh	r2, [r2, #0]
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	187b      	adds	r3, r7, r1
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	2240      	movs	r2, #64	@ 0x40
 8003838:	4013      	ands	r3, r2
 800383a:	d016      	beq.n	800386a <USB_ActivateEndpoint+0x17a>
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	18d3      	adds	r3, r2, r3
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29a      	uxth	r2, r3
 800384a:	2010      	movs	r0, #16
 800384c:	183b      	adds	r3, r7, r0
 800384e:	4957      	ldr	r1, [pc, #348]	@ (80039ac <USB_ActivateEndpoint+0x2bc>)
 8003850:	400a      	ands	r2, r1
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	18d3      	adds	r3, r2, r3
 800385e:	183a      	adds	r2, r7, r0
 8003860:	8812      	ldrh	r2, [r2, #0]
 8003862:	4953      	ldr	r1, [pc, #332]	@ (80039b0 <USB_ActivateEndpoint+0x2c0>)
 8003864:	430a      	orrs	r2, r1
 8003866:	b292      	uxth	r2, r2
 8003868:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	78db      	ldrb	r3, [r3, #3]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d01d      	beq.n	80038ae <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	18d3      	adds	r3, r2, r3
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29a      	uxth	r2, r3
 8003880:	200c      	movs	r0, #12
 8003882:	183b      	adds	r3, r7, r0
 8003884:	494b      	ldr	r1, [pc, #300]	@ (80039b4 <USB_ActivateEndpoint+0x2c4>)
 8003886:	400a      	ands	r2, r1
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	183b      	adds	r3, r7, r0
 800388c:	183a      	adds	r2, r7, r0
 800388e:	8812      	ldrh	r2, [r2, #0]
 8003890:	2120      	movs	r1, #32
 8003892:	404a      	eors	r2, r1
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	18d3      	adds	r3, r2, r3
 80038a0:	183a      	adds	r2, r7, r0
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	4940      	ldr	r1, [pc, #256]	@ (80039a8 <USB_ActivateEndpoint+0x2b8>)
 80038a6:	430a      	orrs	r2, r1
 80038a8:	b292      	uxth	r2, r2
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	e2b4      	b.n	8003e18 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	18d3      	adds	r3, r2, r3
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	200e      	movs	r0, #14
 80038be:	183b      	adds	r3, r7, r0
 80038c0:	493c      	ldr	r1, [pc, #240]	@ (80039b4 <USB_ActivateEndpoint+0x2c4>)
 80038c2:	400a      	ands	r2, r1
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	18d3      	adds	r3, r2, r3
 80038d0:	183a      	adds	r2, r7, r0
 80038d2:	8812      	ldrh	r2, [r2, #0]
 80038d4:	4934      	ldr	r1, [pc, #208]	@ (80039a8 <USB_ActivateEndpoint+0x2b8>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	b292      	uxth	r2, r2
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	e29c      	b.n	8003e18 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2250      	movs	r2, #80	@ 0x50
 80038e6:	5a9b      	ldrh	r3, [r3, r2]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	001a      	movs	r2, r3
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	189b      	adds	r3, r3, r2
 80038f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	00da      	lsls	r2, r3, #3
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	18d3      	adds	r3, r2, r3
 80038fc:	4a2e      	ldr	r2, [pc, #184]	@ (80039b8 <USB_ActivateEndpoint+0x2c8>)
 80038fe:	4694      	mov	ip, r2
 8003900:	4463      	add	r3, ip
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	88db      	ldrh	r3, [r3, #6]
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	b29b      	uxth	r3, r3
 800390c:	18db      	adds	r3, r3, r3
 800390e:	b29a      	uxth	r2, r3
 8003910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003912:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2250      	movs	r2, #80	@ 0x50
 800391c:	5a9b      	ldrh	r3, [r3, r2]
 800391e:	b29b      	uxth	r3, r3
 8003920:	001a      	movs	r2, r3
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	189b      	adds	r3, r3, r2
 8003926:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	00da      	lsls	r2, r3, #3
 800392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003930:	18d3      	adds	r3, r2, r3
 8003932:	4a22      	ldr	r2, [pc, #136]	@ (80039bc <USB_ActivateEndpoint+0x2cc>)
 8003934:	4694      	mov	ip, r2
 8003936:	4463      	add	r3, ip
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	059b      	lsls	r3, r3, #22
 8003942:	0d9b      	lsrs	r3, r3, #22
 8003944:	b29a      	uxth	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003950:	d91a      	bls.n	8003988 <USB_ActivateEndpoint+0x298>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	221f      	movs	r2, #31
 8003960:	4013      	ands	r3, r2
 8003962:	d102      	bne.n	800396a <USB_ActivateEndpoint+0x27a>
 8003964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003966:	3b01      	subs	r3, #1
 8003968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b29a      	uxth	r2, r3
 8003970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003972:	b29b      	uxth	r3, r3
 8003974:	029b      	lsls	r3, r3, #10
 8003976:	b29b      	uxth	r3, r3
 8003978:	4313      	orrs	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	4a10      	ldr	r2, [pc, #64]	@ (80039c0 <USB_ActivateEndpoint+0x2d0>)
 800397e:	4313      	orrs	r3, r2
 8003980:	b29a      	uxth	r2, r3
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	e034      	b.n	80039f2 <USB_ActivateEndpoint+0x302>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d119      	bne.n	80039c4 <USB_ActivateEndpoint+0x2d4>
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <USB_ActivateEndpoint+0x2d0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	b29a      	uxth	r2, r3
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	801a      	strh	r2, [r3, #0]
 80039a0:	e027      	b.n	80039f2 <USB_ActivateEndpoint+0x302>
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	ffff898f 	.word	0xffff898f
 80039a8:	ffff8080 	.word	0xffff8080
 80039ac:	ffff8f8f 	.word	0xffff8f8f
 80039b0:	ffff80c0 	.word	0xffff80c0
 80039b4:	ffff8fbf 	.word	0xffff8fbf
 80039b8:	00000404 	.word	0x00000404
 80039bc:	00000406 	.word	0x00000406
 80039c0:	ffff8000 	.word	0xffff8000
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2201      	movs	r2, #1
 80039d2:	4013      	ands	r3, r2
 80039d4:	d002      	beq.n	80039dc <USB_ActivateEndpoint+0x2ec>
 80039d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039d8:	3301      	adds	r3, #1
 80039da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	029b      	lsls	r3, r3, #10
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4313      	orrs	r3, r2
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	18d2      	adds	r2, r2, r3
 80039fc:	2122      	movs	r1, #34	@ 0x22
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	8812      	ldrh	r2, [r2, #0]
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	@ 0x80
 8003a0a:	01db      	lsls	r3, r3, #7
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d016      	beq.n	8003a3e <USB_ActivateEndpoint+0x34e>
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	18d3      	adds	r3, r2, r3
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	2020      	movs	r0, #32
 8003a20:	183b      	adds	r3, r7, r0
 8003a22:	49dd      	ldr	r1, [pc, #884]	@ (8003d98 <USB_ActivateEndpoint+0x6a8>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	18d3      	adds	r3, r2, r3
 8003a32:	183a      	adds	r2, r7, r0
 8003a34:	8812      	ldrh	r2, [r2, #0]
 8003a36:	49d9      	ldr	r1, [pc, #868]	@ (8003d9c <USB_ActivateEndpoint+0x6ac>)
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	b292      	uxth	r2, r2
 8003a3c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d125      	bne.n	8003a92 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	18d3      	adds	r3, r2, r3
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	201c      	movs	r0, #28
 8003a56:	183b      	adds	r3, r7, r0
 8003a58:	49d1      	ldr	r1, [pc, #836]	@ (8003da0 <USB_ActivateEndpoint+0x6b0>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	183b      	adds	r3, r7, r0
 8003a60:	183a      	adds	r2, r7, r0
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	2180      	movs	r1, #128	@ 0x80
 8003a66:	0149      	lsls	r1, r1, #5
 8003a68:	404a      	eors	r2, r1
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	183b      	adds	r3, r7, r0
 8003a6e:	183a      	adds	r2, r7, r0
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	2180      	movs	r1, #128	@ 0x80
 8003a74:	0189      	lsls	r1, r1, #6
 8003a76:	404a      	eors	r2, r1
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	18d3      	adds	r3, r2, r3
 8003a84:	183a      	adds	r2, r7, r0
 8003a86:	8812      	ldrh	r2, [r2, #0]
 8003a88:	49c6      	ldr	r1, [pc, #792]	@ (8003da4 <USB_ActivateEndpoint+0x6b4>)
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	e1c2      	b.n	8003e18 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	18d3      	adds	r3, r2, r3
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	201e      	movs	r0, #30
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	49be      	ldr	r1, [pc, #760]	@ (8003da0 <USB_ActivateEndpoint+0x6b0>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	183b      	adds	r3, r7, r0
 8003aac:	183a      	adds	r2, r7, r0
 8003aae:	8812      	ldrh	r2, [r2, #0]
 8003ab0:	2180      	movs	r1, #128	@ 0x80
 8003ab2:	0189      	lsls	r1, r1, #6
 8003ab4:	404a      	eors	r2, r1
 8003ab6:	801a      	strh	r2, [r3, #0]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	18d3      	adds	r3, r2, r3
 8003ac2:	183a      	adds	r2, r7, r0
 8003ac4:	8812      	ldrh	r2, [r2, #0]
 8003ac6:	49b7      	ldr	r1, [pc, #732]	@ (8003da4 <USB_ActivateEndpoint+0x6b4>)
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	b292      	uxth	r2, r2
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	e1a3      	b.n	8003e18 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	78db      	ldrb	r3, [r3, #3]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d117      	bne.n	8003b08 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	18d3      	adds	r3, r2, r3
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	2062      	movs	r0, #98	@ 0x62
 8003ae8:	183b      	adds	r3, r7, r0
 8003aea:	49ab      	ldr	r1, [pc, #684]	@ (8003d98 <USB_ActivateEndpoint+0x6a8>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	801a      	strh	r2, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	183a      	adds	r2, r7, r0
 8003afc:	8812      	ldrh	r2, [r2, #0]
 8003afe:	49aa      	ldr	r1, [pc, #680]	@ (8003da8 <USB_ActivateEndpoint+0x6b8>)
 8003b00:	430a      	orrs	r2, r1
 8003b02:	b292      	uxth	r2, r2
 8003b04:	801a      	strh	r2, [r3, #0]
 8003b06:	e016      	b.n	8003b36 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	18d3      	adds	r3, r2, r3
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	2064      	movs	r0, #100	@ 0x64
 8003b18:	183b      	adds	r3, r7, r0
 8003b1a:	49a4      	ldr	r1, [pc, #656]	@ (8003dac <USB_ActivateEndpoint+0x6bc>)
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	18d3      	adds	r3, r2, r3
 8003b2a:	183a      	adds	r2, r7, r0
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	499d      	ldr	r1, [pc, #628]	@ (8003da4 <USB_ActivateEndpoint+0x6b4>)
 8003b30:	430a      	orrs	r2, r1
 8003b32:	b292      	uxth	r2, r2
 8003b34:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2250      	movs	r2, #80	@ 0x50
 8003b3e:	5a9b      	ldrh	r3, [r3, r2]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	001a      	movs	r2, r3
 8003b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	00da      	lsls	r2, r3, #3
 8003b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b52:	18d3      	adds	r3, r2, r3
 8003b54:	2280      	movs	r2, #128	@ 0x80
 8003b56:	00d2      	lsls	r2, r2, #3
 8003b58:	4694      	mov	ip, r2
 8003b5a:	4463      	add	r3, ip
 8003b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	891b      	ldrh	r3, [r3, #8]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	18db      	adds	r3, r3, r3
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2250      	movs	r2, #80	@ 0x50
 8003b76:	5a9b      	ldrh	r3, [r3, r2]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	00da      	lsls	r2, r3, #3
 8003b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	4a88      	ldr	r2, [pc, #544]	@ (8003db0 <USB_ActivateEndpoint+0x6c0>)
 8003b8e:	4694      	mov	ip, r2
 8003b90:	4463      	add	r3, ip
 8003b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	895b      	ldrh	r3, [r3, #10]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	18db      	adds	r3, r3, r3
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ba2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d000      	beq.n	8003bae <USB_ActivateEndpoint+0x4be>
 8003bac:	e087      	b.n	8003cbe <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	18d2      	adds	r2, r2, r3
 8003bb8:	2140      	movs	r1, #64	@ 0x40
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	801a      	strh	r2, [r3, #0]
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	881a      	ldrh	r2, [r3, #0]
 8003bc4:	2380      	movs	r3, #128	@ 0x80
 8003bc6:	01db      	lsls	r3, r3, #7
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d016      	beq.n	8003bfa <USB_ActivateEndpoint+0x50a>
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	18d3      	adds	r3, r2, r3
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	203e      	movs	r0, #62	@ 0x3e
 8003bdc:	183b      	adds	r3, r7, r0
 8003bde:	496e      	ldr	r1, [pc, #440]	@ (8003d98 <USB_ActivateEndpoint+0x6a8>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	18d3      	adds	r3, r2, r3
 8003bee:	183a      	adds	r2, r7, r0
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	496a      	ldr	r1, [pc, #424]	@ (8003d9c <USB_ActivateEndpoint+0x6ac>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	18d2      	adds	r2, r2, r3
 8003c04:	213c      	movs	r1, #60	@ 0x3c
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	8812      	ldrh	r2, [r2, #0]
 8003c0a:	801a      	strh	r2, [r3, #0]
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	2240      	movs	r2, #64	@ 0x40
 8003c12:	4013      	ands	r3, r2
 8003c14:	d016      	beq.n	8003c44 <USB_ActivateEndpoint+0x554>
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	18d3      	adds	r3, r2, r3
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	203a      	movs	r0, #58	@ 0x3a
 8003c26:	183b      	adds	r3, r7, r0
 8003c28:	495b      	ldr	r1, [pc, #364]	@ (8003d98 <USB_ActivateEndpoint+0x6a8>)
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	18d3      	adds	r3, r2, r3
 8003c38:	183a      	adds	r2, r7, r0
 8003c3a:	8812      	ldrh	r2, [r2, #0]
 8003c3c:	495d      	ldr	r1, [pc, #372]	@ (8003db4 <USB_ActivateEndpoint+0x6c4>)
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	b292      	uxth	r2, r2
 8003c42:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	18d3      	adds	r3, r2, r3
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	2038      	movs	r0, #56	@ 0x38
 8003c54:	183b      	adds	r3, r7, r0
 8003c56:	4952      	ldr	r1, [pc, #328]	@ (8003da0 <USB_ActivateEndpoint+0x6b0>)
 8003c58:	400a      	ands	r2, r1
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	183b      	adds	r3, r7, r0
 8003c5e:	183a      	adds	r2, r7, r0
 8003c60:	8812      	ldrh	r2, [r2, #0]
 8003c62:	2180      	movs	r1, #128	@ 0x80
 8003c64:	0149      	lsls	r1, r1, #5
 8003c66:	404a      	eors	r2, r1
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	183b      	adds	r3, r7, r0
 8003c6c:	183a      	adds	r2, r7, r0
 8003c6e:	8812      	ldrh	r2, [r2, #0]
 8003c70:	2180      	movs	r1, #128	@ 0x80
 8003c72:	0189      	lsls	r1, r1, #6
 8003c74:	404a      	eors	r2, r1
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	18d3      	adds	r3, r2, r3
 8003c82:	183a      	adds	r2, r7, r0
 8003c84:	8812      	ldrh	r2, [r2, #0]
 8003c86:	4947      	ldr	r1, [pc, #284]	@ (8003da4 <USB_ActivateEndpoint+0x6b4>)
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	18d3      	adds	r3, r2, r3
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	2036      	movs	r0, #54	@ 0x36
 8003c9e:	183b      	adds	r3, r7, r0
 8003ca0:	4945      	ldr	r1, [pc, #276]	@ (8003db8 <USB_ActivateEndpoint+0x6c8>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	18d3      	adds	r3, r2, r3
 8003cb0:	183a      	adds	r2, r7, r0
 8003cb2:	8812      	ldrh	r2, [r2, #0]
 8003cb4:	493b      	ldr	r1, [pc, #236]	@ (8003da4 <USB_ActivateEndpoint+0x6b4>)
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	e0ac      	b.n	8003e18 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	18d2      	adds	r2, r2, r3
 8003cc8:	214e      	movs	r1, #78	@ 0x4e
 8003cca:	187b      	adds	r3, r7, r1
 8003ccc:	8812      	ldrh	r2, [r2, #0]
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	881a      	ldrh	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	01db      	lsls	r3, r3, #7
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d016      	beq.n	8003d0a <USB_ActivateEndpoint+0x61a>
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	18d3      	adds	r3, r2, r3
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	204c      	movs	r0, #76	@ 0x4c
 8003cec:	183b      	adds	r3, r7, r0
 8003cee:	492a      	ldr	r1, [pc, #168]	@ (8003d98 <USB_ActivateEndpoint+0x6a8>)
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	18d3      	adds	r3, r2, r3
 8003cfe:	183a      	adds	r2, r7, r0
 8003d00:	8812      	ldrh	r2, [r2, #0]
 8003d02:	4926      	ldr	r1, [pc, #152]	@ (8003d9c <USB_ActivateEndpoint+0x6ac>)
 8003d04:	430a      	orrs	r2, r1
 8003d06:	b292      	uxth	r2, r2
 8003d08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	18d2      	adds	r2, r2, r3
 8003d14:	214a      	movs	r1, #74	@ 0x4a
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	8812      	ldrh	r2, [r2, #0]
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	2240      	movs	r2, #64	@ 0x40
 8003d22:	4013      	ands	r3, r2
 8003d24:	d016      	beq.n	8003d54 <USB_ActivateEndpoint+0x664>
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	18d3      	adds	r3, r2, r3
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	2048      	movs	r0, #72	@ 0x48
 8003d36:	183b      	adds	r3, r7, r0
 8003d38:	4917      	ldr	r1, [pc, #92]	@ (8003d98 <USB_ActivateEndpoint+0x6a8>)
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	18d3      	adds	r3, r2, r3
 8003d48:	183a      	adds	r2, r7, r0
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	4919      	ldr	r1, [pc, #100]	@ (8003db4 <USB_ActivateEndpoint+0x6c4>)
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	b292      	uxth	r2, r2
 8003d52:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	78db      	ldrb	r3, [r3, #3]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d02f      	beq.n	8003dbc <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	18d3      	adds	r3, r2, r3
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	2044      	movs	r0, #68	@ 0x44
 8003d6c:	183b      	adds	r3, r7, r0
 8003d6e:	4912      	ldr	r1, [pc, #72]	@ (8003db8 <USB_ActivateEndpoint+0x6c8>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	183b      	adds	r3, r7, r0
 8003d76:	183a      	adds	r2, r7, r0
 8003d78:	8812      	ldrh	r2, [r2, #0]
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	404a      	eors	r2, r1
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	183a      	adds	r2, r7, r0
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	4905      	ldr	r1, [pc, #20]	@ (8003da4 <USB_ActivateEndpoint+0x6b4>)
 8003d90:	430a      	orrs	r2, r1
 8003d92:	b292      	uxth	r2, r2
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	e028      	b.n	8003dea <USB_ActivateEndpoint+0x6fa>
 8003d98:	ffff8f8f 	.word	0xffff8f8f
 8003d9c:	ffffc080 	.word	0xffffc080
 8003da0:	ffffbf8f 	.word	0xffffbf8f
 8003da4:	ffff8080 	.word	0xffff8080
 8003da8:	ffff8180 	.word	0xffff8180
 8003dac:	ffff8e8f 	.word	0xffff8e8f
 8003db0:	00000404 	.word	0x00000404
 8003db4:	ffff80c0 	.word	0xffff80c0
 8003db8:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	2046      	movs	r0, #70	@ 0x46
 8003dcc:	183b      	adds	r3, r7, r0
 8003dce:	4916      	ldr	r1, [pc, #88]	@ (8003e28 <USB_ActivateEndpoint+0x738>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	18d3      	adds	r3, r2, r3
 8003dde:	183a      	adds	r2, r7, r0
 8003de0:	8812      	ldrh	r2, [r2, #0]
 8003de2:	4912      	ldr	r1, [pc, #72]	@ (8003e2c <USB_ActivateEndpoint+0x73c>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	b292      	uxth	r2, r2
 8003de8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	18d3      	adds	r3, r2, r3
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	2042      	movs	r0, #66	@ 0x42
 8003dfa:	183b      	adds	r3, r7, r0
 8003dfc:	490c      	ldr	r1, [pc, #48]	@ (8003e30 <USB_ActivateEndpoint+0x740>)
 8003dfe:	400a      	ands	r2, r1
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	18d3      	adds	r3, r2, r3
 8003e0c:	183a      	adds	r2, r7, r0
 8003e0e:	8812      	ldrh	r2, [r2, #0]
 8003e10:	4906      	ldr	r1, [pc, #24]	@ (8003e2c <USB_ActivateEndpoint+0x73c>)
 8003e12:	430a      	orrs	r2, r1
 8003e14:	b292      	uxth	r2, r2
 8003e16:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003e18:	236f      	movs	r3, #111	@ 0x6f
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	781b      	ldrb	r3, [r3, #0]
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b01c      	add	sp, #112	@ 0x70
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	ffff8fbf 	.word	0xffff8fbf
 8003e2c:	ffff8080 	.word	0xffff8080
 8003e30:	ffffbf8f 	.word	0xffffbf8f

08003e34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08c      	sub	sp, #48	@ 0x30
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	7b1b      	ldrb	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d000      	beq.n	8003e48 <USB_DeactivateEndpoint+0x14>
 8003e46:	e07e      	b.n	8003f46 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d03c      	beq.n	8003eca <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	18d2      	adds	r2, r2, r3
 8003e5a:	210c      	movs	r1, #12
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	8812      	ldrh	r2, [r2, #0]
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	2240      	movs	r2, #64	@ 0x40
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d016      	beq.n	8003e9a <USB_DeactivateEndpoint+0x66>
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	18d3      	adds	r3, r2, r3
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	200a      	movs	r0, #10
 8003e7c:	183b      	adds	r3, r7, r0
 8003e7e:	49c7      	ldr	r1, [pc, #796]	@ (800419c <USB_DeactivateEndpoint+0x368>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	18d3      	adds	r3, r2, r3
 8003e8e:	183a      	adds	r2, r7, r0
 8003e90:	8812      	ldrh	r2, [r2, #0]
 8003e92:	49c3      	ldr	r1, [pc, #780]	@ (80041a0 <USB_DeactivateEndpoint+0x36c>)
 8003e94:	430a      	orrs	r2, r1
 8003e96:	b292      	uxth	r2, r2
 8003e98:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	2008      	movs	r0, #8
 8003eaa:	183b      	adds	r3, r7, r0
 8003eac:	49bd      	ldr	r1, [pc, #756]	@ (80041a4 <USB_DeactivateEndpoint+0x370>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	18d3      	adds	r3, r2, r3
 8003ebc:	183a      	adds	r2, r7, r0
 8003ebe:	8812      	ldrh	r2, [r2, #0]
 8003ec0:	49b9      	ldr	r1, [pc, #740]	@ (80041a8 <USB_DeactivateEndpoint+0x374>)
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	b292      	uxth	r2, r2
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	e163      	b.n	8004192 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	18d2      	adds	r2, r2, r3
 8003ed4:	2112      	movs	r1, #18
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	881a      	ldrh	r2, [r3, #0]
 8003ee0:	2380      	movs	r3, #128	@ 0x80
 8003ee2:	01db      	lsls	r3, r3, #7
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d016      	beq.n	8003f16 <USB_DeactivateEndpoint+0xe2>
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	2010      	movs	r0, #16
 8003ef8:	183b      	adds	r3, r7, r0
 8003efa:	49a8      	ldr	r1, [pc, #672]	@ (800419c <USB_DeactivateEndpoint+0x368>)
 8003efc:	400a      	ands	r2, r1
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	18d3      	adds	r3, r2, r3
 8003f0a:	183a      	adds	r2, r7, r0
 8003f0c:	8812      	ldrh	r2, [r2, #0]
 8003f0e:	49a7      	ldr	r1, [pc, #668]	@ (80041ac <USB_DeactivateEndpoint+0x378>)
 8003f10:	430a      	orrs	r2, r1
 8003f12:	b292      	uxth	r2, r2
 8003f14:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	18d3      	adds	r3, r2, r3
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	200e      	movs	r0, #14
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	49a1      	ldr	r1, [pc, #644]	@ (80041b0 <USB_DeactivateEndpoint+0x37c>)
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	18d3      	adds	r3, r2, r3
 8003f38:	183a      	adds	r2, r7, r0
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	499a      	ldr	r1, [pc, #616]	@ (80041a8 <USB_DeactivateEndpoint+0x374>)
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	b292      	uxth	r2, r2
 8003f42:	801a      	strh	r2, [r3, #0]
 8003f44:	e125      	b.n	8004192 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	785b      	ldrb	r3, [r3, #1]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d000      	beq.n	8003f50 <USB_DeactivateEndpoint+0x11c>
 8003f4e:	e090      	b.n	8004072 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	18d2      	adds	r2, r2, r3
 8003f5a:	2120      	movs	r1, #32
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	801a      	strh	r2, [r3, #0]
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	01db      	lsls	r3, r3, #7
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d016      	beq.n	8003f9c <USB_DeactivateEndpoint+0x168>
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	18d3      	adds	r3, r2, r3
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	201e      	movs	r0, #30
 8003f7e:	183b      	adds	r3, r7, r0
 8003f80:	4986      	ldr	r1, [pc, #536]	@ (800419c <USB_DeactivateEndpoint+0x368>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	801a      	strh	r2, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	18d3      	adds	r3, r2, r3
 8003f90:	183a      	adds	r2, r7, r0
 8003f92:	8812      	ldrh	r2, [r2, #0]
 8003f94:	4985      	ldr	r1, [pc, #532]	@ (80041ac <USB_DeactivateEndpoint+0x378>)
 8003f96:	430a      	orrs	r2, r1
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	18d2      	adds	r2, r2, r3
 8003fa6:	211c      	movs	r1, #28
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	8812      	ldrh	r2, [r2, #0]
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	2240      	movs	r2, #64	@ 0x40
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d016      	beq.n	8003fe6 <USB_DeactivateEndpoint+0x1b2>
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	18d3      	adds	r3, r2, r3
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	201a      	movs	r0, #26
 8003fc8:	183b      	adds	r3, r7, r0
 8003fca:	4974      	ldr	r1, [pc, #464]	@ (800419c <USB_DeactivateEndpoint+0x368>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	801a      	strh	r2, [r3, #0]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	18d3      	adds	r3, r2, r3
 8003fda:	183a      	adds	r2, r7, r0
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	4970      	ldr	r1, [pc, #448]	@ (80041a0 <USB_DeactivateEndpoint+0x36c>)
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	18d3      	adds	r3, r2, r3
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	2018      	movs	r0, #24
 8003ff6:	183b      	adds	r3, r7, r0
 8003ff8:	4968      	ldr	r1, [pc, #416]	@ (800419c <USB_DeactivateEndpoint+0x368>)
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	801a      	strh	r2, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	18d3      	adds	r3, r2, r3
 8004008:	183a      	adds	r2, r7, r0
 800400a:	8812      	ldrh	r2, [r2, #0]
 800400c:	4964      	ldr	r1, [pc, #400]	@ (80041a0 <USB_DeactivateEndpoint+0x36c>)
 800400e:	430a      	orrs	r2, r1
 8004010:	b292      	uxth	r2, r2
 8004012:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	18d3      	adds	r3, r2, r3
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29a      	uxth	r2, r3
 8004022:	2016      	movs	r0, #22
 8004024:	183b      	adds	r3, r7, r0
 8004026:	4962      	ldr	r1, [pc, #392]	@ (80041b0 <USB_DeactivateEndpoint+0x37c>)
 8004028:	400a      	ands	r2, r1
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	18d3      	adds	r3, r2, r3
 8004036:	183a      	adds	r2, r7, r0
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	495b      	ldr	r1, [pc, #364]	@ (80041a8 <USB_DeactivateEndpoint+0x374>)
 800403c:	430a      	orrs	r2, r1
 800403e:	b292      	uxth	r2, r2
 8004040:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	18d3      	adds	r3, r2, r3
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29a      	uxth	r2, r3
 8004050:	2014      	movs	r0, #20
 8004052:	183b      	adds	r3, r7, r0
 8004054:	4953      	ldr	r1, [pc, #332]	@ (80041a4 <USB_DeactivateEndpoint+0x370>)
 8004056:	400a      	ands	r2, r1
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	18d3      	adds	r3, r2, r3
 8004064:	183a      	adds	r2, r7, r0
 8004066:	8812      	ldrh	r2, [r2, #0]
 8004068:	494f      	ldr	r1, [pc, #316]	@ (80041a8 <USB_DeactivateEndpoint+0x374>)
 800406a:	430a      	orrs	r2, r1
 800406c:	b292      	uxth	r2, r2
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	e08f      	b.n	8004192 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	18d2      	adds	r2, r2, r3
 800407c:	212e      	movs	r1, #46	@ 0x2e
 800407e:	187b      	adds	r3, r7, r1
 8004080:	8812      	ldrh	r2, [r2, #0]
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	187b      	adds	r3, r7, r1
 8004086:	881a      	ldrh	r2, [r3, #0]
 8004088:	2380      	movs	r3, #128	@ 0x80
 800408a:	01db      	lsls	r3, r3, #7
 800408c:	4013      	ands	r3, r2
 800408e:	d016      	beq.n	80040be <USB_DeactivateEndpoint+0x28a>
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	18d3      	adds	r3, r2, r3
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29a      	uxth	r2, r3
 800409e:	202c      	movs	r0, #44	@ 0x2c
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	493e      	ldr	r1, [pc, #248]	@ (800419c <USB_DeactivateEndpoint+0x368>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	18d3      	adds	r3, r2, r3
 80040b2:	183a      	adds	r2, r7, r0
 80040b4:	8812      	ldrh	r2, [r2, #0]
 80040b6:	493d      	ldr	r1, [pc, #244]	@ (80041ac <USB_DeactivateEndpoint+0x378>)
 80040b8:	430a      	orrs	r2, r1
 80040ba:	b292      	uxth	r2, r2
 80040bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	18d2      	adds	r2, r2, r3
 80040c8:	212a      	movs	r1, #42	@ 0x2a
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	801a      	strh	r2, [r3, #0]
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	2240      	movs	r2, #64	@ 0x40
 80040d6:	4013      	ands	r3, r2
 80040d8:	d016      	beq.n	8004108 <USB_DeactivateEndpoint+0x2d4>
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	18d3      	adds	r3, r2, r3
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	2028      	movs	r0, #40	@ 0x28
 80040ea:	183b      	adds	r3, r7, r0
 80040ec:	492b      	ldr	r1, [pc, #172]	@ (800419c <USB_DeactivateEndpoint+0x368>)
 80040ee:	400a      	ands	r2, r1
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	18d3      	adds	r3, r2, r3
 80040fc:	183a      	adds	r2, r7, r0
 80040fe:	8812      	ldrh	r2, [r2, #0]
 8004100:	4927      	ldr	r1, [pc, #156]	@ (80041a0 <USB_DeactivateEndpoint+0x36c>)
 8004102:	430a      	orrs	r2, r1
 8004104:	b292      	uxth	r2, r2
 8004106:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	18d3      	adds	r3, r2, r3
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29a      	uxth	r2, r3
 8004116:	2026      	movs	r0, #38	@ 0x26
 8004118:	183b      	adds	r3, r7, r0
 800411a:	4920      	ldr	r1, [pc, #128]	@ (800419c <USB_DeactivateEndpoint+0x368>)
 800411c:	400a      	ands	r2, r1
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	18d3      	adds	r3, r2, r3
 800412a:	183a      	adds	r2, r7, r0
 800412c:	8812      	ldrh	r2, [r2, #0]
 800412e:	491f      	ldr	r1, [pc, #124]	@ (80041ac <USB_DeactivateEndpoint+0x378>)
 8004130:	430a      	orrs	r2, r1
 8004132:	b292      	uxth	r2, r2
 8004134:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	18d3      	adds	r3, r2, r3
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29a      	uxth	r2, r3
 8004144:	2024      	movs	r0, #36	@ 0x24
 8004146:	183b      	adds	r3, r7, r0
 8004148:	4916      	ldr	r1, [pc, #88]	@ (80041a4 <USB_DeactivateEndpoint+0x370>)
 800414a:	400a      	ands	r2, r1
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	18d3      	adds	r3, r2, r3
 8004158:	183a      	adds	r2, r7, r0
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	4912      	ldr	r1, [pc, #72]	@ (80041a8 <USB_DeactivateEndpoint+0x374>)
 800415e:	430a      	orrs	r2, r1
 8004160:	b292      	uxth	r2, r2
 8004162:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	18d3      	adds	r3, r2, r3
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29a      	uxth	r2, r3
 8004172:	2022      	movs	r0, #34	@ 0x22
 8004174:	183b      	adds	r3, r7, r0
 8004176:	490e      	ldr	r1, [pc, #56]	@ (80041b0 <USB_DeactivateEndpoint+0x37c>)
 8004178:	400a      	ands	r2, r1
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	18d3      	adds	r3, r2, r3
 8004186:	183a      	adds	r2, r7, r0
 8004188:	8812      	ldrh	r2, [r2, #0]
 800418a:	4907      	ldr	r1, [pc, #28]	@ (80041a8 <USB_DeactivateEndpoint+0x374>)
 800418c:	430a      	orrs	r2, r1
 800418e:	b292      	uxth	r2, r2
 8004190:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	b00c      	add	sp, #48	@ 0x30
 800419a:	bd80      	pop	{r7, pc}
 800419c:	ffff8f8f 	.word	0xffff8f8f
 80041a0:	ffff80c0 	.word	0xffff80c0
 80041a4:	ffff8fbf 	.word	0xffff8fbf
 80041a8:	ffff8080 	.word	0xffff8080
 80041ac:	ffffc080 	.word	0xffffc080
 80041b0:	ffffbf8f 	.word	0xffffbf8f

080041b4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041b4:	b590      	push	{r4, r7, lr}
 80041b6:	b0c3      	sub	sp, #268	@ 0x10c
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d001      	beq.n	80041ca <USB_EPStartXfer+0x16>
 80041c6:	f000 fd2d 	bl	8004c24 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d905      	bls.n	80041e2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	1d7a      	adds	r2, r7, #5
 80041dc:	32ff      	adds	r2, #255	@ 0xff
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e004      	b.n	80041ec <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	1d7a      	adds	r2, r7, #5
 80041e8:	32ff      	adds	r2, #255	@ 0xff
 80041ea:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	7b1b      	ldrb	r3, [r3, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d125      	bne.n	8004240 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6959      	ldr	r1, [r3, #20]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	88da      	ldrh	r2, [r3, #6]
 80041fc:	1d7b      	adds	r3, r7, #5
 80041fe:	33ff      	adds	r3, #255	@ 0xff
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f001 fa47 	bl	8005698 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2250      	movs	r2, #80	@ 0x50
 8004212:	5a9b      	ldrh	r3, [r3, r2]
 8004214:	b29b      	uxth	r3, r3
 8004216:	001a      	movs	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	189b      	adds	r3, r3, r2
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	00da      	lsls	r2, r3, #3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	18d3      	adds	r3, r2, r3
 8004228:	4ad7      	ldr	r2, [pc, #860]	@ (8004588 <USB_EPStartXfer+0x3d4>)
 800422a:	4694      	mov	ip, r2
 800422c:	4463      	add	r3, ip
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	1d7b      	adds	r3, r7, #5
 8004232:	33ff      	adds	r3, #255	@ 0xff
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	f000 fccd 	bl	8004bda <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	78db      	ldrb	r3, [r3, #3]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d000      	beq.n	800424a <USB_EPStartXfer+0x96>
 8004248:	e362      	b.n	8004910 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	429a      	cmp	r2, r3
 8004254:	d800      	bhi.n	8004258 <USB_EPStartXfer+0xa4>
 8004256:	e309      	b.n	800486c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	18d3      	adds	r3, r2, r3
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29a      	uxth	r2, r3
 8004266:	2056      	movs	r0, #86	@ 0x56
 8004268:	183b      	adds	r3, r7, r0
 800426a:	49c8      	ldr	r1, [pc, #800]	@ (800458c <USB_EPStartXfer+0x3d8>)
 800426c:	400a      	ands	r2, r1
 800426e:	801a      	strh	r2, [r3, #0]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	18d3      	adds	r3, r2, r3
 800427a:	183a      	adds	r2, r7, r0
 800427c:	8812      	ldrh	r2, [r2, #0]
 800427e:	49c4      	ldr	r1, [pc, #784]	@ (8004590 <USB_EPStartXfer+0x3dc>)
 8004280:	430a      	orrs	r2, r1
 8004282:	b292      	uxth	r2, r2
 8004284:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	1d7b      	adds	r3, r7, #5
 800428c:	33ff      	adds	r3, #255	@ 0xff
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	1ad2      	subs	r2, r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	18d3      	adds	r3, r2, r3
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	001a      	movs	r2, r3
 80042a6:	2340      	movs	r3, #64	@ 0x40
 80042a8:	4013      	ands	r3, r2
 80042aa:	d100      	bne.n	80042ae <USB_EPStartXfer+0xfa>
 80042ac:	e176      	b.n	800459c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d000      	beq.n	80042bc <USB_EPStartXfer+0x108>
 80042ba:	e074      	b.n	80043a6 <USB_EPStartXfer+0x1f2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2250      	movs	r2, #80	@ 0x50
 80042c4:	5a9b      	ldrh	r3, [r3, r2]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	001a      	movs	r2, r3
 80042ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	00da      	lsls	r2, r3, #3
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	18d3      	adds	r3, r2, r3
 80042da:	4aae      	ldr	r2, [pc, #696]	@ (8004594 <USB_EPStartXfer+0x3e0>)
 80042dc:	4694      	mov	ip, r2
 80042de:	4463      	add	r3, ip
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	059b      	lsls	r3, r3, #22
 80042ea:	0d9b      	lsrs	r3, r3, #22
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	1d7b      	adds	r3, r7, #5
 80042f4:	33ff      	adds	r3, #255	@ 0xff
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80042fa:	d924      	bls.n	8004346 <USB_EPStartXfer+0x192>
 80042fc:	1d7b      	adds	r3, r7, #5
 80042fe:	33ff      	adds	r3, #255	@ 0xff
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	1c7a      	adds	r2, r7, #1
 8004306:	32ff      	adds	r2, #255	@ 0xff
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	1d7b      	adds	r3, r7, #5
 800430c:	33ff      	adds	r3, #255	@ 0xff
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	221f      	movs	r2, #31
 8004312:	4013      	ands	r3, r2
 8004314:	d106      	bne.n	8004324 <USB_EPStartXfer+0x170>
 8004316:	1c7b      	adds	r3, r7, #1
 8004318:	33ff      	adds	r3, #255	@ 0xff
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3b01      	subs	r3, #1
 800431e:	1c7a      	adds	r2, r7, #1
 8004320:	32ff      	adds	r2, #255	@ 0xff
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29a      	uxth	r2, r3
 800432a:	1c7b      	adds	r3, r7, #1
 800432c:	33ff      	adds	r3, #255	@ 0xff
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	029b      	lsls	r3, r3, #10
 8004334:	b29b      	uxth	r3, r3
 8004336:	4313      	orrs	r3, r2
 8004338:	b29b      	uxth	r3, r3
 800433a:	4a97      	ldr	r2, [pc, #604]	@ (8004598 <USB_EPStartXfer+0x3e4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	b29a      	uxth	r2, r3
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	e04a      	b.n	80043dc <USB_EPStartXfer+0x228>
 8004346:	1d7b      	adds	r3, r7, #5
 8004348:	33ff      	adds	r3, #255	@ 0xff
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d108      	bne.n	8004362 <USB_EPStartXfer+0x1ae>
 8004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	4a90      	ldr	r2, [pc, #576]	@ (8004598 <USB_EPStartXfer+0x3e4>)
 8004358:	4313      	orrs	r3, r2
 800435a:	b29a      	uxth	r2, r3
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	e03c      	b.n	80043dc <USB_EPStartXfer+0x228>
 8004362:	1d7b      	adds	r3, r7, #5
 8004364:	33ff      	adds	r3, #255	@ 0xff
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	1c7a      	adds	r2, r7, #1
 800436c:	32ff      	adds	r2, #255	@ 0xff
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	1d7b      	adds	r3, r7, #5
 8004372:	33ff      	adds	r3, #255	@ 0xff
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2201      	movs	r2, #1
 8004378:	4013      	ands	r3, r2
 800437a:	d006      	beq.n	800438a <USB_EPStartXfer+0x1d6>
 800437c:	1c7b      	adds	r3, r7, #1
 800437e:	33ff      	adds	r3, #255	@ 0xff
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	1c7a      	adds	r2, r7, #1
 8004386:	32ff      	adds	r2, #255	@ 0xff
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29a      	uxth	r2, r3
 8004390:	1c7b      	adds	r3, r7, #1
 8004392:	33ff      	adds	r3, #255	@ 0xff
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	029b      	lsls	r3, r3, #10
 800439a:	b29b      	uxth	r3, r3
 800439c:	4313      	orrs	r3, r2
 800439e:	b29a      	uxth	r2, r3
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	e01a      	b.n	80043dc <USB_EPStartXfer+0x228>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d116      	bne.n	80043dc <USB_EPStartXfer+0x228>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2250      	movs	r2, #80	@ 0x50
 80043b2:	5a9b      	ldrh	r3, [r3, r2]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	001a      	movs	r2, r3
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	00da      	lsls	r2, r3, #3
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	18d3      	adds	r3, r2, r3
 80043c8:	4a72      	ldr	r2, [pc, #456]	@ (8004594 <USB_EPStartXfer+0x3e0>)
 80043ca:	4694      	mov	ip, r2
 80043cc:	4463      	add	r3, ip
 80043ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d0:	1d7b      	adds	r3, r7, #5
 80043d2:	33ff      	adds	r3, #255	@ 0xff
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80043dc:	2076      	movs	r0, #118	@ 0x76
 80043de:	183b      	adds	r3, r7, r0
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	8952      	ldrh	r2, [r2, #10]
 80043e4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6959      	ldr	r1, [r3, #20]
 80043ea:	1d7b      	adds	r3, r7, #5
 80043ec:	33ff      	adds	r3, #255	@ 0xff
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	b29c      	uxth	r4, r3
 80043f2:	183b      	adds	r3, r7, r0
 80043f4:	881a      	ldrh	r2, [r3, #0]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	0023      	movs	r3, r4
 80043fa:	f001 f94d 	bl	8005698 <USB_WritePMA>
            ep->xfer_buff += len;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	1d7b      	adds	r3, r7, #5
 8004404:	33ff      	adds	r3, #255	@ 0xff
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	18d2      	adds	r2, r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	429a      	cmp	r2, r3
 8004418:	d908      	bls.n	800442c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6a1a      	ldr	r2, [r3, #32]
 800441e:	1d7b      	adds	r3, r7, #5
 8004420:	33ff      	adds	r3, #255	@ 0xff
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	1ad2      	subs	r2, r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	621a      	str	r2, [r3, #32]
 800442a:	e007      	b.n	800443c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	1d7a      	adds	r2, r7, #5
 8004432:	32ff      	adds	r2, #255	@ 0xff
 8004434:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2200      	movs	r2, #0
 800443a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d000      	beq.n	8004446 <USB_EPStartXfer+0x292>
 8004444:	e070      	b.n	8004528 <USB_EPStartXfer+0x374>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2250      	movs	r2, #80	@ 0x50
 800444e:	5a9b      	ldrh	r3, [r3, r2]
 8004450:	b29b      	uxth	r3, r3
 8004452:	001a      	movs	r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	189b      	adds	r3, r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	00da      	lsls	r2, r3, #3
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	18d3      	adds	r3, r2, r3
 8004464:	4a48      	ldr	r2, [pc, #288]	@ (8004588 <USB_EPStartXfer+0x3d4>)
 8004466:	4694      	mov	ip, r2
 8004468:	4463      	add	r3, ip
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	059b      	lsls	r3, r3, #22
 8004474:	0d9b      	lsrs	r3, r3, #22
 8004476:	b29a      	uxth	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	1d7b      	adds	r3, r7, #5
 800447e:	33ff      	adds	r3, #255	@ 0xff
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b3e      	cmp	r3, #62	@ 0x3e
 8004484:	d922      	bls.n	80044cc <USB_EPStartXfer+0x318>
 8004486:	1d7b      	adds	r3, r7, #5
 8004488:	33ff      	adds	r3, #255	@ 0xff
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	21fc      	movs	r1, #252	@ 0xfc
 8004490:	187a      	adds	r2, r7, r1
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	1d7b      	adds	r3, r7, #5
 8004496:	33ff      	adds	r3, #255	@ 0xff
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	221f      	movs	r2, #31
 800449c:	4013      	ands	r3, r2
 800449e:	d104      	bne.n	80044aa <USB_EPStartXfer+0x2f6>
 80044a0:	187b      	adds	r3, r7, r1
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	187a      	adds	r2, r7, r1
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	23fc      	movs	r3, #252	@ 0xfc
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	029b      	lsls	r3, r3, #10
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	4313      	orrs	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	4a35      	ldr	r2, [pc, #212]	@ (8004598 <USB_EPStartXfer+0x3e4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	e04a      	b.n	8004562 <USB_EPStartXfer+0x3ae>
 80044cc:	1d7b      	adds	r3, r7, #5
 80044ce:	33ff      	adds	r3, #255	@ 0xff
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d108      	bne.n	80044e8 <USB_EPStartXfer+0x334>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004598 <USB_EPStartXfer+0x3e4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	e03c      	b.n	8004562 <USB_EPStartXfer+0x3ae>
 80044e8:	1d7b      	adds	r3, r7, #5
 80044ea:	33ff      	adds	r3, #255	@ 0xff
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	21fc      	movs	r1, #252	@ 0xfc
 80044f2:	187a      	adds	r2, r7, r1
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	1d7b      	adds	r3, r7, #5
 80044f8:	33ff      	adds	r3, #255	@ 0xff
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2201      	movs	r2, #1
 80044fe:	4013      	ands	r3, r2
 8004500:	d004      	beq.n	800450c <USB_EPStartXfer+0x358>
 8004502:	187b      	adds	r3, r7, r1
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	187a      	adds	r2, r7, r1
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29a      	uxth	r2, r3
 8004512:	23fc      	movs	r3, #252	@ 0xfc
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	029b      	lsls	r3, r3, #10
 800451c:	b29b      	uxth	r3, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	b29a      	uxth	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	e01c      	b.n	8004562 <USB_EPStartXfer+0x3ae>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d118      	bne.n	8004562 <USB_EPStartXfer+0x3ae>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2250      	movs	r2, #80	@ 0x50
 8004538:	5a9b      	ldrh	r3, [r3, r2]
 800453a:	b29b      	uxth	r3, r3
 800453c:	001a      	movs	r2, r3
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	189b      	adds	r3, r3, r2
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	00da      	lsls	r2, r3, #3
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	18d3      	adds	r3, r2, r3
 800454e:	4a0e      	ldr	r2, [pc, #56]	@ (8004588 <USB_EPStartXfer+0x3d4>)
 8004550:	4694      	mov	ip, r2
 8004552:	4463      	add	r3, ip
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	1d7b      	adds	r3, r7, #5
 8004558:	33ff      	adds	r3, #255	@ 0xff
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	b29a      	uxth	r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004562:	2076      	movs	r0, #118	@ 0x76
 8004564:	183b      	adds	r3, r7, r0
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	8912      	ldrh	r2, [r2, #8]
 800456a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6959      	ldr	r1, [r3, #20]
 8004570:	1d7b      	adds	r3, r7, #5
 8004572:	33ff      	adds	r3, #255	@ 0xff
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	b29c      	uxth	r4, r3
 8004578:	183b      	adds	r3, r7, r0
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	0023      	movs	r3, r4
 8004580:	f001 f88a 	bl	8005698 <USB_WritePMA>
 8004584:	e329      	b.n	8004bda <USB_EPStartXfer+0xa26>
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	00000402 	.word	0x00000402
 800458c:	ffff8f8f 	.word	0xffff8f8f
 8004590:	ffff8180 	.word	0xffff8180
 8004594:	00000406 	.word	0x00000406
 8004598:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	785b      	ldrb	r3, [r3, #1]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d000      	beq.n	80045a6 <USB_EPStartXfer+0x3f2>
 80045a4:	e070      	b.n	8004688 <USB_EPStartXfer+0x4d4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2250      	movs	r2, #80	@ 0x50
 80045ae:	5a9b      	ldrh	r3, [r3, r2]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	001a      	movs	r2, r3
 80045b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	00da      	lsls	r2, r3, #3
 80045c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c2:	18d3      	adds	r3, r2, r3
 80045c4:	4acd      	ldr	r2, [pc, #820]	@ (80048fc <USB_EPStartXfer+0x748>)
 80045c6:	4694      	mov	ip, r2
 80045c8:	4463      	add	r3, ip
 80045ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80045cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	059b      	lsls	r3, r3, #22
 80045d4:	0d9b      	lsrs	r3, r3, #22
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045da:	801a      	strh	r2, [r3, #0]
 80045dc:	1d7b      	adds	r3, r7, #5
 80045de:	33ff      	adds	r3, #255	@ 0xff
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80045e4:	d922      	bls.n	800462c <USB_EPStartXfer+0x478>
 80045e6:	1d7b      	adds	r3, r7, #5
 80045e8:	33ff      	adds	r3, #255	@ 0xff
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	21f8      	movs	r1, #248	@ 0xf8
 80045f0:	187a      	adds	r2, r7, r1
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	1d7b      	adds	r3, r7, #5
 80045f6:	33ff      	adds	r3, #255	@ 0xff
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	221f      	movs	r2, #31
 80045fc:	4013      	ands	r3, r2
 80045fe:	d104      	bne.n	800460a <USB_EPStartXfer+0x456>
 8004600:	187b      	adds	r3, r7, r1
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3b01      	subs	r3, #1
 8004606:	187a      	adds	r2, r7, r1
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29a      	uxth	r2, r3
 8004610:	23f8      	movs	r3, #248	@ 0xf8
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	029b      	lsls	r3, r3, #10
 800461a:	b29b      	uxth	r3, r3
 800461c:	4313      	orrs	r3, r2
 800461e:	b29b      	uxth	r3, r3
 8004620:	4ab7      	ldr	r2, [pc, #732]	@ (8004900 <USB_EPStartXfer+0x74c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	b29a      	uxth	r2, r3
 8004626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e04a      	b.n	80046c2 <USB_EPStartXfer+0x50e>
 800462c:	1d7b      	adds	r3, r7, #5
 800462e:	33ff      	adds	r3, #255	@ 0xff
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <USB_EPStartXfer+0x494>
 8004636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	4ab0      	ldr	r2, [pc, #704]	@ (8004900 <USB_EPStartXfer+0x74c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	b29a      	uxth	r2, r3
 8004642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004644:	801a      	strh	r2, [r3, #0]
 8004646:	e03c      	b.n	80046c2 <USB_EPStartXfer+0x50e>
 8004648:	1d7b      	adds	r3, r7, #5
 800464a:	33ff      	adds	r3, #255	@ 0xff
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	21f8      	movs	r1, #248	@ 0xf8
 8004652:	187a      	adds	r2, r7, r1
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	1d7b      	adds	r3, r7, #5
 8004658:	33ff      	adds	r3, #255	@ 0xff
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2201      	movs	r2, #1
 800465e:	4013      	ands	r3, r2
 8004660:	d004      	beq.n	800466c <USB_EPStartXfer+0x4b8>
 8004662:	187b      	adds	r3, r7, r1
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	187a      	adds	r2, r7, r1
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29a      	uxth	r2, r3
 8004672:	23f8      	movs	r3, #248	@ 0xf8
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	b29b      	uxth	r3, r3
 800467e:	4313      	orrs	r3, r2
 8004680:	b29a      	uxth	r2, r3
 8004682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e01c      	b.n	80046c2 <USB_EPStartXfer+0x50e>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d118      	bne.n	80046c2 <USB_EPStartXfer+0x50e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	653b      	str	r3, [r7, #80]	@ 0x50
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2250      	movs	r2, #80	@ 0x50
 8004698:	5a9b      	ldrh	r3, [r3, r2]
 800469a:	b29b      	uxth	r3, r3
 800469c:	001a      	movs	r2, r3
 800469e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	00da      	lsls	r2, r3, #3
 80046aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ac:	18d3      	adds	r3, r2, r3
 80046ae:	4a93      	ldr	r2, [pc, #588]	@ (80048fc <USB_EPStartXfer+0x748>)
 80046b0:	4694      	mov	ip, r2
 80046b2:	4463      	add	r3, ip
 80046b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b6:	1d7b      	adds	r3, r7, #5
 80046b8:	33ff      	adds	r3, #255	@ 0xff
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	b29a      	uxth	r2, r3
 80046be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046c2:	2076      	movs	r0, #118	@ 0x76
 80046c4:	183b      	adds	r3, r7, r0
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	8912      	ldrh	r2, [r2, #8]
 80046ca:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	6959      	ldr	r1, [r3, #20]
 80046d0:	1d7b      	adds	r3, r7, #5
 80046d2:	33ff      	adds	r3, #255	@ 0xff
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b29c      	uxth	r4, r3
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	881a      	ldrh	r2, [r3, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	0023      	movs	r3, r4
 80046e0:	f000 ffda 	bl	8005698 <USB_WritePMA>
            ep->xfer_buff += len;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	1d7b      	adds	r3, r7, #5
 80046ea:	33ff      	adds	r3, #255	@ 0xff
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	18d2      	adds	r2, r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d908      	bls.n	8004712 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	1d7b      	adds	r3, r7, #5
 8004706:	33ff      	adds	r3, #255	@ 0xff
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	e007      	b.n	8004722 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	1d7a      	adds	r2, r7, #5
 8004718:	32ff      	adds	r2, #255	@ 0xff
 800471a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	643b      	str	r3, [r7, #64]	@ 0x40
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d000      	beq.n	8004730 <USB_EPStartXfer+0x57c>
 800472e:	e070      	b.n	8004812 <USB_EPStartXfer+0x65e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2250      	movs	r2, #80	@ 0x50
 8004738:	5a9b      	ldrh	r3, [r3, r2]
 800473a:	b29b      	uxth	r3, r3
 800473c:	001a      	movs	r2, r3
 800473e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004740:	189b      	adds	r3, r3, r2
 8004742:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	00da      	lsls	r2, r3, #3
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	18d3      	adds	r3, r2, r3
 800474e:	4a6d      	ldr	r2, [pc, #436]	@ (8004904 <USB_EPStartXfer+0x750>)
 8004750:	4694      	mov	ip, r2
 8004752:	4463      	add	r3, ip
 8004754:	637b      	str	r3, [r7, #52]	@ 0x34
 8004756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	059b      	lsls	r3, r3, #22
 800475e:	0d9b      	lsrs	r3, r3, #22
 8004760:	b29a      	uxth	r2, r3
 8004762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	1d7b      	adds	r3, r7, #5
 8004768:	33ff      	adds	r3, #255	@ 0xff
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b3e      	cmp	r3, #62	@ 0x3e
 800476e:	d922      	bls.n	80047b6 <USB_EPStartXfer+0x602>
 8004770:	1d7b      	adds	r3, r7, #5
 8004772:	33ff      	adds	r3, #255	@ 0xff
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	21f4      	movs	r1, #244	@ 0xf4
 800477a:	187a      	adds	r2, r7, r1
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	1d7b      	adds	r3, r7, #5
 8004780:	33ff      	adds	r3, #255	@ 0xff
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	221f      	movs	r2, #31
 8004786:	4013      	ands	r3, r2
 8004788:	d104      	bne.n	8004794 <USB_EPStartXfer+0x5e0>
 800478a:	187b      	adds	r3, r7, r1
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3b01      	subs	r3, #1
 8004790:	187a      	adds	r2, r7, r1
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29a      	uxth	r2, r3
 800479a:	23f4      	movs	r3, #244	@ 0xf4
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	029b      	lsls	r3, r3, #10
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	4313      	orrs	r3, r2
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4a55      	ldr	r2, [pc, #340]	@ (8004900 <USB_EPStartXfer+0x74c>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	e048      	b.n	8004848 <USB_EPStartXfer+0x694>
 80047b6:	1d7b      	adds	r3, r7, #5
 80047b8:	33ff      	adds	r3, #255	@ 0xff
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d108      	bne.n	80047d2 <USB_EPStartXfer+0x61e>
 80047c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004900 <USB_EPStartXfer+0x74c>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	e03a      	b.n	8004848 <USB_EPStartXfer+0x694>
 80047d2:	1d7b      	adds	r3, r7, #5
 80047d4:	33ff      	adds	r3, #255	@ 0xff
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	21f4      	movs	r1, #244	@ 0xf4
 80047dc:	187a      	adds	r2, r7, r1
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	1d7b      	adds	r3, r7, #5
 80047e2:	33ff      	adds	r3, #255	@ 0xff
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2201      	movs	r2, #1
 80047e8:	4013      	ands	r3, r2
 80047ea:	d004      	beq.n	80047f6 <USB_EPStartXfer+0x642>
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	187a      	adds	r2, r7, r1
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	23f4      	movs	r3, #244	@ 0xf4
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	029b      	lsls	r3, r3, #10
 8004806:	b29b      	uxth	r3, r3
 8004808:	4313      	orrs	r3, r2
 800480a:	b29a      	uxth	r2, r3
 800480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	e01a      	b.n	8004848 <USB_EPStartXfer+0x694>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d116      	bne.n	8004848 <USB_EPStartXfer+0x694>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2250      	movs	r2, #80	@ 0x50
 800481e:	5a9b      	ldrh	r3, [r3, r2]
 8004820:	b29b      	uxth	r3, r3
 8004822:	001a      	movs	r2, r3
 8004824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004826:	189b      	adds	r3, r3, r2
 8004828:	643b      	str	r3, [r7, #64]	@ 0x40
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	00da      	lsls	r2, r3, #3
 8004830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004832:	18d3      	adds	r3, r2, r3
 8004834:	4a33      	ldr	r2, [pc, #204]	@ (8004904 <USB_EPStartXfer+0x750>)
 8004836:	4694      	mov	ip, r2
 8004838:	4463      	add	r3, ip
 800483a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800483c:	1d7b      	adds	r3, r7, #5
 800483e:	33ff      	adds	r3, #255	@ 0xff
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29a      	uxth	r2, r3
 8004844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004846:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004848:	2076      	movs	r0, #118	@ 0x76
 800484a:	183b      	adds	r3, r7, r0
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	8952      	ldrh	r2, [r2, #10]
 8004850:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6959      	ldr	r1, [r3, #20]
 8004856:	1d7b      	adds	r3, r7, #5
 8004858:	33ff      	adds	r3, #255	@ 0xff
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	b29c      	uxth	r4, r3
 800485e:	183b      	adds	r3, r7, r0
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	0023      	movs	r3, r4
 8004866:	f000 ff17 	bl	8005698 <USB_WritePMA>
 800486a:	e1b6      	b.n	8004bda <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	1d7a      	adds	r2, r7, #5
 8004872:	32ff      	adds	r2, #255	@ 0xff
 8004874:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	18d3      	adds	r3, r2, r3
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29a      	uxth	r2, r3
 8004884:	2062      	movs	r0, #98	@ 0x62
 8004886:	183b      	adds	r3, r7, r0
 8004888:	491f      	ldr	r1, [pc, #124]	@ (8004908 <USB_EPStartXfer+0x754>)
 800488a:	400a      	ands	r2, r1
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	18d3      	adds	r3, r2, r3
 8004898:	183a      	adds	r2, r7, r0
 800489a:	8812      	ldrh	r2, [r2, #0]
 800489c:	491b      	ldr	r1, [pc, #108]	@ (800490c <USB_EPStartXfer+0x758>)
 800489e:	430a      	orrs	r2, r1
 80048a0:	b292      	uxth	r2, r2
 80048a2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2250      	movs	r2, #80	@ 0x50
 80048ac:	5a9b      	ldrh	r3, [r3, r2]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	001a      	movs	r2, r3
 80048b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	00da      	lsls	r2, r3, #3
 80048be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048c0:	18d3      	adds	r3, r2, r3
 80048c2:	4a0e      	ldr	r2, [pc, #56]	@ (80048fc <USB_EPStartXfer+0x748>)
 80048c4:	4694      	mov	ip, r2
 80048c6:	4463      	add	r3, ip
 80048c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ca:	1d7b      	adds	r3, r7, #5
 80048cc:	33ff      	adds	r3, #255	@ 0xff
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80048d6:	2076      	movs	r0, #118	@ 0x76
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	8912      	ldrh	r2, [r2, #8]
 80048de:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6959      	ldr	r1, [r3, #20]
 80048e4:	1d7b      	adds	r3, r7, #5
 80048e6:	33ff      	adds	r3, #255	@ 0xff
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	b29c      	uxth	r4, r3
 80048ec:	183b      	adds	r3, r7, r0
 80048ee:	881a      	ldrh	r2, [r3, #0]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	0023      	movs	r3, r4
 80048f4:	f000 fed0 	bl	8005698 <USB_WritePMA>
 80048f8:	e16f      	b.n	8004bda <USB_EPStartXfer+0xa26>
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	00000402 	.word	0x00000402
 8004900:	ffff8000 	.word	0xffff8000
 8004904:	00000406 	.word	0x00000406
 8004908:	ffff8e8f 	.word	0xffff8e8f
 800490c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	1d7b      	adds	r3, r7, #5
 8004916:	33ff      	adds	r3, #255	@ 0xff
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	18d3      	adds	r3, r2, r3
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	001a      	movs	r2, r3
 8004930:	2340      	movs	r3, #64	@ 0x40
 8004932:	4013      	ands	r3, r2
 8004934:	d100      	bne.n	8004938 <USB_EPStartXfer+0x784>
 8004936:	e0a4      	b.n	8004a82 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	673b      	str	r3, [r7, #112]	@ 0x70
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d000      	beq.n	8004946 <USB_EPStartXfer+0x792>
 8004944:	e070      	b.n	8004a28 <USB_EPStartXfer+0x874>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	66bb      	str	r3, [r7, #104]	@ 0x68
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2250      	movs	r2, #80	@ 0x50
 800494e:	5a9b      	ldrh	r3, [r3, r2]
 8004950:	b29b      	uxth	r3, r3
 8004952:	001a      	movs	r2, r3
 8004954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004956:	189b      	adds	r3, r3, r2
 8004958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	00da      	lsls	r2, r3, #3
 8004960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004962:	18d3      	adds	r3, r2, r3
 8004964:	4abc      	ldr	r2, [pc, #752]	@ (8004c58 <USB_EPStartXfer+0xaa4>)
 8004966:	4694      	mov	ip, r2
 8004968:	4463      	add	r3, ip
 800496a:	667b      	str	r3, [r7, #100]	@ 0x64
 800496c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	059b      	lsls	r3, r3, #22
 8004974:	0d9b      	lsrs	r3, r3, #22
 8004976:	b29a      	uxth	r2, r3
 8004978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	1d7b      	adds	r3, r7, #5
 800497e:	33ff      	adds	r3, #255	@ 0xff
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b3e      	cmp	r3, #62	@ 0x3e
 8004984:	d922      	bls.n	80049cc <USB_EPStartXfer+0x818>
 8004986:	1d7b      	adds	r3, r7, #5
 8004988:	33ff      	adds	r3, #255	@ 0xff
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	21f0      	movs	r1, #240	@ 0xf0
 8004990:	187a      	adds	r2, r7, r1
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	1d7b      	adds	r3, r7, #5
 8004996:	33ff      	adds	r3, #255	@ 0xff
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	221f      	movs	r2, #31
 800499c:	4013      	ands	r3, r2
 800499e:	d104      	bne.n	80049aa <USB_EPStartXfer+0x7f6>
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	187a      	adds	r2, r7, r1
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	23f0      	movs	r3, #240	@ 0xf0
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	029b      	lsls	r3, r3, #10
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4313      	orrs	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4aa6      	ldr	r2, [pc, #664]	@ (8004c5c <USB_EPStartXfer+0xaa8>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e048      	b.n	8004a5e <USB_EPStartXfer+0x8aa>
 80049cc:	1d7b      	adds	r3, r7, #5
 80049ce:	33ff      	adds	r3, #255	@ 0xff
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <USB_EPStartXfer+0x834>
 80049d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4a9f      	ldr	r2, [pc, #636]	@ (8004c5c <USB_EPStartXfer+0xaa8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e03a      	b.n	8004a5e <USB_EPStartXfer+0x8aa>
 80049e8:	1d7b      	adds	r3, r7, #5
 80049ea:	33ff      	adds	r3, #255	@ 0xff
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	21f0      	movs	r1, #240	@ 0xf0
 80049f2:	187a      	adds	r2, r7, r1
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	1d7b      	adds	r3, r7, #5
 80049f8:	33ff      	adds	r3, #255	@ 0xff
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2201      	movs	r2, #1
 80049fe:	4013      	ands	r3, r2
 8004a00:	d004      	beq.n	8004a0c <USB_EPStartXfer+0x858>
 8004a02:	187b      	adds	r3, r7, r1
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	187a      	adds	r2, r7, r1
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	23f0      	movs	r3, #240	@ 0xf0
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	029b      	lsls	r3, r3, #10
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e01a      	b.n	8004a5e <USB_EPStartXfer+0x8aa>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d116      	bne.n	8004a5e <USB_EPStartXfer+0x8aa>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2250      	movs	r2, #80	@ 0x50
 8004a34:	5a9b      	ldrh	r3, [r3, r2]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	001a      	movs	r2, r3
 8004a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a3c:	189b      	adds	r3, r3, r2
 8004a3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	00da      	lsls	r2, r3, #3
 8004a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a48:	18d3      	adds	r3, r2, r3
 8004a4a:	4a83      	ldr	r2, [pc, #524]	@ (8004c58 <USB_EPStartXfer+0xaa4>)
 8004a4c:	4694      	mov	ip, r2
 8004a4e:	4463      	add	r3, ip
 8004a50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a52:	1d7b      	adds	r3, r7, #5
 8004a54:	33ff      	adds	r3, #255	@ 0xff
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004a5e:	2076      	movs	r0, #118	@ 0x76
 8004a60:	183b      	adds	r3, r7, r0
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	8952      	ldrh	r2, [r2, #10]
 8004a66:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6959      	ldr	r1, [r3, #20]
 8004a6c:	1d7b      	adds	r3, r7, #5
 8004a6e:	33ff      	adds	r3, #255	@ 0xff
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	b29c      	uxth	r4, r3
 8004a74:	183b      	adds	r3, r7, r0
 8004a76:	881a      	ldrh	r2, [r3, #0]
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	0023      	movs	r3, r4
 8004a7c:	f000 fe0c 	bl	8005698 <USB_WritePMA>
 8004a80:	e0ab      	b.n	8004bda <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d000      	beq.n	8004a8c <USB_EPStartXfer+0x8d8>
 8004a8a:	e070      	b.n	8004b6e <USB_EPStartXfer+0x9ba>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2250      	movs	r2, #80	@ 0x50
 8004a94:	5a9b      	ldrh	r3, [r3, r2]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	001a      	movs	r2, r3
 8004a9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a9c:	189b      	adds	r3, r3, r2
 8004a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	00da      	lsls	r2, r3, #3
 8004aa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa8:	18d3      	adds	r3, r2, r3
 8004aaa:	4a6d      	ldr	r2, [pc, #436]	@ (8004c60 <USB_EPStartXfer+0xaac>)
 8004aac:	4694      	mov	ip, r2
 8004aae:	4463      	add	r3, ip
 8004ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ab2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	059b      	lsls	r3, r3, #22
 8004aba:	0d9b      	lsrs	r3, r3, #22
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	1d7b      	adds	r3, r7, #5
 8004ac4:	33ff      	adds	r3, #255	@ 0xff
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004aca:	d922      	bls.n	8004b12 <USB_EPStartXfer+0x95e>
 8004acc:	1d7b      	adds	r3, r7, #5
 8004ace:	33ff      	adds	r3, #255	@ 0xff
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	21ec      	movs	r1, #236	@ 0xec
 8004ad6:	187a      	adds	r2, r7, r1
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	1d7b      	adds	r3, r7, #5
 8004adc:	33ff      	adds	r3, #255	@ 0xff
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	221f      	movs	r2, #31
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d104      	bne.n	8004af0 <USB_EPStartXfer+0x93c>
 8004ae6:	187b      	adds	r3, r7, r1
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	187a      	adds	r2, r7, r1
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	23ec      	movs	r3, #236	@ 0xec
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	029b      	lsls	r3, r3, #10
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	4313      	orrs	r3, r2
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	4a55      	ldr	r2, [pc, #340]	@ (8004c5c <USB_EPStartXfer+0xaa8>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0e:	801a      	strh	r2, [r3, #0]
 8004b10:	e052      	b.n	8004bb8 <USB_EPStartXfer+0xa04>
 8004b12:	1d7b      	adds	r3, r7, #5
 8004b14:	33ff      	adds	r3, #255	@ 0xff
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d108      	bne.n	8004b2e <USB_EPStartXfer+0x97a>
 8004b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	4a4e      	ldr	r2, [pc, #312]	@ (8004c5c <USB_EPStartXfer+0xaa8>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	e044      	b.n	8004bb8 <USB_EPStartXfer+0xa04>
 8004b2e:	1d7b      	adds	r3, r7, #5
 8004b30:	33ff      	adds	r3, #255	@ 0xff
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	21ec      	movs	r1, #236	@ 0xec
 8004b38:	187a      	adds	r2, r7, r1
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	1d7b      	adds	r3, r7, #5
 8004b3e:	33ff      	adds	r3, #255	@ 0xff
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	4013      	ands	r3, r2
 8004b46:	d004      	beq.n	8004b52 <USB_EPStartXfer+0x99e>
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	187a      	adds	r2, r7, r1
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	23ec      	movs	r3, #236	@ 0xec
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	e024      	b.n	8004bb8 <USB_EPStartXfer+0xa04>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d120      	bne.n	8004bb8 <USB_EPStartXfer+0xa04>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2184      	movs	r1, #132	@ 0x84
 8004b7a:	187a      	adds	r2, r7, r1
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2250      	movs	r2, #80	@ 0x50
 8004b82:	5a9b      	ldrh	r3, [r3, r2]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	001a      	movs	r2, r3
 8004b88:	187b      	adds	r3, r7, r1
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	189b      	adds	r3, r3, r2
 8004b8e:	187a      	adds	r2, r7, r1
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	00da      	lsls	r2, r3, #3
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	18d3      	adds	r3, r2, r3
 8004b9e:	4a30      	ldr	r2, [pc, #192]	@ (8004c60 <USB_EPStartXfer+0xaac>)
 8004ba0:	4694      	mov	ip, r2
 8004ba2:	4463      	add	r3, ip
 8004ba4:	2180      	movs	r1, #128	@ 0x80
 8004ba6:	187a      	adds	r2, r7, r1
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	1d7b      	adds	r3, r7, #5
 8004bac:	33ff      	adds	r3, #255	@ 0xff
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	187b      	adds	r3, r7, r1
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004bb8:	2076      	movs	r0, #118	@ 0x76
 8004bba:	183b      	adds	r3, r7, r0
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	8912      	ldrh	r2, [r2, #8]
 8004bc0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6959      	ldr	r1, [r3, #20]
 8004bc6:	1d7b      	adds	r3, r7, #5
 8004bc8:	33ff      	adds	r3, #255	@ 0xff
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	b29c      	uxth	r4, r3
 8004bce:	183b      	adds	r3, r7, r0
 8004bd0:	881a      	ldrh	r2, [r3, #0]
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	0023      	movs	r3, r4
 8004bd6:	f000 fd5f 	bl	8005698 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	18d3      	adds	r3, r2, r3
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	200a      	movs	r0, #10
 8004bea:	183b      	adds	r3, r7, r0
 8004bec:	491d      	ldr	r1, [pc, #116]	@ (8004c64 <USB_EPStartXfer+0xab0>)
 8004bee:	400a      	ands	r2, r1
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	183b      	adds	r3, r7, r0
 8004bf4:	183a      	adds	r2, r7, r0
 8004bf6:	8812      	ldrh	r2, [r2, #0]
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	404a      	eors	r2, r1
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	183b      	adds	r3, r7, r0
 8004c00:	183a      	adds	r2, r7, r0
 8004c02:	8812      	ldrh	r2, [r2, #0]
 8004c04:	2120      	movs	r1, #32
 8004c06:	404a      	eors	r2, r1
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	18d3      	adds	r3, r2, r3
 8004c14:	183a      	adds	r2, r7, r0
 8004c16:	8812      	ldrh	r2, [r2, #0]
 8004c18:	4913      	ldr	r1, [pc, #76]	@ (8004c68 <USB_EPStartXfer+0xab4>)
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	f000 fbf4 	bl	800540c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	7b1b      	ldrb	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d000      	beq.n	8004c2e <USB_EPStartXfer+0xa7a>
 8004c2c:	e0a9      	b.n	8004d82 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d918      	bls.n	8004c6c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	1d7a      	adds	r2, r7, #5
 8004c40:	32ff      	adds	r2, #255	@ 0xff
 8004c42:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	1d7b      	adds	r3, r7, #5
 8004c4a:	33ff      	adds	r3, #255	@ 0xff
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	619a      	str	r2, [r3, #24]
 8004c54:	e012      	b.n	8004c7c <USB_EPStartXfer+0xac8>
 8004c56:	46c0      	nop			@ (mov r8, r8)
 8004c58:	00000406 	.word	0x00000406
 8004c5c:	ffff8000 	.word	0xffff8000
 8004c60:	00000402 	.word	0x00000402
 8004c64:	ffff8fbf 	.word	0xffff8fbf
 8004c68:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	1d7a      	adds	r2, r7, #5
 8004c72:	32ff      	adds	r2, #255	@ 0xff
 8004c74:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2190      	movs	r1, #144	@ 0x90
 8004c80:	187a      	adds	r2, r7, r1
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2250      	movs	r2, #80	@ 0x50
 8004c88:	5a9b      	ldrh	r3, [r3, r2]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	187a      	adds	r2, r7, r1
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	00da      	lsls	r2, r3, #3
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	18d3      	adds	r3, r2, r3
 8004ca4:	4acf      	ldr	r2, [pc, #828]	@ (8004fe4 <USB_EPStartXfer+0xe30>)
 8004ca6:	4694      	mov	ip, r2
 8004ca8:	4463      	add	r3, ip
 8004caa:	218c      	movs	r1, #140	@ 0x8c
 8004cac:	187a      	adds	r2, r7, r1
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	059b      	lsls	r3, r3, #22
 8004cba:	0d9b      	lsrs	r3, r3, #22
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	1d7b      	adds	r3, r7, #5
 8004cc6:	33ff      	adds	r3, #255	@ 0xff
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ccc:	d925      	bls.n	8004d1a <USB_EPStartXfer+0xb66>
 8004cce:	1d7b      	adds	r3, r7, #5
 8004cd0:	33ff      	adds	r3, #255	@ 0xff
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	21e8      	movs	r1, #232	@ 0xe8
 8004cd8:	187a      	adds	r2, r7, r1
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	1d7b      	adds	r3, r7, #5
 8004cde:	33ff      	adds	r3, #255	@ 0xff
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	221f      	movs	r2, #31
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d104      	bne.n	8004cf2 <USB_EPStartXfer+0xb3e>
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	187a      	adds	r2, r7, r1
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	218c      	movs	r1, #140	@ 0x8c
 8004cf4:	187b      	adds	r3, r7, r1
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	23e8      	movs	r3, #232	@ 0xe8
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4ab6      	ldr	r2, [pc, #728]	@ (8004fe8 <USB_EPStartXfer+0xe34>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	187b      	adds	r3, r7, r1
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e353      	b.n	80053c2 <USB_EPStartXfer+0x120e>
 8004d1a:	1d7b      	adds	r3, r7, #5
 8004d1c:	33ff      	adds	r3, #255	@ 0xff
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <USB_EPStartXfer+0xb88>
 8004d24:	218c      	movs	r1, #140	@ 0x8c
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	4aae      	ldr	r2, [pc, #696]	@ (8004fe8 <USB_EPStartXfer+0xe34>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	187b      	adds	r3, r7, r1
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e342      	b.n	80053c2 <USB_EPStartXfer+0x120e>
 8004d3c:	1d7b      	adds	r3, r7, #5
 8004d3e:	33ff      	adds	r3, #255	@ 0xff
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	21e8      	movs	r1, #232	@ 0xe8
 8004d46:	187a      	adds	r2, r7, r1
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	1d7b      	adds	r3, r7, #5
 8004d4c:	33ff      	adds	r3, #255	@ 0xff
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	d004      	beq.n	8004d60 <USB_EPStartXfer+0xbac>
 8004d56:	187b      	adds	r3, r7, r1
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	187a      	adds	r2, r7, r1
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	218c      	movs	r1, #140	@ 0x8c
 8004d62:	187b      	adds	r3, r7, r1
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	23e8      	movs	r3, #232	@ 0xe8
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4313      	orrs	r3, r2
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	e31f      	b.n	80053c2 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	78db      	ldrb	r3, [r3, #3]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d000      	beq.n	8004d8c <USB_EPStartXfer+0xbd8>
 8004d8a:	e191      	b.n	80050b0 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d000      	beq.n	8004d96 <USB_EPStartXfer+0xbe2>
 8004d94:	e07c      	b.n	8004e90 <USB_EPStartXfer+0xcdc>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	21ac      	movs	r1, #172	@ 0xac
 8004d9a:	187a      	adds	r2, r7, r1
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2250      	movs	r2, #80	@ 0x50
 8004da2:	5a9b      	ldrh	r3, [r3, r2]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	001a      	movs	r2, r3
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	189b      	adds	r3, r3, r2
 8004dae:	187a      	adds	r2, r7, r1
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	00da      	lsls	r2, r3, #3
 8004db8:	187b      	adds	r3, r7, r1
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	18d3      	adds	r3, r2, r3
 8004dbe:	4a8b      	ldr	r2, [pc, #556]	@ (8004fec <USB_EPStartXfer+0xe38>)
 8004dc0:	4694      	mov	ip, r2
 8004dc2:	4463      	add	r3, ip
 8004dc4:	21a8      	movs	r1, #168	@ 0xa8
 8004dc6:	187a      	adds	r2, r7, r1
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	187b      	adds	r3, r7, r1
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	059b      	lsls	r3, r3, #22
 8004dd4:	0d9b      	lsrs	r3, r3, #22
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004de4:	d923      	bls.n	8004e2e <USB_EPStartXfer+0xc7a>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	21e4      	movs	r1, #228	@ 0xe4
 8004dee:	187a      	adds	r2, r7, r1
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	221f      	movs	r2, #31
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d104      	bne.n	8004e06 <USB_EPStartXfer+0xc52>
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	187a      	adds	r2, r7, r1
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	21a8      	movs	r1, #168	@ 0xa8
 8004e08:	187b      	adds	r3, r7, r1
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	23e4      	movs	r3, #228	@ 0xe4
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	029b      	lsls	r3, r3, #10
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4a71      	ldr	r2, [pc, #452]	@ (8004fe8 <USB_EPStartXfer+0xe34>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	187b      	adds	r3, r7, r1
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	e054      	b.n	8004ed8 <USB_EPStartXfer+0xd24>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <USB_EPStartXfer+0xc9a>
 8004e36:	21a8      	movs	r1, #168	@ 0xa8
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	4a69      	ldr	r2, [pc, #420]	@ (8004fe8 <USB_EPStartXfer+0xe34>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e044      	b.n	8004ed8 <USB_EPStartXfer+0xd24>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	21e4      	movs	r1, #228	@ 0xe4
 8004e56:	187a      	adds	r2, r7, r1
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4013      	ands	r3, r2
 8004e62:	d004      	beq.n	8004e6e <USB_EPStartXfer+0xcba>
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	187a      	adds	r2, r7, r1
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	21a8      	movs	r1, #168	@ 0xa8
 8004e70:	187b      	adds	r3, r7, r1
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	23e4      	movs	r3, #228	@ 0xe4
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	029b      	lsls	r3, r3, #10
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4313      	orrs	r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	e023      	b.n	8004ed8 <USB_EPStartXfer+0xd24>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d11f      	bne.n	8004ed8 <USB_EPStartXfer+0xd24>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	21b4      	movs	r1, #180	@ 0xb4
 8004e9c:	187a      	adds	r2, r7, r1
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2250      	movs	r2, #80	@ 0x50
 8004ea4:	5a9b      	ldrh	r3, [r3, r2]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	187b      	adds	r3, r7, r1
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	189b      	adds	r3, r3, r2
 8004eb0:	187a      	adds	r2, r7, r1
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	00da      	lsls	r2, r3, #3
 8004eba:	187b      	adds	r3, r7, r1
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	18d3      	adds	r3, r2, r3
 8004ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8004fec <USB_EPStartXfer+0xe38>)
 8004ec2:	4694      	mov	ip, r2
 8004ec4:	4463      	add	r3, ip
 8004ec6:	21b0      	movs	r1, #176	@ 0xb0
 8004ec8:	187a      	adds	r2, r7, r1
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	22a4      	movs	r2, #164	@ 0xa4
 8004edc:	18ba      	adds	r2, r7, r2
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d000      	beq.n	8004eea <USB_EPStartXfer+0xd36>
 8004ee8:	e082      	b.n	8004ff0 <USB_EPStartXfer+0xe3c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	219c      	movs	r1, #156	@ 0x9c
 8004eee:	187a      	adds	r2, r7, r1
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2250      	movs	r2, #80	@ 0x50
 8004ef6:	5a9b      	ldrh	r3, [r3, r2]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	001a      	movs	r2, r3
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	189b      	adds	r3, r3, r2
 8004f02:	187a      	adds	r2, r7, r1
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	00da      	lsls	r2, r3, #3
 8004f0c:	187b      	adds	r3, r7, r1
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	18d3      	adds	r3, r2, r3
 8004f12:	4a34      	ldr	r2, [pc, #208]	@ (8004fe4 <USB_EPStartXfer+0xe30>)
 8004f14:	4694      	mov	ip, r2
 8004f16:	4463      	add	r3, ip
 8004f18:	2198      	movs	r1, #152	@ 0x98
 8004f1a:	187a      	adds	r2, r7, r1
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	187b      	adds	r3, r7, r1
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	059b      	lsls	r3, r3, #22
 8004f28:	0d9b      	lsrs	r3, r3, #22
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f38:	d923      	bls.n	8004f82 <USB_EPStartXfer+0xdce>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	21e0      	movs	r1, #224	@ 0xe0
 8004f42:	187a      	adds	r2, r7, r1
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	221f      	movs	r2, #31
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d104      	bne.n	8004f5a <USB_EPStartXfer+0xda6>
 8004f50:	187b      	adds	r3, r7, r1
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	187a      	adds	r2, r7, r1
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	2198      	movs	r1, #152	@ 0x98
 8004f5c:	187b      	adds	r3, r7, r1
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	23e0      	movs	r3, #224	@ 0xe0
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4313      	orrs	r3, r2
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe8 <USB_EPStartXfer+0xe34>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	187b      	adds	r3, r7, r1
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	e057      	b.n	8005032 <USB_EPStartXfer+0xe7e>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <USB_EPStartXfer+0xdee>
 8004f8a:	2198      	movs	r1, #152	@ 0x98
 8004f8c:	187b      	adds	r3, r7, r1
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4a14      	ldr	r2, [pc, #80]	@ (8004fe8 <USB_EPStartXfer+0xe34>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	187b      	adds	r3, r7, r1
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e047      	b.n	8005032 <USB_EPStartXfer+0xe7e>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	21e0      	movs	r1, #224	@ 0xe0
 8004faa:	187a      	adds	r2, r7, r1
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <USB_EPStartXfer+0xe0e>
 8004fb8:	187b      	adds	r3, r7, r1
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	187a      	adds	r2, r7, r1
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	2198      	movs	r1, #152	@ 0x98
 8004fc4:	187b      	adds	r3, r7, r1
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	23e0      	movs	r3, #224	@ 0xe0
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	029b      	lsls	r3, r3, #10
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	e026      	b.n	8005032 <USB_EPStartXfer+0xe7e>
 8004fe4:	00000406 	.word	0x00000406
 8004fe8:	ffff8000 	.word	0xffff8000
 8004fec:	00000402 	.word	0x00000402
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d11c      	bne.n	8005032 <USB_EPStartXfer+0xe7e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2250      	movs	r2, #80	@ 0x50
 8004ffc:	5a9b      	ldrh	r3, [r3, r2]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	001a      	movs	r2, r3
 8005002:	21a4      	movs	r1, #164	@ 0xa4
 8005004:	187b      	adds	r3, r7, r1
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	189b      	adds	r3, r3, r2
 800500a:	187a      	adds	r2, r7, r1
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	00da      	lsls	r2, r3, #3
 8005014:	187b      	adds	r3, r7, r1
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	18d3      	adds	r3, r2, r3
 800501a:	4ad2      	ldr	r2, [pc, #840]	@ (8005364 <USB_EPStartXfer+0x11b0>)
 800501c:	4694      	mov	ip, r2
 800501e:	4463      	add	r3, ip
 8005020:	21a0      	movs	r1, #160	@ 0xa0
 8005022:	187a      	adds	r2, r7, r1
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	b29a      	uxth	r2, r3
 800502c:	187b      	adds	r3, r7, r1
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d100      	bne.n	800503c <USB_EPStartXfer+0xe88>
 800503a:	e1c2      	b.n	80053c2 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	18d2      	adds	r2, r2, r3
 8005046:	2196      	movs	r1, #150	@ 0x96
 8005048:	187b      	adds	r3, r7, r1
 800504a:	8812      	ldrh	r2, [r2, #0]
 800504c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800504e:	187b      	adds	r3, r7, r1
 8005050:	881a      	ldrh	r2, [r3, #0]
 8005052:	2380      	movs	r3, #128	@ 0x80
 8005054:	01db      	lsls	r3, r3, #7
 8005056:	4013      	ands	r3, r2
 8005058:	d004      	beq.n	8005064 <USB_EPStartXfer+0xeb0>
 800505a:	187b      	adds	r3, r7, r1
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	2240      	movs	r2, #64	@ 0x40
 8005060:	4013      	ands	r3, r2
 8005062:	d10d      	bne.n	8005080 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005064:	2196      	movs	r1, #150	@ 0x96
 8005066:	187b      	adds	r3, r7, r1
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	2380      	movs	r3, #128	@ 0x80
 800506c:	01db      	lsls	r3, r3, #7
 800506e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005070:	d000      	beq.n	8005074 <USB_EPStartXfer+0xec0>
 8005072:	e1a6      	b.n	80053c2 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005074:	187b      	adds	r3, r7, r1
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	2240      	movs	r2, #64	@ 0x40
 800507a:	4013      	ands	r3, r2
 800507c:	d000      	beq.n	8005080 <USB_EPStartXfer+0xecc>
 800507e:	e1a0      	b.n	80053c2 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	18d3      	adds	r3, r2, r3
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29a      	uxth	r2, r3
 800508e:	2094      	movs	r0, #148	@ 0x94
 8005090:	183b      	adds	r3, r7, r0
 8005092:	49b5      	ldr	r1, [pc, #724]	@ (8005368 <USB_EPStartXfer+0x11b4>)
 8005094:	400a      	ands	r2, r1
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	18d3      	adds	r3, r2, r3
 80050a2:	183a      	adds	r2, r7, r0
 80050a4:	8812      	ldrh	r2, [r2, #0]
 80050a6:	49b1      	ldr	r1, [pc, #708]	@ (800536c <USB_EPStartXfer+0x11b8>)
 80050a8:	430a      	orrs	r2, r1
 80050aa:	b292      	uxth	r2, r2
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	e188      	b.n	80053c2 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	78db      	ldrb	r3, [r3, #3]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d000      	beq.n	80050ba <USB_EPStartXfer+0xf06>
 80050b8:	e181      	b.n	80053be <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d90d      	bls.n	80050e2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	1d7a      	adds	r2, r7, #5
 80050cc:	32ff      	adds	r2, #255	@ 0xff
 80050ce:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699a      	ldr	r2, [r3, #24]
 80050d4:	1d7b      	adds	r3, r7, #5
 80050d6:	33ff      	adds	r3, #255	@ 0xff
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	1ad2      	subs	r2, r2, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	619a      	str	r2, [r3, #24]
 80050e0:	e007      	b.n	80050f2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	1d7a      	adds	r2, r7, #5
 80050e8:	32ff      	adds	r2, #255	@ 0xff
 80050ea:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	785b      	ldrb	r3, [r3, #1]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d000      	beq.n	80050fc <USB_EPStartXfer+0xf48>
 80050fa:	e082      	b.n	8005202 <USB_EPStartXfer+0x104e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	21cc      	movs	r1, #204	@ 0xcc
 8005100:	187a      	adds	r2, r7, r1
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2250      	movs	r2, #80	@ 0x50
 8005108:	5a9b      	ldrh	r3, [r3, r2]
 800510a:	b29b      	uxth	r3, r3
 800510c:	001a      	movs	r2, r3
 800510e:	187b      	adds	r3, r7, r1
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	189b      	adds	r3, r3, r2
 8005114:	187a      	adds	r2, r7, r1
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	00da      	lsls	r2, r3, #3
 800511e:	187b      	adds	r3, r7, r1
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	18d3      	adds	r3, r2, r3
 8005124:	4a92      	ldr	r2, [pc, #584]	@ (8005370 <USB_EPStartXfer+0x11bc>)
 8005126:	4694      	mov	ip, r2
 8005128:	4463      	add	r3, ip
 800512a:	21c8      	movs	r1, #200	@ 0xc8
 800512c:	187a      	adds	r2, r7, r1
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	187b      	adds	r3, r7, r1
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	059b      	lsls	r3, r3, #22
 800513a:	0d9b      	lsrs	r3, r3, #22
 800513c:	b29a      	uxth	r2, r3
 800513e:	187b      	adds	r3, r7, r1
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	1d7b      	adds	r3, r7, #5
 8005146:	33ff      	adds	r3, #255	@ 0xff
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b3e      	cmp	r3, #62	@ 0x3e
 800514c:	d925      	bls.n	800519a <USB_EPStartXfer+0xfe6>
 800514e:	1d7b      	adds	r3, r7, #5
 8005150:	33ff      	adds	r3, #255	@ 0xff
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	21dc      	movs	r1, #220	@ 0xdc
 8005158:	187a      	adds	r2, r7, r1
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	1d7b      	adds	r3, r7, #5
 800515e:	33ff      	adds	r3, #255	@ 0xff
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	221f      	movs	r2, #31
 8005164:	4013      	ands	r3, r2
 8005166:	d104      	bne.n	8005172 <USB_EPStartXfer+0xfbe>
 8005168:	187b      	adds	r3, r7, r1
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3b01      	subs	r3, #1
 800516e:	187a      	adds	r2, r7, r1
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	21c8      	movs	r1, #200	@ 0xc8
 8005174:	187b      	adds	r3, r7, r1
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29a      	uxth	r2, r3
 800517c:	23dc      	movs	r3, #220	@ 0xdc
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	029b      	lsls	r3, r3, #10
 8005186:	b29b      	uxth	r3, r3
 8005188:	4313      	orrs	r3, r2
 800518a:	b29b      	uxth	r3, r3
 800518c:	4a79      	ldr	r2, [pc, #484]	@ (8005374 <USB_EPStartXfer+0x11c0>)
 800518e:	4313      	orrs	r3, r2
 8005190:	b29a      	uxth	r2, r3
 8005192:	187b      	adds	r3, r7, r1
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	e058      	b.n	800524c <USB_EPStartXfer+0x1098>
 800519a:	1d7b      	adds	r3, r7, #5
 800519c:	33ff      	adds	r3, #255	@ 0xff
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <USB_EPStartXfer+0x1008>
 80051a4:	21c8      	movs	r1, #200	@ 0xc8
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	4a71      	ldr	r2, [pc, #452]	@ (8005374 <USB_EPStartXfer+0x11c0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	187b      	adds	r3, r7, r1
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	e047      	b.n	800524c <USB_EPStartXfer+0x1098>
 80051bc:	1d7b      	adds	r3, r7, #5
 80051be:	33ff      	adds	r3, #255	@ 0xff
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	21dc      	movs	r1, #220	@ 0xdc
 80051c6:	187a      	adds	r2, r7, r1
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	1d7b      	adds	r3, r7, #5
 80051cc:	33ff      	adds	r3, #255	@ 0xff
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	4013      	ands	r3, r2
 80051d4:	d004      	beq.n	80051e0 <USB_EPStartXfer+0x102c>
 80051d6:	187b      	adds	r3, r7, r1
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	187a      	adds	r2, r7, r1
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	21c8      	movs	r1, #200	@ 0xc8
 80051e2:	187b      	adds	r3, r7, r1
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	23dc      	movs	r3, #220	@ 0xdc
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	4313      	orrs	r3, r2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e024      	b.n	800524c <USB_EPStartXfer+0x1098>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d120      	bne.n	800524c <USB_EPStartXfer+0x1098>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	21d4      	movs	r1, #212	@ 0xd4
 800520e:	187a      	adds	r2, r7, r1
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2250      	movs	r2, #80	@ 0x50
 8005216:	5a9b      	ldrh	r3, [r3, r2]
 8005218:	b29b      	uxth	r3, r3
 800521a:	001a      	movs	r2, r3
 800521c:	187b      	adds	r3, r7, r1
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	189b      	adds	r3, r3, r2
 8005222:	187a      	adds	r2, r7, r1
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	00da      	lsls	r2, r3, #3
 800522c:	187b      	adds	r3, r7, r1
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	18d3      	adds	r3, r2, r3
 8005232:	4a4f      	ldr	r2, [pc, #316]	@ (8005370 <USB_EPStartXfer+0x11bc>)
 8005234:	4694      	mov	ip, r2
 8005236:	4463      	add	r3, ip
 8005238:	21d0      	movs	r1, #208	@ 0xd0
 800523a:	187a      	adds	r2, r7, r1
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	1d7b      	adds	r3, r7, #5
 8005240:	33ff      	adds	r3, #255	@ 0xff
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	b29a      	uxth	r2, r3
 8005246:	187b      	adds	r3, r7, r1
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	22c4      	movs	r2, #196	@ 0xc4
 8005250:	18ba      	adds	r2, r7, r2
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d000      	beq.n	800525e <USB_EPStartXfer+0x10aa>
 800525c:	e08c      	b.n	8005378 <USB_EPStartXfer+0x11c4>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	21bc      	movs	r1, #188	@ 0xbc
 8005262:	187a      	adds	r2, r7, r1
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2250      	movs	r2, #80	@ 0x50
 800526a:	5a9b      	ldrh	r3, [r3, r2]
 800526c:	b29b      	uxth	r3, r3
 800526e:	001a      	movs	r2, r3
 8005270:	187b      	adds	r3, r7, r1
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	189b      	adds	r3, r3, r2
 8005276:	187a      	adds	r2, r7, r1
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	00da      	lsls	r2, r3, #3
 8005280:	187b      	adds	r3, r7, r1
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	18d3      	adds	r3, r2, r3
 8005286:	4a37      	ldr	r2, [pc, #220]	@ (8005364 <USB_EPStartXfer+0x11b0>)
 8005288:	4694      	mov	ip, r2
 800528a:	4463      	add	r3, ip
 800528c:	21b8      	movs	r1, #184	@ 0xb8
 800528e:	187a      	adds	r2, r7, r1
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	187b      	adds	r3, r7, r1
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	059b      	lsls	r3, r3, #22
 800529c:	0d9b      	lsrs	r3, r3, #22
 800529e:	b29a      	uxth	r2, r3
 80052a0:	187b      	adds	r3, r7, r1
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	1d7b      	adds	r3, r7, #5
 80052a8:	33ff      	adds	r3, #255	@ 0xff
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80052ae:	d925      	bls.n	80052fc <USB_EPStartXfer+0x1148>
 80052b0:	1d7b      	adds	r3, r7, #5
 80052b2:	33ff      	adds	r3, #255	@ 0xff
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	21d8      	movs	r1, #216	@ 0xd8
 80052ba:	187a      	adds	r2, r7, r1
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	1d7b      	adds	r3, r7, #5
 80052c0:	33ff      	adds	r3, #255	@ 0xff
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	221f      	movs	r2, #31
 80052c6:	4013      	ands	r3, r2
 80052c8:	d104      	bne.n	80052d4 <USB_EPStartXfer+0x1120>
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	187a      	adds	r2, r7, r1
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	21b8      	movs	r1, #184	@ 0xb8
 80052d6:	187b      	adds	r3, r7, r1
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	23d8      	movs	r3, #216	@ 0xd8
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	029b      	lsls	r3, r3, #10
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	4a21      	ldr	r2, [pc, #132]	@ (8005374 <USB_EPStartXfer+0x11c0>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	e062      	b.n	80053c2 <USB_EPStartXfer+0x120e>
 80052fc:	1d7b      	adds	r3, r7, #5
 80052fe:	33ff      	adds	r3, #255	@ 0xff
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <USB_EPStartXfer+0x116a>
 8005306:	21b8      	movs	r1, #184	@ 0xb8
 8005308:	187b      	adds	r3, r7, r1
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	4a18      	ldr	r2, [pc, #96]	@ (8005374 <USB_EPStartXfer+0x11c0>)
 8005312:	4313      	orrs	r3, r2
 8005314:	b29a      	uxth	r2, r3
 8005316:	187b      	adds	r3, r7, r1
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e051      	b.n	80053c2 <USB_EPStartXfer+0x120e>
 800531e:	1d7b      	adds	r3, r7, #5
 8005320:	33ff      	adds	r3, #255	@ 0xff
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	21d8      	movs	r1, #216	@ 0xd8
 8005328:	187a      	adds	r2, r7, r1
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	1d7b      	adds	r3, r7, #5
 800532e:	33ff      	adds	r3, #255	@ 0xff
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2201      	movs	r2, #1
 8005334:	4013      	ands	r3, r2
 8005336:	d004      	beq.n	8005342 <USB_EPStartXfer+0x118e>
 8005338:	187b      	adds	r3, r7, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3301      	adds	r3, #1
 800533e:	187a      	adds	r2, r7, r1
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	21b8      	movs	r1, #184	@ 0xb8
 8005344:	187b      	adds	r3, r7, r1
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29a      	uxth	r2, r3
 800534c:	23d8      	movs	r3, #216	@ 0xd8
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	029b      	lsls	r3, r3, #10
 8005356:	b29b      	uxth	r3, r3
 8005358:	4313      	orrs	r3, r2
 800535a:	b29a      	uxth	r2, r3
 800535c:	187b      	adds	r3, r7, r1
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	e02e      	b.n	80053c2 <USB_EPStartXfer+0x120e>
 8005364:	00000406 	.word	0x00000406
 8005368:	ffff8f8f 	.word	0xffff8f8f
 800536c:	ffff80c0 	.word	0xffff80c0
 8005370:	00000402 	.word	0x00000402
 8005374:	ffff8000 	.word	0xffff8000
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d120      	bne.n	80053c2 <USB_EPStartXfer+0x120e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2250      	movs	r2, #80	@ 0x50
 8005384:	5a9b      	ldrh	r3, [r3, r2]
 8005386:	b29b      	uxth	r3, r3
 8005388:	001a      	movs	r2, r3
 800538a:	21c4      	movs	r1, #196	@ 0xc4
 800538c:	187b      	adds	r3, r7, r1
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	189b      	adds	r3, r3, r2
 8005392:	187a      	adds	r2, r7, r1
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	00da      	lsls	r2, r3, #3
 800539c:	187b      	adds	r3, r7, r1
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	18d3      	adds	r3, r2, r3
 80053a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <USB_EPStartXfer+0x1264>)
 80053a4:	4694      	mov	ip, r2
 80053a6:	4463      	add	r3, ip
 80053a8:	21c0      	movs	r1, #192	@ 0xc0
 80053aa:	187a      	adds	r2, r7, r1
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	1d7b      	adds	r3, r7, #5
 80053b0:	33ff      	adds	r3, #255	@ 0xff
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	187b      	adds	r3, r7, r1
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e001      	b.n	80053c2 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e025      	b.n	800540e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	18d3      	adds	r3, r2, r3
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	208a      	movs	r0, #138	@ 0x8a
 80053d2:	183b      	adds	r3, r7, r0
 80053d4:	4911      	ldr	r1, [pc, #68]	@ (800541c <USB_EPStartXfer+0x1268>)
 80053d6:	400a      	ands	r2, r1
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	183b      	adds	r3, r7, r0
 80053dc:	183a      	adds	r2, r7, r0
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	2180      	movs	r1, #128	@ 0x80
 80053e2:	0149      	lsls	r1, r1, #5
 80053e4:	404a      	eors	r2, r1
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	183b      	adds	r3, r7, r0
 80053ea:	183a      	adds	r2, r7, r0
 80053ec:	8812      	ldrh	r2, [r2, #0]
 80053ee:	2180      	movs	r1, #128	@ 0x80
 80053f0:	0189      	lsls	r1, r1, #6
 80053f2:	404a      	eors	r2, r1
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	183a      	adds	r2, r7, r0
 8005402:	8812      	ldrh	r2, [r2, #0]
 8005404:	4906      	ldr	r1, [pc, #24]	@ (8005420 <USB_EPStartXfer+0x126c>)
 8005406:	430a      	orrs	r2, r1
 8005408:	b292      	uxth	r2, r2
 800540a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	b043      	add	sp, #268	@ 0x10c
 8005414:	bd90      	pop	{r4, r7, pc}
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	00000406 	.word	0x00000406
 800541c:	ffffbf8f 	.word	0xffffbf8f
 8005420:	ffff8080 	.word	0xffff8080

08005424 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01d      	beq.n	8005472 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	18d3      	adds	r3, r2, r3
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29a      	uxth	r2, r3
 8005444:	200c      	movs	r0, #12
 8005446:	183b      	adds	r3, r7, r0
 8005448:	491b      	ldr	r1, [pc, #108]	@ (80054b8 <USB_EPSetStall+0x94>)
 800544a:	400a      	ands	r2, r1
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	183b      	adds	r3, r7, r0
 8005450:	183a      	adds	r2, r7, r0
 8005452:	8812      	ldrh	r2, [r2, #0]
 8005454:	2110      	movs	r1, #16
 8005456:	404a      	eors	r2, r1
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	18d3      	adds	r3, r2, r3
 8005464:	183a      	adds	r2, r7, r0
 8005466:	8812      	ldrh	r2, [r2, #0]
 8005468:	4914      	ldr	r1, [pc, #80]	@ (80054bc <USB_EPSetStall+0x98>)
 800546a:	430a      	orrs	r2, r1
 800546c:	b292      	uxth	r2, r2
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	e01d      	b.n	80054ae <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	18d3      	adds	r3, r2, r3
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29a      	uxth	r2, r3
 8005480:	200e      	movs	r0, #14
 8005482:	183b      	adds	r3, r7, r0
 8005484:	490e      	ldr	r1, [pc, #56]	@ (80054c0 <USB_EPSetStall+0x9c>)
 8005486:	400a      	ands	r2, r1
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	183b      	adds	r3, r7, r0
 800548c:	183a      	adds	r2, r7, r0
 800548e:	8812      	ldrh	r2, [r2, #0]
 8005490:	2180      	movs	r1, #128	@ 0x80
 8005492:	0149      	lsls	r1, r1, #5
 8005494:	404a      	eors	r2, r1
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	18d3      	adds	r3, r2, r3
 80054a2:	183a      	adds	r2, r7, r0
 80054a4:	8812      	ldrh	r2, [r2, #0]
 80054a6:	4905      	ldr	r1, [pc, #20]	@ (80054bc <USB_EPSetStall+0x98>)
 80054a8:	430a      	orrs	r2, r1
 80054aa:	b292      	uxth	r2, r2
 80054ac:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b004      	add	sp, #16
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	ffff8fbf 	.word	0xffff8fbf
 80054bc:	ffff8080 	.word	0xffff8080
 80054c0:	ffffbf8f 	.word	0xffffbf8f

080054c4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	7b1b      	ldrb	r3, [r3, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d000      	beq.n	80054d8 <USB_EPClearStall+0x14>
 80054d6:	e095      	b.n	8005604 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d046      	beq.n	800556e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	18d2      	adds	r2, r2, r3
 80054ea:	2110      	movs	r1, #16
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	8812      	ldrh	r2, [r2, #0]
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	187b      	adds	r3, r7, r1
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	2240      	movs	r2, #64	@ 0x40
 80054f8:	4013      	ands	r3, r2
 80054fa:	d016      	beq.n	800552a <USB_EPClearStall+0x66>
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	18d3      	adds	r3, r2, r3
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29a      	uxth	r2, r3
 800550a:	200e      	movs	r0, #14
 800550c:	183b      	adds	r3, r7, r0
 800550e:	4940      	ldr	r1, [pc, #256]	@ (8005610 <USB_EPClearStall+0x14c>)
 8005510:	400a      	ands	r2, r1
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	18d3      	adds	r3, r2, r3
 800551e:	183a      	adds	r2, r7, r0
 8005520:	8812      	ldrh	r2, [r2, #0]
 8005522:	493c      	ldr	r1, [pc, #240]	@ (8005614 <USB_EPClearStall+0x150>)
 8005524:	430a      	orrs	r2, r1
 8005526:	b292      	uxth	r2, r2
 8005528:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	78db      	ldrb	r3, [r3, #3]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d068      	beq.n	8005604 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	18d3      	adds	r3, r2, r3
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29a      	uxth	r2, r3
 8005540:	200c      	movs	r0, #12
 8005542:	183b      	adds	r3, r7, r0
 8005544:	4934      	ldr	r1, [pc, #208]	@ (8005618 <USB_EPClearStall+0x154>)
 8005546:	400a      	ands	r2, r1
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	183b      	adds	r3, r7, r0
 800554c:	183a      	adds	r2, r7, r0
 800554e:	8812      	ldrh	r2, [r2, #0]
 8005550:	2120      	movs	r1, #32
 8005552:	404a      	eors	r2, r1
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	18d3      	adds	r3, r2, r3
 8005560:	183a      	adds	r2, r7, r0
 8005562:	8812      	ldrh	r2, [r2, #0]
 8005564:	492d      	ldr	r1, [pc, #180]	@ (800561c <USB_EPClearStall+0x158>)
 8005566:	430a      	orrs	r2, r1
 8005568:	b292      	uxth	r2, r2
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e04a      	b.n	8005604 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	18d2      	adds	r2, r2, r3
 8005578:	2116      	movs	r1, #22
 800557a:	187b      	adds	r3, r7, r1
 800557c:	8812      	ldrh	r2, [r2, #0]
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	187b      	adds	r3, r7, r1
 8005582:	881a      	ldrh	r2, [r3, #0]
 8005584:	2380      	movs	r3, #128	@ 0x80
 8005586:	01db      	lsls	r3, r3, #7
 8005588:	4013      	ands	r3, r2
 800558a:	d016      	beq.n	80055ba <USB_EPClearStall+0xf6>
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	18d3      	adds	r3, r2, r3
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29a      	uxth	r2, r3
 800559a:	2014      	movs	r0, #20
 800559c:	183b      	adds	r3, r7, r0
 800559e:	491c      	ldr	r1, [pc, #112]	@ (8005610 <USB_EPClearStall+0x14c>)
 80055a0:	400a      	ands	r2, r1
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	18d3      	adds	r3, r2, r3
 80055ae:	183a      	adds	r2, r7, r0
 80055b0:	8812      	ldrh	r2, [r2, #0]
 80055b2:	491b      	ldr	r1, [pc, #108]	@ (8005620 <USB_EPClearStall+0x15c>)
 80055b4:	430a      	orrs	r2, r1
 80055b6:	b292      	uxth	r2, r2
 80055b8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	2012      	movs	r0, #18
 80055ca:	183b      	adds	r3, r7, r0
 80055cc:	4915      	ldr	r1, [pc, #84]	@ (8005624 <USB_EPClearStall+0x160>)
 80055ce:	400a      	ands	r2, r1
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	183b      	adds	r3, r7, r0
 80055d4:	183a      	adds	r2, r7, r0
 80055d6:	8812      	ldrh	r2, [r2, #0]
 80055d8:	2180      	movs	r1, #128	@ 0x80
 80055da:	0149      	lsls	r1, r1, #5
 80055dc:	404a      	eors	r2, r1
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	183b      	adds	r3, r7, r0
 80055e2:	183a      	adds	r2, r7, r0
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	2180      	movs	r1, #128	@ 0x80
 80055e8:	0189      	lsls	r1, r1, #6
 80055ea:	404a      	eors	r2, r1
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	18d3      	adds	r3, r2, r3
 80055f8:	183a      	adds	r2, r7, r0
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	4907      	ldr	r1, [pc, #28]	@ (800561c <USB_EPClearStall+0x158>)
 80055fe:	430a      	orrs	r2, r1
 8005600:	b292      	uxth	r2, r2
 8005602:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	0018      	movs	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	b006      	add	sp, #24
 800560c:	bd80      	pop	{r7, pc}
 800560e:	46c0      	nop			@ (mov r8, r8)
 8005610:	ffff8f8f 	.word	0xffff8f8f
 8005614:	ffff80c0 	.word	0xffff80c0
 8005618:	ffff8fbf 	.word	0xffff8fbf
 800561c:	ffff8080 	.word	0xffff8080
 8005620:	ffffc080 	.word	0xffffc080
 8005624:	ffffbf8f 	.word	0xffffbf8f

08005628 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	000a      	movs	r2, r1
 8005632:	1cfb      	adds	r3, r7, #3
 8005634:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005636:	1cfb      	adds	r3, r7, #3
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	224c      	movs	r2, #76	@ 0x4c
 8005642:	2180      	movs	r1, #128	@ 0x80
 8005644:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}

08005650 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2258      	movs	r2, #88	@ 0x58
 800565c:	5a9b      	ldrh	r3, [r3, r2]
 800565e:	b29b      	uxth	r3, r3
 8005660:	4a05      	ldr	r2, [pc, #20]	@ (8005678 <USB_DevConnect+0x28>)
 8005662:	4313      	orrs	r3, r2
 8005664:	b299      	uxth	r1, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2258      	movs	r2, #88	@ 0x58
 800566a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b002      	add	sp, #8
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	ffff8000 	.word	0xffff8000

0800567c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2244      	movs	r2, #68	@ 0x44
 8005688:	5a9b      	ldrh	r3, [r3, r2]
 800568a:	b29b      	uxth	r3, r3
 800568c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800568e:	68fb      	ldr	r3, [r7, #12]
}
 8005690:	0018      	movs	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	b004      	add	sp, #16
 8005696:	bd80      	pop	{r7, pc}

08005698 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	@ 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	0019      	movs	r1, r3
 80056a4:	1dbb      	adds	r3, r7, #6
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	1d3b      	adds	r3, r7, #4
 80056aa:	1c0a      	adds	r2, r1, #0
 80056ac:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	3301      	adds	r3, #1
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056c0:	1dbb      	adds	r3, r7, #6
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	18d3      	adds	r3, r2, r3
 80056c8:	2280      	movs	r2, #128	@ 0x80
 80056ca:	00d2      	lsls	r2, r2, #3
 80056cc:	4694      	mov	ip, r2
 80056ce:	4463      	add	r3, ip
 80056d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d6:	e020      	b.n	800571a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	2112      	movs	r1, #18
 80056de:	187b      	adds	r3, r7, r1
 80056e0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	3301      	adds	r3, #1
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	b21a      	sxth	r2, r3
 80056ec:	187b      	adds	r3, r7, r1
 80056ee:	2000      	movs	r0, #0
 80056f0:	5e1b      	ldrsh	r3, [r3, r0]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	b21a      	sxth	r2, r3
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	187a      	adds	r2, r7, r1
 80056fe:	8812      	ldrh	r2, [r2, #0]
 8005700:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	3302      	adds	r3, #2
 8005706:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3301      	adds	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	3b01      	subs	r3, #1
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1db      	bne.n	80056d8 <USB_WritePMA+0x40>
  }
}
 8005720:	46c0      	nop			@ (mov r8, r8)
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	46bd      	mov	sp, r7
 8005726:	b00a      	add	sp, #40	@ 0x28
 8005728:	bd80      	pop	{r7, pc}

0800572a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b08a      	sub	sp, #40	@ 0x28
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	0019      	movs	r1, r3
 8005736:	1dbb      	adds	r3, r7, #6
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	1c0a      	adds	r2, r1, #0
 800573e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005740:	1d3b      	adds	r3, r7, #4
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	b29b      	uxth	r3, r3
 8005748:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005752:	1dbb      	adds	r3, r7, #6
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	18d3      	adds	r3, r2, r3
 800575a:	2280      	movs	r2, #128	@ 0x80
 800575c:	00d2      	lsls	r2, r2, #3
 800575e:	4694      	mov	ip, r2
 8005760:	4463      	add	r3, ip
 8005762:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
 8005768:	e018      	b.n	800579c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	3302      	adds	r3, #2
 8005776:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	3301      	adds	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	b2da      	uxtb	r2, r3
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3301      	adds	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	3b01      	subs	r3, #1
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e3      	bne.n	800576a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4013      	ands	r3, r2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	701a      	strb	r2, [r3, #0]
  }
}
 80057c0:	46c0      	nop			@ (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b00a      	add	sp, #40	@ 0x28
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	000a      	movs	r2, r1
 80057d2:	1cfb      	adds	r3, r7, #3
 80057d4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80057d6:	230f      	movs	r3, #15
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7c1b      	ldrb	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d116      	bne.n	8005814 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057e6:	2380      	movs	r3, #128	@ 0x80
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	2181      	movs	r1, #129	@ 0x81
 80057f0:	f002 f883 	bl	80078fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057fa:	2380      	movs	r3, #128	@ 0x80
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	2101      	movs	r1, #1
 8005804:	f002 f879 	bl	80078fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	23b6      	movs	r3, #182	@ 0xb6
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	2101      	movs	r1, #1
 8005810:	50d1      	str	r1, [r2, r3]
 8005812:	e013      	b.n	800583c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	2340      	movs	r3, #64	@ 0x40
 8005818:	2202      	movs	r2, #2
 800581a:	2181      	movs	r1, #129	@ 0x81
 800581c:	f002 f86d 	bl	80078fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	2340      	movs	r3, #64	@ 0x40
 800582a:	2202      	movs	r2, #2
 800582c:	2101      	movs	r1, #1
 800582e:	f002 f864 	bl	80078fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	23b6      	movs	r3, #182	@ 0xb6
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	2101      	movs	r1, #1
 800583a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	2308      	movs	r3, #8
 8005840:	2203      	movs	r2, #3
 8005842:	2182      	movs	r1, #130	@ 0x82
 8005844:	f002 f859 	bl	80078fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800584e:	2387      	movs	r3, #135	@ 0x87
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	0018      	movs	r0, r3
 8005854:	f002 f9ea 	bl	8007c2c <USBD_static_malloc>
 8005858:	0001      	movs	r1, r0
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	23ae      	movs	r3, #174	@ 0xae
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	23ae      	movs	r3, #174	@ 0xae
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	58d3      	ldr	r3, [r2, r3]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800586e:	230f      	movs	r3, #15
 8005870:	18fb      	adds	r3, r7, r3
 8005872:	2201      	movs	r2, #1
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e02c      	b.n	80058d2 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	23ae      	movs	r3, #174	@ 0xae
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	58d3      	ldr	r3, [r2, r3]
 8005880:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	23af      	movs	r3, #175	@ 0xaf
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	58d3      	ldr	r3, [r2, r3]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	2385      	movs	r3, #133	@ 0x85
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	2100      	movs	r1, #0
 8005896:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	2386      	movs	r3, #134	@ 0x86
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	2100      	movs	r1, #0
 80058a0:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7c1b      	ldrb	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	2381      	movs	r3, #129	@ 0x81
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	58d2      	ldr	r2, [r2, r3]
 80058b2:	2380      	movs	r3, #128	@ 0x80
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	2101      	movs	r1, #1
 80058ba:	f002 f969 	bl	8007b90 <USBD_LL_PrepareReceive>
 80058be:	e008      	b.n	80058d2 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	2381      	movs	r3, #129	@ 0x81
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	58d2      	ldr	r2, [r2, r3]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	2340      	movs	r3, #64	@ 0x40
 80058cc:	2101      	movs	r1, #1
 80058ce:	f002 f95f 	bl	8007b90 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80058d2:	230f      	movs	r3, #15
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	781b      	ldrb	r3, [r3, #0]
}
 80058d8:	0018      	movs	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	b004      	add	sp, #16
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	000a      	movs	r2, r1
 80058ea:	1cfb      	adds	r3, r7, #3
 80058ec:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80058ee:	230f      	movs	r3, #15
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2181      	movs	r1, #129	@ 0x81
 80058fa:	0018      	movs	r0, r3
 80058fc:	f002 f834 	bl	8007968 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2101      	movs	r1, #1
 800590a:	0018      	movs	r0, r3
 800590c:	f002 f82c 	bl	8007968 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	23b6      	movs	r3, #182	@ 0xb6
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2100      	movs	r1, #0
 8005918:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2182      	movs	r1, #130	@ 0x82
 800591e:	0018      	movs	r0, r3
 8005920:	f002 f822 	bl	8007968 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	23ae      	movs	r3, #174	@ 0xae
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	58d3      	ldr	r3, [r2, r3]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d011      	beq.n	800595a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	23af      	movs	r3, #175	@ 0xaf
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	58d3      	ldr	r3, [r2, r3]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	23ae      	movs	r3, #174	@ 0xae
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	58d3      	ldr	r3, [r2, r3]
 800594a:	0018      	movs	r0, r3
 800594c:	f002 f97a 	bl	8007c44 <USBD_static_free>
    pdev->pClassData = NULL;
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	23ae      	movs	r3, #174	@ 0xae
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	2100      	movs	r1, #0
 8005958:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800595a:	230f      	movs	r3, #15
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	781b      	ldrb	r3, [r3, #0]
}
 8005960:	0018      	movs	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	b004      	add	sp, #16
 8005966:	bd80      	pop	{r7, pc}

08005968 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	23ae      	movs	r3, #174	@ 0xae
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	58d3      	ldr	r3, [r2, r3]
 800597a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800597c:	230f      	movs	r3, #15
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005984:	230c      	movs	r3, #12
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	2200      	movs	r2, #0
 800598a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800598c:	2317      	movs	r3, #23
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	001a      	movs	r2, r3
 800599a:	2360      	movs	r3, #96	@ 0x60
 800599c:	4013      	ands	r3, r2
 800599e:	d03d      	beq.n	8005a1c <USBD_CDC_Setup+0xb4>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d000      	beq.n	80059a6 <USBD_CDC_Setup+0x3e>
 80059a4:	e094      	b.n	8005ad0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	88db      	ldrh	r3, [r3, #6]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d02b      	beq.n	8005a06 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b25b      	sxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	da12      	bge.n	80059de <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	23af      	movs	r3, #175	@ 0xaf
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	58d3      	ldr	r3, [r2, r3]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80059c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	88d2      	ldrh	r2, [r2, #6]
 80059cc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059ce:	6939      	ldr	r1, [r7, #16]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	88da      	ldrh	r2, [r3, #6]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f001 fbaf 	bl	800713a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80059dc:	e083      	b.n	8005ae6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	7859      	ldrb	r1, [r3, #1]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	2380      	movs	r3, #128	@ 0x80
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	88db      	ldrh	r3, [r3, #6]
 80059ee:	b2d9      	uxtb	r1, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4a40      	ldr	r2, [pc, #256]	@ (8005af4 <USBD_CDC_Setup+0x18c>)
 80059f4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059f6:	6939      	ldr	r1, [r7, #16]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	88da      	ldrh	r2, [r3, #6]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	0018      	movs	r0, r3
 8005a00:	f001 fbce 	bl	80071a0 <USBD_CtlPrepareRx>
      break;
 8005a04:	e06f      	b.n	8005ae6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	23af      	movs	r3, #175	@ 0xaf
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	58d3      	ldr	r3, [r2, r3]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	7850      	ldrb	r0, [r2, #1]
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	4798      	blx	r3
      break;
 8005a1a:	e064      	b.n	8005ae6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b0b      	cmp	r3, #11
 8005a22:	d037      	beq.n	8005a94 <USBD_CDC_Setup+0x12c>
 8005a24:	dc47      	bgt.n	8005ab6 <USBD_CDC_Setup+0x14e>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <USBD_CDC_Setup+0xc8>
 8005a2a:	2b0a      	cmp	r3, #10
 8005a2c:	d019      	beq.n	8005a62 <USBD_CDC_Setup+0xfa>
 8005a2e:	e042      	b.n	8005ab6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	23a7      	movs	r3, #167	@ 0xa7
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	5cd3      	ldrb	r3, [r2, r3]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d107      	bne.n	8005a4c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	18f9      	adds	r1, r7, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f001 fb78 	bl	800713a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a4a:	e040      	b.n	8005ace <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	0011      	movs	r1, r2
 8005a52:	0018      	movs	r0, r3
 8005a54:	f001 faf3 	bl	800703e <USBD_CtlError>
            ret = USBD_FAIL;
 8005a58:	2317      	movs	r3, #23
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	701a      	strb	r2, [r3, #0]
          break;
 8005a60:	e035      	b.n	8005ace <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	23a7      	movs	r3, #167	@ 0xa7
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	5cd3      	ldrb	r3, [r2, r3]
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d107      	bne.n	8005a7e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a6e:	230f      	movs	r3, #15
 8005a70:	18f9      	adds	r1, r7, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	0018      	movs	r0, r3
 8005a78:	f001 fb5f 	bl	800713a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a7c:	e027      	b.n	8005ace <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0011      	movs	r1, r2
 8005a84:	0018      	movs	r0, r3
 8005a86:	f001 fada 	bl	800703e <USBD_CtlError>
            ret = USBD_FAIL;
 8005a8a:	2317      	movs	r3, #23
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	2202      	movs	r2, #2
 8005a90:	701a      	strb	r2, [r3, #0]
          break;
 8005a92:	e01c      	b.n	8005ace <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	23a7      	movs	r3, #167	@ 0xa7
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	5cd3      	ldrb	r3, [r2, r3]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d015      	beq.n	8005acc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	0011      	movs	r1, r2
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f001 fac9 	bl	800703e <USBD_CtlError>
            ret = USBD_FAIL;
 8005aac:	2317      	movs	r3, #23
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	701a      	strb	r2, [r3, #0]
          }
          break;
 8005ab4:	e00a      	b.n	8005acc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0011      	movs	r1, r2
 8005abc:	0018      	movs	r0, r3
 8005abe:	f001 fabe 	bl	800703e <USBD_CtlError>
          ret = USBD_FAIL;
 8005ac2:	2317      	movs	r3, #23
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	701a      	strb	r2, [r3, #0]
          break;
 8005aca:	e000      	b.n	8005ace <USBD_CDC_Setup+0x166>
          break;
 8005acc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005ace:	e00a      	b.n	8005ae6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0011      	movs	r1, r2
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f001 fab1 	bl	800703e <USBD_CtlError>
      ret = USBD_FAIL;
 8005adc:	2317      	movs	r3, #23
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	701a      	strb	r2, [r3, #0]
      break;
 8005ae4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005ae6:	2317      	movs	r3, #23
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	781b      	ldrb	r3, [r3, #0]
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b006      	add	sp, #24
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	00000201 	.word	0x00000201

08005af8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	000a      	movs	r2, r1
 8005b02:	1cfb      	adds	r3, r7, #3
 8005b04:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	23ae      	movs	r3, #174	@ 0xae
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	58d3      	ldr	r3, [r2, r3]
 8005b0e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	23b0      	movs	r3, #176	@ 0xb0
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	58d3      	ldr	r3, [r2, r3]
 8005b18:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	23ae      	movs	r3, #174	@ 0xae
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	58d3      	ldr	r3, [r2, r3]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d03e      	beq.n	8005ba4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b26:	1cfb      	adds	r3, r7, #3
 8005b28:	781a      	ldrb	r2, [r3, #0]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	0013      	movs	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	189b      	adds	r3, r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	18cb      	adds	r3, r1, r3
 8005b36:	331c      	adds	r3, #28
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d02b      	beq.n	8005b96 <USBD_CDC_DataIn+0x9e>
 8005b3e:	1cfb      	adds	r3, r7, #3
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	0013      	movs	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	189b      	adds	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	18cb      	adds	r3, r1, r3
 8005b4e:	331c      	adds	r3, #28
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	1cfb      	adds	r3, r7, #3
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	0013      	movs	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	189b      	adds	r3, r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	18cb      	adds	r3, r1, r3
 8005b62:	3338      	adds	r3, #56	@ 0x38
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	0019      	movs	r1, r3
 8005b68:	f7fa fb5e 	bl	8000228 <__aeabi_uidivmod>
 8005b6c:	1e0b      	subs	r3, r1, #0
 8005b6e:	d112      	bne.n	8005b96 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005b70:	1cfb      	adds	r3, r7, #3
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	0013      	movs	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	189b      	adds	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	18cb      	adds	r3, r1, r3
 8005b80:	331c      	adds	r3, #28
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b86:	1cfb      	adds	r3, r7, #3
 8005b88:	7819      	ldrb	r1, [r3, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f001 ffc7 	bl	8007b22 <USBD_LL_Transmit>
 8005b94:	e004      	b.n	8005ba0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	2385      	movs	r3, #133	@ 0x85
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b004      	add	sp, #16
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	000a      	movs	r2, r1
 8005bb8:	1cfb      	adds	r3, r7, #3
 8005bba:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	23ae      	movs	r3, #174	@ 0xae
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	58d3      	ldr	r3, [r2, r3]
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bc6:	1cfb      	adds	r3, r7, #3
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0011      	movs	r1, r2
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f002 f815 	bl	8007bfe <USBD_LL_GetRxDataSize>
 8005bd4:	0001      	movs	r1, r0
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	2383      	movs	r3, #131	@ 0x83
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	23ae      	movs	r3, #174	@ 0xae
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	58d3      	ldr	r3, [r2, r3]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d011      	beq.n	8005c0e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	23af      	movs	r3, #175	@ 0xaf
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	58d3      	ldr	r3, [r2, r3]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	2381      	movs	r3, #129	@ 0x81
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	58c8      	ldr	r0, [r1, r3]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2183      	movs	r1, #131	@ 0x83
 8005c00:	0089      	lsls	r1, r1, #2
 8005c02:	468c      	mov	ip, r1
 8005c04:	4463      	add	r3, ip
 8005c06:	0019      	movs	r1, r3
 8005c08:	4790      	blx	r2

    return USBD_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e000      	b.n	8005c10 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005c0e:	2302      	movs	r3, #2
  }
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b004      	add	sp, #16
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	23ae      	movs	r3, #174	@ 0xae
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	58d3      	ldr	r3, [r2, r3]
 8005c28:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	23af      	movs	r3, #175	@ 0xaf
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	58d3      	ldr	r3, [r2, r3]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d018      	beq.n	8005c68 <USBD_CDC_EP0_RxReady+0x50>
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	2380      	movs	r3, #128	@ 0x80
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	5cd3      	ldrb	r3, [r2, r3]
 8005c3e:	2bff      	cmp	r3, #255	@ 0xff
 8005c40:	d012      	beq.n	8005c68 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	23af      	movs	r3, #175	@ 0xaf
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	58d3      	ldr	r3, [r2, r3]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	68f9      	ldr	r1, [r7, #12]
 8005c4e:	2280      	movs	r2, #128	@ 0x80
 8005c50:	0092      	lsls	r2, r2, #2
 8005c52:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8005c54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4c06      	ldr	r4, [pc, #24]	@ (8005c74 <USBD_CDC_EP0_RxReady+0x5c>)
 8005c5a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	2380      	movs	r3, #128	@ 0x80
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	21ff      	movs	r1, #255	@ 0xff
 8005c66:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b005      	add	sp, #20
 8005c70:	bd90      	pop	{r4, r7, pc}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	00000201 	.word	0x00000201

08005c78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2243      	movs	r2, #67	@ 0x43
 8005c84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005c86:	4b02      	ldr	r3, [pc, #8]	@ (8005c90 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000094 	.word	0x20000094

08005c94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2243      	movs	r2, #67	@ 0x43
 8005ca0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005ca2:	4b02      	ldr	r3, [pc, #8]	@ (8005cac <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b002      	add	sp, #8
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000050 	.word	0x20000050

08005cb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2243      	movs	r2, #67	@ 0x43
 8005cbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005cbe:	4b02      	ldr	r3, [pc, #8]	@ (8005cc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	200000d8 	.word	0x200000d8

08005ccc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	220a      	movs	r2, #10
 8005cd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005cda:	4b02      	ldr	r3, [pc, #8]	@ (8005ce4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8005cdc:	0018      	movs	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	b002      	add	sp, #8
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	2000000c 	.word	0x2000000c

08005ce8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005cf2:	200f      	movs	r0, #15
 8005cf4:	183b      	adds	r3, r7, r0
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	23af      	movs	r3, #175	@ 0xaf
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8005d0a:	183b      	adds	r3, r7, r0
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005d10:	230f      	movs	r3, #15
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	781b      	ldrb	r3, [r3, #0]
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b004      	add	sp, #16
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b086      	sub	sp, #24
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	1dbb      	adds	r3, r7, #6
 8005d2a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	23ae      	movs	r3, #174	@ 0xae
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	58d3      	ldr	r3, [r2, r3]
 8005d34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	2382      	movs	r3, #130	@ 0x82
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8005d40:	1dbb      	adds	r3, r7, #6
 8005d42:	8819      	ldrh	r1, [r3, #0]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	2384      	movs	r3, #132	@ 0x84
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	0018      	movs	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b006      	add	sp, #24
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	23ae      	movs	r3, #174	@ 0xae
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	58d3      	ldr	r3, [r2, r3]
 8005d68:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	2381      	movs	r3, #129	@ 0x81
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b004      	add	sp, #16
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	23ae      	movs	r3, #174	@ 0xae
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	58d3      	ldr	r3, [r2, r3]
 8005d8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	23ae      	movs	r3, #174	@ 0xae
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	58d3      	ldr	r3, [r2, r3]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d022      	beq.n	8005de2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	2385      	movs	r3, #133	@ 0x85
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	58d3      	ldr	r3, [r2, r3]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11a      	bne.n	8005dde <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	2385      	movs	r3, #133	@ 0x85
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	2101      	movs	r1, #1
 8005db0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	2384      	movs	r3, #132	@ 0x84
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	58d2      	ldr	r2, [r2, r3]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	2382      	movs	r3, #130	@ 0x82
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	2384      	movs	r3, #132	@ 0x84
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	000a      	movs	r2, r1
 8005dd4:	2181      	movs	r1, #129	@ 0x81
 8005dd6:	f001 fea4 	bl	8007b22 <USBD_LL_Transmit>

      return USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e002      	b.n	8005de4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8005de2:	2302      	movs	r3, #2
  }
}
 8005de4:	0018      	movs	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b004      	add	sp, #16
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	23ae      	movs	r3, #174	@ 0xae
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	58d3      	ldr	r3, [r2, r3]
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	23ae      	movs	r3, #174	@ 0xae
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	58d3      	ldr	r3, [r2, r3]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d019      	beq.n	8005e3e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7c1b      	ldrb	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	2381      	movs	r3, #129	@ 0x81
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	58d2      	ldr	r2, [r2, r3]
 8005e1a:	2380      	movs	r3, #128	@ 0x80
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	2101      	movs	r1, #1
 8005e22:	f001 feb5 	bl	8007b90 <USBD_LL_PrepareReceive>
 8005e26:	e008      	b.n	8005e3a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	2381      	movs	r3, #129	@ 0x81
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	58d2      	ldr	r2, [r2, r3]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	2340      	movs	r3, #64	@ 0x40
 8005e34:	2101      	movs	r1, #1
 8005e36:	f001 feab 	bl	8007b90 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e000      	b.n	8005e40 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8005e3e:	2302      	movs	r3, #2
  }
}
 8005e40:	0018      	movs	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b004      	add	sp, #16
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	1dfb      	adds	r3, r7, #7
 8005e54:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e020      	b.n	8005ea2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	23ad      	movs	r3, #173	@ 0xad
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	58d3      	ldr	r3, [r2, r3]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	23ad      	movs	r3, #173	@ 0xad
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	2100      	movs	r1, #0
 8005e74:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	23ac      	movs	r3, #172	@ 0xac
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	23a7      	movs	r3, #167	@ 0xa7
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	1dfa      	adds	r2, r7, #7
 8005e94:	7812      	ldrb	r2, [r2, #0]
 8005e96:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f001 fca4 	bl	80077e8 <USBD_LL_Init>

  return USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b004      	add	sp, #16
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005eb4:	200f      	movs	r0, #15
 8005eb6:	183b      	adds	r3, r7, r0
 8005eb8:	2200      	movs	r2, #0
 8005eba:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	23ad      	movs	r3, #173	@ 0xad
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005ecc:	183b      	adds	r3, r7, r0
 8005ece:	2200      	movs	r2, #0
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	e003      	b.n	8005edc <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005ed4:	230f      	movs	r3, #15
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	2202      	movs	r2, #2
 8005eda:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005edc:	230f      	movs	r3, #15
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	781b      	ldrb	r3, [r3, #0]
}
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b004      	add	sp, #16
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f001 fcdb 	bl	80078b0 <USBD_LL_Start>

  return USBD_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	0018      	movs	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b002      	add	sp, #8
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	0018      	movs	r0, r3
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b002      	add	sp, #8
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f16:	b590      	push	{r4, r7, lr}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	000a      	movs	r2, r1
 8005f20:	1cfb      	adds	r3, r7, #3
 8005f22:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f24:	240f      	movs	r4, #15
 8005f26:	193b      	adds	r3, r7, r4
 8005f28:	2202      	movs	r2, #2
 8005f2a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	23ad      	movs	r3, #173	@ 0xad
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	58d3      	ldr	r3, [r2, r3]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	23ad      	movs	r3, #173	@ 0xad
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	58d3      	ldr	r3, [r2, r3]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	1cfa      	adds	r2, r7, #3
 8005f44:	7811      	ldrb	r1, [r2, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	0010      	movs	r0, r2
 8005f4a:	4798      	blx	r3
 8005f4c:	1e03      	subs	r3, r0, #0
 8005f4e:	d102      	bne.n	8005f56 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005f50:	193b      	adds	r3, r7, r4
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005f56:	230f      	movs	r3, #15
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	781b      	ldrb	r3, [r3, #0]
}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b005      	add	sp, #20
 8005f62:	bd90      	pop	{r4, r7, pc}

08005f64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	000a      	movs	r2, r1
 8005f6e:	1cfb      	adds	r3, r7, #3
 8005f70:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	23ad      	movs	r3, #173	@ 0xad
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	58d3      	ldr	r3, [r2, r3]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	1cfa      	adds	r2, r7, #3
 8005f7e:	7811      	ldrb	r1, [r2, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	0010      	movs	r0, r2
 8005f84:	4798      	blx	r3

  return USBD_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	0018      	movs	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b002      	add	sp, #8
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	22aa      	movs	r2, #170	@ 0xaa
 8005f9e:	0092      	lsls	r2, r2, #2
 8005fa0:	4694      	mov	ip, r2
 8005fa2:	4463      	add	r3, ip
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	0011      	movs	r1, r2
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f001 f810 	bl	8006fce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	23a5      	movs	r3, #165	@ 0xa5
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a23      	ldr	r2, [pc, #140]	@ (8006048 <USBD_LL_SetupStage+0xb8>)
 8005fbc:	5a9b      	ldrh	r3, [r3, r2]
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	23a6      	movs	r3, #166	@ 0xa6
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	23aa      	movs	r3, #170	@ 0xaa
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	5cd3      	ldrb	r3, [r2, r3]
 8005fd0:	001a      	movs	r2, r3
 8005fd2:	231f      	movs	r3, #31
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d019      	beq.n	800600e <USBD_LL_SetupStage+0x7e>
 8005fda:	d822      	bhi.n	8006022 <USBD_LL_SetupStage+0x92>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <USBD_LL_SetupStage+0x56>
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d00a      	beq.n	8005ffa <USBD_LL_SetupStage+0x6a>
 8005fe4:	e01d      	b.n	8006022 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	22aa      	movs	r2, #170	@ 0xaa
 8005fea:	0092      	lsls	r2, r2, #2
 8005fec:	189a      	adds	r2, r3, r2
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0011      	movs	r1, r2
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 fa10 	bl	8006418 <USBD_StdDevReq>
      break;
 8005ff8:	e020      	b.n	800603c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	22aa      	movs	r2, #170	@ 0xaa
 8005ffe:	0092      	lsls	r2, r2, #2
 8006000:	189a      	adds	r2, r3, r2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0011      	movs	r1, r2
 8006006:	0018      	movs	r0, r3
 8006008:	f000 fa78 	bl	80064fc <USBD_StdItfReq>
      break;
 800600c:	e016      	b.n	800603c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	22aa      	movs	r2, #170	@ 0xaa
 8006012:	0092      	lsls	r2, r2, #2
 8006014:	189a      	adds	r2, r3, r2
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	0011      	movs	r1, r2
 800601a:	0018      	movs	r0, r3
 800601c:	f000 fac5 	bl	80065aa <USBD_StdEPReq>
      break;
 8006020:	e00c      	b.n	800603c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	23aa      	movs	r3, #170	@ 0xaa
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	5cd3      	ldrb	r3, [r2, r3]
 800602a:	227f      	movs	r2, #127	@ 0x7f
 800602c:	4393      	bics	r3, r2
 800602e:	b2da      	uxtb	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	0011      	movs	r1, r2
 8006034:	0018      	movs	r0, r3
 8006036:	f001 fcc2 	bl	80079be <USBD_LL_StallEP>
      break;
 800603a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	0018      	movs	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	b002      	add	sp, #8
 8006044:	bd80      	pop	{r7, pc}
 8006046:	46c0      	nop			@ (mov r8, r8)
 8006048:	000002ae 	.word	0x000002ae

0800604c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	200b      	movs	r0, #11
 8006058:	183b      	adds	r3, r7, r0
 800605a:	1c0a      	adds	r2, r1, #0
 800605c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800605e:	183b      	adds	r3, r7, r0
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d154      	bne.n	8006110 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3355      	adds	r3, #85	@ 0x55
 800606a:	33ff      	adds	r3, #255	@ 0xff
 800606c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	23a5      	movs	r3, #165	@ 0xa5
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	58d3      	ldr	r3, [r2, r3]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d139      	bne.n	80060ee <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	429a      	cmp	r2, r3
 8006084:	d919      	bls.n	80060ba <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800609c:	429a      	cmp	r2, r3
 800609e:	d203      	bcs.n	80060a8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	e002      	b.n	80060ae <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	001a      	movs	r2, r3
 80060b4:	f001 f898 	bl	80071e8 <USBD_CtlContinueRx>
 80060b8:	e045      	b.n	8006146 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	23ad      	movs	r3, #173	@ 0xad
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	58d3      	ldr	r3, [r2, r3]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	23a7      	movs	r3, #167	@ 0xa7
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d107      	bne.n	80060e4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	23ad      	movs	r3, #173	@ 0xad
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	58d3      	ldr	r3, [r2, r3]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	0010      	movs	r0, r2
 80060e2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f001 f891 	bl	800720e <USBD_CtlSendStatus>
 80060ec:	e02b      	b.n	8006146 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	23a5      	movs	r3, #165	@ 0xa5
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	58d3      	ldr	r3, [r2, r3]
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d125      	bne.n	8006146 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	23a5      	movs	r3, #165	@ 0xa5
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	2100      	movs	r1, #0
 8006102:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2100      	movs	r1, #0
 8006108:	0018      	movs	r0, r3
 800610a:	f001 fc58 	bl	80079be <USBD_LL_StallEP>
 800610e:	e01a      	b.n	8006146 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	23ad      	movs	r3, #173	@ 0xad
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	58d3      	ldr	r3, [r2, r3]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d011      	beq.n	8006142 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	23a7      	movs	r3, #167	@ 0xa7
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8006126:	2b03      	cmp	r3, #3
 8006128:	d10b      	bne.n	8006142 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	23ad      	movs	r3, #173	@ 0xad
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	58d3      	ldr	r3, [r2, r3]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	220b      	movs	r2, #11
 8006136:	18ba      	adds	r2, r7, r2
 8006138:	7811      	ldrb	r1, [r2, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	0010      	movs	r0, r2
 800613e:	4798      	blx	r3
 8006140:	e001      	b.n	8006146 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006142:	2302      	movs	r3, #2
 8006144:	e000      	b.n	8006148 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	0018      	movs	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	b006      	add	sp, #24
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	200b      	movs	r0, #11
 800615c:	183b      	adds	r3, r7, r0
 800615e:	1c0a      	adds	r2, r1, #0
 8006160:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006162:	183b      	adds	r3, r7, r0
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d000      	beq.n	800616c <USBD_LL_DataInStage+0x1c>
 800616a:	e08e      	b.n	800628a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3314      	adds	r3, #20
 8006170:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	23a5      	movs	r3, #165	@ 0xa5
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	58d3      	ldr	r3, [r2, r3]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d164      	bne.n	8006248 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	429a      	cmp	r2, r3
 8006188:	d915      	bls.n	80061b6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	1ad2      	subs	r2, r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	b29a      	uxth	r2, r3
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	0018      	movs	r0, r3
 80061a4:	f000 ffe9 	bl	800717a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	2300      	movs	r3, #0
 80061ac:	2200      	movs	r2, #0
 80061ae:	2100      	movs	r1, #0
 80061b0:	f001 fcee 	bl	8007b90 <USBD_LL_PrepareReceive>
 80061b4:	e059      	b.n	800626a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	0019      	movs	r1, r3
 80061c0:	0010      	movs	r0, r2
 80061c2:	f7fa f831 	bl	8000228 <__aeabi_uidivmod>
 80061c6:	1e0b      	subs	r3, r1, #0
 80061c8:	d11f      	bne.n	800620a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d319      	bcc.n	800620a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	23a6      	movs	r3, #166	@ 0xa6
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d211      	bcs.n	800620a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2100      	movs	r1, #0
 80061ec:	0018      	movs	r0, r3
 80061ee:	f000 ffc4 	bl	800717a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	23a6      	movs	r3, #166	@ 0xa6
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	2100      	movs	r1, #0
 80061fa:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	2300      	movs	r3, #0
 8006200:	2200      	movs	r2, #0
 8006202:	2100      	movs	r1, #0
 8006204:	f001 fcc4 	bl	8007b90 <USBD_LL_PrepareReceive>
 8006208:	e02f      	b.n	800626a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	23ad      	movs	r3, #173	@ 0xad
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	58d3      	ldr	r3, [r2, r3]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00d      	beq.n	8006234 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	23a7      	movs	r3, #167	@ 0xa7
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006220:	2b03      	cmp	r3, #3
 8006222:	d107      	bne.n	8006234 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	23ad      	movs	r3, #173	@ 0xad
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	58d3      	ldr	r3, [r2, r3]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	0010      	movs	r0, r2
 8006232:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2180      	movs	r1, #128	@ 0x80
 8006238:	0018      	movs	r0, r3
 800623a:	f001 fbc0 	bl	80079be <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	0018      	movs	r0, r3
 8006242:	f000 fff8 	bl	8007236 <USBD_CtlReceiveStatus>
 8006246:	e010      	b.n	800626a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	23a5      	movs	r3, #165	@ 0xa5
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	58d3      	ldr	r3, [r2, r3]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d005      	beq.n	8006260 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	23a5      	movs	r3, #165	@ 0xa5
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2180      	movs	r1, #128	@ 0x80
 8006264:	0018      	movs	r0, r3
 8006266:	f001 fbaa 	bl	80079be <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	23a8      	movs	r3, #168	@ 0xa8
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	5cd3      	ldrb	r3, [r2, r3]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d124      	bne.n	80062c0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0018      	movs	r0, r3
 800627a:	f7ff fe43 	bl	8005f04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	23a8      	movs	r3, #168	@ 0xa8
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	2100      	movs	r1, #0
 8006286:	54d1      	strb	r1, [r2, r3]
 8006288:	e01a      	b.n	80062c0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	23ad      	movs	r3, #173	@ 0xad
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	58d3      	ldr	r3, [r2, r3]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d011      	beq.n	80062bc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	23a7      	movs	r3, #167	@ 0xa7
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d10b      	bne.n	80062bc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	23ad      	movs	r3, #173	@ 0xad
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	58d3      	ldr	r3, [r2, r3]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	220b      	movs	r2, #11
 80062b0:	18ba      	adds	r2, r7, r2
 80062b2:	7811      	ldrb	r1, [r2, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	0010      	movs	r0, r2
 80062b8:	4798      	blx	r3
 80062ba:	e001      	b.n	80062c0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062bc:	2302      	movs	r3, #2
 80062be:	e000      	b.n	80062c2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	0018      	movs	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b006      	add	sp, #24
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	2340      	movs	r3, #64	@ 0x40
 80062d6:	2200      	movs	r2, #0
 80062d8:	2100      	movs	r1, #0
 80062da:	f001 fb0e 	bl	80078fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	23ac      	movs	r3, #172	@ 0xac
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	2101      	movs	r1, #1
 80062e6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	23b2      	movs	r3, #178	@ 0xb2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	2140      	movs	r1, #64	@ 0x40
 80062f0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	2340      	movs	r3, #64	@ 0x40
 80062f6:	2200      	movs	r2, #0
 80062f8:	2180      	movs	r1, #128	@ 0x80
 80062fa:	f001 fafe 	bl	80078fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2240      	movs	r2, #64	@ 0x40
 8006308:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	23a7      	movs	r3, #167	@ 0xa7
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	2101      	movs	r1, #1
 8006312:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	23a5      	movs	r3, #165	@ 0xa5
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	2100      	movs	r1, #0
 800631c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	23a9      	movs	r3, #169	@ 0xa9
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	2100      	movs	r1, #0
 800632c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	23ae      	movs	r3, #174	@ 0xae
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	58d3      	ldr	r3, [r2, r3]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	23ad      	movs	r3, #173	@ 0xad
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	58d3      	ldr	r3, [r2, r3]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	b2d9      	uxtb	r1, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	0018      	movs	r0, r3
 800634e:	4790      	blx	r2
  }

  return USBD_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	0018      	movs	r0, r3
 8006354:	46bd      	mov	sp, r7
 8006356:	b002      	add	sp, #8
 8006358:	bd80      	pop	{r7, pc}

0800635a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	000a      	movs	r2, r1
 8006364:	1cfb      	adds	r3, r7, #3
 8006366:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	1cfa      	adds	r2, r7, #3
 800636c:	7812      	ldrb	r2, [r2, #0]
 800636e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	0018      	movs	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	b002      	add	sp, #8
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	23a7      	movs	r3, #167	@ 0xa7
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	5cd1      	ldrb	r1, [r2, r3]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a06      	ldr	r2, [pc, #24]	@ (80063a8 <USBD_LL_Suspend+0x2c>)
 8006390:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	23a7      	movs	r3, #167	@ 0xa7
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	2104      	movs	r1, #4
 800639a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	0018      	movs	r0, r3
 80063a0:	46bd      	mov	sp, r7
 80063a2:	b002      	add	sp, #8
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	46c0      	nop			@ (mov r8, r8)
 80063a8:	0000029d 	.word	0x0000029d

080063ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	23a7      	movs	r3, #167	@ 0xa7
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	5cd3      	ldrb	r3, [r2, r3]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d106      	bne.n	80063ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a05      	ldr	r2, [pc, #20]	@ (80063d8 <USBD_LL_Resume+0x2c>)
 80063c4:	5c99      	ldrb	r1, [r3, r2]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	23a7      	movs	r3, #167	@ 0xa7
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	0018      	movs	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b002      	add	sp, #8
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	0000029d 	.word	0x0000029d

080063dc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	23a7      	movs	r3, #167	@ 0xa7
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	5cd3      	ldrb	r3, [r2, r3]
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d10e      	bne.n	800640e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	23ad      	movs	r3, #173	@ 0xad
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	58d3      	ldr	r3, [r2, r3]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	23ad      	movs	r3, #173	@ 0xad
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	58d3      	ldr	r3, [r2, r3]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	0010      	movs	r0, r2
 800640c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	0018      	movs	r0, r3
 8006412:	46bd      	mov	sp, r7
 8006414:	b002      	add	sp, #8
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006422:	230f      	movs	r3, #15
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	2200      	movs	r2, #0
 8006428:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	001a      	movs	r2, r3
 8006430:	2360      	movs	r3, #96	@ 0x60
 8006432:	4013      	ands	r3, r2
 8006434:	2b40      	cmp	r3, #64	@ 0x40
 8006436:	d004      	beq.n	8006442 <USBD_StdDevReq+0x2a>
 8006438:	d84f      	bhi.n	80064da <USBD_StdDevReq+0xc2>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <USBD_StdDevReq+0x3e>
 800643e:	2b20      	cmp	r3, #32
 8006440:	d14b      	bne.n	80064da <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	23ad      	movs	r3, #173	@ 0xad
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	58d3      	ldr	r3, [r2, r3]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	0010      	movs	r0, r2
 8006452:	4798      	blx	r3
      break;
 8006454:	e048      	b.n	80064e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b09      	cmp	r3, #9
 800645c:	d835      	bhi.n	80064ca <USBD_StdDevReq+0xb2>
 800645e:	009a      	lsls	r2, r3, #2
 8006460:	4b25      	ldr	r3, [pc, #148]	@ (80064f8 <USBD_StdDevReq+0xe0>)
 8006462:	18d3      	adds	r3, r2, r3
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0011      	movs	r1, r2
 800646e:	0018      	movs	r0, r3
 8006470:	f000 fa52 	bl	8006918 <USBD_GetDescriptor>
          break;
 8006474:	e030      	b.n	80064d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	0011      	movs	r1, r2
 800647c:	0018      	movs	r0, r3
 800647e:	f000 fbfd 	bl	8006c7c <USBD_SetAddress>
          break;
 8006482:	e029      	b.n	80064d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	0011      	movs	r1, r2
 800648a:	0018      	movs	r0, r3
 800648c:	f000 fc4a 	bl	8006d24 <USBD_SetConfig>
          break;
 8006490:	e022      	b.n	80064d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	0011      	movs	r1, r2
 8006498:	0018      	movs	r0, r3
 800649a:	f000 fce7 	bl	8006e6c <USBD_GetConfig>
          break;
 800649e:	e01b      	b.n	80064d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	0011      	movs	r1, r2
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 fd1b 	bl	8006ee2 <USBD_GetStatus>
          break;
 80064ac:	e014      	b.n	80064d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0011      	movs	r1, r2
 80064b4:	0018      	movs	r0, r3
 80064b6:	f000 fd4e 	bl	8006f56 <USBD_SetFeature>
          break;
 80064ba:	e00d      	b.n	80064d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0011      	movs	r1, r2
 80064c2:	0018      	movs	r0, r3
 80064c4:	f000 fd5d 	bl	8006f82 <USBD_ClrFeature>
          break;
 80064c8:	e006      	b.n	80064d8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0011      	movs	r1, r2
 80064d0:	0018      	movs	r0, r3
 80064d2:	f000 fdb4 	bl	800703e <USBD_CtlError>
          break;
 80064d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80064d8:	e006      	b.n	80064e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	0011      	movs	r1, r2
 80064e0:	0018      	movs	r0, r3
 80064e2:	f000 fdac 	bl	800703e <USBD_CtlError>
      break;
 80064e6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80064e8:	230f      	movs	r3, #15
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	781b      	ldrb	r3, [r3, #0]
}
 80064ee:	0018      	movs	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b004      	add	sp, #16
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	46c0      	nop			@ (mov r8, r8)
 80064f8:	08008c20 	.word	0x08008c20

080064fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80064fc:	b5b0      	push	{r4, r5, r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006506:	230f      	movs	r3, #15
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	2200      	movs	r2, #0
 800650c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	001a      	movs	r2, r3
 8006514:	2360      	movs	r3, #96	@ 0x60
 8006516:	4013      	ands	r3, r2
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d004      	beq.n	8006526 <USBD_StdItfReq+0x2a>
 800651c:	d839      	bhi.n	8006592 <USBD_StdItfReq+0x96>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <USBD_StdItfReq+0x2a>
 8006522:	2b20      	cmp	r3, #32
 8006524:	d135      	bne.n	8006592 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	23a7      	movs	r3, #167	@ 0xa7
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	5cd3      	ldrb	r3, [r2, r3]
 800652e:	3b01      	subs	r3, #1
 8006530:	2b02      	cmp	r3, #2
 8006532:	d825      	bhi.n	8006580 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	889b      	ldrh	r3, [r3, #4]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d819      	bhi.n	8006572 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	23ad      	movs	r3, #173	@ 0xad
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	58d3      	ldr	r3, [r2, r3]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	250f      	movs	r5, #15
 800654a:	197c      	adds	r4, r7, r5
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	0010      	movs	r0, r2
 8006552:	4798      	blx	r3
 8006554:	0003      	movs	r3, r0
 8006556:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	88db      	ldrh	r3, [r3, #6]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d116      	bne.n	800658e <USBD_StdItfReq+0x92>
 8006560:	197b      	adds	r3, r7, r5
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d112      	bne.n	800658e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	0018      	movs	r0, r3
 800656c:	f000 fe4f 	bl	800720e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006570:	e00d      	b.n	800658e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	0011      	movs	r1, r2
 8006578:	0018      	movs	r0, r3
 800657a:	f000 fd60 	bl	800703e <USBD_CtlError>
          break;
 800657e:	e006      	b.n	800658e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0011      	movs	r1, r2
 8006586:	0018      	movs	r0, r3
 8006588:	f000 fd59 	bl	800703e <USBD_CtlError>
          break;
 800658c:	e000      	b.n	8006590 <USBD_StdItfReq+0x94>
          break;
 800658e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006590:	e006      	b.n	80065a0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	0011      	movs	r1, r2
 8006598:	0018      	movs	r0, r3
 800659a:	f000 fd50 	bl	800703e <USBD_CtlError>
      break;
 800659e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	0018      	movs	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b004      	add	sp, #16
 80065a8:	bdb0      	pop	{r4, r5, r7, pc}

080065aa <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80065aa:	b5b0      	push	{r4, r5, r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065b4:	230f      	movs	r3, #15
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	2200      	movs	r2, #0
 80065ba:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	889a      	ldrh	r2, [r3, #4]
 80065c0:	230e      	movs	r3, #14
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	001a      	movs	r2, r3
 80065cc:	2360      	movs	r3, #96	@ 0x60
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b40      	cmp	r3, #64	@ 0x40
 80065d2:	d006      	beq.n	80065e2 <USBD_StdEPReq+0x38>
 80065d4:	d900      	bls.n	80065d8 <USBD_StdEPReq+0x2e>
 80065d6:	e190      	b.n	80068fa <USBD_StdEPReq+0x350>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00c      	beq.n	80065f6 <USBD_StdEPReq+0x4c>
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d000      	beq.n	80065e2 <USBD_StdEPReq+0x38>
 80065e0:	e18b      	b.n	80068fa <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	23ad      	movs	r3, #173	@ 0xad
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	58d3      	ldr	r3, [r2, r3]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	0010      	movs	r0, r2
 80065f2:	4798      	blx	r3
      break;
 80065f4:	e188      	b.n	8006908 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	001a      	movs	r2, r3
 80065fc:	2360      	movs	r3, #96	@ 0x60
 80065fe:	4013      	ands	r3, r2
 8006600:	2b20      	cmp	r3, #32
 8006602:	d10f      	bne.n	8006624 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	23ad      	movs	r3, #173	@ 0xad
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	58d3      	ldr	r3, [r2, r3]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	250f      	movs	r5, #15
 8006610:	197c      	adds	r4, r7, r5
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	0010      	movs	r0, r2
 8006618:	4798      	blx	r3
 800661a:	0003      	movs	r3, r0
 800661c:	7023      	strb	r3, [r4, #0]

        return ret;
 800661e:	197b      	adds	r3, r7, r5
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	e174      	b.n	800690e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b03      	cmp	r3, #3
 800662a:	d007      	beq.n	800663c <USBD_StdEPReq+0x92>
 800662c:	dd00      	ble.n	8006630 <USBD_StdEPReq+0x86>
 800662e:	e15c      	b.n	80068ea <USBD_StdEPReq+0x340>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d100      	bne.n	8006636 <USBD_StdEPReq+0x8c>
 8006634:	e092      	b.n	800675c <USBD_StdEPReq+0x1b2>
 8006636:	2b01      	cmp	r3, #1
 8006638:	d04b      	beq.n	80066d2 <USBD_StdEPReq+0x128>
 800663a:	e156      	b.n	80068ea <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	23a7      	movs	r3, #167	@ 0xa7
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	5cd3      	ldrb	r3, [r2, r3]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d002      	beq.n	800664e <USBD_StdEPReq+0xa4>
 8006648:	2b03      	cmp	r3, #3
 800664a:	d01d      	beq.n	8006688 <USBD_StdEPReq+0xde>
 800664c:	e039      	b.n	80066c2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800664e:	220e      	movs	r2, #14
 8006650:	18bb      	adds	r3, r7, r2
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d010      	beq.n	800667a <USBD_StdEPReq+0xd0>
 8006658:	18bb      	adds	r3, r7, r2
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b80      	cmp	r3, #128	@ 0x80
 800665e:	d00c      	beq.n	800667a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006660:	18bb      	adds	r3, r7, r2
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	0011      	movs	r1, r2
 8006668:	0018      	movs	r0, r3
 800666a:	f001 f9a8 	bl	80079be <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2180      	movs	r1, #128	@ 0x80
 8006672:	0018      	movs	r0, r3
 8006674:	f001 f9a3 	bl	80079be <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006678:	e02a      	b.n	80066d0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	0011      	movs	r1, r2
 8006680:	0018      	movs	r0, r3
 8006682:	f000 fcdc 	bl	800703e <USBD_CtlError>
              break;
 8006686:	e023      	b.n	80066d0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	885b      	ldrh	r3, [r3, #2]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d113      	bne.n	80066b8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006690:	220e      	movs	r2, #14
 8006692:	18bb      	adds	r3, r7, r2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <USBD_StdEPReq+0x10e>
 800669a:	18bb      	adds	r3, r7, r2
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b80      	cmp	r3, #128	@ 0x80
 80066a0:	d00a      	beq.n	80066b8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	88db      	ldrh	r3, [r3, #6]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80066aa:	18bb      	adds	r3, r7, r2
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0011      	movs	r1, r2
 80066b2:	0018      	movs	r0, r3
 80066b4:	f001 f983 	bl	80079be <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	0018      	movs	r0, r3
 80066bc:	f000 fda7 	bl	800720e <USBD_CtlSendStatus>

              break;
 80066c0:	e006      	b.n	80066d0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	0011      	movs	r1, r2
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 fcb8 	bl	800703e <USBD_CtlError>
              break;
 80066ce:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80066d0:	e112      	b.n	80068f8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	23a7      	movs	r3, #167	@ 0xa7
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	5cd3      	ldrb	r3, [r2, r3]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d002      	beq.n	80066e4 <USBD_StdEPReq+0x13a>
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d01d      	beq.n	800671e <USBD_StdEPReq+0x174>
 80066e2:	e032      	b.n	800674a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066e4:	220e      	movs	r2, #14
 80066e6:	18bb      	adds	r3, r7, r2
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d010      	beq.n	8006710 <USBD_StdEPReq+0x166>
 80066ee:	18bb      	adds	r3, r7, r2
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b80      	cmp	r3, #128	@ 0x80
 80066f4:	d00c      	beq.n	8006710 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80066f6:	18bb      	adds	r3, r7, r2
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	0011      	movs	r1, r2
 80066fe:	0018      	movs	r0, r3
 8006700:	f001 f95d 	bl	80079be <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2180      	movs	r1, #128	@ 0x80
 8006708:	0018      	movs	r0, r3
 800670a:	f001 f958 	bl	80079be <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800670e:	e024      	b.n	800675a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	0011      	movs	r1, r2
 8006716:	0018      	movs	r0, r3
 8006718:	f000 fc91 	bl	800703e <USBD_CtlError>
              break;
 800671c:	e01d      	b.n	800675a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	885b      	ldrh	r3, [r3, #2]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d118      	bne.n	8006758 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006726:	210e      	movs	r1, #14
 8006728:	187b      	adds	r3, r7, r1
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	227f      	movs	r2, #127	@ 0x7f
 800672e:	4013      	ands	r3, r2
 8006730:	d006      	beq.n	8006740 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006732:	187b      	adds	r3, r7, r1
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	0011      	movs	r1, r2
 800673a:	0018      	movs	r0, r3
 800673c:	f001 f96a 	bl	8007a14 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	0018      	movs	r0, r3
 8006744:	f000 fd63 	bl	800720e <USBD_CtlSendStatus>
              }
              break;
 8006748:	e006      	b.n	8006758 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	0011      	movs	r1, r2
 8006750:	0018      	movs	r0, r3
 8006752:	f000 fc74 	bl	800703e <USBD_CtlError>
              break;
 8006756:	e000      	b.n	800675a <USBD_StdEPReq+0x1b0>
              break;
 8006758:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800675a:	e0cd      	b.n	80068f8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	23a7      	movs	r3, #167	@ 0xa7
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	5cd3      	ldrb	r3, [r2, r3]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d002      	beq.n	800676e <USBD_StdEPReq+0x1c4>
 8006768:	2b03      	cmp	r3, #3
 800676a:	d03c      	beq.n	80067e6 <USBD_StdEPReq+0x23c>
 800676c:	e0b5      	b.n	80068da <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800676e:	220e      	movs	r2, #14
 8006770:	18bb      	adds	r3, r7, r2
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <USBD_StdEPReq+0x1e4>
 8006778:	18bb      	adds	r3, r7, r2
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b80      	cmp	r3, #128	@ 0x80
 800677e:	d006      	beq.n	800678e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	0011      	movs	r1, r2
 8006786:	0018      	movs	r0, r3
 8006788:	f000 fc59 	bl	800703e <USBD_CtlError>
                break;
 800678c:	e0ac      	b.n	80068e8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800678e:	220e      	movs	r2, #14
 8006790:	18bb      	adds	r3, r7, r2
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	b25b      	sxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	da0c      	bge.n	80067b4 <USBD_StdEPReq+0x20a>
 800679a:	18bb      	adds	r3, r7, r2
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	227f      	movs	r2, #127	@ 0x7f
 80067a0:	401a      	ands	r2, r3
 80067a2:	0013      	movs	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	189b      	adds	r3, r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	3310      	adds	r3, #16
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	18d3      	adds	r3, r2, r3
 80067b0:	3304      	adds	r3, #4
 80067b2:	e00d      	b.n	80067d0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067b4:	230e      	movs	r3, #14
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	227f      	movs	r2, #127	@ 0x7f
 80067bc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067be:	0013      	movs	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	189b      	adds	r3, r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	3351      	adds	r3, #81	@ 0x51
 80067c8:	33ff      	adds	r3, #255	@ 0xff
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	18d3      	adds	r3, r2, r3
 80067ce:	3304      	adds	r3, #4
 80067d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2202      	movs	r2, #2
 80067de:	0018      	movs	r0, r3
 80067e0:	f000 fcab 	bl	800713a <USBD_CtlSendData>
              break;
 80067e4:	e080      	b.n	80068e8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067e6:	220e      	movs	r2, #14
 80067e8:	18bb      	adds	r3, r7, r2
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	da14      	bge.n	800681c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067f2:	18bb      	adds	r3, r7, r2
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	220f      	movs	r2, #15
 80067f8:	401a      	ands	r2, r3
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	0013      	movs	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	189b      	adds	r3, r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	18cb      	adds	r3, r1, r3
 8006806:	3318      	adds	r3, #24
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11e      	bne.n	800684c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	0011      	movs	r1, r2
 8006814:	0018      	movs	r0, r3
 8006816:	f000 fc12 	bl	800703e <USBD_CtlError>
                  break;
 800681a:	e065      	b.n	80068e8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800681c:	230e      	movs	r3, #14
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	220f      	movs	r2, #15
 8006824:	401a      	ands	r2, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	23ac      	movs	r3, #172	@ 0xac
 800682a:	0059      	lsls	r1, r3, #1
 800682c:	0013      	movs	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	189b      	adds	r3, r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	18c3      	adds	r3, r0, r3
 8006836:	185b      	adds	r3, r3, r1
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	0011      	movs	r1, r2
 8006844:	0018      	movs	r0, r3
 8006846:	f000 fbfa 	bl	800703e <USBD_CtlError>
                  break;
 800684a:	e04d      	b.n	80068e8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800684c:	220e      	movs	r2, #14
 800684e:	18bb      	adds	r3, r7, r2
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b25b      	sxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	da0c      	bge.n	8006872 <USBD_StdEPReq+0x2c8>
 8006858:	18bb      	adds	r3, r7, r2
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	227f      	movs	r2, #127	@ 0x7f
 800685e:	401a      	ands	r2, r3
 8006860:	0013      	movs	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	189b      	adds	r3, r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	3310      	adds	r3, #16
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	18d3      	adds	r3, r2, r3
 800686e:	3304      	adds	r3, #4
 8006870:	e00d      	b.n	800688e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006872:	230e      	movs	r3, #14
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	227f      	movs	r2, #127	@ 0x7f
 800687a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800687c:	0013      	movs	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	189b      	adds	r3, r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	3351      	adds	r3, #81	@ 0x51
 8006886:	33ff      	adds	r3, #255	@ 0xff
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	18d3      	adds	r3, r2, r3
 800688c:	3304      	adds	r3, #4
 800688e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006890:	220e      	movs	r2, #14
 8006892:	18bb      	adds	r3, r7, r2
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <USBD_StdEPReq+0x2f8>
 800689a:	18bb      	adds	r3, r7, r2
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b80      	cmp	r3, #128	@ 0x80
 80068a0:	d103      	bne.n	80068aa <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	e010      	b.n	80068cc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80068aa:	230e      	movs	r3, #14
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	0011      	movs	r1, r2
 80068b4:	0018      	movs	r0, r3
 80068b6:	f001 f8d8 	bl	8007a6a <USBD_LL_IsStallEP>
 80068ba:	1e03      	subs	r3, r0, #0
 80068bc:	d003      	beq.n	80068c6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2201      	movs	r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e002      	b.n	80068cc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2202      	movs	r2, #2
 80068d2:	0018      	movs	r0, r3
 80068d4:	f000 fc31 	bl	800713a <USBD_CtlSendData>
              break;
 80068d8:	e006      	b.n	80068e8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0011      	movs	r1, r2
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 fbac 	bl	800703e <USBD_CtlError>
              break;
 80068e6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80068e8:	e006      	b.n	80068f8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	0011      	movs	r1, r2
 80068f0:	0018      	movs	r0, r3
 80068f2:	f000 fba4 	bl	800703e <USBD_CtlError>
          break;
 80068f6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80068f8:	e006      	b.n	8006908 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	0011      	movs	r1, r2
 8006900:	0018      	movs	r0, r3
 8006902:	f000 fb9c 	bl	800703e <USBD_CtlError>
      break;
 8006906:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006908:	230f      	movs	r3, #15
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	781b      	ldrb	r3, [r3, #0]
}
 800690e:	0018      	movs	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	b004      	add	sp, #16
 8006914:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006918 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006922:	2308      	movs	r3, #8
 8006924:	18fb      	adds	r3, r7, r3
 8006926:	2200      	movs	r2, #0
 8006928:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800692e:	230b      	movs	r3, #11
 8006930:	18fb      	adds	r3, r7, r3
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	885b      	ldrh	r3, [r3, #2]
 800693a:	0a1b      	lsrs	r3, r3, #8
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b07      	cmp	r3, #7
 8006940:	d900      	bls.n	8006944 <USBD_GetDescriptor+0x2c>
 8006942:	e159      	b.n	8006bf8 <USBD_GetDescriptor+0x2e0>
 8006944:	009a      	lsls	r2, r3, #2
 8006946:	4bcb      	ldr	r3, [pc, #812]	@ (8006c74 <USBD_GetDescriptor+0x35c>)
 8006948:	18d3      	adds	r3, r2, r3
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	23ac      	movs	r3, #172	@ 0xac
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	58d3      	ldr	r3, [r2, r3]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	7c12      	ldrb	r2, [r2, #16]
 800695c:	2108      	movs	r1, #8
 800695e:	1879      	adds	r1, r7, r1
 8006960:	0010      	movs	r0, r2
 8006962:	4798      	blx	r3
 8006964:	0003      	movs	r3, r0
 8006966:	60fb      	str	r3, [r7, #12]
      break;
 8006968:	e153      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7c1b      	ldrb	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10f      	bne.n	8006992 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	23ad      	movs	r3, #173	@ 0xad
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	58d3      	ldr	r3, [r2, r3]
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	2208      	movs	r2, #8
 800697e:	18ba      	adds	r2, r7, r2
 8006980:	0010      	movs	r0, r2
 8006982:	4798      	blx	r3
 8006984:	0003      	movs	r3, r0
 8006986:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	2202      	movs	r2, #2
 800698e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006990:	e13f      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	23ad      	movs	r3, #173	@ 0xad
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	58d3      	ldr	r3, [r2, r3]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	2208      	movs	r2, #8
 800699e:	18ba      	adds	r2, r7, r2
 80069a0:	0010      	movs	r0, r2
 80069a2:	4798      	blx	r3
 80069a4:	0003      	movs	r3, r0
 80069a6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3301      	adds	r3, #1
 80069ac:	2202      	movs	r2, #2
 80069ae:	701a      	strb	r2, [r3, #0]
      break;
 80069b0:	e12f      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	885b      	ldrh	r3, [r3, #2]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b05      	cmp	r3, #5
 80069ba:	d900      	bls.n	80069be <USBD_GetDescriptor+0xa6>
 80069bc:	e0d0      	b.n	8006b60 <USBD_GetDescriptor+0x248>
 80069be:	009a      	lsls	r2, r3, #2
 80069c0:	4bad      	ldr	r3, [pc, #692]	@ (8006c78 <USBD_GetDescriptor+0x360>)
 80069c2:	18d3      	adds	r3, r2, r3
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	23ac      	movs	r3, #172	@ 0xac
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	58d3      	ldr	r3, [r2, r3]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00d      	beq.n	80069f2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	23ac      	movs	r3, #172	@ 0xac
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	58d3      	ldr	r3, [r2, r3]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	7c12      	ldrb	r2, [r2, #16]
 80069e4:	2108      	movs	r1, #8
 80069e6:	1879      	adds	r1, r7, r1
 80069e8:	0010      	movs	r0, r2
 80069ea:	4798      	blx	r3
 80069ec:	0003      	movs	r3, r0
 80069ee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f0:	e0c3      	b.n	8006b7a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	0011      	movs	r1, r2
 80069f8:	0018      	movs	r0, r3
 80069fa:	f000 fb20 	bl	800703e <USBD_CtlError>
            err++;
 80069fe:	210b      	movs	r1, #11
 8006a00:	187b      	adds	r3, r7, r1
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	187b      	adds	r3, r7, r1
 8006a06:	3201      	adds	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
          break;
 8006a0a:	e0b6      	b.n	8006b7a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	23ac      	movs	r3, #172	@ 0xac
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	58d3      	ldr	r3, [r2, r3]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	23ac      	movs	r3, #172	@ 0xac
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	58d3      	ldr	r3, [r2, r3]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7c12      	ldrb	r2, [r2, #16]
 8006a28:	2108      	movs	r1, #8
 8006a2a:	1879      	adds	r1, r7, r1
 8006a2c:	0010      	movs	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	0003      	movs	r3, r0
 8006a32:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a34:	e0a1      	b.n	8006b7a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	0011      	movs	r1, r2
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f000 fafe 	bl	800703e <USBD_CtlError>
            err++;
 8006a42:	210b      	movs	r1, #11
 8006a44:	187b      	adds	r3, r7, r1
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	187b      	adds	r3, r7, r1
 8006a4a:	3201      	adds	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
          break;
 8006a4e:	e094      	b.n	8006b7a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	23ac      	movs	r3, #172	@ 0xac
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	58d3      	ldr	r3, [r2, r3]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00d      	beq.n	8006a7a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	23ac      	movs	r3, #172	@ 0xac
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	58d3      	ldr	r3, [r2, r3]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	7c12      	ldrb	r2, [r2, #16]
 8006a6c:	2108      	movs	r1, #8
 8006a6e:	1879      	adds	r1, r7, r1
 8006a70:	0010      	movs	r0, r2
 8006a72:	4798      	blx	r3
 8006a74:	0003      	movs	r3, r0
 8006a76:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a78:	e07f      	b.n	8006b7a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	0011      	movs	r1, r2
 8006a80:	0018      	movs	r0, r3
 8006a82:	f000 fadc 	bl	800703e <USBD_CtlError>
            err++;
 8006a86:	210b      	movs	r1, #11
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	781a      	ldrb	r2, [r3, #0]
 8006a8c:	187b      	adds	r3, r7, r1
 8006a8e:	3201      	adds	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
          break;
 8006a92:	e072      	b.n	8006b7a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	23ac      	movs	r3, #172	@ 0xac
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	58d3      	ldr	r3, [r2, r3]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	23ac      	movs	r3, #172	@ 0xac
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	58d3      	ldr	r3, [r2, r3]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	7c12      	ldrb	r2, [r2, #16]
 8006ab0:	2108      	movs	r1, #8
 8006ab2:	1879      	adds	r1, r7, r1
 8006ab4:	0010      	movs	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	0003      	movs	r3, r0
 8006aba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006abc:	e05d      	b.n	8006b7a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	0011      	movs	r1, r2
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 faba 	bl	800703e <USBD_CtlError>
            err++;
 8006aca:	210b      	movs	r1, #11
 8006acc:	187b      	adds	r3, r7, r1
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	3201      	adds	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
          break;
 8006ad6:	e050      	b.n	8006b7a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	23ac      	movs	r3, #172	@ 0xac
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	58d3      	ldr	r3, [r2, r3]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	23ac      	movs	r3, #172	@ 0xac
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	58d3      	ldr	r3, [r2, r3]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	2108      	movs	r1, #8
 8006af6:	1879      	adds	r1, r7, r1
 8006af8:	0010      	movs	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	0003      	movs	r3, r0
 8006afe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b00:	e03b      	b.n	8006b7a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0011      	movs	r1, r2
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 fa98 	bl	800703e <USBD_CtlError>
            err++;
 8006b0e:	210b      	movs	r1, #11
 8006b10:	187b      	adds	r3, r7, r1
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	187b      	adds	r3, r7, r1
 8006b16:	3201      	adds	r2, #1
 8006b18:	701a      	strb	r2, [r3, #0]
          break;
 8006b1a:	e02e      	b.n	8006b7a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	23ac      	movs	r3, #172	@ 0xac
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	58d3      	ldr	r3, [r2, r3]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	23ac      	movs	r3, #172	@ 0xac
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	58d3      	ldr	r3, [r2, r3]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	2108      	movs	r1, #8
 8006b3a:	1879      	adds	r1, r7, r1
 8006b3c:	0010      	movs	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	0003      	movs	r3, r0
 8006b42:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b44:	e019      	b.n	8006b7a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	0011      	movs	r1, r2
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f000 fa76 	bl	800703e <USBD_CtlError>
            err++;
 8006b52:	210b      	movs	r1, #11
 8006b54:	187b      	adds	r3, r7, r1
 8006b56:	781a      	ldrb	r2, [r3, #0]
 8006b58:	187b      	adds	r3, r7, r1
 8006b5a:	3201      	adds	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
          break;
 8006b5e:	e00c      	b.n	8006b7a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	0011      	movs	r1, r2
 8006b66:	0018      	movs	r0, r3
 8006b68:	f000 fa69 	bl	800703e <USBD_CtlError>
          err++;
 8006b6c:	210b      	movs	r1, #11
 8006b6e:	187b      	adds	r3, r7, r1
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	187b      	adds	r3, r7, r1
 8006b74:	3201      	adds	r2, #1
 8006b76:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006b78:	e04b      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>
 8006b7a:	e04a      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7c1b      	ldrb	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10b      	bne.n	8006b9c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	23ad      	movs	r3, #173	@ 0xad
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	58d3      	ldr	r3, [r2, r3]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8e:	2208      	movs	r2, #8
 8006b90:	18ba      	adds	r2, r7, r2
 8006b92:	0010      	movs	r0, r2
 8006b94:	4798      	blx	r3
 8006b96:	0003      	movs	r3, r0
 8006b98:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b9a:	e03a      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0011      	movs	r1, r2
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f000 fa4b 	bl	800703e <USBD_CtlError>
        err++;
 8006ba8:	210b      	movs	r1, #11
 8006baa:	187b      	adds	r3, r7, r1
 8006bac:	781a      	ldrb	r2, [r3, #0]
 8006bae:	187b      	adds	r3, r7, r1
 8006bb0:	3201      	adds	r2, #1
 8006bb2:	701a      	strb	r2, [r3, #0]
      break;
 8006bb4:	e02d      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7c1b      	ldrb	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10f      	bne.n	8006bde <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	23ad      	movs	r3, #173	@ 0xad
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	58d3      	ldr	r3, [r2, r3]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	2208      	movs	r2, #8
 8006bca:	18ba      	adds	r2, r7, r2
 8006bcc:	0010      	movs	r0, r2
 8006bce:	4798      	blx	r3
 8006bd0:	0003      	movs	r3, r0
 8006bd2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	2207      	movs	r2, #7
 8006bda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bdc:	e019      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	0011      	movs	r1, r2
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 fa2a 	bl	800703e <USBD_CtlError>
        err++;
 8006bea:	210b      	movs	r1, #11
 8006bec:	187b      	adds	r3, r7, r1
 8006bee:	781a      	ldrb	r2, [r3, #0]
 8006bf0:	187b      	adds	r3, r7, r1
 8006bf2:	3201      	adds	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
      break;
 8006bf6:	e00c      	b.n	8006c12 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	0011      	movs	r1, r2
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f000 fa1d 	bl	800703e <USBD_CtlError>
      err++;
 8006c04:	210b      	movs	r1, #11
 8006c06:	187b      	adds	r3, r7, r1
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	187b      	adds	r3, r7, r1
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
      break;
 8006c10:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8006c12:	230b      	movs	r3, #11
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d127      	bne.n	8006c6c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006c1c:	2108      	movs	r1, #8
 8006c1e:	187b      	adds	r3, r7, r1
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d019      	beq.n	8006c5a <USBD_GetDescriptor+0x342>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	88db      	ldrh	r3, [r3, #6]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d015      	beq.n	8006c5a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88da      	ldrh	r2, [r3, #6]
 8006c32:	187b      	adds	r3, r7, r1
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	1c18      	adds	r0, r3, #0
 8006c38:	1c11      	adds	r1, r2, #0
 8006c3a:	b28a      	uxth	r2, r1
 8006c3c:	b283      	uxth	r3, r0
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d900      	bls.n	8006c44 <USBD_GetDescriptor+0x32c>
 8006c42:	1c01      	adds	r1, r0, #0
 8006c44:	b28a      	uxth	r2, r1
 8006c46:	2108      	movs	r1, #8
 8006c48:	187b      	adds	r3, r7, r1
 8006c4a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c4c:	187b      	adds	r3, r7, r1
 8006c4e:	881a      	ldrh	r2, [r3, #0]
 8006c50:	68f9      	ldr	r1, [r7, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 fa70 	bl	800713a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	88db      	ldrh	r3, [r3, #6]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d105      	bne.n	8006c6e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fad2 	bl	800720e <USBD_CtlSendStatus>
 8006c6a:	e000      	b.n	8006c6e <USBD_GetDescriptor+0x356>
    return;
 8006c6c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b004      	add	sp, #16
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	08008c48 	.word	0x08008c48
 8006c78:	08008c68 	.word	0x08008c68

08006c7c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	889b      	ldrh	r3, [r3, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d13d      	bne.n	8006d0a <USBD_SetAddress+0x8e>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	88db      	ldrh	r3, [r3, #6]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d139      	bne.n	8006d0a <USBD_SetAddress+0x8e>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	885b      	ldrh	r3, [r3, #2]
 8006c9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c9c:	d835      	bhi.n	8006d0a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	885b      	ldrh	r3, [r3, #2]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	230f      	movs	r3, #15
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	217f      	movs	r1, #127	@ 0x7f
 8006caa:	400a      	ands	r2, r1
 8006cac:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	23a7      	movs	r3, #167	@ 0xa7
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	5cd3      	ldrb	r3, [r2, r3]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d106      	bne.n	8006cc8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0011      	movs	r1, r2
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f000 f9bc 	bl	800703e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc6:	e027      	b.n	8006d18 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	240f      	movs	r4, #15
 8006ccc:	193a      	adds	r2, r7, r4
 8006cce:	4914      	ldr	r1, [pc, #80]	@ (8006d20 <USBD_SetAddress+0xa4>)
 8006cd0:	7812      	ldrb	r2, [r2, #0]
 8006cd2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cd4:	193b      	adds	r3, r7, r4
 8006cd6:	781a      	ldrb	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	0011      	movs	r1, r2
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f000 fef5 	bl	8007acc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 fa92 	bl	800720e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cea:	193b      	adds	r3, r7, r4
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	23a7      	movs	r3, #167	@ 0xa7
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	2102      	movs	r1, #2
 8006cfa:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cfc:	e00c      	b.n	8006d18 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	23a7      	movs	r3, #167	@ 0xa7
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	2101      	movs	r1, #1
 8006d06:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d08:	e006      	b.n	8006d18 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	0011      	movs	r1, r2
 8006d10:	0018      	movs	r0, r3
 8006d12:	f000 f994 	bl	800703e <USBD_CtlError>
  }
}
 8006d16:	46c0      	nop			@ (mov r8, r8)
 8006d18:	46c0      	nop			@ (mov r8, r8)
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b005      	add	sp, #20
 8006d1e:	bd90      	pop	{r4, r7, pc}
 8006d20:	0000029e 	.word	0x0000029e

08006d24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	885b      	ldrh	r3, [r3, #2]
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	4b4c      	ldr	r3, [pc, #304]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006d36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d38:	4b4b      	ldr	r3, [pc, #300]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d906      	bls.n	8006d4e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	0011      	movs	r1, r2
 8006d46:	0018      	movs	r0, r3
 8006d48:	f000 f979 	bl	800703e <USBD_CtlError>
 8006d4c:	e088      	b.n	8006e60 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	23a7      	movs	r3, #167	@ 0xa7
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	5cd3      	ldrb	r3, [r2, r3]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d002      	beq.n	8006d60 <USBD_SetConfig+0x3c>
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d029      	beq.n	8006db2 <USBD_SetConfig+0x8e>
 8006d5e:	e071      	b.n	8006e44 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006d60:	4b41      	ldr	r3, [pc, #260]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01f      	beq.n	8006da8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006d68:	4b3f      	ldr	r3, [pc, #252]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	001a      	movs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	23a7      	movs	r3, #167	@ 0xa7
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	2103      	movs	r1, #3
 8006d7a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	0011      	movs	r1, r2
 8006d84:	0018      	movs	r0, r3
 8006d86:	f7ff f8c6 	bl	8005f16 <USBD_SetClassConfig>
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d106      	bne.n	8006d9e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0011      	movs	r1, r2
 8006d96:	0018      	movs	r0, r3
 8006d98:	f000 f951 	bl	800703e <USBD_CtlError>
            return;
 8006d9c:	e060      	b.n	8006e60 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	0018      	movs	r0, r3
 8006da2:	f000 fa34 	bl	800720e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006da6:	e05b      	b.n	8006e60 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	0018      	movs	r0, r3
 8006dac:	f000 fa2f 	bl	800720e <USBD_CtlSendStatus>
        break;
 8006db0:	e056      	b.n	8006e60 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006db2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d115      	bne.n	8006de6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	23a7      	movs	r3, #167	@ 0xa7
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006dc4:	4b28      	ldr	r3, [pc, #160]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	001a      	movs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006dce:	4b26      	ldr	r3, [pc, #152]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0011      	movs	r1, r2
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f7ff f8c4 	bl	8005f64 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0018      	movs	r0, r3
 8006de0:	f000 fa15 	bl	800720e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006de4:	e03c      	b.n	8006e60 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006de6:	4b20      	ldr	r3, [pc, #128]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	001a      	movs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d022      	beq.n	8006e3a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0011      	movs	r1, r2
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7ff f8b0 	bl	8005f64 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006e04:	4b18      	ldr	r3, [pc, #96]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	001a      	movs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e0e:	4b16      	ldr	r3, [pc, #88]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006e10:	781a      	ldrb	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	0011      	movs	r1, r2
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7ff f87d 	bl	8005f16 <USBD_SetClassConfig>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d106      	bne.n	8006e30 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	0011      	movs	r1, r2
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f000 f908 	bl	800703e <USBD_CtlError>
            return;
 8006e2e:	e017      	b.n	8006e60 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	0018      	movs	r0, r3
 8006e34:	f000 f9eb 	bl	800720e <USBD_CtlSendStatus>
        break;
 8006e38:	e012      	b.n	8006e60 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f000 f9e6 	bl	800720e <USBD_CtlSendStatus>
        break;
 8006e42:	e00d      	b.n	8006e60 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	0011      	movs	r1, r2
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f000 f8f7 	bl	800703e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006e50:	4b05      	ldr	r3, [pc, #20]	@ (8006e68 <USBD_SetConfig+0x144>)
 8006e52:	781a      	ldrb	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f7ff f883 	bl	8005f64 <USBD_ClrClassConfig>
        break;
 8006e5e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b002      	add	sp, #8
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	20000200 	.word	0x20000200

08006e6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	88db      	ldrh	r3, [r3, #6]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d006      	beq.n	8006e8c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	0011      	movs	r1, r2
 8006e84:	0018      	movs	r0, r3
 8006e86:	f000 f8da 	bl	800703e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e8a:	e026      	b.n	8006eda <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	23a7      	movs	r3, #167	@ 0xa7
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	5cd3      	ldrb	r3, [r2, r3]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	dc02      	bgt.n	8006e9e <USBD_GetConfig+0x32>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc03      	bgt.n	8006ea4 <USBD_GetConfig+0x38>
 8006e9c:	e016      	b.n	8006ecc <USBD_GetConfig+0x60>
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d00c      	beq.n	8006ebc <USBD_GetConfig+0x50>
 8006ea2:	e013      	b.n	8006ecc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3308      	adds	r3, #8
 8006eae:	0019      	movs	r1, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f000 f940 	bl	800713a <USBD_CtlSendData>
        break;
 8006eba:	e00e      	b.n	8006eda <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	1d19      	adds	r1, r3, #4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f000 f938 	bl	800713a <USBD_CtlSendData>
        break;
 8006eca:	e006      	b.n	8006eda <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	0011      	movs	r1, r2
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f000 f8b3 	bl	800703e <USBD_CtlError>
        break;
 8006ed8:	46c0      	nop			@ (mov r8, r8)
}
 8006eda:	46c0      	nop			@ (mov r8, r8)
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b002      	add	sp, #8
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	23a7      	movs	r3, #167	@ 0xa7
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	5cd3      	ldrb	r3, [r2, r3]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d822      	bhi.n	8006f40 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	88db      	ldrh	r3, [r3, #6]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d006      	beq.n	8006f10 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	0011      	movs	r1, r2
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f000 f898 	bl	800703e <USBD_CtlError>
        break;
 8006f0e:	e01e      	b.n	8006f4e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	23a9      	movs	r3, #169	@ 0xa9
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	58d3      	ldr	r3, [r2, r3]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	2202      	movs	r2, #2
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	330c      	adds	r3, #12
 8006f32:	0019      	movs	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f000 f8fe 	bl	800713a <USBD_CtlSendData>
      break;
 8006f3e:	e006      	b.n	8006f4e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	0011      	movs	r1, r2
 8006f46:	0018      	movs	r0, r3
 8006f48:	f000 f879 	bl	800703e <USBD_CtlError>
      break;
 8006f4c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006f4e:	46c0      	nop			@ (mov r8, r8)
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b002      	add	sp, #8
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	885b      	ldrh	r3, [r3, #2]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d108      	bne.n	8006f7a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	23a9      	movs	r3, #169	@ 0xa9
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	2101      	movs	r1, #1
 8006f70:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	0018      	movs	r0, r3
 8006f76:	f000 f94a 	bl	800720e <USBD_CtlSendStatus>
  }
}
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	b002      	add	sp, #8
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	23a7      	movs	r3, #167	@ 0xa7
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	5cd3      	ldrb	r3, [r2, r3]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d80d      	bhi.n	8006fb6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	885b      	ldrh	r3, [r3, #2]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d110      	bne.n	8006fc4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	23a9      	movs	r3, #169	@ 0xa9
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	2100      	movs	r1, #0
 8006faa:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f000 f92d 	bl	800720e <USBD_CtlSendStatus>
      }
      break;
 8006fb4:	e006      	b.n	8006fc4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	0011      	movs	r1, r2
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 f83e 	bl	800703e <USBD_CtlError>
      break;
 8006fc2:	e000      	b.n	8006fc6 <USBD_ClrFeature+0x44>
      break;
 8006fc4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b002      	add	sp, #8
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	785a      	ldrb	r2, [r3, #1]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	3302      	adds	r3, #2
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	001a      	movs	r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	3303      	adds	r3, #3
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	18d3      	adds	r3, r2, r3
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	3304      	adds	r3, #4
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	001a      	movs	r2, r3
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	3305      	adds	r3, #5
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	b29b      	uxth	r3, r3
 8007014:	18d3      	adds	r3, r2, r3
 8007016:	b29a      	uxth	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	3306      	adds	r3, #6
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	001a      	movs	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	3307      	adds	r3, #7
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	021b      	lsls	r3, r3, #8
 800702c:	b29b      	uxth	r3, r3
 800702e:	18d3      	adds	r3, r2, r3
 8007030:	b29a      	uxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	80da      	strh	r2, [r3, #6]

}
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	46bd      	mov	sp, r7
 800703a:	b002      	add	sp, #8
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2180      	movs	r1, #128	@ 0x80
 800704c:	0018      	movs	r0, r3
 800704e:	f000 fcb6 	bl	80079be <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2100      	movs	r1, #0
 8007056:	0018      	movs	r0, r3
 8007058:	f000 fcb1 	bl	80079be <USBD_LL_StallEP>
}
 800705c:	46c0      	nop			@ (mov r8, r8)
 800705e:	46bd      	mov	sp, r7
 8007060:	b002      	add	sp, #8
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007064:	b590      	push	{r4, r7, lr}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007070:	2417      	movs	r4, #23
 8007072:	193b      	adds	r3, r7, r4
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d03c      	beq.n	80070f8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	0018      	movs	r0, r3
 8007082:	f000 f83d 	bl	8007100 <USBD_GetLen>
 8007086:	0003      	movs	r3, r0
 8007088:	3301      	adds	r3, #1
 800708a:	b29b      	uxth	r3, r3
 800708c:	18db      	adds	r3, r3, r3
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007094:	193b      	adds	r3, r7, r4
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	193a      	adds	r2, r7, r4
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	7011      	strb	r1, [r2, #0]
 800709e:	001a      	movs	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	189b      	adds	r3, r3, r2
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80070aa:	193b      	adds	r3, r7, r4
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	193a      	adds	r2, r7, r4
 80070b0:	1c59      	adds	r1, r3, #1
 80070b2:	7011      	strb	r1, [r2, #0]
 80070b4:	001a      	movs	r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	189b      	adds	r3, r3, r2
 80070ba:	2203      	movs	r2, #3
 80070bc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80070be:	e017      	b.n	80070f0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	60fa      	str	r2, [r7, #12]
 80070c6:	2417      	movs	r4, #23
 80070c8:	193a      	adds	r2, r7, r4
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	1939      	adds	r1, r7, r4
 80070ce:	1c50      	adds	r0, r2, #1
 80070d0:	7008      	strb	r0, [r1, #0]
 80070d2:	0011      	movs	r1, r2
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	1852      	adds	r2, r2, r1
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80070dc:	193b      	adds	r3, r7, r4
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	193a      	adds	r2, r7, r4
 80070e2:	1c59      	adds	r1, r3, #1
 80070e4:	7011      	strb	r1, [r2, #0]
 80070e6:	001a      	movs	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	189b      	adds	r3, r3, r2
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e3      	bne.n	80070c0 <USBD_GetString+0x5c>
    }
  }
}
 80070f8:	46c0      	nop			@ (mov r8, r8)
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b007      	add	sp, #28
 80070fe:	bd90      	pop	{r4, r7, pc}

08007100 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007108:	230f      	movs	r3, #15
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007110:	e008      	b.n	8007124 <USBD_GetLen+0x24>
  {
    len++;
 8007112:	210f      	movs	r1, #15
 8007114:	187b      	adds	r3, r7, r1
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	187b      	adds	r3, r7, r1
 800711a:	3201      	adds	r2, #1
 800711c:	701a      	strb	r2, [r3, #0]
    buf++;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3301      	adds	r3, #1
 8007122:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1f2      	bne.n	8007112 <USBD_GetLen+0x12>
  }

  return len;
 800712c:	230f      	movs	r3, #15
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	781b      	ldrb	r3, [r3, #0]
}
 8007132:	0018      	movs	r0, r3
 8007134:	46bd      	mov	sp, r7
 8007136:	b004      	add	sp, #16
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	1dbb      	adds	r3, r7, #6
 8007146:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	23a5      	movs	r3, #165	@ 0xa5
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	2102      	movs	r1, #2
 8007150:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007152:	1dbb      	adds	r3, r7, #6
 8007154:	881a      	ldrh	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800715a:	1dbb      	adds	r3, r7, #6
 800715c:	881a      	ldrh	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007162:	1dbb      	adds	r3, r7, #6
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	2100      	movs	r1, #0
 800716c:	f000 fcd9 	bl	8007b22 <USBD_LL_Transmit>

  return USBD_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	0018      	movs	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	b004      	add	sp, #16
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	1dbb      	adds	r3, r7, #6
 8007186:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007188:	1dbb      	adds	r3, r7, #6
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	2100      	movs	r1, #0
 8007192:	f000 fcc6 	bl	8007b22 <USBD_LL_Transmit>

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b004      	add	sp, #16
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	1dbb      	adds	r3, r7, #6
 80071ac:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	23a5      	movs	r3, #165	@ 0xa5
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	2103      	movs	r1, #3
 80071b6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80071b8:	1dbb      	adds	r3, r7, #6
 80071ba:	8819      	ldrh	r1, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	23ae      	movs	r3, #174	@ 0xae
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80071c4:	1dbb      	adds	r3, r7, #6
 80071c6:	8819      	ldrh	r1, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	23b0      	movs	r3, #176	@ 0xb0
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071d0:	1dbb      	adds	r3, r7, #6
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	2100      	movs	r1, #0
 80071da:	f000 fcd9 	bl	8007b90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	0018      	movs	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b004      	add	sp, #16
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	1dbb      	adds	r3, r7, #6
 80071f4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071f6:	1dbb      	adds	r3, r7, #6
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	2100      	movs	r1, #0
 8007200:	f000 fcc6 	bl	8007b90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	0018      	movs	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	b004      	add	sp, #16
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	23a5      	movs	r3, #165	@ 0xa5
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	2104      	movs	r1, #4
 800721e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	2300      	movs	r3, #0
 8007224:	2200      	movs	r2, #0
 8007226:	2100      	movs	r1, #0
 8007228:	f000 fc7b 	bl	8007b22 <USBD_LL_Transmit>

  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	0018      	movs	r0, r3
 8007230:	46bd      	mov	sp, r7
 8007232:	b002      	add	sp, #8
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	23a5      	movs	r3, #165	@ 0xa5
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	2105      	movs	r1, #5
 8007246:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	2300      	movs	r3, #0
 800724c:	2200      	movs	r2, #0
 800724e:	2100      	movs	r1, #0
 8007250:	f000 fc9e 	bl	8007b90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	0018      	movs	r0, r3
 8007258:	46bd      	mov	sp, r7
 800725a:	b002      	add	sp, #8
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007264:	4914      	ldr	r1, [pc, #80]	@ (80072b8 <MX_USB_DEVICE_Init+0x58>)
 8007266:	4b15      	ldr	r3, [pc, #84]	@ (80072bc <MX_USB_DEVICE_Init+0x5c>)
 8007268:	2200      	movs	r2, #0
 800726a:	0018      	movs	r0, r3
 800726c:	f7fe fdec 	bl	8005e48 <USBD_Init>
 8007270:	1e03      	subs	r3, r0, #0
 8007272:	d001      	beq.n	8007278 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007274:	f7f9 f9de 	bl	8000634 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007278:	4a11      	ldr	r2, [pc, #68]	@ (80072c0 <MX_USB_DEVICE_Init+0x60>)
 800727a:	4b10      	ldr	r3, [pc, #64]	@ (80072bc <MX_USB_DEVICE_Init+0x5c>)
 800727c:	0011      	movs	r1, r2
 800727e:	0018      	movs	r0, r3
 8007280:	f7fe fe13 	bl	8005eaa <USBD_RegisterClass>
 8007284:	1e03      	subs	r3, r0, #0
 8007286:	d001      	beq.n	800728c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007288:	f7f9 f9d4 	bl	8000634 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800728c:	4a0d      	ldr	r2, [pc, #52]	@ (80072c4 <MX_USB_DEVICE_Init+0x64>)
 800728e:	4b0b      	ldr	r3, [pc, #44]	@ (80072bc <MX_USB_DEVICE_Init+0x5c>)
 8007290:	0011      	movs	r1, r2
 8007292:	0018      	movs	r0, r3
 8007294:	f7fe fd28 	bl	8005ce8 <USBD_CDC_RegisterInterface>
 8007298:	1e03      	subs	r3, r0, #0
 800729a:	d001      	beq.n	80072a0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800729c:	f7f9 f9ca 	bl	8000634 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072a0:	4b06      	ldr	r3, [pc, #24]	@ (80072bc <MX_USB_DEVICE_Init+0x5c>)
 80072a2:	0018      	movs	r0, r3
 80072a4:	f7fe fe21 	bl	8005eea <USBD_Start>
 80072a8:	1e03      	subs	r3, r0, #0
 80072aa:	d001      	beq.n	80072b0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80072ac:	f7f9 f9c2 	bl	8000634 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072b0:	46c0      	nop			@ (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	46c0      	nop			@ (mov r8, r8)
 80072b8:	2000012c 	.word	0x2000012c
 80072bc:	20000204 	.word	0x20000204
 80072c0:	20000018 	.word	0x20000018
 80072c4:	2000011c 	.word	0x2000011c

080072c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072cc:	4907      	ldr	r1, [pc, #28]	@ (80072ec <CDC_Init_FS+0x24>)
 80072ce:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <CDC_Init_FS+0x28>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	0018      	movs	r0, r3
 80072d4:	f7fe fd23 	bl	8005d1e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072d8:	4a06      	ldr	r2, [pc, #24]	@ (80072f4 <CDC_Init_FS+0x2c>)
 80072da:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <CDC_Init_FS+0x28>)
 80072dc:	0011      	movs	r1, r2
 80072de:	0018      	movs	r0, r3
 80072e0:	f7fe fd39 	bl	8005d56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80072e4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072e6:	0018      	movs	r0, r3
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	200008c8 	.word	0x200008c8
 80072f0:	20000204 	.word	0x20000204
 80072f4:	200004c8 	.word	0x200004c8

080072f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072fe:	0018      	movs	r0, r3
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6039      	str	r1, [r7, #0]
 800730c:	0011      	movs	r1, r2
 800730e:	1dfb      	adds	r3, r7, #7
 8007310:	1c02      	adds	r2, r0, #0
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	1c0a      	adds	r2, r1, #0
 8007318:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800731a:	1dfb      	adds	r3, r7, #7
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b23      	cmp	r3, #35	@ 0x23
 8007320:	d804      	bhi.n	800732c <CDC_Control_FS+0x28>
 8007322:	009a      	lsls	r2, r3, #2
 8007324:	4b04      	ldr	r3, [pc, #16]	@ (8007338 <CDC_Control_FS+0x34>)
 8007326:	18d3      	adds	r3, r2, r3
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800732c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800732e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}
 8007338:	08008c80 	.word	0x08008c80

0800733c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <CDC_Receive_FS+0x44>)
 800734a:	0011      	movs	r1, r2
 800734c:	0018      	movs	r0, r3
 800734e:	f7fe fd02 	bl	8005d56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007352:	4b0b      	ldr	r3, [pc, #44]	@ (8007380 <CDC_Receive_FS+0x44>)
 8007354:	0018      	movs	r0, r3
 8007356:	f7fe fd49 	bl	8005dec <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4b09      	ldr	r3, [pc, #36]	@ (8007384 <CDC_Receive_FS+0x48>)
 8007360:	0011      	movs	r1, r2
 8007362:	0018      	movs	r0, r3
 8007364:	f7f9 f956 	bl	8000614 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	4b05      	ldr	r3, [pc, #20]	@ (8007384 <CDC_Receive_FS+0x48>)
 800736e:	2100      	movs	r1, #0
 8007370:	0018      	movs	r0, r3
 8007372:	f000 fdcd 	bl	8007f10 <memset>
  return (USBD_OK);
 8007376:	2300      	movs	r3, #0

}
 8007378:	0018      	movs	r0, r3
 800737a:	46bd      	mov	sp, r7
 800737c:	b002      	add	sp, #8
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000204 	.word	0x20000204
 8007384:	200004c8 	.word	0x200004c8

08007388 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007388:	b5b0      	push	{r4, r5, r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	000a      	movs	r2, r1
 8007392:	1cbb      	adds	r3, r7, #2
 8007394:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8007396:	230f      	movs	r3, #15
 8007398:	18fb      	adds	r3, r7, r3
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800739e:	4a11      	ldr	r2, [pc, #68]	@ (80073e4 <CDC_Transmit_FS+0x5c>)
 80073a0:	23ae      	movs	r3, #174	@ 0xae
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	58d3      	ldr	r3, [r2, r3]
 80073a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	2385      	movs	r3, #133	@ 0x85
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	58d3      	ldr	r3, [r2, r3]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e010      	b.n	80073da <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80073b8:	1cbb      	adds	r3, r7, #2
 80073ba:	881a      	ldrh	r2, [r3, #0]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4b09      	ldr	r3, [pc, #36]	@ (80073e4 <CDC_Transmit_FS+0x5c>)
 80073c0:	0018      	movs	r0, r3
 80073c2:	f7fe fcac 	bl	8005d1e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073c6:	250f      	movs	r5, #15
 80073c8:	197c      	adds	r4, r7, r5
 80073ca:	4b06      	ldr	r3, [pc, #24]	@ (80073e4 <CDC_Transmit_FS+0x5c>)
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7fe fcd6 	bl	8005d7e <USBD_CDC_TransmitPacket>
 80073d2:	0003      	movs	r3, r0
 80073d4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80073d6:	197b      	adds	r3, r7, r5
 80073d8:	781b      	ldrb	r3, [r3, #0]
}
 80073da:	0018      	movs	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	b004      	add	sp, #16
 80073e0:	bdb0      	pop	{r4, r5, r7, pc}
 80073e2:	46c0      	nop			@ (mov r8, r8)
 80073e4:	20000204 	.word	0x20000204

080073e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	0002      	movs	r2, r0
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	1dfb      	adds	r3, r7, #7
 80073f4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2212      	movs	r2, #18
 80073fa:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073fc:	4b02      	ldr	r3, [pc, #8]	@ (8007408 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073fe:	0018      	movs	r0, r3
 8007400:	46bd      	mov	sp, r7
 8007402:	b002      	add	sp, #8
 8007404:	bd80      	pop	{r7, pc}
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	20000148 	.word	0x20000148

0800740c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	0002      	movs	r2, r0
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	1dfb      	adds	r3, r7, #7
 8007418:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2204      	movs	r2, #4
 800741e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007420:	4b02      	ldr	r3, [pc, #8]	@ (800742c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007422:	0018      	movs	r0, r3
 8007424:	46bd      	mov	sp, r7
 8007426:	b002      	add	sp, #8
 8007428:	bd80      	pop	{r7, pc}
 800742a:	46c0      	nop			@ (mov r8, r8)
 800742c:	2000015c 	.word	0x2000015c

08007430 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	0002      	movs	r2, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	1dfb      	adds	r3, r7, #7
 800743c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800743e:	1dfb      	adds	r3, r7, #7
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	4908      	ldr	r1, [pc, #32]	@ (800746c <USBD_FS_ProductStrDescriptor+0x3c>)
 800744a:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <USBD_FS_ProductStrDescriptor+0x40>)
 800744c:	0018      	movs	r0, r3
 800744e:	f7ff fe09 	bl	8007064 <USBD_GetString>
 8007452:	e005      	b.n	8007460 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	4905      	ldr	r1, [pc, #20]	@ (800746c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007458:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <USBD_FS_ProductStrDescriptor+0x40>)
 800745a:	0018      	movs	r0, r3
 800745c:	f7ff fe02 	bl	8007064 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007460:	4b02      	ldr	r3, [pc, #8]	@ (800746c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007462:	0018      	movs	r0, r3
 8007464:	46bd      	mov	sp, r7
 8007466:	b002      	add	sp, #8
 8007468:	bd80      	pop	{r7, pc}
 800746a:	46c0      	nop			@ (mov r8, r8)
 800746c:	20000cc8 	.word	0x20000cc8
 8007470:	08008bbc 	.word	0x08008bbc

08007474 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	0002      	movs	r2, r0
 800747c:	6039      	str	r1, [r7, #0]
 800747e:	1dfb      	adds	r3, r7, #7
 8007480:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4904      	ldr	r1, [pc, #16]	@ (8007498 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007486:	4b05      	ldr	r3, [pc, #20]	@ (800749c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007488:	0018      	movs	r0, r3
 800748a:	f7ff fdeb 	bl	8007064 <USBD_GetString>
  return USBD_StrDesc;
 800748e:	4b02      	ldr	r3, [pc, #8]	@ (8007498 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007490:	0018      	movs	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	b002      	add	sp, #8
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000cc8 	.word	0x20000cc8
 800749c:	08008bd4 	.word	0x08008bd4

080074a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	0002      	movs	r2, r0
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	1dfb      	adds	r3, r7, #7
 80074ac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	221a      	movs	r2, #26
 80074b2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074b4:	f000 f84c 	bl	8007550 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074b8:	4b02      	ldr	r3, [pc, #8]	@ (80074c4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80074ba:	0018      	movs	r0, r3
 80074bc:	46bd      	mov	sp, r7
 80074be:	b002      	add	sp, #8
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	46c0      	nop			@ (mov r8, r8)
 80074c4:	20000160 	.word	0x20000160

080074c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	0002      	movs	r2, r0
 80074d0:	6039      	str	r1, [r7, #0]
 80074d2:	1dfb      	adds	r3, r7, #7
 80074d4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80074d6:	1dfb      	adds	r3, r7, #7
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d106      	bne.n	80074ec <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	4908      	ldr	r1, [pc, #32]	@ (8007504 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80074e2:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <USBD_FS_ConfigStrDescriptor+0x40>)
 80074e4:	0018      	movs	r0, r3
 80074e6:	f7ff fdbd 	bl	8007064 <USBD_GetString>
 80074ea:	e005      	b.n	80074f8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	4905      	ldr	r1, [pc, #20]	@ (8007504 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80074f0:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <USBD_FS_ConfigStrDescriptor+0x40>)
 80074f2:	0018      	movs	r0, r3
 80074f4:	f7ff fdb6 	bl	8007064 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074f8:	4b02      	ldr	r3, [pc, #8]	@ (8007504 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80074fa:	0018      	movs	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b002      	add	sp, #8
 8007500:	bd80      	pop	{r7, pc}
 8007502:	46c0      	nop			@ (mov r8, r8)
 8007504:	20000cc8 	.word	0x20000cc8
 8007508:	08008be8 	.word	0x08008be8

0800750c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	0002      	movs	r2, r0
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	1dfb      	adds	r3, r7, #7
 8007518:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800751a:	1dfb      	adds	r3, r7, #7
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	4908      	ldr	r1, [pc, #32]	@ (8007548 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007526:	4b09      	ldr	r3, [pc, #36]	@ (800754c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007528:	0018      	movs	r0, r3
 800752a:	f7ff fd9b 	bl	8007064 <USBD_GetString>
 800752e:	e005      	b.n	800753c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	4905      	ldr	r1, [pc, #20]	@ (8007548 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007534:	4b05      	ldr	r3, [pc, #20]	@ (800754c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007536:	0018      	movs	r0, r3
 8007538:	f7ff fd94 	bl	8007064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800753c:	4b02      	ldr	r3, [pc, #8]	@ (8007548 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800753e:	0018      	movs	r0, r3
 8007540:	46bd      	mov	sp, r7
 8007542:	b002      	add	sp, #8
 8007544:	bd80      	pop	{r7, pc}
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	20000cc8 	.word	0x20000cc8
 800754c:	08008bf4 	.word	0x08008bf4

08007550 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	18d3      	adds	r3, r2, r3
 800755c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <Get_SerialNum+0x2c>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007564:	4907      	ldr	r1, [pc, #28]	@ (8007584 <Get_SerialNum+0x34>)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2208      	movs	r2, #8
 800756a:	0018      	movs	r0, r3
 800756c:	f000 f80e 	bl	800758c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007570:	4905      	ldr	r1, [pc, #20]	@ (8007588 <Get_SerialNum+0x38>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2204      	movs	r2, #4
 8007576:	0018      	movs	r0, r3
 8007578:	f000 f808 	bl	800758c <IntToUnicode>
  }
}
 800757c:	46c0      	nop			@ (mov r8, r8)
 800757e:	46bd      	mov	sp, r7
 8007580:	b004      	add	sp, #16
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000162 	.word	0x20000162
 8007588:	20000172 	.word	0x20000172

0800758c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	1dfb      	adds	r3, r7, #7
 8007598:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800759a:	2117      	movs	r1, #23
 800759c:	187b      	adds	r3, r7, r1
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80075a2:	187b      	adds	r3, r7, r1
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	e02f      	b.n	800760a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	0f1b      	lsrs	r3, r3, #28
 80075ae:	2b09      	cmp	r3, #9
 80075b0:	d80d      	bhi.n	80075ce <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	0f1b      	lsrs	r3, r3, #28
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	2317      	movs	r3, #23
 80075ba:	18fb      	adds	r3, r7, r3
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	0019      	movs	r1, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	185b      	adds	r3, r3, r1
 80075c6:	3230      	adds	r2, #48	@ 0x30
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	701a      	strb	r2, [r3, #0]
 80075cc:	e00c      	b.n	80075e8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	0f1b      	lsrs	r3, r3, #28
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	2317      	movs	r3, #23
 80075d6:	18fb      	adds	r3, r7, r3
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	0019      	movs	r1, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	185b      	adds	r3, r3, r1
 80075e2:	3237      	adds	r2, #55	@ 0x37
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075ee:	2117      	movs	r1, #23
 80075f0:	187b      	adds	r3, r7, r1
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	3301      	adds	r3, #1
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	18d3      	adds	r3, r2, r3
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007600:	187b      	adds	r3, r7, r1
 8007602:	781a      	ldrb	r2, [r3, #0]
 8007604:	187b      	adds	r3, r7, r1
 8007606:	3201      	adds	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	2317      	movs	r3, #23
 800760c:	18fa      	adds	r2, r7, r3
 800760e:	1dfb      	adds	r3, r7, #7
 8007610:	7812      	ldrb	r2, [r2, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d3c8      	bcc.n	80075aa <IntToUnicode+0x1e>
  }
}
 8007618:	46c0      	nop			@ (mov r8, r8)
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	46bd      	mov	sp, r7
 800761e:	b006      	add	sp, #24
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0a      	ldr	r2, [pc, #40]	@ (800765c <HAL_PCD_MspInit+0x38>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d10e      	bne.n	8007654 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007636:	4b0a      	ldr	r3, [pc, #40]	@ (8007660 <HAL_PCD_MspInit+0x3c>)
 8007638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800763a:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <HAL_PCD_MspInit+0x3c>)
 800763c:	2180      	movs	r1, #128	@ 0x80
 800763e:	0409      	lsls	r1, r1, #16
 8007640:	430a      	orrs	r2, r1
 8007642:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007644:	2200      	movs	r2, #0
 8007646:	2100      	movs	r1, #0
 8007648:	201f      	movs	r0, #31
 800764a:	f7f9 fa35 	bl	8000ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800764e:	201f      	movs	r0, #31
 8007650:	f7f9 fa47 	bl	8000ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007654:	46c0      	nop			@ (mov r8, r8)
 8007656:	46bd      	mov	sp, r7
 8007658:	b002      	add	sp, #8
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40005c00 	.word	0x40005c00
 8007660:	40021000 	.word	0x40021000

08007664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	23bc      	movs	r3, #188	@ 0xbc
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	58d2      	ldr	r2, [r2, r3]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	21ac      	movs	r1, #172	@ 0xac
 8007678:	0089      	lsls	r1, r1, #2
 800767a:	468c      	mov	ip, r1
 800767c:	4463      	add	r3, ip
 800767e:	0019      	movs	r1, r3
 8007680:	0010      	movs	r0, r2
 8007682:	f7fe fc85 	bl	8005f90 <USBD_LL_SetupStage>
}
 8007686:	46c0      	nop			@ (mov r8, r8)
 8007688:	46bd      	mov	sp, r7
 800768a:	b002      	add	sp, #8
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800768e:	b590      	push	{r4, r7, lr}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	000a      	movs	r2, r1
 8007698:	1cfb      	adds	r3, r7, #3
 800769a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	23bc      	movs	r3, #188	@ 0xbc
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	58d4      	ldr	r4, [r2, r3]
 80076a4:	1cfb      	adds	r3, r7, #3
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	23be      	movs	r3, #190	@ 0xbe
 80076ac:	0059      	lsls	r1, r3, #1
 80076ae:	0013      	movs	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	18c3      	adds	r3, r0, r3
 80076b8:	185b      	adds	r3, r3, r1
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	1cfb      	adds	r3, r7, #3
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	0019      	movs	r1, r3
 80076c2:	0020      	movs	r0, r4
 80076c4:	f7fe fcc2 	bl	800604c <USBD_LL_DataOutStage>
}
 80076c8:	46c0      	nop			@ (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b003      	add	sp, #12
 80076ce:	bd90      	pop	{r4, r7, pc}

080076d0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	000a      	movs	r2, r1
 80076da:	1cfb      	adds	r3, r7, #3
 80076dc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	23bc      	movs	r3, #188	@ 0xbc
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	58d0      	ldr	r0, [r2, r3]
 80076e6:	1cfb      	adds	r3, r7, #3
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	0013      	movs	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	18cb      	adds	r3, r1, r3
 80076f6:	333c      	adds	r3, #60	@ 0x3c
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	1cfb      	adds	r3, r7, #3
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	0019      	movs	r1, r3
 8007700:	f7fe fd26 	bl	8006150 <USBD_LL_DataInStage>
}
 8007704:	46c0      	nop			@ (mov r8, r8)
 8007706:	46bd      	mov	sp, r7
 8007708:	b002      	add	sp, #8
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	23bc      	movs	r3, #188	@ 0xbc
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	58d3      	ldr	r3, [r2, r3]
 800771c:	0018      	movs	r0, r3
 800771e:	f7fe fe5d 	bl	80063dc <USBD_LL_SOF>
}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	46bd      	mov	sp, r7
 8007726:	b002      	add	sp, #8
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007732:	230f      	movs	r3, #15
 8007734:	18fb      	adds	r3, r7, r3
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d001      	beq.n	8007746 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007742:	f7f8 ff77 	bl	8000634 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	23bc      	movs	r3, #188	@ 0xbc
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	58d2      	ldr	r2, [r2, r3]
 800774e:	230f      	movs	r3, #15
 8007750:	18fb      	adds	r3, r7, r3
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	0019      	movs	r1, r3
 8007756:	0010      	movs	r0, r2
 8007758:	f7fe fdff 	bl	800635a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	23bc      	movs	r3, #188	@ 0xbc
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	58d3      	ldr	r3, [r2, r3]
 8007764:	0018      	movs	r0, r3
 8007766:	f7fe fdb0 	bl	80062ca <USBD_LL_Reset>
}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	b004      	add	sp, #16
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	23bc      	movs	r3, #188	@ 0xbc
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	58d3      	ldr	r3, [r2, r3]
 8007784:	0018      	movs	r0, r3
 8007786:	f7fe fdf9 	bl	800637c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007792:	4b05      	ldr	r3, [pc, #20]	@ (80077a8 <HAL_PCD_SuspendCallback+0x34>)
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	4b04      	ldr	r3, [pc, #16]	@ (80077a8 <HAL_PCD_SuspendCallback+0x34>)
 8007798:	2106      	movs	r1, #6
 800779a:	430a      	orrs	r2, r1
 800779c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800779e:	46c0      	nop			@ (mov r8, r8)
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b002      	add	sp, #8
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	46c0      	nop			@ (mov r8, r8)
 80077a8:	e000ed00 	.word	0xe000ed00

080077ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077bc:	4b09      	ldr	r3, [pc, #36]	@ (80077e4 <HAL_PCD_ResumeCallback+0x38>)
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	4b08      	ldr	r3, [pc, #32]	@ (80077e4 <HAL_PCD_ResumeCallback+0x38>)
 80077c2:	2106      	movs	r1, #6
 80077c4:	438a      	bics	r2, r1
 80077c6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80077c8:	f000 fa44 	bl	8007c54 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	23bc      	movs	r3, #188	@ 0xbc
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	58d3      	ldr	r3, [r2, r3]
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7fe fde9 	bl	80063ac <USBD_LL_Resume>
}
 80077da:	46c0      	nop			@ (mov r8, r8)
 80077dc:	46bd      	mov	sp, r7
 80077de:	b002      	add	sp, #8
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	e000ed00 	.word	0xe000ed00

080077e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80077f0:	4a2d      	ldr	r2, [pc, #180]	@ (80078a8 <USBD_LL_Init+0xc0>)
 80077f2:	23bc      	movs	r3, #188	@ 0xbc
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	23b0      	movs	r3, #176	@ 0xb0
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4929      	ldr	r1, [pc, #164]	@ (80078a8 <USBD_LL_Init+0xc0>)
 8007802:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007804:	4b28      	ldr	r3, [pc, #160]	@ (80078a8 <USBD_LL_Init+0xc0>)
 8007806:	4a29      	ldr	r2, [pc, #164]	@ (80078ac <USBD_LL_Init+0xc4>)
 8007808:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800780a:	4b27      	ldr	r3, [pc, #156]	@ (80078a8 <USBD_LL_Init+0xc0>)
 800780c:	2208      	movs	r2, #8
 800780e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007810:	4b25      	ldr	r3, [pc, #148]	@ (80078a8 <USBD_LL_Init+0xc0>)
 8007812:	2202      	movs	r2, #2
 8007814:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007816:	4b24      	ldr	r3, [pc, #144]	@ (80078a8 <USBD_LL_Init+0xc0>)
 8007818:	2202      	movs	r2, #2
 800781a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800781c:	4b22      	ldr	r3, [pc, #136]	@ (80078a8 <USBD_LL_Init+0xc0>)
 800781e:	2200      	movs	r2, #0
 8007820:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007822:	4b21      	ldr	r3, [pc, #132]	@ (80078a8 <USBD_LL_Init+0xc0>)
 8007824:	2200      	movs	r2, #0
 8007826:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007828:	4b1f      	ldr	r3, [pc, #124]	@ (80078a8 <USBD_LL_Init+0xc0>)
 800782a:	2200      	movs	r2, #0
 800782c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800782e:	4b1e      	ldr	r3, [pc, #120]	@ (80078a8 <USBD_LL_Init+0xc0>)
 8007830:	0018      	movs	r0, r3
 8007832:	f7f9 f973 	bl	8000b1c <HAL_PCD_Init>
 8007836:	1e03      	subs	r3, r0, #0
 8007838:	d001      	beq.n	800783e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800783a:	f7f8 fefb 	bl	8000634 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	23b0      	movs	r3, #176	@ 0xb0
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	58d0      	ldr	r0, [r2, r3]
 8007846:	2318      	movs	r3, #24
 8007848:	2200      	movs	r2, #0
 800784a:	2100      	movs	r1, #0
 800784c:	f7fa ff34 	bl	80026b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	23b0      	movs	r3, #176	@ 0xb0
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	58d0      	ldr	r0, [r2, r3]
 8007858:	2358      	movs	r3, #88	@ 0x58
 800785a:	2200      	movs	r2, #0
 800785c:	2180      	movs	r1, #128	@ 0x80
 800785e:	f7fa ff2b 	bl	80026b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	23b0      	movs	r3, #176	@ 0xb0
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	58d0      	ldr	r0, [r2, r3]
 800786a:	23c0      	movs	r3, #192	@ 0xc0
 800786c:	2200      	movs	r2, #0
 800786e:	2181      	movs	r1, #129	@ 0x81
 8007870:	f7fa ff22 	bl	80026b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	23b0      	movs	r3, #176	@ 0xb0
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	58d0      	ldr	r0, [r2, r3]
 800787c:	2388      	movs	r3, #136	@ 0x88
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	2200      	movs	r2, #0
 8007882:	2101      	movs	r1, #1
 8007884:	f7fa ff18 	bl	80026b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	23b0      	movs	r3, #176	@ 0xb0
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	58d0      	ldr	r0, [r2, r3]
 8007890:	2380      	movs	r3, #128	@ 0x80
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	2200      	movs	r2, #0
 8007896:	2182      	movs	r1, #130	@ 0x82
 8007898:	f7fa ff0e 	bl	80026b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	0018      	movs	r0, r3
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b002      	add	sp, #8
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	46c0      	nop			@ (mov r8, r8)
 80078a8:	20000ec8 	.word	0x20000ec8
 80078ac:	40005c00 	.word	0x40005c00

080078b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b8:	210f      	movs	r1, #15
 80078ba:	187b      	adds	r3, r7, r1
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c0:	260e      	movs	r6, #14
 80078c2:	19bb      	adds	r3, r7, r6
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	23b0      	movs	r3, #176	@ 0xb0
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	58d3      	ldr	r3, [r2, r3]
 80078d0:	000d      	movs	r5, r1
 80078d2:	187c      	adds	r4, r7, r1
 80078d4:	0018      	movs	r0, r3
 80078d6:	f7f9 fa21 	bl	8000d1c <HAL_PCD_Start>
 80078da:	0003      	movs	r3, r0
 80078dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078de:	19bc      	adds	r4, r7, r6
 80078e0:	197b      	adds	r3, r7, r5
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	0018      	movs	r0, r3
 80078e6:	f000 f9bc 	bl	8007c62 <USBD_Get_USB_Status>
 80078ea:	0003      	movs	r3, r0
 80078ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078ee:	19bb      	adds	r3, r7, r6
 80078f0:	781b      	ldrb	r3, [r3, #0]
}
 80078f2:	0018      	movs	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	b005      	add	sp, #20
 80078f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	000c      	movs	r4, r1
 8007904:	0010      	movs	r0, r2
 8007906:	0019      	movs	r1, r3
 8007908:	1cfb      	adds	r3, r7, #3
 800790a:	1c22      	adds	r2, r4, #0
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	1cbb      	adds	r3, r7, #2
 8007910:	1c02      	adds	r2, r0, #0
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	003b      	movs	r3, r7
 8007916:	1c0a      	adds	r2, r1, #0
 8007918:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791a:	260f      	movs	r6, #15
 800791c:	19bb      	adds	r3, r7, r6
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007922:	250e      	movs	r5, #14
 8007924:	197b      	adds	r3, r7, r5
 8007926:	2200      	movs	r2, #0
 8007928:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	23b0      	movs	r3, #176	@ 0xb0
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	58d0      	ldr	r0, [r2, r3]
 8007932:	19bc      	adds	r4, r7, r6
 8007934:	1cbb      	adds	r3, r7, #2
 8007936:	781d      	ldrb	r5, [r3, #0]
 8007938:	003b      	movs	r3, r7
 800793a:	881a      	ldrh	r2, [r3, #0]
 800793c:	1cfb      	adds	r3, r7, #3
 800793e:	7819      	ldrb	r1, [r3, #0]
 8007940:	002b      	movs	r3, r5
 8007942:	f7f9 fb80 	bl	8001046 <HAL_PCD_EP_Open>
 8007946:	0003      	movs	r3, r0
 8007948:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800794a:	250e      	movs	r5, #14
 800794c:	197c      	adds	r4, r7, r5
 800794e:	19bb      	adds	r3, r7, r6
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	0018      	movs	r0, r3
 8007954:	f000 f985 	bl	8007c62 <USBD_Get_USB_Status>
 8007958:	0003      	movs	r3, r0
 800795a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800795c:	197b      	adds	r3, r7, r5
 800795e:	781b      	ldrb	r3, [r3, #0]
}
 8007960:	0018      	movs	r0, r3
 8007962:	46bd      	mov	sp, r7
 8007964:	b005      	add	sp, #20
 8007966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007968 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	000a      	movs	r2, r1
 8007972:	1cfb      	adds	r3, r7, #3
 8007974:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007976:	210f      	movs	r1, #15
 8007978:	187b      	adds	r3, r7, r1
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797e:	260e      	movs	r6, #14
 8007980:	19bb      	adds	r3, r7, r6
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	23b0      	movs	r3, #176	@ 0xb0
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	58d2      	ldr	r2, [r2, r3]
 800798e:	000d      	movs	r5, r1
 8007990:	187c      	adds	r4, r7, r1
 8007992:	1cfb      	adds	r3, r7, #3
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	0019      	movs	r1, r3
 8007998:	0010      	movs	r0, r2
 800799a:	f7f9 fbc3 	bl	8001124 <HAL_PCD_EP_Close>
 800799e:	0003      	movs	r3, r0
 80079a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a2:	19bc      	adds	r4, r7, r6
 80079a4:	197b      	adds	r3, r7, r5
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	0018      	movs	r0, r3
 80079aa:	f000 f95a 	bl	8007c62 <USBD_Get_USB_Status>
 80079ae:	0003      	movs	r3, r0
 80079b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80079b2:	19bb      	adds	r3, r7, r6
 80079b4:	781b      	ldrb	r3, [r3, #0]
}
 80079b6:	0018      	movs	r0, r3
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b005      	add	sp, #20
 80079bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079be <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	000a      	movs	r2, r1
 80079c8:	1cfb      	adds	r3, r7, #3
 80079ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079cc:	210f      	movs	r1, #15
 80079ce:	187b      	adds	r3, r7, r1
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d4:	260e      	movs	r6, #14
 80079d6:	19bb      	adds	r3, r7, r6
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	23b0      	movs	r3, #176	@ 0xb0
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	58d2      	ldr	r2, [r2, r3]
 80079e4:	000d      	movs	r5, r1
 80079e6:	187c      	adds	r4, r7, r1
 80079e8:	1cfb      	adds	r3, r7, #3
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	0019      	movs	r1, r3
 80079ee:	0010      	movs	r0, r2
 80079f0:	f7f9 fc75 	bl	80012de <HAL_PCD_EP_SetStall>
 80079f4:	0003      	movs	r3, r0
 80079f6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f8:	19bc      	adds	r4, r7, r6
 80079fa:	197b      	adds	r3, r7, r5
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	0018      	movs	r0, r3
 8007a00:	f000 f92f 	bl	8007c62 <USBD_Get_USB_Status>
 8007a04:	0003      	movs	r3, r0
 8007a06:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007a08:	19bb      	adds	r3, r7, r6
 8007a0a:	781b      	ldrb	r3, [r3, #0]
}
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b005      	add	sp, #20
 8007a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	000a      	movs	r2, r1
 8007a1e:	1cfb      	adds	r3, r7, #3
 8007a20:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a22:	210f      	movs	r1, #15
 8007a24:	187b      	adds	r3, r7, r1
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2a:	260e      	movs	r6, #14
 8007a2c:	19bb      	adds	r3, r7, r6
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	23b0      	movs	r3, #176	@ 0xb0
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	58d2      	ldr	r2, [r2, r3]
 8007a3a:	000d      	movs	r5, r1
 8007a3c:	187c      	adds	r4, r7, r1
 8007a3e:	1cfb      	adds	r3, r7, #3
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	0019      	movs	r1, r3
 8007a44:	0010      	movs	r0, r2
 8007a46:	f7f9 fca6 	bl	8001396 <HAL_PCD_EP_ClrStall>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4e:	19bc      	adds	r4, r7, r6
 8007a50:	197b      	adds	r3, r7, r5
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	0018      	movs	r0, r3
 8007a56:	f000 f904 	bl	8007c62 <USBD_Get_USB_Status>
 8007a5a:	0003      	movs	r3, r0
 8007a5c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007a5e:	19bb      	adds	r3, r7, r6
 8007a60:	781b      	ldrb	r3, [r3, #0]
}
 8007a62:	0018      	movs	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b005      	add	sp, #20
 8007a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a6a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	000a      	movs	r2, r1
 8007a74:	1cfb      	adds	r3, r7, #3
 8007a76:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	23b0      	movs	r3, #176	@ 0xb0
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	58d3      	ldr	r3, [r2, r3]
 8007a80:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a82:	1cfb      	adds	r3, r7, #3
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b25b      	sxtb	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da0d      	bge.n	8007aa8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a8c:	1cfb      	adds	r3, r7, #3
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	227f      	movs	r2, #127	@ 0x7f
 8007a92:	4013      	ands	r3, r2
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	0013      	movs	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	189b      	adds	r3, r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	18cb      	adds	r3, r1, r3
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	e00d      	b.n	8007ac4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007aa8:	1cfb      	adds	r3, r7, #3
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	227f      	movs	r2, #127	@ 0x7f
 8007aae:	401a      	ands	r2, r3
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	23b5      	movs	r3, #181	@ 0xb5
 8007ab4:	0059      	lsls	r1, r3, #1
 8007ab6:	0013      	movs	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	189b      	adds	r3, r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	18c3      	adds	r3, r0, r3
 8007ac0:	185b      	adds	r3, r3, r1
 8007ac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b004      	add	sp, #16
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	000a      	movs	r2, r1
 8007ad6:	1cfb      	adds	r3, r7, #3
 8007ad8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ada:	210f      	movs	r1, #15
 8007adc:	187b      	adds	r3, r7, r1
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae2:	260e      	movs	r6, #14
 8007ae4:	19bb      	adds	r3, r7, r6
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	23b0      	movs	r3, #176	@ 0xb0
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	58d2      	ldr	r2, [r2, r3]
 8007af2:	000d      	movs	r5, r1
 8007af4:	187c      	adds	r4, r7, r1
 8007af6:	1cfb      	adds	r3, r7, #3
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	0019      	movs	r1, r3
 8007afc:	0010      	movs	r0, r2
 8007afe:	f7f9 fa77 	bl	8000ff0 <HAL_PCD_SetAddress>
 8007b02:	0003      	movs	r3, r0
 8007b04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b06:	19bc      	adds	r4, r7, r6
 8007b08:	197b      	adds	r3, r7, r5
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	f000 f8a8 	bl	8007c62 <USBD_Get_USB_Status>
 8007b12:	0003      	movs	r3, r0
 8007b14:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007b16:	19bb      	adds	r3, r7, r6
 8007b18:	781b      	ldrb	r3, [r3, #0]
}
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b005      	add	sp, #20
 8007b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b24:	b087      	sub	sp, #28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	0008      	movs	r0, r1
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	0019      	movs	r1, r3
 8007b30:	230b      	movs	r3, #11
 8007b32:	18fb      	adds	r3, r7, r3
 8007b34:	1c02      	adds	r2, r0, #0
 8007b36:	701a      	strb	r2, [r3, #0]
 8007b38:	2408      	movs	r4, #8
 8007b3a:	193b      	adds	r3, r7, r4
 8007b3c:	1c0a      	adds	r2, r1, #0
 8007b3e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b40:	2117      	movs	r1, #23
 8007b42:	187b      	adds	r3, r7, r1
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b48:	2516      	movs	r5, #22
 8007b4a:	197b      	adds	r3, r7, r5
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	23b0      	movs	r3, #176	@ 0xb0
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	58d0      	ldr	r0, [r2, r3]
 8007b58:	193b      	adds	r3, r7, r4
 8007b5a:	881d      	ldrh	r5, [r3, #0]
 8007b5c:	000e      	movs	r6, r1
 8007b5e:	187c      	adds	r4, r7, r1
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	230b      	movs	r3, #11
 8007b64:	18fb      	adds	r3, r7, r3
 8007b66:	7819      	ldrb	r1, [r3, #0]
 8007b68:	002b      	movs	r3, r5
 8007b6a:	f7f9 fb7c 	bl	8001266 <HAL_PCD_EP_Transmit>
 8007b6e:	0003      	movs	r3, r0
 8007b70:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b72:	2516      	movs	r5, #22
 8007b74:	197c      	adds	r4, r7, r5
 8007b76:	19bb      	adds	r3, r7, r6
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f000 f871 	bl	8007c62 <USBD_Get_USB_Status>
 8007b80:	0003      	movs	r3, r0
 8007b82:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007b84:	197b      	adds	r3, r7, r5
 8007b86:	781b      	ldrb	r3, [r3, #0]
}
 8007b88:	0018      	movs	r0, r3
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	b007      	add	sp, #28
 8007b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	0008      	movs	r0, r1
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	0019      	movs	r1, r3
 8007b9e:	230b      	movs	r3, #11
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	1c02      	adds	r2, r0, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	2408      	movs	r4, #8
 8007ba8:	193b      	adds	r3, r7, r4
 8007baa:	1c0a      	adds	r2, r1, #0
 8007bac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bae:	2117      	movs	r1, #23
 8007bb0:	187b      	adds	r3, r7, r1
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb6:	2516      	movs	r5, #22
 8007bb8:	197b      	adds	r3, r7, r5
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	23b0      	movs	r3, #176	@ 0xb0
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	58d0      	ldr	r0, [r2, r3]
 8007bc6:	193b      	adds	r3, r7, r4
 8007bc8:	881d      	ldrh	r5, [r3, #0]
 8007bca:	000e      	movs	r6, r1
 8007bcc:	187c      	adds	r4, r7, r1
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	230b      	movs	r3, #11
 8007bd2:	18fb      	adds	r3, r7, r3
 8007bd4:	7819      	ldrb	r1, [r3, #0]
 8007bd6:	002b      	movs	r3, r5
 8007bd8:	f7f9 faf5 	bl	80011c6 <HAL_PCD_EP_Receive>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007be0:	2516      	movs	r5, #22
 8007be2:	197c      	adds	r4, r7, r5
 8007be4:	19bb      	adds	r3, r7, r6
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	0018      	movs	r0, r3
 8007bea:	f000 f83a 	bl	8007c62 <USBD_Get_USB_Status>
 8007bee:	0003      	movs	r3, r0
 8007bf0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007bf2:	197b      	adds	r3, r7, r5
 8007bf4:	781b      	ldrb	r3, [r3, #0]
}
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b007      	add	sp, #28
 8007bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	000a      	movs	r2, r1
 8007c08:	1cfb      	adds	r3, r7, #3
 8007c0a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	23b0      	movs	r3, #176	@ 0xb0
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	58d2      	ldr	r2, [r2, r3]
 8007c14:	1cfb      	adds	r3, r7, #3
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	0019      	movs	r1, r3
 8007c1a:	0010      	movs	r0, r2
 8007c1c:	f7f9 fb0a 	bl	8001234 <HAL_PCD_EP_GetRxCount>
 8007c20:	0003      	movs	r3, r0
}
 8007c22:	0018      	movs	r0, r3
 8007c24:	46bd      	mov	sp, r7
 8007c26:	b002      	add	sp, #8
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c34:	4b02      	ldr	r3, [pc, #8]	@ (8007c40 <USBD_static_malloc+0x14>)
}
 8007c36:	0018      	movs	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	b002      	add	sp, #8
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	46c0      	nop			@ (mov r8, r8)
 8007c40:	200011bc 	.word	0x200011bc

08007c44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]

}
 8007c4c:	46c0      	nop			@ (mov r8, r8)
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	b002      	add	sp, #8
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007c58:	f7f8 fc50 	bl	80004fc <SystemClock_Config>
}
 8007c5c:	46c0      	nop			@ (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	0002      	movs	r2, r0
 8007c6a:	1dfb      	adds	r3, r7, #7
 8007c6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c6e:	230f      	movs	r3, #15
 8007c70:	18fb      	adds	r3, r7, r3
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007c76:	1dfb      	adds	r3, r7, #7
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d017      	beq.n	8007cae <USBD_Get_USB_Status+0x4c>
 8007c7e:	dc1b      	bgt.n	8007cb8 <USBD_Get_USB_Status+0x56>
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d00f      	beq.n	8007ca4 <USBD_Get_USB_Status+0x42>
 8007c84:	dc18      	bgt.n	8007cb8 <USBD_Get_USB_Status+0x56>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <USBD_Get_USB_Status+0x2e>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d005      	beq.n	8007c9a <USBD_Get_USB_Status+0x38>
 8007c8e:	e013      	b.n	8007cb8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c90:	230f      	movs	r3, #15
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
    break;
 8007c98:	e013      	b.n	8007cc2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c9a:	230f      	movs	r3, #15
 8007c9c:	18fb      	adds	r3, r7, r3
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	701a      	strb	r2, [r3, #0]
    break;
 8007ca2:	e00e      	b.n	8007cc2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ca4:	230f      	movs	r3, #15
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	2201      	movs	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
    break;
 8007cac:	e009      	b.n	8007cc2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cae:	230f      	movs	r3, #15
 8007cb0:	18fb      	adds	r3, r7, r3
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	701a      	strb	r2, [r3, #0]
    break;
 8007cb6:	e004      	b.n	8007cc2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007cb8:	230f      	movs	r3, #15
 8007cba:	18fb      	adds	r3, r7, r3
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	701a      	strb	r2, [r3, #0]
    break;
 8007cc0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8007cc2:	230f      	movs	r3, #15
 8007cc4:	18fb      	adds	r3, r7, r3
 8007cc6:	781b      	ldrb	r3, [r3, #0]
}
 8007cc8:	0018      	movs	r0, r3
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b004      	add	sp, #16
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <std>:
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	0004      	movs	r4, r0
 8007cd6:	6003      	str	r3, [r0, #0]
 8007cd8:	6043      	str	r3, [r0, #4]
 8007cda:	6083      	str	r3, [r0, #8]
 8007cdc:	8181      	strh	r1, [r0, #12]
 8007cde:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ce0:	81c2      	strh	r2, [r0, #14]
 8007ce2:	6103      	str	r3, [r0, #16]
 8007ce4:	6143      	str	r3, [r0, #20]
 8007ce6:	6183      	str	r3, [r0, #24]
 8007ce8:	0019      	movs	r1, r3
 8007cea:	2208      	movs	r2, #8
 8007cec:	305c      	adds	r0, #92	@ 0x5c
 8007cee:	f000 f90f 	bl	8007f10 <memset>
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d20 <std+0x50>)
 8007cf4:	6224      	str	r4, [r4, #32]
 8007cf6:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <std+0x54>)
 8007cfa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007d28 <std+0x58>)
 8007cfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d00:	4b0a      	ldr	r3, [pc, #40]	@ (8007d2c <std+0x5c>)
 8007d02:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d04:	4b0a      	ldr	r3, [pc, #40]	@ (8007d30 <std+0x60>)
 8007d06:	429c      	cmp	r4, r3
 8007d08:	d005      	beq.n	8007d16 <std+0x46>
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d34 <std+0x64>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	d002      	beq.n	8007d16 <std+0x46>
 8007d10:	4b09      	ldr	r3, [pc, #36]	@ (8007d38 <std+0x68>)
 8007d12:	429c      	cmp	r4, r3
 8007d14:	d103      	bne.n	8007d1e <std+0x4e>
 8007d16:	0020      	movs	r0, r4
 8007d18:	3058      	adds	r0, #88	@ 0x58
 8007d1a:	f000 f979 	bl	8008010 <__retarget_lock_init_recursive>
 8007d1e:	bd10      	pop	{r4, pc}
 8007d20:	08007e79 	.word	0x08007e79
 8007d24:	08007ea1 	.word	0x08007ea1
 8007d28:	08007ed9 	.word	0x08007ed9
 8007d2c:	08007f05 	.word	0x08007f05
 8007d30:	200013dc 	.word	0x200013dc
 8007d34:	20001444 	.word	0x20001444
 8007d38:	200014ac 	.word	0x200014ac

08007d3c <stdio_exit_handler>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	4a03      	ldr	r2, [pc, #12]	@ (8007d4c <stdio_exit_handler+0x10>)
 8007d40:	4903      	ldr	r1, [pc, #12]	@ (8007d50 <stdio_exit_handler+0x14>)
 8007d42:	4804      	ldr	r0, [pc, #16]	@ (8007d54 <stdio_exit_handler+0x18>)
 8007d44:	f000 f86c 	bl	8007e20 <_fwalk_sglue>
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	46c0      	nop			@ (mov r8, r8)
 8007d4c:	2000017c 	.word	0x2000017c
 8007d50:	080088a1 	.word	0x080088a1
 8007d54:	2000018c 	.word	0x2000018c

08007d58 <cleanup_stdio>:
 8007d58:	6841      	ldr	r1, [r0, #4]
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d88 <cleanup_stdio+0x30>)
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	0004      	movs	r4, r0
 8007d60:	4299      	cmp	r1, r3
 8007d62:	d001      	beq.n	8007d68 <cleanup_stdio+0x10>
 8007d64:	f000 fd9c 	bl	80088a0 <_fflush_r>
 8007d68:	68a1      	ldr	r1, [r4, #8]
 8007d6a:	4b08      	ldr	r3, [pc, #32]	@ (8007d8c <cleanup_stdio+0x34>)
 8007d6c:	4299      	cmp	r1, r3
 8007d6e:	d002      	beq.n	8007d76 <cleanup_stdio+0x1e>
 8007d70:	0020      	movs	r0, r4
 8007d72:	f000 fd95 	bl	80088a0 <_fflush_r>
 8007d76:	68e1      	ldr	r1, [r4, #12]
 8007d78:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <cleanup_stdio+0x38>)
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	d002      	beq.n	8007d84 <cleanup_stdio+0x2c>
 8007d7e:	0020      	movs	r0, r4
 8007d80:	f000 fd8e 	bl	80088a0 <_fflush_r>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	46c0      	nop			@ (mov r8, r8)
 8007d88:	200013dc 	.word	0x200013dc
 8007d8c:	20001444 	.word	0x20001444
 8007d90:	200014ac 	.word	0x200014ac

08007d94 <global_stdio_init.part.0>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <global_stdio_init.part.0+0x28>)
 8007d98:	4a09      	ldr	r2, [pc, #36]	@ (8007dc0 <global_stdio_init.part.0+0x2c>)
 8007d9a:	2104      	movs	r1, #4
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	4809      	ldr	r0, [pc, #36]	@ (8007dc4 <global_stdio_init.part.0+0x30>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	f7ff ff95 	bl	8007cd0 <std>
 8007da6:	2201      	movs	r2, #1
 8007da8:	2109      	movs	r1, #9
 8007daa:	4807      	ldr	r0, [pc, #28]	@ (8007dc8 <global_stdio_init.part.0+0x34>)
 8007dac:	f7ff ff90 	bl	8007cd0 <std>
 8007db0:	2202      	movs	r2, #2
 8007db2:	2112      	movs	r1, #18
 8007db4:	4805      	ldr	r0, [pc, #20]	@ (8007dcc <global_stdio_init.part.0+0x38>)
 8007db6:	f7ff ff8b 	bl	8007cd0 <std>
 8007dba:	bd10      	pop	{r4, pc}
 8007dbc:	20001514 	.word	0x20001514
 8007dc0:	08007d3d 	.word	0x08007d3d
 8007dc4:	200013dc 	.word	0x200013dc
 8007dc8:	20001444 	.word	0x20001444
 8007dcc:	200014ac 	.word	0x200014ac

08007dd0 <__sfp_lock_acquire>:
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	4802      	ldr	r0, [pc, #8]	@ (8007ddc <__sfp_lock_acquire+0xc>)
 8007dd4:	f000 f91d 	bl	8008012 <__retarget_lock_acquire_recursive>
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	46c0      	nop			@ (mov r8, r8)
 8007ddc:	2000151d 	.word	0x2000151d

08007de0 <__sfp_lock_release>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	4802      	ldr	r0, [pc, #8]	@ (8007dec <__sfp_lock_release+0xc>)
 8007de4:	f000 f916 	bl	8008014 <__retarget_lock_release_recursive>
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	46c0      	nop			@ (mov r8, r8)
 8007dec:	2000151d 	.word	0x2000151d

08007df0 <__sinit>:
 8007df0:	b510      	push	{r4, lr}
 8007df2:	0004      	movs	r4, r0
 8007df4:	f7ff ffec 	bl	8007dd0 <__sfp_lock_acquire>
 8007df8:	6a23      	ldr	r3, [r4, #32]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <__sinit+0x14>
 8007dfe:	f7ff ffef 	bl	8007de0 <__sfp_lock_release>
 8007e02:	bd10      	pop	{r4, pc}
 8007e04:	4b04      	ldr	r3, [pc, #16]	@ (8007e18 <__sinit+0x28>)
 8007e06:	6223      	str	r3, [r4, #32]
 8007e08:	4b04      	ldr	r3, [pc, #16]	@ (8007e1c <__sinit+0x2c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1f6      	bne.n	8007dfe <__sinit+0xe>
 8007e10:	f7ff ffc0 	bl	8007d94 <global_stdio_init.part.0>
 8007e14:	e7f3      	b.n	8007dfe <__sinit+0xe>
 8007e16:	46c0      	nop			@ (mov r8, r8)
 8007e18:	08007d59 	.word	0x08007d59
 8007e1c:	20001514 	.word	0x20001514

08007e20 <_fwalk_sglue>:
 8007e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e22:	0014      	movs	r4, r2
 8007e24:	2600      	movs	r6, #0
 8007e26:	9000      	str	r0, [sp, #0]
 8007e28:	9101      	str	r1, [sp, #4]
 8007e2a:	68a5      	ldr	r5, [r4, #8]
 8007e2c:	6867      	ldr	r7, [r4, #4]
 8007e2e:	3f01      	subs	r7, #1
 8007e30:	d504      	bpl.n	8007e3c <_fwalk_sglue+0x1c>
 8007e32:	6824      	ldr	r4, [r4, #0]
 8007e34:	2c00      	cmp	r4, #0
 8007e36:	d1f8      	bne.n	8007e2a <_fwalk_sglue+0xa>
 8007e38:	0030      	movs	r0, r6
 8007e3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e3c:	89ab      	ldrh	r3, [r5, #12]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d908      	bls.n	8007e54 <_fwalk_sglue+0x34>
 8007e42:	220e      	movs	r2, #14
 8007e44:	5eab      	ldrsh	r3, [r5, r2]
 8007e46:	3301      	adds	r3, #1
 8007e48:	d004      	beq.n	8007e54 <_fwalk_sglue+0x34>
 8007e4a:	0029      	movs	r1, r5
 8007e4c:	9800      	ldr	r0, [sp, #0]
 8007e4e:	9b01      	ldr	r3, [sp, #4]
 8007e50:	4798      	blx	r3
 8007e52:	4306      	orrs	r6, r0
 8007e54:	3568      	adds	r5, #104	@ 0x68
 8007e56:	e7ea      	b.n	8007e2e <_fwalk_sglue+0xe>

08007e58 <iprintf>:
 8007e58:	b40f      	push	{r0, r1, r2, r3}
 8007e5a:	b507      	push	{r0, r1, r2, lr}
 8007e5c:	4905      	ldr	r1, [pc, #20]	@ (8007e74 <iprintf+0x1c>)
 8007e5e:	ab04      	add	r3, sp, #16
 8007e60:	6808      	ldr	r0, [r1, #0]
 8007e62:	cb04      	ldmia	r3!, {r2}
 8007e64:	6881      	ldr	r1, [r0, #8]
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	f000 f9fa 	bl	8008260 <_vfiprintf_r>
 8007e6c:	b003      	add	sp, #12
 8007e6e:	bc08      	pop	{r3}
 8007e70:	b004      	add	sp, #16
 8007e72:	4718      	bx	r3
 8007e74:	20000188 	.word	0x20000188

08007e78 <__sread>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	000c      	movs	r4, r1
 8007e7c:	250e      	movs	r5, #14
 8007e7e:	5f49      	ldrsh	r1, [r1, r5]
 8007e80:	f000 f874 	bl	8007f6c <_read_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	db03      	blt.n	8007e90 <__sread+0x18>
 8007e88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007e8a:	181b      	adds	r3, r3, r0
 8007e8c:	6563      	str	r3, [r4, #84]	@ 0x54
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	4a02      	ldr	r2, [pc, #8]	@ (8007e9c <__sread+0x24>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	e7f9      	b.n	8007e8e <__sread+0x16>
 8007e9a:	46c0      	nop			@ (mov r8, r8)
 8007e9c:	ffffefff 	.word	0xffffefff

08007ea0 <__swrite>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	001f      	movs	r7, r3
 8007ea4:	898b      	ldrh	r3, [r1, #12]
 8007ea6:	0005      	movs	r5, r0
 8007ea8:	000c      	movs	r4, r1
 8007eaa:	0016      	movs	r6, r2
 8007eac:	05db      	lsls	r3, r3, #23
 8007eae:	d505      	bpl.n	8007ebc <__swrite+0x1c>
 8007eb0:	230e      	movs	r3, #14
 8007eb2:	5ec9      	ldrsh	r1, [r1, r3]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	f000 f844 	bl	8007f44 <_lseek_r>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	4a05      	ldr	r2, [pc, #20]	@ (8007ed4 <__swrite+0x34>)
 8007ec0:	0028      	movs	r0, r5
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	81a3      	strh	r3, [r4, #12]
 8007ec6:	0032      	movs	r2, r6
 8007ec8:	230e      	movs	r3, #14
 8007eca:	5ee1      	ldrsh	r1, [r4, r3]
 8007ecc:	003b      	movs	r3, r7
 8007ece:	f000 f861 	bl	8007f94 <_write_r>
 8007ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed4:	ffffefff 	.word	0xffffefff

08007ed8 <__sseek>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	000c      	movs	r4, r1
 8007edc:	250e      	movs	r5, #14
 8007ede:	5f49      	ldrsh	r1, [r1, r5]
 8007ee0:	f000 f830 	bl	8007f44 <_lseek_r>
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	1c42      	adds	r2, r0, #1
 8007ee8:	d103      	bne.n	8007ef2 <__sseek+0x1a>
 8007eea:	4a05      	ldr	r2, [pc, #20]	@ (8007f00 <__sseek+0x28>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	2280      	movs	r2, #128	@ 0x80
 8007ef4:	0152      	lsls	r2, r2, #5
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	6560      	str	r0, [r4, #84]	@ 0x54
 8007efc:	e7f8      	b.n	8007ef0 <__sseek+0x18>
 8007efe:	46c0      	nop			@ (mov r8, r8)
 8007f00:	ffffefff 	.word	0xffffefff

08007f04 <__sclose>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	230e      	movs	r3, #14
 8007f08:	5ec9      	ldrsh	r1, [r1, r3]
 8007f0a:	f000 f809 	bl	8007f20 <_close_r>
 8007f0e:	bd10      	pop	{r4, pc}

08007f10 <memset>:
 8007f10:	0003      	movs	r3, r0
 8007f12:	1882      	adds	r2, r0, r2
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d100      	bne.n	8007f1a <memset+0xa>
 8007f18:	4770      	bx	lr
 8007f1a:	7019      	strb	r1, [r3, #0]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	e7f9      	b.n	8007f14 <memset+0x4>

08007f20 <_close_r>:
 8007f20:	2300      	movs	r3, #0
 8007f22:	b570      	push	{r4, r5, r6, lr}
 8007f24:	4d06      	ldr	r5, [pc, #24]	@ (8007f40 <_close_r+0x20>)
 8007f26:	0004      	movs	r4, r0
 8007f28:	0008      	movs	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7f8 fbf1 	bl	8000712 <_close>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d103      	bne.n	8007f3c <_close_r+0x1c>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d000      	beq.n	8007f3c <_close_r+0x1c>
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	bd70      	pop	{r4, r5, r6, pc}
 8007f3e:	46c0      	nop			@ (mov r8, r8)
 8007f40:	20001518 	.word	0x20001518

08007f44 <_lseek_r>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	0004      	movs	r4, r0
 8007f48:	0008      	movs	r0, r1
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	001a      	movs	r2, r3
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4d05      	ldr	r5, [pc, #20]	@ (8007f68 <_lseek_r+0x24>)
 8007f52:	602b      	str	r3, [r5, #0]
 8007f54:	f7f8 fbfe 	bl	8000754 <_lseek>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d103      	bne.n	8007f64 <_lseek_r+0x20>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d000      	beq.n	8007f64 <_lseek_r+0x20>
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	46c0      	nop			@ (mov r8, r8)
 8007f68:	20001518 	.word	0x20001518

08007f6c <_read_r>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	0004      	movs	r4, r0
 8007f70:	0008      	movs	r0, r1
 8007f72:	0011      	movs	r1, r2
 8007f74:	001a      	movs	r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	4d05      	ldr	r5, [pc, #20]	@ (8007f90 <_read_r+0x24>)
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	f7f8 fb9a 	bl	80006b4 <_read>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d103      	bne.n	8007f8c <_read_r+0x20>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d000      	beq.n	8007f8c <_read_r+0x20>
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	46c0      	nop			@ (mov r8, r8)
 8007f90:	20001518 	.word	0x20001518

08007f94 <_write_r>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	0004      	movs	r4, r0
 8007f98:	0008      	movs	r0, r1
 8007f9a:	0011      	movs	r1, r2
 8007f9c:	001a      	movs	r2, r3
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	4d05      	ldr	r5, [pc, #20]	@ (8007fb8 <_write_r+0x24>)
 8007fa2:	602b      	str	r3, [r5, #0]
 8007fa4:	f7f8 fba3 	bl	80006ee <_write>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d103      	bne.n	8007fb4 <_write_r+0x20>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d000      	beq.n	8007fb4 <_write_r+0x20>
 8007fb2:	6023      	str	r3, [r4, #0]
 8007fb4:	bd70      	pop	{r4, r5, r6, pc}
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	20001518 	.word	0x20001518

08007fbc <__errno>:
 8007fbc:	4b01      	ldr	r3, [pc, #4]	@ (8007fc4 <__errno+0x8>)
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	4770      	bx	lr
 8007fc2:	46c0      	nop			@ (mov r8, r8)
 8007fc4:	20000188 	.word	0x20000188

08007fc8 <__libc_init_array>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	2600      	movs	r6, #0
 8007fcc:	4c0c      	ldr	r4, [pc, #48]	@ (8008000 <__libc_init_array+0x38>)
 8007fce:	4d0d      	ldr	r5, [pc, #52]	@ (8008004 <__libc_init_array+0x3c>)
 8007fd0:	1b64      	subs	r4, r4, r5
 8007fd2:	10a4      	asrs	r4, r4, #2
 8007fd4:	42a6      	cmp	r6, r4
 8007fd6:	d109      	bne.n	8007fec <__libc_init_array+0x24>
 8007fd8:	2600      	movs	r6, #0
 8007fda:	f000 fddb 	bl	8008b94 <_init>
 8007fde:	4c0a      	ldr	r4, [pc, #40]	@ (8008008 <__libc_init_array+0x40>)
 8007fe0:	4d0a      	ldr	r5, [pc, #40]	@ (800800c <__libc_init_array+0x44>)
 8007fe2:	1b64      	subs	r4, r4, r5
 8007fe4:	10a4      	asrs	r4, r4, #2
 8007fe6:	42a6      	cmp	r6, r4
 8007fe8:	d105      	bne.n	8007ff6 <__libc_init_array+0x2e>
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	00b3      	lsls	r3, r6, #2
 8007fee:	58eb      	ldr	r3, [r5, r3]
 8007ff0:	4798      	blx	r3
 8007ff2:	3601      	adds	r6, #1
 8007ff4:	e7ee      	b.n	8007fd4 <__libc_init_array+0xc>
 8007ff6:	00b3      	lsls	r3, r6, #2
 8007ff8:	58eb      	ldr	r3, [r5, r3]
 8007ffa:	4798      	blx	r3
 8007ffc:	3601      	adds	r6, #1
 8007ffe:	e7f2      	b.n	8007fe6 <__libc_init_array+0x1e>
 8008000:	08008d4c 	.word	0x08008d4c
 8008004:	08008d4c 	.word	0x08008d4c
 8008008:	08008d50 	.word	0x08008d50
 800800c:	08008d4c 	.word	0x08008d4c

08008010 <__retarget_lock_init_recursive>:
 8008010:	4770      	bx	lr

08008012 <__retarget_lock_acquire_recursive>:
 8008012:	4770      	bx	lr

08008014 <__retarget_lock_release_recursive>:
 8008014:	4770      	bx	lr
	...

08008018 <_free_r>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	0005      	movs	r5, r0
 800801c:	1e0c      	subs	r4, r1, #0
 800801e:	d010      	beq.n	8008042 <_free_r+0x2a>
 8008020:	3c04      	subs	r4, #4
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	da00      	bge.n	800802a <_free_r+0x12>
 8008028:	18e4      	adds	r4, r4, r3
 800802a:	0028      	movs	r0, r5
 800802c:	f000 f8e0 	bl	80081f0 <__malloc_lock>
 8008030:	4a1d      	ldr	r2, [pc, #116]	@ (80080a8 <_free_r+0x90>)
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <_free_r+0x2c>
 8008038:	6063      	str	r3, [r4, #4]
 800803a:	6014      	str	r4, [r2, #0]
 800803c:	0028      	movs	r0, r5
 800803e:	f000 f8df 	bl	8008200 <__malloc_unlock>
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	42a3      	cmp	r3, r4
 8008046:	d908      	bls.n	800805a <_free_r+0x42>
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	1821      	adds	r1, r4, r0
 800804c:	428b      	cmp	r3, r1
 800804e:	d1f3      	bne.n	8008038 <_free_r+0x20>
 8008050:	6819      	ldr	r1, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	1809      	adds	r1, r1, r0
 8008056:	6021      	str	r1, [r4, #0]
 8008058:	e7ee      	b.n	8008038 <_free_r+0x20>
 800805a:	001a      	movs	r2, r3
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <_free_r+0x4e>
 8008062:	42a3      	cmp	r3, r4
 8008064:	d9f9      	bls.n	800805a <_free_r+0x42>
 8008066:	6811      	ldr	r1, [r2, #0]
 8008068:	1850      	adds	r0, r2, r1
 800806a:	42a0      	cmp	r0, r4
 800806c:	d10b      	bne.n	8008086 <_free_r+0x6e>
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	1809      	adds	r1, r1, r0
 8008072:	1850      	adds	r0, r2, r1
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	4283      	cmp	r3, r0
 8008078:	d1e0      	bne.n	800803c <_free_r+0x24>
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	1841      	adds	r1, r0, r1
 8008080:	6011      	str	r1, [r2, #0]
 8008082:	6053      	str	r3, [r2, #4]
 8008084:	e7da      	b.n	800803c <_free_r+0x24>
 8008086:	42a0      	cmp	r0, r4
 8008088:	d902      	bls.n	8008090 <_free_r+0x78>
 800808a:	230c      	movs	r3, #12
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	e7d5      	b.n	800803c <_free_r+0x24>
 8008090:	6820      	ldr	r0, [r4, #0]
 8008092:	1821      	adds	r1, r4, r0
 8008094:	428b      	cmp	r3, r1
 8008096:	d103      	bne.n	80080a0 <_free_r+0x88>
 8008098:	6819      	ldr	r1, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	1809      	adds	r1, r1, r0
 800809e:	6021      	str	r1, [r4, #0]
 80080a0:	6063      	str	r3, [r4, #4]
 80080a2:	6054      	str	r4, [r2, #4]
 80080a4:	e7ca      	b.n	800803c <_free_r+0x24>
 80080a6:	46c0      	nop			@ (mov r8, r8)
 80080a8:	20001524 	.word	0x20001524

080080ac <sbrk_aligned>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4e0f      	ldr	r6, [pc, #60]	@ (80080ec <sbrk_aligned+0x40>)
 80080b0:	000d      	movs	r5, r1
 80080b2:	6831      	ldr	r1, [r6, #0]
 80080b4:	0004      	movs	r4, r0
 80080b6:	2900      	cmp	r1, #0
 80080b8:	d102      	bne.n	80080c0 <sbrk_aligned+0x14>
 80080ba:	f000 fcbd 	bl	8008a38 <_sbrk_r>
 80080be:	6030      	str	r0, [r6, #0]
 80080c0:	0029      	movs	r1, r5
 80080c2:	0020      	movs	r0, r4
 80080c4:	f000 fcb8 	bl	8008a38 <_sbrk_r>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d103      	bne.n	80080d4 <sbrk_aligned+0x28>
 80080cc:	2501      	movs	r5, #1
 80080ce:	426d      	negs	r5, r5
 80080d0:	0028      	movs	r0, r5
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	2303      	movs	r3, #3
 80080d6:	1cc5      	adds	r5, r0, #3
 80080d8:	439d      	bics	r5, r3
 80080da:	42a8      	cmp	r0, r5
 80080dc:	d0f8      	beq.n	80080d0 <sbrk_aligned+0x24>
 80080de:	1a29      	subs	r1, r5, r0
 80080e0:	0020      	movs	r0, r4
 80080e2:	f000 fca9 	bl	8008a38 <_sbrk_r>
 80080e6:	3001      	adds	r0, #1
 80080e8:	d1f2      	bne.n	80080d0 <sbrk_aligned+0x24>
 80080ea:	e7ef      	b.n	80080cc <sbrk_aligned+0x20>
 80080ec:	20001520 	.word	0x20001520

080080f0 <_malloc_r>:
 80080f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080f2:	2203      	movs	r2, #3
 80080f4:	1ccb      	adds	r3, r1, #3
 80080f6:	4393      	bics	r3, r2
 80080f8:	3308      	adds	r3, #8
 80080fa:	0005      	movs	r5, r0
 80080fc:	001f      	movs	r7, r3
 80080fe:	2b0c      	cmp	r3, #12
 8008100:	d234      	bcs.n	800816c <_malloc_r+0x7c>
 8008102:	270c      	movs	r7, #12
 8008104:	42b9      	cmp	r1, r7
 8008106:	d833      	bhi.n	8008170 <_malloc_r+0x80>
 8008108:	0028      	movs	r0, r5
 800810a:	f000 f871 	bl	80081f0 <__malloc_lock>
 800810e:	4e37      	ldr	r6, [pc, #220]	@ (80081ec <_malloc_r+0xfc>)
 8008110:	6833      	ldr	r3, [r6, #0]
 8008112:	001c      	movs	r4, r3
 8008114:	2c00      	cmp	r4, #0
 8008116:	d12f      	bne.n	8008178 <_malloc_r+0x88>
 8008118:	0039      	movs	r1, r7
 800811a:	0028      	movs	r0, r5
 800811c:	f7ff ffc6 	bl	80080ac <sbrk_aligned>
 8008120:	0004      	movs	r4, r0
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	d15f      	bne.n	80081e6 <_malloc_r+0xf6>
 8008126:	6834      	ldr	r4, [r6, #0]
 8008128:	9400      	str	r4, [sp, #0]
 800812a:	9b00      	ldr	r3, [sp, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d14a      	bne.n	80081c6 <_malloc_r+0xd6>
 8008130:	2c00      	cmp	r4, #0
 8008132:	d052      	beq.n	80081da <_malloc_r+0xea>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	0028      	movs	r0, r5
 8008138:	18e3      	adds	r3, r4, r3
 800813a:	9900      	ldr	r1, [sp, #0]
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	f000 fc7b 	bl	8008a38 <_sbrk_r>
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	4283      	cmp	r3, r0
 8008146:	d148      	bne.n	80081da <_malloc_r+0xea>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	0028      	movs	r0, r5
 800814c:	1aff      	subs	r7, r7, r3
 800814e:	0039      	movs	r1, r7
 8008150:	f7ff ffac 	bl	80080ac <sbrk_aligned>
 8008154:	3001      	adds	r0, #1
 8008156:	d040      	beq.n	80081da <_malloc_r+0xea>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	19db      	adds	r3, r3, r7
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	6833      	ldr	r3, [r6, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	2a00      	cmp	r2, #0
 8008164:	d133      	bne.n	80081ce <_malloc_r+0xde>
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	6033      	str	r3, [r6, #0]
 800816a:	e019      	b.n	80081a0 <_malloc_r+0xb0>
 800816c:	2b00      	cmp	r3, #0
 800816e:	dac9      	bge.n	8008104 <_malloc_r+0x14>
 8008170:	230c      	movs	r3, #12
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	2000      	movs	r0, #0
 8008176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008178:	6821      	ldr	r1, [r4, #0]
 800817a:	1bc9      	subs	r1, r1, r7
 800817c:	d420      	bmi.n	80081c0 <_malloc_r+0xd0>
 800817e:	290b      	cmp	r1, #11
 8008180:	d90a      	bls.n	8008198 <_malloc_r+0xa8>
 8008182:	19e2      	adds	r2, r4, r7
 8008184:	6027      	str	r7, [r4, #0]
 8008186:	42a3      	cmp	r3, r4
 8008188:	d104      	bne.n	8008194 <_malloc_r+0xa4>
 800818a:	6032      	str	r2, [r6, #0]
 800818c:	6863      	ldr	r3, [r4, #4]
 800818e:	6011      	str	r1, [r2, #0]
 8008190:	6053      	str	r3, [r2, #4]
 8008192:	e005      	b.n	80081a0 <_malloc_r+0xb0>
 8008194:	605a      	str	r2, [r3, #4]
 8008196:	e7f9      	b.n	800818c <_malloc_r+0x9c>
 8008198:	6862      	ldr	r2, [r4, #4]
 800819a:	42a3      	cmp	r3, r4
 800819c:	d10e      	bne.n	80081bc <_malloc_r+0xcc>
 800819e:	6032      	str	r2, [r6, #0]
 80081a0:	0028      	movs	r0, r5
 80081a2:	f000 f82d 	bl	8008200 <__malloc_unlock>
 80081a6:	0020      	movs	r0, r4
 80081a8:	2207      	movs	r2, #7
 80081aa:	300b      	adds	r0, #11
 80081ac:	1d23      	adds	r3, r4, #4
 80081ae:	4390      	bics	r0, r2
 80081b0:	1ac2      	subs	r2, r0, r3
 80081b2:	4298      	cmp	r0, r3
 80081b4:	d0df      	beq.n	8008176 <_malloc_r+0x86>
 80081b6:	1a1b      	subs	r3, r3, r0
 80081b8:	50a3      	str	r3, [r4, r2]
 80081ba:	e7dc      	b.n	8008176 <_malloc_r+0x86>
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	e7ef      	b.n	80081a0 <_malloc_r+0xb0>
 80081c0:	0023      	movs	r3, r4
 80081c2:	6864      	ldr	r4, [r4, #4]
 80081c4:	e7a6      	b.n	8008114 <_malloc_r+0x24>
 80081c6:	9c00      	ldr	r4, [sp, #0]
 80081c8:	6863      	ldr	r3, [r4, #4]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	e7ad      	b.n	800812a <_malloc_r+0x3a>
 80081ce:	001a      	movs	r2, r3
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	d1fb      	bne.n	80081ce <_malloc_r+0xde>
 80081d6:	2300      	movs	r3, #0
 80081d8:	e7da      	b.n	8008190 <_malloc_r+0xa0>
 80081da:	230c      	movs	r3, #12
 80081dc:	0028      	movs	r0, r5
 80081de:	602b      	str	r3, [r5, #0]
 80081e0:	f000 f80e 	bl	8008200 <__malloc_unlock>
 80081e4:	e7c6      	b.n	8008174 <_malloc_r+0x84>
 80081e6:	6007      	str	r7, [r0, #0]
 80081e8:	e7da      	b.n	80081a0 <_malloc_r+0xb0>
 80081ea:	46c0      	nop			@ (mov r8, r8)
 80081ec:	20001524 	.word	0x20001524

080081f0 <__malloc_lock>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	4802      	ldr	r0, [pc, #8]	@ (80081fc <__malloc_lock+0xc>)
 80081f4:	f7ff ff0d 	bl	8008012 <__retarget_lock_acquire_recursive>
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	2000151c 	.word	0x2000151c

08008200 <__malloc_unlock>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4802      	ldr	r0, [pc, #8]	@ (800820c <__malloc_unlock+0xc>)
 8008204:	f7ff ff06 	bl	8008014 <__retarget_lock_release_recursive>
 8008208:	bd10      	pop	{r4, pc}
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	2000151c 	.word	0x2000151c

08008210 <__sfputc_r>:
 8008210:	6893      	ldr	r3, [r2, #8]
 8008212:	b510      	push	{r4, lr}
 8008214:	3b01      	subs	r3, #1
 8008216:	6093      	str	r3, [r2, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	da04      	bge.n	8008226 <__sfputc_r+0x16>
 800821c:	6994      	ldr	r4, [r2, #24]
 800821e:	42a3      	cmp	r3, r4
 8008220:	db07      	blt.n	8008232 <__sfputc_r+0x22>
 8008222:	290a      	cmp	r1, #10
 8008224:	d005      	beq.n	8008232 <__sfputc_r+0x22>
 8008226:	6813      	ldr	r3, [r2, #0]
 8008228:	1c58      	adds	r0, r3, #1
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	7019      	strb	r1, [r3, #0]
 800822e:	0008      	movs	r0, r1
 8008230:	bd10      	pop	{r4, pc}
 8008232:	f000 fb60 	bl	80088f6 <__swbuf_r>
 8008236:	0001      	movs	r1, r0
 8008238:	e7f9      	b.n	800822e <__sfputc_r+0x1e>

0800823a <__sfputs_r>:
 800823a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823c:	0006      	movs	r6, r0
 800823e:	000f      	movs	r7, r1
 8008240:	0014      	movs	r4, r2
 8008242:	18d5      	adds	r5, r2, r3
 8008244:	42ac      	cmp	r4, r5
 8008246:	d101      	bne.n	800824c <__sfputs_r+0x12>
 8008248:	2000      	movs	r0, #0
 800824a:	e007      	b.n	800825c <__sfputs_r+0x22>
 800824c:	7821      	ldrb	r1, [r4, #0]
 800824e:	003a      	movs	r2, r7
 8008250:	0030      	movs	r0, r6
 8008252:	f7ff ffdd 	bl	8008210 <__sfputc_r>
 8008256:	3401      	adds	r4, #1
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d1f3      	bne.n	8008244 <__sfputs_r+0xa>
 800825c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008260 <_vfiprintf_r>:
 8008260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008262:	b0a1      	sub	sp, #132	@ 0x84
 8008264:	000f      	movs	r7, r1
 8008266:	0015      	movs	r5, r2
 8008268:	001e      	movs	r6, r3
 800826a:	9003      	str	r0, [sp, #12]
 800826c:	2800      	cmp	r0, #0
 800826e:	d004      	beq.n	800827a <_vfiprintf_r+0x1a>
 8008270:	6a03      	ldr	r3, [r0, #32]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <_vfiprintf_r+0x1a>
 8008276:	f7ff fdbb 	bl	8007df0 <__sinit>
 800827a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800827c:	07db      	lsls	r3, r3, #31
 800827e:	d405      	bmi.n	800828c <_vfiprintf_r+0x2c>
 8008280:	89bb      	ldrh	r3, [r7, #12]
 8008282:	059b      	lsls	r3, r3, #22
 8008284:	d402      	bmi.n	800828c <_vfiprintf_r+0x2c>
 8008286:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008288:	f7ff fec3 	bl	8008012 <__retarget_lock_acquire_recursive>
 800828c:	89bb      	ldrh	r3, [r7, #12]
 800828e:	071b      	lsls	r3, r3, #28
 8008290:	d502      	bpl.n	8008298 <_vfiprintf_r+0x38>
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d113      	bne.n	80082c0 <_vfiprintf_r+0x60>
 8008298:	0039      	movs	r1, r7
 800829a:	9803      	ldr	r0, [sp, #12]
 800829c:	f000 fb6e 	bl	800897c <__swsetup_r>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d00d      	beq.n	80082c0 <_vfiprintf_r+0x60>
 80082a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082a6:	07db      	lsls	r3, r3, #31
 80082a8:	d503      	bpl.n	80082b2 <_vfiprintf_r+0x52>
 80082aa:	2001      	movs	r0, #1
 80082ac:	4240      	negs	r0, r0
 80082ae:	b021      	add	sp, #132	@ 0x84
 80082b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b2:	89bb      	ldrh	r3, [r7, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4f8      	bmi.n	80082aa <_vfiprintf_r+0x4a>
 80082b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80082ba:	f7ff feab 	bl	8008014 <__retarget_lock_release_recursive>
 80082be:	e7f4      	b.n	80082aa <_vfiprintf_r+0x4a>
 80082c0:	2300      	movs	r3, #0
 80082c2:	ac08      	add	r4, sp, #32
 80082c4:	6163      	str	r3, [r4, #20]
 80082c6:	3320      	adds	r3, #32
 80082c8:	7663      	strb	r3, [r4, #25]
 80082ca:	3310      	adds	r3, #16
 80082cc:	76a3      	strb	r3, [r4, #26]
 80082ce:	9607      	str	r6, [sp, #28]
 80082d0:	002e      	movs	r6, r5
 80082d2:	7833      	ldrb	r3, [r6, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <_vfiprintf_r+0x7c>
 80082d8:	2b25      	cmp	r3, #37	@ 0x25
 80082da:	d148      	bne.n	800836e <_vfiprintf_r+0x10e>
 80082dc:	1b73      	subs	r3, r6, r5
 80082de:	9305      	str	r3, [sp, #20]
 80082e0:	42ae      	cmp	r6, r5
 80082e2:	d00b      	beq.n	80082fc <_vfiprintf_r+0x9c>
 80082e4:	002a      	movs	r2, r5
 80082e6:	0039      	movs	r1, r7
 80082e8:	9803      	ldr	r0, [sp, #12]
 80082ea:	f7ff ffa6 	bl	800823a <__sfputs_r>
 80082ee:	3001      	adds	r0, #1
 80082f0:	d100      	bne.n	80082f4 <_vfiprintf_r+0x94>
 80082f2:	e0ae      	b.n	8008452 <_vfiprintf_r+0x1f2>
 80082f4:	6963      	ldr	r3, [r4, #20]
 80082f6:	9a05      	ldr	r2, [sp, #20]
 80082f8:	189b      	adds	r3, r3, r2
 80082fa:	6163      	str	r3, [r4, #20]
 80082fc:	7833      	ldrb	r3, [r6, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d100      	bne.n	8008304 <_vfiprintf_r+0xa4>
 8008302:	e0a6      	b.n	8008452 <_vfiprintf_r+0x1f2>
 8008304:	2201      	movs	r2, #1
 8008306:	2300      	movs	r3, #0
 8008308:	4252      	negs	r2, r2
 800830a:	6062      	str	r2, [r4, #4]
 800830c:	a904      	add	r1, sp, #16
 800830e:	3254      	adds	r2, #84	@ 0x54
 8008310:	1852      	adds	r2, r2, r1
 8008312:	1c75      	adds	r5, r6, #1
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	60e3      	str	r3, [r4, #12]
 8008318:	60a3      	str	r3, [r4, #8]
 800831a:	7013      	strb	r3, [r2, #0]
 800831c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800831e:	4b59      	ldr	r3, [pc, #356]	@ (8008484 <_vfiprintf_r+0x224>)
 8008320:	2205      	movs	r2, #5
 8008322:	0018      	movs	r0, r3
 8008324:	7829      	ldrb	r1, [r5, #0]
 8008326:	9305      	str	r3, [sp, #20]
 8008328:	f000 fb98 	bl	8008a5c <memchr>
 800832c:	1c6e      	adds	r6, r5, #1
 800832e:	2800      	cmp	r0, #0
 8008330:	d11f      	bne.n	8008372 <_vfiprintf_r+0x112>
 8008332:	6822      	ldr	r2, [r4, #0]
 8008334:	06d3      	lsls	r3, r2, #27
 8008336:	d504      	bpl.n	8008342 <_vfiprintf_r+0xe2>
 8008338:	2353      	movs	r3, #83	@ 0x53
 800833a:	a904      	add	r1, sp, #16
 800833c:	185b      	adds	r3, r3, r1
 800833e:	2120      	movs	r1, #32
 8008340:	7019      	strb	r1, [r3, #0]
 8008342:	0713      	lsls	r3, r2, #28
 8008344:	d504      	bpl.n	8008350 <_vfiprintf_r+0xf0>
 8008346:	2353      	movs	r3, #83	@ 0x53
 8008348:	a904      	add	r1, sp, #16
 800834a:	185b      	adds	r3, r3, r1
 800834c:	212b      	movs	r1, #43	@ 0x2b
 800834e:	7019      	strb	r1, [r3, #0]
 8008350:	782b      	ldrb	r3, [r5, #0]
 8008352:	2b2a      	cmp	r3, #42	@ 0x2a
 8008354:	d016      	beq.n	8008384 <_vfiprintf_r+0x124>
 8008356:	002e      	movs	r6, r5
 8008358:	2100      	movs	r1, #0
 800835a:	200a      	movs	r0, #10
 800835c:	68e3      	ldr	r3, [r4, #12]
 800835e:	7832      	ldrb	r2, [r6, #0]
 8008360:	1c75      	adds	r5, r6, #1
 8008362:	3a30      	subs	r2, #48	@ 0x30
 8008364:	2a09      	cmp	r2, #9
 8008366:	d950      	bls.n	800840a <_vfiprintf_r+0x1aa>
 8008368:	2900      	cmp	r1, #0
 800836a:	d111      	bne.n	8008390 <_vfiprintf_r+0x130>
 800836c:	e017      	b.n	800839e <_vfiprintf_r+0x13e>
 800836e:	3601      	adds	r6, #1
 8008370:	e7af      	b.n	80082d2 <_vfiprintf_r+0x72>
 8008372:	9b05      	ldr	r3, [sp, #20]
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	1ac0      	subs	r0, r0, r3
 8008378:	2301      	movs	r3, #1
 800837a:	4083      	lsls	r3, r0
 800837c:	4313      	orrs	r3, r2
 800837e:	0035      	movs	r5, r6
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	e7cc      	b.n	800831e <_vfiprintf_r+0xbe>
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	1d19      	adds	r1, r3, #4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	9107      	str	r1, [sp, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	db01      	blt.n	8008394 <_vfiprintf_r+0x134>
 8008390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008392:	e004      	b.n	800839e <_vfiprintf_r+0x13e>
 8008394:	425b      	negs	r3, r3
 8008396:	60e3      	str	r3, [r4, #12]
 8008398:	2302      	movs	r3, #2
 800839a:	4313      	orrs	r3, r2
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	7833      	ldrb	r3, [r6, #0]
 80083a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80083a2:	d10c      	bne.n	80083be <_vfiprintf_r+0x15e>
 80083a4:	7873      	ldrb	r3, [r6, #1]
 80083a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80083a8:	d134      	bne.n	8008414 <_vfiprintf_r+0x1b4>
 80083aa:	9b07      	ldr	r3, [sp, #28]
 80083ac:	3602      	adds	r6, #2
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	9207      	str	r2, [sp, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	da01      	bge.n	80083bc <_vfiprintf_r+0x15c>
 80083b8:	2301      	movs	r3, #1
 80083ba:	425b      	negs	r3, r3
 80083bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083be:	4d32      	ldr	r5, [pc, #200]	@ (8008488 <_vfiprintf_r+0x228>)
 80083c0:	2203      	movs	r2, #3
 80083c2:	0028      	movs	r0, r5
 80083c4:	7831      	ldrb	r1, [r6, #0]
 80083c6:	f000 fb49 	bl	8008a5c <memchr>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d006      	beq.n	80083dc <_vfiprintf_r+0x17c>
 80083ce:	2340      	movs	r3, #64	@ 0x40
 80083d0:	1b40      	subs	r0, r0, r5
 80083d2:	4083      	lsls	r3, r0
 80083d4:	6822      	ldr	r2, [r4, #0]
 80083d6:	3601      	adds	r6, #1
 80083d8:	4313      	orrs	r3, r2
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	7831      	ldrb	r1, [r6, #0]
 80083de:	2206      	movs	r2, #6
 80083e0:	482a      	ldr	r0, [pc, #168]	@ (800848c <_vfiprintf_r+0x22c>)
 80083e2:	1c75      	adds	r5, r6, #1
 80083e4:	7621      	strb	r1, [r4, #24]
 80083e6:	f000 fb39 	bl	8008a5c <memchr>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d040      	beq.n	8008470 <_vfiprintf_r+0x210>
 80083ee:	4b28      	ldr	r3, [pc, #160]	@ (8008490 <_vfiprintf_r+0x230>)
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d122      	bne.n	800843a <_vfiprintf_r+0x1da>
 80083f4:	2207      	movs	r2, #7
 80083f6:	9b07      	ldr	r3, [sp, #28]
 80083f8:	3307      	adds	r3, #7
 80083fa:	4393      	bics	r3, r2
 80083fc:	3308      	adds	r3, #8
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	6963      	ldr	r3, [r4, #20]
 8008402:	9a04      	ldr	r2, [sp, #16]
 8008404:	189b      	adds	r3, r3, r2
 8008406:	6163      	str	r3, [r4, #20]
 8008408:	e762      	b.n	80082d0 <_vfiprintf_r+0x70>
 800840a:	4343      	muls	r3, r0
 800840c:	002e      	movs	r6, r5
 800840e:	2101      	movs	r1, #1
 8008410:	189b      	adds	r3, r3, r2
 8008412:	e7a4      	b.n	800835e <_vfiprintf_r+0xfe>
 8008414:	2300      	movs	r3, #0
 8008416:	200a      	movs	r0, #10
 8008418:	0019      	movs	r1, r3
 800841a:	3601      	adds	r6, #1
 800841c:	6063      	str	r3, [r4, #4]
 800841e:	7832      	ldrb	r2, [r6, #0]
 8008420:	1c75      	adds	r5, r6, #1
 8008422:	3a30      	subs	r2, #48	@ 0x30
 8008424:	2a09      	cmp	r2, #9
 8008426:	d903      	bls.n	8008430 <_vfiprintf_r+0x1d0>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0c8      	beq.n	80083be <_vfiprintf_r+0x15e>
 800842c:	9109      	str	r1, [sp, #36]	@ 0x24
 800842e:	e7c6      	b.n	80083be <_vfiprintf_r+0x15e>
 8008430:	4341      	muls	r1, r0
 8008432:	002e      	movs	r6, r5
 8008434:	2301      	movs	r3, #1
 8008436:	1889      	adds	r1, r1, r2
 8008438:	e7f1      	b.n	800841e <_vfiprintf_r+0x1be>
 800843a:	aa07      	add	r2, sp, #28
 800843c:	9200      	str	r2, [sp, #0]
 800843e:	0021      	movs	r1, r4
 8008440:	003a      	movs	r2, r7
 8008442:	4b14      	ldr	r3, [pc, #80]	@ (8008494 <_vfiprintf_r+0x234>)
 8008444:	9803      	ldr	r0, [sp, #12]
 8008446:	e000      	b.n	800844a <_vfiprintf_r+0x1ea>
 8008448:	bf00      	nop
 800844a:	9004      	str	r0, [sp, #16]
 800844c:	9b04      	ldr	r3, [sp, #16]
 800844e:	3301      	adds	r3, #1
 8008450:	d1d6      	bne.n	8008400 <_vfiprintf_r+0x1a0>
 8008452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008454:	07db      	lsls	r3, r3, #31
 8008456:	d405      	bmi.n	8008464 <_vfiprintf_r+0x204>
 8008458:	89bb      	ldrh	r3, [r7, #12]
 800845a:	059b      	lsls	r3, r3, #22
 800845c:	d402      	bmi.n	8008464 <_vfiprintf_r+0x204>
 800845e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008460:	f7ff fdd8 	bl	8008014 <__retarget_lock_release_recursive>
 8008464:	89bb      	ldrh	r3, [r7, #12]
 8008466:	065b      	lsls	r3, r3, #25
 8008468:	d500      	bpl.n	800846c <_vfiprintf_r+0x20c>
 800846a:	e71e      	b.n	80082aa <_vfiprintf_r+0x4a>
 800846c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800846e:	e71e      	b.n	80082ae <_vfiprintf_r+0x4e>
 8008470:	aa07      	add	r2, sp, #28
 8008472:	9200      	str	r2, [sp, #0]
 8008474:	0021      	movs	r1, r4
 8008476:	003a      	movs	r2, r7
 8008478:	4b06      	ldr	r3, [pc, #24]	@ (8008494 <_vfiprintf_r+0x234>)
 800847a:	9803      	ldr	r0, [sp, #12]
 800847c:	f000 f87c 	bl	8008578 <_printf_i>
 8008480:	e7e3      	b.n	800844a <_vfiprintf_r+0x1ea>
 8008482:	46c0      	nop			@ (mov r8, r8)
 8008484:	08008d10 	.word	0x08008d10
 8008488:	08008d16 	.word	0x08008d16
 800848c:	08008d1a 	.word	0x08008d1a
 8008490:	00000000 	.word	0x00000000
 8008494:	0800823b 	.word	0x0800823b

08008498 <_printf_common>:
 8008498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800849a:	0016      	movs	r6, r2
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	688a      	ldr	r2, [r1, #8]
 80084a0:	690b      	ldr	r3, [r1, #16]
 80084a2:	000c      	movs	r4, r1
 80084a4:	9000      	str	r0, [sp, #0]
 80084a6:	4293      	cmp	r3, r2
 80084a8:	da00      	bge.n	80084ac <_printf_common+0x14>
 80084aa:	0013      	movs	r3, r2
 80084ac:	0022      	movs	r2, r4
 80084ae:	6033      	str	r3, [r6, #0]
 80084b0:	3243      	adds	r2, #67	@ 0x43
 80084b2:	7812      	ldrb	r2, [r2, #0]
 80084b4:	2a00      	cmp	r2, #0
 80084b6:	d001      	beq.n	80084bc <_printf_common+0x24>
 80084b8:	3301      	adds	r3, #1
 80084ba:	6033      	str	r3, [r6, #0]
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	069b      	lsls	r3, r3, #26
 80084c0:	d502      	bpl.n	80084c8 <_printf_common+0x30>
 80084c2:	6833      	ldr	r3, [r6, #0]
 80084c4:	3302      	adds	r3, #2
 80084c6:	6033      	str	r3, [r6, #0]
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	2306      	movs	r3, #6
 80084cc:	0015      	movs	r5, r2
 80084ce:	401d      	ands	r5, r3
 80084d0:	421a      	tst	r2, r3
 80084d2:	d027      	beq.n	8008524 <_printf_common+0x8c>
 80084d4:	0023      	movs	r3, r4
 80084d6:	3343      	adds	r3, #67	@ 0x43
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	1e5a      	subs	r2, r3, #1
 80084dc:	4193      	sbcs	r3, r2
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	0692      	lsls	r2, r2, #26
 80084e2:	d430      	bmi.n	8008546 <_printf_common+0xae>
 80084e4:	0022      	movs	r2, r4
 80084e6:	9901      	ldr	r1, [sp, #4]
 80084e8:	9800      	ldr	r0, [sp, #0]
 80084ea:	9d08      	ldr	r5, [sp, #32]
 80084ec:	3243      	adds	r2, #67	@ 0x43
 80084ee:	47a8      	blx	r5
 80084f0:	3001      	adds	r0, #1
 80084f2:	d025      	beq.n	8008540 <_printf_common+0xa8>
 80084f4:	2206      	movs	r2, #6
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	2500      	movs	r5, #0
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d105      	bne.n	800850c <_printf_common+0x74>
 8008500:	6833      	ldr	r3, [r6, #0]
 8008502:	68e5      	ldr	r5, [r4, #12]
 8008504:	1aed      	subs	r5, r5, r3
 8008506:	43eb      	mvns	r3, r5
 8008508:	17db      	asrs	r3, r3, #31
 800850a:	401d      	ands	r5, r3
 800850c:	68a3      	ldr	r3, [r4, #8]
 800850e:	6922      	ldr	r2, [r4, #16]
 8008510:	4293      	cmp	r3, r2
 8008512:	dd01      	ble.n	8008518 <_printf_common+0x80>
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	18ed      	adds	r5, r5, r3
 8008518:	2600      	movs	r6, #0
 800851a:	42b5      	cmp	r5, r6
 800851c:	d120      	bne.n	8008560 <_printf_common+0xc8>
 800851e:	2000      	movs	r0, #0
 8008520:	e010      	b.n	8008544 <_printf_common+0xac>
 8008522:	3501      	adds	r5, #1
 8008524:	68e3      	ldr	r3, [r4, #12]
 8008526:	6832      	ldr	r2, [r6, #0]
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	42ab      	cmp	r3, r5
 800852c:	ddd2      	ble.n	80084d4 <_printf_common+0x3c>
 800852e:	0022      	movs	r2, r4
 8008530:	2301      	movs	r3, #1
 8008532:	9901      	ldr	r1, [sp, #4]
 8008534:	9800      	ldr	r0, [sp, #0]
 8008536:	9f08      	ldr	r7, [sp, #32]
 8008538:	3219      	adds	r2, #25
 800853a:	47b8      	blx	r7
 800853c:	3001      	adds	r0, #1
 800853e:	d1f0      	bne.n	8008522 <_printf_common+0x8a>
 8008540:	2001      	movs	r0, #1
 8008542:	4240      	negs	r0, r0
 8008544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008546:	2030      	movs	r0, #48	@ 0x30
 8008548:	18e1      	adds	r1, r4, r3
 800854a:	3143      	adds	r1, #67	@ 0x43
 800854c:	7008      	strb	r0, [r1, #0]
 800854e:	0021      	movs	r1, r4
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	3145      	adds	r1, #69	@ 0x45
 8008554:	7809      	ldrb	r1, [r1, #0]
 8008556:	18a2      	adds	r2, r4, r2
 8008558:	3243      	adds	r2, #67	@ 0x43
 800855a:	3302      	adds	r3, #2
 800855c:	7011      	strb	r1, [r2, #0]
 800855e:	e7c1      	b.n	80084e4 <_printf_common+0x4c>
 8008560:	0022      	movs	r2, r4
 8008562:	2301      	movs	r3, #1
 8008564:	9901      	ldr	r1, [sp, #4]
 8008566:	9800      	ldr	r0, [sp, #0]
 8008568:	9f08      	ldr	r7, [sp, #32]
 800856a:	321a      	adds	r2, #26
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	d0e6      	beq.n	8008540 <_printf_common+0xa8>
 8008572:	3601      	adds	r6, #1
 8008574:	e7d1      	b.n	800851a <_printf_common+0x82>
	...

08008578 <_printf_i>:
 8008578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800857a:	b08b      	sub	sp, #44	@ 0x2c
 800857c:	9206      	str	r2, [sp, #24]
 800857e:	000a      	movs	r2, r1
 8008580:	3243      	adds	r2, #67	@ 0x43
 8008582:	9307      	str	r3, [sp, #28]
 8008584:	9005      	str	r0, [sp, #20]
 8008586:	9203      	str	r2, [sp, #12]
 8008588:	7e0a      	ldrb	r2, [r1, #24]
 800858a:	000c      	movs	r4, r1
 800858c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800858e:	2a78      	cmp	r2, #120	@ 0x78
 8008590:	d809      	bhi.n	80085a6 <_printf_i+0x2e>
 8008592:	2a62      	cmp	r2, #98	@ 0x62
 8008594:	d80b      	bhi.n	80085ae <_printf_i+0x36>
 8008596:	2a00      	cmp	r2, #0
 8008598:	d100      	bne.n	800859c <_printf_i+0x24>
 800859a:	e0bc      	b.n	8008716 <_printf_i+0x19e>
 800859c:	497b      	ldr	r1, [pc, #492]	@ (800878c <_printf_i+0x214>)
 800859e:	9104      	str	r1, [sp, #16]
 80085a0:	2a58      	cmp	r2, #88	@ 0x58
 80085a2:	d100      	bne.n	80085a6 <_printf_i+0x2e>
 80085a4:	e090      	b.n	80086c8 <_printf_i+0x150>
 80085a6:	0025      	movs	r5, r4
 80085a8:	3542      	adds	r5, #66	@ 0x42
 80085aa:	702a      	strb	r2, [r5, #0]
 80085ac:	e022      	b.n	80085f4 <_printf_i+0x7c>
 80085ae:	0010      	movs	r0, r2
 80085b0:	3863      	subs	r0, #99	@ 0x63
 80085b2:	2815      	cmp	r0, #21
 80085b4:	d8f7      	bhi.n	80085a6 <_printf_i+0x2e>
 80085b6:	f7f7 fda7 	bl	8000108 <__gnu_thumb1_case_shi>
 80085ba:	0016      	.short	0x0016
 80085bc:	fff6001f 	.word	0xfff6001f
 80085c0:	fff6fff6 	.word	0xfff6fff6
 80085c4:	001ffff6 	.word	0x001ffff6
 80085c8:	fff6fff6 	.word	0xfff6fff6
 80085cc:	fff6fff6 	.word	0xfff6fff6
 80085d0:	003600a1 	.word	0x003600a1
 80085d4:	fff60080 	.word	0xfff60080
 80085d8:	00b2fff6 	.word	0x00b2fff6
 80085dc:	0036fff6 	.word	0x0036fff6
 80085e0:	fff6fff6 	.word	0xfff6fff6
 80085e4:	0084      	.short	0x0084
 80085e6:	0025      	movs	r5, r4
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	3542      	adds	r5, #66	@ 0x42
 80085ec:	1d11      	adds	r1, r2, #4
 80085ee:	6019      	str	r1, [r3, #0]
 80085f0:	6813      	ldr	r3, [r2, #0]
 80085f2:	702b      	strb	r3, [r5, #0]
 80085f4:	2301      	movs	r3, #1
 80085f6:	e0a0      	b.n	800873a <_printf_i+0x1c2>
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	6809      	ldr	r1, [r1, #0]
 80085fc:	1d02      	adds	r2, r0, #4
 80085fe:	060d      	lsls	r5, r1, #24
 8008600:	d50b      	bpl.n	800861a <_printf_i+0xa2>
 8008602:	6806      	ldr	r6, [r0, #0]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	2e00      	cmp	r6, #0
 8008608:	da03      	bge.n	8008612 <_printf_i+0x9a>
 800860a:	232d      	movs	r3, #45	@ 0x2d
 800860c:	9a03      	ldr	r2, [sp, #12]
 800860e:	4276      	negs	r6, r6
 8008610:	7013      	strb	r3, [r2, #0]
 8008612:	4b5e      	ldr	r3, [pc, #376]	@ (800878c <_printf_i+0x214>)
 8008614:	270a      	movs	r7, #10
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	e018      	b.n	800864c <_printf_i+0xd4>
 800861a:	6806      	ldr	r6, [r0, #0]
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	0649      	lsls	r1, r1, #25
 8008620:	d5f1      	bpl.n	8008606 <_printf_i+0x8e>
 8008622:	b236      	sxth	r6, r6
 8008624:	e7ef      	b.n	8008606 <_printf_i+0x8e>
 8008626:	6808      	ldr	r0, [r1, #0]
 8008628:	6819      	ldr	r1, [r3, #0]
 800862a:	c940      	ldmia	r1!, {r6}
 800862c:	0605      	lsls	r5, r0, #24
 800862e:	d402      	bmi.n	8008636 <_printf_i+0xbe>
 8008630:	0640      	lsls	r0, r0, #25
 8008632:	d500      	bpl.n	8008636 <_printf_i+0xbe>
 8008634:	b2b6      	uxth	r6, r6
 8008636:	6019      	str	r1, [r3, #0]
 8008638:	4b54      	ldr	r3, [pc, #336]	@ (800878c <_printf_i+0x214>)
 800863a:	270a      	movs	r7, #10
 800863c:	9304      	str	r3, [sp, #16]
 800863e:	2a6f      	cmp	r2, #111	@ 0x6f
 8008640:	d100      	bne.n	8008644 <_printf_i+0xcc>
 8008642:	3f02      	subs	r7, #2
 8008644:	0023      	movs	r3, r4
 8008646:	2200      	movs	r2, #0
 8008648:	3343      	adds	r3, #67	@ 0x43
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	6863      	ldr	r3, [r4, #4]
 800864e:	60a3      	str	r3, [r4, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	db03      	blt.n	800865c <_printf_i+0xe4>
 8008654:	2104      	movs	r1, #4
 8008656:	6822      	ldr	r2, [r4, #0]
 8008658:	438a      	bics	r2, r1
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	2e00      	cmp	r6, #0
 800865e:	d102      	bne.n	8008666 <_printf_i+0xee>
 8008660:	9d03      	ldr	r5, [sp, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00c      	beq.n	8008680 <_printf_i+0x108>
 8008666:	9d03      	ldr	r5, [sp, #12]
 8008668:	0030      	movs	r0, r6
 800866a:	0039      	movs	r1, r7
 800866c:	f7f7 fddc 	bl	8000228 <__aeabi_uidivmod>
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	3d01      	subs	r5, #1
 8008674:	5c5b      	ldrb	r3, [r3, r1]
 8008676:	702b      	strb	r3, [r5, #0]
 8008678:	0033      	movs	r3, r6
 800867a:	0006      	movs	r6, r0
 800867c:	429f      	cmp	r7, r3
 800867e:	d9f3      	bls.n	8008668 <_printf_i+0xf0>
 8008680:	2f08      	cmp	r7, #8
 8008682:	d109      	bne.n	8008698 <_printf_i+0x120>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	07db      	lsls	r3, r3, #31
 8008688:	d506      	bpl.n	8008698 <_printf_i+0x120>
 800868a:	6862      	ldr	r2, [r4, #4]
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	429a      	cmp	r2, r3
 8008690:	dc02      	bgt.n	8008698 <_printf_i+0x120>
 8008692:	2330      	movs	r3, #48	@ 0x30
 8008694:	3d01      	subs	r5, #1
 8008696:	702b      	strb	r3, [r5, #0]
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	1b5b      	subs	r3, r3, r5
 800869c:	6123      	str	r3, [r4, #16]
 800869e:	9b07      	ldr	r3, [sp, #28]
 80086a0:	0021      	movs	r1, r4
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	9805      	ldr	r0, [sp, #20]
 80086a6:	9b06      	ldr	r3, [sp, #24]
 80086a8:	aa09      	add	r2, sp, #36	@ 0x24
 80086aa:	f7ff fef5 	bl	8008498 <_printf_common>
 80086ae:	3001      	adds	r0, #1
 80086b0:	d148      	bne.n	8008744 <_printf_i+0x1cc>
 80086b2:	2001      	movs	r0, #1
 80086b4:	4240      	negs	r0, r0
 80086b6:	b00b      	add	sp, #44	@ 0x2c
 80086b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ba:	2220      	movs	r2, #32
 80086bc:	6809      	ldr	r1, [r1, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	6022      	str	r2, [r4, #0]
 80086c2:	2278      	movs	r2, #120	@ 0x78
 80086c4:	4932      	ldr	r1, [pc, #200]	@ (8008790 <_printf_i+0x218>)
 80086c6:	9104      	str	r1, [sp, #16]
 80086c8:	0021      	movs	r1, r4
 80086ca:	3145      	adds	r1, #69	@ 0x45
 80086cc:	700a      	strb	r2, [r1, #0]
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	6822      	ldr	r2, [r4, #0]
 80086d2:	c940      	ldmia	r1!, {r6}
 80086d4:	0610      	lsls	r0, r2, #24
 80086d6:	d402      	bmi.n	80086de <_printf_i+0x166>
 80086d8:	0650      	lsls	r0, r2, #25
 80086da:	d500      	bpl.n	80086de <_printf_i+0x166>
 80086dc:	b2b6      	uxth	r6, r6
 80086de:	6019      	str	r1, [r3, #0]
 80086e0:	07d3      	lsls	r3, r2, #31
 80086e2:	d502      	bpl.n	80086ea <_printf_i+0x172>
 80086e4:	2320      	movs	r3, #32
 80086e6:	4313      	orrs	r3, r2
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	d001      	beq.n	80086f2 <_printf_i+0x17a>
 80086ee:	2710      	movs	r7, #16
 80086f0:	e7a8      	b.n	8008644 <_printf_i+0xcc>
 80086f2:	2220      	movs	r2, #32
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	4393      	bics	r3, r2
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	e7f8      	b.n	80086ee <_printf_i+0x176>
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	680d      	ldr	r5, [r1, #0]
 8008700:	1d10      	adds	r0, r2, #4
 8008702:	6949      	ldr	r1, [r1, #20]
 8008704:	6018      	str	r0, [r3, #0]
 8008706:	6813      	ldr	r3, [r2, #0]
 8008708:	062e      	lsls	r6, r5, #24
 800870a:	d501      	bpl.n	8008710 <_printf_i+0x198>
 800870c:	6019      	str	r1, [r3, #0]
 800870e:	e002      	b.n	8008716 <_printf_i+0x19e>
 8008710:	066d      	lsls	r5, r5, #25
 8008712:	d5fb      	bpl.n	800870c <_printf_i+0x194>
 8008714:	8019      	strh	r1, [r3, #0]
 8008716:	2300      	movs	r3, #0
 8008718:	9d03      	ldr	r5, [sp, #12]
 800871a:	6123      	str	r3, [r4, #16]
 800871c:	e7bf      	b.n	800869e <_printf_i+0x126>
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	1d11      	adds	r1, r2, #4
 8008722:	6019      	str	r1, [r3, #0]
 8008724:	6815      	ldr	r5, [r2, #0]
 8008726:	2100      	movs	r1, #0
 8008728:	0028      	movs	r0, r5
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	f000 f996 	bl	8008a5c <memchr>
 8008730:	2800      	cmp	r0, #0
 8008732:	d001      	beq.n	8008738 <_printf_i+0x1c0>
 8008734:	1b40      	subs	r0, r0, r5
 8008736:	6060      	str	r0, [r4, #4]
 8008738:	6863      	ldr	r3, [r4, #4]
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	2300      	movs	r3, #0
 800873e:	9a03      	ldr	r2, [sp, #12]
 8008740:	7013      	strb	r3, [r2, #0]
 8008742:	e7ac      	b.n	800869e <_printf_i+0x126>
 8008744:	002a      	movs	r2, r5
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	9906      	ldr	r1, [sp, #24]
 800874a:	9805      	ldr	r0, [sp, #20]
 800874c:	9d07      	ldr	r5, [sp, #28]
 800874e:	47a8      	blx	r5
 8008750:	3001      	adds	r0, #1
 8008752:	d0ae      	beq.n	80086b2 <_printf_i+0x13a>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	079b      	lsls	r3, r3, #30
 8008758:	d415      	bmi.n	8008786 <_printf_i+0x20e>
 800875a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875c:	68e0      	ldr	r0, [r4, #12]
 800875e:	4298      	cmp	r0, r3
 8008760:	daa9      	bge.n	80086b6 <_printf_i+0x13e>
 8008762:	0018      	movs	r0, r3
 8008764:	e7a7      	b.n	80086b6 <_printf_i+0x13e>
 8008766:	0022      	movs	r2, r4
 8008768:	2301      	movs	r3, #1
 800876a:	9906      	ldr	r1, [sp, #24]
 800876c:	9805      	ldr	r0, [sp, #20]
 800876e:	9e07      	ldr	r6, [sp, #28]
 8008770:	3219      	adds	r2, #25
 8008772:	47b0      	blx	r6
 8008774:	3001      	adds	r0, #1
 8008776:	d09c      	beq.n	80086b2 <_printf_i+0x13a>
 8008778:	3501      	adds	r5, #1
 800877a:	68e3      	ldr	r3, [r4, #12]
 800877c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800877e:	1a9b      	subs	r3, r3, r2
 8008780:	42ab      	cmp	r3, r5
 8008782:	dcf0      	bgt.n	8008766 <_printf_i+0x1ee>
 8008784:	e7e9      	b.n	800875a <_printf_i+0x1e2>
 8008786:	2500      	movs	r5, #0
 8008788:	e7f7      	b.n	800877a <_printf_i+0x202>
 800878a:	46c0      	nop			@ (mov r8, r8)
 800878c:	08008d21 	.word	0x08008d21
 8008790:	08008d32 	.word	0x08008d32

08008794 <__sflush_r>:
 8008794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008796:	220c      	movs	r2, #12
 8008798:	5e8b      	ldrsh	r3, [r1, r2]
 800879a:	0005      	movs	r5, r0
 800879c:	000c      	movs	r4, r1
 800879e:	071a      	lsls	r2, r3, #28
 80087a0:	d456      	bmi.n	8008850 <__sflush_r+0xbc>
 80087a2:	684a      	ldr	r2, [r1, #4]
 80087a4:	2a00      	cmp	r2, #0
 80087a6:	dc02      	bgt.n	80087ae <__sflush_r+0x1a>
 80087a8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	dd4e      	ble.n	800884c <__sflush_r+0xb8>
 80087ae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80087b0:	2f00      	cmp	r7, #0
 80087b2:	d04b      	beq.n	800884c <__sflush_r+0xb8>
 80087b4:	2200      	movs	r2, #0
 80087b6:	2080      	movs	r0, #128	@ 0x80
 80087b8:	682e      	ldr	r6, [r5, #0]
 80087ba:	602a      	str	r2, [r5, #0]
 80087bc:	001a      	movs	r2, r3
 80087be:	0140      	lsls	r0, r0, #5
 80087c0:	6a21      	ldr	r1, [r4, #32]
 80087c2:	4002      	ands	r2, r0
 80087c4:	4203      	tst	r3, r0
 80087c6:	d033      	beq.n	8008830 <__sflush_r+0x9c>
 80087c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	075b      	lsls	r3, r3, #29
 80087ce:	d506      	bpl.n	80087de <__sflush_r+0x4a>
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	1ad2      	subs	r2, r2, r3
 80087d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <__sflush_r+0x4a>
 80087da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087dc:	1ad2      	subs	r2, r2, r3
 80087de:	2300      	movs	r3, #0
 80087e0:	0028      	movs	r0, r5
 80087e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80087e4:	6a21      	ldr	r1, [r4, #32]
 80087e6:	47b8      	blx	r7
 80087e8:	89a2      	ldrh	r2, [r4, #12]
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d106      	bne.n	80087fc <__sflush_r+0x68>
 80087ee:	6829      	ldr	r1, [r5, #0]
 80087f0:	291d      	cmp	r1, #29
 80087f2:	d846      	bhi.n	8008882 <__sflush_r+0xee>
 80087f4:	4b29      	ldr	r3, [pc, #164]	@ (800889c <__sflush_r+0x108>)
 80087f6:	410b      	asrs	r3, r1
 80087f8:	07db      	lsls	r3, r3, #31
 80087fa:	d442      	bmi.n	8008882 <__sflush_r+0xee>
 80087fc:	2300      	movs	r3, #0
 80087fe:	6063      	str	r3, [r4, #4]
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	04d2      	lsls	r2, r2, #19
 8008806:	d505      	bpl.n	8008814 <__sflush_r+0x80>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d102      	bne.n	8008812 <__sflush_r+0x7e>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d100      	bne.n	8008814 <__sflush_r+0x80>
 8008812:	6560      	str	r0, [r4, #84]	@ 0x54
 8008814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008816:	602e      	str	r6, [r5, #0]
 8008818:	2900      	cmp	r1, #0
 800881a:	d017      	beq.n	800884c <__sflush_r+0xb8>
 800881c:	0023      	movs	r3, r4
 800881e:	3344      	adds	r3, #68	@ 0x44
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <__sflush_r+0x96>
 8008824:	0028      	movs	r0, r5
 8008826:	f7ff fbf7 	bl	8008018 <_free_r>
 800882a:	2300      	movs	r3, #0
 800882c:	6363      	str	r3, [r4, #52]	@ 0x34
 800882e:	e00d      	b.n	800884c <__sflush_r+0xb8>
 8008830:	2301      	movs	r3, #1
 8008832:	0028      	movs	r0, r5
 8008834:	47b8      	blx	r7
 8008836:	0002      	movs	r2, r0
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d1c6      	bne.n	80087ca <__sflush_r+0x36>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0c3      	beq.n	80087ca <__sflush_r+0x36>
 8008842:	2b1d      	cmp	r3, #29
 8008844:	d001      	beq.n	800884a <__sflush_r+0xb6>
 8008846:	2b16      	cmp	r3, #22
 8008848:	d11a      	bne.n	8008880 <__sflush_r+0xec>
 800884a:	602e      	str	r6, [r5, #0]
 800884c:	2000      	movs	r0, #0
 800884e:	e01e      	b.n	800888e <__sflush_r+0xfa>
 8008850:	690e      	ldr	r6, [r1, #16]
 8008852:	2e00      	cmp	r6, #0
 8008854:	d0fa      	beq.n	800884c <__sflush_r+0xb8>
 8008856:	680f      	ldr	r7, [r1, #0]
 8008858:	600e      	str	r6, [r1, #0]
 800885a:	1bba      	subs	r2, r7, r6
 800885c:	9201      	str	r2, [sp, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	079b      	lsls	r3, r3, #30
 8008862:	d100      	bne.n	8008866 <__sflush_r+0xd2>
 8008864:	694a      	ldr	r2, [r1, #20]
 8008866:	60a2      	str	r2, [r4, #8]
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	ddee      	ble.n	800884c <__sflush_r+0xb8>
 800886e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008870:	0032      	movs	r2, r6
 8008872:	001f      	movs	r7, r3
 8008874:	0028      	movs	r0, r5
 8008876:	9b01      	ldr	r3, [sp, #4]
 8008878:	6a21      	ldr	r1, [r4, #32]
 800887a:	47b8      	blx	r7
 800887c:	2800      	cmp	r0, #0
 800887e:	dc07      	bgt.n	8008890 <__sflush_r+0xfc>
 8008880:	89a2      	ldrh	r2, [r4, #12]
 8008882:	2340      	movs	r3, #64	@ 0x40
 8008884:	2001      	movs	r0, #1
 8008886:	4313      	orrs	r3, r2
 8008888:	b21b      	sxth	r3, r3
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	4240      	negs	r0, r0
 800888e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008890:	9b01      	ldr	r3, [sp, #4]
 8008892:	1836      	adds	r6, r6, r0
 8008894:	1a1b      	subs	r3, r3, r0
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	e7e6      	b.n	8008868 <__sflush_r+0xd4>
 800889a:	46c0      	nop			@ (mov r8, r8)
 800889c:	dfbffffe 	.word	0xdfbffffe

080088a0 <_fflush_r>:
 80088a0:	690b      	ldr	r3, [r1, #16]
 80088a2:	b570      	push	{r4, r5, r6, lr}
 80088a4:	0005      	movs	r5, r0
 80088a6:	000c      	movs	r4, r1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <_fflush_r+0x12>
 80088ac:	2500      	movs	r5, #0
 80088ae:	0028      	movs	r0, r5
 80088b0:	bd70      	pop	{r4, r5, r6, pc}
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d004      	beq.n	80088c0 <_fflush_r+0x20>
 80088b6:	6a03      	ldr	r3, [r0, #32]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <_fflush_r+0x20>
 80088bc:	f7ff fa98 	bl	8007df0 <__sinit>
 80088c0:	220c      	movs	r2, #12
 80088c2:	5ea3      	ldrsh	r3, [r4, r2]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d0f1      	beq.n	80088ac <_fflush_r+0xc>
 80088c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088ca:	07d2      	lsls	r2, r2, #31
 80088cc:	d404      	bmi.n	80088d8 <_fflush_r+0x38>
 80088ce:	059b      	lsls	r3, r3, #22
 80088d0:	d402      	bmi.n	80088d8 <_fflush_r+0x38>
 80088d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088d4:	f7ff fb9d 	bl	8008012 <__retarget_lock_acquire_recursive>
 80088d8:	0028      	movs	r0, r5
 80088da:	0021      	movs	r1, r4
 80088dc:	f7ff ff5a 	bl	8008794 <__sflush_r>
 80088e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088e2:	0005      	movs	r5, r0
 80088e4:	07db      	lsls	r3, r3, #31
 80088e6:	d4e2      	bmi.n	80088ae <_fflush_r+0xe>
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	059b      	lsls	r3, r3, #22
 80088ec:	d4df      	bmi.n	80088ae <_fflush_r+0xe>
 80088ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088f0:	f7ff fb90 	bl	8008014 <__retarget_lock_release_recursive>
 80088f4:	e7db      	b.n	80088ae <_fflush_r+0xe>

080088f6 <__swbuf_r>:
 80088f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f8:	0006      	movs	r6, r0
 80088fa:	000d      	movs	r5, r1
 80088fc:	0014      	movs	r4, r2
 80088fe:	2800      	cmp	r0, #0
 8008900:	d004      	beq.n	800890c <__swbuf_r+0x16>
 8008902:	6a03      	ldr	r3, [r0, #32]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <__swbuf_r+0x16>
 8008908:	f7ff fa72 	bl	8007df0 <__sinit>
 800890c:	69a3      	ldr	r3, [r4, #24]
 800890e:	60a3      	str	r3, [r4, #8]
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	071b      	lsls	r3, r3, #28
 8008914:	d502      	bpl.n	800891c <__swbuf_r+0x26>
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d109      	bne.n	8008930 <__swbuf_r+0x3a>
 800891c:	0021      	movs	r1, r4
 800891e:	0030      	movs	r0, r6
 8008920:	f000 f82c 	bl	800897c <__swsetup_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	d003      	beq.n	8008930 <__swbuf_r+0x3a>
 8008928:	2501      	movs	r5, #1
 800892a:	426d      	negs	r5, r5
 800892c:	0028      	movs	r0, r5
 800892e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	6820      	ldr	r0, [r4, #0]
 8008934:	b2ef      	uxtb	r7, r5
 8008936:	1ac0      	subs	r0, r0, r3
 8008938:	6963      	ldr	r3, [r4, #20]
 800893a:	b2ed      	uxtb	r5, r5
 800893c:	4283      	cmp	r3, r0
 800893e:	dc05      	bgt.n	800894c <__swbuf_r+0x56>
 8008940:	0021      	movs	r1, r4
 8008942:	0030      	movs	r0, r6
 8008944:	f7ff ffac 	bl	80088a0 <_fflush_r>
 8008948:	2800      	cmp	r0, #0
 800894a:	d1ed      	bne.n	8008928 <__swbuf_r+0x32>
 800894c:	68a3      	ldr	r3, [r4, #8]
 800894e:	3001      	adds	r0, #1
 8008950:	3b01      	subs	r3, #1
 8008952:	60a3      	str	r3, [r4, #8]
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	701f      	strb	r7, [r3, #0]
 800895c:	6963      	ldr	r3, [r4, #20]
 800895e:	4283      	cmp	r3, r0
 8008960:	d004      	beq.n	800896c <__swbuf_r+0x76>
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	07db      	lsls	r3, r3, #31
 8008966:	d5e1      	bpl.n	800892c <__swbuf_r+0x36>
 8008968:	2d0a      	cmp	r5, #10
 800896a:	d1df      	bne.n	800892c <__swbuf_r+0x36>
 800896c:	0021      	movs	r1, r4
 800896e:	0030      	movs	r0, r6
 8008970:	f7ff ff96 	bl	80088a0 <_fflush_r>
 8008974:	2800      	cmp	r0, #0
 8008976:	d0d9      	beq.n	800892c <__swbuf_r+0x36>
 8008978:	e7d6      	b.n	8008928 <__swbuf_r+0x32>
	...

0800897c <__swsetup_r>:
 800897c:	4b2d      	ldr	r3, [pc, #180]	@ (8008a34 <__swsetup_r+0xb8>)
 800897e:	b570      	push	{r4, r5, r6, lr}
 8008980:	0005      	movs	r5, r0
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	000c      	movs	r4, r1
 8008986:	2800      	cmp	r0, #0
 8008988:	d004      	beq.n	8008994 <__swsetup_r+0x18>
 800898a:	6a03      	ldr	r3, [r0, #32]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <__swsetup_r+0x18>
 8008990:	f7ff fa2e 	bl	8007df0 <__sinit>
 8008994:	230c      	movs	r3, #12
 8008996:	5ee2      	ldrsh	r2, [r4, r3]
 8008998:	0713      	lsls	r3, r2, #28
 800899a:	d423      	bmi.n	80089e4 <__swsetup_r+0x68>
 800899c:	06d3      	lsls	r3, r2, #27
 800899e:	d407      	bmi.n	80089b0 <__swsetup_r+0x34>
 80089a0:	2309      	movs	r3, #9
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	2340      	movs	r3, #64	@ 0x40
 80089a6:	2001      	movs	r0, #1
 80089a8:	4313      	orrs	r3, r2
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	4240      	negs	r0, r0
 80089ae:	e03a      	b.n	8008a26 <__swsetup_r+0xaa>
 80089b0:	0752      	lsls	r2, r2, #29
 80089b2:	d513      	bpl.n	80089dc <__swsetup_r+0x60>
 80089b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089b6:	2900      	cmp	r1, #0
 80089b8:	d008      	beq.n	80089cc <__swsetup_r+0x50>
 80089ba:	0023      	movs	r3, r4
 80089bc:	3344      	adds	r3, #68	@ 0x44
 80089be:	4299      	cmp	r1, r3
 80089c0:	d002      	beq.n	80089c8 <__swsetup_r+0x4c>
 80089c2:	0028      	movs	r0, r5
 80089c4:	f7ff fb28 	bl	8008018 <_free_r>
 80089c8:	2300      	movs	r3, #0
 80089ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80089cc:	2224      	movs	r2, #36	@ 0x24
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	4393      	bics	r3, r2
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	2300      	movs	r3, #0
 80089d6:	6063      	str	r3, [r4, #4]
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	6023      	str	r3, [r4, #0]
 80089dc:	2308      	movs	r3, #8
 80089de:	89a2      	ldrh	r2, [r4, #12]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	6923      	ldr	r3, [r4, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10b      	bne.n	8008a02 <__swsetup_r+0x86>
 80089ea:	21a0      	movs	r1, #160	@ 0xa0
 80089ec:	2280      	movs	r2, #128	@ 0x80
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	0089      	lsls	r1, r1, #2
 80089f2:	0092      	lsls	r2, r2, #2
 80089f4:	400b      	ands	r3, r1
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d003      	beq.n	8008a02 <__swsetup_r+0x86>
 80089fa:	0021      	movs	r1, r4
 80089fc:	0028      	movs	r0, r5
 80089fe:	f000 f863 	bl	8008ac8 <__smakebuf_r>
 8008a02:	230c      	movs	r3, #12
 8008a04:	5ee2      	ldrsh	r2, [r4, r3]
 8008a06:	2101      	movs	r1, #1
 8008a08:	0013      	movs	r3, r2
 8008a0a:	400b      	ands	r3, r1
 8008a0c:	420a      	tst	r2, r1
 8008a0e:	d00b      	beq.n	8008a28 <__swsetup_r+0xac>
 8008a10:	2300      	movs	r3, #0
 8008a12:	60a3      	str	r3, [r4, #8]
 8008a14:	6963      	ldr	r3, [r4, #20]
 8008a16:	425b      	negs	r3, r3
 8008a18:	61a3      	str	r3, [r4, #24]
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	6923      	ldr	r3, [r4, #16]
 8008a1e:	4283      	cmp	r3, r0
 8008a20:	d101      	bne.n	8008a26 <__swsetup_r+0xaa>
 8008a22:	0613      	lsls	r3, r2, #24
 8008a24:	d4be      	bmi.n	80089a4 <__swsetup_r+0x28>
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	0791      	lsls	r1, r2, #30
 8008a2a:	d400      	bmi.n	8008a2e <__swsetup_r+0xb2>
 8008a2c:	6963      	ldr	r3, [r4, #20]
 8008a2e:	60a3      	str	r3, [r4, #8]
 8008a30:	e7f3      	b.n	8008a1a <__swsetup_r+0x9e>
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	20000188 	.word	0x20000188

08008a38 <_sbrk_r>:
 8008a38:	2300      	movs	r3, #0
 8008a3a:	b570      	push	{r4, r5, r6, lr}
 8008a3c:	4d06      	ldr	r5, [pc, #24]	@ (8008a58 <_sbrk_r+0x20>)
 8008a3e:	0004      	movs	r4, r0
 8008a40:	0008      	movs	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7f7 fe92 	bl	800076c <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d103      	bne.n	8008a54 <_sbrk_r+0x1c>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d000      	beq.n	8008a54 <_sbrk_r+0x1c>
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	bd70      	pop	{r4, r5, r6, pc}
 8008a56:	46c0      	nop			@ (mov r8, r8)
 8008a58:	20001518 	.word	0x20001518

08008a5c <memchr>:
 8008a5c:	b2c9      	uxtb	r1, r1
 8008a5e:	1882      	adds	r2, r0, r2
 8008a60:	4290      	cmp	r0, r2
 8008a62:	d101      	bne.n	8008a68 <memchr+0xc>
 8008a64:	2000      	movs	r0, #0
 8008a66:	4770      	bx	lr
 8008a68:	7803      	ldrb	r3, [r0, #0]
 8008a6a:	428b      	cmp	r3, r1
 8008a6c:	d0fb      	beq.n	8008a66 <memchr+0xa>
 8008a6e:	3001      	adds	r0, #1
 8008a70:	e7f6      	b.n	8008a60 <memchr+0x4>
	...

08008a74 <__swhatbuf_r>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	000e      	movs	r6, r1
 8008a78:	001d      	movs	r5, r3
 8008a7a:	230e      	movs	r3, #14
 8008a7c:	5ec9      	ldrsh	r1, [r1, r3]
 8008a7e:	0014      	movs	r4, r2
 8008a80:	b096      	sub	sp, #88	@ 0x58
 8008a82:	2900      	cmp	r1, #0
 8008a84:	da0c      	bge.n	8008aa0 <__swhatbuf_r+0x2c>
 8008a86:	89b2      	ldrh	r2, [r6, #12]
 8008a88:	2380      	movs	r3, #128	@ 0x80
 8008a8a:	0011      	movs	r1, r2
 8008a8c:	4019      	ands	r1, r3
 8008a8e:	421a      	tst	r2, r3
 8008a90:	d114      	bne.n	8008abc <__swhatbuf_r+0x48>
 8008a92:	2380      	movs	r3, #128	@ 0x80
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	2000      	movs	r0, #0
 8008a98:	6029      	str	r1, [r5, #0]
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	b016      	add	sp, #88	@ 0x58
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	466a      	mov	r2, sp
 8008aa2:	f000 f853 	bl	8008b4c <_fstat_r>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	dbed      	blt.n	8008a86 <__swhatbuf_r+0x12>
 8008aaa:	23f0      	movs	r3, #240	@ 0xf0
 8008aac:	9901      	ldr	r1, [sp, #4]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	4019      	ands	r1, r3
 8008ab2:	4b04      	ldr	r3, [pc, #16]	@ (8008ac4 <__swhatbuf_r+0x50>)
 8008ab4:	18c9      	adds	r1, r1, r3
 8008ab6:	424b      	negs	r3, r1
 8008ab8:	4159      	adcs	r1, r3
 8008aba:	e7ea      	b.n	8008a92 <__swhatbuf_r+0x1e>
 8008abc:	2100      	movs	r1, #0
 8008abe:	2340      	movs	r3, #64	@ 0x40
 8008ac0:	e7e9      	b.n	8008a96 <__swhatbuf_r+0x22>
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	ffffe000 	.word	0xffffe000

08008ac8 <__smakebuf_r>:
 8008ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aca:	2602      	movs	r6, #2
 8008acc:	898b      	ldrh	r3, [r1, #12]
 8008ace:	0005      	movs	r5, r0
 8008ad0:	000c      	movs	r4, r1
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	4233      	tst	r3, r6
 8008ad6:	d007      	beq.n	8008ae8 <__smakebuf_r+0x20>
 8008ad8:	0023      	movs	r3, r4
 8008ada:	3347      	adds	r3, #71	@ 0x47
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	6163      	str	r3, [r4, #20]
 8008ae4:	b005      	add	sp, #20
 8008ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	aa02      	add	r2, sp, #8
 8008aec:	f7ff ffc2 	bl	8008a74 <__swhatbuf_r>
 8008af0:	9f02      	ldr	r7, [sp, #8]
 8008af2:	9001      	str	r0, [sp, #4]
 8008af4:	0039      	movs	r1, r7
 8008af6:	0028      	movs	r0, r5
 8008af8:	f7ff fafa 	bl	80080f0 <_malloc_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d108      	bne.n	8008b12 <__smakebuf_r+0x4a>
 8008b00:	220c      	movs	r2, #12
 8008b02:	5ea3      	ldrsh	r3, [r4, r2]
 8008b04:	059a      	lsls	r2, r3, #22
 8008b06:	d4ed      	bmi.n	8008ae4 <__smakebuf_r+0x1c>
 8008b08:	2203      	movs	r2, #3
 8008b0a:	4393      	bics	r3, r2
 8008b0c:	431e      	orrs	r6, r3
 8008b0e:	81a6      	strh	r6, [r4, #12]
 8008b10:	e7e2      	b.n	8008ad8 <__smakebuf_r+0x10>
 8008b12:	2380      	movs	r3, #128	@ 0x80
 8008b14:	89a2      	ldrh	r2, [r4, #12]
 8008b16:	6020      	str	r0, [r4, #0]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	6120      	str	r0, [r4, #16]
 8008b20:	6167      	str	r7, [r4, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00c      	beq.n	8008b40 <__smakebuf_r+0x78>
 8008b26:	0028      	movs	r0, r5
 8008b28:	230e      	movs	r3, #14
 8008b2a:	5ee1      	ldrsh	r1, [r4, r3]
 8008b2c:	f000 f820 	bl	8008b70 <_isatty_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d005      	beq.n	8008b40 <__smakebuf_r+0x78>
 8008b34:	2303      	movs	r3, #3
 8008b36:	89a2      	ldrh	r2, [r4, #12]
 8008b38:	439a      	bics	r2, r3
 8008b3a:	3b02      	subs	r3, #2
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	9a01      	ldr	r2, [sp, #4]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	e7cc      	b.n	8008ae4 <__smakebuf_r+0x1c>
	...

08008b4c <_fstat_r>:
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	b570      	push	{r4, r5, r6, lr}
 8008b50:	4d06      	ldr	r5, [pc, #24]	@ (8008b6c <_fstat_r+0x20>)
 8008b52:	0004      	movs	r4, r0
 8008b54:	0008      	movs	r0, r1
 8008b56:	0011      	movs	r1, r2
 8008b58:	602b      	str	r3, [r5, #0]
 8008b5a:	f7f7 fde4 	bl	8000726 <_fstat>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	d103      	bne.n	8008b6a <_fstat_r+0x1e>
 8008b62:	682b      	ldr	r3, [r5, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d000      	beq.n	8008b6a <_fstat_r+0x1e>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	20001518 	.word	0x20001518

08008b70 <_isatty_r>:
 8008b70:	2300      	movs	r3, #0
 8008b72:	b570      	push	{r4, r5, r6, lr}
 8008b74:	4d06      	ldr	r5, [pc, #24]	@ (8008b90 <_isatty_r+0x20>)
 8008b76:	0004      	movs	r4, r0
 8008b78:	0008      	movs	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f7 fde1 	bl	8000742 <_isatty>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d103      	bne.n	8008b8c <_isatty_r+0x1c>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d000      	beq.n	8008b8c <_isatty_r+0x1c>
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	46c0      	nop			@ (mov r8, r8)
 8008b90:	20001518 	.word	0x20001518

08008b94 <_init>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	46c0      	nop			@ (mov r8, r8)
 8008b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	469e      	mov	lr, r3
 8008b9e:	4770      	bx	lr

08008ba0 <_fini>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr

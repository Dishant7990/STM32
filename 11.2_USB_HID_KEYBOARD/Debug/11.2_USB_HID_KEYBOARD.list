
11.2_USB_HID_KEYBOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08008194  08008194  00009194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a8  080082a8  0000a1a8  2**0
                  CONTENTS
  4 .ARM          00000008  080082a8  080082a8  000092a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b0  080082b0  0000a1a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b0  080082b0  000092b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082b4  080082b4  000092b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a8  20000000  080082b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  200001a8  08008460  0000a1a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  08008460  0000ab50  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b20d  00000000  00000000  0000a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002778  00000000  00000000  000153dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00017b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000754  00000000  00000000  00018560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015609  00000000  00000000  00018cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e21e  00000000  00000000  0002e2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077469  00000000  00000000  0003c4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d0  00000000  00000000  000b3988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000b6058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001a8 	.word	0x200001a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800817c 	.word	0x0800817c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ac 	.word	0x200001ac
 8000104:	0800817c 	.word	0x0800817c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	@ (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <KeyBoardPrint>:
//
//		}
//		HAL_Delay(25);
//	}
//}
void KeyBoardPrint(char *data, uint16_t length) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	000a      	movs	r2, r1
 80004d6:	1cbb      	adds	r3, r7, #2
 80004d8:	801a      	strh	r2, [r3, #0]
    for (uint16_t count = 0; count < length; count++) {
 80004da:	230e      	movs	r3, #14
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	2200      	movs	r2, #0
 80004e0:	801a      	strh	r2, [r3, #0]
 80004e2:	e06d      	b.n	80005c0 <KeyBoardPrint+0xf4>
        if (data[count] >= 0x41 && data[count] <= 0x5A) { // Uppercase A-Z
 80004e4:	210e      	movs	r1, #14
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	18d3      	adds	r3, r2, r3
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b40      	cmp	r3, #64	@ 0x40
 80004f2:	d913      	bls.n	800051c <KeyBoardPrint+0x50>
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	18d3      	adds	r3, r2, r3
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000500:	d80c      	bhi.n	800051c <KeyBoardPrint+0x50>
            HIDkeyBoard.MODIFIER = 0x06;  // Left Shift
 8000502:	4b36      	ldr	r3, [pc, #216]	@ (80005dc <KeyBoardPrint+0x110>)
 8000504:	2206      	movs	r2, #6
 8000506:	701a      	strb	r2, [r3, #0]
            HIDkeyBoard.KEYCODE1 = data[count] - 0x3D;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	18d3      	adds	r3, r2, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	3b3d      	subs	r3, #61	@ 0x3d
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b31      	ldr	r3, [pc, #196]	@ (80005dc <KeyBoardPrint+0x110>)
 8000518:	709a      	strb	r2, [r3, #2]
 800051a:	e033      	b.n	8000584 <KeyBoardPrint+0xb8>
        } else if (data[count] >= 0x61 && data[count] <= 0x7A) { // Lowercase a-z
 800051c:	210e      	movs	r1, #14
 800051e:	187b      	adds	r3, r7, r1
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	18d3      	adds	r3, r2, r3
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b60      	cmp	r3, #96	@ 0x60
 800052a:	d910      	bls.n	800054e <KeyBoardPrint+0x82>
 800052c:	187b      	adds	r3, r7, r1
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	18d3      	adds	r3, r2, r3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b7a      	cmp	r3, #122	@ 0x7a
 8000538:	d809      	bhi.n	800054e <KeyBoardPrint+0x82>
            HIDkeyBoard.KEYCODE1 = data[count] - 0x5D;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	18d3      	adds	r3, r2, r3
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3b5d      	subs	r3, #93	@ 0x5d
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <KeyBoardPrint+0x110>)
 800054a:	709a      	strb	r2, [r3, #2]
 800054c:	e01a      	b.n	8000584 <KeyBoardPrint+0xb8>
        } else if (data[count] == 0x20) { // Space
 800054e:	230e      	movs	r3, #14
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	18d3      	adds	r3, r2, r3
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b20      	cmp	r3, #32
 800055c:	d103      	bne.n	8000566 <KeyBoardPrint+0x9a>
            HIDkeyBoard.KEYCODE1 = 0x2C;
 800055e:	4b1f      	ldr	r3, [pc, #124]	@ (80005dc <KeyBoardPrint+0x110>)
 8000560:	222c      	movs	r2, #44	@ 0x2c
 8000562:	709a      	strb	r2, [r3, #2]
 8000564:	e00e      	b.n	8000584 <KeyBoardPrint+0xb8>
        } else if (data[count] == 0x0A) { // New line
 8000566:	230e      	movs	r3, #14
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	18d3      	adds	r3, r2, r3
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b0a      	cmp	r3, #10
 8000574:	d103      	bne.n	800057e <KeyBoardPrint+0xb2>
            HIDkeyBoard.KEYCODE1 = 0x28;
 8000576:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <KeyBoardPrint+0x110>)
 8000578:	2228      	movs	r2, #40	@ 0x28
 800057a:	709a      	strb	r2, [r3, #2]
 800057c:	e002      	b.n	8000584 <KeyBoardPrint+0xb8>
        } else {
            HIDkeyBoard.KEYCODE1 = 0x00;
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <KeyBoardPrint+0x110>)
 8000580:	2200      	movs	r2, #0
 8000582:	709a      	strb	r2, [r3, #2]
        }

        USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000584:	4915      	ldr	r1, [pc, #84]	@ (80005dc <KeyBoardPrint+0x110>)
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <KeyBoardPrint+0x114>)
 8000588:	2208      	movs	r2, #8
 800058a:	0018      	movs	r0, r3
 800058c:	f005 fa8e 	bl	8005aac <USBD_HID_SendReport>
        HAL_Delay(15);
 8000590:	200f      	movs	r0, #15
 8000592:	f000 f9ed 	bl	8000970 <HAL_Delay>

        HIDkeyBoard.MODIFIER = 0x00;
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <KeyBoardPrint+0x110>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
        HIDkeyBoard.KEYCODE1 = 0x00;
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <KeyBoardPrint+0x110>)
 800059e:	2200      	movs	r2, #0
 80005a0:	709a      	strb	r2, [r3, #2]
        USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 80005a2:	490e      	ldr	r1, [pc, #56]	@ (80005dc <KeyBoardPrint+0x110>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <KeyBoardPrint+0x114>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	0018      	movs	r0, r3
 80005aa:	f005 fa7f 	bl	8005aac <USBD_HID_SendReport>
        HAL_Delay(25);
 80005ae:	2019      	movs	r0, #25
 80005b0:	f000 f9de 	bl	8000970 <HAL_Delay>
    for (uint16_t count = 0; count < length; count++) {
 80005b4:	210e      	movs	r1, #14
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	881a      	ldrh	r2, [r3, #0]
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	3201      	adds	r2, #1
 80005be:	801a      	strh	r2, [r3, #0]
 80005c0:	230e      	movs	r3, #14
 80005c2:	18fa      	adds	r2, r7, r3
 80005c4:	1cbb      	adds	r3, r7, #2
 80005c6:	8812      	ldrh	r2, [r2, #0]
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d200      	bcs.n	80005d0 <KeyBoardPrint+0x104>
 80005ce:	e789      	b.n	80004e4 <KeyBoardPrint+0x18>
    }
}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b004      	add	sp, #16
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	200001c4 	.word	0x200001c4
 80005e0:	2000023c 	.word	0x2000023c

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 f952 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f81e 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f892 	bl	8000718 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005f4:	f006 fcb2 	bl	8006f5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  sprintf(msg_buff, "hello, i am dishantpari\r\n ");
 80005f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <main+0x40>)
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <main+0x44>)
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f007 f91e 	bl	8007840 <siprintf>
	USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));

	HAL_Delay(1000);
	*/

	KeyBoardPrint(msg_buff, strlen(msg_buff));
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <main+0x44>)
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff fd7e 	bl	8000108 <strlen>
 800060c:	0003      	movs	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <main+0x44>)
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff ff59 	bl	80004cc <KeyBoardPrint>
	HAL_Delay(100);
 800061a:	2064      	movs	r0, #100	@ 0x64
 800061c:	f000 f9a8 	bl	8000970 <HAL_Delay>
	KeyBoardPrint(msg_buff, strlen(msg_buff));
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	e7ef      	b.n	8000604 <main+0x20>
 8000624:	08008194 	.word	0x08008194
 8000628:	200001cc 	.word	0x200001cc

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b09d      	sub	sp, #116	@ 0x74
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	2438      	movs	r4, #56	@ 0x38
 8000634:	193b      	adds	r3, r7, r4
 8000636:	0018      	movs	r0, r3
 8000638:	2338      	movs	r3, #56	@ 0x38
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f007 f91f 	bl	8007880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000642:	2324      	movs	r3, #36	@ 0x24
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0018      	movs	r0, r3
 8000648:	2314      	movs	r3, #20
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f007 f917 	bl	8007880 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000652:	003b      	movs	r3, r7
 8000654:	0018      	movs	r0, r3
 8000656:	2324      	movs	r3, #36	@ 0x24
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f007 f910 	bl	8007880 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	4b2b      	ldr	r3, [pc, #172]	@ (8000710 <SystemClock_Config+0xe4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2b      	ldr	r2, [pc, #172]	@ (8000714 <SystemClock_Config+0xe8>)
 8000666:	401a      	ands	r2, r3
 8000668:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <SystemClock_Config+0xe4>)
 800066a:	2180      	movs	r1, #128	@ 0x80
 800066c:	0109      	lsls	r1, r1, #4
 800066e:	430a      	orrs	r2, r1
 8000670:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000672:	0021      	movs	r1, r4
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2222      	movs	r2, #34	@ 0x22
 8000678:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2210      	movs	r2, #16
 8000684:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2201      	movs	r2, #1
 800068a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2202      	movs	r2, #2
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2280      	movs	r2, #128	@ 0x80
 800069c:	02d2      	lsls	r2, r2, #11
 800069e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	03d2      	lsls	r2, r2, #15
 80006a6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f002 f89a 	bl	80027e4 <HAL_RCC_OscConfig>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006b4:	f000 f846 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	2124      	movs	r1, #36	@ 0x24
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	220f      	movs	r2, #15
 80006be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2203      	movs	r2, #3
 80006c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2101      	movs	r1, #1
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 fc45 	bl	8002f6c <HAL_RCC_ClockConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006e6:	f000 f82d 	bl	8000744 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2240      	movs	r2, #64	@ 0x40
 80006ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	04d2      	lsls	r2, r2, #19
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	003b      	movs	r3, r7
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 fe24 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000704:	f000 f81e 	bl	8000744 <Error_Handler>
  }
}
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b01d      	add	sp, #116	@ 0x74
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	40007000 	.word	0x40007000
 8000714:	ffffe7ff 	.word	0xffffe7ff

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <MX_GPIO_Init+0x28>)
 8000720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_GPIO_Init+0x28>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <MX_GPIO_Init+0x28>)
 800072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40021000 	.word	0x40021000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <HAL_MspInit+0x24>)
 8000756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <HAL_MspInit+0x24>)
 800075a:	2101      	movs	r1, #1
 800075c:	430a      	orrs	r2, r1
 800075e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <HAL_MspInit+0x24>)
 8000762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <HAL_MspInit+0x24>)
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	0549      	lsls	r1, r1, #21
 800076a:	430a      	orrs	r2, r1
 800076c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	e7fd      	b.n	800077c <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	e7fd      	b.n	8000784 <HardFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f8ca 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <USB_IRQHandler+0x14>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fb04 	bl	8000dc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	20000700 	.word	0x20000700

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	18d3      	adds	r3, r2, r3
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f007 f84c 	bl	8007890 <__errno>
 80007f8:	0003      	movs	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	2301      	movs	r3, #1
 8000800:	425b      	negs	r3, r3
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	18d2      	adds	r2, r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <_sbrk+0x64>)
 8000814:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b006      	add	sp, #24
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20002000 	.word	0x20002000
 8000824:	00000400 	.word	0x00000400
 8000828:	20000230 	.word	0x20000230
 800082c:	20000b50 	.word	0x20000b50

08000830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000840:	f7ff fff6 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	@ (800087c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	@ (8000888 <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f007 f817 	bl	800789c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f7ff feb9 	bl	80005e4 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   r0, =_estack
 8000874:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8000880:	080082b8 	.word	0x080082b8
  ldr r2, =_sbss
 8000884:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000888:	20000b50 	.word	0x20000b50

0800088c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_COMP_IRQHandler>
	...

08000890 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <HAL_Init+0x3c>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <HAL_Init+0x3c>)
 80008a2:	2140      	movs	r1, #64	@ 0x40
 80008a4:	430a      	orrs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 f811 	bl	80008d0 <HAL_InitTick>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d003      	beq.n	80008ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	e001      	b.n	80008be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ba:	f7ff ff49 	bl	8000750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40022000 	.word	0x40022000

080008d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <HAL_InitTick+0x5c>)
 80008da:	681c      	ldr	r4, [r3, #0]
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <HAL_InitTick+0x60>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	0019      	movs	r1, r3
 80008e2:	23fa      	movs	r3, #250	@ 0xfa
 80008e4:	0098      	lsls	r0, r3, #2
 80008e6:	f7ff fc21 	bl	800012c <__udivsi3>
 80008ea:	0003      	movs	r3, r0
 80008ec:	0019      	movs	r1, r3
 80008ee:	0020      	movs	r0, r4
 80008f0:	f7ff fc1c 	bl	800012c <__udivsi3>
 80008f4:	0003      	movs	r3, r0
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 f92f 	bl	8000b5a <HAL_SYSTICK_Config>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	e00f      	b.n	8000924 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b03      	cmp	r3, #3
 8000908:	d80b      	bhi.n	8000922 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	2301      	movs	r3, #1
 800090e:	425b      	negs	r3, r3
 8000910:	2200      	movs	r2, #0
 8000912:	0018      	movs	r0, r3
 8000914:	f000 f8fc 	bl	8000b10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_InitTick+0x64>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	b003      	add	sp, #12
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	20000000 	.word	0x20000000
 8000930:	20000008 	.word	0x20000008
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_IncTick+0x1c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	001a      	movs	r2, r3
 8000942:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_IncTick+0x20>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	18d2      	adds	r2, r2, r3
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <HAL_IncTick+0x20>)
 800094a:	601a      	str	r2, [r3, #0]
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	20000008 	.word	0x20000008
 8000958:	20000234 	.word	0x20000234

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	@ (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	20000234 	.word	0x20000234

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff fff0 	bl	800095c <HAL_GetTick>
 800097c:	0003      	movs	r3, r0
 800097e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	001a      	movs	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	189b      	adds	r3, r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	f7ff ffe0 	bl	800095c <HAL_GetTick>
 800099c:	0002      	movs	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b004      	add	sp, #16
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	20000008 	.word	0x20000008

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ca:	d809      	bhi.n	80009e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	001a      	movs	r2, r3
 80009d2:	231f      	movs	r3, #31
 80009d4:	401a      	ands	r2, r3
 80009d6:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <__NVIC_EnableIRQ+0x30>)
 80009d8:	2101      	movs	r1, #1
 80009da:	4091      	lsls	r1, r2
 80009dc:	000a      	movs	r2, r1
 80009de:	601a      	str	r2, [r3, #0]
  }
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	e000e100 	.word	0xe000e100

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	0002      	movs	r2, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a00:	d828      	bhi.n	8000a54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a02:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac0 <__NVIC_SetPriority+0xd4>)
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	33c0      	adds	r3, #192	@ 0xc0
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	589b      	ldr	r3, [r3, r2]
 8000a12:	1dfa      	adds	r2, r7, #7
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	0011      	movs	r1, r2
 8000a18:	2203      	movs	r2, #3
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	00d2      	lsls	r2, r2, #3
 8000a1e:	21ff      	movs	r1, #255	@ 0xff
 8000a20:	4091      	lsls	r1, r2
 8000a22:	000a      	movs	r2, r1
 8000a24:	43d2      	mvns	r2, r2
 8000a26:	401a      	ands	r2, r3
 8000a28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	019b      	lsls	r3, r3, #6
 8000a2e:	22ff      	movs	r2, #255	@ 0xff
 8000a30:	401a      	ands	r2, r3
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	0018      	movs	r0, r3
 8000a38:	2303      	movs	r3, #3
 8000a3a:	4003      	ands	r3, r0
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a40:	481f      	ldr	r0, [pc, #124]	@ (8000ac0 <__NVIC_SetPriority+0xd4>)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	33c0      	adds	r3, #192	@ 0xc0
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a52:	e031      	b.n	8000ab8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac4 <__NVIC_SetPriority+0xd8>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	400b      	ands	r3, r1
 8000a60:	3b08      	subs	r3, #8
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3306      	adds	r3, #6
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	18d3      	adds	r3, r2, r3
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1dfa      	adds	r2, r7, #7
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	0011      	movs	r1, r2
 8000a74:	2203      	movs	r2, #3
 8000a76:	400a      	ands	r2, r1
 8000a78:	00d2      	lsls	r2, r2, #3
 8000a7a:	21ff      	movs	r1, #255	@ 0xff
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	000a      	movs	r2, r1
 8000a80:	43d2      	mvns	r2, r2
 8000a82:	401a      	ands	r2, r3
 8000a84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	019b      	lsls	r3, r3, #6
 8000a8a:	22ff      	movs	r2, #255	@ 0xff
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	0018      	movs	r0, r3
 8000a94:	2303      	movs	r3, #3
 8000a96:	4003      	ands	r3, r0
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9c:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <__NVIC_SetPriority+0xd8>)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	001c      	movs	r4, r3
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	4023      	ands	r3, r4
 8000aa8:	3b08      	subs	r3, #8
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	430a      	orrs	r2, r1
 8000aae:	3306      	adds	r3, #6
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	18c3      	adds	r3, r0, r3
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	601a      	str	r2, [r3, #0]
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b003      	add	sp, #12
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	045b      	lsls	r3, r3, #17
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d301      	bcc.n	8000ae0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000adc:	2301      	movs	r3, #1
 8000ade:	e010      	b.n	8000b02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <SysTick_Config+0x44>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	3a01      	subs	r2, #1
 8000ae6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425b      	negs	r3, r3
 8000aec:	2103      	movs	r1, #3
 8000aee:	0018      	movs	r0, r3
 8000af0:	f7ff ff7c 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <SysTick_Config+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <SysTick_Config+0x44>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	1c02      	adds	r2, r0, #0
 8000b20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff ff5d 	bl	80009ec <__NVIC_SetPriority>
}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	0002      	movs	r2, r0
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff ff33 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff ffaf 	bl	8000ac8 <SysTick_Config>
 8000b6a:	0003      	movs	r3, r0
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	b08b      	sub	sp, #44	@ 0x2c
 8000b78:	af06      	add	r7, sp, #24
 8000b7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e0f0      	b.n	8000d68 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a79      	ldr	r2, [pc, #484]	@ (8000d70 <HAL_PCD_Init+0x1fc>)
 8000b8a:	5c9b      	ldrb	r3, [r3, r2]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d108      	bne.n	8000ba4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	23aa      	movs	r3, #170	@ 0xaa
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	2100      	movs	r1, #0
 8000b9a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f006 fb22 	bl	80071e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a72      	ldr	r2, [pc, #456]	@ (8000d70 <HAL_PCD_Init+0x1fc>)
 8000ba8:	2103      	movs	r1, #3
 8000baa:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f002 fd6d 	bl	8003690 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e049      	b.n	8000c54 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bc0:	200f      	movs	r0, #15
 8000bc2:	183b      	adds	r3, r7, r0
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	0013      	movs	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	189b      	adds	r3, r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	18cb      	adds	r3, r1, r3
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bda:	183b      	adds	r3, r7, r0
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	0013      	movs	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	189b      	adds	r3, r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	183a      	adds	r2, r7, r0
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bf0:	183b      	adds	r3, r7, r0
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	189b      	adds	r3, r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	18cb      	adds	r3, r1, r3
 8000c02:	3303      	adds	r3, #3
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c08:	183b      	adds	r3, r7, r0
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	0013      	movs	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	189b      	adds	r3, r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	18cb      	adds	r3, r1, r3
 8000c18:	3338      	adds	r3, #56	@ 0x38
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c1e:	183b      	adds	r3, r7, r0
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	0013      	movs	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	189b      	adds	r3, r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	18cb      	adds	r3, r1, r3
 8000c2e:	333c      	adds	r3, #60	@ 0x3c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c34:	183b      	adds	r3, r7, r0
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	189b      	adds	r3, r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	18cb      	adds	r3, r1, r3
 8000c44:	3340      	adds	r3, #64	@ 0x40
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c4a:	183b      	adds	r3, r7, r0
 8000c4c:	781a      	ldrb	r2, [r3, #0]
 8000c4e:	183b      	adds	r3, r7, r0
 8000c50:	3201      	adds	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	210f      	movs	r1, #15
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d3ae      	bcc.n	8000bc0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e056      	b.n	8000d18 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c6a:	240f      	movs	r4, #15
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	236a      	movs	r3, #106	@ 0x6a
 8000c74:	33ff      	adds	r3, #255	@ 0xff
 8000c76:	0019      	movs	r1, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	18c3      	adds	r3, r0, r3
 8000c82:	185b      	adds	r3, r3, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	23b4      	movs	r3, #180	@ 0xb4
 8000c90:	0059      	lsls	r1, r3, #1
 8000c92:	0013      	movs	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	189b      	adds	r3, r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	18c3      	adds	r3, r0, r3
 8000c9c:	185b      	adds	r3, r3, r1
 8000c9e:	193a      	adds	r2, r7, r4
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	236c      	movs	r3, #108	@ 0x6c
 8000cac:	33ff      	adds	r3, #255	@ 0xff
 8000cae:	0019      	movs	r1, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	189b      	adds	r3, r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	18c3      	adds	r3, r0, r3
 8000cba:	185b      	adds	r3, r3, r1
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	23bc      	movs	r3, #188	@ 0xbc
 8000cc8:	0059      	lsls	r1, r3, #1
 8000cca:	0013      	movs	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	189b      	adds	r3, r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	18c3      	adds	r3, r0, r3
 8000cd4:	185b      	adds	r3, r3, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	23be      	movs	r3, #190	@ 0xbe
 8000ce2:	0059      	lsls	r1, r3, #1
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	189b      	adds	r3, r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	18c3      	adds	r3, r0, r3
 8000cee:	185b      	adds	r3, r3, r1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	23c0      	movs	r3, #192	@ 0xc0
 8000cfc:	0059      	lsls	r1, r3, #1
 8000cfe:	0013      	movs	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	189b      	adds	r3, r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	18c3      	adds	r3, r0, r3
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	3201      	adds	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	230f      	movs	r3, #15
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3a1      	bcc.n	8000c6a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	466a      	mov	r2, sp
 8000d2e:	0011      	movs	r1, r2
 8000d30:	001a      	movs	r2, r3
 8000d32:	3210      	adds	r2, #16
 8000d34:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000d36:	c170      	stmia	r1!, {r4, r5, r6}
 8000d38:	ca30      	ldmia	r2!, {r4, r5}
 8000d3a:	c130      	stmia	r1!, {r4, r5}
 8000d3c:	6859      	ldr	r1, [r3, #4]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f002 fcbf 	bl	80036c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2224      	movs	r2, #36	@ 0x24
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_PCD_Init+0x1fc>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d103      	bne.n	8000d66 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 fd09 	bl	8002778 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b005      	add	sp, #20
 8000d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d70:	000002a9 	.word	0x000002a9

08000d74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	23aa      	movs	r3, #170	@ 0xaa
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_PCD_Start+0x18>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e014      	b.n	8000db6 <HAL_PCD_Start+0x42>
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	23aa      	movs	r3, #170	@ 0xaa
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	2101      	movs	r1, #1
 8000d94:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f002 fc62 	bl	8003664 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	0018      	movs	r0, r3
 8000da6:	f004 fc65 	bl	8005674 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	23aa      	movs	r3, #170	@ 0xaa
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	2100      	movs	r1, #0
 8000db2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f004 fc67 	bl	80056a0 <USB_ReadInterrupts>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d004      	beq.n	8000dea <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 fb48 	bl	8001478 <PCD_EP_ISR_Handler>

    return;
 8000de8:	e11d      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	2380      	movs	r3, #128	@ 0x80
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4013      	ands	r3, r2
 8000df2:	d015      	beq.n	8000e20 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2244      	movs	r2, #68	@ 0x44
 8000dfa:	5a9b      	ldrh	r3, [r3, r2]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	498a      	ldr	r1, [pc, #552]	@ (800102c <HAL_PCD_IRQHandler+0x26c>)
 8000e04:	400a      	ands	r2, r1
 8000e06:	b291      	uxth	r1, r2
 8000e08:	2244      	movs	r2, #68	@ 0x44
 8000e0a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f006 fa6d 	bl	80072ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2100      	movs	r1, #0
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 f915 	bl	8001048 <HAL_PCD_SetAddress>

    return;
 8000e1e:	e102      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	01db      	lsls	r3, r3, #7
 8000e26:	4013      	ands	r3, r2
 8000e28:	d00c      	beq.n	8000e44 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2244      	movs	r2, #68	@ 0x44
 8000e30:	5a9b      	ldrh	r3, [r3, r2]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	497d      	ldr	r1, [pc, #500]	@ (8001030 <HAL_PCD_IRQHandler+0x270>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	b291      	uxth	r1, r2
 8000e3e:	2244      	movs	r2, #68	@ 0x44
 8000e40:	5299      	strh	r1, [r3, r2]

    return;
 8000e42:	e0f0      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d00c      	beq.n	8000e68 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2244      	movs	r2, #68	@ 0x44
 8000e54:	5a9b      	ldrh	r3, [r3, r2]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4975      	ldr	r1, [pc, #468]	@ (8001034 <HAL_PCD_IRQHandler+0x274>)
 8000e5e:	400a      	ands	r2, r1
 8000e60:	b291      	uxth	r1, r2
 8000e62:	2244      	movs	r2, #68	@ 0x44
 8000e64:	5299      	strh	r1, [r3, r2]

    return;
 8000e66:	e0de      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	015b      	lsls	r3, r3, #5
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d038      	beq.n	8000ee4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2240      	movs	r2, #64	@ 0x40
 8000e78:	5a9b      	ldrh	r3, [r3, r2]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2104      	movs	r1, #4
 8000e82:	438a      	bics	r2, r1
 8000e84:	b291      	uxth	r1, r2
 8000e86:	2240      	movs	r2, #64	@ 0x40
 8000e88:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2240      	movs	r2, #64	@ 0x40
 8000e90:	5a9b      	ldrh	r3, [r3, r2]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2108      	movs	r1, #8
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	b291      	uxth	r1, r2
 8000e9e:	2240      	movs	r2, #64	@ 0x40
 8000ea0:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	23b8      	movs	r3, #184	@ 0xb8
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d109      	bne.n	8000ec2 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	23b8      	movs	r3, #184	@ 0xb8
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 fc85 	bl	80027cc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f006 fa53 	bl	8007370 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2244      	movs	r2, #68	@ 0x44
 8000ed0:	5a9b      	ldrh	r3, [r3, r2]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4957      	ldr	r1, [pc, #348]	@ (8001038 <HAL_PCD_IRQHandler+0x278>)
 8000eda:	400a      	ands	r2, r1
 8000edc:	b291      	uxth	r1, r2
 8000ede:	2244      	movs	r2, #68	@ 0x44
 8000ee0:	5299      	strh	r1, [r3, r2]

    return;
 8000ee2:	e0a0      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	4013      	ands	r3, r2
 8000eec:	d028      	beq.n	8000f40 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2240      	movs	r2, #64	@ 0x40
 8000ef4:	5a9b      	ldrh	r3, [r3, r2]
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2108      	movs	r1, #8
 8000efe:	430a      	orrs	r2, r1
 8000f00:	b291      	uxth	r1, r2
 8000f02:	2240      	movs	r2, #64	@ 0x40
 8000f04:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2244      	movs	r2, #68	@ 0x44
 8000f0c:	5a9b      	ldrh	r3, [r3, r2]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4949      	ldr	r1, [pc, #292]	@ (800103c <HAL_PCD_IRQHandler+0x27c>)
 8000f16:	400a      	ands	r2, r1
 8000f18:	b291      	uxth	r1, r2
 8000f1a:	2244      	movs	r2, #68	@ 0x44
 8000f1c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2240      	movs	r2, #64	@ 0x40
 8000f24:	5a9b      	ldrh	r3, [r3, r2]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	b291      	uxth	r1, r2
 8000f32:	2240      	movs	r2, #64	@ 0x40
 8000f34:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f006 f9fd 	bl	8007338 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f3e:	e072      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	4013      	ands	r3, r2
 8000f46:	d046      	beq.n	8000fd6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2244      	movs	r2, #68	@ 0x44
 8000f4e:	5a9b      	ldrh	r3, [r3, r2]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2180      	movs	r1, #128	@ 0x80
 8000f58:	438a      	bics	r2, r1
 8000f5a:	b291      	uxth	r1, r2
 8000f5c:	2244      	movs	r2, #68	@ 0x44
 8000f5e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	23b8      	movs	r3, #184	@ 0xb8
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d12f      	bne.n	8000fcc <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2240      	movs	r2, #64	@ 0x40
 8000f72:	5a9b      	ldrh	r3, [r3, r2]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	b291      	uxth	r1, r2
 8000f80:	2240      	movs	r2, #64	@ 0x40
 8000f82:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2240      	movs	r2, #64	@ 0x40
 8000f8a:	5a9b      	ldrh	r3, [r3, r2]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2108      	movs	r1, #8
 8000f94:	430a      	orrs	r2, r1
 8000f96:	b291      	uxth	r1, r2
 8000f98:	2240      	movs	r2, #64	@ 0x40
 8000f9a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	23b8      	movs	r3, #184	@ 0xb8
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2254      	movs	r2, #84	@ 0x54
 8000fac:	5a9b      	ldrh	r3, [r3, r2]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	223c      	movs	r2, #60	@ 0x3c
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	23b9      	movs	r3, #185	@ 0xb9
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 fc01 	bl	80027cc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000fca:	e02c      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f006 f9b2 	bl	8007338 <HAL_PCD_SuspendCallback>
    return;
 8000fd4:	e027      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d010      	beq.n	8001002 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2244      	movs	r2, #68	@ 0x44
 8000fe6:	5a9b      	ldrh	r3, [r3, r2]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4914      	ldr	r1, [pc, #80]	@ (8001040 <HAL_PCD_IRQHandler+0x280>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	b291      	uxth	r1, r2
 8000ff4:	2244      	movs	r2, #68	@ 0x44
 8000ff6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f006 f968 	bl	80072d0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001000:	e011      	b.n	8001026 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4013      	ands	r3, r2
 800100a:	d00c      	beq.n	8001026 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2244      	movs	r2, #68	@ 0x44
 8001012:	5a9b      	ldrh	r3, [r3, r2]
 8001014:	b29a      	uxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	490a      	ldr	r1, [pc, #40]	@ (8001044 <HAL_PCD_IRQHandler+0x284>)
 800101c:	400a      	ands	r2, r1
 800101e:	b291      	uxth	r1, r2
 8001020:	2244      	movs	r2, #68	@ 0x44
 8001022:	5299      	strh	r1, [r3, r2]

    return;
 8001024:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001026:	46bd      	mov	sp, r7
 8001028:	b004      	add	sp, #16
 800102a:	bd80      	pop	{r7, pc}
 800102c:	fffffbff 	.word	0xfffffbff
 8001030:	ffffbfff 	.word	0xffffbfff
 8001034:	ffffdfff 	.word	0xffffdfff
 8001038:	ffffefff 	.word	0xffffefff
 800103c:	fffff7ff 	.word	0xfffff7ff
 8001040:	fffffdff 	.word	0xfffffdff
 8001044:	fffffeff 	.word	0xfffffeff

08001048 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	000a      	movs	r2, r1
 8001052:	1cfb      	adds	r3, r7, #3
 8001054:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	23aa      	movs	r3, #170	@ 0xaa
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_PCD_SetAddress+0x1e>
 8001062:	2302      	movs	r3, #2
 8001064:	e017      	b.n	8001096 <HAL_PCD_SetAddress+0x4e>
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	23aa      	movs	r3, #170	@ 0xaa
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	2101      	movs	r1, #1
 800106e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1cfa      	adds	r2, r7, #3
 8001074:	2124      	movs	r1, #36	@ 0x24
 8001076:	7812      	ldrb	r2, [r2, #0]
 8001078:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	1cfb      	adds	r3, r7, #3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f004 fae1 	bl	800564c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	23aa      	movs	r3, #170	@ 0xaa
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	2100      	movs	r1, #0
 8001092:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800109e:	b590      	push	{r4, r7, lr}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	000c      	movs	r4, r1
 80010a8:	0010      	movs	r0, r2
 80010aa:	0019      	movs	r1, r3
 80010ac:	1cfb      	adds	r3, r7, #3
 80010ae:	1c22      	adds	r2, r4, #0
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	003b      	movs	r3, r7
 80010b4:	1c02      	adds	r2, r0, #0
 80010b6:	801a      	strh	r2, [r3, #0]
 80010b8:	1cbb      	adds	r3, r7, #2
 80010ba:	1c0a      	adds	r2, r1, #0
 80010bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80010be:	230b      	movs	r3, #11
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010c6:	1cfb      	adds	r3, r7, #3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da0f      	bge.n	80010f0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010d0:	1cfb      	adds	r3, r7, #3
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2207      	movs	r2, #7
 80010d6:	4013      	ands	r3, r2
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	0013      	movs	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	189b      	adds	r3, r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	18d3      	adds	r3, r2, r3
 80010e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2201      	movs	r2, #1
 80010ec:	705a      	strb	r2, [r3, #1]
 80010ee:	e00f      	b.n	8001110 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010f0:	1cfb      	adds	r3, r7, #3
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2207      	movs	r2, #7
 80010f6:	401a      	ands	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	189b      	adds	r3, r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	3369      	adds	r3, #105	@ 0x69
 8001102:	33ff      	adds	r3, #255	@ 0xff
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	18d3      	adds	r3, r2, r3
 8001108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001110:	1cfb      	adds	r3, r7, #3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2207      	movs	r2, #7
 8001116:	4013      	ands	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800111e:	003b      	movs	r3, r7
 8001120:	881a      	ldrh	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1cba      	adds	r2, r7, #2
 800112a:	7812      	ldrb	r2, [r2, #0]
 800112c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800112e:	1cbb      	adds	r3, r7, #2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d102      	bne.n	800113c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	23aa      	movs	r3, #170	@ 0xaa
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_PCD_EP_Open+0xae>
 8001148:	2302      	movs	r3, #2
 800114a:	e013      	b.n	8001174 <HAL_PCD_EP_Open+0xd6>
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	23aa      	movs	r3, #170	@ 0xaa
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	2101      	movs	r1, #1
 8001154:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f002 fad8 	bl	8003714 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	23aa      	movs	r3, #170	@ 0xaa
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	2100      	movs	r1, #0
 800116c:	54d1      	strb	r1, [r2, r3]

  return ret;
 800116e:	230b      	movs	r3, #11
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b005      	add	sp, #20
 800117a:	bd90      	pop	{r4, r7, pc}

0800117c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	000a      	movs	r2, r1
 8001186:	1cfb      	adds	r3, r7, #3
 8001188:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800118a:	1cfb      	adds	r3, r7, #3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	da0f      	bge.n	80011b4 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001194:	1cfb      	adds	r3, r7, #3
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2207      	movs	r2, #7
 800119a:	4013      	ands	r3, r2
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	0013      	movs	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	189b      	adds	r3, r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2201      	movs	r2, #1
 80011b0:	705a      	strb	r2, [r3, #1]
 80011b2:	e00f      	b.n	80011d4 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b4:	1cfb      	adds	r3, r7, #3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2207      	movs	r2, #7
 80011ba:	401a      	ands	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	189b      	adds	r3, r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	3369      	adds	r3, #105	@ 0x69
 80011c6:	33ff      	adds	r3, #255	@ 0xff
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	18d3      	adds	r3, r2, r3
 80011cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80011d4:	1cfb      	adds	r3, r7, #3
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2207      	movs	r2, #7
 80011da:	4013      	ands	r3, r2
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	23aa      	movs	r3, #170	@ 0xaa
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_PCD_EP_Close+0x76>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e011      	b.n	8001216 <HAL_PCD_EP_Close+0x9a>
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	23aa      	movs	r3, #170	@ 0xaa
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	2101      	movs	r1, #1
 80011fa:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f002 fe27 	bl	8003e58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	23aa      	movs	r3, #170	@ 0xaa
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	2100      	movs	r1, #0
 8001212:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b004      	add	sp, #16
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	200b      	movs	r0, #11
 800122c:	183b      	adds	r3, r7, r0
 800122e:	1c0a      	adds	r2, r1, #0
 8001230:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001232:	0001      	movs	r1, r0
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2207      	movs	r2, #7
 800123a:	401a      	ands	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	189b      	adds	r3, r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	3369      	adds	r3, #105	@ 0x69
 8001246:	33ff      	adds	r3, #255	@ 0xff
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	18d3      	adds	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2200      	movs	r2, #0
 8001264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2207      	movs	r2, #7
 800126c:	4013      	ands	r3, r2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f002 ffab 	bl	80041d8 <USB_EPStartXfer>

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b006      	add	sp, #24
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	200b      	movs	r0, #11
 800129a:	183b      	adds	r3, r7, r0
 800129c:	1c0a      	adds	r2, r1, #0
 800129e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012a0:	183b      	adds	r3, r7, r0
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2207      	movs	r2, #7
 80012a6:	4013      	ands	r3, r2
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	0013      	movs	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	189b      	adds	r3, r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2224      	movs	r2, #36	@ 0x24
 80012c8:	2101      	movs	r1, #1
 80012ca:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2201      	movs	r2, #1
 80012dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012de:	183b      	adds	r3, r7, r0
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2207      	movs	r2, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	0011      	movs	r1, r2
 80012f4:	0018      	movs	r0, r3
 80012f6:	f002 ff6f 	bl	80041d8 <USB_EPStartXfer>

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b006      	add	sp, #24
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	000a      	movs	r2, r1
 800130e:	1cfb      	adds	r3, r7, #3
 8001310:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001312:	1cfb      	adds	r3, r7, #3
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2207      	movs	r2, #7
 8001318:	401a      	ands	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d901      	bls.n	8001326 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e046      	b.n	80013b4 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001326:	1cfb      	adds	r3, r7, #3
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	da0f      	bge.n	8001350 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001330:	1cfb      	adds	r3, r7, #3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2207      	movs	r2, #7
 8001336:	4013      	ands	r3, r2
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	0013      	movs	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	189b      	adds	r3, r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2201      	movs	r2, #1
 800134c:	705a      	strb	r2, [r3, #1]
 800134e:	e00d      	b.n	800136c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001350:	1cfb      	adds	r3, r7, #3
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	0013      	movs	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	189b      	adds	r3, r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	3369      	adds	r3, #105	@ 0x69
 800135e:	33ff      	adds	r3, #255	@ 0xff
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	18d3      	adds	r3, r2, r3
 8001364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2201      	movs	r2, #1
 8001370:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001372:	1cfb      	adds	r3, r7, #3
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2207      	movs	r2, #7
 8001378:	4013      	ands	r3, r2
 800137a:	b2da      	uxtb	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	23aa      	movs	r3, #170	@ 0xaa
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_PCD_EP_SetStall+0x8c>
 800138c:	2302      	movs	r3, #2
 800138e:	e011      	b.n	80013b4 <HAL_PCD_EP_SetStall+0xb0>
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	23aa      	movs	r3, #170	@ 0xaa
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	2101      	movs	r1, #1
 8001398:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	0011      	movs	r1, r2
 80013a2:	0018      	movs	r0, r3
 80013a4:	f004 f850 	bl	8005448 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	23aa      	movs	r3, #170	@ 0xaa
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	2100      	movs	r1, #0
 80013b0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b004      	add	sp, #16
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	000a      	movs	r2, r1
 80013c6:	1cfb      	adds	r3, r7, #3
 80013c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013ca:	1cfb      	adds	r3, r7, #3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	220f      	movs	r2, #15
 80013d0:	401a      	ands	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d901      	bls.n	80013de <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e048      	b.n	8001470 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013de:	1cfb      	adds	r3, r7, #3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	da0f      	bge.n	8001408 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013e8:	1cfb      	adds	r3, r7, #3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2207      	movs	r2, #7
 80013ee:	4013      	ands	r3, r2
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	0013      	movs	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	189b      	adds	r3, r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	705a      	strb	r2, [r3, #1]
 8001406:	e00f      	b.n	8001428 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001408:	1cfb      	adds	r3, r7, #3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2207      	movs	r2, #7
 800140e:	401a      	ands	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	189b      	adds	r3, r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	3369      	adds	r3, #105	@ 0x69
 800141a:	33ff      	adds	r3, #255	@ 0xff
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	18d3      	adds	r3, r2, r3
 8001420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800142e:	1cfb      	adds	r3, r7, #3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2207      	movs	r2, #7
 8001434:	4013      	ands	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	23aa      	movs	r3, #170	@ 0xaa
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	5cd3      	ldrb	r3, [r2, r3]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_PCD_EP_ClrStall+0x90>
 8001448:	2302      	movs	r3, #2
 800144a:	e011      	b.n	8001470 <HAL_PCD_EP_ClrStall+0xb4>
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	23aa      	movs	r3, #170	@ 0xaa
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	2101      	movs	r1, #1
 8001454:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	0011      	movs	r1, r2
 800145e:	0018      	movs	r0, r3
 8001460:	f004 f842 	bl	80054e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	23aa      	movs	r3, #170	@ 0xaa
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	2100      	movs	r1, #0
 800146c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b004      	add	sp, #16
 8001476:	bd80      	pop	{r7, pc}

08001478 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b096      	sub	sp, #88	@ 0x58
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001480:	f000 fbec 	bl	8001c5c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	204e      	movs	r0, #78	@ 0x4e
 800148a:	183b      	adds	r3, r7, r0
 800148c:	2144      	movs	r1, #68	@ 0x44
 800148e:	5a52      	ldrh	r2, [r2, r1]
 8001490:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001492:	183b      	adds	r3, r7, r0
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	244d      	movs	r4, #77	@ 0x4d
 800149a:	193b      	adds	r3, r7, r4
 800149c:	210f      	movs	r1, #15
 800149e:	400a      	ands	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d000      	beq.n	80014ac <PCD_EP_ISR_Handler+0x34>
 80014aa:	e18f      	b.n	80017cc <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014ac:	183b      	adds	r3, r7, r0
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	2210      	movs	r2, #16
 80014b2:	4013      	ands	r3, r2
 80014b4:	d155      	bne.n	8001562 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	200e      	movs	r0, #14
 80014c0:	183b      	adds	r3, r7, r0
 80014c2:	49bb      	ldr	r1, [pc, #748]	@ (80017b0 <PCD_EP_ISR_Handler+0x338>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	801a      	strh	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	183a      	adds	r2, r7, r0
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	49b8      	ldr	r1, [pc, #736]	@ (80017b4 <PCD_EP_ISR_Handler+0x33c>)
 80014d2:	430a      	orrs	r2, r1
 80014d4:	b292      	uxth	r2, r2
 80014d6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3328      	adds	r3, #40	@ 0x28
 80014dc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2250      	movs	r2, #80	@ 0x50
 80014e4:	5a9b      	ldrh	r3, [r3, r2]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	001a      	movs	r2, r3
 80014ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	18d2      	adds	r2, r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	18d3      	adds	r3, r2, r3
 80014f8:	4aaf      	ldr	r2, [pc, #700]	@ (80017b8 <PCD_EP_ISR_Handler+0x340>)
 80014fa:	4694      	mov	ip, r2
 80014fc:	4463      	add	r3, ip
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	059b      	lsls	r3, r3, #22
 8001502:	0d9a      	lsrs	r2, r3, #22
 8001504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001506:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	18d2      	adds	r2, r2, r3
 8001512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001514:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2100      	movs	r1, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f005 feba 	bl	8007294 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	5c9b      	ldrb	r3, [r3, r2]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <PCD_EP_ISR_Handler+0xb8>
 800152c:	f000 fb96 	bl	8001c5c <PCD_EP_ISR_Handler+0x7e4>
 8001530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <PCD_EP_ISR_Handler+0xc4>
 8001538:	f000 fb90 	bl	8001c5c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	@ 0x24
 8001540:	5c9b      	ldrb	r3, [r3, r2]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2280      	movs	r2, #128	@ 0x80
 8001546:	4252      	negs	r2, r2
 8001548:	4313      	orrs	r3, r2
 800154a:	b2da      	uxtb	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0011      	movs	r1, r2
 8001552:	224c      	movs	r2, #76	@ 0x4c
 8001554:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2224      	movs	r2, #36	@ 0x24
 800155a:	2100      	movs	r1, #0
 800155c:	5499      	strb	r1, [r3, r2]
 800155e:	f000 fb7d 	bl	8001c5c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3369      	adds	r3, #105	@ 0x69
 8001566:	33ff      	adds	r3, #255	@ 0xff
 8001568:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	214a      	movs	r1, #74	@ 0x4a
 8001570:	187b      	adds	r3, r7, r1
 8001572:	8812      	ldrh	r2, [r2, #0]
 8001574:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001576:	187b      	adds	r3, r7, r1
 8001578:	881a      	ldrh	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4013      	ands	r3, r2
 8001580:	d037      	beq.n	80015f2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2250      	movs	r2, #80	@ 0x50
 8001588:	5a9b      	ldrh	r3, [r3, r2]
 800158a:	b29b      	uxth	r3, r3
 800158c:	001a      	movs	r2, r3
 800158e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	18d2      	adds	r2, r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	18d3      	adds	r3, r2, r3
 800159c:	4a87      	ldr	r2, [pc, #540]	@ (80017bc <PCD_EP_ISR_Handler+0x344>)
 800159e:	4694      	mov	ip, r2
 80015a0:	4463      	add	r3, ip
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	059b      	lsls	r3, r3, #22
 80015a6:	0d9a      	lsrs	r2, r3, #22
 80015a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015aa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	22ac      	movs	r2, #172	@ 0xac
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	1899      	adds	r1, r3, r2
 80015b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80015bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	f004 f8c4 	bl	800574e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	2010      	movs	r0, #16
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	497b      	ldr	r1, [pc, #492]	@ (80017c0 <PCD_EP_ISR_Handler+0x348>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	801a      	strh	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	183a      	adds	r2, r7, r0
 80015de:	8812      	ldrh	r2, [r2, #0]
 80015e0:	2180      	movs	r1, #128	@ 0x80
 80015e2:	430a      	orrs	r2, r1
 80015e4:	b292      	uxth	r2, r2
 80015e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f005 fe1c 	bl	8007228 <HAL_PCD_SetupStageCallback>
 80015f0:	e334      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015f2:	234a      	movs	r3, #74	@ 0x4a
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	2200      	movs	r2, #0
 80015f8:	5e9b      	ldrsh	r3, [r3, r2]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db00      	blt.n	8001600 <PCD_EP_ISR_Handler+0x188>
 80015fe:	e32d      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	b29a      	uxth	r2, r3
 8001608:	201e      	movs	r0, #30
 800160a:	183b      	adds	r3, r7, r0
 800160c:	496c      	ldr	r1, [pc, #432]	@ (80017c0 <PCD_EP_ISR_Handler+0x348>)
 800160e:	400a      	ands	r2, r1
 8001610:	801a      	strh	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	183a      	adds	r2, r7, r0
 8001618:	8812      	ldrh	r2, [r2, #0]
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	430a      	orrs	r2, r1
 800161e:	b292      	uxth	r2, r2
 8001620:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2250      	movs	r2, #80	@ 0x50
 8001628:	5a9b      	ldrh	r3, [r3, r2]
 800162a:	b29b      	uxth	r3, r3
 800162c:	001a      	movs	r2, r3
 800162e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	18d2      	adds	r2, r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	18d3      	adds	r3, r2, r3
 800163c:	4a5f      	ldr	r2, [pc, #380]	@ (80017bc <PCD_EP_ISR_Handler+0x344>)
 800163e:	4694      	mov	ip, r2
 8001640:	4463      	add	r3, ip
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	059b      	lsls	r3, r3, #22
 8001646:	0d9a      	lsrs	r2, r3, #22
 8001648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800164a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800164c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01a      	beq.n	800168a <PCD_EP_ISR_Handler+0x212>
 8001654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d016      	beq.n	800168a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001662:	6959      	ldr	r1, [r3, #20]
 8001664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001666:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800166a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800166c:	b29b      	uxth	r3, r3
 800166e:	f004 f86e 	bl	800574e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	18d2      	adds	r2, r2, r3
 800167c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800167e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2100      	movs	r1, #0
 8001684:	0018      	movs	r0, r3
 8001686:	f005 fde4 	bl	8007252 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	214a      	movs	r1, #74	@ 0x4a
 8001690:	187b      	adds	r3, r7, r1
 8001692:	8812      	ldrh	r2, [r2, #0]
 8001694:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001696:	187b      	adds	r3, r7, r1
 8001698:	881a      	ldrh	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4013      	ands	r3, r2
 80016a0:	d000      	beq.n	80016a4 <PCD_EP_ISR_Handler+0x22c>
 80016a2:	e2db      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	881a      	ldrh	r2, [r3, #0]
 80016a8:	23c0      	movs	r3, #192	@ 0xc0
 80016aa:	019b      	lsls	r3, r3, #6
 80016ac:	401a      	ands	r2, r3
 80016ae:	23c0      	movs	r3, #192	@ 0xc0
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d100      	bne.n	80016b8 <PCD_EP_ISR_Handler+0x240>
 80016b6:	e2d1      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2250      	movs	r2, #80	@ 0x50
 80016c4:	5a9b      	ldrh	r3, [r3, r2]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	001a      	movs	r2, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	189b      	adds	r3, r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	4a3a      	ldr	r2, [pc, #232]	@ (80017bc <PCD_EP_ISR_Handler+0x344>)
 80016d4:	4694      	mov	ip, r2
 80016d6:	4463      	add	r3, ip
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	059b      	lsls	r3, r3, #22
 80016e2:	0d9b      	lsrs	r3, r3, #22
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80016f0:	d91a      	bls.n	8001728 <PCD_EP_ISR_Handler+0x2b0>
 80016f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80016fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	221f      	movs	r2, #31
 8001700:	4013      	ands	r3, r2
 8001702:	d102      	bne.n	800170a <PCD_EP_ISR_Handler+0x292>
 8001704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001706:	3b01      	subs	r3, #1
 8001708:	647b      	str	r3, [r7, #68]	@ 0x44
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	b29a      	uxth	r2, r3
 8001710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001712:	b29b      	uxth	r3, r3
 8001714:	029b      	lsls	r3, r3, #10
 8001716:	b29b      	uxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b29b      	uxth	r3, r3
 800171c:	4a25      	ldr	r2, [pc, #148]	@ (80017b4 <PCD_EP_ISR_Handler+0x33c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	b29a      	uxth	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	e023      	b.n	8001770 <PCD_EP_ISR_Handler+0x2f8>
 8001728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d108      	bne.n	8001742 <PCD_EP_ISR_Handler+0x2ca>
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4a1f      	ldr	r2, [pc, #124]	@ (80017b4 <PCD_EP_ISR_Handler+0x33c>)
 8001738:	4313      	orrs	r3, r2
 800173a:	b29a      	uxth	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	801a      	strh	r2, [r3, #0]
 8001740:	e016      	b.n	8001770 <PCD_EP_ISR_Handler+0x2f8>
 8001742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	647b      	str	r3, [r7, #68]	@ 0x44
 800174a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d002      	beq.n	800175a <PCD_EP_ISR_Handler+0x2e2>
 8001754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001756:	3301      	adds	r3, #1
 8001758:	647b      	str	r3, [r7, #68]	@ 0x44
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29a      	uxth	r2, r3
 8001760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001762:	b29b      	uxth	r3, r3
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	b29b      	uxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b29a      	uxth	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b29a      	uxth	r2, r3
 8001778:	2012      	movs	r0, #18
 800177a:	183b      	adds	r3, r7, r0
 800177c:	4911      	ldr	r1, [pc, #68]	@ (80017c4 <PCD_EP_ISR_Handler+0x34c>)
 800177e:	400a      	ands	r2, r1
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	183b      	adds	r3, r7, r0
 8001784:	183a      	adds	r2, r7, r0
 8001786:	8812      	ldrh	r2, [r2, #0]
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	0149      	lsls	r1, r1, #5
 800178c:	404a      	eors	r2, r1
 800178e:	801a      	strh	r2, [r3, #0]
 8001790:	183b      	adds	r3, r7, r0
 8001792:	183a      	adds	r2, r7, r0
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	2180      	movs	r1, #128	@ 0x80
 8001798:	0189      	lsls	r1, r1, #6
 800179a:	404a      	eors	r2, r1
 800179c:	801a      	strh	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	183a      	adds	r2, r7, r0
 80017a4:	8812      	ldrh	r2, [r2, #0]
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <PCD_EP_ISR_Handler+0x350>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	b292      	uxth	r2, r2
 80017ac:	801a      	strh	r2, [r3, #0]
 80017ae:	e255      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
 80017b0:	ffff8f0f 	.word	0xffff8f0f
 80017b4:	ffff8000 	.word	0xffff8000
 80017b8:	00000402 	.word	0x00000402
 80017bc:	00000406 	.word	0x00000406
 80017c0:	00000f8f 	.word	0x00000f8f
 80017c4:	ffffbf8f 	.word	0xffffbf8f
 80017c8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	001a      	movs	r2, r3
 80017d2:	204d      	movs	r0, #77	@ 0x4d
 80017d4:	183b      	adds	r3, r7, r0
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	18d2      	adds	r2, r2, r3
 80017dc:	214a      	movs	r1, #74	@ 0x4a
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	2200      	movs	r2, #0
 80017e8:	5e9b      	ldrsh	r3, [r3, r2]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db00      	blt.n	80017f0 <PCD_EP_ISR_Handler+0x378>
 80017ee:	e0fa      	b.n	80019e6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	001a      	movs	r2, r3
 80017f6:	183b      	adds	r3, r7, r0
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29a      	uxth	r2, r3
 8001802:	2448      	movs	r4, #72	@ 0x48
 8001804:	193b      	adds	r3, r7, r4
 8001806:	49d1      	ldr	r1, [pc, #836]	@ (8001b4c <PCD_EP_ISR_Handler+0x6d4>)
 8001808:	400a      	ands	r2, r1
 800180a:	801a      	strh	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	001a      	movs	r2, r3
 8001812:	183b      	adds	r3, r7, r0
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	18d3      	adds	r3, r2, r3
 800181a:	193a      	adds	r2, r7, r4
 800181c:	8812      	ldrh	r2, [r2, #0]
 800181e:	2180      	movs	r1, #128	@ 0x80
 8001820:	430a      	orrs	r2, r1
 8001822:	b292      	uxth	r2, r2
 8001824:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001826:	183b      	adds	r3, r7, r0
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	0013      	movs	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	189b      	adds	r3, r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	3369      	adds	r3, #105	@ 0x69
 8001834:	33ff      	adds	r3, #255	@ 0xff
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	18d3      	adds	r3, r2, r3
 800183a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800183c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183e:	7b1b      	ldrb	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d125      	bne.n	8001890 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2250      	movs	r2, #80	@ 0x50
 800184a:	5a9b      	ldrh	r3, [r3, r2]
 800184c:	b29b      	uxth	r3, r3
 800184e:	001a      	movs	r2, r3
 8001850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	18d2      	adds	r2, r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	18d3      	adds	r3, r2, r3
 800185e:	4abc      	ldr	r2, [pc, #752]	@ (8001b50 <PCD_EP_ISR_Handler+0x6d8>)
 8001860:	4694      	mov	ip, r2
 8001862:	4463      	add	r3, ip
 8001864:	881a      	ldrh	r2, [r3, #0]
 8001866:	2450      	movs	r4, #80	@ 0x50
 8001868:	193b      	adds	r3, r7, r4
 800186a:	0592      	lsls	r2, r2, #22
 800186c:	0d92      	lsrs	r2, r2, #22
 800186e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001870:	193b      	adds	r3, r7, r4
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d100      	bne.n	800187a <PCD_EP_ISR_Handler+0x402>
 8001878:	e08d      	b.n	8001996 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001880:	6959      	ldr	r1, [r3, #20]
 8001882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001884:	88da      	ldrh	r2, [r3, #6]
 8001886:	193b      	adds	r3, r7, r4
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	f003 ff60 	bl	800574e <USB_ReadPMA>
 800188e:	e082      	b.n	8001996 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001892:	78db      	ldrb	r3, [r3, #3]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d10c      	bne.n	80018b2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001898:	2350      	movs	r3, #80	@ 0x50
 800189a:	18fc      	adds	r4, r7, r3
 800189c:	234a      	movs	r3, #74	@ 0x4a
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	881a      	ldrh	r2, [r3, #0]
 80018a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 f9ec 	bl	8001c84 <HAL_PCD_EP_DB_Receive>
 80018ac:	0003      	movs	r3, r0
 80018ae:	8023      	strh	r3, [r4, #0]
 80018b0:	e071      	b.n	8001996 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	001a      	movs	r2, r3
 80018b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	18d3      	adds	r3, r2, r3
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	2052      	movs	r0, #82	@ 0x52
 80018c6:	183b      	adds	r3, r7, r0
 80018c8:	49a2      	ldr	r1, [pc, #648]	@ (8001b54 <PCD_EP_ISR_Handler+0x6dc>)
 80018ca:	400a      	ands	r2, r1
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	001a      	movs	r2, r3
 80018d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	18d3      	adds	r3, r2, r3
 80018dc:	183a      	adds	r2, r7, r0
 80018de:	8812      	ldrh	r2, [r2, #0]
 80018e0:	499d      	ldr	r1, [pc, #628]	@ (8001b58 <PCD_EP_ISR_Handler+0x6e0>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	b292      	uxth	r2, r2
 80018e6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	001a      	movs	r2, r3
 80018ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	18d3      	adds	r3, r2, r3
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	001a      	movs	r2, r3
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	4013      	ands	r3, r2
 8001902:	d024      	beq.n	800194e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2250      	movs	r2, #80	@ 0x50
 800190a:	5a9b      	ldrh	r3, [r3, r2]
 800190c:	b29b      	uxth	r3, r3
 800190e:	001a      	movs	r2, r3
 8001910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	18d2      	adds	r2, r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	4a8f      	ldr	r2, [pc, #572]	@ (8001b5c <PCD_EP_ISR_Handler+0x6e4>)
 8001920:	4694      	mov	ip, r2
 8001922:	4463      	add	r3, ip
 8001924:	881a      	ldrh	r2, [r3, #0]
 8001926:	2450      	movs	r4, #80	@ 0x50
 8001928:	193b      	adds	r3, r7, r4
 800192a:	0592      	lsls	r2, r2, #22
 800192c:	0d92      	lsrs	r2, r2, #22
 800192e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001930:	193b      	adds	r3, r7, r4
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d02e      	beq.n	8001996 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193e:	6959      	ldr	r1, [r3, #20]
 8001940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001942:	891a      	ldrh	r2, [r3, #8]
 8001944:	193b      	adds	r3, r7, r4
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	f003 ff01 	bl	800574e <USB_ReadPMA>
 800194c:	e023      	b.n	8001996 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2250      	movs	r2, #80	@ 0x50
 8001954:	5a9b      	ldrh	r3, [r3, r2]
 8001956:	b29b      	uxth	r3, r3
 8001958:	001a      	movs	r2, r3
 800195a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	18d2      	adds	r2, r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	18d3      	adds	r3, r2, r3
 8001968:	4a79      	ldr	r2, [pc, #484]	@ (8001b50 <PCD_EP_ISR_Handler+0x6d8>)
 800196a:	4694      	mov	ip, r2
 800196c:	4463      	add	r3, ip
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	2450      	movs	r4, #80	@ 0x50
 8001972:	193b      	adds	r3, r7, r4
 8001974:	0592      	lsls	r2, r2, #22
 8001976:	0d92      	lsrs	r2, r2, #22
 8001978:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800197a:	193b      	adds	r3, r7, r4
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001988:	6959      	ldr	r1, [r3, #20]
 800198a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198c:	895a      	ldrh	r2, [r3, #10]
 800198e:	193b      	adds	r3, r7, r4
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f003 fedc 	bl	800574e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	2150      	movs	r1, #80	@ 0x50
 800199c:	187b      	adds	r3, r7, r1
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	18d2      	adds	r2, r2, r3
 80019a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	18d2      	adds	r2, r2, r3
 80019b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <PCD_EP_ISR_Handler+0x550>
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f005 fc3e 	bl	8007252 <HAL_PCD_DataOutStageCallback>
 80019d6:	e006      	b.n	80019e6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80019de:	0011      	movs	r1, r2
 80019e0:	0018      	movs	r0, r3
 80019e2:	f002 fbf9 	bl	80041d8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019e6:	244a      	movs	r4, #74	@ 0x4a
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2280      	movs	r2, #128	@ 0x80
 80019ee:	4013      	ands	r3, r2
 80019f0:	d100      	bne.n	80019f4 <PCD_EP_ISR_Handler+0x57c>
 80019f2:	e133      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80019f4:	204d      	movs	r0, #77	@ 0x4d
 80019f6:	183b      	adds	r3, r7, r0
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	0013      	movs	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	189b      	adds	r3, r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	18d3      	adds	r3, r2, r3
 8001a08:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	001a      	movs	r2, r3
 8001a10:	183b      	adds	r3, r7, r0
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	18d3      	adds	r3, r2, r3
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	2542      	movs	r5, #66	@ 0x42
 8001a1e:	197b      	adds	r3, r7, r5
 8001a20:	494f      	ldr	r1, [pc, #316]	@ (8001b60 <PCD_EP_ISR_Handler+0x6e8>)
 8001a22:	400a      	ands	r2, r1
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	183b      	adds	r3, r7, r0
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	18d3      	adds	r3, r2, r3
 8001a34:	197a      	adds	r2, r7, r5
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	494a      	ldr	r1, [pc, #296]	@ (8001b64 <PCD_EP_ISR_Handler+0x6ec>)
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	b292      	uxth	r2, r2
 8001a3e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a42:	78db      	ldrb	r3, [r3, #3]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d000      	beq.n	8001a4a <PCD_EP_ISR_Handler+0x5d2>
 8001a48:	e0af      	b.n	8001baa <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a52:	7b1b      	ldrb	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d100      	bne.n	8001a5a <PCD_EP_ISR_Handler+0x5e2>
 8001a58:	e09f      	b.n	8001b9a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	4013      	ands	r3, r2
 8001a62:	d046      	beq.n	8001af2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a66:	785b      	ldrb	r3, [r3, #1]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d125      	bne.n	8001ab8 <PCD_EP_ISR_Handler+0x640>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2250      	movs	r2, #80	@ 0x50
 8001a78:	5a9b      	ldrh	r3, [r3, r2]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	189b      	adds	r3, r3, r2
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	00da      	lsls	r2, r3, #3
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	18d3      	adds	r3, r2, r3
 8001a8e:	4a33      	ldr	r2, [pc, #204]	@ (8001b5c <PCD_EP_ISR_Handler+0x6e4>)
 8001a90:	4694      	mov	ip, r2
 8001a92:	4463      	add	r3, ip
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	059b      	lsls	r3, r3, #22
 8001a9e:	0d9b      	lsrs	r3, r3, #22
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4a2d      	ldr	r2, [pc, #180]	@ (8001b64 <PCD_EP_ISR_Handler+0x6ec>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	e070      	b.n	8001b9a <PCD_EP_ISR_Handler+0x722>
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aba:	785b      	ldrb	r3, [r3, #1]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d16c      	bne.n	8001b9a <PCD_EP_ISR_Handler+0x722>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2250      	movs	r2, #80	@ 0x50
 8001acc:	5a9b      	ldrh	r3, [r3, r2]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	189b      	adds	r3, r3, r2
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	00da      	lsls	r2, r3, #3
 8001ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae0:	18d3      	adds	r3, r2, r3
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b5c <PCD_EP_ISR_Handler+0x6e4>)
 8001ae4:	4694      	mov	ip, r2
 8001ae6:	4463      	add	r3, ip
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aec:	2200      	movs	r2, #0
 8001aee:	801a      	strh	r2, [r3, #0]
 8001af0:	e053      	b.n	8001b9a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afa:	785b      	ldrb	r3, [r3, #1]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d133      	bne.n	8001b68 <PCD_EP_ISR_Handler+0x6f0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2250      	movs	r2, #80	@ 0x50
 8001b0c:	5a9b      	ldrh	r3, [r3, r2]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	001a      	movs	r2, r3
 8001b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b14:	189b      	adds	r3, r3, r2
 8001b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	00da      	lsls	r2, r3, #3
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b20:	18d3      	adds	r3, r2, r3
 8001b22:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <PCD_EP_ISR_Handler+0x6d8>)
 8001b24:	4694      	mov	ip, r2
 8001b26:	4463      	add	r3, ip
 8001b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	059b      	lsls	r3, r3, #22
 8001b32:	0d9b      	lsrs	r3, r3, #22
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <PCD_EP_ISR_Handler+0x6ec>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b48:	801a      	strh	r2, [r3, #0]
 8001b4a:	e026      	b.n	8001b9a <PCD_EP_ISR_Handler+0x722>
 8001b4c:	00000f8f 	.word	0x00000f8f
 8001b50:	00000406 	.word	0x00000406
 8001b54:	ffff8f8f 	.word	0xffff8f8f
 8001b58:	ffff80c0 	.word	0xffff80c0
 8001b5c:	00000402 	.word	0x00000402
 8001b60:	ffff8f0f 	.word	0xffff8f0f
 8001b64:	ffff8000 	.word	0xffff8000
 8001b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d114      	bne.n	8001b9a <PCD_EP_ISR_Handler+0x722>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2250      	movs	r2, #80	@ 0x50
 8001b76:	5a9b      	ldrh	r3, [r3, r2]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b7e:	189b      	adds	r3, r3, r2
 8001b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	00da      	lsls	r2, r3, #3
 8001b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b8a:	18d3      	adds	r3, r2, r3
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c7c <PCD_EP_ISR_Handler+0x804>)
 8001b8e:	4694      	mov	ip, r2
 8001b90:	4463      	add	r3, ip
 8001b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b96:	2200      	movs	r2, #0
 8001b98:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f005 fb76 	bl	8007294 <HAL_PCD_DataInStageCallback>
 8001ba8:	e058      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001baa:	234a      	movs	r3, #74	@ 0x4a
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d149      	bne.n	8001c4c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2250      	movs	r2, #80	@ 0x50
 8001bbe:	5a9b      	ldrh	r3, [r3, r2]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	18d2      	adds	r2, r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	18d3      	adds	r3, r2, r3
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8001c80 <PCD_EP_ISR_Handler+0x808>)
 8001bd4:	4694      	mov	ip, r2
 8001bd6:	4463      	add	r3, ip
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	2140      	movs	r1, #64	@ 0x40
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	0592      	lsls	r2, r2, #22
 8001be0:	0d92      	lsrs	r2, r2, #22
 8001be2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d907      	bls.n	8001c00 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfc:	619a      	str	r2, [r3, #24]
 8001bfe:	e002      	b.n	8001c06 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0011      	movs	r1, r2
 8001c16:	0018      	movs	r0, r3
 8001c18:	f005 fb3c 	bl	8007294 <HAL_PCD_DataInStageCallback>
 8001c1c:	e01e      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	2140      	movs	r1, #64	@ 0x40
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	18d2      	adds	r2, r2, r3
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	18d2      	adds	r2, r2, r3
 8001c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f002 fac7 	bl	80041d8 <USB_EPStartXfer>
 8001c4a:	e007      	b.n	8001c5c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c4c:	234a      	movs	r3, #74	@ 0x4a
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	881a      	ldrh	r2, [r3, #0]
 8001c52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f930 	bl	8001ebc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2244      	movs	r2, #68	@ 0x44
 8001c62:	5a9b      	ldrh	r3, [r3, r2]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da01      	bge.n	8001c70 <PCD_EP_ISR_Handler+0x7f8>
 8001c6c:	f7ff fc0a 	bl	8001484 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b016      	add	sp, #88	@ 0x58
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	00000406 	.word	0x00000406
 8001c80:	00000402 	.word	0x00000402

08001c84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b089      	sub	sp, #36	@ 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	1dbb      	adds	r3, r7, #6
 8001c90:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c92:	1dbb      	adds	r3, r7, #6
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	01db      	lsls	r3, r3, #7
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d100      	bne.n	8001ca0 <HAL_PCD_EP_DB_Receive+0x1c>
 8001c9e:	e07d      	b.n	8001d9c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2250      	movs	r2, #80	@ 0x50
 8001ca6:	5a9b      	ldrh	r3, [r3, r2]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	001a      	movs	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	18d2      	adds	r2, r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	18d3      	adds	r3, r2, r3
 8001cba:	4a7a      	ldr	r2, [pc, #488]	@ (8001ea4 <HAL_PCD_EP_DB_Receive+0x220>)
 8001cbc:	4694      	mov	ip, r2
 8001cbe:	4463      	add	r3, ip
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	211a      	movs	r1, #26
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	0592      	lsls	r2, r2, #22
 8001cc8:	0d92      	lsrs	r2, r2, #22
 8001cca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d307      	bcc.n	8001ce8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	1ad2      	subs	r2, r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	619a      	str	r2, [r3, #24]
 8001ce6:	e002      	b.n	8001cee <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d121      	bne.n	8001d3a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	18d3      	adds	r3, r2, r3
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	2018      	movs	r0, #24
 8001d0a:	183b      	adds	r3, r7, r0
 8001d0c:	4966      	ldr	r1, [pc, #408]	@ (8001ea8 <HAL_PCD_EP_DB_Receive+0x224>)
 8001d0e:	400a      	ands	r2, r1
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	183b      	adds	r3, r7, r0
 8001d14:	183a      	adds	r2, r7, r0
 8001d16:	8812      	ldrh	r2, [r2, #0]
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	0189      	lsls	r1, r1, #6
 8001d1c:	404a      	eors	r2, r1
 8001d1e:	801a      	strh	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	001a      	movs	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	18d3      	adds	r3, r2, r3
 8001d2e:	183a      	adds	r2, r7, r0
 8001d30:	8812      	ldrh	r2, [r2, #0]
 8001d32:	495e      	ldr	r1, [pc, #376]	@ (8001eac <HAL_PCD_EP_DB_Receive+0x228>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	b292      	uxth	r2, r2
 8001d38:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d3a:	1dbb      	adds	r3, r7, #6
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	2240      	movs	r2, #64	@ 0x40
 8001d40:	4013      	ands	r3, r2
 8001d42:	d01a      	beq.n	8001d7a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	001a      	movs	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	18d3      	adds	r3, r2, r3
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	2016      	movs	r0, #22
 8001d58:	183b      	adds	r3, r7, r0
 8001d5a:	4955      	ldr	r1, [pc, #340]	@ (8001eb0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	801a      	strh	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	001a      	movs	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	18d3      	adds	r3, r2, r3
 8001d6e:	183a      	adds	r2, r7, r0
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	4950      	ldr	r1, [pc, #320]	@ (8001eb4 <HAL_PCD_EP_DB_Receive+0x230>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	b292      	uxth	r2, r2
 8001d78:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001d7a:	241a      	movs	r4, #26
 8001d7c:	193b      	adds	r3, r7, r4
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d100      	bne.n	8001d86 <HAL_PCD_EP_DB_Receive+0x102>
 8001d84:	e086      	b.n	8001e94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	6959      	ldr	r1, [r3, #20]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	891a      	ldrh	r2, [r3, #8]
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	f003 fcda 	bl	800574e <USB_ReadPMA>
 8001d9a:	e07b      	b.n	8001e94 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2250      	movs	r2, #80	@ 0x50
 8001da2:	5a9b      	ldrh	r3, [r3, r2]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	001a      	movs	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	18d2      	adds	r2, r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	18d3      	adds	r3, r2, r3
 8001db6:	4a40      	ldr	r2, [pc, #256]	@ (8001eb8 <HAL_PCD_EP_DB_Receive+0x234>)
 8001db8:	4694      	mov	ip, r2
 8001dba:	4463      	add	r3, ip
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	211a      	movs	r1, #26
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	0592      	lsls	r2, r2, #22
 8001dc4:	0d92      	lsrs	r2, r2, #22
 8001dc6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d307      	bcc.n	8001de4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	1ad2      	subs	r2, r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	619a      	str	r2, [r3, #24]
 8001de2:	e002      	b.n	8001dea <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d121      	bne.n	8001e36 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	001a      	movs	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	18d3      	adds	r3, r2, r3
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	201e      	movs	r0, #30
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	4927      	ldr	r1, [pc, #156]	@ (8001ea8 <HAL_PCD_EP_DB_Receive+0x224>)
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	183b      	adds	r3, r7, r0
 8001e10:	183a      	adds	r2, r7, r0
 8001e12:	8812      	ldrh	r2, [r2, #0]
 8001e14:	2180      	movs	r1, #128	@ 0x80
 8001e16:	0189      	lsls	r1, r1, #6
 8001e18:	404a      	eors	r2, r1
 8001e1a:	801a      	strh	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	001a      	movs	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	18d3      	adds	r3, r2, r3
 8001e2a:	183a      	adds	r2, r7, r0
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	491f      	ldr	r1, [pc, #124]	@ (8001eac <HAL_PCD_EP_DB_Receive+0x228>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	b292      	uxth	r2, r2
 8001e34:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2240      	movs	r2, #64	@ 0x40
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d11a      	bne.n	8001e76 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	001a      	movs	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	18d3      	adds	r3, r2, r3
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	201c      	movs	r0, #28
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	4916      	ldr	r1, [pc, #88]	@ (8001eb0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	001a      	movs	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	18d3      	adds	r3, r2, r3
 8001e6a:	183a      	adds	r2, r7, r0
 8001e6c:	8812      	ldrh	r2, [r2, #0]
 8001e6e:	4911      	ldr	r1, [pc, #68]	@ (8001eb4 <HAL_PCD_EP_DB_Receive+0x230>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	b292      	uxth	r2, r2
 8001e74:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001e76:	241a      	movs	r4, #26
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6959      	ldr	r1, [r3, #20]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	895a      	ldrh	r2, [r3, #10]
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	f003 fc5d 	bl	800574e <USB_ReadPMA>
    }
  }

  return count;
 8001e94:	231a      	movs	r3, #26
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	881b      	ldrh	r3, [r3, #0]
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b009      	add	sp, #36	@ 0x24
 8001ea0:	bd90      	pop	{r4, r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	00000402 	.word	0x00000402
 8001ea8:	ffffbf8f 	.word	0xffffbf8f
 8001eac:	ffff8080 	.word	0xffff8080
 8001eb0:	ffff8f8f 	.word	0xffff8f8f
 8001eb4:	ffff80c0 	.word	0xffff80c0
 8001eb8:	00000406 	.word	0x00000406

08001ebc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0a4      	sub	sp, #144	@ 0x90
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	1dbb      	adds	r3, r7, #6
 8001ec8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	2240      	movs	r2, #64	@ 0x40
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x1a>
 8001ed4:	e1e4      	b.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2250      	movs	r2, #80	@ 0x50
 8001edc:	5a9b      	ldrh	r3, [r3, r2]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	18d2      	adds	r2, r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	18d3      	adds	r3, r2, r3
 8001ef0:	4ad0      	ldr	r2, [pc, #832]	@ (8002234 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001ef2:	4694      	mov	ip, r2
 8001ef4:	4463      	add	r3, ip
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	2186      	movs	r1, #134	@ 0x86
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	0592      	lsls	r2, r2, #22
 8001efe:	0d92      	lsrs	r2, r2, #22
 8001f00:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d907      	bls.n	8001f1e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	1ad2      	subs	r2, r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	619a      	str	r2, [r3, #24]
 8001f1c:	e002      	b.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d000      	beq.n	8001f2e <HAL_PCD_EP_DB_Transmit+0x72>
 8001f2c:	e0b5      	b.n	800209a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d125      	bne.n	8001f82 <HAL_PCD_EP_DB_Transmit+0xc6>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2250      	movs	r2, #80	@ 0x50
 8001f42:	5a9b      	ldrh	r3, [r3, r2]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	001a      	movs	r2, r3
 8001f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4a:	189b      	adds	r3, r3, r2
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	00da      	lsls	r2, r3, #3
 8001f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f56:	18d3      	adds	r3, r2, r3
 8001f58:	4ab6      	ldr	r2, [pc, #728]	@ (8002234 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001f5a:	4694      	mov	ip, r2
 8001f5c:	4463      	add	r3, ip
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	059b      	lsls	r3, r3, #22
 8001f68:	0d9b      	lsrs	r3, r3, #22
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4ab0      	ldr	r2, [pc, #704]	@ (8002238 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	e01b      	b.n	8001fba <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d117      	bne.n	8001fba <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2250      	movs	r2, #80	@ 0x50
 8001f96:	5a9b      	ldrh	r3, [r3, r2]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f9e:	189b      	adds	r3, r3, r2
 8001fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	00da      	lsls	r2, r3, #3
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001faa:	18d3      	adds	r3, r2, r3
 8001fac:	4aa1      	ldr	r2, [pc, #644]	@ (8002234 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001fae:	4694      	mov	ip, r2
 8001fb0:	4463      	add	r3, ip
 8001fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d125      	bne.n	8002014 <HAL_PCD_EP_DB_Transmit+0x158>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2250      	movs	r2, #80	@ 0x50
 8001fd4:	5a9b      	ldrh	r3, [r3, r2]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	001a      	movs	r2, r3
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	189b      	adds	r3, r3, r2
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	00da      	lsls	r2, r3, #3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	18d3      	adds	r3, r2, r3
 8001fea:	4a94      	ldr	r2, [pc, #592]	@ (800223c <HAL_PCD_EP_DB_Transmit+0x380>)
 8001fec:	4694      	mov	ip, r2
 8001fee:	4463      	add	r3, ip
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	059b      	lsls	r3, r3, #22
 8001ffa:	0d9b      	lsrs	r3, r3, #22
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4a8b      	ldr	r2, [pc, #556]	@ (8002238 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800200a:	4313      	orrs	r3, r2
 800200c:	b29a      	uxth	r2, r3
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	e018      	b.n	8002046 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	785b      	ldrb	r3, [r3, #1]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d114      	bne.n	8002046 <HAL_PCD_EP_DB_Transmit+0x18a>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2250      	movs	r2, #80	@ 0x50
 8002022:	5a9b      	ldrh	r3, [r3, r2]
 8002024:	b29b      	uxth	r3, r3
 8002026:	001a      	movs	r2, r3
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	189b      	adds	r3, r3, r2
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	18d3      	adds	r3, r2, r3
 8002038:	4a80      	ldr	r2, [pc, #512]	@ (800223c <HAL_PCD_EP_DB_Transmit+0x380>)
 800203a:	4694      	mov	ip, r2
 800203c:	4463      	add	r3, ip
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	2200      	movs	r2, #0
 8002044:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f005 f920 	bl	8007294 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	881a      	ldrh	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	01db      	lsls	r3, r3, #7
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002060:	e309      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	001a      	movs	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	18d3      	adds	r3, r2, r3
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2016      	movs	r0, #22
 8002076:	183b      	adds	r3, r7, r0
 8002078:	4971      	ldr	r1, [pc, #452]	@ (8002240 <HAL_PCD_EP_DB_Transmit+0x384>)
 800207a:	400a      	ands	r2, r1
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	001a      	movs	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	18d3      	adds	r3, r2, r3
 800208c:	183a      	adds	r2, r7, r0
 800208e:	8812      	ldrh	r2, [r2, #0]
 8002090:	496c      	ldr	r1, [pc, #432]	@ (8002244 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002092:	430a      	orrs	r2, r1
 8002094:	b292      	uxth	r2, r2
 8002096:	801a      	strh	r2, [r3, #0]
 8002098:	e2ed      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800209a:	1dbb      	adds	r3, r7, #6
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	01db      	lsls	r3, r3, #7
 80020a2:	4013      	ands	r3, r2
 80020a4:	d01a      	beq.n	80020dc <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	001a      	movs	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	18d3      	adds	r3, r2, r3
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	208a      	movs	r0, #138	@ 0x8a
 80020ba:	183b      	adds	r3, r7, r0
 80020bc:	4960      	ldr	r1, [pc, #384]	@ (8002240 <HAL_PCD_EP_DB_Transmit+0x384>)
 80020be:	400a      	ands	r2, r1
 80020c0:	801a      	strh	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	001a      	movs	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	18d3      	adds	r3, r2, r3
 80020d0:	183a      	adds	r2, r7, r0
 80020d2:	8812      	ldrh	r2, [r2, #0]
 80020d4:	495b      	ldr	r1, [pc, #364]	@ (8002244 <HAL_PCD_EP_DB_Transmit+0x388>)
 80020d6:	430a      	orrs	r2, r1
 80020d8:	b292      	uxth	r2, r2
 80020da:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2224      	movs	r2, #36	@ 0x24
 80020e0:	5c9b      	ldrb	r3, [r3, r2]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d000      	beq.n	80020e8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80020e6:	e2c6      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	2186      	movs	r1, #134	@ 0x86
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	18d2      	adds	r2, r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	18d2      	adds	r2, r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	429a      	cmp	r2, r3
 8002110:	d30c      	bcc.n	800212c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	218c      	movs	r1, #140	@ 0x8c
 8002118:	187a      	adds	r2, r7, r1
 800211a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	187b      	adds	r3, r7, r1
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1ad2      	subs	r2, r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	621a      	str	r2, [r3, #32]
 800212a:	e01a      	b.n	8002162 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002134:	2386      	movs	r3, #134	@ 0x86
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	228c      	movs	r2, #140	@ 0x8c
 800213c:	18ba      	adds	r2, r7, r2
 800213e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2224      	movs	r2, #36	@ 0x24
 8002144:	2100      	movs	r1, #0
 8002146:	5499      	strb	r1, [r3, r2]
 8002148:	e00b      	b.n	8002162 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2224      	movs	r2, #36	@ 0x24
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	228c      	movs	r2, #140	@ 0x8c
 8002158:	18ba      	adds	r2, r7, r2
 800215a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d000      	beq.n	800216c <HAL_PCD_EP_DB_Transmit+0x2b0>
 800216a:	e06d      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x38c>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2250      	movs	r2, #80	@ 0x50
 8002178:	5a9b      	ldrh	r3, [r3, r2]
 800217a:	b29b      	uxth	r3, r3
 800217c:	001a      	movs	r2, r3
 800217e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002180:	189b      	adds	r3, r3, r2
 8002182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	00da      	lsls	r2, r3, #3
 800218a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800218c:	18d3      	adds	r3, r2, r3
 800218e:	4a29      	ldr	r2, [pc, #164]	@ (8002234 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002190:	4694      	mov	ip, r2
 8002192:	4463      	add	r3, ip
 8002194:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	059b      	lsls	r3, r3, #22
 800219e:	0d9b      	lsrs	r3, r3, #22
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	228c      	movs	r2, #140	@ 0x8c
 80021a8:	18bb      	adds	r3, r7, r2
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80021ae:	d91a      	bls.n	80021e6 <HAL_PCD_EP_DB_Transmit+0x32a>
 80021b0:	18bb      	adds	r3, r7, r2
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021b8:	18bb      	adds	r3, r7, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	221f      	movs	r2, #31
 80021be:	4013      	ands	r3, r2
 80021c0:	d102      	bne.n	80021c8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80021c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021c4:	3b01      	subs	r3, #1
 80021c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	4a17      	ldr	r2, [pc, #92]	@ (8002238 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	b29a      	uxth	r2, r3
 80021e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e2:	801a      	strh	r2, [r3, #0]
 80021e4:	e04f      	b.n	8002286 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80021e6:	238c      	movs	r3, #140	@ 0x8c
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d108      	bne.n	8002202 <HAL_PCD_EP_DB_Transmit+0x346>
 80021f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fe:	801a      	strh	r2, [r3, #0]
 8002200:	e041      	b.n	8002286 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002202:	228c      	movs	r2, #140	@ 0x8c
 8002204:	18bb      	adds	r3, r7, r2
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800220c:	18bb      	adds	r3, r7, r2
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d002      	beq.n	800221c <HAL_PCD_EP_DB_Transmit+0x360>
 8002216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002218:	3301      	adds	r3, #1
 800221a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800221c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29a      	uxth	r2, r3
 8002222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002224:	b29b      	uxth	r3, r3
 8002226:	029b      	lsls	r3, r3, #10
 8002228:	b29b      	uxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b29a      	uxth	r2, r3
 800222e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	e028      	b.n	8002286 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002234:	00000402 	.word	0x00000402
 8002238:	ffff8000 	.word	0xffff8000
 800223c:	00000406 	.word	0x00000406
 8002240:	ffff8f8f 	.word	0xffff8f8f
 8002244:	ffffc080 	.word	0xffffc080
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d11a      	bne.n	8002286 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	647b      	str	r3, [r7, #68]	@ 0x44
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2250      	movs	r2, #80	@ 0x50
 800225c:	5a9b      	ldrh	r3, [r3, r2]
 800225e:	b29b      	uxth	r3, r3
 8002260:	001a      	movs	r2, r3
 8002262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002264:	189b      	adds	r3, r3, r2
 8002266:	647b      	str	r3, [r7, #68]	@ 0x44
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	00da      	lsls	r2, r3, #3
 800226e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002270:	18d3      	adds	r3, r2, r3
 8002272:	4adb      	ldr	r2, [pc, #876]	@ (80025e0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002274:	4694      	mov	ip, r2
 8002276:	4463      	add	r3, ip
 8002278:	643b      	str	r3, [r7, #64]	@ 0x40
 800227a:	238c      	movs	r3, #140	@ 0x8c
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	b29a      	uxth	r2, r3
 8002282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002284:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6959      	ldr	r1, [r3, #20]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	891a      	ldrh	r2, [r3, #8]
 8002292:	238c      	movs	r3, #140	@ 0x8c
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f003 fa0f 	bl	80056bc <USB_WritePMA>
 800229e:	e1ea      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2250      	movs	r2, #80	@ 0x50
 80022a6:	5a9b      	ldrh	r3, [r3, r2]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	001a      	movs	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	18d2      	adds	r2, r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	4aca      	ldr	r2, [pc, #808]	@ (80025e4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80022bc:	4694      	mov	ip, r2
 80022be:	4463      	add	r3, ip
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	2186      	movs	r1, #134	@ 0x86
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	0592      	lsls	r2, r2, #22
 80022c8:	0d92      	lsrs	r2, r2, #22
 80022ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	187b      	adds	r3, r7, r1
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d307      	bcc.n	80022e8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	1ad2      	subs	r2, r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	619a      	str	r2, [r3, #24]
 80022e6:	e002      	b.n	80022ee <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2200      	movs	r2, #0
 80022ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d000      	beq.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x43c>
 80022f6:	e0bb      	b.n	8002470 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d125      	bne.n	800234c <HAL_PCD_EP_DB_Transmit+0x490>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2250      	movs	r2, #80	@ 0x50
 800230c:	5a9b      	ldrh	r3, [r3, r2]
 800230e:	b29b      	uxth	r3, r3
 8002310:	001a      	movs	r2, r3
 8002312:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002314:	189b      	adds	r3, r3, r2
 8002316:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	00da      	lsls	r2, r3, #3
 800231e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002320:	18d3      	adds	r3, r2, r3
 8002322:	4aaf      	ldr	r2, [pc, #700]	@ (80025e0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002324:	4694      	mov	ip, r2
 8002326:	4463      	add	r3, ip
 8002328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800232a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	059b      	lsls	r3, r3, #22
 8002332:	0d9b      	lsrs	r3, r3, #22
 8002334:	b29a      	uxth	r2, r3
 8002336:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	4aa9      	ldr	r2, [pc, #676]	@ (80025e8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	b29a      	uxth	r2, r3
 8002346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e01b      	b.n	8002384 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d117      	bne.n	8002384 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	667b      	str	r3, [r7, #100]	@ 0x64
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2250      	movs	r2, #80	@ 0x50
 8002360:	5a9b      	ldrh	r3, [r3, r2]
 8002362:	b29b      	uxth	r3, r3
 8002364:	001a      	movs	r2, r3
 8002366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002368:	189b      	adds	r3, r3, r2
 800236a:	667b      	str	r3, [r7, #100]	@ 0x64
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	00da      	lsls	r2, r3, #3
 8002372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002374:	18d3      	adds	r3, r2, r3
 8002376:	4a9a      	ldr	r2, [pc, #616]	@ (80025e0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002378:	4694      	mov	ip, r2
 800237a:	4463      	add	r3, ip
 800237c:	663b      	str	r3, [r7, #96]	@ 0x60
 800237e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002380:	2200      	movs	r2, #0
 8002382:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	677b      	str	r3, [r7, #116]	@ 0x74
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d12b      	bne.n	80023ea <HAL_PCD_EP_DB_Transmit+0x52e>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2250      	movs	r2, #80	@ 0x50
 800239e:	5a9b      	ldrh	r3, [r3, r2]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	001a      	movs	r2, r3
 80023a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023a6:	189b      	adds	r3, r3, r2
 80023a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	00da      	lsls	r2, r3, #3
 80023b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023b2:	18d3      	adds	r3, r2, r3
 80023b4:	4a8b      	ldr	r2, [pc, #556]	@ (80025e4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80023b6:	4694      	mov	ip, r2
 80023b8:	4463      	add	r3, ip
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	187a      	adds	r2, r7, r1
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	059b      	lsls	r3, r3, #22
 80023ca:	0d9b      	lsrs	r3, r3, #22
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	801a      	strh	r2, [r3, #0]
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4a82      	ldr	r2, [pc, #520]	@ (80025e8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e018      	b.n	800241c <HAL_PCD_EP_DB_Transmit+0x560>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d114      	bne.n	800241c <HAL_PCD_EP_DB_Transmit+0x560>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2250      	movs	r2, #80	@ 0x50
 80023f8:	5a9b      	ldrh	r3, [r3, r2]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	001a      	movs	r2, r3
 80023fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002400:	189b      	adds	r3, r3, r2
 8002402:	677b      	str	r3, [r7, #116]	@ 0x74
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	00da      	lsls	r2, r3, #3
 800240a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800240c:	18d3      	adds	r3, r2, r3
 800240e:	4a75      	ldr	r2, [pc, #468]	@ (80025e4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002410:	4694      	mov	ip, r2
 8002412:	4463      	add	r3, ip
 8002414:	673b      	str	r3, [r7, #112]	@ 0x70
 8002416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002418:	2200      	movs	r2, #0
 800241a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f004 ff35 	bl	8007294 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800242a:	1dbb      	adds	r3, r7, #6
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	4013      	ands	r3, r2
 8002434:	d000      	beq.n	8002438 <HAL_PCD_EP_DB_Transmit+0x57c>
 8002436:	e11e      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	001a      	movs	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	18d3      	adds	r3, r2, r3
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29a      	uxth	r2, r3
 800244a:	2088      	movs	r0, #136	@ 0x88
 800244c:	183b      	adds	r3, r7, r0
 800244e:	4967      	ldr	r1, [pc, #412]	@ (80025ec <HAL_PCD_EP_DB_Transmit+0x730>)
 8002450:	400a      	ands	r2, r1
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	001a      	movs	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	18d3      	adds	r3, r2, r3
 8002462:	183a      	adds	r2, r7, r0
 8002464:	8812      	ldrh	r2, [r2, #0]
 8002466:	4962      	ldr	r1, [pc, #392]	@ (80025f0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002468:	430a      	orrs	r2, r1
 800246a:	b292      	uxth	r2, r2
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	e102      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	01db      	lsls	r3, r3, #7
 8002478:	4013      	ands	r3, r2
 800247a:	d11a      	bne.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	001a      	movs	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29a      	uxth	r2, r3
 800248e:	204e      	movs	r0, #78	@ 0x4e
 8002490:	183b      	adds	r3, r7, r0
 8002492:	4956      	ldr	r1, [pc, #344]	@ (80025ec <HAL_PCD_EP_DB_Transmit+0x730>)
 8002494:	400a      	ands	r2, r1
 8002496:	801a      	strh	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	001a      	movs	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	18d3      	adds	r3, r2, r3
 80024a6:	183a      	adds	r2, r7, r0
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	4951      	ldr	r1, [pc, #324]	@ (80025f0 <HAL_PCD_EP_DB_Transmit+0x734>)
 80024ac:	430a      	orrs	r2, r1
 80024ae:	b292      	uxth	r2, r2
 80024b0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2224      	movs	r2, #36	@ 0x24
 80024b6:	5c9b      	ldrb	r3, [r3, r2]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d000      	beq.n	80024be <HAL_PCD_EP_DB_Transmit+0x602>
 80024bc:	e0db      	b.n	8002676 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	2186      	movs	r1, #134	@ 0x86
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	18d2      	adds	r2, r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	18d2      	adds	r2, r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d30c      	bcc.n	8002502 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	218c      	movs	r1, #140	@ 0x8c
 80024ee:	187a      	adds	r2, r7, r1
 80024f0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1ad2      	subs	r2, r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	621a      	str	r2, [r3, #32]
 8002500:	e01a      	b.n	8002538 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10a      	bne.n	8002520 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800250a:	2386      	movs	r3, #134	@ 0x86
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	228c      	movs	r2, #140	@ 0x8c
 8002512:	18ba      	adds	r2, r7, r2
 8002514:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2224      	movs	r2, #36	@ 0x24
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]
 800251e:	e00b      	b.n	8002538 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	228c      	movs	r2, #140	@ 0x8c
 8002526:	18ba      	adds	r2, r7, r2
 8002528:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2224      	movs	r2, #36	@ 0x24
 8002534:	2100      	movs	r1, #0
 8002536:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	657b      	str	r3, [r7, #84]	@ 0x54
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d000      	beq.n	8002548 <HAL_PCD_EP_DB_Transmit+0x68c>
 8002546:	e06e      	b.n	8002626 <HAL_PCD_EP_DB_Transmit+0x76a>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2250      	movs	r2, #80	@ 0x50
 8002554:	5a9b      	ldrh	r3, [r3, r2]
 8002556:	b29b      	uxth	r3, r3
 8002558:	001a      	movs	r2, r3
 800255a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800255c:	189b      	adds	r3, r3, r2
 800255e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	00da      	lsls	r2, r3, #3
 8002566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002568:	18d3      	adds	r3, r2, r3
 800256a:	4a1e      	ldr	r2, [pc, #120]	@ (80025e4 <HAL_PCD_EP_DB_Transmit+0x728>)
 800256c:	4694      	mov	ip, r2
 800256e:	4463      	add	r3, ip
 8002570:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	059b      	lsls	r3, r3, #22
 800257a:	0d9b      	lsrs	r3, r3, #22
 800257c:	b29a      	uxth	r2, r3
 800257e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	228c      	movs	r2, #140	@ 0x8c
 8002584:	18bb      	adds	r3, r7, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b3e      	cmp	r3, #62	@ 0x3e
 800258a:	d91a      	bls.n	80025c2 <HAL_PCD_EP_DB_Transmit+0x706>
 800258c:	18bb      	adds	r3, r7, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002594:	18bb      	adds	r3, r7, r2
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	221f      	movs	r2, #31
 800259a:	4013      	ands	r3, r2
 800259c:	d102      	bne.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800259e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025a0:	3b01      	subs	r3, #1
 80025a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	e04d      	b.n	800265e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80025c2:	238c      	movs	r3, #140	@ 0x8c
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d113      	bne.n	80025f4 <HAL_PCD_EP_DB_Transmit+0x738>
 80025cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4a05      	ldr	r2, [pc, #20]	@ (80025e8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025da:	801a      	strh	r2, [r3, #0]
 80025dc:	e03f      	b.n	800265e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	00000402 	.word	0x00000402
 80025e4:	00000406 	.word	0x00000406
 80025e8:	ffff8000 	.word	0xffff8000
 80025ec:	ffff8f8f 	.word	0xffff8f8f
 80025f0:	ffffc080 	.word	0xffffc080
 80025f4:	228c      	movs	r2, #140	@ 0x8c
 80025f6:	18bb      	adds	r3, r7, r2
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025fe:	18bb      	adds	r3, r7, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d002      	beq.n	800260e <HAL_PCD_EP_DB_Transmit+0x752>
 8002608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800260a:	3301      	adds	r3, #1
 800260c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800260e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29a      	uxth	r2, r3
 8002614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002616:	b29b      	uxth	r3, r3
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	b29b      	uxth	r3, r3
 800261c:	4313      	orrs	r3, r2
 800261e:	b29a      	uxth	r2, r3
 8002620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002622:	801a      	strh	r2, [r3, #0]
 8002624:	e01b      	b.n	800265e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d117      	bne.n	800265e <HAL_PCD_EP_DB_Transmit+0x7a2>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2250      	movs	r2, #80	@ 0x50
 8002634:	5a9b      	ldrh	r3, [r3, r2]
 8002636:	b29b      	uxth	r3, r3
 8002638:	001a      	movs	r2, r3
 800263a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263c:	189b      	adds	r3, r3, r2
 800263e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	00da      	lsls	r2, r3, #3
 8002646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002648:	18d3      	adds	r3, r2, r3
 800264a:	4a21      	ldr	r2, [pc, #132]	@ (80026d0 <HAL_PCD_EP_DB_Transmit+0x814>)
 800264c:	4694      	mov	ip, r2
 800264e:	4463      	add	r3, ip
 8002650:	653b      	str	r3, [r7, #80]	@ 0x50
 8002652:	238c      	movs	r3, #140	@ 0x8c
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b29a      	uxth	r2, r3
 800265a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800265c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6959      	ldr	r1, [r3, #20]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	895a      	ldrh	r2, [r3, #10]
 800266a:	238c      	movs	r3, #140	@ 0x8c
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f003 f823 	bl	80056bc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	001a      	movs	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	18d3      	adds	r3, r2, r3
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
 8002688:	2014      	movs	r0, #20
 800268a:	183b      	adds	r3, r7, r0
 800268c:	4911      	ldr	r1, [pc, #68]	@ (80026d4 <HAL_PCD_EP_DB_Transmit+0x818>)
 800268e:	400a      	ands	r2, r1
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	183b      	adds	r3, r7, r0
 8002694:	183a      	adds	r2, r7, r0
 8002696:	8812      	ldrh	r2, [r2, #0]
 8002698:	2110      	movs	r1, #16
 800269a:	404a      	eors	r2, r1
 800269c:	801a      	strh	r2, [r3, #0]
 800269e:	183b      	adds	r3, r7, r0
 80026a0:	183a      	adds	r2, r7, r0
 80026a2:	8812      	ldrh	r2, [r2, #0]
 80026a4:	2120      	movs	r1, #32
 80026a6:	404a      	eors	r2, r1
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	001a      	movs	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	18d3      	adds	r3, r2, r3
 80026b8:	183a      	adds	r2, r7, r0
 80026ba:	8812      	ldrh	r2, [r2, #0]
 80026bc:	4906      	ldr	r1, [pc, #24]	@ (80026d8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	b292      	uxth	r2, r2
 80026c2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b024      	add	sp, #144	@ 0x90
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	00000406 	.word	0x00000406
 80026d4:	ffff8fbf 	.word	0xffff8fbf
 80026d8:	ffff8080 	.word	0xffff8080

080026dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	0008      	movs	r0, r1
 80026e6:	0011      	movs	r1, r2
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	240a      	movs	r4, #10
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	1c02      	adds	r2, r0, #0
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	2308      	movs	r3, #8
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	1c0a      	adds	r2, r1, #0
 80026f8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026fa:	0021      	movs	r1, r4
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	2280      	movs	r2, #128	@ 0x80
 8002702:	4013      	ands	r3, r2
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800270a:	187b      	adds	r3, r7, r1
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	2207      	movs	r2, #7
 8002710:	4013      	ands	r3, r2
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	0013      	movs	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	189b      	adds	r3, r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	18d3      	adds	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e00b      	b.n	800273c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002724:	230a      	movs	r3, #10
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	0013      	movs	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	189b      	adds	r3, r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	3369      	adds	r3, #105	@ 0x69
 8002734:	33ff      	adds	r3, #255	@ 0xff
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	18d3      	adds	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800273c:	2308      	movs	r3, #8
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	b29a      	uxth	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	80da      	strh	r2, [r3, #6]
 8002754:	e00b      	b.n	800276e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2201      	movs	r2, #1
 800275a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	b29a      	uxth	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b29a      	uxth	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b007      	add	sp, #28
 8002776:	bd90      	pop	{r4, r7, pc}

08002778 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	23ba      	movs	r3, #186	@ 0xba
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	2101      	movs	r1, #1
 800278e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	23b8      	movs	r3, #184	@ 0xb8
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	2100      	movs	r1, #0
 8002798:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2254      	movs	r2, #84	@ 0x54
 800279e:	5a9b      	ldrh	r3, [r3, r2]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2201      	movs	r2, #1
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b299      	uxth	r1, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2254      	movs	r2, #84	@ 0x54
 80027ac:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2254      	movs	r2, #84	@ 0x54
 80027b2:	5a9b      	ldrh	r3, [r3, r2]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2202      	movs	r2, #2
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b299      	uxth	r1, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2254      	movs	r2, #84	@ 0x54
 80027c0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	000a      	movs	r2, r1
 80027d6:	1cfb      	adds	r3, r7, #3
 80027d8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b5b0      	push	{r4, r5, r7, lr}
 80027e6:	b08a      	sub	sp, #40	@ 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f000 fbaf 	bl	8002f56 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f8:	4bcf      	ldr	r3, [pc, #828]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	220c      	movs	r2, #12
 80027fe:	4013      	ands	r3, r2
 8002800:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002802:	4bcd      	ldr	r3, [pc, #820]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	025b      	lsls	r3, r3, #9
 800280a:	4013      	ands	r3, r2
 800280c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d100      	bne.n	800281a <HAL_RCC_OscConfig+0x36>
 8002818:	e07e      	b.n	8002918 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d007      	beq.n	8002830 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d112      	bne.n	800284c <HAL_RCC_OscConfig+0x68>
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	429a      	cmp	r2, r3
 800282e:	d10d      	bne.n	800284c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4bc1      	ldr	r3, [pc, #772]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	4013      	ands	r3, r2
 800283a:	d100      	bne.n	800283e <HAL_RCC_OscConfig+0x5a>
 800283c:	e06b      	b.n	8002916 <HAL_RCC_OscConfig+0x132>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d167      	bne.n	8002916 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f000 fb85 	bl	8002f56 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	025b      	lsls	r3, r3, #9
 8002854:	429a      	cmp	r2, r3
 8002856:	d107      	bne.n	8002868 <HAL_RCC_OscConfig+0x84>
 8002858:	4bb7      	ldr	r3, [pc, #732]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4bb6      	ldr	r3, [pc, #728]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 800285e:	2180      	movs	r1, #128	@ 0x80
 8002860:	0249      	lsls	r1, r1, #9
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e027      	b.n	80028b8 <HAL_RCC_OscConfig+0xd4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	23a0      	movs	r3, #160	@ 0xa0
 800286e:	02db      	lsls	r3, r3, #11
 8002870:	429a      	cmp	r2, r3
 8002872:	d10e      	bne.n	8002892 <HAL_RCC_OscConfig+0xae>
 8002874:	4bb0      	ldr	r3, [pc, #704]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4baf      	ldr	r3, [pc, #700]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 800287a:	2180      	movs	r1, #128	@ 0x80
 800287c:	02c9      	lsls	r1, r1, #11
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	4bad      	ldr	r3, [pc, #692]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4bac      	ldr	r3, [pc, #688]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002888:	2180      	movs	r1, #128	@ 0x80
 800288a:	0249      	lsls	r1, r1, #9
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e012      	b.n	80028b8 <HAL_RCC_OscConfig+0xd4>
 8002892:	4ba9      	ldr	r3, [pc, #676]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4ba8      	ldr	r3, [pc, #672]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002898:	49a8      	ldr	r1, [pc, #672]	@ (8002b3c <HAL_RCC_OscConfig+0x358>)
 800289a:	400a      	ands	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	4ba6      	ldr	r3, [pc, #664]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	025b      	lsls	r3, r3, #9
 80028a6:	4013      	ands	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4ba2      	ldr	r3, [pc, #648]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4ba1      	ldr	r3, [pc, #644]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80028b2:	49a3      	ldr	r1, [pc, #652]	@ (8002b40 <HAL_RCC_OscConfig+0x35c>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe f84c 	bl	800095c <HAL_GetTick>
 80028c4:	0003      	movs	r3, r0
 80028c6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028c8:	e009      	b.n	80028de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ca:	f7fe f847 	bl	800095c <HAL_GetTick>
 80028ce:	0002      	movs	r2, r0
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b64      	cmp	r3, #100	@ 0x64
 80028d6:	d902      	bls.n	80028de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	f000 fb3c 	bl	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028de:	4b96      	ldr	r3, [pc, #600]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	2380      	movs	r3, #128	@ 0x80
 80028e4:	029b      	lsls	r3, r3, #10
 80028e6:	4013      	ands	r3, r2
 80028e8:	d0ef      	beq.n	80028ca <HAL_RCC_OscConfig+0xe6>
 80028ea:	e015      	b.n	8002918 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7fe f836 	bl	800095c <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f6:	f7fe f831 	bl	800095c <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	@ 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e326      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002908:	4b8b      	ldr	r3, [pc, #556]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	4013      	ands	r3, r2
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x112>
 8002914:	e000      	b.n	8002918 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002916:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d100      	bne.n	8002924 <HAL_RCC_OscConfig+0x140>
 8002922:	e08b      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d13e      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1d0>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d13b      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800293c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2204      	movs	r2, #4
 8002942:	4013      	ands	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_RCC_OscConfig+0x16c>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e302      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b79      	ldr	r3, [pc, #484]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a7b      	ldr	r2, [pc, #492]	@ (8002b44 <HAL_RCC_OscConfig+0x360>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	4b75      	ldr	r3, [pc, #468]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002966:	4b74      	ldr	r3, [pc, #464]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2209      	movs	r2, #9
 800296c:	4393      	bics	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	4b71      	ldr	r3, [pc, #452]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002978:	f000 fc40 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 800297c:	0001      	movs	r1, r0
 800297e:	4b6e      	ldr	r3, [pc, #440]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	220f      	movs	r2, #15
 8002986:	4013      	ands	r3, r2
 8002988:	4a6f      	ldr	r2, [pc, #444]	@ (8002b48 <HAL_RCC_OscConfig+0x364>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	000a      	movs	r2, r1
 800298e:	40da      	lsrs	r2, r3
 8002990:	4b6e      	ldr	r3, [pc, #440]	@ (8002b4c <HAL_RCC_OscConfig+0x368>)
 8002992:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002994:	4b6e      	ldr	r3, [pc, #440]	@ (8002b50 <HAL_RCC_OscConfig+0x36c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2513      	movs	r5, #19
 800299a:	197c      	adds	r4, r7, r5
 800299c:	0018      	movs	r0, r3
 800299e:	f7fd ff97 	bl	80008d0 <HAL_InitTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80029a6:	197b      	adds	r3, r7, r5
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d046      	beq.n	8002a3c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80029ae:	197b      	adds	r3, r7, r5
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	e2d0      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d027      	beq.n	8002a0a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2209      	movs	r2, #9
 80029c0:	4393      	bics	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fd ffc6 	bl	800095c <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fd ffc1 	bl	800095c <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e2b6      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e8:	4b53      	ldr	r3, [pc, #332]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2204      	movs	r2, #4
 80029ee:	4013      	ands	r3, r2
 80029f0:	d0f1      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b51      	ldr	r3, [pc, #324]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a53      	ldr	r2, [pc, #332]	@ (8002b44 <HAL_RCC_OscConfig+0x360>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	021a      	lsls	r2, r3, #8
 8002a02:	4b4d      	ldr	r3, [pc, #308]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	e018      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	438a      	bics	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fd ffa1 	bl	800095c <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fd ff9c 	bl	800095c <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e291      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a32:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2204      	movs	r2, #4
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d1f1      	bne.n	8002a20 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2210      	movs	r2, #16
 8002a42:	4013      	ands	r3, r2
 8002a44:	d100      	bne.n	8002a48 <HAL_RCC_OscConfig+0x264>
 8002a46:	e0a1      	b.n	8002b8c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d140      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x282>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e277      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a66:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b54 <HAL_RCC_OscConfig+0x370>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a74:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	0a19      	lsrs	r1, r3, #8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	061a      	lsls	r2, r3, #24
 8002a88:	4b2b      	ldr	r3, [pc, #172]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	0b5b      	lsrs	r3, r3, #13
 8002a94:	3301      	adds	r3, #1
 8002a96:	2280      	movs	r2, #128	@ 0x80
 8002a98:	0212      	lsls	r2, r2, #8
 8002a9a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a9c:	4b26      	ldr	r3, [pc, #152]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	4928      	ldr	r1, [pc, #160]	@ (8002b48 <HAL_RCC_OscConfig+0x364>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002aac:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <HAL_RCC_OscConfig+0x368>)
 8002aae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002ab0:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <HAL_RCC_OscConfig+0x36c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2513      	movs	r5, #19
 8002ab6:	197c      	adds	r4, r7, r5
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fd ff09 	bl	80008d0 <HAL_InitTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002ac2:	197b      	adds	r3, r7, r5
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d060      	beq.n	8002b8c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002aca:	197b      	adds	r3, r7, r5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	e242      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d03f      	beq.n	8002b58 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ad8:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002ade:	2180      	movs	r1, #128	@ 0x80
 8002ae0:	0049      	lsls	r1, r1, #1
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fd ff39 	bl	800095c <HAL_GetTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af0:	f7fd ff34 	bl	800095c <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e229      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a10      	ldr	r2, [pc, #64]	@ (8002b54 <HAL_RCC_OscConfig+0x370>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b22:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	0a19      	lsrs	r1, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	061a      	lsls	r2, r3, #24
 8002b30:	4b01      	ldr	r3, [pc, #4]	@ (8002b38 <HAL_RCC_OscConfig+0x354>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	e029      	b.n	8002b8c <HAL_RCC_OscConfig+0x3a8>
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	fffeffff 	.word	0xfffeffff
 8002b40:	fffbffff 	.word	0xfffbffff
 8002b44:	ffffe0ff 	.word	0xffffe0ff
 8002b48:	080081f8 	.word	0x080081f8
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000004 	.word	0x20000004
 8002b54:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b58:	4bbd      	ldr	r3, [pc, #756]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4bbc      	ldr	r3, [pc, #752]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002b5e:	49bd      	ldr	r1, [pc, #756]	@ (8002e54 <HAL_RCC_OscConfig+0x670>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fd fefa 	bl	800095c <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6e:	f7fd fef5 	bl	800095c <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e1ea      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b80:	4bb3      	ldr	r3, [pc, #716]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2208      	movs	r2, #8
 8002b92:	4013      	ands	r3, r2
 8002b94:	d036      	beq.n	8002c04 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d019      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9e:	4bac      	ldr	r3, [pc, #688]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ba2:	4bab      	ldr	r3, [pc, #684]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fd fed7 	bl	800095c <HAL_GetTick>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7fd fed2 	bl	800095c <HAL_GetTick>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1c7      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bc6:	4ba2      	ldr	r3, [pc, #648]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d0f1      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x3d0>
 8002bd0:	e018      	b.n	8002c04 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd2:	4b9f      	ldr	r3, [pc, #636]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002bd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bd6:	4b9e      	ldr	r3, [pc, #632]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	438a      	bics	r2, r1
 8002bdc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fd febd 	bl	800095c <HAL_GetTick>
 8002be2:	0003      	movs	r3, r0
 8002be4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be8:	f7fd feb8 	bl	800095c <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1ad      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bfa:	4b95      	ldr	r3, [pc, #596]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bfe:	2202      	movs	r2, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	d1f1      	bne.n	8002be8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d100      	bne.n	8002c10 <HAL_RCC_OscConfig+0x42c>
 8002c0e:	e0ae      	b.n	8002d6e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c10:	2027      	movs	r0, #39	@ 0x27
 8002c12:	183b      	adds	r3, r7, r0
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c18:	4b8d      	ldr	r3, [pc, #564]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002c1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	055b      	lsls	r3, r3, #21
 8002c20:	4013      	ands	r3, r2
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b8a      	ldr	r3, [pc, #552]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c28:	4b89      	ldr	r3, [pc, #548]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002c2a:	2180      	movs	r1, #128	@ 0x80
 8002c2c:	0549      	lsls	r1, r1, #21
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	4b87      	ldr	r3, [pc, #540]	@ (8002e58 <HAL_RCC_OscConfig+0x674>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	@ 0x80
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	d11a      	bne.n	8002c7a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c44:	4b84      	ldr	r3, [pc, #528]	@ (8002e58 <HAL_RCC_OscConfig+0x674>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b83      	ldr	r3, [pc, #524]	@ (8002e58 <HAL_RCC_OscConfig+0x674>)
 8002c4a:	2180      	movs	r1, #128	@ 0x80
 8002c4c:	0049      	lsls	r1, r1, #1
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7fd fe83 	bl	800095c <HAL_GetTick>
 8002c56:	0003      	movs	r3, r0
 8002c58:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5c:	f7fd fe7e 	bl	800095c <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	@ 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e173      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e58 <HAL_RCC_OscConfig+0x674>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	2380      	movs	r3, #128	@ 0x80
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4b2>
 8002c86:	4b72      	ldr	r3, [pc, #456]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002c88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c8a:	4b71      	ldr	r3, [pc, #452]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002c8c:	2180      	movs	r1, #128	@ 0x80
 8002c8e:	0049      	lsls	r1, r1, #1
 8002c90:	430a      	orrs	r2, r1
 8002c92:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c94:	e031      	b.n	8002cfa <HAL_RCC_OscConfig+0x516>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4d4>
 8002c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca2:	4b6b      	ldr	r3, [pc, #428]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002ca4:	496b      	ldr	r1, [pc, #428]	@ (8002e54 <HAL_RCC_OscConfig+0x670>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002caa:	4b69      	ldr	r3, [pc, #420]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cae:	4b68      	ldr	r3, [pc, #416]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002cb0:	496a      	ldr	r1, [pc, #424]	@ (8002e5c <HAL_RCC_OscConfig+0x678>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cb6:	e020      	b.n	8002cfa <HAL_RCC_OscConfig+0x516>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	23a0      	movs	r3, #160	@ 0xa0
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d10e      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x4fe>
 8002cc4:	4b62      	ldr	r3, [pc, #392]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002cc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cc8:	4b61      	ldr	r3, [pc, #388]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002cca:	2180      	movs	r1, #128	@ 0x80
 8002ccc:	00c9      	lsls	r1, r1, #3
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002cd8:	2180      	movs	r1, #128	@ 0x80
 8002cda:	0049      	lsls	r1, r1, #1
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ce0:	e00b      	b.n	8002cfa <HAL_RCC_OscConfig+0x516>
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002ce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002ce8:	495a      	ldr	r1, [pc, #360]	@ (8002e54 <HAL_RCC_OscConfig+0x670>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cee:	4b58      	ldr	r3, [pc, #352]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002cf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cf2:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002cf4:	4959      	ldr	r1, [pc, #356]	@ (8002e5c <HAL_RCC_OscConfig+0x678>)
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d015      	beq.n	8002d2e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fe2b 	bl	800095c <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0a:	e009      	b.n	8002d20 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fd fe26 	bl	800095c <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	4a52      	ldr	r2, [pc, #328]	@ (8002e60 <HAL_RCC_OscConfig+0x67c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e11a      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d20:	4b4b      	ldr	r3, [pc, #300]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002d22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d0ef      	beq.n	8002d0c <HAL_RCC_OscConfig+0x528>
 8002d2c:	e014      	b.n	8002d58 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2e:	f7fd fe15 	bl	800095c <HAL_GetTick>
 8002d32:	0003      	movs	r3, r0
 8002d34:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d36:	e009      	b.n	8002d4c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fd fe10 	bl	800095c <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	4a47      	ldr	r2, [pc, #284]	@ (8002e60 <HAL_RCC_OscConfig+0x67c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e104      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d4c:	4b40      	ldr	r3, [pc, #256]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002d4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4013      	ands	r3, r2
 8002d56:	d1ef      	bne.n	8002d38 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d58:	2327      	movs	r3, #39	@ 0x27
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d66:	4b3a      	ldr	r3, [pc, #232]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002d68:	493e      	ldr	r1, [pc, #248]	@ (8002e64 <HAL_RCC_OscConfig+0x680>)
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2220      	movs	r2, #32
 8002d74:	4013      	ands	r3, r2
 8002d76:	d049      	beq.n	8002e0c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d026      	beq.n	8002dce <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d80:	4b33      	ldr	r3, [pc, #204]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	4b30      	ldr	r3, [pc, #192]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d90:	4b2f      	ldr	r3, [pc, #188]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	430a      	orrs	r2, r1
 8002d96:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d98:	4b33      	ldr	r3, [pc, #204]	@ (8002e68 <HAL_RCC_OscConfig+0x684>)
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	4b32      	ldr	r3, [pc, #200]	@ (8002e68 <HAL_RCC_OscConfig+0x684>)
 8002d9e:	2180      	movs	r1, #128	@ 0x80
 8002da0:	0189      	lsls	r1, r1, #6
 8002da2:	430a      	orrs	r2, r1
 8002da4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fd fdd9 	bl	800095c <HAL_GetTick>
 8002daa:	0003      	movs	r3, r0
 8002dac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db0:	f7fd fdd4 	bl	800095c <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0c9      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc2:	4b23      	ldr	r3, [pc, #140]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d0f1      	beq.n	8002db0 <HAL_RCC_OscConfig+0x5cc>
 8002dcc:	e01e      	b.n	8002e0c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002dce:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	4b23      	ldr	r3, [pc, #140]	@ (8002e68 <HAL_RCC_OscConfig+0x684>)
 8002ddc:	6a1a      	ldr	r2, [r3, #32]
 8002dde:	4b22      	ldr	r3, [pc, #136]	@ (8002e68 <HAL_RCC_OscConfig+0x684>)
 8002de0:	4922      	ldr	r1, [pc, #136]	@ (8002e6c <HAL_RCC_OscConfig+0x688>)
 8002de2:	400a      	ands	r2, r1
 8002de4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fd fdb9 	bl	800095c <HAL_GetTick>
 8002dea:	0003      	movs	r3, r0
 8002dec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002df0:	f7fd fdb4 	bl	800095c <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0a9      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e02:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2202      	movs	r2, #2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d1f1      	bne.n	8002df0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d100      	bne.n	8002e16 <HAL_RCC_OscConfig+0x632>
 8002e14:	e09e      	b.n	8002f54 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2b0c      	cmp	r3, #12
 8002e1a:	d100      	bne.n	8002e1e <HAL_RCC_OscConfig+0x63a>
 8002e1c:	e077      	b.n	8002f0e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d158      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_OscConfig+0x66c>)
 8002e2c:	4910      	ldr	r1, [pc, #64]	@ (8002e70 <HAL_RCC_OscConfig+0x68c>)
 8002e2e:	400a      	ands	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fd fd93 	bl	800095c <HAL_GetTick>
 8002e36:	0003      	movs	r3, r0
 8002e38:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e3a:	e01b      	b.n	8002e74 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fd fd8e 	bl	800095c <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d914      	bls.n	8002e74 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e083      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	40021000 	.word	0x40021000
 8002e54:	fffffeff 	.word	0xfffffeff
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	fffffbff 	.word	0xfffffbff
 8002e60:	00001388 	.word	0x00001388
 8002e64:	efffffff 	.word	0xefffffff
 8002e68:	40010000 	.word	0x40010000
 8002e6c:	ffffdfff 	.word	0xffffdfff
 8002e70:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e74:	4b3a      	ldr	r3, [pc, #232]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	049b      	lsls	r3, r3, #18
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d1dd      	bne.n	8002e3c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e80:	4b37      	ldr	r3, [pc, #220]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a37      	ldr	r2, [pc, #220]	@ (8002f64 <HAL_RCC_OscConfig+0x780>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	4b31      	ldr	r3, [pc, #196]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002ea6:	2180      	movs	r1, #128	@ 0x80
 8002ea8:	0449      	lsls	r1, r1, #17
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fd fd55 	bl	800095c <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fd fd50 	bl	800095c <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e045      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002eca:	4b25      	ldr	r3, [pc, #148]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	@ 0x80
 8002ed0:	049b      	lsls	r3, r3, #18
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x6d4>
 8002ed6:	e03d      	b.n	8002f54 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed8:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002ede:	4922      	ldr	r1, [pc, #136]	@ (8002f68 <HAL_RCC_OscConfig+0x784>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fd fd3a 	bl	800095c <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fd fd35 	bl	800095c <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e02a      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f00:	4b17      	ldr	r3, [pc, #92]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	049b      	lsls	r3, r3, #18
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x70a>
 8002f0c:	e022      	b.n	8002f54 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e01d      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <HAL_RCC_OscConfig+0x77c>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	2380      	movs	r3, #128	@ 0x80
 8002f24:	025b      	lsls	r3, r3, #9
 8002f26:	401a      	ands	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d10f      	bne.n	8002f50 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	23f0      	movs	r3, #240	@ 0xf0
 8002f34:	039b      	lsls	r3, r3, #14
 8002f36:	401a      	ands	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	23c0      	movs	r3, #192	@ 0xc0
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b00a      	add	sp, #40	@ 0x28
 8002f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	40021000 	.word	0x40021000
 8002f64:	ff02ffff 	.word	0xff02ffff
 8002f68:	feffffff 	.word	0xfeffffff

08002f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e128      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f80:	4b96      	ldr	r3, [pc, #600]	@ (80031dc <HAL_RCC_ClockConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2201      	movs	r2, #1
 8002f86:	4013      	ands	r3, r2
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d91e      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b93      	ldr	r3, [pc, #588]	@ (80031dc <HAL_RCC_ClockConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2201      	movs	r2, #1
 8002f94:	4393      	bics	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	4b90      	ldr	r3, [pc, #576]	@ (80031dc <HAL_RCC_ClockConfig+0x270>)
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fa0:	f7fd fcdc 	bl	800095c <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa8:	e009      	b.n	8002fbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002faa:	f7fd fcd7 	bl	800095c <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	4a8a      	ldr	r2, [pc, #552]	@ (80031e0 <HAL_RCC_ClockConfig+0x274>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e109      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b87      	ldr	r3, [pc, #540]	@ (80031dc <HAL_RCC_ClockConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1ee      	bne.n	8002faa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd6:	4b83      	ldr	r3, [pc, #524]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	22f0      	movs	r2, #240	@ 0xf0
 8002fdc:	4393      	bics	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	4b7f      	ldr	r3, [pc, #508]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x8a>
 8002ff4:	e089      	b.n	800310a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ffe:	4b79      	ldr	r3, [pc, #484]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	029b      	lsls	r3, r3, #10
 8003006:	4013      	ands	r3, r2
 8003008:	d120      	bne.n	800304c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0e1      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003016:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	@ 0x80
 800301c:	049b      	lsls	r3, r3, #18
 800301e:	4013      	ands	r3, r2
 8003020:	d114      	bne.n	800304c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0d5      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d106      	bne.n	800303c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800302e:	4b6d      	ldr	r3, [pc, #436]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	d109      	bne.n	800304c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0ca      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800303c:	4b69      	ldr	r3, [pc, #420]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	@ 0x80
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0c2      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304c:	4b65      	ldr	r3, [pc, #404]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2203      	movs	r2, #3
 8003052:	4393      	bics	r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4b62      	ldr	r3, [pc, #392]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7fd fc7c 	bl	800095c <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d111      	bne.n	8003094 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003070:	e009      	b.n	8003086 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003072:	f7fd fc73 	bl	800095c <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	4a58      	ldr	r2, [pc, #352]	@ (80031e0 <HAL_RCC_ClockConfig+0x274>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0a5      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003086:	4b57      	ldr	r3, [pc, #348]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	220c      	movs	r2, #12
 800308c:	4013      	ands	r3, r2
 800308e:	2b08      	cmp	r3, #8
 8003090:	d1ef      	bne.n	8003072 <HAL_RCC_ClockConfig+0x106>
 8003092:	e03a      	b.n	800310a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d111      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800309c:	e009      	b.n	80030b2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309e:	f7fd fc5d 	bl	800095c <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	4a4d      	ldr	r2, [pc, #308]	@ (80031e0 <HAL_RCC_ClockConfig+0x274>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e08f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b2:	4b4c      	ldr	r3, [pc, #304]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	220c      	movs	r2, #12
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d1ef      	bne.n	800309e <HAL_RCC_ClockConfig+0x132>
 80030be:	e024      	b.n	800310a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d11b      	bne.n	8003100 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030c8:	e009      	b.n	80030de <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ca:	f7fd fc47 	bl	800095c <HAL_GetTick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	4a42      	ldr	r2, [pc, #264]	@ (80031e0 <HAL_RCC_ClockConfig+0x274>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e079      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030de:	4b41      	ldr	r3, [pc, #260]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	220c      	movs	r2, #12
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d1ef      	bne.n	80030ca <HAL_RCC_ClockConfig+0x15e>
 80030ea:	e00e      	b.n	800310a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7fd fc36 	bl	800095c <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	4a3a      	ldr	r2, [pc, #232]	@ (80031e0 <HAL_RCC_ClockConfig+0x274>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e068      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003100:	4b38      	ldr	r3, [pc, #224]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	220c      	movs	r2, #12
 8003106:	4013      	ands	r3, r2
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310a:	4b34      	ldr	r3, [pc, #208]	@ (80031dc <HAL_RCC_ClockConfig+0x270>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2201      	movs	r2, #1
 8003110:	4013      	ands	r3, r2
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d21e      	bcs.n	8003156 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003118:	4b30      	ldr	r3, [pc, #192]	@ (80031dc <HAL_RCC_ClockConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4393      	bics	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	4b2e      	ldr	r3, [pc, #184]	@ (80031dc <HAL_RCC_ClockConfig+0x270>)
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800312a:	f7fd fc17 	bl	800095c <HAL_GetTick>
 800312e:	0003      	movs	r3, r0
 8003130:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	e009      	b.n	8003148 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fd fc12 	bl	800095c <HAL_GetTick>
 8003138:	0002      	movs	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	4a28      	ldr	r2, [pc, #160]	@ (80031e0 <HAL_RCC_ClockConfig+0x274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e044      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003148:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_RCC_ClockConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d1ee      	bne.n	8003134 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2204      	movs	r2, #4
 800315c:	4013      	ands	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003160:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a20      	ldr	r2, [pc, #128]	@ (80031e8 <HAL_RCC_ClockConfig+0x27c>)
 8003166:	4013      	ands	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2208      	movs	r2, #8
 800317a:	4013      	ands	r3, r2
 800317c:	d00a      	beq.n	8003194 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800317e:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <HAL_RCC_ClockConfig+0x280>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	00da      	lsls	r2, r3, #3
 800318e:	4b15      	ldr	r3, [pc, #84]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003194:	f000 f832 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003198:	0001      	movs	r1, r0
 800319a:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <HAL_RCC_ClockConfig+0x278>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	220f      	movs	r2, #15
 80031a2:	4013      	ands	r3, r2
 80031a4:	4a12      	ldr	r2, [pc, #72]	@ (80031f0 <HAL_RCC_ClockConfig+0x284>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	000a      	movs	r2, r1
 80031aa:	40da      	lsrs	r2, r3
 80031ac:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_RCC_ClockConfig+0x288>)
 80031ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_RCC_ClockConfig+0x28c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	250b      	movs	r5, #11
 80031b6:	197c      	adds	r4, r7, r5
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7fd fb89 	bl	80008d0 <HAL_InitTick>
 80031be:	0003      	movs	r3, r0
 80031c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80031c2:	197b      	adds	r3, r7, r5
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80031ca:	197b      	adds	r3, r7, r5
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bdb0      	pop	{r4, r5, r7, pc}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	40022000 	.word	0x40022000
 80031e0:	00001388 	.word	0x00001388
 80031e4:	40021000 	.word	0x40021000
 80031e8:	fffff8ff 	.word	0xfffff8ff
 80031ec:	ffffc7ff 	.word	0xffffc7ff
 80031f0:	080081f8 	.word	0x080081f8
 80031f4:	20000000 	.word	0x20000000
 80031f8:	20000004 	.word	0x20000004

080031fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	b5b0      	push	{r4, r5, r7, lr}
 80031fe:	b08e      	sub	sp, #56	@ 0x38
 8003200:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003202:	4b4c      	ldr	r3, [pc, #304]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x138>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800320a:	230c      	movs	r3, #12
 800320c:	4013      	ands	r3, r2
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d014      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x40>
 8003212:	d900      	bls.n	8003216 <HAL_RCC_GetSysClockFreq+0x1a>
 8003214:	e07b      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x112>
 8003216:	2b04      	cmp	r3, #4
 8003218:	d002      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x24>
 800321a:	2b08      	cmp	r3, #8
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x3a>
 800321e:	e076      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003220:	4b44      	ldr	r3, [pc, #272]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x138>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2210      	movs	r2, #16
 8003226:	4013      	ands	r3, r2
 8003228:	d002      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800322a:	4b43      	ldr	r3, [pc, #268]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x13c>)
 800322c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800322e:	e07c      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003230:	4b42      	ldr	r3, [pc, #264]	@ (800333c <HAL_RCC_GetSysClockFreq+0x140>)
 8003232:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003234:	e079      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003236:	4b42      	ldr	r3, [pc, #264]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x144>)
 8003238:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800323a:	e076      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800323c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323e:	0c9a      	lsrs	r2, r3, #18
 8003240:	230f      	movs	r3, #15
 8003242:	401a      	ands	r2, r3
 8003244:	4b3f      	ldr	r3, [pc, #252]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x148>)
 8003246:	5c9b      	ldrb	r3, [r3, r2]
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324c:	0d9a      	lsrs	r2, r3, #22
 800324e:	2303      	movs	r3, #3
 8003250:	4013      	ands	r3, r2
 8003252:	3301      	adds	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003256:	4b37      	ldr	r3, [pc, #220]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x138>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	025b      	lsls	r3, r3, #9
 800325e:	4013      	ands	r3, r2
 8003260:	d01a      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	4a35      	ldr	r2, [pc, #212]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x144>)
 800326c:	2300      	movs	r3, #0
 800326e:	69b8      	ldr	r0, [r7, #24]
 8003270:	69f9      	ldr	r1, [r7, #28]
 8003272:	f7fd f807 	bl	8000284 <__aeabi_lmul>
 8003276:	0002      	movs	r2, r0
 8003278:	000b      	movs	r3, r1
 800327a:	0010      	movs	r0, r2
 800327c:	0019      	movs	r1, r3
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f7fc ffdb 	bl	8000244 <__aeabi_uldivmod>
 800328e:	0002      	movs	r2, r0
 8003290:	000b      	movs	r3, r1
 8003292:	0013      	movs	r3, r2
 8003294:	637b      	str	r3, [r7, #52]	@ 0x34
 8003296:	e037      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003298:	4b26      	ldr	r3, [pc, #152]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x138>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	4013      	ands	r3, r2
 80032a0:	d01a      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	4a23      	ldr	r2, [pc, #140]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x13c>)
 80032ac:	2300      	movs	r3, #0
 80032ae:	68b8      	ldr	r0, [r7, #8]
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	f7fc ffe7 	bl	8000284 <__aeabi_lmul>
 80032b6:	0002      	movs	r2, r0
 80032b8:	000b      	movs	r3, r1
 80032ba:	0010      	movs	r0, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f7fc ffbb 	bl	8000244 <__aeabi_uldivmod>
 80032ce:	0002      	movs	r2, r0
 80032d0:	000b      	movs	r3, r1
 80032d2:	0013      	movs	r3, r2
 80032d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80032d6:	e017      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	0018      	movs	r0, r3
 80032dc:	2300      	movs	r3, #0
 80032de:	0019      	movs	r1, r3
 80032e0:	4a16      	ldr	r2, [pc, #88]	@ (800333c <HAL_RCC_GetSysClockFreq+0x140>)
 80032e2:	2300      	movs	r3, #0
 80032e4:	f7fc ffce 	bl	8000284 <__aeabi_lmul>
 80032e8:	0002      	movs	r2, r0
 80032ea:	000b      	movs	r3, r1
 80032ec:	0010      	movs	r0, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	001c      	movs	r4, r3
 80032f4:	2300      	movs	r3, #0
 80032f6:	001d      	movs	r5, r3
 80032f8:	0022      	movs	r2, r4
 80032fa:	002b      	movs	r3, r5
 80032fc:	f7fc ffa2 	bl	8000244 <__aeabi_uldivmod>
 8003300:	0002      	movs	r2, r0
 8003302:	000b      	movs	r3, r1
 8003304:	0013      	movs	r3, r2
 8003306:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800330c:	e00d      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800330e:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x138>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	0b5b      	lsrs	r3, r3, #13
 8003314:	2207      	movs	r2, #7
 8003316:	4013      	ands	r3, r2
 8003318:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	3301      	adds	r3, #1
 800331e:	2280      	movs	r2, #128	@ 0x80
 8003320:	0212      	lsls	r2, r2, #8
 8003322:	409a      	lsls	r2, r3
 8003324:	0013      	movs	r3, r2
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003328:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b00e      	add	sp, #56	@ 0x38
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	003d0900 	.word	0x003d0900
 800333c:	00f42400 	.word	0x00f42400
 8003340:	007a1200 	.word	0x007a1200
 8003344:	08008208 	.word	0x08008208

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003350:	2317      	movs	r3, #23
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2220      	movs	r2, #32
 800335e:	4013      	ands	r3, r2
 8003360:	d106      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4013      	ands	r3, r2
 800336c:	d100      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800336e:	e104      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003370:	4bb1      	ldr	r3, [pc, #708]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003374:	2380      	movs	r3, #128	@ 0x80
 8003376:	055b      	lsls	r3, r3, #21
 8003378:	4013      	ands	r3, r2
 800337a:	d10a      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337c:	4bae      	ldr	r3, [pc, #696]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800337e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003380:	4bad      	ldr	r3, [pc, #692]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003382:	2180      	movs	r1, #128	@ 0x80
 8003384:	0549      	lsls	r1, r1, #21
 8003386:	430a      	orrs	r2, r1
 8003388:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800338a:	2317      	movs	r3, #23
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4baa      	ldr	r3, [pc, #680]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4013      	ands	r3, r2
 800339c:	d11a      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339e:	4ba7      	ldr	r3, [pc, #668]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4ba6      	ldr	r3, [pc, #664]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a4:	2180      	movs	r1, #128	@ 0x80
 80033a6:	0049      	lsls	r1, r1, #1
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ac:	f7fd fad6 	bl	800095c <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fd fad1 	bl	800095c <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	@ 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e133      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b9c      	ldr	r3, [pc, #624]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033d4:	4b98      	ldr	r3, [pc, #608]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	23c0      	movs	r3, #192	@ 0xc0
 80033da:	039b      	lsls	r3, r3, #14
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	23c0      	movs	r3, #192	@ 0xc0
 80033e6:	039b      	lsls	r3, r3, #14
 80033e8:	4013      	ands	r3, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d107      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	23c0      	movs	r3, #192	@ 0xc0
 80033f6:	039b      	lsls	r3, r3, #14
 80033f8:	4013      	ands	r3, r2
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d013      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	23c0      	movs	r3, #192	@ 0xc0
 8003406:	029b      	lsls	r3, r3, #10
 8003408:	401a      	ands	r2, r3
 800340a:	23c0      	movs	r3, #192	@ 0xc0
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	429a      	cmp	r2, r3
 8003410:	d10a      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003412:	4b89      	ldr	r3, [pc, #548]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	2380      	movs	r3, #128	@ 0x80
 8003418:	029b      	lsls	r3, r3, #10
 800341a:	401a      	ands	r2, r3
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	429a      	cmp	r2, r3
 8003422:	d101      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e103      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003428:	4b83      	ldr	r3, [pc, #524]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800342a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800342c:	23c0      	movs	r3, #192	@ 0xc0
 800342e:	029b      	lsls	r3, r3, #10
 8003430:	4013      	ands	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d049      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x186>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	23c0      	movs	r3, #192	@ 0xc0
 8003440:	029b      	lsls	r3, r3, #10
 8003442:	4013      	ands	r3, r2
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	429a      	cmp	r2, r3
 8003448:	d004      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2220      	movs	r2, #32
 8003450:	4013      	ands	r3, r2
 8003452:	d10d      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	23c0      	movs	r3, #192	@ 0xc0
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	4013      	ands	r3, r2
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d034      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	4013      	ands	r3, r2
 800346e:	d02e      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003470:	4b71      	ldr	r3, [pc, #452]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003474:	4a72      	ldr	r2, [pc, #456]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003476:	4013      	ands	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347a:	4b6f      	ldr	r3, [pc, #444]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800347c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800347e:	4b6e      	ldr	r3, [pc, #440]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003480:	2180      	movs	r1, #128	@ 0x80
 8003482:	0309      	lsls	r1, r1, #12
 8003484:	430a      	orrs	r2, r1
 8003486:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003488:	4b6b      	ldr	r3, [pc, #428]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800348c:	4b6a      	ldr	r3, [pc, #424]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348e:	496d      	ldr	r1, [pc, #436]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003490:	400a      	ands	r2, r1
 8003492:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003494:	4b68      	ldr	r3, [pc, #416]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	d014      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fd fa5a 	bl	800095c <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ac:	e009      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fd fa55 	bl	800095c <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	4a63      	ldr	r2, [pc, #396]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0b6      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d0ef      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	2380      	movs	r3, #128	@ 0x80
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4013      	ands	r3, r2
 80034d8:	d01f      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	23c0      	movs	r3, #192	@ 0xc0
 80034e0:	029b      	lsls	r3, r3, #10
 80034e2:	401a      	ands	r2, r3
 80034e4:	23c0      	movs	r3, #192	@ 0xc0
 80034e6:	029b      	lsls	r3, r3, #10
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d10c      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80034ec:	4b52      	ldr	r3, [pc, #328]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a56      	ldr	r2, [pc, #344]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	23c0      	movs	r3, #192	@ 0xc0
 80034fc:	039b      	lsls	r3, r3, #14
 80034fe:	401a      	ands	r2, r3
 8003500:	4b4d      	ldr	r3, [pc, #308]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	4b4c      	ldr	r3, [pc, #304]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003508:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	23c0      	movs	r3, #192	@ 0xc0
 8003510:	029b      	lsls	r3, r3, #10
 8003512:	401a      	ands	r2, r3
 8003514:	4b48      	ldr	r3, [pc, #288]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003516:	430a      	orrs	r2, r1
 8003518:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2220      	movs	r2, #32
 8003520:	4013      	ands	r3, r2
 8003522:	d01f      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	23c0      	movs	r3, #192	@ 0xc0
 800352a:	029b      	lsls	r3, r3, #10
 800352c:	401a      	ands	r2, r3
 800352e:	23c0      	movs	r3, #192	@ 0xc0
 8003530:	029b      	lsls	r3, r3, #10
 8003532:	429a      	cmp	r2, r3
 8003534:	d10c      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003536:	4b40      	ldr	r3, [pc, #256]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a44      	ldr	r2, [pc, #272]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800353c:	4013      	ands	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	23c0      	movs	r3, #192	@ 0xc0
 8003546:	039b      	lsls	r3, r3, #14
 8003548:	401a      	ands	r2, r3
 800354a:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003552:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	23c0      	movs	r3, #192	@ 0xc0
 800355a:	029b      	lsls	r3, r3, #10
 800355c:	401a      	ands	r2, r3
 800355e:	4b36      	ldr	r3, [pc, #216]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003560:	430a      	orrs	r2, r1
 8003562:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003564:	2317      	movs	r3, #23
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356e:	4b32      	ldr	r3, [pc, #200]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003572:	4b31      	ldr	r3, [pc, #196]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003574:	4936      	ldr	r1, [pc, #216]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003576:	400a      	ands	r2, r1
 8003578:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003584:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003588:	2203      	movs	r2, #3
 800358a:	4393      	bics	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003594:	430a      	orrs	r2, r1
 8003596:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2202      	movs	r2, #2
 800359e:	4013      	ands	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a2:	4b25      	ldr	r3, [pc, #148]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a6:	220c      	movs	r2, #12
 80035a8:	4393      	bics	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	4b21      	ldr	r3, [pc, #132]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035b2:	430a      	orrs	r2, r1
 80035b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c4:	4a23      	ldr	r2, [pc, #140]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2208      	movs	r2, #8
 80035da:	4013      	ands	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035de:	4b16      	ldr	r3, [pc, #88]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699a      	ldr	r2, [r3, #24]
 80035ec:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035ee:	430a      	orrs	r2, r1
 80035f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2240      	movs	r2, #64	@ 0x40
 80035f8:	4013      	ands	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003600:	4a16      	ldr	r2, [pc, #88]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003602:	4013      	ands	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1a      	ldr	r2, [r3, #32]
 800360a:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800360c:	430a      	orrs	r2, r1
 800360e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2280      	movs	r2, #128	@ 0x80
 8003616:	4013      	ands	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361e:	4a10      	ldr	r2, [pc, #64]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	4b03      	ldr	r3, [pc, #12]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800362a:	430a      	orrs	r2, r1
 800362c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b006      	add	sp, #24
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
 8003640:	fffcffff 	.word	0xfffcffff
 8003644:	fff7ffff 	.word	0xfff7ffff
 8003648:	00001388 	.word	0x00001388
 800364c:	ffcfffff 	.word	0xffcfffff
 8003650:	efffffff 	.word	0xefffffff
 8003654:	fffff3ff 	.word	0xfffff3ff
 8003658:	ffffcfff 	.word	0xffffcfff
 800365c:	fbffffff 	.word	0xfbffffff
 8003660:	fff3ffff 	.word	0xfff3ffff

08003664 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2244      	movs	r2, #68	@ 0x44
 8003670:	2100      	movs	r1, #0
 8003672:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <USB_EnableGlobalInt+0x28>)
 8003676:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	b299      	uxth	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2240      	movs	r2, #64	@ 0x40
 8003680:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	0000bf80 	.word	0x0000bf80

08003690 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003698:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <USB_DisableGlobalInt+0x30>)
 800369a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2240      	movs	r2, #64	@ 0x40
 80036a0:	5a9b      	ldrh	r3, [r3, r2]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	b292      	uxth	r2, r2
 80036a8:	43d2      	mvns	r2, r2
 80036aa:	b292      	uxth	r2, r2
 80036ac:	4013      	ands	r3, r2
 80036ae:	b299      	uxth	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2240      	movs	r2, #64	@ 0x40
 80036b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	0000bf80 	.word	0x0000bf80

080036c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036c4:	b084      	sub	sp, #16
 80036c6:	b590      	push	{r4, r7, lr}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	2004      	movs	r0, #4
 80036d0:	2410      	movs	r4, #16
 80036d2:	1900      	adds	r0, r0, r4
 80036d4:	2408      	movs	r4, #8
 80036d6:	46a4      	mov	ip, r4
 80036d8:	44bc      	add	ip, r7
 80036da:	4460      	add	r0, ip
 80036dc:	6001      	str	r1, [r0, #0]
 80036de:	6042      	str	r2, [r0, #4]
 80036e0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2240      	movs	r2, #64	@ 0x40
 80036e6:	2101      	movs	r1, #1
 80036e8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2240      	movs	r2, #64	@ 0x40
 80036ee:	2100      	movs	r1, #0
 80036f0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2244      	movs	r2, #68	@ 0x44
 80036f6:	2100      	movs	r1, #0
 80036f8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2250      	movs	r2, #80	@ 0x50
 80036fe:	2100      	movs	r1, #0
 8003700:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b003      	add	sp, #12
 800370a:	bc90      	pop	{r4, r7}
 800370c:	bc08      	pop	{r3}
 800370e:	b004      	add	sp, #16
 8003710:	4718      	bx	r3
	...

08003714 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b09c      	sub	sp, #112	@ 0x70
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800371e:	236f      	movs	r3, #111	@ 0x6f
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29a      	uxth	r2, r3
 8003734:	236c      	movs	r3, #108	@ 0x6c
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	49a3      	ldr	r1, [pc, #652]	@ (80039c8 <USB_ActivateEndpoint+0x2b4>)
 800373a:	400a      	ands	r2, r1
 800373c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	78db      	ldrb	r3, [r3, #3]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d017      	beq.n	8003776 <USB_ActivateEndpoint+0x62>
 8003746:	dc28      	bgt.n	800379a <USB_ActivateEndpoint+0x86>
 8003748:	2b02      	cmp	r3, #2
 800374a:	d00e      	beq.n	800376a <USB_ActivateEndpoint+0x56>
 800374c:	dc25      	bgt.n	800379a <USB_ActivateEndpoint+0x86>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <USB_ActivateEndpoint+0x44>
 8003752:	2b01      	cmp	r3, #1
 8003754:	d018      	beq.n	8003788 <USB_ActivateEndpoint+0x74>
 8003756:	e020      	b.n	800379a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003758:	226c      	movs	r2, #108	@ 0x6c
 800375a:	18bb      	adds	r3, r7, r2
 800375c:	18ba      	adds	r2, r7, r2
 800375e:	8812      	ldrh	r2, [r2, #0]
 8003760:	2180      	movs	r1, #128	@ 0x80
 8003762:	0089      	lsls	r1, r1, #2
 8003764:	430a      	orrs	r2, r1
 8003766:	801a      	strh	r2, [r3, #0]
      break;
 8003768:	e01c      	b.n	80037a4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800376a:	226c      	movs	r2, #108	@ 0x6c
 800376c:	18bb      	adds	r3, r7, r2
 800376e:	18ba      	adds	r2, r7, r2
 8003770:	8812      	ldrh	r2, [r2, #0]
 8003772:	801a      	strh	r2, [r3, #0]
      break;
 8003774:	e016      	b.n	80037a4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003776:	226c      	movs	r2, #108	@ 0x6c
 8003778:	18bb      	adds	r3, r7, r2
 800377a:	18ba      	adds	r2, r7, r2
 800377c:	8812      	ldrh	r2, [r2, #0]
 800377e:	21c0      	movs	r1, #192	@ 0xc0
 8003780:	00c9      	lsls	r1, r1, #3
 8003782:	430a      	orrs	r2, r1
 8003784:	801a      	strh	r2, [r3, #0]
      break;
 8003786:	e00d      	b.n	80037a4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003788:	226c      	movs	r2, #108	@ 0x6c
 800378a:	18bb      	adds	r3, r7, r2
 800378c:	18ba      	adds	r2, r7, r2
 800378e:	8812      	ldrh	r2, [r2, #0]
 8003790:	2180      	movs	r1, #128	@ 0x80
 8003792:	00c9      	lsls	r1, r1, #3
 8003794:	430a      	orrs	r2, r1
 8003796:	801a      	strh	r2, [r3, #0]
      break;
 8003798:	e004      	b.n	80037a4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800379a:	236f      	movs	r3, #111	@ 0x6f
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
      break;
 80037a2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	18d3      	adds	r3, r2, r3
 80037ae:	226c      	movs	r2, #108	@ 0x6c
 80037b0:	18ba      	adds	r2, r7, r2
 80037b2:	8812      	ldrh	r2, [r2, #0]
 80037b4:	4985      	ldr	r1, [pc, #532]	@ (80039cc <USB_ActivateEndpoint+0x2b8>)
 80037b6:	430a      	orrs	r2, r1
 80037b8:	b292      	uxth	r2, r2
 80037ba:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	18d3      	adds	r3, r2, r3
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	b21b      	sxth	r3, r3
 80037cc:	4a80      	ldr	r2, [pc, #512]	@ (80039d0 <USB_ActivateEndpoint+0x2bc>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	b21a      	sxth	r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	4313      	orrs	r3, r2
 80037da:	b21a      	sxth	r2, r3
 80037dc:	2166      	movs	r1, #102	@ 0x66
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	801a      	strh	r2, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	18d3      	adds	r3, r2, r3
 80037ec:	187a      	adds	r2, r7, r1
 80037ee:	8812      	ldrh	r2, [r2, #0]
 80037f0:	4976      	ldr	r1, [pc, #472]	@ (80039cc <USB_ActivateEndpoint+0x2b8>)
 80037f2:	430a      	orrs	r2, r1
 80037f4:	b292      	uxth	r2, r2
 80037f6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	7b1b      	ldrb	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d000      	beq.n	8003802 <USB_ActivateEndpoint+0xee>
 8003800:	e178      	b.n	8003af4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	785b      	ldrb	r3, [r3, #1]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d100      	bne.n	800380c <USB_ActivateEndpoint+0xf8>
 800380a:	e07a      	b.n	8003902 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2250      	movs	r2, #80	@ 0x50
 8003814:	5a9b      	ldrh	r3, [r3, r2]
 8003816:	b29b      	uxth	r3, r3
 8003818:	001a      	movs	r2, r3
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	189b      	adds	r3, r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	00da      	lsls	r2, r3, #3
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	2280      	movs	r2, #128	@ 0x80
 800382c:	00d2      	lsls	r2, r2, #3
 800382e:	4694      	mov	ip, r2
 8003830:	4463      	add	r3, ip
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	88db      	ldrh	r3, [r3, #6]
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	18db      	adds	r3, r3, r3
 800383e:	b29a      	uxth	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	18d2      	adds	r2, r2, r3
 800384e:	2112      	movs	r1, #18
 8003850:	187b      	adds	r3, r7, r1
 8003852:	8812      	ldrh	r2, [r2, #0]
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	187b      	adds	r3, r7, r1
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	2240      	movs	r2, #64	@ 0x40
 800385c:	4013      	ands	r3, r2
 800385e:	d016      	beq.n	800388e <USB_ActivateEndpoint+0x17a>
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29a      	uxth	r2, r3
 800386e:	2010      	movs	r0, #16
 8003870:	183b      	adds	r3, r7, r0
 8003872:	4957      	ldr	r1, [pc, #348]	@ (80039d0 <USB_ActivateEndpoint+0x2bc>)
 8003874:	400a      	ands	r2, r1
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	18d3      	adds	r3, r2, r3
 8003882:	183a      	adds	r2, r7, r0
 8003884:	8812      	ldrh	r2, [r2, #0]
 8003886:	4953      	ldr	r1, [pc, #332]	@ (80039d4 <USB_ActivateEndpoint+0x2c0>)
 8003888:	430a      	orrs	r2, r1
 800388a:	b292      	uxth	r2, r2
 800388c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	78db      	ldrb	r3, [r3, #3]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d01d      	beq.n	80038d2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	18d3      	adds	r3, r2, r3
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	200c      	movs	r0, #12
 80038a6:	183b      	adds	r3, r7, r0
 80038a8:	494b      	ldr	r1, [pc, #300]	@ (80039d8 <USB_ActivateEndpoint+0x2c4>)
 80038aa:	400a      	ands	r2, r1
 80038ac:	801a      	strh	r2, [r3, #0]
 80038ae:	183b      	adds	r3, r7, r0
 80038b0:	183a      	adds	r2, r7, r0
 80038b2:	8812      	ldrh	r2, [r2, #0]
 80038b4:	2120      	movs	r1, #32
 80038b6:	404a      	eors	r2, r1
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	18d3      	adds	r3, r2, r3
 80038c4:	183a      	adds	r2, r7, r0
 80038c6:	8812      	ldrh	r2, [r2, #0]
 80038c8:	4940      	ldr	r1, [pc, #256]	@ (80039cc <USB_ActivateEndpoint+0x2b8>)
 80038ca:	430a      	orrs	r2, r1
 80038cc:	b292      	uxth	r2, r2
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	e2b4      	b.n	8003e3c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	18d3      	adds	r3, r2, r3
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	200e      	movs	r0, #14
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	493c      	ldr	r1, [pc, #240]	@ (80039d8 <USB_ActivateEndpoint+0x2c4>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	18d3      	adds	r3, r2, r3
 80038f4:	183a      	adds	r2, r7, r0
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	4934      	ldr	r1, [pc, #208]	@ (80039cc <USB_ActivateEndpoint+0x2b8>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	b292      	uxth	r2, r2
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	e29c      	b.n	8003e3c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	633b      	str	r3, [r7, #48]	@ 0x30
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2250      	movs	r2, #80	@ 0x50
 800390a:	5a9b      	ldrh	r3, [r3, r2]
 800390c:	b29b      	uxth	r3, r3
 800390e:	001a      	movs	r2, r3
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	189b      	adds	r3, r3, r2
 8003914:	633b      	str	r3, [r7, #48]	@ 0x30
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	00da      	lsls	r2, r3, #3
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	18d3      	adds	r3, r2, r3
 8003920:	4a2e      	ldr	r2, [pc, #184]	@ (80039dc <USB_ActivateEndpoint+0x2c8>)
 8003922:	4694      	mov	ip, r2
 8003924:	4463      	add	r3, ip
 8003926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	88db      	ldrh	r3, [r3, #6]
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	b29b      	uxth	r3, r3
 8003930:	18db      	adds	r3, r3, r3
 8003932:	b29a      	uxth	r2, r3
 8003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003936:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2250      	movs	r2, #80	@ 0x50
 8003940:	5a9b      	ldrh	r3, [r3, r2]
 8003942:	b29b      	uxth	r3, r3
 8003944:	001a      	movs	r2, r3
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	189b      	adds	r3, r3, r2
 800394a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	00da      	lsls	r2, r3, #3
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	18d3      	adds	r3, r2, r3
 8003956:	4a22      	ldr	r2, [pc, #136]	@ (80039e0 <USB_ActivateEndpoint+0x2cc>)
 8003958:	4694      	mov	ip, r2
 800395a:	4463      	add	r3, ip
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	059b      	lsls	r3, r3, #22
 8003966:	0d9b      	lsrs	r3, r3, #22
 8003968:	b29a      	uxth	r2, r3
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	801a      	strh	r2, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b3e      	cmp	r3, #62	@ 0x3e
 8003974:	d91a      	bls.n	80039ac <USB_ActivateEndpoint+0x298>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	221f      	movs	r2, #31
 8003984:	4013      	ands	r3, r2
 8003986:	d102      	bne.n	800398e <USB_ActivateEndpoint+0x27a>
 8003988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800398a:	3b01      	subs	r3, #1
 800398c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29a      	uxth	r2, r3
 8003994:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003996:	b29b      	uxth	r3, r3
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	b29b      	uxth	r3, r3
 800399c:	4313      	orrs	r3, r2
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4a10      	ldr	r2, [pc, #64]	@ (80039e4 <USB_ActivateEndpoint+0x2d0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	801a      	strh	r2, [r3, #0]
 80039aa:	e034      	b.n	8003a16 <USB_ActivateEndpoint+0x302>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d119      	bne.n	80039e8 <USB_ActivateEndpoint+0x2d4>
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <USB_ActivateEndpoint+0x2d0>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	e027      	b.n	8003a16 <USB_ActivateEndpoint+0x302>
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	ffff898f 	.word	0xffff898f
 80039cc:	ffff8080 	.word	0xffff8080
 80039d0:	ffff8f8f 	.word	0xffff8f8f
 80039d4:	ffff80c0 	.word	0xffff80c0
 80039d8:	ffff8fbf 	.word	0xffff8fbf
 80039dc:	00000404 	.word	0x00000404
 80039e0:	00000406 	.word	0x00000406
 80039e4:	ffff8000 	.word	0xffff8000
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2201      	movs	r2, #1
 80039f6:	4013      	ands	r3, r2
 80039f8:	d002      	beq.n	8003a00 <USB_ActivateEndpoint+0x2ec>
 80039fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039fc:	3301      	adds	r3, #1
 80039fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	18d2      	adds	r2, r2, r3
 8003a20:	2122      	movs	r1, #34	@ 0x22
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	8812      	ldrh	r2, [r2, #0]
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	187b      	adds	r3, r7, r1
 8003a2a:	881a      	ldrh	r2, [r3, #0]
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	01db      	lsls	r3, r3, #7
 8003a30:	4013      	ands	r3, r2
 8003a32:	d016      	beq.n	8003a62 <USB_ActivateEndpoint+0x34e>
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	18d3      	adds	r3, r2, r3
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	2020      	movs	r0, #32
 8003a44:	183b      	adds	r3, r7, r0
 8003a46:	49dd      	ldr	r1, [pc, #884]	@ (8003dbc <USB_ActivateEndpoint+0x6a8>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	18d3      	adds	r3, r2, r3
 8003a56:	183a      	adds	r2, r7, r0
 8003a58:	8812      	ldrh	r2, [r2, #0]
 8003a5a:	49d9      	ldr	r1, [pc, #868]	@ (8003dc0 <USB_ActivateEndpoint+0x6ac>)
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	b292      	uxth	r2, r2
 8003a60:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d125      	bne.n	8003ab6 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	18d3      	adds	r3, r2, r3
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	201c      	movs	r0, #28
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	49d1      	ldr	r1, [pc, #836]	@ (8003dc4 <USB_ActivateEndpoint+0x6b0>)
 8003a7e:	400a      	ands	r2, r1
 8003a80:	801a      	strh	r2, [r3, #0]
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	183a      	adds	r2, r7, r0
 8003a86:	8812      	ldrh	r2, [r2, #0]
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	0149      	lsls	r1, r1, #5
 8003a8c:	404a      	eors	r2, r1
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	183b      	adds	r3, r7, r0
 8003a92:	183a      	adds	r2, r7, r0
 8003a94:	8812      	ldrh	r2, [r2, #0]
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	0189      	lsls	r1, r1, #6
 8003a9a:	404a      	eors	r2, r1
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	18d3      	adds	r3, r2, r3
 8003aa8:	183a      	adds	r2, r7, r0
 8003aaa:	8812      	ldrh	r2, [r2, #0]
 8003aac:	49c6      	ldr	r1, [pc, #792]	@ (8003dc8 <USB_ActivateEndpoint+0x6b4>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	e1c2      	b.n	8003e3c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	201e      	movs	r0, #30
 8003ac6:	183b      	adds	r3, r7, r0
 8003ac8:	49be      	ldr	r1, [pc, #760]	@ (8003dc4 <USB_ActivateEndpoint+0x6b0>)
 8003aca:	400a      	ands	r2, r1
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	183b      	adds	r3, r7, r0
 8003ad0:	183a      	adds	r2, r7, r0
 8003ad2:	8812      	ldrh	r2, [r2, #0]
 8003ad4:	2180      	movs	r1, #128	@ 0x80
 8003ad6:	0189      	lsls	r1, r1, #6
 8003ad8:	404a      	eors	r2, r1
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	18d3      	adds	r3, r2, r3
 8003ae6:	183a      	adds	r2, r7, r0
 8003ae8:	8812      	ldrh	r2, [r2, #0]
 8003aea:	49b7      	ldr	r1, [pc, #732]	@ (8003dc8 <USB_ActivateEndpoint+0x6b4>)
 8003aec:	430a      	orrs	r2, r1
 8003aee:	b292      	uxth	r2, r2
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	e1a3      	b.n	8003e3c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	78db      	ldrb	r3, [r3, #3]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d117      	bne.n	8003b2c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	2062      	movs	r0, #98	@ 0x62
 8003b0c:	183b      	adds	r3, r7, r0
 8003b0e:	49ab      	ldr	r1, [pc, #684]	@ (8003dbc <USB_ActivateEndpoint+0x6a8>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	18d3      	adds	r3, r2, r3
 8003b1e:	183a      	adds	r2, r7, r0
 8003b20:	8812      	ldrh	r2, [r2, #0]
 8003b22:	49aa      	ldr	r1, [pc, #680]	@ (8003dcc <USB_ActivateEndpoint+0x6b8>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	b292      	uxth	r2, r2
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	e016      	b.n	8003b5a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	18d3      	adds	r3, r2, r3
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	2064      	movs	r0, #100	@ 0x64
 8003b3c:	183b      	adds	r3, r7, r0
 8003b3e:	49a4      	ldr	r1, [pc, #656]	@ (8003dd0 <USB_ActivateEndpoint+0x6bc>)
 8003b40:	400a      	ands	r2, r1
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	183a      	adds	r2, r7, r0
 8003b50:	8812      	ldrh	r2, [r2, #0]
 8003b52:	499d      	ldr	r1, [pc, #628]	@ (8003dc8 <USB_ActivateEndpoint+0x6b4>)
 8003b54:	430a      	orrs	r2, r1
 8003b56:	b292      	uxth	r2, r2
 8003b58:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2250      	movs	r2, #80	@ 0x50
 8003b62:	5a9b      	ldrh	r3, [r3, r2]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	001a      	movs	r2, r3
 8003b68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	00da      	lsls	r2, r3, #3
 8003b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	2280      	movs	r2, #128	@ 0x80
 8003b7a:	00d2      	lsls	r2, r2, #3
 8003b7c:	4694      	mov	ip, r2
 8003b7e:	4463      	add	r3, ip
 8003b80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	891b      	ldrh	r3, [r3, #8]
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	18db      	adds	r3, r3, r3
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2250      	movs	r2, #80	@ 0x50
 8003b9a:	5a9b      	ldrh	r3, [r3, r2]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	00da      	lsls	r2, r3, #3
 8003bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bae:	18d3      	adds	r3, r2, r3
 8003bb0:	4a88      	ldr	r2, [pc, #544]	@ (8003dd4 <USB_ActivateEndpoint+0x6c0>)
 8003bb2:	4694      	mov	ip, r2
 8003bb4:	4463      	add	r3, ip
 8003bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	895b      	ldrh	r3, [r3, #10]
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	18db      	adds	r3, r3, r3
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d000      	beq.n	8003bd2 <USB_ActivateEndpoint+0x4be>
 8003bd0:	e087      	b.n	8003ce2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	18d2      	adds	r2, r2, r3
 8003bdc:	2140      	movs	r1, #64	@ 0x40
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	881a      	ldrh	r2, [r3, #0]
 8003be8:	2380      	movs	r3, #128	@ 0x80
 8003bea:	01db      	lsls	r3, r3, #7
 8003bec:	4013      	ands	r3, r2
 8003bee:	d016      	beq.n	8003c1e <USB_ActivateEndpoint+0x50a>
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	18d3      	adds	r3, r2, r3
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	203e      	movs	r0, #62	@ 0x3e
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	496e      	ldr	r1, [pc, #440]	@ (8003dbc <USB_ActivateEndpoint+0x6a8>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	18d3      	adds	r3, r2, r3
 8003c12:	183a      	adds	r2, r7, r0
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	496a      	ldr	r1, [pc, #424]	@ (8003dc0 <USB_ActivateEndpoint+0x6ac>)
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	18d2      	adds	r2, r2, r3
 8003c28:	213c      	movs	r1, #60	@ 0x3c
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	2240      	movs	r2, #64	@ 0x40
 8003c36:	4013      	ands	r3, r2
 8003c38:	d016      	beq.n	8003c68 <USB_ActivateEndpoint+0x554>
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	18d3      	adds	r3, r2, r3
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	203a      	movs	r0, #58	@ 0x3a
 8003c4a:	183b      	adds	r3, r7, r0
 8003c4c:	495b      	ldr	r1, [pc, #364]	@ (8003dbc <USB_ActivateEndpoint+0x6a8>)
 8003c4e:	400a      	ands	r2, r1
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	18d3      	adds	r3, r2, r3
 8003c5c:	183a      	adds	r2, r7, r0
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	495d      	ldr	r1, [pc, #372]	@ (8003dd8 <USB_ActivateEndpoint+0x6c4>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	b292      	uxth	r2, r2
 8003c66:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	18d3      	adds	r3, r2, r3
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	2038      	movs	r0, #56	@ 0x38
 8003c78:	183b      	adds	r3, r7, r0
 8003c7a:	4952      	ldr	r1, [pc, #328]	@ (8003dc4 <USB_ActivateEndpoint+0x6b0>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	183b      	adds	r3, r7, r0
 8003c82:	183a      	adds	r2, r7, r0
 8003c84:	8812      	ldrh	r2, [r2, #0]
 8003c86:	2180      	movs	r1, #128	@ 0x80
 8003c88:	0149      	lsls	r1, r1, #5
 8003c8a:	404a      	eors	r2, r1
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	183b      	adds	r3, r7, r0
 8003c90:	183a      	adds	r2, r7, r0
 8003c92:	8812      	ldrh	r2, [r2, #0]
 8003c94:	2180      	movs	r1, #128	@ 0x80
 8003c96:	0189      	lsls	r1, r1, #6
 8003c98:	404a      	eors	r2, r1
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	18d3      	adds	r3, r2, r3
 8003ca6:	183a      	adds	r2, r7, r0
 8003ca8:	8812      	ldrh	r2, [r2, #0]
 8003caa:	4947      	ldr	r1, [pc, #284]	@ (8003dc8 <USB_ActivateEndpoint+0x6b4>)
 8003cac:	430a      	orrs	r2, r1
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	18d3      	adds	r3, r2, r3
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	2036      	movs	r0, #54	@ 0x36
 8003cc2:	183b      	adds	r3, r7, r0
 8003cc4:	4945      	ldr	r1, [pc, #276]	@ (8003ddc <USB_ActivateEndpoint+0x6c8>)
 8003cc6:	400a      	ands	r2, r1
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	18d3      	adds	r3, r2, r3
 8003cd4:	183a      	adds	r2, r7, r0
 8003cd6:	8812      	ldrh	r2, [r2, #0]
 8003cd8:	493b      	ldr	r1, [pc, #236]	@ (8003dc8 <USB_ActivateEndpoint+0x6b4>)
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	b292      	uxth	r2, r2
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	e0ac      	b.n	8003e3c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	18d2      	adds	r2, r2, r3
 8003cec:	214e      	movs	r1, #78	@ 0x4e
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	8812      	ldrh	r2, [r2, #0]
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	881a      	ldrh	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	01db      	lsls	r3, r3, #7
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d016      	beq.n	8003d2e <USB_ActivateEndpoint+0x61a>
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	18d3      	adds	r3, r2, r3
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	204c      	movs	r0, #76	@ 0x4c
 8003d10:	183b      	adds	r3, r7, r0
 8003d12:	492a      	ldr	r1, [pc, #168]	@ (8003dbc <USB_ActivateEndpoint+0x6a8>)
 8003d14:	400a      	ands	r2, r1
 8003d16:	801a      	strh	r2, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	18d3      	adds	r3, r2, r3
 8003d22:	183a      	adds	r2, r7, r0
 8003d24:	8812      	ldrh	r2, [r2, #0]
 8003d26:	4926      	ldr	r1, [pc, #152]	@ (8003dc0 <USB_ActivateEndpoint+0x6ac>)
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	18d2      	adds	r2, r2, r3
 8003d38:	214a      	movs	r1, #74	@ 0x4a
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	2240      	movs	r2, #64	@ 0x40
 8003d46:	4013      	ands	r3, r2
 8003d48:	d016      	beq.n	8003d78 <USB_ActivateEndpoint+0x664>
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	18d3      	adds	r3, r2, r3
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	2048      	movs	r0, #72	@ 0x48
 8003d5a:	183b      	adds	r3, r7, r0
 8003d5c:	4917      	ldr	r1, [pc, #92]	@ (8003dbc <USB_ActivateEndpoint+0x6a8>)
 8003d5e:	400a      	ands	r2, r1
 8003d60:	801a      	strh	r2, [r3, #0]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	183a      	adds	r2, r7, r0
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	4919      	ldr	r1, [pc, #100]	@ (8003dd8 <USB_ActivateEndpoint+0x6c4>)
 8003d72:	430a      	orrs	r2, r1
 8003d74:	b292      	uxth	r2, r2
 8003d76:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	78db      	ldrb	r3, [r3, #3]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d02f      	beq.n	8003de0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	2044      	movs	r0, #68	@ 0x44
 8003d90:	183b      	adds	r3, r7, r0
 8003d92:	4912      	ldr	r1, [pc, #72]	@ (8003ddc <USB_ActivateEndpoint+0x6c8>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	801a      	strh	r2, [r3, #0]
 8003d98:	183b      	adds	r3, r7, r0
 8003d9a:	183a      	adds	r2, r7, r0
 8003d9c:	8812      	ldrh	r2, [r2, #0]
 8003d9e:	2120      	movs	r1, #32
 8003da0:	404a      	eors	r2, r1
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	18d3      	adds	r3, r2, r3
 8003dae:	183a      	adds	r2, r7, r0
 8003db0:	8812      	ldrh	r2, [r2, #0]
 8003db2:	4905      	ldr	r1, [pc, #20]	@ (8003dc8 <USB_ActivateEndpoint+0x6b4>)
 8003db4:	430a      	orrs	r2, r1
 8003db6:	b292      	uxth	r2, r2
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	e028      	b.n	8003e0e <USB_ActivateEndpoint+0x6fa>
 8003dbc:	ffff8f8f 	.word	0xffff8f8f
 8003dc0:	ffffc080 	.word	0xffffc080
 8003dc4:	ffffbf8f 	.word	0xffffbf8f
 8003dc8:	ffff8080 	.word	0xffff8080
 8003dcc:	ffff8180 	.word	0xffff8180
 8003dd0:	ffff8e8f 	.word	0xffff8e8f
 8003dd4:	00000404 	.word	0x00000404
 8003dd8:	ffff80c0 	.word	0xffff80c0
 8003ddc:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	18d3      	adds	r3, r2, r3
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	2046      	movs	r0, #70	@ 0x46
 8003df0:	183b      	adds	r3, r7, r0
 8003df2:	4916      	ldr	r1, [pc, #88]	@ (8003e4c <USB_ActivateEndpoint+0x738>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	18d3      	adds	r3, r2, r3
 8003e02:	183a      	adds	r2, r7, r0
 8003e04:	8812      	ldrh	r2, [r2, #0]
 8003e06:	4912      	ldr	r1, [pc, #72]	@ (8003e50 <USB_ActivateEndpoint+0x73c>)
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	18d3      	adds	r3, r2, r3
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	2042      	movs	r0, #66	@ 0x42
 8003e1e:	183b      	adds	r3, r7, r0
 8003e20:	490c      	ldr	r1, [pc, #48]	@ (8003e54 <USB_ActivateEndpoint+0x740>)
 8003e22:	400a      	ands	r2, r1
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	18d3      	adds	r3, r2, r3
 8003e30:	183a      	adds	r2, r7, r0
 8003e32:	8812      	ldrh	r2, [r2, #0]
 8003e34:	4906      	ldr	r1, [pc, #24]	@ (8003e50 <USB_ActivateEndpoint+0x73c>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003e3c:	236f      	movs	r3, #111	@ 0x6f
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	781b      	ldrb	r3, [r3, #0]
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b01c      	add	sp, #112	@ 0x70
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	ffff8fbf 	.word	0xffff8fbf
 8003e50:	ffff8080 	.word	0xffff8080
 8003e54:	ffffbf8f 	.word	0xffffbf8f

08003e58 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	7b1b      	ldrb	r3, [r3, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d000      	beq.n	8003e6c <USB_DeactivateEndpoint+0x14>
 8003e6a:	e07e      	b.n	8003f6a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d03c      	beq.n	8003eee <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	18d2      	adds	r2, r2, r3
 8003e7e:	210c      	movs	r1, #12
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	2240      	movs	r2, #64	@ 0x40
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d016      	beq.n	8003ebe <USB_DeactivateEndpoint+0x66>
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	18d3      	adds	r3, r2, r3
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	200a      	movs	r0, #10
 8003ea0:	183b      	adds	r3, r7, r0
 8003ea2:	49c7      	ldr	r1, [pc, #796]	@ (80041c0 <USB_DeactivateEndpoint+0x368>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	801a      	strh	r2, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	18d3      	adds	r3, r2, r3
 8003eb2:	183a      	adds	r2, r7, r0
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	49c3      	ldr	r1, [pc, #780]	@ (80041c4 <USB_DeactivateEndpoint+0x36c>)
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	18d3      	adds	r3, r2, r3
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	2008      	movs	r0, #8
 8003ece:	183b      	adds	r3, r7, r0
 8003ed0:	49bd      	ldr	r1, [pc, #756]	@ (80041c8 <USB_DeactivateEndpoint+0x370>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	801a      	strh	r2, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	18d3      	adds	r3, r2, r3
 8003ee0:	183a      	adds	r2, r7, r0
 8003ee2:	8812      	ldrh	r2, [r2, #0]
 8003ee4:	49b9      	ldr	r1, [pc, #740]	@ (80041cc <USB_DeactivateEndpoint+0x374>)
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e163      	b.n	80041b6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	18d2      	adds	r2, r2, r3
 8003ef8:	2112      	movs	r1, #18
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	8812      	ldrh	r2, [r2, #0]
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	881a      	ldrh	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	01db      	lsls	r3, r3, #7
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d016      	beq.n	8003f3a <USB_DeactivateEndpoint+0xe2>
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	18d3      	adds	r3, r2, r3
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	2010      	movs	r0, #16
 8003f1c:	183b      	adds	r3, r7, r0
 8003f1e:	49a8      	ldr	r1, [pc, #672]	@ (80041c0 <USB_DeactivateEndpoint+0x368>)
 8003f20:	400a      	ands	r2, r1
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	18d3      	adds	r3, r2, r3
 8003f2e:	183a      	adds	r2, r7, r0
 8003f30:	8812      	ldrh	r2, [r2, #0]
 8003f32:	49a7      	ldr	r1, [pc, #668]	@ (80041d0 <USB_DeactivateEndpoint+0x378>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	b292      	uxth	r2, r2
 8003f38:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	18d3      	adds	r3, r2, r3
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	200e      	movs	r0, #14
 8003f4a:	183b      	adds	r3, r7, r0
 8003f4c:	49a1      	ldr	r1, [pc, #644]	@ (80041d4 <USB_DeactivateEndpoint+0x37c>)
 8003f4e:	400a      	ands	r2, r1
 8003f50:	801a      	strh	r2, [r3, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	18d3      	adds	r3, r2, r3
 8003f5c:	183a      	adds	r2, r7, r0
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	499a      	ldr	r1, [pc, #616]	@ (80041cc <USB_DeactivateEndpoint+0x374>)
 8003f62:	430a      	orrs	r2, r1
 8003f64:	b292      	uxth	r2, r2
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	e125      	b.n	80041b6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	785b      	ldrb	r3, [r3, #1]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d000      	beq.n	8003f74 <USB_DeactivateEndpoint+0x11c>
 8003f72:	e090      	b.n	8004096 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	18d2      	adds	r2, r2, r3
 8003f7e:	2120      	movs	r1, #32
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	8812      	ldrh	r2, [r2, #0]
 8003f84:	801a      	strh	r2, [r3, #0]
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	01db      	lsls	r3, r3, #7
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d016      	beq.n	8003fc0 <USB_DeactivateEndpoint+0x168>
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	18d3      	adds	r3, r2, r3
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	201e      	movs	r0, #30
 8003fa2:	183b      	adds	r3, r7, r0
 8003fa4:	4986      	ldr	r1, [pc, #536]	@ (80041c0 <USB_DeactivateEndpoint+0x368>)
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	18d3      	adds	r3, r2, r3
 8003fb4:	183a      	adds	r2, r7, r0
 8003fb6:	8812      	ldrh	r2, [r2, #0]
 8003fb8:	4985      	ldr	r1, [pc, #532]	@ (80041d0 <USB_DeactivateEndpoint+0x378>)
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	18d2      	adds	r2, r2, r3
 8003fca:	211c      	movs	r1, #28
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	8812      	ldrh	r2, [r2, #0]
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	187b      	adds	r3, r7, r1
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	2240      	movs	r2, #64	@ 0x40
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d016      	beq.n	800400a <USB_DeactivateEndpoint+0x1b2>
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	18d3      	adds	r3, r2, r3
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	201a      	movs	r0, #26
 8003fec:	183b      	adds	r3, r7, r0
 8003fee:	4974      	ldr	r1, [pc, #464]	@ (80041c0 <USB_DeactivateEndpoint+0x368>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	183a      	adds	r2, r7, r0
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	4970      	ldr	r1, [pc, #448]	@ (80041c4 <USB_DeactivateEndpoint+0x36c>)
 8004004:	430a      	orrs	r2, r1
 8004006:	b292      	uxth	r2, r2
 8004008:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	18d3      	adds	r3, r2, r3
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29a      	uxth	r2, r3
 8004018:	2018      	movs	r0, #24
 800401a:	183b      	adds	r3, r7, r0
 800401c:	4968      	ldr	r1, [pc, #416]	@ (80041c0 <USB_DeactivateEndpoint+0x368>)
 800401e:	400a      	ands	r2, r1
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	18d3      	adds	r3, r2, r3
 800402c:	183a      	adds	r2, r7, r0
 800402e:	8812      	ldrh	r2, [r2, #0]
 8004030:	4964      	ldr	r1, [pc, #400]	@ (80041c4 <USB_DeactivateEndpoint+0x36c>)
 8004032:	430a      	orrs	r2, r1
 8004034:	b292      	uxth	r2, r2
 8004036:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	18d3      	adds	r3, r2, r3
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29a      	uxth	r2, r3
 8004046:	2016      	movs	r0, #22
 8004048:	183b      	adds	r3, r7, r0
 800404a:	4962      	ldr	r1, [pc, #392]	@ (80041d4 <USB_DeactivateEndpoint+0x37c>)
 800404c:	400a      	ands	r2, r1
 800404e:	801a      	strh	r2, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	183a      	adds	r2, r7, r0
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	495b      	ldr	r1, [pc, #364]	@ (80041cc <USB_DeactivateEndpoint+0x374>)
 8004060:	430a      	orrs	r2, r1
 8004062:	b292      	uxth	r2, r2
 8004064:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	18d3      	adds	r3, r2, r3
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29a      	uxth	r2, r3
 8004074:	2014      	movs	r0, #20
 8004076:	183b      	adds	r3, r7, r0
 8004078:	4953      	ldr	r1, [pc, #332]	@ (80041c8 <USB_DeactivateEndpoint+0x370>)
 800407a:	400a      	ands	r2, r1
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	18d3      	adds	r3, r2, r3
 8004088:	183a      	adds	r2, r7, r0
 800408a:	8812      	ldrh	r2, [r2, #0]
 800408c:	494f      	ldr	r1, [pc, #316]	@ (80041cc <USB_DeactivateEndpoint+0x374>)
 800408e:	430a      	orrs	r2, r1
 8004090:	b292      	uxth	r2, r2
 8004092:	801a      	strh	r2, [r3, #0]
 8004094:	e08f      	b.n	80041b6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	18d2      	adds	r2, r2, r3
 80040a0:	212e      	movs	r1, #46	@ 0x2e
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	8812      	ldrh	r2, [r2, #0]
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	2380      	movs	r3, #128	@ 0x80
 80040ae:	01db      	lsls	r3, r3, #7
 80040b0:	4013      	ands	r3, r2
 80040b2:	d016      	beq.n	80040e2 <USB_DeactivateEndpoint+0x28a>
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	202c      	movs	r0, #44	@ 0x2c
 80040c4:	183b      	adds	r3, r7, r0
 80040c6:	493e      	ldr	r1, [pc, #248]	@ (80041c0 <USB_DeactivateEndpoint+0x368>)
 80040c8:	400a      	ands	r2, r1
 80040ca:	801a      	strh	r2, [r3, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	183a      	adds	r2, r7, r0
 80040d8:	8812      	ldrh	r2, [r2, #0]
 80040da:	493d      	ldr	r1, [pc, #244]	@ (80041d0 <USB_DeactivateEndpoint+0x378>)
 80040dc:	430a      	orrs	r2, r1
 80040de:	b292      	uxth	r2, r2
 80040e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	18d2      	adds	r2, r2, r3
 80040ec:	212a      	movs	r1, #42	@ 0x2a
 80040ee:	187b      	adds	r3, r7, r1
 80040f0:	8812      	ldrh	r2, [r2, #0]
 80040f2:	801a      	strh	r2, [r3, #0]
 80040f4:	187b      	adds	r3, r7, r1
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	2240      	movs	r2, #64	@ 0x40
 80040fa:	4013      	ands	r3, r2
 80040fc:	d016      	beq.n	800412c <USB_DeactivateEndpoint+0x2d4>
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	18d3      	adds	r3, r2, r3
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29a      	uxth	r2, r3
 800410c:	2028      	movs	r0, #40	@ 0x28
 800410e:	183b      	adds	r3, r7, r0
 8004110:	492b      	ldr	r1, [pc, #172]	@ (80041c0 <USB_DeactivateEndpoint+0x368>)
 8004112:	400a      	ands	r2, r1
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	18d3      	adds	r3, r2, r3
 8004120:	183a      	adds	r2, r7, r0
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	4927      	ldr	r1, [pc, #156]	@ (80041c4 <USB_DeactivateEndpoint+0x36c>)
 8004126:	430a      	orrs	r2, r1
 8004128:	b292      	uxth	r2, r2
 800412a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29a      	uxth	r2, r3
 800413a:	2026      	movs	r0, #38	@ 0x26
 800413c:	183b      	adds	r3, r7, r0
 800413e:	4920      	ldr	r1, [pc, #128]	@ (80041c0 <USB_DeactivateEndpoint+0x368>)
 8004140:	400a      	ands	r2, r1
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	183a      	adds	r2, r7, r0
 8004150:	8812      	ldrh	r2, [r2, #0]
 8004152:	491f      	ldr	r1, [pc, #124]	@ (80041d0 <USB_DeactivateEndpoint+0x378>)
 8004154:	430a      	orrs	r2, r1
 8004156:	b292      	uxth	r2, r2
 8004158:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	18d3      	adds	r3, r2, r3
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29a      	uxth	r2, r3
 8004168:	2024      	movs	r0, #36	@ 0x24
 800416a:	183b      	adds	r3, r7, r0
 800416c:	4916      	ldr	r1, [pc, #88]	@ (80041c8 <USB_DeactivateEndpoint+0x370>)
 800416e:	400a      	ands	r2, r1
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	18d3      	adds	r3, r2, r3
 800417c:	183a      	adds	r2, r7, r0
 800417e:	8812      	ldrh	r2, [r2, #0]
 8004180:	4912      	ldr	r1, [pc, #72]	@ (80041cc <USB_DeactivateEndpoint+0x374>)
 8004182:	430a      	orrs	r2, r1
 8004184:	b292      	uxth	r2, r2
 8004186:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	18d3      	adds	r3, r2, r3
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29a      	uxth	r2, r3
 8004196:	2022      	movs	r0, #34	@ 0x22
 8004198:	183b      	adds	r3, r7, r0
 800419a:	490e      	ldr	r1, [pc, #56]	@ (80041d4 <USB_DeactivateEndpoint+0x37c>)
 800419c:	400a      	ands	r2, r1
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	18d3      	adds	r3, r2, r3
 80041aa:	183a      	adds	r2, r7, r0
 80041ac:	8812      	ldrh	r2, [r2, #0]
 80041ae:	4907      	ldr	r1, [pc, #28]	@ (80041cc <USB_DeactivateEndpoint+0x374>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	b292      	uxth	r2, r2
 80041b4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b00c      	add	sp, #48	@ 0x30
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	ffff8f8f 	.word	0xffff8f8f
 80041c4:	ffff80c0 	.word	0xffff80c0
 80041c8:	ffff8fbf 	.word	0xffff8fbf
 80041cc:	ffff8080 	.word	0xffff8080
 80041d0:	ffffc080 	.word	0xffffc080
 80041d4:	ffffbf8f 	.word	0xffffbf8f

080041d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b0c3      	sub	sp, #268	@ 0x10c
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <USB_EPStartXfer+0x16>
 80041ea:	f000 fd2d 	bl	8004c48 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d905      	bls.n	8004206 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	1d7a      	adds	r2, r7, #5
 8004200:	32ff      	adds	r2, #255	@ 0xff
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e004      	b.n	8004210 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	1d7a      	adds	r2, r7, #5
 800420c:	32ff      	adds	r2, #255	@ 0xff
 800420e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	7b1b      	ldrb	r3, [r3, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d125      	bne.n	8004264 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6959      	ldr	r1, [r3, #20]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	88da      	ldrh	r2, [r3, #6]
 8004220:	1d7b      	adds	r3, r7, #5
 8004222:	33ff      	adds	r3, #255	@ 0xff
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f001 fa47 	bl	80056bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2250      	movs	r2, #80	@ 0x50
 8004236:	5a9b      	ldrh	r3, [r3, r2]
 8004238:	b29b      	uxth	r3, r3
 800423a:	001a      	movs	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	189b      	adds	r3, r3, r2
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	00da      	lsls	r2, r3, #3
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	18d3      	adds	r3, r2, r3
 800424c:	4ad7      	ldr	r2, [pc, #860]	@ (80045ac <USB_EPStartXfer+0x3d4>)
 800424e:	4694      	mov	ip, r2
 8004250:	4463      	add	r3, ip
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	1d7b      	adds	r3, r7, #5
 8004256:	33ff      	adds	r3, #255	@ 0xff
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	f000 fccd 	bl	8004bfe <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	78db      	ldrb	r3, [r3, #3]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d000      	beq.n	800426e <USB_EPStartXfer+0x96>
 800426c:	e362      	b.n	8004934 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6a1a      	ldr	r2, [r3, #32]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	429a      	cmp	r2, r3
 8004278:	d800      	bhi.n	800427c <USB_EPStartXfer+0xa4>
 800427a:	e309      	b.n	8004890 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	18d3      	adds	r3, r2, r3
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29a      	uxth	r2, r3
 800428a:	2056      	movs	r0, #86	@ 0x56
 800428c:	183b      	adds	r3, r7, r0
 800428e:	49c8      	ldr	r1, [pc, #800]	@ (80045b0 <USB_EPStartXfer+0x3d8>)
 8004290:	400a      	ands	r2, r1
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	18d3      	adds	r3, r2, r3
 800429e:	183a      	adds	r2, r7, r0
 80042a0:	8812      	ldrh	r2, [r2, #0]
 80042a2:	49c4      	ldr	r1, [pc, #784]	@ (80045b4 <USB_EPStartXfer+0x3dc>)
 80042a4:	430a      	orrs	r2, r1
 80042a6:	b292      	uxth	r2, r2
 80042a8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	1d7b      	adds	r3, r7, #5
 80042b0:	33ff      	adds	r3, #255	@ 0xff
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	1ad2      	subs	r2, r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	001a      	movs	r2, r3
 80042ca:	2340      	movs	r3, #64	@ 0x40
 80042cc:	4013      	ands	r3, r2
 80042ce:	d100      	bne.n	80042d2 <USB_EPStartXfer+0xfa>
 80042d0:	e176      	b.n	80045c0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d000      	beq.n	80042e0 <USB_EPStartXfer+0x108>
 80042de:	e074      	b.n	80043ca <USB_EPStartXfer+0x1f2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2250      	movs	r2, #80	@ 0x50
 80042e8:	5a9b      	ldrh	r3, [r3, r2]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	001a      	movs	r2, r3
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	189b      	adds	r3, r3, r2
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	00da      	lsls	r2, r3, #3
 80042fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fc:	18d3      	adds	r3, r2, r3
 80042fe:	4aae      	ldr	r2, [pc, #696]	@ (80045b8 <USB_EPStartXfer+0x3e0>)
 8004300:	4694      	mov	ip, r2
 8004302:	4463      	add	r3, ip
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	059b      	lsls	r3, r3, #22
 800430e:	0d9b      	lsrs	r3, r3, #22
 8004310:	b29a      	uxth	r2, r3
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	1d7b      	adds	r3, r7, #5
 8004318:	33ff      	adds	r3, #255	@ 0xff
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b3e      	cmp	r3, #62	@ 0x3e
 800431e:	d924      	bls.n	800436a <USB_EPStartXfer+0x192>
 8004320:	1d7b      	adds	r3, r7, #5
 8004322:	33ff      	adds	r3, #255	@ 0xff
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	1c7a      	adds	r2, r7, #1
 800432a:	32ff      	adds	r2, #255	@ 0xff
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	1d7b      	adds	r3, r7, #5
 8004330:	33ff      	adds	r3, #255	@ 0xff
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	221f      	movs	r2, #31
 8004336:	4013      	ands	r3, r2
 8004338:	d106      	bne.n	8004348 <USB_EPStartXfer+0x170>
 800433a:	1c7b      	adds	r3, r7, #1
 800433c:	33ff      	adds	r3, #255	@ 0xff
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3b01      	subs	r3, #1
 8004342:	1c7a      	adds	r2, r7, #1
 8004344:	32ff      	adds	r2, #255	@ 0xff
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29a      	uxth	r2, r3
 800434e:	1c7b      	adds	r3, r7, #1
 8004350:	33ff      	adds	r3, #255	@ 0xff
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	b29b      	uxth	r3, r3
 800435a:	4313      	orrs	r3, r2
 800435c:	b29b      	uxth	r3, r3
 800435e:	4a97      	ldr	r2, [pc, #604]	@ (80045bc <USB_EPStartXfer+0x3e4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	b29a      	uxth	r2, r3
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	e04a      	b.n	8004400 <USB_EPStartXfer+0x228>
 800436a:	1d7b      	adds	r3, r7, #5
 800436c:	33ff      	adds	r3, #255	@ 0xff
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d108      	bne.n	8004386 <USB_EPStartXfer+0x1ae>
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	4a90      	ldr	r2, [pc, #576]	@ (80045bc <USB_EPStartXfer+0x3e4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	b29a      	uxth	r2, r3
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	e03c      	b.n	8004400 <USB_EPStartXfer+0x228>
 8004386:	1d7b      	adds	r3, r7, #5
 8004388:	33ff      	adds	r3, #255	@ 0xff
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	1c7a      	adds	r2, r7, #1
 8004390:	32ff      	adds	r2, #255	@ 0xff
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	1d7b      	adds	r3, r7, #5
 8004396:	33ff      	adds	r3, #255	@ 0xff
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2201      	movs	r2, #1
 800439c:	4013      	ands	r3, r2
 800439e:	d006      	beq.n	80043ae <USB_EPStartXfer+0x1d6>
 80043a0:	1c7b      	adds	r3, r7, #1
 80043a2:	33ff      	adds	r3, #255	@ 0xff
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	1c7a      	adds	r2, r7, #1
 80043aa:	32ff      	adds	r2, #255	@ 0xff
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	1c7b      	adds	r3, r7, #1
 80043b6:	33ff      	adds	r3, #255	@ 0xff
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	b29b      	uxth	r3, r3
 80043c0:	4313      	orrs	r3, r2
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	801a      	strh	r2, [r3, #0]
 80043c8:	e01a      	b.n	8004400 <USB_EPStartXfer+0x228>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d116      	bne.n	8004400 <USB_EPStartXfer+0x228>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2250      	movs	r2, #80	@ 0x50
 80043d6:	5a9b      	ldrh	r3, [r3, r2]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	001a      	movs	r2, r3
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	00da      	lsls	r2, r3, #3
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	18d3      	adds	r3, r2, r3
 80043ec:	4a72      	ldr	r2, [pc, #456]	@ (80045b8 <USB_EPStartXfer+0x3e0>)
 80043ee:	4694      	mov	ip, r2
 80043f0:	4463      	add	r3, ip
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f4:	1d7b      	adds	r3, r7, #5
 80043f6:	33ff      	adds	r3, #255	@ 0xff
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004400:	2076      	movs	r0, #118	@ 0x76
 8004402:	183b      	adds	r3, r7, r0
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	8952      	ldrh	r2, [r2, #10]
 8004408:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6959      	ldr	r1, [r3, #20]
 800440e:	1d7b      	adds	r3, r7, #5
 8004410:	33ff      	adds	r3, #255	@ 0xff
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	b29c      	uxth	r4, r3
 8004416:	183b      	adds	r3, r7, r0
 8004418:	881a      	ldrh	r2, [r3, #0]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	0023      	movs	r3, r4
 800441e:	f001 f94d 	bl	80056bc <USB_WritePMA>
            ep->xfer_buff += len;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	1d7b      	adds	r3, r7, #5
 8004428:	33ff      	adds	r3, #255	@ 0xff
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	18d2      	adds	r2, r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d908      	bls.n	8004450 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	1d7b      	adds	r3, r7, #5
 8004444:	33ff      	adds	r3, #255	@ 0xff
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1ad2      	subs	r2, r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	621a      	str	r2, [r3, #32]
 800444e:	e007      	b.n	8004460 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	1d7a      	adds	r2, r7, #5
 8004456:	32ff      	adds	r2, #255	@ 0xff
 8004458:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2200      	movs	r2, #0
 800445e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d000      	beq.n	800446a <USB_EPStartXfer+0x292>
 8004468:	e070      	b.n	800454c <USB_EPStartXfer+0x374>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2250      	movs	r2, #80	@ 0x50
 8004472:	5a9b      	ldrh	r3, [r3, r2]
 8004474:	b29b      	uxth	r3, r3
 8004476:	001a      	movs	r2, r3
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	189b      	adds	r3, r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	00da      	lsls	r2, r3, #3
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	18d3      	adds	r3, r2, r3
 8004488:	4a48      	ldr	r2, [pc, #288]	@ (80045ac <USB_EPStartXfer+0x3d4>)
 800448a:	4694      	mov	ip, r2
 800448c:	4463      	add	r3, ip
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	059b      	lsls	r3, r3, #22
 8004498:	0d9b      	lsrs	r3, r3, #22
 800449a:	b29a      	uxth	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	1d7b      	adds	r3, r7, #5
 80044a2:	33ff      	adds	r3, #255	@ 0xff
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80044a8:	d922      	bls.n	80044f0 <USB_EPStartXfer+0x318>
 80044aa:	1d7b      	adds	r3, r7, #5
 80044ac:	33ff      	adds	r3, #255	@ 0xff
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	21fc      	movs	r1, #252	@ 0xfc
 80044b4:	187a      	adds	r2, r7, r1
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	1d7b      	adds	r3, r7, #5
 80044ba:	33ff      	adds	r3, #255	@ 0xff
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	221f      	movs	r2, #31
 80044c0:	4013      	ands	r3, r2
 80044c2:	d104      	bne.n	80044ce <USB_EPStartXfer+0x2f6>
 80044c4:	187b      	adds	r3, r7, r1
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	187a      	adds	r2, r7, r1
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	23fc      	movs	r3, #252	@ 0xfc
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	b29b      	uxth	r3, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	4a35      	ldr	r2, [pc, #212]	@ (80045bc <USB_EPStartXfer+0x3e4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e04a      	b.n	8004586 <USB_EPStartXfer+0x3ae>
 80044f0:	1d7b      	adds	r3, r7, #5
 80044f2:	33ff      	adds	r3, #255	@ 0xff
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <USB_EPStartXfer+0x334>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4a2e      	ldr	r2, [pc, #184]	@ (80045bc <USB_EPStartXfer+0x3e4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	b29a      	uxth	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	e03c      	b.n	8004586 <USB_EPStartXfer+0x3ae>
 800450c:	1d7b      	adds	r3, r7, #5
 800450e:	33ff      	adds	r3, #255	@ 0xff
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	21fc      	movs	r1, #252	@ 0xfc
 8004516:	187a      	adds	r2, r7, r1
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	1d7b      	adds	r3, r7, #5
 800451c:	33ff      	adds	r3, #255	@ 0xff
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	4013      	ands	r3, r2
 8004524:	d004      	beq.n	8004530 <USB_EPStartXfer+0x358>
 8004526:	187b      	adds	r3, r7, r1
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	187a      	adds	r2, r7, r1
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29a      	uxth	r2, r3
 8004536:	23fc      	movs	r3, #252	@ 0xfc
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	b29b      	uxth	r3, r3
 8004542:	4313      	orrs	r3, r2
 8004544:	b29a      	uxth	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	e01c      	b.n	8004586 <USB_EPStartXfer+0x3ae>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d118      	bne.n	8004586 <USB_EPStartXfer+0x3ae>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	623b      	str	r3, [r7, #32]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2250      	movs	r2, #80	@ 0x50
 800455c:	5a9b      	ldrh	r3, [r3, r2]
 800455e:	b29b      	uxth	r3, r3
 8004560:	001a      	movs	r2, r3
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	189b      	adds	r3, r3, r2
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	00da      	lsls	r2, r3, #3
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	18d3      	adds	r3, r2, r3
 8004572:	4a0e      	ldr	r2, [pc, #56]	@ (80045ac <USB_EPStartXfer+0x3d4>)
 8004574:	4694      	mov	ip, r2
 8004576:	4463      	add	r3, ip
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	1d7b      	adds	r3, r7, #5
 800457c:	33ff      	adds	r3, #255	@ 0xff
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	b29a      	uxth	r2, r3
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004586:	2076      	movs	r0, #118	@ 0x76
 8004588:	183b      	adds	r3, r7, r0
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	8912      	ldrh	r2, [r2, #8]
 800458e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6959      	ldr	r1, [r3, #20]
 8004594:	1d7b      	adds	r3, r7, #5
 8004596:	33ff      	adds	r3, #255	@ 0xff
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	b29c      	uxth	r4, r3
 800459c:	183b      	adds	r3, r7, r0
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	0023      	movs	r3, r4
 80045a4:	f001 f88a 	bl	80056bc <USB_WritePMA>
 80045a8:	e329      	b.n	8004bfe <USB_EPStartXfer+0xa26>
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	00000402 	.word	0x00000402
 80045b0:	ffff8f8f 	.word	0xffff8f8f
 80045b4:	ffff8180 	.word	0xffff8180
 80045b8:	00000406 	.word	0x00000406
 80045bc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d000      	beq.n	80045ca <USB_EPStartXfer+0x3f2>
 80045c8:	e070      	b.n	80046ac <USB_EPStartXfer+0x4d4>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2250      	movs	r2, #80	@ 0x50
 80045d2:	5a9b      	ldrh	r3, [r3, r2]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	001a      	movs	r2, r3
 80045d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	00da      	lsls	r2, r3, #3
 80045e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e6:	18d3      	adds	r3, r2, r3
 80045e8:	4acd      	ldr	r2, [pc, #820]	@ (8004920 <USB_EPStartXfer+0x748>)
 80045ea:	4694      	mov	ip, r2
 80045ec:	4463      	add	r3, ip
 80045ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	059b      	lsls	r3, r3, #22
 80045f8:	0d9b      	lsrs	r3, r3, #22
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	1d7b      	adds	r3, r7, #5
 8004602:	33ff      	adds	r3, #255	@ 0xff
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b3e      	cmp	r3, #62	@ 0x3e
 8004608:	d922      	bls.n	8004650 <USB_EPStartXfer+0x478>
 800460a:	1d7b      	adds	r3, r7, #5
 800460c:	33ff      	adds	r3, #255	@ 0xff
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	21f8      	movs	r1, #248	@ 0xf8
 8004614:	187a      	adds	r2, r7, r1
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	1d7b      	adds	r3, r7, #5
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	221f      	movs	r2, #31
 8004620:	4013      	ands	r3, r2
 8004622:	d104      	bne.n	800462e <USB_EPStartXfer+0x456>
 8004624:	187b      	adds	r3, r7, r1
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3b01      	subs	r3, #1
 800462a:	187a      	adds	r2, r7, r1
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29a      	uxth	r2, r3
 8004634:	23f8      	movs	r3, #248	@ 0xf8
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	029b      	lsls	r3, r3, #10
 800463e:	b29b      	uxth	r3, r3
 8004640:	4313      	orrs	r3, r2
 8004642:	b29b      	uxth	r3, r3
 8004644:	4ab7      	ldr	r2, [pc, #732]	@ (8004924 <USB_EPStartXfer+0x74c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	b29a      	uxth	r2, r3
 800464a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800464c:	801a      	strh	r2, [r3, #0]
 800464e:	e04a      	b.n	80046e6 <USB_EPStartXfer+0x50e>
 8004650:	1d7b      	adds	r3, r7, #5
 8004652:	33ff      	adds	r3, #255	@ 0xff
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d108      	bne.n	800466c <USB_EPStartXfer+0x494>
 800465a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	4ab0      	ldr	r2, [pc, #704]	@ (8004924 <USB_EPStartXfer+0x74c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	b29a      	uxth	r2, r3
 8004666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e03c      	b.n	80046e6 <USB_EPStartXfer+0x50e>
 800466c:	1d7b      	adds	r3, r7, #5
 800466e:	33ff      	adds	r3, #255	@ 0xff
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	21f8      	movs	r1, #248	@ 0xf8
 8004676:	187a      	adds	r2, r7, r1
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	1d7b      	adds	r3, r7, #5
 800467c:	33ff      	adds	r3, #255	@ 0xff
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2201      	movs	r2, #1
 8004682:	4013      	ands	r3, r2
 8004684:	d004      	beq.n	8004690 <USB_EPStartXfer+0x4b8>
 8004686:	187b      	adds	r3, r7, r1
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3301      	adds	r3, #1
 800468c:	187a      	adds	r2, r7, r1
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29a      	uxth	r2, r3
 8004696:	23f8      	movs	r3, #248	@ 0xf8
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	029b      	lsls	r3, r3, #10
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4313      	orrs	r3, r2
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	e01c      	b.n	80046e6 <USB_EPStartXfer+0x50e>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d118      	bne.n	80046e6 <USB_EPStartXfer+0x50e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2250      	movs	r2, #80	@ 0x50
 80046bc:	5a9b      	ldrh	r3, [r3, r2]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	001a      	movs	r2, r3
 80046c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046c4:	189b      	adds	r3, r3, r2
 80046c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	00da      	lsls	r2, r3, #3
 80046ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046d0:	18d3      	adds	r3, r2, r3
 80046d2:	4a93      	ldr	r2, [pc, #588]	@ (8004920 <USB_EPStartXfer+0x748>)
 80046d4:	4694      	mov	ip, r2
 80046d6:	4463      	add	r3, ip
 80046d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046da:	1d7b      	adds	r3, r7, #5
 80046dc:	33ff      	adds	r3, #255	@ 0xff
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046e6:	2076      	movs	r0, #118	@ 0x76
 80046e8:	183b      	adds	r3, r7, r0
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	8912      	ldrh	r2, [r2, #8]
 80046ee:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6959      	ldr	r1, [r3, #20]
 80046f4:	1d7b      	adds	r3, r7, #5
 80046f6:	33ff      	adds	r3, #255	@ 0xff
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b29c      	uxth	r4, r3
 80046fc:	183b      	adds	r3, r7, r0
 80046fe:	881a      	ldrh	r2, [r3, #0]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	0023      	movs	r3, r4
 8004704:	f000 ffda 	bl	80056bc <USB_WritePMA>
            ep->xfer_buff += len;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	1d7b      	adds	r3, r7, #5
 800470e:	33ff      	adds	r3, #255	@ 0xff
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	18d2      	adds	r2, r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6a1a      	ldr	r2, [r3, #32]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	d908      	bls.n	8004736 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6a1a      	ldr	r2, [r3, #32]
 8004728:	1d7b      	adds	r3, r7, #5
 800472a:	33ff      	adds	r3, #255	@ 0xff
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	621a      	str	r2, [r3, #32]
 8004734:	e007      	b.n	8004746 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	1d7a      	adds	r2, r7, #5
 800473c:	32ff      	adds	r2, #255	@ 0xff
 800473e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2200      	movs	r2, #0
 8004744:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	643b      	str	r3, [r7, #64]	@ 0x40
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	785b      	ldrb	r3, [r3, #1]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d000      	beq.n	8004754 <USB_EPStartXfer+0x57c>
 8004752:	e070      	b.n	8004836 <USB_EPStartXfer+0x65e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2250      	movs	r2, #80	@ 0x50
 800475c:	5a9b      	ldrh	r3, [r3, r2]
 800475e:	b29b      	uxth	r3, r3
 8004760:	001a      	movs	r2, r3
 8004762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004764:	189b      	adds	r3, r3, r2
 8004766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	00da      	lsls	r2, r3, #3
 800476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004770:	18d3      	adds	r3, r2, r3
 8004772:	4a6d      	ldr	r2, [pc, #436]	@ (8004928 <USB_EPStartXfer+0x750>)
 8004774:	4694      	mov	ip, r2
 8004776:	4463      	add	r3, ip
 8004778:	637b      	str	r3, [r7, #52]	@ 0x34
 800477a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	059b      	lsls	r3, r3, #22
 8004782:	0d9b      	lsrs	r3, r3, #22
 8004784:	b29a      	uxth	r2, r3
 8004786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	1d7b      	adds	r3, r7, #5
 800478c:	33ff      	adds	r3, #255	@ 0xff
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b3e      	cmp	r3, #62	@ 0x3e
 8004792:	d922      	bls.n	80047da <USB_EPStartXfer+0x602>
 8004794:	1d7b      	adds	r3, r7, #5
 8004796:	33ff      	adds	r3, #255	@ 0xff
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	21f4      	movs	r1, #244	@ 0xf4
 800479e:	187a      	adds	r2, r7, r1
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	1d7b      	adds	r3, r7, #5
 80047a4:	33ff      	adds	r3, #255	@ 0xff
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	221f      	movs	r2, #31
 80047aa:	4013      	ands	r3, r2
 80047ac:	d104      	bne.n	80047b8 <USB_EPStartXfer+0x5e0>
 80047ae:	187b      	adds	r3, r7, r1
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	187a      	adds	r2, r7, r1
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29a      	uxth	r2, r3
 80047be:	23f4      	movs	r3, #244	@ 0xf4
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	029b      	lsls	r3, r3, #10
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	4313      	orrs	r3, r2
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4a55      	ldr	r2, [pc, #340]	@ (8004924 <USB_EPStartXfer+0x74c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	e048      	b.n	800486c <USB_EPStartXfer+0x694>
 80047da:	1d7b      	adds	r3, r7, #5
 80047dc:	33ff      	adds	r3, #255	@ 0xff
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d108      	bne.n	80047f6 <USB_EPStartXfer+0x61e>
 80047e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004924 <USB_EPStartXfer+0x74c>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e03a      	b.n	800486c <USB_EPStartXfer+0x694>
 80047f6:	1d7b      	adds	r3, r7, #5
 80047f8:	33ff      	adds	r3, #255	@ 0xff
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	21f4      	movs	r1, #244	@ 0xf4
 8004800:	187a      	adds	r2, r7, r1
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	1d7b      	adds	r3, r7, #5
 8004806:	33ff      	adds	r3, #255	@ 0xff
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2201      	movs	r2, #1
 800480c:	4013      	ands	r3, r2
 800480e:	d004      	beq.n	800481a <USB_EPStartXfer+0x642>
 8004810:	187b      	adds	r3, r7, r1
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	187a      	adds	r2, r7, r1
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29a      	uxth	r2, r3
 8004820:	23f4      	movs	r3, #244	@ 0xf4
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	029b      	lsls	r3, r3, #10
 800482a:	b29b      	uxth	r3, r3
 800482c:	4313      	orrs	r3, r2
 800482e:	b29a      	uxth	r2, r3
 8004830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	e01a      	b.n	800486c <USB_EPStartXfer+0x694>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	785b      	ldrb	r3, [r3, #1]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d116      	bne.n	800486c <USB_EPStartXfer+0x694>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2250      	movs	r2, #80	@ 0x50
 8004842:	5a9b      	ldrh	r3, [r3, r2]
 8004844:	b29b      	uxth	r3, r3
 8004846:	001a      	movs	r2, r3
 8004848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800484a:	189b      	adds	r3, r3, r2
 800484c:	643b      	str	r3, [r7, #64]	@ 0x40
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	00da      	lsls	r2, r3, #3
 8004854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004856:	18d3      	adds	r3, r2, r3
 8004858:	4a33      	ldr	r2, [pc, #204]	@ (8004928 <USB_EPStartXfer+0x750>)
 800485a:	4694      	mov	ip, r2
 800485c:	4463      	add	r3, ip
 800485e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004860:	1d7b      	adds	r3, r7, #5
 8004862:	33ff      	adds	r3, #255	@ 0xff
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	b29a      	uxth	r2, r3
 8004868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800486c:	2076      	movs	r0, #118	@ 0x76
 800486e:	183b      	adds	r3, r7, r0
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	8952      	ldrh	r2, [r2, #10]
 8004874:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6959      	ldr	r1, [r3, #20]
 800487a:	1d7b      	adds	r3, r7, #5
 800487c:	33ff      	adds	r3, #255	@ 0xff
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	b29c      	uxth	r4, r3
 8004882:	183b      	adds	r3, r7, r0
 8004884:	881a      	ldrh	r2, [r3, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	0023      	movs	r3, r4
 800488a:	f000 ff17 	bl	80056bc <USB_WritePMA>
 800488e:	e1b6      	b.n	8004bfe <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	1d7a      	adds	r2, r7, #5
 8004896:	32ff      	adds	r2, #255	@ 0xff
 8004898:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	18d3      	adds	r3, r2, r3
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	2062      	movs	r0, #98	@ 0x62
 80048aa:	183b      	adds	r3, r7, r0
 80048ac:	491f      	ldr	r1, [pc, #124]	@ (800492c <USB_EPStartXfer+0x754>)
 80048ae:	400a      	ands	r2, r1
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	18d3      	adds	r3, r2, r3
 80048bc:	183a      	adds	r2, r7, r0
 80048be:	8812      	ldrh	r2, [r2, #0]
 80048c0:	491b      	ldr	r1, [pc, #108]	@ (8004930 <USB_EPStartXfer+0x758>)
 80048c2:	430a      	orrs	r2, r1
 80048c4:	b292      	uxth	r2, r2
 80048c6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2250      	movs	r2, #80	@ 0x50
 80048d0:	5a9b      	ldrh	r3, [r3, r2]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	001a      	movs	r2, r3
 80048d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d8:	189b      	adds	r3, r3, r2
 80048da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	00da      	lsls	r2, r3, #3
 80048e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048e4:	18d3      	adds	r3, r2, r3
 80048e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004920 <USB_EPStartXfer+0x748>)
 80048e8:	4694      	mov	ip, r2
 80048ea:	4463      	add	r3, ip
 80048ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ee:	1d7b      	adds	r3, r7, #5
 80048f0:	33ff      	adds	r3, #255	@ 0xff
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80048fa:	2076      	movs	r0, #118	@ 0x76
 80048fc:	183b      	adds	r3, r7, r0
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	8912      	ldrh	r2, [r2, #8]
 8004902:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6959      	ldr	r1, [r3, #20]
 8004908:	1d7b      	adds	r3, r7, #5
 800490a:	33ff      	adds	r3, #255	@ 0xff
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b29c      	uxth	r4, r3
 8004910:	183b      	adds	r3, r7, r0
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	0023      	movs	r3, r4
 8004918:	f000 fed0 	bl	80056bc <USB_WritePMA>
 800491c:	e16f      	b.n	8004bfe <USB_EPStartXfer+0xa26>
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	00000402 	.word	0x00000402
 8004924:	ffff8000 	.word	0xffff8000
 8004928:	00000406 	.word	0x00000406
 800492c:	ffff8e8f 	.word	0xffff8e8f
 8004930:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	1d7b      	adds	r3, r7, #5
 800493a:	33ff      	adds	r3, #255	@ 0xff
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	18d3      	adds	r3, r2, r3
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	001a      	movs	r2, r3
 8004954:	2340      	movs	r3, #64	@ 0x40
 8004956:	4013      	ands	r3, r2
 8004958:	d100      	bne.n	800495c <USB_EPStartXfer+0x784>
 800495a:	e0a4      	b.n	8004aa6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d000      	beq.n	800496a <USB_EPStartXfer+0x792>
 8004968:	e070      	b.n	8004a4c <USB_EPStartXfer+0x874>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2250      	movs	r2, #80	@ 0x50
 8004972:	5a9b      	ldrh	r3, [r3, r2]
 8004974:	b29b      	uxth	r3, r3
 8004976:	001a      	movs	r2, r3
 8004978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800497a:	189b      	adds	r3, r3, r2
 800497c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	00da      	lsls	r2, r3, #3
 8004984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004986:	18d3      	adds	r3, r2, r3
 8004988:	4abc      	ldr	r2, [pc, #752]	@ (8004c7c <USB_EPStartXfer+0xaa4>)
 800498a:	4694      	mov	ip, r2
 800498c:	4463      	add	r3, ip
 800498e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	059b      	lsls	r3, r3, #22
 8004998:	0d9b      	lsrs	r3, r3, #22
 800499a:	b29a      	uxth	r2, r3
 800499c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	1d7b      	adds	r3, r7, #5
 80049a2:	33ff      	adds	r3, #255	@ 0xff
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80049a8:	d922      	bls.n	80049f0 <USB_EPStartXfer+0x818>
 80049aa:	1d7b      	adds	r3, r7, #5
 80049ac:	33ff      	adds	r3, #255	@ 0xff
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	21f0      	movs	r1, #240	@ 0xf0
 80049b4:	187a      	adds	r2, r7, r1
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	1d7b      	adds	r3, r7, #5
 80049ba:	33ff      	adds	r3, #255	@ 0xff
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	221f      	movs	r2, #31
 80049c0:	4013      	ands	r3, r2
 80049c2:	d104      	bne.n	80049ce <USB_EPStartXfer+0x7f6>
 80049c4:	187b      	adds	r3, r7, r1
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	187a      	adds	r2, r7, r1
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	23f0      	movs	r3, #240	@ 0xf0
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	029b      	lsls	r3, r3, #10
 80049de:	b29b      	uxth	r3, r3
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	4aa6      	ldr	r2, [pc, #664]	@ (8004c80 <USB_EPStartXfer+0xaa8>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	e048      	b.n	8004a82 <USB_EPStartXfer+0x8aa>
 80049f0:	1d7b      	adds	r3, r7, #5
 80049f2:	33ff      	adds	r3, #255	@ 0xff
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d108      	bne.n	8004a0c <USB_EPStartXfer+0x834>
 80049fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4a9f      	ldr	r2, [pc, #636]	@ (8004c80 <USB_EPStartXfer+0xaa8>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a08:	801a      	strh	r2, [r3, #0]
 8004a0a:	e03a      	b.n	8004a82 <USB_EPStartXfer+0x8aa>
 8004a0c:	1d7b      	adds	r3, r7, #5
 8004a0e:	33ff      	adds	r3, #255	@ 0xff
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	21f0      	movs	r1, #240	@ 0xf0
 8004a16:	187a      	adds	r2, r7, r1
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	1d7b      	adds	r3, r7, #5
 8004a1c:	33ff      	adds	r3, #255	@ 0xff
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2201      	movs	r2, #1
 8004a22:	4013      	ands	r3, r2
 8004a24:	d004      	beq.n	8004a30 <USB_EPStartXfer+0x858>
 8004a26:	187b      	adds	r3, r7, r1
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	187a      	adds	r2, r7, r1
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	23f0      	movs	r3, #240	@ 0xf0
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	029b      	lsls	r3, r3, #10
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	4313      	orrs	r3, r2
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	e01a      	b.n	8004a82 <USB_EPStartXfer+0x8aa>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d116      	bne.n	8004a82 <USB_EPStartXfer+0x8aa>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2250      	movs	r2, #80	@ 0x50
 8004a58:	5a9b      	ldrh	r3, [r3, r2]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	00da      	lsls	r2, r3, #3
 8004a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a6c:	18d3      	adds	r3, r2, r3
 8004a6e:	4a83      	ldr	r2, [pc, #524]	@ (8004c7c <USB_EPStartXfer+0xaa4>)
 8004a70:	4694      	mov	ip, r2
 8004a72:	4463      	add	r3, ip
 8004a74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a76:	1d7b      	adds	r3, r7, #5
 8004a78:	33ff      	adds	r3, #255	@ 0xff
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004a82:	2076      	movs	r0, #118	@ 0x76
 8004a84:	183b      	adds	r3, r7, r0
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	8952      	ldrh	r2, [r2, #10]
 8004a8a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6959      	ldr	r1, [r3, #20]
 8004a90:	1d7b      	adds	r3, r7, #5
 8004a92:	33ff      	adds	r3, #255	@ 0xff
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	b29c      	uxth	r4, r3
 8004a98:	183b      	adds	r3, r7, r0
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	0023      	movs	r3, r4
 8004aa0:	f000 fe0c 	bl	80056bc <USB_WritePMA>
 8004aa4:	e0ab      	b.n	8004bfe <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d000      	beq.n	8004ab0 <USB_EPStartXfer+0x8d8>
 8004aae:	e070      	b.n	8004b92 <USB_EPStartXfer+0x9ba>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2250      	movs	r2, #80	@ 0x50
 8004ab8:	5a9b      	ldrh	r3, [r3, r2]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	001a      	movs	r2, r3
 8004abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac0:	189b      	adds	r3, r3, r2
 8004ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	00da      	lsls	r2, r3, #3
 8004aca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004acc:	18d3      	adds	r3, r2, r3
 8004ace:	4a6d      	ldr	r2, [pc, #436]	@ (8004c84 <USB_EPStartXfer+0xaac>)
 8004ad0:	4694      	mov	ip, r2
 8004ad2:	4463      	add	r3, ip
 8004ad4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	059b      	lsls	r3, r3, #22
 8004ade:	0d9b      	lsrs	r3, r3, #22
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	1d7b      	adds	r3, r7, #5
 8004ae8:	33ff      	adds	r3, #255	@ 0xff
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b3e      	cmp	r3, #62	@ 0x3e
 8004aee:	d922      	bls.n	8004b36 <USB_EPStartXfer+0x95e>
 8004af0:	1d7b      	adds	r3, r7, #5
 8004af2:	33ff      	adds	r3, #255	@ 0xff
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	21ec      	movs	r1, #236	@ 0xec
 8004afa:	187a      	adds	r2, r7, r1
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	1d7b      	adds	r3, r7, #5
 8004b00:	33ff      	adds	r3, #255	@ 0xff
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	221f      	movs	r2, #31
 8004b06:	4013      	ands	r3, r2
 8004b08:	d104      	bne.n	8004b14 <USB_EPStartXfer+0x93c>
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	187a      	adds	r2, r7, r1
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	23ec      	movs	r3, #236	@ 0xec
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4a55      	ldr	r2, [pc, #340]	@ (8004c80 <USB_EPStartXfer+0xaa8>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e052      	b.n	8004bdc <USB_EPStartXfer+0xa04>
 8004b36:	1d7b      	adds	r3, r7, #5
 8004b38:	33ff      	adds	r3, #255	@ 0xff
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d108      	bne.n	8004b52 <USB_EPStartXfer+0x97a>
 8004b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	4a4e      	ldr	r2, [pc, #312]	@ (8004c80 <USB_EPStartXfer+0xaa8>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	e044      	b.n	8004bdc <USB_EPStartXfer+0xa04>
 8004b52:	1d7b      	adds	r3, r7, #5
 8004b54:	33ff      	adds	r3, #255	@ 0xff
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	21ec      	movs	r1, #236	@ 0xec
 8004b5c:	187a      	adds	r2, r7, r1
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	1d7b      	adds	r3, r7, #5
 8004b62:	33ff      	adds	r3, #255	@ 0xff
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2201      	movs	r2, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <USB_EPStartXfer+0x99e>
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	187a      	adds	r2, r7, r1
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	23ec      	movs	r3, #236	@ 0xec
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	029b      	lsls	r3, r3, #10
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	e024      	b.n	8004bdc <USB_EPStartXfer+0xa04>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d120      	bne.n	8004bdc <USB_EPStartXfer+0xa04>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2184      	movs	r1, #132	@ 0x84
 8004b9e:	187a      	adds	r2, r7, r1
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2250      	movs	r2, #80	@ 0x50
 8004ba6:	5a9b      	ldrh	r3, [r3, r2]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	001a      	movs	r2, r3
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	187a      	adds	r2, r7, r1
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	00da      	lsls	r2, r3, #3
 8004bbc:	187b      	adds	r3, r7, r1
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	18d3      	adds	r3, r2, r3
 8004bc2:	4a30      	ldr	r2, [pc, #192]	@ (8004c84 <USB_EPStartXfer+0xaac>)
 8004bc4:	4694      	mov	ip, r2
 8004bc6:	4463      	add	r3, ip
 8004bc8:	2180      	movs	r1, #128	@ 0x80
 8004bca:	187a      	adds	r2, r7, r1
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	1d7b      	adds	r3, r7, #5
 8004bd0:	33ff      	adds	r3, #255	@ 0xff
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004bdc:	2076      	movs	r0, #118	@ 0x76
 8004bde:	183b      	adds	r3, r7, r0
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	8912      	ldrh	r2, [r2, #8]
 8004be4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6959      	ldr	r1, [r3, #20]
 8004bea:	1d7b      	adds	r3, r7, #5
 8004bec:	33ff      	adds	r3, #255	@ 0xff
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b29c      	uxth	r4, r3
 8004bf2:	183b      	adds	r3, r7, r0
 8004bf4:	881a      	ldrh	r2, [r3, #0]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	0023      	movs	r3, r4
 8004bfa:	f000 fd5f 	bl	80056bc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	200a      	movs	r0, #10
 8004c0e:	183b      	adds	r3, r7, r0
 8004c10:	491d      	ldr	r1, [pc, #116]	@ (8004c88 <USB_EPStartXfer+0xab0>)
 8004c12:	400a      	ands	r2, r1
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	183b      	adds	r3, r7, r0
 8004c18:	183a      	adds	r2, r7, r0
 8004c1a:	8812      	ldrh	r2, [r2, #0]
 8004c1c:	2110      	movs	r1, #16
 8004c1e:	404a      	eors	r2, r1
 8004c20:	801a      	strh	r2, [r3, #0]
 8004c22:	183b      	adds	r3, r7, r0
 8004c24:	183a      	adds	r2, r7, r0
 8004c26:	8812      	ldrh	r2, [r2, #0]
 8004c28:	2120      	movs	r1, #32
 8004c2a:	404a      	eors	r2, r1
 8004c2c:	801a      	strh	r2, [r3, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	18d3      	adds	r3, r2, r3
 8004c38:	183a      	adds	r2, r7, r0
 8004c3a:	8812      	ldrh	r2, [r2, #0]
 8004c3c:	4913      	ldr	r1, [pc, #76]	@ (8004c8c <USB_EPStartXfer+0xab4>)
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	b292      	uxth	r2, r2
 8004c42:	801a      	strh	r2, [r3, #0]
 8004c44:	f000 fbf4 	bl	8005430 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	7b1b      	ldrb	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d000      	beq.n	8004c52 <USB_EPStartXfer+0xa7a>
 8004c50:	e0a9      	b.n	8004da6 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d918      	bls.n	8004c90 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	1d7a      	adds	r2, r7, #5
 8004c64:	32ff      	adds	r2, #255	@ 0xff
 8004c66:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	699a      	ldr	r2, [r3, #24]
 8004c6c:	1d7b      	adds	r3, r7, #5
 8004c6e:	33ff      	adds	r3, #255	@ 0xff
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	619a      	str	r2, [r3, #24]
 8004c78:	e012      	b.n	8004ca0 <USB_EPStartXfer+0xac8>
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	00000406 	.word	0x00000406
 8004c80:	ffff8000 	.word	0xffff8000
 8004c84:	00000402 	.word	0x00000402
 8004c88:	ffff8fbf 	.word	0xffff8fbf
 8004c8c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	1d7a      	adds	r2, r7, #5
 8004c96:	32ff      	adds	r2, #255	@ 0xff
 8004c98:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2190      	movs	r1, #144	@ 0x90
 8004ca4:	187a      	adds	r2, r7, r1
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2250      	movs	r2, #80	@ 0x50
 8004cac:	5a9b      	ldrh	r3, [r3, r2]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	187b      	adds	r3, r7, r1
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	189b      	adds	r3, r3, r2
 8004cb8:	187a      	adds	r2, r7, r1
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	00da      	lsls	r2, r3, #3
 8004cc2:	187b      	adds	r3, r7, r1
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	18d3      	adds	r3, r2, r3
 8004cc8:	4acf      	ldr	r2, [pc, #828]	@ (8005008 <USB_EPStartXfer+0xe30>)
 8004cca:	4694      	mov	ip, r2
 8004ccc:	4463      	add	r3, ip
 8004cce:	218c      	movs	r1, #140	@ 0x8c
 8004cd0:	187a      	adds	r2, r7, r1
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	059b      	lsls	r3, r3, #22
 8004cde:	0d9b      	lsrs	r3, r3, #22
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	801a      	strh	r2, [r3, #0]
 8004ce8:	1d7b      	adds	r3, r7, #5
 8004cea:	33ff      	adds	r3, #255	@ 0xff
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cf0:	d925      	bls.n	8004d3e <USB_EPStartXfer+0xb66>
 8004cf2:	1d7b      	adds	r3, r7, #5
 8004cf4:	33ff      	adds	r3, #255	@ 0xff
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	21e8      	movs	r1, #232	@ 0xe8
 8004cfc:	187a      	adds	r2, r7, r1
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	1d7b      	adds	r3, r7, #5
 8004d02:	33ff      	adds	r3, #255	@ 0xff
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	221f      	movs	r2, #31
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d104      	bne.n	8004d16 <USB_EPStartXfer+0xb3e>
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	187a      	adds	r2, r7, r1
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	218c      	movs	r1, #140	@ 0x8c
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	23e8      	movs	r3, #232	@ 0xe8
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4ab6      	ldr	r2, [pc, #728]	@ (800500c <USB_EPStartXfer+0xe34>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	187b      	adds	r3, r7, r1
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	e353      	b.n	80053e6 <USB_EPStartXfer+0x120e>
 8004d3e:	1d7b      	adds	r3, r7, #5
 8004d40:	33ff      	adds	r3, #255	@ 0xff
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <USB_EPStartXfer+0xb88>
 8004d48:	218c      	movs	r1, #140	@ 0x8c
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4aae      	ldr	r2, [pc, #696]	@ (800500c <USB_EPStartXfer+0xe34>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	187b      	adds	r3, r7, r1
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	801a      	strh	r2, [r3, #0]
 8004d5e:	e342      	b.n	80053e6 <USB_EPStartXfer+0x120e>
 8004d60:	1d7b      	adds	r3, r7, #5
 8004d62:	33ff      	adds	r3, #255	@ 0xff
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	21e8      	movs	r1, #232	@ 0xe8
 8004d6a:	187a      	adds	r2, r7, r1
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	1d7b      	adds	r3, r7, #5
 8004d70:	33ff      	adds	r3, #255	@ 0xff
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2201      	movs	r2, #1
 8004d76:	4013      	ands	r3, r2
 8004d78:	d004      	beq.n	8004d84 <USB_EPStartXfer+0xbac>
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	187a      	adds	r2, r7, r1
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	218c      	movs	r1, #140	@ 0x8c
 8004d86:	187b      	adds	r3, r7, r1
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	23e8      	movs	r3, #232	@ 0xe8
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	187b      	adds	r3, r7, r1
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e31f      	b.n	80053e6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	78db      	ldrb	r3, [r3, #3]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d000      	beq.n	8004db0 <USB_EPStartXfer+0xbd8>
 8004dae:	e191      	b.n	80050d4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d000      	beq.n	8004dba <USB_EPStartXfer+0xbe2>
 8004db8:	e07c      	b.n	8004eb4 <USB_EPStartXfer+0xcdc>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	21ac      	movs	r1, #172	@ 0xac
 8004dbe:	187a      	adds	r2, r7, r1
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2250      	movs	r2, #80	@ 0x50
 8004dc6:	5a9b      	ldrh	r3, [r3, r2]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	001a      	movs	r2, r3
 8004dcc:	187b      	adds	r3, r7, r1
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	187a      	adds	r2, r7, r1
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	00da      	lsls	r2, r3, #3
 8004ddc:	187b      	adds	r3, r7, r1
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	4a8b      	ldr	r2, [pc, #556]	@ (8005010 <USB_EPStartXfer+0xe38>)
 8004de4:	4694      	mov	ip, r2
 8004de6:	4463      	add	r3, ip
 8004de8:	21a8      	movs	r1, #168	@ 0xa8
 8004dea:	187a      	adds	r2, r7, r1
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	187b      	adds	r3, r7, r1
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	059b      	lsls	r3, r3, #22
 8004df8:	0d9b      	lsrs	r3, r3, #22
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e08:	d923      	bls.n	8004e52 <USB_EPStartXfer+0xc7a>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	21e4      	movs	r1, #228	@ 0xe4
 8004e12:	187a      	adds	r2, r7, r1
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	221f      	movs	r2, #31
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d104      	bne.n	8004e2a <USB_EPStartXfer+0xc52>
 8004e20:	187b      	adds	r3, r7, r1
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	187a      	adds	r2, r7, r1
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	21a8      	movs	r1, #168	@ 0xa8
 8004e2c:	187b      	adds	r3, r7, r1
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	23e4      	movs	r3, #228	@ 0xe4
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	029b      	lsls	r3, r3, #10
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	4313      	orrs	r3, r2
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	4a71      	ldr	r2, [pc, #452]	@ (800500c <USB_EPStartXfer+0xe34>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	e054      	b.n	8004efc <USB_EPStartXfer+0xd24>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <USB_EPStartXfer+0xc9a>
 8004e5a:	21a8      	movs	r1, #168	@ 0xa8
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4a69      	ldr	r2, [pc, #420]	@ (800500c <USB_EPStartXfer+0xe34>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	187b      	adds	r3, r7, r1
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	801a      	strh	r2, [r3, #0]
 8004e70:	e044      	b.n	8004efc <USB_EPStartXfer+0xd24>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	21e4      	movs	r1, #228	@ 0xe4
 8004e7a:	187a      	adds	r2, r7, r1
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2201      	movs	r2, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d004      	beq.n	8004e92 <USB_EPStartXfer+0xcba>
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	187a      	adds	r2, r7, r1
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	21a8      	movs	r1, #168	@ 0xa8
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	23e4      	movs	r3, #228	@ 0xe4
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	801a      	strh	r2, [r3, #0]
 8004eb2:	e023      	b.n	8004efc <USB_EPStartXfer+0xd24>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d11f      	bne.n	8004efc <USB_EPStartXfer+0xd24>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	21b4      	movs	r1, #180	@ 0xb4
 8004ec0:	187a      	adds	r2, r7, r1
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2250      	movs	r2, #80	@ 0x50
 8004ec8:	5a9b      	ldrh	r3, [r3, r2]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	001a      	movs	r2, r3
 8004ece:	187b      	adds	r3, r7, r1
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	187a      	adds	r2, r7, r1
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	00da      	lsls	r2, r3, #3
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	18d3      	adds	r3, r2, r3
 8004ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8005010 <USB_EPStartXfer+0xe38>)
 8004ee6:	4694      	mov	ip, r2
 8004ee8:	4463      	add	r3, ip
 8004eea:	21b0      	movs	r1, #176	@ 0xb0
 8004eec:	187a      	adds	r2, r7, r1
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	22a4      	movs	r2, #164	@ 0xa4
 8004f00:	18ba      	adds	r2, r7, r2
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d000      	beq.n	8004f0e <USB_EPStartXfer+0xd36>
 8004f0c:	e082      	b.n	8005014 <USB_EPStartXfer+0xe3c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	219c      	movs	r1, #156	@ 0x9c
 8004f12:	187a      	adds	r2, r7, r1
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2250      	movs	r2, #80	@ 0x50
 8004f1a:	5a9b      	ldrh	r3, [r3, r2]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	001a      	movs	r2, r3
 8004f20:	187b      	adds	r3, r7, r1
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	189b      	adds	r3, r3, r2
 8004f26:	187a      	adds	r2, r7, r1
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	00da      	lsls	r2, r3, #3
 8004f30:	187b      	adds	r3, r7, r1
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	18d3      	adds	r3, r2, r3
 8004f36:	4a34      	ldr	r2, [pc, #208]	@ (8005008 <USB_EPStartXfer+0xe30>)
 8004f38:	4694      	mov	ip, r2
 8004f3a:	4463      	add	r3, ip
 8004f3c:	2198      	movs	r1, #152	@ 0x98
 8004f3e:	187a      	adds	r2, r7, r1
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	187b      	adds	r3, r7, r1
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	059b      	lsls	r3, r3, #22
 8004f4c:	0d9b      	lsrs	r3, r3, #22
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	187b      	adds	r3, r7, r1
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f5c:	d923      	bls.n	8004fa6 <USB_EPStartXfer+0xdce>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	21e0      	movs	r1, #224	@ 0xe0
 8004f66:	187a      	adds	r2, r7, r1
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	221f      	movs	r2, #31
 8004f70:	4013      	ands	r3, r2
 8004f72:	d104      	bne.n	8004f7e <USB_EPStartXfer+0xda6>
 8004f74:	187b      	adds	r3, r7, r1
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	187a      	adds	r2, r7, r1
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	2198      	movs	r1, #152	@ 0x98
 8004f80:	187b      	adds	r3, r7, r1
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	23e0      	movs	r3, #224	@ 0xe0
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4313      	orrs	r3, r2
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <USB_EPStartXfer+0xe34>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	187b      	adds	r3, r7, r1
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e057      	b.n	8005056 <USB_EPStartXfer+0xe7e>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <USB_EPStartXfer+0xdee>
 8004fae:	2198      	movs	r1, #152	@ 0x98
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	4a14      	ldr	r2, [pc, #80]	@ (800500c <USB_EPStartXfer+0xe34>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	187b      	adds	r3, r7, r1
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	e047      	b.n	8005056 <USB_EPStartXfer+0xe7e>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	21e0      	movs	r1, #224	@ 0xe0
 8004fce:	187a      	adds	r2, r7, r1
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <USB_EPStartXfer+0xe0e>
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	187a      	adds	r2, r7, r1
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	2198      	movs	r1, #152	@ 0x98
 8004fe8:	187b      	adds	r3, r7, r1
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	23e0      	movs	r3, #224	@ 0xe0
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	029b      	lsls	r3, r3, #10
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	187b      	adds	r3, r7, r1
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e026      	b.n	8005056 <USB_EPStartXfer+0xe7e>
 8005008:	00000406 	.word	0x00000406
 800500c:	ffff8000 	.word	0xffff8000
 8005010:	00000402 	.word	0x00000402
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d11c      	bne.n	8005056 <USB_EPStartXfer+0xe7e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2250      	movs	r2, #80	@ 0x50
 8005020:	5a9b      	ldrh	r3, [r3, r2]
 8005022:	b29b      	uxth	r3, r3
 8005024:	001a      	movs	r2, r3
 8005026:	21a4      	movs	r1, #164	@ 0xa4
 8005028:	187b      	adds	r3, r7, r1
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	189b      	adds	r3, r3, r2
 800502e:	187a      	adds	r2, r7, r1
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	00da      	lsls	r2, r3, #3
 8005038:	187b      	adds	r3, r7, r1
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	18d3      	adds	r3, r2, r3
 800503e:	4ad2      	ldr	r2, [pc, #840]	@ (8005388 <USB_EPStartXfer+0x11b0>)
 8005040:	4694      	mov	ip, r2
 8005042:	4463      	add	r3, ip
 8005044:	21a0      	movs	r1, #160	@ 0xa0
 8005046:	187a      	adds	r2, r7, r1
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	b29a      	uxth	r2, r3
 8005050:	187b      	adds	r3, r7, r1
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d100      	bne.n	8005060 <USB_EPStartXfer+0xe88>
 800505e:	e1c2      	b.n	80053e6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	18d2      	adds	r2, r2, r3
 800506a:	2196      	movs	r1, #150	@ 0x96
 800506c:	187b      	adds	r3, r7, r1
 800506e:	8812      	ldrh	r2, [r2, #0]
 8005070:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005072:	187b      	adds	r3, r7, r1
 8005074:	881a      	ldrh	r2, [r3, #0]
 8005076:	2380      	movs	r3, #128	@ 0x80
 8005078:	01db      	lsls	r3, r3, #7
 800507a:	4013      	ands	r3, r2
 800507c:	d004      	beq.n	8005088 <USB_EPStartXfer+0xeb0>
 800507e:	187b      	adds	r3, r7, r1
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	2240      	movs	r2, #64	@ 0x40
 8005084:	4013      	ands	r3, r2
 8005086:	d10d      	bne.n	80050a4 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005088:	2196      	movs	r1, #150	@ 0x96
 800508a:	187b      	adds	r3, r7, r1
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	2380      	movs	r3, #128	@ 0x80
 8005090:	01db      	lsls	r3, r3, #7
 8005092:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005094:	d000      	beq.n	8005098 <USB_EPStartXfer+0xec0>
 8005096:	e1a6      	b.n	80053e6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005098:	187b      	adds	r3, r7, r1
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	2240      	movs	r2, #64	@ 0x40
 800509e:	4013      	ands	r3, r2
 80050a0:	d000      	beq.n	80050a4 <USB_EPStartXfer+0xecc>
 80050a2:	e1a0      	b.n	80053e6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	18d3      	adds	r3, r2, r3
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	2094      	movs	r0, #148	@ 0x94
 80050b4:	183b      	adds	r3, r7, r0
 80050b6:	49b5      	ldr	r1, [pc, #724]	@ (800538c <USB_EPStartXfer+0x11b4>)
 80050b8:	400a      	ands	r2, r1
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	18d3      	adds	r3, r2, r3
 80050c6:	183a      	adds	r2, r7, r0
 80050c8:	8812      	ldrh	r2, [r2, #0]
 80050ca:	49b1      	ldr	r1, [pc, #708]	@ (8005390 <USB_EPStartXfer+0x11b8>)
 80050cc:	430a      	orrs	r2, r1
 80050ce:	b292      	uxth	r2, r2
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	e188      	b.n	80053e6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d000      	beq.n	80050de <USB_EPStartXfer+0xf06>
 80050dc:	e181      	b.n	80053e2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d90d      	bls.n	8005106 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	1d7a      	adds	r2, r7, #5
 80050f0:	32ff      	adds	r2, #255	@ 0xff
 80050f2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	1d7b      	adds	r3, r7, #5
 80050fa:	33ff      	adds	r3, #255	@ 0xff
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	619a      	str	r2, [r3, #24]
 8005104:	e007      	b.n	8005116 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	1d7a      	adds	r2, r7, #5
 800510c:	32ff      	adds	r2, #255	@ 0xff
 800510e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d000      	beq.n	8005120 <USB_EPStartXfer+0xf48>
 800511e:	e082      	b.n	8005226 <USB_EPStartXfer+0x104e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	21cc      	movs	r1, #204	@ 0xcc
 8005124:	187a      	adds	r2, r7, r1
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2250      	movs	r2, #80	@ 0x50
 800512c:	5a9b      	ldrh	r3, [r3, r2]
 800512e:	b29b      	uxth	r3, r3
 8005130:	001a      	movs	r2, r3
 8005132:	187b      	adds	r3, r7, r1
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	189b      	adds	r3, r3, r2
 8005138:	187a      	adds	r2, r7, r1
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	00da      	lsls	r2, r3, #3
 8005142:	187b      	adds	r3, r7, r1
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	18d3      	adds	r3, r2, r3
 8005148:	4a92      	ldr	r2, [pc, #584]	@ (8005394 <USB_EPStartXfer+0x11bc>)
 800514a:	4694      	mov	ip, r2
 800514c:	4463      	add	r3, ip
 800514e:	21c8      	movs	r1, #200	@ 0xc8
 8005150:	187a      	adds	r2, r7, r1
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	187b      	adds	r3, r7, r1
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	b29b      	uxth	r3, r3
 800515c:	059b      	lsls	r3, r3, #22
 800515e:	0d9b      	lsrs	r3, r3, #22
 8005160:	b29a      	uxth	r2, r3
 8005162:	187b      	adds	r3, r7, r1
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	1d7b      	adds	r3, r7, #5
 800516a:	33ff      	adds	r3, #255	@ 0xff
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005170:	d925      	bls.n	80051be <USB_EPStartXfer+0xfe6>
 8005172:	1d7b      	adds	r3, r7, #5
 8005174:	33ff      	adds	r3, #255	@ 0xff
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	21dc      	movs	r1, #220	@ 0xdc
 800517c:	187a      	adds	r2, r7, r1
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	1d7b      	adds	r3, r7, #5
 8005182:	33ff      	adds	r3, #255	@ 0xff
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	221f      	movs	r2, #31
 8005188:	4013      	ands	r3, r2
 800518a:	d104      	bne.n	8005196 <USB_EPStartXfer+0xfbe>
 800518c:	187b      	adds	r3, r7, r1
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3b01      	subs	r3, #1
 8005192:	187a      	adds	r2, r7, r1
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	21c8      	movs	r1, #200	@ 0xc8
 8005198:	187b      	adds	r3, r7, r1
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29a      	uxth	r2, r3
 80051a0:	23dc      	movs	r3, #220	@ 0xdc
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	029b      	lsls	r3, r3, #10
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	4313      	orrs	r3, r2
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4a79      	ldr	r2, [pc, #484]	@ (8005398 <USB_EPStartXfer+0x11c0>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	187b      	adds	r3, r7, r1
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	e058      	b.n	8005270 <USB_EPStartXfer+0x1098>
 80051be:	1d7b      	adds	r3, r7, #5
 80051c0:	33ff      	adds	r3, #255	@ 0xff
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <USB_EPStartXfer+0x1008>
 80051c8:	21c8      	movs	r1, #200	@ 0xc8
 80051ca:	187b      	adds	r3, r7, r1
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	4a71      	ldr	r2, [pc, #452]	@ (8005398 <USB_EPStartXfer+0x11c0>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	e047      	b.n	8005270 <USB_EPStartXfer+0x1098>
 80051e0:	1d7b      	adds	r3, r7, #5
 80051e2:	33ff      	adds	r3, #255	@ 0xff
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	21dc      	movs	r1, #220	@ 0xdc
 80051ea:	187a      	adds	r2, r7, r1
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	1d7b      	adds	r3, r7, #5
 80051f0:	33ff      	adds	r3, #255	@ 0xff
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	4013      	ands	r3, r2
 80051f8:	d004      	beq.n	8005204 <USB_EPStartXfer+0x102c>
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	187a      	adds	r2, r7, r1
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	21c8      	movs	r1, #200	@ 0xc8
 8005206:	187b      	adds	r3, r7, r1
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29a      	uxth	r2, r3
 800520e:	23dc      	movs	r3, #220	@ 0xdc
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	b29b      	uxth	r3, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	b29a      	uxth	r2, r3
 800521e:	187b      	adds	r3, r7, r1
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	e024      	b.n	8005270 <USB_EPStartXfer+0x1098>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d120      	bne.n	8005270 <USB_EPStartXfer+0x1098>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	21d4      	movs	r1, #212	@ 0xd4
 8005232:	187a      	adds	r2, r7, r1
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2250      	movs	r2, #80	@ 0x50
 800523a:	5a9b      	ldrh	r3, [r3, r2]
 800523c:	b29b      	uxth	r3, r3
 800523e:	001a      	movs	r2, r3
 8005240:	187b      	adds	r3, r7, r1
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	189b      	adds	r3, r3, r2
 8005246:	187a      	adds	r2, r7, r1
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	00da      	lsls	r2, r3, #3
 8005250:	187b      	adds	r3, r7, r1
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	4a4f      	ldr	r2, [pc, #316]	@ (8005394 <USB_EPStartXfer+0x11bc>)
 8005258:	4694      	mov	ip, r2
 800525a:	4463      	add	r3, ip
 800525c:	21d0      	movs	r1, #208	@ 0xd0
 800525e:	187a      	adds	r2, r7, r1
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	1d7b      	adds	r3, r7, #5
 8005264:	33ff      	adds	r3, #255	@ 0xff
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	b29a      	uxth	r2, r3
 800526a:	187b      	adds	r3, r7, r1
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	22c4      	movs	r2, #196	@ 0xc4
 8005274:	18ba      	adds	r2, r7, r2
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d000      	beq.n	8005282 <USB_EPStartXfer+0x10aa>
 8005280:	e08c      	b.n	800539c <USB_EPStartXfer+0x11c4>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	21bc      	movs	r1, #188	@ 0xbc
 8005286:	187a      	adds	r2, r7, r1
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2250      	movs	r2, #80	@ 0x50
 800528e:	5a9b      	ldrh	r3, [r3, r2]
 8005290:	b29b      	uxth	r3, r3
 8005292:	001a      	movs	r2, r3
 8005294:	187b      	adds	r3, r7, r1
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	189b      	adds	r3, r3, r2
 800529a:	187a      	adds	r2, r7, r1
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	00da      	lsls	r2, r3, #3
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	18d3      	adds	r3, r2, r3
 80052aa:	4a37      	ldr	r2, [pc, #220]	@ (8005388 <USB_EPStartXfer+0x11b0>)
 80052ac:	4694      	mov	ip, r2
 80052ae:	4463      	add	r3, ip
 80052b0:	21b8      	movs	r1, #184	@ 0xb8
 80052b2:	187a      	adds	r2, r7, r1
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	187b      	adds	r3, r7, r1
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	059b      	lsls	r3, r3, #22
 80052c0:	0d9b      	lsrs	r3, r3, #22
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	1d7b      	adds	r3, r7, #5
 80052cc:	33ff      	adds	r3, #255	@ 0xff
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80052d2:	d925      	bls.n	8005320 <USB_EPStartXfer+0x1148>
 80052d4:	1d7b      	adds	r3, r7, #5
 80052d6:	33ff      	adds	r3, #255	@ 0xff
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	21d8      	movs	r1, #216	@ 0xd8
 80052de:	187a      	adds	r2, r7, r1
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	1d7b      	adds	r3, r7, #5
 80052e4:	33ff      	adds	r3, #255	@ 0xff
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	221f      	movs	r2, #31
 80052ea:	4013      	ands	r3, r2
 80052ec:	d104      	bne.n	80052f8 <USB_EPStartXfer+0x1120>
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	187a      	adds	r2, r7, r1
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	21b8      	movs	r1, #184	@ 0xb8
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29a      	uxth	r2, r3
 8005302:	23d8      	movs	r3, #216	@ 0xd8
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	029b      	lsls	r3, r3, #10
 800530c:	b29b      	uxth	r3, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	4a21      	ldr	r2, [pc, #132]	@ (8005398 <USB_EPStartXfer+0x11c0>)
 8005314:	4313      	orrs	r3, r2
 8005316:	b29a      	uxth	r2, r3
 8005318:	187b      	adds	r3, r7, r1
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e062      	b.n	80053e6 <USB_EPStartXfer+0x120e>
 8005320:	1d7b      	adds	r3, r7, #5
 8005322:	33ff      	adds	r3, #255	@ 0xff
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <USB_EPStartXfer+0x116a>
 800532a:	21b8      	movs	r1, #184	@ 0xb8
 800532c:	187b      	adds	r3, r7, r1
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <USB_EPStartXfer+0x11c0>)
 8005336:	4313      	orrs	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	187b      	adds	r3, r7, r1
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e051      	b.n	80053e6 <USB_EPStartXfer+0x120e>
 8005342:	1d7b      	adds	r3, r7, #5
 8005344:	33ff      	adds	r3, #255	@ 0xff
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	21d8      	movs	r1, #216	@ 0xd8
 800534c:	187a      	adds	r2, r7, r1
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	1d7b      	adds	r3, r7, #5
 8005352:	33ff      	adds	r3, #255	@ 0xff
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2201      	movs	r2, #1
 8005358:	4013      	ands	r3, r2
 800535a:	d004      	beq.n	8005366 <USB_EPStartXfer+0x118e>
 800535c:	187b      	adds	r3, r7, r1
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	187a      	adds	r2, r7, r1
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	21b8      	movs	r1, #184	@ 0xb8
 8005368:	187b      	adds	r3, r7, r1
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29a      	uxth	r2, r3
 8005370:	23d8      	movs	r3, #216	@ 0xd8
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	029b      	lsls	r3, r3, #10
 800537a:	b29b      	uxth	r3, r3
 800537c:	4313      	orrs	r3, r2
 800537e:	b29a      	uxth	r2, r3
 8005380:	187b      	adds	r3, r7, r1
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e02e      	b.n	80053e6 <USB_EPStartXfer+0x120e>
 8005388:	00000406 	.word	0x00000406
 800538c:	ffff8f8f 	.word	0xffff8f8f
 8005390:	ffff80c0 	.word	0xffff80c0
 8005394:	00000402 	.word	0x00000402
 8005398:	ffff8000 	.word	0xffff8000
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d120      	bne.n	80053e6 <USB_EPStartXfer+0x120e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2250      	movs	r2, #80	@ 0x50
 80053a8:	5a9b      	ldrh	r3, [r3, r2]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	001a      	movs	r2, r3
 80053ae:	21c4      	movs	r1, #196	@ 0xc4
 80053b0:	187b      	adds	r3, r7, r1
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	189b      	adds	r3, r3, r2
 80053b6:	187a      	adds	r2, r7, r1
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	00da      	lsls	r2, r3, #3
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	18d3      	adds	r3, r2, r3
 80053c6:	4a1d      	ldr	r2, [pc, #116]	@ (800543c <USB_EPStartXfer+0x1264>)
 80053c8:	4694      	mov	ip, r2
 80053ca:	4463      	add	r3, ip
 80053cc:	21c0      	movs	r1, #192	@ 0xc0
 80053ce:	187a      	adds	r2, r7, r1
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	1d7b      	adds	r3, r7, #5
 80053d4:	33ff      	adds	r3, #255	@ 0xff
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	b29a      	uxth	r2, r3
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	e001      	b.n	80053e6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e025      	b.n	8005432 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	18d3      	adds	r3, r2, r3
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	208a      	movs	r0, #138	@ 0x8a
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	4911      	ldr	r1, [pc, #68]	@ (8005440 <USB_EPStartXfer+0x1268>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	183b      	adds	r3, r7, r0
 8005400:	183a      	adds	r2, r7, r0
 8005402:	8812      	ldrh	r2, [r2, #0]
 8005404:	2180      	movs	r1, #128	@ 0x80
 8005406:	0149      	lsls	r1, r1, #5
 8005408:	404a      	eors	r2, r1
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	183b      	adds	r3, r7, r0
 800540e:	183a      	adds	r2, r7, r0
 8005410:	8812      	ldrh	r2, [r2, #0]
 8005412:	2180      	movs	r1, #128	@ 0x80
 8005414:	0189      	lsls	r1, r1, #6
 8005416:	404a      	eors	r2, r1
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	18d3      	adds	r3, r2, r3
 8005424:	183a      	adds	r2, r7, r0
 8005426:	8812      	ldrh	r2, [r2, #0]
 8005428:	4906      	ldr	r1, [pc, #24]	@ (8005444 <USB_EPStartXfer+0x126c>)
 800542a:	430a      	orrs	r2, r1
 800542c:	b292      	uxth	r2, r2
 800542e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	0018      	movs	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	b043      	add	sp, #268	@ 0x10c
 8005438:	bd90      	pop	{r4, r7, pc}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	00000406 	.word	0x00000406
 8005440:	ffffbf8f 	.word	0xffffbf8f
 8005444:	ffff8080 	.word	0xffff8080

08005448 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01d      	beq.n	8005496 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	18d3      	adds	r3, r2, r3
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29a      	uxth	r2, r3
 8005468:	200c      	movs	r0, #12
 800546a:	183b      	adds	r3, r7, r0
 800546c:	491b      	ldr	r1, [pc, #108]	@ (80054dc <USB_EPSetStall+0x94>)
 800546e:	400a      	ands	r2, r1
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	183b      	adds	r3, r7, r0
 8005474:	183a      	adds	r2, r7, r0
 8005476:	8812      	ldrh	r2, [r2, #0]
 8005478:	2110      	movs	r1, #16
 800547a:	404a      	eors	r2, r1
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	18d3      	adds	r3, r2, r3
 8005488:	183a      	adds	r2, r7, r0
 800548a:	8812      	ldrh	r2, [r2, #0]
 800548c:	4914      	ldr	r1, [pc, #80]	@ (80054e0 <USB_EPSetStall+0x98>)
 800548e:	430a      	orrs	r2, r1
 8005490:	b292      	uxth	r2, r2
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	e01d      	b.n	80054d2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	18d3      	adds	r3, r2, r3
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	200e      	movs	r0, #14
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	490e      	ldr	r1, [pc, #56]	@ (80054e4 <USB_EPSetStall+0x9c>)
 80054aa:	400a      	ands	r2, r1
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	183b      	adds	r3, r7, r0
 80054b0:	183a      	adds	r2, r7, r0
 80054b2:	8812      	ldrh	r2, [r2, #0]
 80054b4:	2180      	movs	r1, #128	@ 0x80
 80054b6:	0149      	lsls	r1, r1, #5
 80054b8:	404a      	eors	r2, r1
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	18d3      	adds	r3, r2, r3
 80054c6:	183a      	adds	r2, r7, r0
 80054c8:	8812      	ldrh	r2, [r2, #0]
 80054ca:	4905      	ldr	r1, [pc, #20]	@ (80054e0 <USB_EPSetStall+0x98>)
 80054cc:	430a      	orrs	r2, r1
 80054ce:	b292      	uxth	r2, r2
 80054d0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b004      	add	sp, #16
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	ffff8fbf 	.word	0xffff8fbf
 80054e0:	ffff8080 	.word	0xffff8080
 80054e4:	ffffbf8f 	.word	0xffffbf8f

080054e8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	7b1b      	ldrb	r3, [r3, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d000      	beq.n	80054fc <USB_EPClearStall+0x14>
 80054fa:	e095      	b.n	8005628 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d046      	beq.n	8005592 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	18d2      	adds	r2, r2, r3
 800550e:	2110      	movs	r1, #16
 8005510:	187b      	adds	r3, r7, r1
 8005512:	8812      	ldrh	r2, [r2, #0]
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	187b      	adds	r3, r7, r1
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2240      	movs	r2, #64	@ 0x40
 800551c:	4013      	ands	r3, r2
 800551e:	d016      	beq.n	800554e <USB_EPClearStall+0x66>
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	18d3      	adds	r3, r2, r3
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29a      	uxth	r2, r3
 800552e:	200e      	movs	r0, #14
 8005530:	183b      	adds	r3, r7, r0
 8005532:	4940      	ldr	r1, [pc, #256]	@ (8005634 <USB_EPClearStall+0x14c>)
 8005534:	400a      	ands	r2, r1
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	18d3      	adds	r3, r2, r3
 8005542:	183a      	adds	r2, r7, r0
 8005544:	8812      	ldrh	r2, [r2, #0]
 8005546:	493c      	ldr	r1, [pc, #240]	@ (8005638 <USB_EPClearStall+0x150>)
 8005548:	430a      	orrs	r2, r1
 800554a:	b292      	uxth	r2, r2
 800554c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	78db      	ldrb	r3, [r3, #3]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d068      	beq.n	8005628 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	18d3      	adds	r3, r2, r3
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29a      	uxth	r2, r3
 8005564:	200c      	movs	r0, #12
 8005566:	183b      	adds	r3, r7, r0
 8005568:	4934      	ldr	r1, [pc, #208]	@ (800563c <USB_EPClearStall+0x154>)
 800556a:	400a      	ands	r2, r1
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	183b      	adds	r3, r7, r0
 8005570:	183a      	adds	r2, r7, r0
 8005572:	8812      	ldrh	r2, [r2, #0]
 8005574:	2120      	movs	r1, #32
 8005576:	404a      	eors	r2, r1
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	18d3      	adds	r3, r2, r3
 8005584:	183a      	adds	r2, r7, r0
 8005586:	8812      	ldrh	r2, [r2, #0]
 8005588:	492d      	ldr	r1, [pc, #180]	@ (8005640 <USB_EPClearStall+0x158>)
 800558a:	430a      	orrs	r2, r1
 800558c:	b292      	uxth	r2, r2
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	e04a      	b.n	8005628 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	18d2      	adds	r2, r2, r3
 800559c:	2116      	movs	r1, #22
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	@ 0x80
 80055aa:	01db      	lsls	r3, r3, #7
 80055ac:	4013      	ands	r3, r2
 80055ae:	d016      	beq.n	80055de <USB_EPClearStall+0xf6>
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	18d3      	adds	r3, r2, r3
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29a      	uxth	r2, r3
 80055be:	2014      	movs	r0, #20
 80055c0:	183b      	adds	r3, r7, r0
 80055c2:	491c      	ldr	r1, [pc, #112]	@ (8005634 <USB_EPClearStall+0x14c>)
 80055c4:	400a      	ands	r2, r1
 80055c6:	801a      	strh	r2, [r3, #0]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	18d3      	adds	r3, r2, r3
 80055d2:	183a      	adds	r2, r7, r0
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	491b      	ldr	r1, [pc, #108]	@ (8005644 <USB_EPClearStall+0x15c>)
 80055d8:	430a      	orrs	r2, r1
 80055da:	b292      	uxth	r2, r2
 80055dc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	18d3      	adds	r3, r2, r3
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	2012      	movs	r0, #18
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	4915      	ldr	r1, [pc, #84]	@ (8005648 <USB_EPClearStall+0x160>)
 80055f2:	400a      	ands	r2, r1
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	183b      	adds	r3, r7, r0
 80055f8:	183a      	adds	r2, r7, r0
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	2180      	movs	r1, #128	@ 0x80
 80055fe:	0149      	lsls	r1, r1, #5
 8005600:	404a      	eors	r2, r1
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	183b      	adds	r3, r7, r0
 8005606:	183a      	adds	r2, r7, r0
 8005608:	8812      	ldrh	r2, [r2, #0]
 800560a:	2180      	movs	r1, #128	@ 0x80
 800560c:	0189      	lsls	r1, r1, #6
 800560e:	404a      	eors	r2, r1
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	18d3      	adds	r3, r2, r3
 800561c:	183a      	adds	r2, r7, r0
 800561e:	8812      	ldrh	r2, [r2, #0]
 8005620:	4907      	ldr	r1, [pc, #28]	@ (8005640 <USB_EPClearStall+0x158>)
 8005622:	430a      	orrs	r2, r1
 8005624:	b292      	uxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b006      	add	sp, #24
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			@ (mov r8, r8)
 8005634:	ffff8f8f 	.word	0xffff8f8f
 8005638:	ffff80c0 	.word	0xffff80c0
 800563c:	ffff8fbf 	.word	0xffff8fbf
 8005640:	ffff8080 	.word	0xffff8080
 8005644:	ffffc080 	.word	0xffffc080
 8005648:	ffffbf8f 	.word	0xffffbf8f

0800564c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	000a      	movs	r2, r1
 8005656:	1cfb      	adds	r3, r7, #3
 8005658:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800565a:	1cfb      	adds	r3, r7, #3
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	224c      	movs	r2, #76	@ 0x4c
 8005666:	2180      	movs	r1, #128	@ 0x80
 8005668:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}

08005674 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2258      	movs	r2, #88	@ 0x58
 8005680:	5a9b      	ldrh	r3, [r3, r2]
 8005682:	b29b      	uxth	r3, r3
 8005684:	4a05      	ldr	r2, [pc, #20]	@ (800569c <USB_DevConnect+0x28>)
 8005686:	4313      	orrs	r3, r2
 8005688:	b299      	uxth	r1, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2258      	movs	r2, #88	@ 0x58
 800568e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b002      	add	sp, #8
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			@ (mov r8, r8)
 800569c:	ffff8000 	.word	0xffff8000

080056a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2244      	movs	r2, #68	@ 0x44
 80056ac:	5a9b      	ldrh	r3, [r3, r2]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80056b2:	68fb      	ldr	r3, [r7, #12]
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b004      	add	sp, #16
 80056ba:	bd80      	pop	{r7, pc}

080056bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	@ 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	0019      	movs	r1, r3
 80056c8:	1dbb      	adds	r3, r7, #6
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	1c0a      	adds	r2, r1, #0
 80056d0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056d2:	1d3b      	adds	r3, r7, #4
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056e4:	1dbb      	adds	r3, r7, #6
 80056e6:	881a      	ldrh	r2, [r3, #0]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	18d3      	adds	r3, r2, r3
 80056ec:	2280      	movs	r2, #128	@ 0x80
 80056ee:	00d2      	lsls	r2, r2, #3
 80056f0:	4694      	mov	ip, r2
 80056f2:	4463      	add	r3, ip
 80056f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fa:	e020      	b.n	800573e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	2112      	movs	r1, #18
 8005702:	187b      	adds	r3, r7, r1
 8005704:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3301      	adds	r3, #1
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	b21a      	sxth	r2, r3
 8005710:	187b      	adds	r3, r7, r1
 8005712:	2000      	movs	r0, #0
 8005714:	5e1b      	ldrsh	r3, [r3, r0]
 8005716:	4313      	orrs	r3, r2
 8005718:	b21a      	sxth	r2, r3
 800571a:	187b      	adds	r3, r7, r1
 800571c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	187a      	adds	r2, r7, r1
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	3302      	adds	r3, #2
 800572a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3301      	adds	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	3b01      	subs	r3, #1
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1db      	bne.n	80056fc <USB_WritePMA+0x40>
  }
}
 8005744:	46c0      	nop			@ (mov r8, r8)
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	46bd      	mov	sp, r7
 800574a:	b00a      	add	sp, #40	@ 0x28
 800574c:	bd80      	pop	{r7, pc}

0800574e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b08a      	sub	sp, #40	@ 0x28
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	0019      	movs	r1, r3
 800575a:	1dbb      	adds	r3, r7, #6
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	1c0a      	adds	r2, r1, #0
 8005762:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005764:	1d3b      	adds	r3, r7, #4
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	b29b      	uxth	r3, r3
 800576c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005776:	1dbb      	adds	r3, r7, #6
 8005778:	881a      	ldrh	r2, [r3, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	18d3      	adds	r3, r2, r3
 800577e:	2280      	movs	r2, #128	@ 0x80
 8005780:	00d2      	lsls	r2, r2, #3
 8005782:	4694      	mov	ip, r2
 8005784:	4463      	add	r3, ip
 8005786:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
 800578c:	e018      	b.n	80057c0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	3302      	adds	r3, #2
 800579a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	3301      	adds	r3, #1
 80057b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	3b01      	subs	r3, #1
 80057be:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e3      	bne.n	800578e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	2201      	movs	r2, #1
 80057cc:	4013      	ands	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	701a      	strb	r2, [r3, #0]
  }
}
 80057e4:	46c0      	nop			@ (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b00a      	add	sp, #40	@ 0x28
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	000a      	movs	r2, r1
 80057f6:	1cfb      	adds	r3, r7, #3
 80057f8:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	2304      	movs	r3, #4
 80057fe:	2203      	movs	r2, #3
 8005800:	2181      	movs	r1, #129	@ 0x81
 8005802:	f001 fe48 	bl	8007496 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800580c:	2010      	movs	r0, #16
 800580e:	f001 ffc5 	bl	800779c <USBD_static_malloc>
 8005812:	0001      	movs	r1, r0
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	23ae      	movs	r3, #174	@ 0xae
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	23ae      	movs	r3, #174	@ 0xae
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	58d3      	ldr	r3, [r2, r3]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 8005828:	2302      	movs	r3, #2
 800582a:	e006      	b.n	800583a <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	23ae      	movs	r3, #174	@ 0xae
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	58d3      	ldr	r3, [r2, r3]
 8005834:	2200      	movs	r2, #0
 8005836:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	b002      	add	sp, #8
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	000a      	movs	r2, r1
 800584c:	1cfb      	adds	r3, r7, #3
 800584e:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2181      	movs	r1, #129	@ 0x81
 8005854:	0018      	movs	r0, r3
 8005856:	f001 fe55 	bl	8007504 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	23ae      	movs	r3, #174	@ 0xae
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	58d3      	ldr	r3, [r2, r3]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	23ae      	movs	r3, #174	@ 0xae
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	58d3      	ldr	r3, [r2, r3]
 8005874:	0018      	movs	r0, r3
 8005876:	f001 ff9d 	bl	80077b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	23ae      	movs	r3, #174	@ 0xae
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	2100      	movs	r1, #0
 8005882:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b002      	add	sp, #8
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	23ae      	movs	r3, #174	@ 0xae
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	58d3      	ldr	r3, [r2, r3]
 80058a2:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80058a4:	231e      	movs	r3, #30
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	2200      	movs	r2, #0
 80058aa:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80058b0:	230e      	movs	r3, #14
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	2200      	movs	r2, #0
 80058b6:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058b8:	2317      	movs	r3, #23
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	001a      	movs	r2, r3
 80058c6:	2360      	movs	r3, #96	@ 0x60
 80058c8:	4013      	ands	r3, r2
 80058ca:	d03a      	beq.n	8005942 <USBD_HID_Setup+0xb2>
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d000      	beq.n	80058d2 <USBD_HID_Setup+0x42>
 80058d0:	e0d6      	b.n	8005a80 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	785b      	ldrb	r3, [r3, #1]
 80058d6:	2b0b      	cmp	r3, #11
 80058d8:	d008      	beq.n	80058ec <USBD_HID_Setup+0x5c>
 80058da:	dc26      	bgt.n	800592a <USBD_HID_Setup+0x9a>
 80058dc:	2b0a      	cmp	r3, #10
 80058de:	d013      	beq.n	8005908 <USBD_HID_Setup+0x78>
 80058e0:	dc23      	bgt.n	800592a <USBD_HID_Setup+0x9a>
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d019      	beq.n	800591a <USBD_HID_Setup+0x8a>
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d007      	beq.n	80058fa <USBD_HID_Setup+0x6a>
 80058ea:	e01e      	b.n	800592a <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	885b      	ldrh	r3, [r3, #2]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	001a      	movs	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	601a      	str	r2, [r3, #0]
          break;
 80058f8:	e022      	b.n	8005940 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80058fa:	6939      	ldr	r1, [r7, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	0018      	movs	r0, r3
 8005902:	f001 fabc 	bl	8006e7e <USBD_CtlSendData>
          break;
 8005906:	e01b      	b.n	8005940 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	885b      	ldrh	r3, [r3, #2]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	b29b      	uxth	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	001a      	movs	r2, r3
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	605a      	str	r2, [r3, #4]
          break;
 8005918:	e012      	b.n	8005940 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1d19      	adds	r1, r3, #4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	0018      	movs	r0, r3
 8005924:	f001 faab 	bl	8006e7e <USBD_CtlSendData>
          break;
 8005928:	e00a      	b.n	8005940 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	0011      	movs	r1, r2
 8005930:	0018      	movs	r0, r3
 8005932:	f001 fa26 	bl	8006d82 <USBD_CtlError>
          ret = USBD_FAIL;
 8005936:	2317      	movs	r3, #23
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	2202      	movs	r2, #2
 800593c:	701a      	strb	r2, [r3, #0]
          break;
 800593e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005940:	e0a9      	b.n	8005a96 <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b0b      	cmp	r3, #11
 8005948:	d100      	bne.n	800594c <USBD_HID_Setup+0xbc>
 800594a:	e075      	b.n	8005a38 <USBD_HID_Setup+0x1a8>
 800594c:	dd00      	ble.n	8005950 <USBD_HID_Setup+0xc0>
 800594e:	e08b      	b.n	8005a68 <USBD_HID_Setup+0x1d8>
 8005950:	2b0a      	cmp	r3, #10
 8005952:	d057      	beq.n	8005a04 <USBD_HID_Setup+0x174>
 8005954:	dd00      	ble.n	8005958 <USBD_HID_Setup+0xc8>
 8005956:	e087      	b.n	8005a68 <USBD_HID_Setup+0x1d8>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <USBD_HID_Setup+0xd2>
 800595c:	2b06      	cmp	r3, #6
 800595e:	d019      	beq.n	8005994 <USBD_HID_Setup+0x104>
 8005960:	e082      	b.n	8005a68 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	23a7      	movs	r3, #167	@ 0xa7
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	5cd3      	ldrb	r3, [r2, r3]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d107      	bne.n	800597e <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800596e:	230e      	movs	r3, #14
 8005970:	18f9      	adds	r1, r7, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	0018      	movs	r0, r3
 8005978:	f001 fa81 	bl	8006e7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800597c:	e07f      	b.n	8005a7e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0011      	movs	r1, r2
 8005984:	0018      	movs	r0, r3
 8005986:	f001 f9fc 	bl	8006d82 <USBD_CtlError>
            ret = USBD_FAIL;
 800598a:	2317      	movs	r3, #23
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	2202      	movs	r2, #2
 8005990:	701a      	strb	r2, [r3, #0]
          break;
 8005992:	e074      	b.n	8005a7e <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	885b      	ldrh	r3, [r3, #2]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b22      	cmp	r3, #34	@ 0x22
 800599e:	d10b      	bne.n	80059b8 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	88db      	ldrh	r3, [r3, #6]
 80059a4:	221e      	movs	r2, #30
 80059a6:	18ba      	adds	r2, r7, r2
 80059a8:	b299      	uxth	r1, r3
 80059aa:	293f      	cmp	r1, #63	@ 0x3f
 80059ac:	d900      	bls.n	80059b0 <USBD_HID_Setup+0x120>
 80059ae:	233f      	movs	r3, #63	@ 0x3f
 80059b0:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 80059b2:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa4 <USBD_HID_Setup+0x214>)
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	e01c      	b.n	80059f2 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	885b      	ldrh	r3, [r3, #2]
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b21      	cmp	r3, #33	@ 0x21
 80059c2:	d10b      	bne.n	80059dc <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 80059c4:	4b38      	ldr	r3, [pc, #224]	@ (8005aa8 <USBD_HID_Setup+0x218>)
 80059c6:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	88db      	ldrh	r3, [r3, #6]
 80059cc:	221e      	movs	r2, #30
 80059ce:	18ba      	adds	r2, r7, r2
 80059d0:	b299      	uxth	r1, r3
 80059d2:	2909      	cmp	r1, #9
 80059d4:	d900      	bls.n	80059d8 <USBD_HID_Setup+0x148>
 80059d6:	2309      	movs	r3, #9
 80059d8:	8013      	strh	r3, [r2, #0]
 80059da:	e00a      	b.n	80059f2 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	0011      	movs	r1, r2
 80059e2:	0018      	movs	r0, r3
 80059e4:	f001 f9cd 	bl	8006d82 <USBD_CtlError>
            ret = USBD_FAIL;
 80059e8:	2317      	movs	r3, #23
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	2202      	movs	r2, #2
 80059ee:	701a      	strb	r2, [r3, #0]
            break;
 80059f0:	e045      	b.n	8005a7e <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80059f2:	231e      	movs	r3, #30
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	881a      	ldrh	r2, [r3, #0]
 80059f8:	69b9      	ldr	r1, [r7, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f001 fa3e 	bl	8006e7e <USBD_CtlSendData>
          break;
 8005a02:	e03c      	b.n	8005a7e <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	23a7      	movs	r3, #167	@ 0xa7
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d108      	bne.n	8005a22 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	3308      	adds	r3, #8
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f001 fa2f 	bl	8006e7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a20:	e02d      	b.n	8005a7e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	0011      	movs	r1, r2
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f001 f9aa 	bl	8006d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a2e:	2317      	movs	r3, #23
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	2202      	movs	r2, #2
 8005a34:	701a      	strb	r2, [r3, #0]
          break;
 8005a36:	e022      	b.n	8005a7e <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	23a7      	movs	r3, #167	@ 0xa7
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	5cd3      	ldrb	r3, [r2, r3]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d106      	bne.n	8005a52 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	885b      	ldrh	r3, [r3, #2]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	001a      	movs	r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a50:	e015      	b.n	8005a7e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	0011      	movs	r1, r2
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f001 f992 	bl	8006d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a5e:	2317      	movs	r3, #23
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	2202      	movs	r2, #2
 8005a64:	701a      	strb	r2, [r3, #0]
          break;
 8005a66:	e00a      	b.n	8005a7e <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	0011      	movs	r1, r2
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f001 f987 	bl	8006d82 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a74:	2317      	movs	r3, #23
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	2202      	movs	r2, #2
 8005a7a:	701a      	strb	r2, [r3, #0]
          break;
 8005a7c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005a7e:	e00a      	b.n	8005a96 <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f001 f97b 	bl	8006d82 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a8c:	2317      	movs	r3, #23
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	2202      	movs	r2, #2
 8005a92:	701a      	strb	r2, [r3, #0]
      break;
 8005a94:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005a96:	2317      	movs	r3, #23
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	781b      	ldrb	r3, [r3, #0]
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b008      	add	sp, #32
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	200000c8 	.word	0x200000c8
 8005aa8:	200000b0 	.word	0x200000b0

08005aac <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	1dbb      	adds	r3, r7, #6
 8005ab8:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	23ae      	movs	r3, #174	@ 0xae
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	58d3      	ldr	r3, [r2, r3]
 8005ac2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	23a7      	movs	r3, #167	@ 0xa7
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	5cd3      	ldrb	r3, [r2, r3]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d10d      	bne.n	8005aec <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	7b1b      	ldrb	r3, [r3, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2201      	movs	r2, #1
 8005adc:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005ade:	1dbb      	adds	r3, r7, #6
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	2181      	movs	r1, #129	@ 0x81
 8005ae8:	f001 fde9 	bl	80076be <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b006      	add	sp, #24
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2222      	movs	r2, #34	@ 0x22
 8005b04:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005b06:	4b02      	ldr	r3, [pc, #8]	@ (8005b10 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000044 	.word	0x20000044

08005b14 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2222      	movs	r2, #34	@ 0x22
 8005b20:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005b22:	4b02      	ldr	r3, [pc, #8]	@ (8005b2c <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005b24:	0018      	movs	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000068 	.word	0x20000068

08005b30 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2222      	movs	r2, #34	@ 0x22
 8005b3c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005b3e:	4b02      	ldr	r3, [pc, #8]	@ (8005b48 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005b40:	0018      	movs	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b002      	add	sp, #8
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	2000008c 	.word	0x2000008c

08005b4c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	000a      	movs	r2, r1
 8005b56:	1cfb      	adds	r3, r7, #3
 8005b58:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	23ae      	movs	r3, #174	@ 0xae
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	58d3      	ldr	r3, [r2, r3]
 8005b62:	2200      	movs	r2, #0
 8005b64:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005b7e:	4b02      	ldr	r3, [pc, #8]	@ (8005b88 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005b80:	0018      	movs	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b002      	add	sp, #8
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200000bc 	.word	0x200000bc

08005b8c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	1dfb      	adds	r3, r7, #7
 8005b98:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e020      	b.n	8005be6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	23ad      	movs	r3, #173	@ 0xad
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	58d3      	ldr	r3, [r2, r3]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	23ad      	movs	r3, #173	@ 0xad
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	23ac      	movs	r3, #172	@ 0xac
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	23a7      	movs	r3, #167	@ 0xa7
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1dfa      	adds	r2, r7, #7
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f001 fbe4 	bl	80073ac <USBD_LL_Init>

  return USBD_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	0018      	movs	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b004      	add	sp, #16
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005bf8:	200f      	movs	r0, #15
 8005bfa:	183b      	adds	r3, r7, r0
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d008      	beq.n	8005c18 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	23ad      	movs	r3, #173	@ 0xad
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005c10:	183b      	adds	r3, r7, r0
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e003      	b.n	8005c20 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005c18:	230f      	movs	r3, #15
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005c20:	230f      	movs	r3, #15
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	781b      	ldrb	r3, [r3, #0]
}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b004      	add	sp, #16
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f001 fc07 	bl	800744c <USBD_LL_Start>

  return USBD_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	0018      	movs	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b002      	add	sp, #8
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b002      	add	sp, #8
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c5a:	b590      	push	{r4, r7, lr}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	000a      	movs	r2, r1
 8005c64:	1cfb      	adds	r3, r7, #3
 8005c66:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c68:	240f      	movs	r4, #15
 8005c6a:	193b      	adds	r3, r7, r4
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	23ad      	movs	r3, #173	@ 0xad
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	58d3      	ldr	r3, [r2, r3]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00e      	beq.n	8005c9a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	23ad      	movs	r3, #173	@ 0xad
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	58d3      	ldr	r3, [r2, r3]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	1cfa      	adds	r2, r7, #3
 8005c88:	7811      	ldrb	r1, [r2, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	0010      	movs	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	1e03      	subs	r3, r0, #0
 8005c92:	d102      	bne.n	8005c9a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005c94:	193b      	adds	r3, r7, r4
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005c9a:	230f      	movs	r3, #15
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	781b      	ldrb	r3, [r3, #0]
}
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	b005      	add	sp, #20
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	000a      	movs	r2, r1
 8005cb2:	1cfb      	adds	r3, r7, #3
 8005cb4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	23ad      	movs	r3, #173	@ 0xad
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	58d3      	ldr	r3, [r2, r3]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	1cfa      	adds	r2, r7, #3
 8005cc2:	7811      	ldrb	r1, [r2, #0]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	0010      	movs	r0, r2
 8005cc8:	4798      	blx	r3

  return USBD_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b002      	add	sp, #8
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	22aa      	movs	r2, #170	@ 0xaa
 8005ce2:	0092      	lsls	r2, r2, #2
 8005ce4:	4694      	mov	ip, r2
 8005ce6:	4463      	add	r3, ip
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	0011      	movs	r1, r2
 8005cec:	0018      	movs	r0, r3
 8005cee:	f001 f810 	bl	8006d12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	23a5      	movs	r3, #165	@ 0xa5
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a23      	ldr	r2, [pc, #140]	@ (8005d8c <USBD_LL_SetupStage+0xb8>)
 8005d00:	5a9b      	ldrh	r3, [r3, r2]
 8005d02:	0019      	movs	r1, r3
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	23a6      	movs	r3, #166	@ 0xa6
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	23aa      	movs	r3, #170	@ 0xaa
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	001a      	movs	r2, r3
 8005d16:	231f      	movs	r3, #31
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d019      	beq.n	8005d52 <USBD_LL_SetupStage+0x7e>
 8005d1e:	d822      	bhi.n	8005d66 <USBD_LL_SetupStage+0x92>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <USBD_LL_SetupStage+0x56>
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d00a      	beq.n	8005d3e <USBD_LL_SetupStage+0x6a>
 8005d28:	e01d      	b.n	8005d66 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	22aa      	movs	r2, #170	@ 0xaa
 8005d2e:	0092      	lsls	r2, r2, #2
 8005d30:	189a      	adds	r2, r3, r2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0011      	movs	r1, r2
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 fa10 	bl	800615c <USBD_StdDevReq>
      break;
 8005d3c:	e020      	b.n	8005d80 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	22aa      	movs	r2, #170	@ 0xaa
 8005d42:	0092      	lsls	r2, r2, #2
 8005d44:	189a      	adds	r2, r3, r2
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	0011      	movs	r1, r2
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 fa78 	bl	8006240 <USBD_StdItfReq>
      break;
 8005d50:	e016      	b.n	8005d80 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	22aa      	movs	r2, #170	@ 0xaa
 8005d56:	0092      	lsls	r2, r2, #2
 8005d58:	189a      	adds	r2, r3, r2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0011      	movs	r1, r2
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 fac5 	bl	80062ee <USBD_StdEPReq>
      break;
 8005d64:	e00c      	b.n	8005d80 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	23aa      	movs	r3, #170	@ 0xaa
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	5cd3      	ldrb	r3, [r2, r3]
 8005d6e:	227f      	movs	r2, #127	@ 0x7f
 8005d70:	4393      	bics	r3, r2
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0011      	movs	r1, r2
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f001 fbee 	bl	800755a <USBD_LL_StallEP>
      break;
 8005d7e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	0018      	movs	r0, r3
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b002      	add	sp, #8
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	000002ae 	.word	0x000002ae

08005d90 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	200b      	movs	r0, #11
 8005d9c:	183b      	adds	r3, r7, r0
 8005d9e:	1c0a      	adds	r2, r1, #0
 8005da0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005da2:	183b      	adds	r3, r7, r0
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d154      	bne.n	8005e54 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3355      	adds	r3, #85	@ 0x55
 8005dae:	33ff      	adds	r3, #255	@ 0xff
 8005db0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	23a5      	movs	r3, #165	@ 0xa5
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	58d3      	ldr	r3, [r2, r3]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d139      	bne.n	8005e32 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d919      	bls.n	8005dfe <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d203      	bcs.n	8005dec <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	e002      	b.n	8005df2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	001a      	movs	r2, r3
 8005df8:	f001 f874 	bl	8006ee4 <USBD_CtlContinueRx>
 8005dfc:	e045      	b.n	8005e8a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	23ad      	movs	r3, #173	@ 0xad
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	58d3      	ldr	r3, [r2, r3]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00d      	beq.n	8005e28 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	23a7      	movs	r3, #167	@ 0xa7
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d107      	bne.n	8005e28 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	23ad      	movs	r3, #173	@ 0xad
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	58d3      	ldr	r3, [r2, r3]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	0010      	movs	r0, r2
 8005e26:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f001 f86d 	bl	8006f0a <USBD_CtlSendStatus>
 8005e30:	e02b      	b.n	8005e8a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	23a5      	movs	r3, #165	@ 0xa5
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	58d3      	ldr	r3, [r2, r3]
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d125      	bne.n	8005e8a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	23a5      	movs	r3, #165	@ 0xa5
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	2100      	movs	r1, #0
 8005e46:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f001 fb84 	bl	800755a <USBD_LL_StallEP>
 8005e52:	e01a      	b.n	8005e8a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	23ad      	movs	r3, #173	@ 0xad
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	58d3      	ldr	r3, [r2, r3]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d011      	beq.n	8005e86 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	23a7      	movs	r3, #167	@ 0xa7
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d10b      	bne.n	8005e86 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	23ad      	movs	r3, #173	@ 0xad
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	58d3      	ldr	r3, [r2, r3]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	220b      	movs	r2, #11
 8005e7a:	18ba      	adds	r2, r7, r2
 8005e7c:	7811      	ldrb	r1, [r2, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	0010      	movs	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	e001      	b.n	8005e8a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e86:	2302      	movs	r3, #2
 8005e88:	e000      	b.n	8005e8c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b006      	add	sp, #24
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	200b      	movs	r0, #11
 8005ea0:	183b      	adds	r3, r7, r0
 8005ea2:	1c0a      	adds	r2, r1, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ea6:	183b      	adds	r3, r7, r0
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d000      	beq.n	8005eb0 <USBD_LL_DataInStage+0x1c>
 8005eae:	e08e      	b.n	8005fce <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3314      	adds	r3, #20
 8005eb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	23a5      	movs	r3, #165	@ 0xa5
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	58d3      	ldr	r3, [r2, r3]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d164      	bne.n	8005f8c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d915      	bls.n	8005efa <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 ffe9 	bl	8006ebe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	f001 fc1a 	bl	800772c <USBD_LL_PrepareReceive>
 8005ef8:	e059      	b.n	8005fae <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	0019      	movs	r1, r3
 8005f04:	0010      	movs	r0, r2
 8005f06:	f7fa f997 	bl	8000238 <__aeabi_uidivmod>
 8005f0a:	1e0b      	subs	r3, r1, #0
 8005f0c:	d11f      	bne.n	8005f4e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d319      	bcc.n	8005f4e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	23a6      	movs	r3, #166	@ 0xa6
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d211      	bcs.n	8005f4e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	0018      	movs	r0, r3
 8005f32:	f000 ffc4 	bl	8006ebe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	23a6      	movs	r3, #166	@ 0xa6
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	2300      	movs	r3, #0
 8005f44:	2200      	movs	r2, #0
 8005f46:	2100      	movs	r1, #0
 8005f48:	f001 fbf0 	bl	800772c <USBD_LL_PrepareReceive>
 8005f4c:	e02f      	b.n	8005fae <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	23ad      	movs	r3, #173	@ 0xad
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	58d3      	ldr	r3, [r2, r3]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00d      	beq.n	8005f78 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	23a7      	movs	r3, #167	@ 0xa7
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d107      	bne.n	8005f78 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	23ad      	movs	r3, #173	@ 0xad
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	58d3      	ldr	r3, [r2, r3]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	0010      	movs	r0, r2
 8005f76:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2180      	movs	r1, #128	@ 0x80
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f001 faec 	bl	800755a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 ffd4 	bl	8006f32 <USBD_CtlReceiveStatus>
 8005f8a:	e010      	b.n	8005fae <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	23a5      	movs	r3, #165	@ 0xa5
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	58d3      	ldr	r3, [r2, r3]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d005      	beq.n	8005fa4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	23a5      	movs	r3, #165	@ 0xa5
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2180      	movs	r1, #128	@ 0x80
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f001 fad6 	bl	800755a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	23a8      	movs	r3, #168	@ 0xa8
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	5cd3      	ldrb	r3, [r2, r3]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d124      	bne.n	8006004 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7ff fe43 	bl	8005c48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	23a8      	movs	r3, #168	@ 0xa8
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	2100      	movs	r1, #0
 8005fca:	54d1      	strb	r1, [r2, r3]
 8005fcc:	e01a      	b.n	8006004 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	23ad      	movs	r3, #173	@ 0xad
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	58d3      	ldr	r3, [r2, r3]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d011      	beq.n	8006000 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	23a7      	movs	r3, #167	@ 0xa7
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d10b      	bne.n	8006000 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	23ad      	movs	r3, #173	@ 0xad
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	58d3      	ldr	r3, [r2, r3]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	220b      	movs	r2, #11
 8005ff4:	18ba      	adds	r2, r7, r2
 8005ff6:	7811      	ldrb	r1, [r2, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	0010      	movs	r0, r2
 8005ffc:	4798      	blx	r3
 8005ffe:	e001      	b.n	8006004 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006000:	2302      	movs	r3, #2
 8006002:	e000      	b.n	8006006 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b006      	add	sp, #24
 800600c:	bd80      	pop	{r7, pc}

0800600e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	2340      	movs	r3, #64	@ 0x40
 800601a:	2200      	movs	r2, #0
 800601c:	2100      	movs	r1, #0
 800601e:	f001 fa3a 	bl	8007496 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	23ac      	movs	r3, #172	@ 0xac
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	2101      	movs	r1, #1
 800602a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	23b2      	movs	r3, #178	@ 0xb2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	2140      	movs	r1, #64	@ 0x40
 8006034:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	2340      	movs	r3, #64	@ 0x40
 800603a:	2200      	movs	r2, #0
 800603c:	2180      	movs	r1, #128	@ 0x80
 800603e:	f001 fa2a 	bl	8007496 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2240      	movs	r2, #64	@ 0x40
 800604c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	23a7      	movs	r3, #167	@ 0xa7
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	2101      	movs	r1, #1
 8006056:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	23a5      	movs	r3, #165	@ 0xa5
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	2100      	movs	r1, #0
 8006060:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	23a9      	movs	r3, #169	@ 0xa9
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	2100      	movs	r1, #0
 8006070:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	23ae      	movs	r3, #174	@ 0xae
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	58d3      	ldr	r3, [r2, r3]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	23ad      	movs	r3, #173	@ 0xad
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	58d3      	ldr	r3, [r2, r3]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	b2d9      	uxtb	r1, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	4790      	blx	r2
  }

  return USBD_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b002      	add	sp, #8
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	000a      	movs	r2, r1
 80060a8:	1cfb      	adds	r3, r7, #3
 80060aa:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1cfa      	adds	r2, r7, #3
 80060b0:	7812      	ldrb	r2, [r2, #0]
 80060b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b002      	add	sp, #8
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	23a7      	movs	r3, #167	@ 0xa7
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	5cd1      	ldrb	r1, [r2, r3]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a06      	ldr	r2, [pc, #24]	@ (80060ec <USBD_LL_Suspend+0x2c>)
 80060d4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	23a7      	movs	r3, #167	@ 0xa7
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	2104      	movs	r1, #4
 80060de:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	0018      	movs	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b002      	add	sp, #8
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	46c0      	nop			@ (mov r8, r8)
 80060ec:	0000029d 	.word	0x0000029d

080060f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	23a7      	movs	r3, #167	@ 0xa7
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	5cd3      	ldrb	r3, [r2, r3]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d106      	bne.n	8006112 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a05      	ldr	r2, [pc, #20]	@ (800611c <USBD_LL_Resume+0x2c>)
 8006108:	5c99      	ldrb	r1, [r3, r2]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	23a7      	movs	r3, #167	@ 0xa7
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	0018      	movs	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	b002      	add	sp, #8
 800611a:	bd80      	pop	{r7, pc}
 800611c:	0000029d 	.word	0x0000029d

08006120 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	23a7      	movs	r3, #167	@ 0xa7
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	5cd3      	ldrb	r3, [r2, r3]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d10e      	bne.n	8006152 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	23ad      	movs	r3, #173	@ 0xad
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	58d3      	ldr	r3, [r2, r3]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	23ad      	movs	r3, #173	@ 0xad
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	58d3      	ldr	r3, [r2, r3]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	0010      	movs	r0, r2
 8006150:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	0018      	movs	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	b002      	add	sp, #8
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006166:	230f      	movs	r3, #15
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	001a      	movs	r2, r3
 8006174:	2360      	movs	r3, #96	@ 0x60
 8006176:	4013      	ands	r3, r2
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d004      	beq.n	8006186 <USBD_StdDevReq+0x2a>
 800617c:	d84f      	bhi.n	800621e <USBD_StdDevReq+0xc2>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <USBD_StdDevReq+0x3e>
 8006182:	2b20      	cmp	r3, #32
 8006184:	d14b      	bne.n	800621e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	23ad      	movs	r3, #173	@ 0xad
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	58d3      	ldr	r3, [r2, r3]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	0010      	movs	r0, r2
 8006196:	4798      	blx	r3
      break;
 8006198:	e048      	b.n	800622c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	2b09      	cmp	r3, #9
 80061a0:	d835      	bhi.n	800620e <USBD_StdDevReq+0xb2>
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	4b25      	ldr	r3, [pc, #148]	@ (800623c <USBD_StdDevReq+0xe0>)
 80061a6:	18d3      	adds	r3, r2, r3
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	0011      	movs	r1, r2
 80061b2:	0018      	movs	r0, r3
 80061b4:	f000 fa52 	bl	800665c <USBD_GetDescriptor>
          break;
 80061b8:	e030      	b.n	800621c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0011      	movs	r1, r2
 80061c0:	0018      	movs	r0, r3
 80061c2:	f000 fbfd 	bl	80069c0 <USBD_SetAddress>
          break;
 80061c6:	e029      	b.n	800621c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	0011      	movs	r1, r2
 80061ce:	0018      	movs	r0, r3
 80061d0:	f000 fc4a 	bl	8006a68 <USBD_SetConfig>
          break;
 80061d4:	e022      	b.n	800621c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	0011      	movs	r1, r2
 80061dc:	0018      	movs	r0, r3
 80061de:	f000 fce7 	bl	8006bb0 <USBD_GetConfig>
          break;
 80061e2:	e01b      	b.n	800621c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	0011      	movs	r1, r2
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 fd1b 	bl	8006c26 <USBD_GetStatus>
          break;
 80061f0:	e014      	b.n	800621c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	0011      	movs	r1, r2
 80061f8:	0018      	movs	r0, r3
 80061fa:	f000 fd4e 	bl	8006c9a <USBD_SetFeature>
          break;
 80061fe:	e00d      	b.n	800621c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	0011      	movs	r1, r2
 8006206:	0018      	movs	r0, r3
 8006208:	f000 fd5d 	bl	8006cc6 <USBD_ClrFeature>
          break;
 800620c:	e006      	b.n	800621c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	0011      	movs	r1, r2
 8006214:	0018      	movs	r0, r3
 8006216:	f000 fdb4 	bl	8006d82 <USBD_CtlError>
          break;
 800621a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800621c:	e006      	b.n	800622c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	0011      	movs	r1, r2
 8006224:	0018      	movs	r0, r3
 8006226:	f000 fdac 	bl	8006d82 <USBD_CtlError>
      break;
 800622a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800622c:	230f      	movs	r3, #15
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	781b      	ldrb	r3, [r3, #0]
}
 8006232:	0018      	movs	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	b004      	add	sp, #16
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			@ (mov r8, r8)
 800623c:	08008214 	.word	0x08008214

08006240 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006240:	b5b0      	push	{r4, r5, r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800624a:	230f      	movs	r3, #15
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	001a      	movs	r2, r3
 8006258:	2360      	movs	r3, #96	@ 0x60
 800625a:	4013      	ands	r3, r2
 800625c:	2b40      	cmp	r3, #64	@ 0x40
 800625e:	d004      	beq.n	800626a <USBD_StdItfReq+0x2a>
 8006260:	d839      	bhi.n	80062d6 <USBD_StdItfReq+0x96>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <USBD_StdItfReq+0x2a>
 8006266:	2b20      	cmp	r3, #32
 8006268:	d135      	bne.n	80062d6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	23a7      	movs	r3, #167	@ 0xa7
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	5cd3      	ldrb	r3, [r2, r3]
 8006272:	3b01      	subs	r3, #1
 8006274:	2b02      	cmp	r3, #2
 8006276:	d825      	bhi.n	80062c4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	889b      	ldrh	r3, [r3, #4]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b01      	cmp	r3, #1
 8006280:	d819      	bhi.n	80062b6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	23ad      	movs	r3, #173	@ 0xad
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	58d3      	ldr	r3, [r2, r3]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	250f      	movs	r5, #15
 800628e:	197c      	adds	r4, r7, r5
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	0010      	movs	r0, r2
 8006296:	4798      	blx	r3
 8006298:	0003      	movs	r3, r0
 800629a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	88db      	ldrh	r3, [r3, #6]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d116      	bne.n	80062d2 <USBD_StdItfReq+0x92>
 80062a4:	197b      	adds	r3, r7, r5
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d112      	bne.n	80062d2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 fe2b 	bl	8006f0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062b4:	e00d      	b.n	80062d2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	0011      	movs	r1, r2
 80062bc:	0018      	movs	r0, r3
 80062be:	f000 fd60 	bl	8006d82 <USBD_CtlError>
          break;
 80062c2:	e006      	b.n	80062d2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0011      	movs	r1, r2
 80062ca:	0018      	movs	r0, r3
 80062cc:	f000 fd59 	bl	8006d82 <USBD_CtlError>
          break;
 80062d0:	e000      	b.n	80062d4 <USBD_StdItfReq+0x94>
          break;
 80062d2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80062d4:	e006      	b.n	80062e4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0011      	movs	r1, r2
 80062dc:	0018      	movs	r0, r3
 80062de:	f000 fd50 	bl	8006d82 <USBD_CtlError>
      break;
 80062e2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	0018      	movs	r0, r3
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b004      	add	sp, #16
 80062ec:	bdb0      	pop	{r4, r5, r7, pc}

080062ee <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80062ee:	b5b0      	push	{r4, r5, r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062f8:	230f      	movs	r3, #15
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	889a      	ldrh	r2, [r3, #4]
 8006304:	230e      	movs	r3, #14
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	001a      	movs	r2, r3
 8006310:	2360      	movs	r3, #96	@ 0x60
 8006312:	4013      	ands	r3, r2
 8006314:	2b40      	cmp	r3, #64	@ 0x40
 8006316:	d006      	beq.n	8006326 <USBD_StdEPReq+0x38>
 8006318:	d900      	bls.n	800631c <USBD_StdEPReq+0x2e>
 800631a:	e190      	b.n	800663e <USBD_StdEPReq+0x350>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00c      	beq.n	800633a <USBD_StdEPReq+0x4c>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d000      	beq.n	8006326 <USBD_StdEPReq+0x38>
 8006324:	e18b      	b.n	800663e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	23ad      	movs	r3, #173	@ 0xad
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	58d3      	ldr	r3, [r2, r3]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	0010      	movs	r0, r2
 8006336:	4798      	blx	r3
      break;
 8006338:	e188      	b.n	800664c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	001a      	movs	r2, r3
 8006340:	2360      	movs	r3, #96	@ 0x60
 8006342:	4013      	ands	r3, r2
 8006344:	2b20      	cmp	r3, #32
 8006346:	d10f      	bne.n	8006368 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	23ad      	movs	r3, #173	@ 0xad
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	58d3      	ldr	r3, [r2, r3]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	250f      	movs	r5, #15
 8006354:	197c      	adds	r4, r7, r5
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	0010      	movs	r0, r2
 800635c:	4798      	blx	r3
 800635e:	0003      	movs	r3, r0
 8006360:	7023      	strb	r3, [r4, #0]

        return ret;
 8006362:	197b      	adds	r3, r7, r5
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	e174      	b.n	8006652 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d007      	beq.n	8006380 <USBD_StdEPReq+0x92>
 8006370:	dd00      	ble.n	8006374 <USBD_StdEPReq+0x86>
 8006372:	e15c      	b.n	800662e <USBD_StdEPReq+0x340>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d100      	bne.n	800637a <USBD_StdEPReq+0x8c>
 8006378:	e092      	b.n	80064a0 <USBD_StdEPReq+0x1b2>
 800637a:	2b01      	cmp	r3, #1
 800637c:	d04b      	beq.n	8006416 <USBD_StdEPReq+0x128>
 800637e:	e156      	b.n	800662e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	23a7      	movs	r3, #167	@ 0xa7
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	5cd3      	ldrb	r3, [r2, r3]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d002      	beq.n	8006392 <USBD_StdEPReq+0xa4>
 800638c:	2b03      	cmp	r3, #3
 800638e:	d01d      	beq.n	80063cc <USBD_StdEPReq+0xde>
 8006390:	e039      	b.n	8006406 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006392:	220e      	movs	r2, #14
 8006394:	18bb      	adds	r3, r7, r2
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d010      	beq.n	80063be <USBD_StdEPReq+0xd0>
 800639c:	18bb      	adds	r3, r7, r2
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b80      	cmp	r3, #128	@ 0x80
 80063a2:	d00c      	beq.n	80063be <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063a4:	18bb      	adds	r3, r7, r2
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	0011      	movs	r1, r2
 80063ac:	0018      	movs	r0, r3
 80063ae:	f001 f8d4 	bl	800755a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2180      	movs	r1, #128	@ 0x80
 80063b6:	0018      	movs	r0, r3
 80063b8:	f001 f8cf 	bl	800755a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063bc:	e02a      	b.n	8006414 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f000 fcdc 	bl	8006d82 <USBD_CtlError>
              break;
 80063ca:	e023      	b.n	8006414 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	885b      	ldrh	r3, [r3, #2]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d113      	bne.n	80063fc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80063d4:	220e      	movs	r2, #14
 80063d6:	18bb      	adds	r3, r7, r2
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00e      	beq.n	80063fc <USBD_StdEPReq+0x10e>
 80063de:	18bb      	adds	r3, r7, r2
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b80      	cmp	r3, #128	@ 0x80
 80063e4:	d00a      	beq.n	80063fc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	88db      	ldrh	r3, [r3, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80063ee:	18bb      	adds	r3, r7, r2
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	0011      	movs	r1, r2
 80063f6:	0018      	movs	r0, r3
 80063f8:	f001 f8af 	bl	800755a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 fd83 	bl	8006f0a <USBD_CtlSendStatus>

              break;
 8006404:	e006      	b.n	8006414 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	0011      	movs	r1, r2
 800640c:	0018      	movs	r0, r3
 800640e:	f000 fcb8 	bl	8006d82 <USBD_CtlError>
              break;
 8006412:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006414:	e112      	b.n	800663c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	23a7      	movs	r3, #167	@ 0xa7
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	5cd3      	ldrb	r3, [r2, r3]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d002      	beq.n	8006428 <USBD_StdEPReq+0x13a>
 8006422:	2b03      	cmp	r3, #3
 8006424:	d01d      	beq.n	8006462 <USBD_StdEPReq+0x174>
 8006426:	e032      	b.n	800648e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006428:	220e      	movs	r2, #14
 800642a:	18bb      	adds	r3, r7, r2
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d010      	beq.n	8006454 <USBD_StdEPReq+0x166>
 8006432:	18bb      	adds	r3, r7, r2
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b80      	cmp	r3, #128	@ 0x80
 8006438:	d00c      	beq.n	8006454 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800643a:	18bb      	adds	r3, r7, r2
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	0011      	movs	r1, r2
 8006442:	0018      	movs	r0, r3
 8006444:	f001 f889 	bl	800755a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2180      	movs	r1, #128	@ 0x80
 800644c:	0018      	movs	r0, r3
 800644e:	f001 f884 	bl	800755a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006452:	e024      	b.n	800649e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	0011      	movs	r1, r2
 800645a:	0018      	movs	r0, r3
 800645c:	f000 fc91 	bl	8006d82 <USBD_CtlError>
              break;
 8006460:	e01d      	b.n	800649e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	885b      	ldrh	r3, [r3, #2]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d118      	bne.n	800649c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800646a:	210e      	movs	r1, #14
 800646c:	187b      	adds	r3, r7, r1
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	227f      	movs	r2, #127	@ 0x7f
 8006472:	4013      	ands	r3, r2
 8006474:	d006      	beq.n	8006484 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006476:	187b      	adds	r3, r7, r1
 8006478:	781a      	ldrb	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	0011      	movs	r1, r2
 800647e:	0018      	movs	r0, r3
 8006480:	f001 f896 	bl	80075b0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	0018      	movs	r0, r3
 8006488:	f000 fd3f 	bl	8006f0a <USBD_CtlSendStatus>
              }
              break;
 800648c:	e006      	b.n	800649c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	0011      	movs	r1, r2
 8006494:	0018      	movs	r0, r3
 8006496:	f000 fc74 	bl	8006d82 <USBD_CtlError>
              break;
 800649a:	e000      	b.n	800649e <USBD_StdEPReq+0x1b0>
              break;
 800649c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800649e:	e0cd      	b.n	800663c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	23a7      	movs	r3, #167	@ 0xa7
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	5cd3      	ldrb	r3, [r2, r3]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d002      	beq.n	80064b2 <USBD_StdEPReq+0x1c4>
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d03c      	beq.n	800652a <USBD_StdEPReq+0x23c>
 80064b0:	e0b5      	b.n	800661e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b2:	220e      	movs	r2, #14
 80064b4:	18bb      	adds	r3, r7, r2
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <USBD_StdEPReq+0x1e4>
 80064bc:	18bb      	adds	r3, r7, r2
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b80      	cmp	r3, #128	@ 0x80
 80064c2:	d006      	beq.n	80064d2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	0011      	movs	r1, r2
 80064ca:	0018      	movs	r0, r3
 80064cc:	f000 fc59 	bl	8006d82 <USBD_CtlError>
                break;
 80064d0:	e0ac      	b.n	800662c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d2:	220e      	movs	r2, #14
 80064d4:	18bb      	adds	r3, r7, r2
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b25b      	sxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da0c      	bge.n	80064f8 <USBD_StdEPReq+0x20a>
 80064de:	18bb      	adds	r3, r7, r2
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	227f      	movs	r2, #127	@ 0x7f
 80064e4:	401a      	ands	r2, r3
 80064e6:	0013      	movs	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	189b      	adds	r3, r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	3310      	adds	r3, #16
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	18d3      	adds	r3, r2, r3
 80064f4:	3304      	adds	r3, #4
 80064f6:	e00d      	b.n	8006514 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064f8:	230e      	movs	r3, #14
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	227f      	movs	r2, #127	@ 0x7f
 8006500:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006502:	0013      	movs	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	189b      	adds	r3, r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	3351      	adds	r3, #81	@ 0x51
 800650c:	33ff      	adds	r3, #255	@ 0xff
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	18d3      	adds	r3, r2, r3
 8006512:	3304      	adds	r3, #4
 8006514:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	0018      	movs	r0, r3
 8006524:	f000 fcab 	bl	8006e7e <USBD_CtlSendData>
              break;
 8006528:	e080      	b.n	800662c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800652a:	220e      	movs	r2, #14
 800652c:	18bb      	adds	r3, r7, r2
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	b25b      	sxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	da14      	bge.n	8006560 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006536:	18bb      	adds	r3, r7, r2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	220f      	movs	r2, #15
 800653c:	401a      	ands	r2, r3
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	0013      	movs	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	189b      	adds	r3, r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	18cb      	adds	r3, r1, r3
 800654a:	3318      	adds	r3, #24
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d11e      	bne.n	8006590 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	0011      	movs	r1, r2
 8006558:	0018      	movs	r0, r3
 800655a:	f000 fc12 	bl	8006d82 <USBD_CtlError>
                  break;
 800655e:	e065      	b.n	800662c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006560:	230e      	movs	r3, #14
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	220f      	movs	r2, #15
 8006568:	401a      	ands	r2, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	23ac      	movs	r3, #172	@ 0xac
 800656e:	0059      	lsls	r1, r3, #1
 8006570:	0013      	movs	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	189b      	adds	r3, r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	18c3      	adds	r3, r0, r3
 800657a:	185b      	adds	r3, r3, r1
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	0011      	movs	r1, r2
 8006588:	0018      	movs	r0, r3
 800658a:	f000 fbfa 	bl	8006d82 <USBD_CtlError>
                  break;
 800658e:	e04d      	b.n	800662c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006590:	220e      	movs	r2, #14
 8006592:	18bb      	adds	r3, r7, r2
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	b25b      	sxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	da0c      	bge.n	80065b6 <USBD_StdEPReq+0x2c8>
 800659c:	18bb      	adds	r3, r7, r2
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	227f      	movs	r2, #127	@ 0x7f
 80065a2:	401a      	ands	r2, r3
 80065a4:	0013      	movs	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	189b      	adds	r3, r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	3310      	adds	r3, #16
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	18d3      	adds	r3, r2, r3
 80065b2:	3304      	adds	r3, #4
 80065b4:	e00d      	b.n	80065d2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065b6:	230e      	movs	r3, #14
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	227f      	movs	r2, #127	@ 0x7f
 80065be:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065c0:	0013      	movs	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	189b      	adds	r3, r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	3351      	adds	r3, #81	@ 0x51
 80065ca:	33ff      	adds	r3, #255	@ 0xff
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	18d3      	adds	r3, r2, r3
 80065d0:	3304      	adds	r3, #4
 80065d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065d4:	220e      	movs	r2, #14
 80065d6:	18bb      	adds	r3, r7, r2
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <USBD_StdEPReq+0x2f8>
 80065de:	18bb      	adds	r3, r7, r2
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b80      	cmp	r3, #128	@ 0x80
 80065e4:	d103      	bne.n	80065ee <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e010      	b.n	8006610 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065ee:	230e      	movs	r3, #14
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	781a      	ldrb	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	0011      	movs	r1, r2
 80065f8:	0018      	movs	r0, r3
 80065fa:	f001 f804 	bl	8007606 <USBD_LL_IsStallEP>
 80065fe:	1e03      	subs	r3, r0, #0
 8006600:	d003      	beq.n	800660a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2201      	movs	r2, #1
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	e002      	b.n	8006610 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	0018      	movs	r0, r3
 8006618:	f000 fc31 	bl	8006e7e <USBD_CtlSendData>
              break;
 800661c:	e006      	b.n	800662c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	0011      	movs	r1, r2
 8006624:	0018      	movs	r0, r3
 8006626:	f000 fbac 	bl	8006d82 <USBD_CtlError>
              break;
 800662a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800662c:	e006      	b.n	800663c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	0011      	movs	r1, r2
 8006634:	0018      	movs	r0, r3
 8006636:	f000 fba4 	bl	8006d82 <USBD_CtlError>
          break;
 800663a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800663c:	e006      	b.n	800664c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	0011      	movs	r1, r2
 8006644:	0018      	movs	r0, r3
 8006646:	f000 fb9c 	bl	8006d82 <USBD_CtlError>
      break;
 800664a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800664c:	230f      	movs	r3, #15
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	781b      	ldrb	r3, [r3, #0]
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b004      	add	sp, #16
 8006658:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800665c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006666:	2308      	movs	r3, #8
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	2200      	movs	r2, #0
 800666c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006672:	230b      	movs	r3, #11
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	885b      	ldrh	r3, [r3, #2]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b07      	cmp	r3, #7
 8006684:	d900      	bls.n	8006688 <USBD_GetDescriptor+0x2c>
 8006686:	e159      	b.n	800693c <USBD_GetDescriptor+0x2e0>
 8006688:	009a      	lsls	r2, r3, #2
 800668a:	4bcb      	ldr	r3, [pc, #812]	@ (80069b8 <USBD_GetDescriptor+0x35c>)
 800668c:	18d3      	adds	r3, r2, r3
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	23ac      	movs	r3, #172	@ 0xac
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	58d3      	ldr	r3, [r2, r3]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	7c12      	ldrb	r2, [r2, #16]
 80066a0:	2108      	movs	r1, #8
 80066a2:	1879      	adds	r1, r7, r1
 80066a4:	0010      	movs	r0, r2
 80066a6:	4798      	blx	r3
 80066a8:	0003      	movs	r3, r0
 80066aa:	60fb      	str	r3, [r7, #12]
      break;
 80066ac:	e153      	b.n	8006956 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7c1b      	ldrb	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10f      	bne.n	80066d6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	23ad      	movs	r3, #173	@ 0xad
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	58d3      	ldr	r3, [r2, r3]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	2208      	movs	r2, #8
 80066c2:	18ba      	adds	r2, r7, r2
 80066c4:	0010      	movs	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	0003      	movs	r3, r0
 80066ca:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	2202      	movs	r2, #2
 80066d2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066d4:	e13f      	b.n	8006956 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	23ad      	movs	r3, #173	@ 0xad
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	58d3      	ldr	r3, [r2, r3]
 80066de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e0:	2208      	movs	r2, #8
 80066e2:	18ba      	adds	r2, r7, r2
 80066e4:	0010      	movs	r0, r2
 80066e6:	4798      	blx	r3
 80066e8:	0003      	movs	r3, r0
 80066ea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	2202      	movs	r2, #2
 80066f2:	701a      	strb	r2, [r3, #0]
      break;
 80066f4:	e12f      	b.n	8006956 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b05      	cmp	r3, #5
 80066fe:	d900      	bls.n	8006702 <USBD_GetDescriptor+0xa6>
 8006700:	e0d0      	b.n	80068a4 <USBD_GetDescriptor+0x248>
 8006702:	009a      	lsls	r2, r3, #2
 8006704:	4bad      	ldr	r3, [pc, #692]	@ (80069bc <USBD_GetDescriptor+0x360>)
 8006706:	18d3      	adds	r3, r2, r3
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	23ac      	movs	r3, #172	@ 0xac
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	58d3      	ldr	r3, [r2, r3]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00d      	beq.n	8006736 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	23ac      	movs	r3, #172	@ 0xac
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	58d3      	ldr	r3, [r2, r3]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7c12      	ldrb	r2, [r2, #16]
 8006728:	2108      	movs	r1, #8
 800672a:	1879      	adds	r1, r7, r1
 800672c:	0010      	movs	r0, r2
 800672e:	4798      	blx	r3
 8006730:	0003      	movs	r3, r0
 8006732:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006734:	e0c3      	b.n	80068be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	0011      	movs	r1, r2
 800673c:	0018      	movs	r0, r3
 800673e:	f000 fb20 	bl	8006d82 <USBD_CtlError>
            err++;
 8006742:	210b      	movs	r1, #11
 8006744:	187b      	adds	r3, r7, r1
 8006746:	781a      	ldrb	r2, [r3, #0]
 8006748:	187b      	adds	r3, r7, r1
 800674a:	3201      	adds	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
          break;
 800674e:	e0b6      	b.n	80068be <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	23ac      	movs	r3, #172	@ 0xac
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	58d3      	ldr	r3, [r2, r3]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	23ac      	movs	r3, #172	@ 0xac
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	58d3      	ldr	r3, [r2, r3]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	2108      	movs	r1, #8
 800676e:	1879      	adds	r1, r7, r1
 8006770:	0010      	movs	r0, r2
 8006772:	4798      	blx	r3
 8006774:	0003      	movs	r3, r0
 8006776:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006778:	e0a1      	b.n	80068be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	0011      	movs	r1, r2
 8006780:	0018      	movs	r0, r3
 8006782:	f000 fafe 	bl	8006d82 <USBD_CtlError>
            err++;
 8006786:	210b      	movs	r1, #11
 8006788:	187b      	adds	r3, r7, r1
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	187b      	adds	r3, r7, r1
 800678e:	3201      	adds	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
          break;
 8006792:	e094      	b.n	80068be <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	23ac      	movs	r3, #172	@ 0xac
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	58d3      	ldr	r3, [r2, r3]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	23ac      	movs	r3, #172	@ 0xac
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	58d3      	ldr	r3, [r2, r3]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	2108      	movs	r1, #8
 80067b2:	1879      	adds	r1, r7, r1
 80067b4:	0010      	movs	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	0003      	movs	r3, r0
 80067ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067bc:	e07f      	b.n	80068be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	0011      	movs	r1, r2
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 fadc 	bl	8006d82 <USBD_CtlError>
            err++;
 80067ca:	210b      	movs	r1, #11
 80067cc:	187b      	adds	r3, r7, r1
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	3201      	adds	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
          break;
 80067d6:	e072      	b.n	80068be <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	23ac      	movs	r3, #172	@ 0xac
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	58d3      	ldr	r3, [r2, r3]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	23ac      	movs	r3, #172	@ 0xac
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	58d3      	ldr	r3, [r2, r3]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	7c12      	ldrb	r2, [r2, #16]
 80067f4:	2108      	movs	r1, #8
 80067f6:	1879      	adds	r1, r7, r1
 80067f8:	0010      	movs	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	0003      	movs	r3, r0
 80067fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006800:	e05d      	b.n	80068be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	0011      	movs	r1, r2
 8006808:	0018      	movs	r0, r3
 800680a:	f000 faba 	bl	8006d82 <USBD_CtlError>
            err++;
 800680e:	210b      	movs	r1, #11
 8006810:	187b      	adds	r3, r7, r1
 8006812:	781a      	ldrb	r2, [r3, #0]
 8006814:	187b      	adds	r3, r7, r1
 8006816:	3201      	adds	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
          break;
 800681a:	e050      	b.n	80068be <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	23ac      	movs	r3, #172	@ 0xac
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	58d3      	ldr	r3, [r2, r3]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	23ac      	movs	r3, #172	@ 0xac
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	58d3      	ldr	r3, [r2, r3]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	7c12      	ldrb	r2, [r2, #16]
 8006838:	2108      	movs	r1, #8
 800683a:	1879      	adds	r1, r7, r1
 800683c:	0010      	movs	r0, r2
 800683e:	4798      	blx	r3
 8006840:	0003      	movs	r3, r0
 8006842:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006844:	e03b      	b.n	80068be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	0011      	movs	r1, r2
 800684c:	0018      	movs	r0, r3
 800684e:	f000 fa98 	bl	8006d82 <USBD_CtlError>
            err++;
 8006852:	210b      	movs	r1, #11
 8006854:	187b      	adds	r3, r7, r1
 8006856:	781a      	ldrb	r2, [r3, #0]
 8006858:	187b      	adds	r3, r7, r1
 800685a:	3201      	adds	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
          break;
 800685e:	e02e      	b.n	80068be <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	23ac      	movs	r3, #172	@ 0xac
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	58d3      	ldr	r3, [r2, r3]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00d      	beq.n	800688a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	23ac      	movs	r3, #172	@ 0xac
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	58d3      	ldr	r3, [r2, r3]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	7c12      	ldrb	r2, [r2, #16]
 800687c:	2108      	movs	r1, #8
 800687e:	1879      	adds	r1, r7, r1
 8006880:	0010      	movs	r0, r2
 8006882:	4798      	blx	r3
 8006884:	0003      	movs	r3, r0
 8006886:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006888:	e019      	b.n	80068be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	0011      	movs	r1, r2
 8006890:	0018      	movs	r0, r3
 8006892:	f000 fa76 	bl	8006d82 <USBD_CtlError>
            err++;
 8006896:	210b      	movs	r1, #11
 8006898:	187b      	adds	r3, r7, r1
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	187b      	adds	r3, r7, r1
 800689e:	3201      	adds	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]
          break;
 80068a2:	e00c      	b.n	80068be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	0011      	movs	r1, r2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 fa69 	bl	8006d82 <USBD_CtlError>
          err++;
 80068b0:	210b      	movs	r1, #11
 80068b2:	187b      	adds	r3, r7, r1
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	187b      	adds	r3, r7, r1
 80068b8:	3201      	adds	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80068bc:	e04b      	b.n	8006956 <USBD_GetDescriptor+0x2fa>
 80068be:	e04a      	b.n	8006956 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	7c1b      	ldrb	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10b      	bne.n	80068e0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	23ad      	movs	r3, #173	@ 0xad
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	58d3      	ldr	r3, [r2, r3]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d2:	2208      	movs	r2, #8
 80068d4:	18ba      	adds	r2, r7, r2
 80068d6:	0010      	movs	r0, r2
 80068d8:	4798      	blx	r3
 80068da:	0003      	movs	r3, r0
 80068dc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068de:	e03a      	b.n	8006956 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0011      	movs	r1, r2
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 fa4b 	bl	8006d82 <USBD_CtlError>
        err++;
 80068ec:	210b      	movs	r1, #11
 80068ee:	187b      	adds	r3, r7, r1
 80068f0:	781a      	ldrb	r2, [r3, #0]
 80068f2:	187b      	adds	r3, r7, r1
 80068f4:	3201      	adds	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
      break;
 80068f8:	e02d      	b.n	8006956 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	7c1b      	ldrb	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10f      	bne.n	8006922 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	23ad      	movs	r3, #173	@ 0xad
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	58d3      	ldr	r3, [r2, r3]
 800690a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690c:	2208      	movs	r2, #8
 800690e:	18ba      	adds	r2, r7, r2
 8006910:	0010      	movs	r0, r2
 8006912:	4798      	blx	r3
 8006914:	0003      	movs	r3, r0
 8006916:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3301      	adds	r3, #1
 800691c:	2207      	movs	r2, #7
 800691e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006920:	e019      	b.n	8006956 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0011      	movs	r1, r2
 8006928:	0018      	movs	r0, r3
 800692a:	f000 fa2a 	bl	8006d82 <USBD_CtlError>
        err++;
 800692e:	210b      	movs	r1, #11
 8006930:	187b      	adds	r3, r7, r1
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	187b      	adds	r3, r7, r1
 8006936:	3201      	adds	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]
      break;
 800693a:	e00c      	b.n	8006956 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0011      	movs	r1, r2
 8006942:	0018      	movs	r0, r3
 8006944:	f000 fa1d 	bl	8006d82 <USBD_CtlError>
      err++;
 8006948:	210b      	movs	r1, #11
 800694a:	187b      	adds	r3, r7, r1
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	187b      	adds	r3, r7, r1
 8006950:	3201      	adds	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
      break;
 8006954:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8006956:	230b      	movs	r3, #11
 8006958:	18fb      	adds	r3, r7, r3
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d127      	bne.n	80069b0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006960:	2108      	movs	r1, #8
 8006962:	187b      	adds	r3, r7, r1
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d019      	beq.n	800699e <USBD_GetDescriptor+0x342>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	88db      	ldrh	r3, [r3, #6]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d015      	beq.n	800699e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	88da      	ldrh	r2, [r3, #6]
 8006976:	187b      	adds	r3, r7, r1
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	1c18      	adds	r0, r3, #0
 800697c:	1c11      	adds	r1, r2, #0
 800697e:	b28a      	uxth	r2, r1
 8006980:	b283      	uxth	r3, r0
 8006982:	429a      	cmp	r2, r3
 8006984:	d900      	bls.n	8006988 <USBD_GetDescriptor+0x32c>
 8006986:	1c01      	adds	r1, r0, #0
 8006988:	b28a      	uxth	r2, r1
 800698a:	2108      	movs	r1, #8
 800698c:	187b      	adds	r3, r7, r1
 800698e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006990:	187b      	adds	r3, r7, r1
 8006992:	881a      	ldrh	r2, [r3, #0]
 8006994:	68f9      	ldr	r1, [r7, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0018      	movs	r0, r3
 800699a:	f000 fa70 	bl	8006e7e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	88db      	ldrh	r3, [r3, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d105      	bne.n	80069b2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 faae 	bl	8006f0a <USBD_CtlSendStatus>
 80069ae:	e000      	b.n	80069b2 <USBD_GetDescriptor+0x356>
    return;
 80069b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b004      	add	sp, #16
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	0800823c 	.word	0x0800823c
 80069bc:	0800825c 	.word	0x0800825c

080069c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	889b      	ldrh	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d13d      	bne.n	8006a4e <USBD_SetAddress+0x8e>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	88db      	ldrh	r3, [r3, #6]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d139      	bne.n	8006a4e <USBD_SetAddress+0x8e>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	885b      	ldrh	r3, [r3, #2]
 80069de:	2b7f      	cmp	r3, #127	@ 0x7f
 80069e0:	d835      	bhi.n	8006a4e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	885b      	ldrh	r3, [r3, #2]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	230f      	movs	r3, #15
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	217f      	movs	r1, #127	@ 0x7f
 80069ee:	400a      	ands	r2, r1
 80069f0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	23a7      	movs	r3, #167	@ 0xa7
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	5cd3      	ldrb	r3, [r2, r3]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d106      	bne.n	8006a0c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	0011      	movs	r1, r2
 8006a04:	0018      	movs	r0, r3
 8006a06:	f000 f9bc 	bl	8006d82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0a:	e027      	b.n	8006a5c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	240f      	movs	r4, #15
 8006a10:	193a      	adds	r2, r7, r4
 8006a12:	4914      	ldr	r1, [pc, #80]	@ (8006a64 <USBD_SetAddress+0xa4>)
 8006a14:	7812      	ldrb	r2, [r2, #0]
 8006a16:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a18:	193b      	adds	r3, r7, r4
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	0011      	movs	r1, r2
 8006a20:	0018      	movs	r0, r3
 8006a22:	f000 fe21 	bl	8007668 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f000 fa6e 	bl	8006f0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a2e:	193b      	adds	r3, r7, r4
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	23a7      	movs	r3, #167	@ 0xa7
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	2102      	movs	r1, #2
 8006a3e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a40:	e00c      	b.n	8006a5c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	23a7      	movs	r3, #167	@ 0xa7
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	2101      	movs	r1, #1
 8006a4a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4c:	e006      	b.n	8006a5c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	0011      	movs	r1, r2
 8006a54:	0018      	movs	r0, r3
 8006a56:	f000 f994 	bl	8006d82 <USBD_CtlError>
  }
}
 8006a5a:	46c0      	nop			@ (mov r8, r8)
 8006a5c:	46c0      	nop			@ (mov r8, r8)
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b005      	add	sp, #20
 8006a62:	bd90      	pop	{r4, r7, pc}
 8006a64:	0000029e 	.word	0x0000029e

08006a68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	885b      	ldrh	r3, [r3, #2]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	4b4c      	ldr	r3, [pc, #304]	@ (8006bac <USBD_SetConfig+0x144>)
 8006a7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8006bac <USBD_SetConfig+0x144>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d906      	bls.n	8006a92 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	0011      	movs	r1, r2
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f000 f979 	bl	8006d82 <USBD_CtlError>
 8006a90:	e088      	b.n	8006ba4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	23a7      	movs	r3, #167	@ 0xa7
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	5cd3      	ldrb	r3, [r2, r3]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d002      	beq.n	8006aa4 <USBD_SetConfig+0x3c>
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d029      	beq.n	8006af6 <USBD_SetConfig+0x8e>
 8006aa2:	e071      	b.n	8006b88 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006aa4:	4b41      	ldr	r3, [pc, #260]	@ (8006bac <USBD_SetConfig+0x144>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01f      	beq.n	8006aec <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006aac:	4b3f      	ldr	r3, [pc, #252]	@ (8006bac <USBD_SetConfig+0x144>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	001a      	movs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	23a7      	movs	r3, #167	@ 0xa7
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	2103      	movs	r1, #3
 8006abe:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8006bac <USBD_SetConfig+0x144>)
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f7ff f8c6 	bl	8005c5a <USBD_SetClassConfig>
 8006ace:	0003      	movs	r3, r0
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d106      	bne.n	8006ae2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	0011      	movs	r1, r2
 8006ada:	0018      	movs	r0, r3
 8006adc:	f000 f951 	bl	8006d82 <USBD_CtlError>
            return;
 8006ae0:	e060      	b.n	8006ba4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 fa10 	bl	8006f0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006aea:	e05b      	b.n	8006ba4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	0018      	movs	r0, r3
 8006af0:	f000 fa0b 	bl	8006f0a <USBD_CtlSendStatus>
        break;
 8006af4:	e056      	b.n	8006ba4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006af6:	4b2d      	ldr	r3, [pc, #180]	@ (8006bac <USBD_SetConfig+0x144>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d115      	bne.n	8006b2a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	23a7      	movs	r3, #167	@ 0xa7
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	2102      	movs	r1, #2
 8006b06:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006b08:	4b28      	ldr	r3, [pc, #160]	@ (8006bac <USBD_SetConfig+0x144>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	001a      	movs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006b12:	4b26      	ldr	r3, [pc, #152]	@ (8006bac <USBD_SetConfig+0x144>)
 8006b14:	781a      	ldrb	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	0011      	movs	r1, r2
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7ff f8c4 	bl	8005ca8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	0018      	movs	r0, r3
 8006b24:	f000 f9f1 	bl	8006f0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006b28:	e03c      	b.n	8006ba4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006b2a:	4b20      	ldr	r3, [pc, #128]	@ (8006bac <USBD_SetConfig+0x144>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	001a      	movs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d022      	beq.n	8006b7e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	0011      	movs	r1, r2
 8006b42:	0018      	movs	r0, r3
 8006b44:	f7ff f8b0 	bl	8005ca8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006b48:	4b18      	ldr	r3, [pc, #96]	@ (8006bac <USBD_SetConfig+0x144>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	001a      	movs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b52:	4b16      	ldr	r3, [pc, #88]	@ (8006bac <USBD_SetConfig+0x144>)
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	0011      	movs	r1, r2
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7ff f87d 	bl	8005c5a <USBD_SetClassConfig>
 8006b60:	0003      	movs	r3, r0
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d106      	bne.n	8006b74 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	0011      	movs	r1, r2
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f000 f908 	bl	8006d82 <USBD_CtlError>
            return;
 8006b72:	e017      	b.n	8006ba4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	0018      	movs	r0, r3
 8006b78:	f000 f9c7 	bl	8006f0a <USBD_CtlSendStatus>
        break;
 8006b7c:	e012      	b.n	8006ba4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 f9c2 	bl	8006f0a <USBD_CtlSendStatus>
        break;
 8006b86:	e00d      	b.n	8006ba4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	0011      	movs	r1, r2
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f000 f8f7 	bl	8006d82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b94:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <USBD_SetConfig+0x144>)
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	0011      	movs	r1, r2
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7ff f883 	bl	8005ca8 <USBD_ClrClassConfig>
        break;
 8006ba2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b002      	add	sp, #8
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	20000238 	.word	0x20000238

08006bb0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	88db      	ldrh	r3, [r3, #6]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d006      	beq.n	8006bd0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	0011      	movs	r1, r2
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f000 f8da 	bl	8006d82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bce:	e026      	b.n	8006c1e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	23a7      	movs	r3, #167	@ 0xa7
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	5cd3      	ldrb	r3, [r2, r3]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	dc02      	bgt.n	8006be2 <USBD_GetConfig+0x32>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dc03      	bgt.n	8006be8 <USBD_GetConfig+0x38>
 8006be0:	e016      	b.n	8006c10 <USBD_GetConfig+0x60>
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d00c      	beq.n	8006c00 <USBD_GetConfig+0x50>
 8006be6:	e013      	b.n	8006c10 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	0019      	movs	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 f940 	bl	8006e7e <USBD_CtlSendData>
        break;
 8006bfe:	e00e      	b.n	8006c1e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	1d19      	adds	r1, r3, #4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f000 f938 	bl	8006e7e <USBD_CtlSendData>
        break;
 8006c0e:	e006      	b.n	8006c1e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	0011      	movs	r1, r2
 8006c16:	0018      	movs	r0, r3
 8006c18:	f000 f8b3 	bl	8006d82 <USBD_CtlError>
        break;
 8006c1c:	46c0      	nop			@ (mov r8, r8)
}
 8006c1e:	46c0      	nop			@ (mov r8, r8)
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b002      	add	sp, #8
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	23a7      	movs	r3, #167	@ 0xa7
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	5cd3      	ldrb	r3, [r2, r3]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d822      	bhi.n	8006c84 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	88db      	ldrh	r3, [r3, #6]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d006      	beq.n	8006c54 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	0011      	movs	r1, r2
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f000 f898 	bl	8006d82 <USBD_CtlError>
        break;
 8006c52:	e01e      	b.n	8006c92 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	23a9      	movs	r3, #169	@ 0xa9
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	58d3      	ldr	r3, [r2, r3]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	330c      	adds	r3, #12
 8006c76:	0019      	movs	r1, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f000 f8fe 	bl	8006e7e <USBD_CtlSendData>
      break;
 8006c82:	e006      	b.n	8006c92 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f000 f879 	bl	8006d82 <USBD_CtlError>
      break;
 8006c90:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006c92:	46c0      	nop			@ (mov r8, r8)
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b002      	add	sp, #8
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	885b      	ldrh	r3, [r3, #2]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d108      	bne.n	8006cbe <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	23a9      	movs	r3, #169	@ 0xa9
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f000 f926 	bl	8006f0a <USBD_CtlSendStatus>
  }
}
 8006cbe:	46c0      	nop			@ (mov r8, r8)
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	23a7      	movs	r3, #167	@ 0xa7
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	5cd3      	ldrb	r3, [r2, r3]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d80d      	bhi.n	8006cfa <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	885b      	ldrh	r3, [r3, #2]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d110      	bne.n	8006d08 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	23a9      	movs	r3, #169	@ 0xa9
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	2100      	movs	r1, #0
 8006cee:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f000 f909 	bl	8006f0a <USBD_CtlSendStatus>
      }
      break;
 8006cf8:	e006      	b.n	8006d08 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0011      	movs	r1, r2
 8006d00:	0018      	movs	r0, r3
 8006d02:	f000 f83e 	bl	8006d82 <USBD_CtlError>
      break;
 8006d06:	e000      	b.n	8006d0a <USBD_ClrFeature+0x44>
      break;
 8006d08:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006d0a:	46c0      	nop			@ (mov r8, r8)
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b002      	add	sp, #8
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	785a      	ldrb	r2, [r3, #1]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	3302      	adds	r3, #2
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	001a      	movs	r2, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	3303      	adds	r3, #3
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	18d3      	adds	r3, r2, r3
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	3305      	adds	r3, #5
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	18d3      	adds	r3, r2, r3
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	3306      	adds	r3, #6
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	001a      	movs	r2, r3
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	3307      	adds	r3, #7
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	18d3      	adds	r3, r2, r3
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	80da      	strh	r2, [r3, #6]

}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b002      	add	sp, #8
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2180      	movs	r1, #128	@ 0x80
 8006d90:	0018      	movs	r0, r3
 8006d92:	f000 fbe2 	bl	800755a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f000 fbdd 	bl	800755a <USBD_LL_StallEP>
}
 8006da0:	46c0      	nop			@ (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b002      	add	sp, #8
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006da8:	b590      	push	{r4, r7, lr}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006db4:	2417      	movs	r4, #23
 8006db6:	193b      	adds	r3, r7, r4
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03c      	beq.n	8006e3c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f000 f83d 	bl	8006e44 <USBD_GetLen>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	18db      	adds	r3, r3, r3
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006dd8:	193b      	adds	r3, r7, r4
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	193a      	adds	r2, r7, r4
 8006dde:	1c59      	adds	r1, r3, #1
 8006de0:	7011      	strb	r1, [r2, #0]
 8006de2:	001a      	movs	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	189b      	adds	r3, r3, r2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006dee:	193b      	adds	r3, r7, r4
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	193a      	adds	r2, r7, r4
 8006df4:	1c59      	adds	r1, r3, #1
 8006df6:	7011      	strb	r1, [r2, #0]
 8006df8:	001a      	movs	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	189b      	adds	r3, r3, r2
 8006dfe:	2203      	movs	r2, #3
 8006e00:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006e02:	e017      	b.n	8006e34 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	60fa      	str	r2, [r7, #12]
 8006e0a:	2417      	movs	r4, #23
 8006e0c:	193a      	adds	r2, r7, r4
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	1939      	adds	r1, r7, r4
 8006e12:	1c50      	adds	r0, r2, #1
 8006e14:	7008      	strb	r0, [r1, #0]
 8006e16:	0011      	movs	r1, r2
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	1852      	adds	r2, r2, r1
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006e20:	193b      	adds	r3, r7, r4
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	193a      	adds	r2, r7, r4
 8006e26:	1c59      	adds	r1, r3, #1
 8006e28:	7011      	strb	r1, [r2, #0]
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	2200      	movs	r2, #0
 8006e32:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e3      	bne.n	8006e04 <USBD_GetString+0x5c>
    }
  }
}
 8006e3c:	46c0      	nop			@ (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b007      	add	sp, #28
 8006e42:	bd90      	pop	{r4, r7, pc}

08006e44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e4c:	230f      	movs	r3, #15
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006e54:	e008      	b.n	8006e68 <USBD_GetLen+0x24>
  {
    len++;
 8006e56:	210f      	movs	r1, #15
 8006e58:	187b      	adds	r3, r7, r1
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	187b      	adds	r3, r7, r1
 8006e5e:	3201      	adds	r2, #1
 8006e60:	701a      	strb	r2, [r3, #0]
    buf++;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3301      	adds	r3, #1
 8006e66:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f2      	bne.n	8006e56 <USBD_GetLen+0x12>
  }

  return len;
 8006e70:	230f      	movs	r3, #15
 8006e72:	18fb      	adds	r3, r7, r3
 8006e74:	781b      	ldrb	r3, [r3, #0]
}
 8006e76:	0018      	movs	r0, r3
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b004      	add	sp, #16
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	1dbb      	adds	r3, r7, #6
 8006e8a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	23a5      	movs	r3, #165	@ 0xa5
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	2102      	movs	r1, #2
 8006e94:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006e96:	1dbb      	adds	r3, r7, #6
 8006e98:	881a      	ldrh	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006e9e:	1dbb      	adds	r3, r7, #6
 8006ea0:	881a      	ldrh	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ea6:	1dbb      	adds	r3, r7, #6
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	2100      	movs	r1, #0
 8006eb0:	f000 fc05 	bl	80076be <USBD_LL_Transmit>

  return USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b004      	add	sp, #16
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	1dbb      	adds	r3, r7, #6
 8006eca:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ecc:	1dbb      	adds	r3, r7, #6
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	f000 fbf2 	bl	80076be <USBD_LL_Transmit>

  return USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	0018      	movs	r0, r3
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	b004      	add	sp, #16
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	1dbb      	adds	r3, r7, #6
 8006ef0:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ef2:	1dbb      	adds	r3, r7, #6
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	2100      	movs	r1, #0
 8006efc:	f000 fc16 	bl	800772c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	0018      	movs	r0, r3
 8006f04:	46bd      	mov	sp, r7
 8006f06:	b004      	add	sp, #16
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	23a5      	movs	r3, #165	@ 0xa5
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	2104      	movs	r1, #4
 8006f1a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2200      	movs	r2, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	f000 fbcb 	bl	80076be <USBD_LL_Transmit>

  return USBD_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b002      	add	sp, #8
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	23a5      	movs	r3, #165	@ 0xa5
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	2105      	movs	r1, #5
 8006f42:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	2300      	movs	r3, #0
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	f000 fbee 	bl	800772c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	0018      	movs	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	b002      	add	sp, #8
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f60:	490f      	ldr	r1, [pc, #60]	@ (8006fa0 <MX_USB_DEVICE_Init+0x44>)
 8006f62:	4b10      	ldr	r3, [pc, #64]	@ (8006fa4 <MX_USB_DEVICE_Init+0x48>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	0018      	movs	r0, r3
 8006f68:	f7fe fe10 	bl	8005b8c <USBD_Init>
 8006f6c:	1e03      	subs	r3, r0, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f70:	f7f9 fbe8 	bl	8000744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006f74:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa8 <MX_USB_DEVICE_Init+0x4c>)
 8006f76:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa4 <MX_USB_DEVICE_Init+0x48>)
 8006f78:	0011      	movs	r1, r2
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f7fe fe37 	bl	8005bee <USBD_RegisterClass>
 8006f80:	1e03      	subs	r3, r0, #0
 8006f82:	d001      	beq.n	8006f88 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006f84:	f7f9 fbde 	bl	8000744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f88:	4b06      	ldr	r3, [pc, #24]	@ (8006fa4 <MX_USB_DEVICE_Init+0x48>)
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f7fe fe4f 	bl	8005c2e <USBD_Start>
 8006f90:	1e03      	subs	r3, r0, #0
 8006f92:	d001      	beq.n	8006f98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f94:	f7f9 fbd6 	bl	8000744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f98:	46c0      	nop			@ (mov r8, r8)
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	46c0      	nop			@ (mov r8, r8)
 8006fa0:	20000108 	.word	0x20000108
 8006fa4:	2000023c 	.word	0x2000023c
 8006fa8:	2000000c 	.word	0x2000000c

08006fac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	0002      	movs	r2, r0
 8006fb4:	6039      	str	r1, [r7, #0]
 8006fb6:	1dfb      	adds	r3, r7, #7
 8006fb8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2212      	movs	r2, #18
 8006fbe:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fc0:	4b02      	ldr	r3, [pc, #8]	@ (8006fcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	b002      	add	sp, #8
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	20000124 	.word	0x20000124

08006fd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	0002      	movs	r2, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	1dfb      	adds	r3, r7, #7
 8006fdc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fe4:	4b02      	ldr	r3, [pc, #8]	@ (8006ff0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	b002      	add	sp, #8
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	46c0      	nop			@ (mov r8, r8)
 8006ff0:	20000138 	.word	0x20000138

08006ff4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	0002      	movs	r2, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	1dfb      	adds	r3, r7, #7
 8007000:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007002:	1dfb      	adds	r3, r7, #7
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4908      	ldr	r1, [pc, #32]	@ (8007030 <USBD_FS_ProductStrDescriptor+0x3c>)
 800700e:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <USBD_FS_ProductStrDescriptor+0x40>)
 8007010:	0018      	movs	r0, r3
 8007012:	f7ff fec9 	bl	8006da8 <USBD_GetString>
 8007016:	e005      	b.n	8007024 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	4905      	ldr	r1, [pc, #20]	@ (8007030 <USBD_FS_ProductStrDescriptor+0x3c>)
 800701c:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <USBD_FS_ProductStrDescriptor+0x40>)
 800701e:	0018      	movs	r0, r3
 8007020:	f7ff fec2 	bl	8006da8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007024:	4b02      	ldr	r3, [pc, #8]	@ (8007030 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007026:	0018      	movs	r0, r3
 8007028:	46bd      	mov	sp, r7
 800702a:	b002      	add	sp, #8
 800702c:	bd80      	pop	{r7, pc}
 800702e:	46c0      	nop			@ (mov r8, r8)
 8007030:	20000500 	.word	0x20000500
 8007034:	080081b0 	.word	0x080081b0

08007038 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	0002      	movs	r2, r0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	1dfb      	adds	r3, r7, #7
 8007044:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	4904      	ldr	r1, [pc, #16]	@ (800705c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800704a:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800704c:	0018      	movs	r0, r3
 800704e:	f7ff feab 	bl	8006da8 <USBD_GetString>
  return USBD_StrDesc;
 8007052:	4b02      	ldr	r3, [pc, #8]	@ (800705c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007054:	0018      	movs	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	b002      	add	sp, #8
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000500 	.word	0x20000500
 8007060:	080081c8 	.word	0x080081c8

08007064 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	0002      	movs	r2, r0
 800706c:	6039      	str	r1, [r7, #0]
 800706e:	1dfb      	adds	r3, r7, #7
 8007070:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	221a      	movs	r2, #26
 8007076:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007078:	f000 f84c 	bl	8007114 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800707c:	4b02      	ldr	r3, [pc, #8]	@ (8007088 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800707e:	0018      	movs	r0, r3
 8007080:	46bd      	mov	sp, r7
 8007082:	b002      	add	sp, #8
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	2000013c 	.word	0x2000013c

0800708c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	0002      	movs	r2, r0
 8007094:	6039      	str	r1, [r7, #0]
 8007096:	1dfb      	adds	r3, r7, #7
 8007098:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800709a:	1dfb      	adds	r3, r7, #7
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4908      	ldr	r1, [pc, #32]	@ (80070c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80070a6:	4b09      	ldr	r3, [pc, #36]	@ (80070cc <USBD_FS_ConfigStrDescriptor+0x40>)
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7ff fe7d 	bl	8006da8 <USBD_GetString>
 80070ae:	e005      	b.n	80070bc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	4905      	ldr	r1, [pc, #20]	@ (80070c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80070b4:	4b05      	ldr	r3, [pc, #20]	@ (80070cc <USBD_FS_ConfigStrDescriptor+0x40>)
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7ff fe76 	bl	8006da8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070bc:	4b02      	ldr	r3, [pc, #8]	@ (80070c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b002      	add	sp, #8
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			@ (mov r8, r8)
 80070c8:	20000500 	.word	0x20000500
 80070cc:	080081dc 	.word	0x080081dc

080070d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	0002      	movs	r2, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	1dfb      	adds	r3, r7, #7
 80070dc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80070de:	1dfb      	adds	r3, r7, #7
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	4908      	ldr	r1, [pc, #32]	@ (800710c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80070ea:	4b09      	ldr	r3, [pc, #36]	@ (8007110 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80070ec:	0018      	movs	r0, r3
 80070ee:	f7ff fe5b 	bl	8006da8 <USBD_GetString>
 80070f2:	e005      	b.n	8007100 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	4905      	ldr	r1, [pc, #20]	@ (800710c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80070fa:	0018      	movs	r0, r3
 80070fc:	f7ff fe54 	bl	8006da8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007100:	4b02      	ldr	r3, [pc, #8]	@ (800710c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007102:	0018      	movs	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	b002      	add	sp, #8
 8007108:	bd80      	pop	{r7, pc}
 800710a:	46c0      	nop			@ (mov r8, r8)
 800710c:	20000500 	.word	0x20000500
 8007110:	080081e8 	.word	0x080081e8

08007114 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	18d3      	adds	r3, r2, r3
 8007120:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <Get_SerialNum+0x2c>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007128:	4907      	ldr	r1, [pc, #28]	@ (8007148 <Get_SerialNum+0x34>)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2208      	movs	r2, #8
 800712e:	0018      	movs	r0, r3
 8007130:	f000 f80e 	bl	8007150 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007134:	4905      	ldr	r1, [pc, #20]	@ (800714c <Get_SerialNum+0x38>)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2204      	movs	r2, #4
 800713a:	0018      	movs	r0, r3
 800713c:	f000 f808 	bl	8007150 <IntToUnicode>
  }
}
 8007140:	46c0      	nop			@ (mov r8, r8)
 8007142:	46bd      	mov	sp, r7
 8007144:	b004      	add	sp, #16
 8007146:	bd80      	pop	{r7, pc}
 8007148:	2000013e 	.word	0x2000013e
 800714c:	2000014e 	.word	0x2000014e

08007150 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	1dfb      	adds	r3, r7, #7
 800715c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800715e:	2117      	movs	r1, #23
 8007160:	187b      	adds	r3, r7, r1
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007166:	187b      	adds	r3, r7, r1
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e02f      	b.n	80071ce <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	0f1b      	lsrs	r3, r3, #28
 8007172:	2b09      	cmp	r3, #9
 8007174:	d80d      	bhi.n	8007192 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	0f1b      	lsrs	r3, r3, #28
 800717a:	b2da      	uxtb	r2, r3
 800717c:	2317      	movs	r3, #23
 800717e:	18fb      	adds	r3, r7, r3
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	0019      	movs	r1, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	185b      	adds	r3, r3, r1
 800718a:	3230      	adds	r2, #48	@ 0x30
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	e00c      	b.n	80071ac <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0f1b      	lsrs	r3, r3, #28
 8007196:	b2da      	uxtb	r2, r3
 8007198:	2317      	movs	r3, #23
 800719a:	18fb      	adds	r3, r7, r3
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	0019      	movs	r1, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	185b      	adds	r3, r3, r1
 80071a6:	3237      	adds	r2, #55	@ 0x37
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071b2:	2117      	movs	r1, #23
 80071b4:	187b      	adds	r3, r7, r1
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	3301      	adds	r3, #1
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	18d3      	adds	r3, r2, r3
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071c4:	187b      	adds	r3, r7, r1
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	187b      	adds	r3, r7, r1
 80071ca:	3201      	adds	r2, #1
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	2317      	movs	r3, #23
 80071d0:	18fa      	adds	r2, r7, r3
 80071d2:	1dfb      	adds	r3, r7, #7
 80071d4:	7812      	ldrb	r2, [r2, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d3c8      	bcc.n	800716e <IntToUnicode+0x1e>
  }
}
 80071dc:	46c0      	nop			@ (mov r8, r8)
 80071de:	46c0      	nop			@ (mov r8, r8)
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b006      	add	sp, #24
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007220 <HAL_PCD_MspInit+0x38>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d10e      	bne.n	8007218 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80071fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <HAL_PCD_MspInit+0x3c>)
 80071fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071fe:	4b09      	ldr	r3, [pc, #36]	@ (8007224 <HAL_PCD_MspInit+0x3c>)
 8007200:	2180      	movs	r1, #128	@ 0x80
 8007202:	0409      	lsls	r1, r1, #16
 8007204:	430a      	orrs	r2, r1
 8007206:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007208:	2200      	movs	r2, #0
 800720a:	2100      	movs	r1, #0
 800720c:	201f      	movs	r0, #31
 800720e:	f7f9 fc7f 	bl	8000b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007212:	201f      	movs	r0, #31
 8007214:	f7f9 fc91 	bl	8000b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007218:	46c0      	nop			@ (mov r8, r8)
 800721a:	46bd      	mov	sp, r7
 800721c:	b002      	add	sp, #8
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40005c00 	.word	0x40005c00
 8007224:	40021000 	.word	0x40021000

08007228 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	23bc      	movs	r3, #188	@ 0xbc
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	58d2      	ldr	r2, [r2, r3]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	21ac      	movs	r1, #172	@ 0xac
 800723c:	0089      	lsls	r1, r1, #2
 800723e:	468c      	mov	ip, r1
 8007240:	4463      	add	r3, ip
 8007242:	0019      	movs	r1, r3
 8007244:	0010      	movs	r0, r2
 8007246:	f7fe fd45 	bl	8005cd4 <USBD_LL_SetupStage>
}
 800724a:	46c0      	nop			@ (mov r8, r8)
 800724c:	46bd      	mov	sp, r7
 800724e:	b002      	add	sp, #8
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007252:	b590      	push	{r4, r7, lr}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	000a      	movs	r2, r1
 800725c:	1cfb      	adds	r3, r7, #3
 800725e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	23bc      	movs	r3, #188	@ 0xbc
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	58d4      	ldr	r4, [r2, r3]
 8007268:	1cfb      	adds	r3, r7, #3
 800726a:	781a      	ldrb	r2, [r3, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	23be      	movs	r3, #190	@ 0xbe
 8007270:	0059      	lsls	r1, r3, #1
 8007272:	0013      	movs	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	189b      	adds	r3, r3, r2
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	18c3      	adds	r3, r0, r3
 800727c:	185b      	adds	r3, r3, r1
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	1cfb      	adds	r3, r7, #3
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	0019      	movs	r1, r3
 8007286:	0020      	movs	r0, r4
 8007288:	f7fe fd82 	bl	8005d90 <USBD_LL_DataOutStage>
}
 800728c:	46c0      	nop			@ (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	b003      	add	sp, #12
 8007292:	bd90      	pop	{r4, r7, pc}

08007294 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	000a      	movs	r2, r1
 800729e:	1cfb      	adds	r3, r7, #3
 80072a0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	23bc      	movs	r3, #188	@ 0xbc
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	58d0      	ldr	r0, [r2, r3]
 80072aa:	1cfb      	adds	r3, r7, #3
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	0013      	movs	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	189b      	adds	r3, r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	18cb      	adds	r3, r1, r3
 80072ba:	333c      	adds	r3, #60	@ 0x3c
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	1cfb      	adds	r3, r7, #3
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	0019      	movs	r1, r3
 80072c4:	f7fe fde6 	bl	8005e94 <USBD_LL_DataInStage>
}
 80072c8:	46c0      	nop			@ (mov r8, r8)
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b002      	add	sp, #8
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	23bc      	movs	r3, #188	@ 0xbc
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	58d3      	ldr	r3, [r2, r3]
 80072e0:	0018      	movs	r0, r3
 80072e2:	f7fe ff1d 	bl	8006120 <USBD_LL_SOF>
}
 80072e6:	46c0      	nop			@ (mov r8, r8)
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b002      	add	sp, #8
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072f6:	230f      	movs	r3, #15
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	2201      	movs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b02      	cmp	r3, #2
 8007304:	d001      	beq.n	800730a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007306:	f7f9 fa1d 	bl	8000744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	23bc      	movs	r3, #188	@ 0xbc
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	58d2      	ldr	r2, [r2, r3]
 8007312:	230f      	movs	r3, #15
 8007314:	18fb      	adds	r3, r7, r3
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	0019      	movs	r1, r3
 800731a:	0010      	movs	r0, r2
 800731c:	f7fe febf 	bl	800609e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	23bc      	movs	r3, #188	@ 0xbc
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	58d3      	ldr	r3, [r2, r3]
 8007328:	0018      	movs	r0, r3
 800732a:	f7fe fe70 	bl	800600e <USBD_LL_Reset>
}
 800732e:	46c0      	nop			@ (mov r8, r8)
 8007330:	46bd      	mov	sp, r7
 8007332:	b004      	add	sp, #16
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	23bc      	movs	r3, #188	@ 0xbc
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	58d3      	ldr	r3, [r2, r3]
 8007348:	0018      	movs	r0, r3
 800734a:	f7fe feb9 	bl	80060c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007356:	4b05      	ldr	r3, [pc, #20]	@ (800736c <HAL_PCD_SuspendCallback+0x34>)
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	4b04      	ldr	r3, [pc, #16]	@ (800736c <HAL_PCD_SuspendCallback+0x34>)
 800735c:	2106      	movs	r1, #6
 800735e:	430a      	orrs	r2, r1
 8007360:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007362:	46c0      	nop			@ (mov r8, r8)
 8007364:	46bd      	mov	sp, r7
 8007366:	b002      	add	sp, #8
 8007368:	bd80      	pop	{r7, pc}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	e000ed00 	.word	0xe000ed00

08007370 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007380:	4b09      	ldr	r3, [pc, #36]	@ (80073a8 <HAL_PCD_ResumeCallback+0x38>)
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <HAL_PCD_ResumeCallback+0x38>)
 8007386:	2106      	movs	r1, #6
 8007388:	438a      	bics	r2, r1
 800738a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800738c:	f000 fa1a 	bl	80077c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	23bc      	movs	r3, #188	@ 0xbc
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	58d3      	ldr	r3, [r2, r3]
 8007398:	0018      	movs	r0, r3
 800739a:	f7fe fea9 	bl	80060f0 <USBD_LL_Resume>
}
 800739e:	46c0      	nop			@ (mov r8, r8)
 80073a0:	46bd      	mov	sp, r7
 80073a2:	b002      	add	sp, #8
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	46c0      	nop			@ (mov r8, r8)
 80073a8:	e000ed00 	.word	0xe000ed00

080073ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80073b4:	4a23      	ldr	r2, [pc, #140]	@ (8007444 <USBD_LL_Init+0x98>)
 80073b6:	23bc      	movs	r3, #188	@ 0xbc
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	23b0      	movs	r3, #176	@ 0xb0
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	491f      	ldr	r1, [pc, #124]	@ (8007444 <USBD_LL_Init+0x98>)
 80073c6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80073c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007444 <USBD_LL_Init+0x98>)
 80073ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007448 <USBD_LL_Init+0x9c>)
 80073cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80073ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007444 <USBD_LL_Init+0x98>)
 80073d0:	2208      	movs	r2, #8
 80073d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80073d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007444 <USBD_LL_Init+0x98>)
 80073d6:	2202      	movs	r2, #2
 80073d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073da:	4b1a      	ldr	r3, [pc, #104]	@ (8007444 <USBD_LL_Init+0x98>)
 80073dc:	2202      	movs	r2, #2
 80073de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80073e0:	4b18      	ldr	r3, [pc, #96]	@ (8007444 <USBD_LL_Init+0x98>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80073e6:	4b17      	ldr	r3, [pc, #92]	@ (8007444 <USBD_LL_Init+0x98>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80073ec:	4b15      	ldr	r3, [pc, #84]	@ (8007444 <USBD_LL_Init+0x98>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80073f2:	4b14      	ldr	r3, [pc, #80]	@ (8007444 <USBD_LL_Init+0x98>)
 80073f4:	0018      	movs	r0, r3
 80073f6:	f7f9 fbbd 	bl	8000b74 <HAL_PCD_Init>
 80073fa:	1e03      	subs	r3, r0, #0
 80073fc:	d001      	beq.n	8007402 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80073fe:	f7f9 f9a1 	bl	8000744 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	23b0      	movs	r3, #176	@ 0xb0
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	58d0      	ldr	r0, [r2, r3]
 800740a:	2318      	movs	r3, #24
 800740c:	2200      	movs	r2, #0
 800740e:	2100      	movs	r1, #0
 8007410:	f7fb f964 	bl	80026dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	23b0      	movs	r3, #176	@ 0xb0
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	58d0      	ldr	r0, [r2, r3]
 800741c:	2358      	movs	r3, #88	@ 0x58
 800741e:	2200      	movs	r2, #0
 8007420:	2180      	movs	r1, #128	@ 0x80
 8007422:	f7fb f95b 	bl	80026dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	23b0      	movs	r3, #176	@ 0xb0
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	58d0      	ldr	r0, [r2, r3]
 800742e:	2380      	movs	r3, #128	@ 0x80
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	2200      	movs	r2, #0
 8007434:	2181      	movs	r1, #129	@ 0x81
 8007436:	f7fb f951 	bl	80026dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	0018      	movs	r0, r3
 800743e:	46bd      	mov	sp, r7
 8007440:	b002      	add	sp, #8
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20000700 	.word	0x20000700
 8007448:	40005c00 	.word	0x40005c00

0800744c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007454:	210f      	movs	r1, #15
 8007456:	187b      	adds	r3, r7, r1
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745c:	260e      	movs	r6, #14
 800745e:	19bb      	adds	r3, r7, r6
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	23b0      	movs	r3, #176	@ 0xb0
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	58d3      	ldr	r3, [r2, r3]
 800746c:	000d      	movs	r5, r1
 800746e:	187c      	adds	r4, r7, r1
 8007470:	0018      	movs	r0, r3
 8007472:	f7f9 fc7f 	bl	8000d74 <HAL_PCD_Start>
 8007476:	0003      	movs	r3, r0
 8007478:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800747a:	19bc      	adds	r4, r7, r6
 800747c:	197b      	adds	r3, r7, r5
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	0018      	movs	r0, r3
 8007482:	f000 f9a6 	bl	80077d2 <USBD_Get_USB_Status>
 8007486:	0003      	movs	r3, r0
 8007488:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800748a:	19bb      	adds	r3, r7, r6
 800748c:	781b      	ldrb	r3, [r3, #0]
}
 800748e:	0018      	movs	r0, r3
 8007490:	46bd      	mov	sp, r7
 8007492:	b005      	add	sp, #20
 8007494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007496 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007496:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	000c      	movs	r4, r1
 80074a0:	0010      	movs	r0, r2
 80074a2:	0019      	movs	r1, r3
 80074a4:	1cfb      	adds	r3, r7, #3
 80074a6:	1c22      	adds	r2, r4, #0
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	1cbb      	adds	r3, r7, #2
 80074ac:	1c02      	adds	r2, r0, #0
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	003b      	movs	r3, r7
 80074b2:	1c0a      	adds	r2, r1, #0
 80074b4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b6:	260f      	movs	r6, #15
 80074b8:	19bb      	adds	r3, r7, r6
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074be:	250e      	movs	r5, #14
 80074c0:	197b      	adds	r3, r7, r5
 80074c2:	2200      	movs	r2, #0
 80074c4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	23b0      	movs	r3, #176	@ 0xb0
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	58d0      	ldr	r0, [r2, r3]
 80074ce:	19bc      	adds	r4, r7, r6
 80074d0:	1cbb      	adds	r3, r7, #2
 80074d2:	781d      	ldrb	r5, [r3, #0]
 80074d4:	003b      	movs	r3, r7
 80074d6:	881a      	ldrh	r2, [r3, #0]
 80074d8:	1cfb      	adds	r3, r7, #3
 80074da:	7819      	ldrb	r1, [r3, #0]
 80074dc:	002b      	movs	r3, r5
 80074de:	f7f9 fdde 	bl	800109e <HAL_PCD_EP_Open>
 80074e2:	0003      	movs	r3, r0
 80074e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e6:	250e      	movs	r5, #14
 80074e8:	197c      	adds	r4, r7, r5
 80074ea:	19bb      	adds	r3, r7, r6
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	0018      	movs	r0, r3
 80074f0:	f000 f96f 	bl	80077d2 <USBD_Get_USB_Status>
 80074f4:	0003      	movs	r3, r0
 80074f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80074f8:	197b      	adds	r3, r7, r5
 80074fa:	781b      	ldrb	r3, [r3, #0]
}
 80074fc:	0018      	movs	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	b005      	add	sp, #20
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007504 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	000a      	movs	r2, r1
 800750e:	1cfb      	adds	r3, r7, #3
 8007510:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007512:	210f      	movs	r1, #15
 8007514:	187b      	adds	r3, r7, r1
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751a:	260e      	movs	r6, #14
 800751c:	19bb      	adds	r3, r7, r6
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	23b0      	movs	r3, #176	@ 0xb0
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	58d2      	ldr	r2, [r2, r3]
 800752a:	000d      	movs	r5, r1
 800752c:	187c      	adds	r4, r7, r1
 800752e:	1cfb      	adds	r3, r7, #3
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	0019      	movs	r1, r3
 8007534:	0010      	movs	r0, r2
 8007536:	f7f9 fe21 	bl	800117c <HAL_PCD_EP_Close>
 800753a:	0003      	movs	r3, r0
 800753c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800753e:	19bc      	adds	r4, r7, r6
 8007540:	197b      	adds	r3, r7, r5
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	0018      	movs	r0, r3
 8007546:	f000 f944 	bl	80077d2 <USBD_Get_USB_Status>
 800754a:	0003      	movs	r3, r0
 800754c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800754e:	19bb      	adds	r3, r7, r6
 8007550:	781b      	ldrb	r3, [r3, #0]
}
 8007552:	0018      	movs	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	b005      	add	sp, #20
 8007558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800755a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800755a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	000a      	movs	r2, r1
 8007564:	1cfb      	adds	r3, r7, #3
 8007566:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007568:	210f      	movs	r1, #15
 800756a:	187b      	adds	r3, r7, r1
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007570:	260e      	movs	r6, #14
 8007572:	19bb      	adds	r3, r7, r6
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	23b0      	movs	r3, #176	@ 0xb0
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	58d2      	ldr	r2, [r2, r3]
 8007580:	000d      	movs	r5, r1
 8007582:	187c      	adds	r4, r7, r1
 8007584:	1cfb      	adds	r3, r7, #3
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	0019      	movs	r1, r3
 800758a:	0010      	movs	r0, r2
 800758c:	f7f9 feba 	bl	8001304 <HAL_PCD_EP_SetStall>
 8007590:	0003      	movs	r3, r0
 8007592:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007594:	19bc      	adds	r4, r7, r6
 8007596:	197b      	adds	r3, r7, r5
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	0018      	movs	r0, r3
 800759c:	f000 f919 	bl	80077d2 <USBD_Get_USB_Status>
 80075a0:	0003      	movs	r3, r0
 80075a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80075a4:	19bb      	adds	r3, r7, r6
 80075a6:	781b      	ldrb	r3, [r3, #0]
}
 80075a8:	0018      	movs	r0, r3
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b005      	add	sp, #20
 80075ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075b0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	000a      	movs	r2, r1
 80075ba:	1cfb      	adds	r3, r7, #3
 80075bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075be:	210f      	movs	r1, #15
 80075c0:	187b      	adds	r3, r7, r1
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075c6:	260e      	movs	r6, #14
 80075c8:	19bb      	adds	r3, r7, r6
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	23b0      	movs	r3, #176	@ 0xb0
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	58d2      	ldr	r2, [r2, r3]
 80075d6:	000d      	movs	r5, r1
 80075d8:	187c      	adds	r4, r7, r1
 80075da:	1cfb      	adds	r3, r7, #3
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	0019      	movs	r1, r3
 80075e0:	0010      	movs	r0, r2
 80075e2:	f7f9 feeb 	bl	80013bc <HAL_PCD_EP_ClrStall>
 80075e6:	0003      	movs	r3, r0
 80075e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ea:	19bc      	adds	r4, r7, r6
 80075ec:	197b      	adds	r3, r7, r5
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	0018      	movs	r0, r3
 80075f2:	f000 f8ee 	bl	80077d2 <USBD_Get_USB_Status>
 80075f6:	0003      	movs	r3, r0
 80075f8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80075fa:	19bb      	adds	r3, r7, r6
 80075fc:	781b      	ldrb	r3, [r3, #0]
}
 80075fe:	0018      	movs	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	b005      	add	sp, #20
 8007604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007606 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	000a      	movs	r2, r1
 8007610:	1cfb      	adds	r3, r7, #3
 8007612:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	23b0      	movs	r3, #176	@ 0xb0
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	58d3      	ldr	r3, [r2, r3]
 800761c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800761e:	1cfb      	adds	r3, r7, #3
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b25b      	sxtb	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	da0d      	bge.n	8007644 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007628:	1cfb      	adds	r3, r7, #3
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	227f      	movs	r2, #127	@ 0x7f
 800762e:	4013      	ands	r3, r2
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	0013      	movs	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	189b      	adds	r3, r3, r2
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	18cb      	adds	r3, r1, r3
 800763e:	3302      	adds	r3, #2
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	e00d      	b.n	8007660 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007644:	1cfb      	adds	r3, r7, #3
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	227f      	movs	r2, #127	@ 0x7f
 800764a:	401a      	ands	r2, r3
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	23b5      	movs	r3, #181	@ 0xb5
 8007650:	0059      	lsls	r1, r3, #1
 8007652:	0013      	movs	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	189b      	adds	r3, r3, r2
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	18c3      	adds	r3, r0, r3
 800765c:	185b      	adds	r3, r3, r1
 800765e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007660:	0018      	movs	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	b004      	add	sp, #16
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	000a      	movs	r2, r1
 8007672:	1cfb      	adds	r3, r7, #3
 8007674:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007676:	210f      	movs	r1, #15
 8007678:	187b      	adds	r3, r7, r1
 800767a:	2200      	movs	r2, #0
 800767c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767e:	260e      	movs	r6, #14
 8007680:	19bb      	adds	r3, r7, r6
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	23b0      	movs	r3, #176	@ 0xb0
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	58d2      	ldr	r2, [r2, r3]
 800768e:	000d      	movs	r5, r1
 8007690:	187c      	adds	r4, r7, r1
 8007692:	1cfb      	adds	r3, r7, #3
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	0019      	movs	r1, r3
 8007698:	0010      	movs	r0, r2
 800769a:	f7f9 fcd5 	bl	8001048 <HAL_PCD_SetAddress>
 800769e:	0003      	movs	r3, r0
 80076a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076a2:	19bc      	adds	r4, r7, r6
 80076a4:	197b      	adds	r3, r7, r5
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	0018      	movs	r0, r3
 80076aa:	f000 f892 	bl	80077d2 <USBD_Get_USB_Status>
 80076ae:	0003      	movs	r3, r0
 80076b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80076b2:	19bb      	adds	r3, r7, r6
 80076b4:	781b      	ldrb	r3, [r3, #0]
}
 80076b6:	0018      	movs	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	b005      	add	sp, #20
 80076bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80076be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c0:	b087      	sub	sp, #28
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	0008      	movs	r0, r1
 80076c8:	607a      	str	r2, [r7, #4]
 80076ca:	0019      	movs	r1, r3
 80076cc:	230b      	movs	r3, #11
 80076ce:	18fb      	adds	r3, r7, r3
 80076d0:	1c02      	adds	r2, r0, #0
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	2408      	movs	r4, #8
 80076d6:	193b      	adds	r3, r7, r4
 80076d8:	1c0a      	adds	r2, r1, #0
 80076da:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076dc:	2117      	movs	r1, #23
 80076de:	187b      	adds	r3, r7, r1
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e4:	2516      	movs	r5, #22
 80076e6:	197b      	adds	r3, r7, r5
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	23b0      	movs	r3, #176	@ 0xb0
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	58d0      	ldr	r0, [r2, r3]
 80076f4:	193b      	adds	r3, r7, r4
 80076f6:	881d      	ldrh	r5, [r3, #0]
 80076f8:	000e      	movs	r6, r1
 80076fa:	187c      	adds	r4, r7, r1
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	230b      	movs	r3, #11
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	7819      	ldrb	r1, [r3, #0]
 8007704:	002b      	movs	r3, r5
 8007706:	f7f9 fdc1 	bl	800128c <HAL_PCD_EP_Transmit>
 800770a:	0003      	movs	r3, r0
 800770c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770e:	2516      	movs	r5, #22
 8007710:	197c      	adds	r4, r7, r5
 8007712:	19bb      	adds	r3, r7, r6
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	0018      	movs	r0, r3
 8007718:	f000 f85b 	bl	80077d2 <USBD_Get_USB_Status>
 800771c:	0003      	movs	r3, r0
 800771e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007720:	197b      	adds	r3, r7, r5
 8007722:	781b      	ldrb	r3, [r3, #0]
}
 8007724:	0018      	movs	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	b007      	add	sp, #28
 800772a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800772c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800772c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	0008      	movs	r0, r1
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	0019      	movs	r1, r3
 800773a:	230b      	movs	r3, #11
 800773c:	18fb      	adds	r3, r7, r3
 800773e:	1c02      	adds	r2, r0, #0
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	2408      	movs	r4, #8
 8007744:	193b      	adds	r3, r7, r4
 8007746:	1c0a      	adds	r2, r1, #0
 8007748:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774a:	2117      	movs	r1, #23
 800774c:	187b      	adds	r3, r7, r1
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007752:	2516      	movs	r5, #22
 8007754:	197b      	adds	r3, r7, r5
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	23b0      	movs	r3, #176	@ 0xb0
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	58d0      	ldr	r0, [r2, r3]
 8007762:	193b      	adds	r3, r7, r4
 8007764:	881d      	ldrh	r5, [r3, #0]
 8007766:	000e      	movs	r6, r1
 8007768:	187c      	adds	r4, r7, r1
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	230b      	movs	r3, #11
 800776e:	18fb      	adds	r3, r7, r3
 8007770:	7819      	ldrb	r1, [r3, #0]
 8007772:	002b      	movs	r3, r5
 8007774:	f7f9 fd53 	bl	800121e <HAL_PCD_EP_Receive>
 8007778:	0003      	movs	r3, r0
 800777a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800777c:	2516      	movs	r5, #22
 800777e:	197c      	adds	r4, r7, r5
 8007780:	19bb      	adds	r3, r7, r6
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	0018      	movs	r0, r3
 8007786:	f000 f824 	bl	80077d2 <USBD_Get_USB_Status>
 800778a:	0003      	movs	r3, r0
 800778c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800778e:	197b      	adds	r3, r7, r5
 8007790:	781b      	ldrb	r3, [r3, #0]
}
 8007792:	0018      	movs	r0, r3
 8007794:	46bd      	mov	sp, r7
 8007796:	b007      	add	sp, #28
 8007798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800779c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077a4:	4b02      	ldr	r3, [pc, #8]	@ (80077b0 <USBD_static_malloc+0x14>)
}
 80077a6:	0018      	movs	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	b002      	add	sp, #8
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	46c0      	nop			@ (mov r8, r8)
 80077b0:	200009f4 	.word	0x200009f4

080077b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

}
 80077bc:	46c0      	nop			@ (mov r8, r8)
 80077be:	46bd      	mov	sp, r7
 80077c0:	b002      	add	sp, #8
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80077c8:	f7f8 ff30 	bl	800062c <SystemClock_Config>
}
 80077cc:	46c0      	nop			@ (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	0002      	movs	r2, r0
 80077da:	1dfb      	adds	r3, r7, #7
 80077dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077de:	230f      	movs	r3, #15
 80077e0:	18fb      	adds	r3, r7, r3
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80077e6:	1dfb      	adds	r3, r7, #7
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d017      	beq.n	800781e <USBD_Get_USB_Status+0x4c>
 80077ee:	dc1b      	bgt.n	8007828 <USBD_Get_USB_Status+0x56>
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d00f      	beq.n	8007814 <USBD_Get_USB_Status+0x42>
 80077f4:	dc18      	bgt.n	8007828 <USBD_Get_USB_Status+0x56>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <USBD_Get_USB_Status+0x2e>
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d005      	beq.n	800780a <USBD_Get_USB_Status+0x38>
 80077fe:	e013      	b.n	8007828 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007800:	230f      	movs	r3, #15
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
    break;
 8007808:	e013      	b.n	8007832 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800780a:	230f      	movs	r3, #15
 800780c:	18fb      	adds	r3, r7, r3
 800780e:	2202      	movs	r2, #2
 8007810:	701a      	strb	r2, [r3, #0]
    break;
 8007812:	e00e      	b.n	8007832 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007814:	230f      	movs	r3, #15
 8007816:	18fb      	adds	r3, r7, r3
 8007818:	2201      	movs	r2, #1
 800781a:	701a      	strb	r2, [r3, #0]
    break;
 800781c:	e009      	b.n	8007832 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800781e:	230f      	movs	r3, #15
 8007820:	18fb      	adds	r3, r7, r3
 8007822:	2202      	movs	r2, #2
 8007824:	701a      	strb	r2, [r3, #0]
    break;
 8007826:	e004      	b.n	8007832 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007828:	230f      	movs	r3, #15
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2202      	movs	r2, #2
 800782e:	701a      	strb	r2, [r3, #0]
    break;
 8007830:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8007832:	230f      	movs	r3, #15
 8007834:	18fb      	adds	r3, r7, r3
 8007836:	781b      	ldrb	r3, [r3, #0]
}
 8007838:	0018      	movs	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	b004      	add	sp, #16
 800783e:	bd80      	pop	{r7, pc}

08007840 <siprintf>:
 8007840:	b40e      	push	{r1, r2, r3}
 8007842:	b500      	push	{lr}
 8007844:	490b      	ldr	r1, [pc, #44]	@ (8007874 <siprintf+0x34>)
 8007846:	b09c      	sub	sp, #112	@ 0x70
 8007848:	ab1d      	add	r3, sp, #116	@ 0x74
 800784a:	9002      	str	r0, [sp, #8]
 800784c:	9006      	str	r0, [sp, #24]
 800784e:	9107      	str	r1, [sp, #28]
 8007850:	9104      	str	r1, [sp, #16]
 8007852:	4809      	ldr	r0, [pc, #36]	@ (8007878 <siprintf+0x38>)
 8007854:	4909      	ldr	r1, [pc, #36]	@ (800787c <siprintf+0x3c>)
 8007856:	cb04      	ldmia	r3!, {r2}
 8007858:	9105      	str	r1, [sp, #20]
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	a902      	add	r1, sp, #8
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	f000 f99e 	bl	8007ba0 <_svfiprintf_r>
 8007864:	2200      	movs	r2, #0
 8007866:	9b02      	ldr	r3, [sp, #8]
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	b01c      	add	sp, #112	@ 0x70
 800786c:	bc08      	pop	{r3}
 800786e:	b003      	add	sp, #12
 8007870:	4718      	bx	r3
 8007872:	46c0      	nop			@ (mov r8, r8)
 8007874:	7fffffff 	.word	0x7fffffff
 8007878:	20000158 	.word	0x20000158
 800787c:	ffff0208 	.word	0xffff0208

08007880 <memset>:
 8007880:	0003      	movs	r3, r0
 8007882:	1882      	adds	r2, r0, r2
 8007884:	4293      	cmp	r3, r2
 8007886:	d100      	bne.n	800788a <memset+0xa>
 8007888:	4770      	bx	lr
 800788a:	7019      	strb	r1, [r3, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	e7f9      	b.n	8007884 <memset+0x4>

08007890 <__errno>:
 8007890:	4b01      	ldr	r3, [pc, #4]	@ (8007898 <__errno+0x8>)
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	4770      	bx	lr
 8007896:	46c0      	nop			@ (mov r8, r8)
 8007898:	20000158 	.word	0x20000158

0800789c <__libc_init_array>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	2600      	movs	r6, #0
 80078a0:	4c0c      	ldr	r4, [pc, #48]	@ (80078d4 <__libc_init_array+0x38>)
 80078a2:	4d0d      	ldr	r5, [pc, #52]	@ (80078d8 <__libc_init_array+0x3c>)
 80078a4:	1b64      	subs	r4, r4, r5
 80078a6:	10a4      	asrs	r4, r4, #2
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	d109      	bne.n	80078c0 <__libc_init_array+0x24>
 80078ac:	2600      	movs	r6, #0
 80078ae:	f000 fc65 	bl	800817c <_init>
 80078b2:	4c0a      	ldr	r4, [pc, #40]	@ (80078dc <__libc_init_array+0x40>)
 80078b4:	4d0a      	ldr	r5, [pc, #40]	@ (80078e0 <__libc_init_array+0x44>)
 80078b6:	1b64      	subs	r4, r4, r5
 80078b8:	10a4      	asrs	r4, r4, #2
 80078ba:	42a6      	cmp	r6, r4
 80078bc:	d105      	bne.n	80078ca <__libc_init_array+0x2e>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	00b3      	lsls	r3, r6, #2
 80078c2:	58eb      	ldr	r3, [r5, r3]
 80078c4:	4798      	blx	r3
 80078c6:	3601      	adds	r6, #1
 80078c8:	e7ee      	b.n	80078a8 <__libc_init_array+0xc>
 80078ca:	00b3      	lsls	r3, r6, #2
 80078cc:	58eb      	ldr	r3, [r5, r3]
 80078ce:	4798      	blx	r3
 80078d0:	3601      	adds	r6, #1
 80078d2:	e7f2      	b.n	80078ba <__libc_init_array+0x1e>
 80078d4:	080082b0 	.word	0x080082b0
 80078d8:	080082b0 	.word	0x080082b0
 80078dc:	080082b4 	.word	0x080082b4
 80078e0:	080082b0 	.word	0x080082b0

080078e4 <__retarget_lock_acquire_recursive>:
 80078e4:	4770      	bx	lr

080078e6 <__retarget_lock_release_recursive>:
 80078e6:	4770      	bx	lr

080078e8 <_free_r>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	0005      	movs	r5, r0
 80078ec:	1e0c      	subs	r4, r1, #0
 80078ee:	d010      	beq.n	8007912 <_free_r+0x2a>
 80078f0:	3c04      	subs	r4, #4
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da00      	bge.n	80078fa <_free_r+0x12>
 80078f8:	18e4      	adds	r4, r4, r3
 80078fa:	0028      	movs	r0, r5
 80078fc:	f000 f8e0 	bl	8007ac0 <__malloc_lock>
 8007900:	4a1d      	ldr	r2, [pc, #116]	@ (8007978 <_free_r+0x90>)
 8007902:	6813      	ldr	r3, [r2, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d105      	bne.n	8007914 <_free_r+0x2c>
 8007908:	6063      	str	r3, [r4, #4]
 800790a:	6014      	str	r4, [r2, #0]
 800790c:	0028      	movs	r0, r5
 800790e:	f000 f8df 	bl	8007ad0 <__malloc_unlock>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	42a3      	cmp	r3, r4
 8007916:	d908      	bls.n	800792a <_free_r+0x42>
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	1821      	adds	r1, r4, r0
 800791c:	428b      	cmp	r3, r1
 800791e:	d1f3      	bne.n	8007908 <_free_r+0x20>
 8007920:	6819      	ldr	r1, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	1809      	adds	r1, r1, r0
 8007926:	6021      	str	r1, [r4, #0]
 8007928:	e7ee      	b.n	8007908 <_free_r+0x20>
 800792a:	001a      	movs	r2, r3
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <_free_r+0x4e>
 8007932:	42a3      	cmp	r3, r4
 8007934:	d9f9      	bls.n	800792a <_free_r+0x42>
 8007936:	6811      	ldr	r1, [r2, #0]
 8007938:	1850      	adds	r0, r2, r1
 800793a:	42a0      	cmp	r0, r4
 800793c:	d10b      	bne.n	8007956 <_free_r+0x6e>
 800793e:	6820      	ldr	r0, [r4, #0]
 8007940:	1809      	adds	r1, r1, r0
 8007942:	1850      	adds	r0, r2, r1
 8007944:	6011      	str	r1, [r2, #0]
 8007946:	4283      	cmp	r3, r0
 8007948:	d1e0      	bne.n	800790c <_free_r+0x24>
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	1841      	adds	r1, r0, r1
 8007950:	6011      	str	r1, [r2, #0]
 8007952:	6053      	str	r3, [r2, #4]
 8007954:	e7da      	b.n	800790c <_free_r+0x24>
 8007956:	42a0      	cmp	r0, r4
 8007958:	d902      	bls.n	8007960 <_free_r+0x78>
 800795a:	230c      	movs	r3, #12
 800795c:	602b      	str	r3, [r5, #0]
 800795e:	e7d5      	b.n	800790c <_free_r+0x24>
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	1821      	adds	r1, r4, r0
 8007964:	428b      	cmp	r3, r1
 8007966:	d103      	bne.n	8007970 <_free_r+0x88>
 8007968:	6819      	ldr	r1, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	1809      	adds	r1, r1, r0
 800796e:	6021      	str	r1, [r4, #0]
 8007970:	6063      	str	r3, [r4, #4]
 8007972:	6054      	str	r4, [r2, #4]
 8007974:	e7ca      	b.n	800790c <_free_r+0x24>
 8007976:	46c0      	nop			@ (mov r8, r8)
 8007978:	20000b4c 	.word	0x20000b4c

0800797c <sbrk_aligned>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4e0f      	ldr	r6, [pc, #60]	@ (80079bc <sbrk_aligned+0x40>)
 8007980:	000d      	movs	r5, r1
 8007982:	6831      	ldr	r1, [r6, #0]
 8007984:	0004      	movs	r4, r0
 8007986:	2900      	cmp	r1, #0
 8007988:	d102      	bne.n	8007990 <sbrk_aligned+0x14>
 800798a:	f000 fb99 	bl	80080c0 <_sbrk_r>
 800798e:	6030      	str	r0, [r6, #0]
 8007990:	0029      	movs	r1, r5
 8007992:	0020      	movs	r0, r4
 8007994:	f000 fb94 	bl	80080c0 <_sbrk_r>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d103      	bne.n	80079a4 <sbrk_aligned+0x28>
 800799c:	2501      	movs	r5, #1
 800799e:	426d      	negs	r5, r5
 80079a0:	0028      	movs	r0, r5
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	2303      	movs	r3, #3
 80079a6:	1cc5      	adds	r5, r0, #3
 80079a8:	439d      	bics	r5, r3
 80079aa:	42a8      	cmp	r0, r5
 80079ac:	d0f8      	beq.n	80079a0 <sbrk_aligned+0x24>
 80079ae:	1a29      	subs	r1, r5, r0
 80079b0:	0020      	movs	r0, r4
 80079b2:	f000 fb85 	bl	80080c0 <_sbrk_r>
 80079b6:	3001      	adds	r0, #1
 80079b8:	d1f2      	bne.n	80079a0 <sbrk_aligned+0x24>
 80079ba:	e7ef      	b.n	800799c <sbrk_aligned+0x20>
 80079bc:	20000b48 	.word	0x20000b48

080079c0 <_malloc_r>:
 80079c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079c2:	2203      	movs	r2, #3
 80079c4:	1ccb      	adds	r3, r1, #3
 80079c6:	4393      	bics	r3, r2
 80079c8:	3308      	adds	r3, #8
 80079ca:	0005      	movs	r5, r0
 80079cc:	001f      	movs	r7, r3
 80079ce:	2b0c      	cmp	r3, #12
 80079d0:	d234      	bcs.n	8007a3c <_malloc_r+0x7c>
 80079d2:	270c      	movs	r7, #12
 80079d4:	42b9      	cmp	r1, r7
 80079d6:	d833      	bhi.n	8007a40 <_malloc_r+0x80>
 80079d8:	0028      	movs	r0, r5
 80079da:	f000 f871 	bl	8007ac0 <__malloc_lock>
 80079de:	4e37      	ldr	r6, [pc, #220]	@ (8007abc <_malloc_r+0xfc>)
 80079e0:	6833      	ldr	r3, [r6, #0]
 80079e2:	001c      	movs	r4, r3
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d12f      	bne.n	8007a48 <_malloc_r+0x88>
 80079e8:	0039      	movs	r1, r7
 80079ea:	0028      	movs	r0, r5
 80079ec:	f7ff ffc6 	bl	800797c <sbrk_aligned>
 80079f0:	0004      	movs	r4, r0
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d15f      	bne.n	8007ab6 <_malloc_r+0xf6>
 80079f6:	6834      	ldr	r4, [r6, #0]
 80079f8:	9400      	str	r4, [sp, #0]
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d14a      	bne.n	8007a96 <_malloc_r+0xd6>
 8007a00:	2c00      	cmp	r4, #0
 8007a02:	d052      	beq.n	8007aaa <_malloc_r+0xea>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	0028      	movs	r0, r5
 8007a08:	18e3      	adds	r3, r4, r3
 8007a0a:	9900      	ldr	r1, [sp, #0]
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	f000 fb57 	bl	80080c0 <_sbrk_r>
 8007a12:	9b01      	ldr	r3, [sp, #4]
 8007a14:	4283      	cmp	r3, r0
 8007a16:	d148      	bne.n	8007aaa <_malloc_r+0xea>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	0028      	movs	r0, r5
 8007a1c:	1aff      	subs	r7, r7, r3
 8007a1e:	0039      	movs	r1, r7
 8007a20:	f7ff ffac 	bl	800797c <sbrk_aligned>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d040      	beq.n	8007aaa <_malloc_r+0xea>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	19db      	adds	r3, r3, r7
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	6833      	ldr	r3, [r6, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	d133      	bne.n	8007a9e <_malloc_r+0xde>
 8007a36:	9b00      	ldr	r3, [sp, #0]
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	e019      	b.n	8007a70 <_malloc_r+0xb0>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dac9      	bge.n	80079d4 <_malloc_r+0x14>
 8007a40:	230c      	movs	r3, #12
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	2000      	movs	r0, #0
 8007a46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a48:	6821      	ldr	r1, [r4, #0]
 8007a4a:	1bc9      	subs	r1, r1, r7
 8007a4c:	d420      	bmi.n	8007a90 <_malloc_r+0xd0>
 8007a4e:	290b      	cmp	r1, #11
 8007a50:	d90a      	bls.n	8007a68 <_malloc_r+0xa8>
 8007a52:	19e2      	adds	r2, r4, r7
 8007a54:	6027      	str	r7, [r4, #0]
 8007a56:	42a3      	cmp	r3, r4
 8007a58:	d104      	bne.n	8007a64 <_malloc_r+0xa4>
 8007a5a:	6032      	str	r2, [r6, #0]
 8007a5c:	6863      	ldr	r3, [r4, #4]
 8007a5e:	6011      	str	r1, [r2, #0]
 8007a60:	6053      	str	r3, [r2, #4]
 8007a62:	e005      	b.n	8007a70 <_malloc_r+0xb0>
 8007a64:	605a      	str	r2, [r3, #4]
 8007a66:	e7f9      	b.n	8007a5c <_malloc_r+0x9c>
 8007a68:	6862      	ldr	r2, [r4, #4]
 8007a6a:	42a3      	cmp	r3, r4
 8007a6c:	d10e      	bne.n	8007a8c <_malloc_r+0xcc>
 8007a6e:	6032      	str	r2, [r6, #0]
 8007a70:	0028      	movs	r0, r5
 8007a72:	f000 f82d 	bl	8007ad0 <__malloc_unlock>
 8007a76:	0020      	movs	r0, r4
 8007a78:	2207      	movs	r2, #7
 8007a7a:	300b      	adds	r0, #11
 8007a7c:	1d23      	adds	r3, r4, #4
 8007a7e:	4390      	bics	r0, r2
 8007a80:	1ac2      	subs	r2, r0, r3
 8007a82:	4298      	cmp	r0, r3
 8007a84:	d0df      	beq.n	8007a46 <_malloc_r+0x86>
 8007a86:	1a1b      	subs	r3, r3, r0
 8007a88:	50a3      	str	r3, [r4, r2]
 8007a8a:	e7dc      	b.n	8007a46 <_malloc_r+0x86>
 8007a8c:	605a      	str	r2, [r3, #4]
 8007a8e:	e7ef      	b.n	8007a70 <_malloc_r+0xb0>
 8007a90:	0023      	movs	r3, r4
 8007a92:	6864      	ldr	r4, [r4, #4]
 8007a94:	e7a6      	b.n	80079e4 <_malloc_r+0x24>
 8007a96:	9c00      	ldr	r4, [sp, #0]
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	e7ad      	b.n	80079fa <_malloc_r+0x3a>
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	42a3      	cmp	r3, r4
 8007aa4:	d1fb      	bne.n	8007a9e <_malloc_r+0xde>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e7da      	b.n	8007a60 <_malloc_r+0xa0>
 8007aaa:	230c      	movs	r3, #12
 8007aac:	0028      	movs	r0, r5
 8007aae:	602b      	str	r3, [r5, #0]
 8007ab0:	f000 f80e 	bl	8007ad0 <__malloc_unlock>
 8007ab4:	e7c6      	b.n	8007a44 <_malloc_r+0x84>
 8007ab6:	6007      	str	r7, [r0, #0]
 8007ab8:	e7da      	b.n	8007a70 <_malloc_r+0xb0>
 8007aba:	46c0      	nop			@ (mov r8, r8)
 8007abc:	20000b4c 	.word	0x20000b4c

08007ac0 <__malloc_lock>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	4802      	ldr	r0, [pc, #8]	@ (8007acc <__malloc_lock+0xc>)
 8007ac4:	f7ff ff0e 	bl	80078e4 <__retarget_lock_acquire_recursive>
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	46c0      	nop			@ (mov r8, r8)
 8007acc:	20000b44 	.word	0x20000b44

08007ad0 <__malloc_unlock>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4802      	ldr	r0, [pc, #8]	@ (8007adc <__malloc_unlock+0xc>)
 8007ad4:	f7ff ff07 	bl	80078e6 <__retarget_lock_release_recursive>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	46c0      	nop			@ (mov r8, r8)
 8007adc:	20000b44 	.word	0x20000b44

08007ae0 <__ssputs_r>:
 8007ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ae2:	688e      	ldr	r6, [r1, #8]
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	001f      	movs	r7, r3
 8007ae8:	000c      	movs	r4, r1
 8007aea:	680b      	ldr	r3, [r1, #0]
 8007aec:	9002      	str	r0, [sp, #8]
 8007aee:	9203      	str	r2, [sp, #12]
 8007af0:	42be      	cmp	r6, r7
 8007af2:	d830      	bhi.n	8007b56 <__ssputs_r+0x76>
 8007af4:	210c      	movs	r1, #12
 8007af6:	5e62      	ldrsh	r2, [r4, r1]
 8007af8:	2190      	movs	r1, #144	@ 0x90
 8007afa:	00c9      	lsls	r1, r1, #3
 8007afc:	420a      	tst	r2, r1
 8007afe:	d028      	beq.n	8007b52 <__ssputs_r+0x72>
 8007b00:	2003      	movs	r0, #3
 8007b02:	6921      	ldr	r1, [r4, #16]
 8007b04:	1a5b      	subs	r3, r3, r1
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	6963      	ldr	r3, [r4, #20]
 8007b0a:	4343      	muls	r3, r0
 8007b0c:	9801      	ldr	r0, [sp, #4]
 8007b0e:	0fdd      	lsrs	r5, r3, #31
 8007b10:	18ed      	adds	r5, r5, r3
 8007b12:	1c7b      	adds	r3, r7, #1
 8007b14:	181b      	adds	r3, r3, r0
 8007b16:	106d      	asrs	r5, r5, #1
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	d900      	bls.n	8007b1e <__ssputs_r+0x3e>
 8007b1c:	001d      	movs	r5, r3
 8007b1e:	0552      	lsls	r2, r2, #21
 8007b20:	d528      	bpl.n	8007b74 <__ssputs_r+0x94>
 8007b22:	0029      	movs	r1, r5
 8007b24:	9802      	ldr	r0, [sp, #8]
 8007b26:	f7ff ff4b 	bl	80079c0 <_malloc_r>
 8007b2a:	1e06      	subs	r6, r0, #0
 8007b2c:	d02c      	beq.n	8007b88 <__ssputs_r+0xa8>
 8007b2e:	9a01      	ldr	r2, [sp, #4]
 8007b30:	6921      	ldr	r1, [r4, #16]
 8007b32:	f000 fae2 	bl	80080fa <memcpy>
 8007b36:	89a2      	ldrh	r2, [r4, #12]
 8007b38:	4b18      	ldr	r3, [pc, #96]	@ (8007b9c <__ssputs_r+0xbc>)
 8007b3a:	401a      	ands	r2, r3
 8007b3c:	2380      	movs	r3, #128	@ 0x80
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	9b01      	ldr	r3, [sp, #4]
 8007b44:	6126      	str	r6, [r4, #16]
 8007b46:	18f6      	adds	r6, r6, r3
 8007b48:	6026      	str	r6, [r4, #0]
 8007b4a:	003e      	movs	r6, r7
 8007b4c:	6165      	str	r5, [r4, #20]
 8007b4e:	1aed      	subs	r5, r5, r3
 8007b50:	60a5      	str	r5, [r4, #8]
 8007b52:	42be      	cmp	r6, r7
 8007b54:	d900      	bls.n	8007b58 <__ssputs_r+0x78>
 8007b56:	003e      	movs	r6, r7
 8007b58:	0032      	movs	r2, r6
 8007b5a:	9903      	ldr	r1, [sp, #12]
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	f000 fa9b 	bl	8008098 <memmove>
 8007b62:	2000      	movs	r0, #0
 8007b64:	68a3      	ldr	r3, [r4, #8]
 8007b66:	1b9b      	subs	r3, r3, r6
 8007b68:	60a3      	str	r3, [r4, #8]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	199b      	adds	r3, r3, r6
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	b005      	add	sp, #20
 8007b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b74:	002a      	movs	r2, r5
 8007b76:	9802      	ldr	r0, [sp, #8]
 8007b78:	f000 fac8 	bl	800810c <_realloc_r>
 8007b7c:	1e06      	subs	r6, r0, #0
 8007b7e:	d1e0      	bne.n	8007b42 <__ssputs_r+0x62>
 8007b80:	6921      	ldr	r1, [r4, #16]
 8007b82:	9802      	ldr	r0, [sp, #8]
 8007b84:	f7ff feb0 	bl	80078e8 <_free_r>
 8007b88:	230c      	movs	r3, #12
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	9a02      	ldr	r2, [sp, #8]
 8007b8e:	4240      	negs	r0, r0
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	89a2      	ldrh	r2, [r4, #12]
 8007b94:	3334      	adds	r3, #52	@ 0x34
 8007b96:	4313      	orrs	r3, r2
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	e7e9      	b.n	8007b70 <__ssputs_r+0x90>
 8007b9c:	fffffb7f 	.word	0xfffffb7f

08007ba0 <_svfiprintf_r>:
 8007ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba2:	b0a1      	sub	sp, #132	@ 0x84
 8007ba4:	9003      	str	r0, [sp, #12]
 8007ba6:	001d      	movs	r5, r3
 8007ba8:	898b      	ldrh	r3, [r1, #12]
 8007baa:	000f      	movs	r7, r1
 8007bac:	0016      	movs	r6, r2
 8007bae:	061b      	lsls	r3, r3, #24
 8007bb0:	d511      	bpl.n	8007bd6 <_svfiprintf_r+0x36>
 8007bb2:	690b      	ldr	r3, [r1, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10e      	bne.n	8007bd6 <_svfiprintf_r+0x36>
 8007bb8:	2140      	movs	r1, #64	@ 0x40
 8007bba:	f7ff ff01 	bl	80079c0 <_malloc_r>
 8007bbe:	6038      	str	r0, [r7, #0]
 8007bc0:	6138      	str	r0, [r7, #16]
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d105      	bne.n	8007bd2 <_svfiprintf_r+0x32>
 8007bc6:	230c      	movs	r3, #12
 8007bc8:	9a03      	ldr	r2, [sp, #12]
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	2001      	movs	r0, #1
 8007bce:	4240      	negs	r0, r0
 8007bd0:	e0cf      	b.n	8007d72 <_svfiprintf_r+0x1d2>
 8007bd2:	2340      	movs	r3, #64	@ 0x40
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	ac08      	add	r4, sp, #32
 8007bda:	6163      	str	r3, [r4, #20]
 8007bdc:	3320      	adds	r3, #32
 8007bde:	7663      	strb	r3, [r4, #25]
 8007be0:	3310      	adds	r3, #16
 8007be2:	76a3      	strb	r3, [r4, #26]
 8007be4:	9507      	str	r5, [sp, #28]
 8007be6:	0035      	movs	r5, r6
 8007be8:	782b      	ldrb	r3, [r5, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <_svfiprintf_r+0x52>
 8007bee:	2b25      	cmp	r3, #37	@ 0x25
 8007bf0:	d148      	bne.n	8007c84 <_svfiprintf_r+0xe4>
 8007bf2:	1bab      	subs	r3, r5, r6
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	42b5      	cmp	r5, r6
 8007bf8:	d00b      	beq.n	8007c12 <_svfiprintf_r+0x72>
 8007bfa:	0032      	movs	r2, r6
 8007bfc:	0039      	movs	r1, r7
 8007bfe:	9803      	ldr	r0, [sp, #12]
 8007c00:	f7ff ff6e 	bl	8007ae0 <__ssputs_r>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d100      	bne.n	8007c0a <_svfiprintf_r+0x6a>
 8007c08:	e0ae      	b.n	8007d68 <_svfiprintf_r+0x1c8>
 8007c0a:	6963      	ldr	r3, [r4, #20]
 8007c0c:	9a05      	ldr	r2, [sp, #20]
 8007c0e:	189b      	adds	r3, r3, r2
 8007c10:	6163      	str	r3, [r4, #20]
 8007c12:	782b      	ldrb	r3, [r5, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d100      	bne.n	8007c1a <_svfiprintf_r+0x7a>
 8007c18:	e0a6      	b.n	8007d68 <_svfiprintf_r+0x1c8>
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4252      	negs	r2, r2
 8007c20:	6062      	str	r2, [r4, #4]
 8007c22:	a904      	add	r1, sp, #16
 8007c24:	3254      	adds	r2, #84	@ 0x54
 8007c26:	1852      	adds	r2, r2, r1
 8007c28:	1c6e      	adds	r6, r5, #1
 8007c2a:	6023      	str	r3, [r4, #0]
 8007c2c:	60e3      	str	r3, [r4, #12]
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	7013      	strb	r3, [r2, #0]
 8007c32:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007c34:	4b54      	ldr	r3, [pc, #336]	@ (8007d88 <_svfiprintf_r+0x1e8>)
 8007c36:	2205      	movs	r2, #5
 8007c38:	0018      	movs	r0, r3
 8007c3a:	7831      	ldrb	r1, [r6, #0]
 8007c3c:	9305      	str	r3, [sp, #20]
 8007c3e:	f000 fa51 	bl	80080e4 <memchr>
 8007c42:	1c75      	adds	r5, r6, #1
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d11f      	bne.n	8007c88 <_svfiprintf_r+0xe8>
 8007c48:	6822      	ldr	r2, [r4, #0]
 8007c4a:	06d3      	lsls	r3, r2, #27
 8007c4c:	d504      	bpl.n	8007c58 <_svfiprintf_r+0xb8>
 8007c4e:	2353      	movs	r3, #83	@ 0x53
 8007c50:	a904      	add	r1, sp, #16
 8007c52:	185b      	adds	r3, r3, r1
 8007c54:	2120      	movs	r1, #32
 8007c56:	7019      	strb	r1, [r3, #0]
 8007c58:	0713      	lsls	r3, r2, #28
 8007c5a:	d504      	bpl.n	8007c66 <_svfiprintf_r+0xc6>
 8007c5c:	2353      	movs	r3, #83	@ 0x53
 8007c5e:	a904      	add	r1, sp, #16
 8007c60:	185b      	adds	r3, r3, r1
 8007c62:	212b      	movs	r1, #43	@ 0x2b
 8007c64:	7019      	strb	r1, [r3, #0]
 8007c66:	7833      	ldrb	r3, [r6, #0]
 8007c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c6a:	d016      	beq.n	8007c9a <_svfiprintf_r+0xfa>
 8007c6c:	0035      	movs	r5, r6
 8007c6e:	2100      	movs	r1, #0
 8007c70:	200a      	movs	r0, #10
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	782a      	ldrb	r2, [r5, #0]
 8007c76:	1c6e      	adds	r6, r5, #1
 8007c78:	3a30      	subs	r2, #48	@ 0x30
 8007c7a:	2a09      	cmp	r2, #9
 8007c7c:	d950      	bls.n	8007d20 <_svfiprintf_r+0x180>
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	d111      	bne.n	8007ca6 <_svfiprintf_r+0x106>
 8007c82:	e017      	b.n	8007cb4 <_svfiprintf_r+0x114>
 8007c84:	3501      	adds	r5, #1
 8007c86:	e7af      	b.n	8007be8 <_svfiprintf_r+0x48>
 8007c88:	9b05      	ldr	r3, [sp, #20]
 8007c8a:	6822      	ldr	r2, [r4, #0]
 8007c8c:	1ac0      	subs	r0, r0, r3
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4083      	lsls	r3, r0
 8007c92:	4313      	orrs	r3, r2
 8007c94:	002e      	movs	r6, r5
 8007c96:	6023      	str	r3, [r4, #0]
 8007c98:	e7cc      	b.n	8007c34 <_svfiprintf_r+0x94>
 8007c9a:	9b07      	ldr	r3, [sp, #28]
 8007c9c:	1d19      	adds	r1, r3, #4
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	9107      	str	r1, [sp, #28]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	db01      	blt.n	8007caa <_svfiprintf_r+0x10a>
 8007ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ca8:	e004      	b.n	8007cb4 <_svfiprintf_r+0x114>
 8007caa:	425b      	negs	r3, r3
 8007cac:	60e3      	str	r3, [r4, #12]
 8007cae:	2302      	movs	r3, #2
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	782b      	ldrb	r3, [r5, #0]
 8007cb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cb8:	d10c      	bne.n	8007cd4 <_svfiprintf_r+0x134>
 8007cba:	786b      	ldrb	r3, [r5, #1]
 8007cbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cbe:	d134      	bne.n	8007d2a <_svfiprintf_r+0x18a>
 8007cc0:	9b07      	ldr	r3, [sp, #28]
 8007cc2:	3502      	adds	r5, #2
 8007cc4:	1d1a      	adds	r2, r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	9207      	str	r2, [sp, #28]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	da01      	bge.n	8007cd2 <_svfiprintf_r+0x132>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cd4:	4e2d      	ldr	r6, [pc, #180]	@ (8007d8c <_svfiprintf_r+0x1ec>)
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	0030      	movs	r0, r6
 8007cda:	7829      	ldrb	r1, [r5, #0]
 8007cdc:	f000 fa02 	bl	80080e4 <memchr>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d006      	beq.n	8007cf2 <_svfiprintf_r+0x152>
 8007ce4:	2340      	movs	r3, #64	@ 0x40
 8007ce6:	1b80      	subs	r0, r0, r6
 8007ce8:	4083      	lsls	r3, r0
 8007cea:	6822      	ldr	r2, [r4, #0]
 8007cec:	3501      	adds	r5, #1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	7829      	ldrb	r1, [r5, #0]
 8007cf4:	2206      	movs	r2, #6
 8007cf6:	4826      	ldr	r0, [pc, #152]	@ (8007d90 <_svfiprintf_r+0x1f0>)
 8007cf8:	1c6e      	adds	r6, r5, #1
 8007cfa:	7621      	strb	r1, [r4, #24]
 8007cfc:	f000 f9f2 	bl	80080e4 <memchr>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d038      	beq.n	8007d76 <_svfiprintf_r+0x1d6>
 8007d04:	4b23      	ldr	r3, [pc, #140]	@ (8007d94 <_svfiprintf_r+0x1f4>)
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d122      	bne.n	8007d50 <_svfiprintf_r+0x1b0>
 8007d0a:	2207      	movs	r2, #7
 8007d0c:	9b07      	ldr	r3, [sp, #28]
 8007d0e:	3307      	adds	r3, #7
 8007d10:	4393      	bics	r3, r2
 8007d12:	3308      	adds	r3, #8
 8007d14:	9307      	str	r3, [sp, #28]
 8007d16:	6963      	ldr	r3, [r4, #20]
 8007d18:	9a04      	ldr	r2, [sp, #16]
 8007d1a:	189b      	adds	r3, r3, r2
 8007d1c:	6163      	str	r3, [r4, #20]
 8007d1e:	e762      	b.n	8007be6 <_svfiprintf_r+0x46>
 8007d20:	4343      	muls	r3, r0
 8007d22:	0035      	movs	r5, r6
 8007d24:	2101      	movs	r1, #1
 8007d26:	189b      	adds	r3, r3, r2
 8007d28:	e7a4      	b.n	8007c74 <_svfiprintf_r+0xd4>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	200a      	movs	r0, #10
 8007d2e:	0019      	movs	r1, r3
 8007d30:	3501      	adds	r5, #1
 8007d32:	6063      	str	r3, [r4, #4]
 8007d34:	782a      	ldrb	r2, [r5, #0]
 8007d36:	1c6e      	adds	r6, r5, #1
 8007d38:	3a30      	subs	r2, #48	@ 0x30
 8007d3a:	2a09      	cmp	r2, #9
 8007d3c:	d903      	bls.n	8007d46 <_svfiprintf_r+0x1a6>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0c8      	beq.n	8007cd4 <_svfiprintf_r+0x134>
 8007d42:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d44:	e7c6      	b.n	8007cd4 <_svfiprintf_r+0x134>
 8007d46:	4341      	muls	r1, r0
 8007d48:	0035      	movs	r5, r6
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	1889      	adds	r1, r1, r2
 8007d4e:	e7f1      	b.n	8007d34 <_svfiprintf_r+0x194>
 8007d50:	aa07      	add	r2, sp, #28
 8007d52:	9200      	str	r2, [sp, #0]
 8007d54:	0021      	movs	r1, r4
 8007d56:	003a      	movs	r2, r7
 8007d58:	4b0f      	ldr	r3, [pc, #60]	@ (8007d98 <_svfiprintf_r+0x1f8>)
 8007d5a:	9803      	ldr	r0, [sp, #12]
 8007d5c:	e000      	b.n	8007d60 <_svfiprintf_r+0x1c0>
 8007d5e:	bf00      	nop
 8007d60:	9004      	str	r0, [sp, #16]
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	3301      	adds	r3, #1
 8007d66:	d1d6      	bne.n	8007d16 <_svfiprintf_r+0x176>
 8007d68:	89bb      	ldrh	r3, [r7, #12]
 8007d6a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007d6c:	065b      	lsls	r3, r3, #25
 8007d6e:	d500      	bpl.n	8007d72 <_svfiprintf_r+0x1d2>
 8007d70:	e72c      	b.n	8007bcc <_svfiprintf_r+0x2c>
 8007d72:	b021      	add	sp, #132	@ 0x84
 8007d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d76:	aa07      	add	r2, sp, #28
 8007d78:	9200      	str	r2, [sp, #0]
 8007d7a:	0021      	movs	r1, r4
 8007d7c:	003a      	movs	r2, r7
 8007d7e:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <_svfiprintf_r+0x1f8>)
 8007d80:	9803      	ldr	r0, [sp, #12]
 8007d82:	f000 f87b 	bl	8007e7c <_printf_i>
 8007d86:	e7eb      	b.n	8007d60 <_svfiprintf_r+0x1c0>
 8007d88:	08008274 	.word	0x08008274
 8007d8c:	0800827a 	.word	0x0800827a
 8007d90:	0800827e 	.word	0x0800827e
 8007d94:	00000000 	.word	0x00000000
 8007d98:	08007ae1 	.word	0x08007ae1

08007d9c <_printf_common>:
 8007d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9e:	0016      	movs	r6, r2
 8007da0:	9301      	str	r3, [sp, #4]
 8007da2:	688a      	ldr	r2, [r1, #8]
 8007da4:	690b      	ldr	r3, [r1, #16]
 8007da6:	000c      	movs	r4, r1
 8007da8:	9000      	str	r0, [sp, #0]
 8007daa:	4293      	cmp	r3, r2
 8007dac:	da00      	bge.n	8007db0 <_printf_common+0x14>
 8007dae:	0013      	movs	r3, r2
 8007db0:	0022      	movs	r2, r4
 8007db2:	6033      	str	r3, [r6, #0]
 8007db4:	3243      	adds	r2, #67	@ 0x43
 8007db6:	7812      	ldrb	r2, [r2, #0]
 8007db8:	2a00      	cmp	r2, #0
 8007dba:	d001      	beq.n	8007dc0 <_printf_common+0x24>
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	6033      	str	r3, [r6, #0]
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	069b      	lsls	r3, r3, #26
 8007dc4:	d502      	bpl.n	8007dcc <_printf_common+0x30>
 8007dc6:	6833      	ldr	r3, [r6, #0]
 8007dc8:	3302      	adds	r3, #2
 8007dca:	6033      	str	r3, [r6, #0]
 8007dcc:	6822      	ldr	r2, [r4, #0]
 8007dce:	2306      	movs	r3, #6
 8007dd0:	0015      	movs	r5, r2
 8007dd2:	401d      	ands	r5, r3
 8007dd4:	421a      	tst	r2, r3
 8007dd6:	d027      	beq.n	8007e28 <_printf_common+0x8c>
 8007dd8:	0023      	movs	r3, r4
 8007dda:	3343      	adds	r3, #67	@ 0x43
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	1e5a      	subs	r2, r3, #1
 8007de0:	4193      	sbcs	r3, r2
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	0692      	lsls	r2, r2, #26
 8007de6:	d430      	bmi.n	8007e4a <_printf_common+0xae>
 8007de8:	0022      	movs	r2, r4
 8007dea:	9901      	ldr	r1, [sp, #4]
 8007dec:	9800      	ldr	r0, [sp, #0]
 8007dee:	9d08      	ldr	r5, [sp, #32]
 8007df0:	3243      	adds	r2, #67	@ 0x43
 8007df2:	47a8      	blx	r5
 8007df4:	3001      	adds	r0, #1
 8007df6:	d025      	beq.n	8007e44 <_printf_common+0xa8>
 8007df8:	2206      	movs	r2, #6
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d105      	bne.n	8007e10 <_printf_common+0x74>
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	68e5      	ldr	r5, [r4, #12]
 8007e08:	1aed      	subs	r5, r5, r3
 8007e0a:	43eb      	mvns	r3, r5
 8007e0c:	17db      	asrs	r3, r3, #31
 8007e0e:	401d      	ands	r5, r3
 8007e10:	68a3      	ldr	r3, [r4, #8]
 8007e12:	6922      	ldr	r2, [r4, #16]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	dd01      	ble.n	8007e1c <_printf_common+0x80>
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	18ed      	adds	r5, r5, r3
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	42b5      	cmp	r5, r6
 8007e20:	d120      	bne.n	8007e64 <_printf_common+0xc8>
 8007e22:	2000      	movs	r0, #0
 8007e24:	e010      	b.n	8007e48 <_printf_common+0xac>
 8007e26:	3501      	adds	r5, #1
 8007e28:	68e3      	ldr	r3, [r4, #12]
 8007e2a:	6832      	ldr	r2, [r6, #0]
 8007e2c:	1a9b      	subs	r3, r3, r2
 8007e2e:	42ab      	cmp	r3, r5
 8007e30:	ddd2      	ble.n	8007dd8 <_printf_common+0x3c>
 8007e32:	0022      	movs	r2, r4
 8007e34:	2301      	movs	r3, #1
 8007e36:	9901      	ldr	r1, [sp, #4]
 8007e38:	9800      	ldr	r0, [sp, #0]
 8007e3a:	9f08      	ldr	r7, [sp, #32]
 8007e3c:	3219      	adds	r2, #25
 8007e3e:	47b8      	blx	r7
 8007e40:	3001      	adds	r0, #1
 8007e42:	d1f0      	bne.n	8007e26 <_printf_common+0x8a>
 8007e44:	2001      	movs	r0, #1
 8007e46:	4240      	negs	r0, r0
 8007e48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e4a:	2030      	movs	r0, #48	@ 0x30
 8007e4c:	18e1      	adds	r1, r4, r3
 8007e4e:	3143      	adds	r1, #67	@ 0x43
 8007e50:	7008      	strb	r0, [r1, #0]
 8007e52:	0021      	movs	r1, r4
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	3145      	adds	r1, #69	@ 0x45
 8007e58:	7809      	ldrb	r1, [r1, #0]
 8007e5a:	18a2      	adds	r2, r4, r2
 8007e5c:	3243      	adds	r2, #67	@ 0x43
 8007e5e:	3302      	adds	r3, #2
 8007e60:	7011      	strb	r1, [r2, #0]
 8007e62:	e7c1      	b.n	8007de8 <_printf_common+0x4c>
 8007e64:	0022      	movs	r2, r4
 8007e66:	2301      	movs	r3, #1
 8007e68:	9901      	ldr	r1, [sp, #4]
 8007e6a:	9800      	ldr	r0, [sp, #0]
 8007e6c:	9f08      	ldr	r7, [sp, #32]
 8007e6e:	321a      	adds	r2, #26
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	d0e6      	beq.n	8007e44 <_printf_common+0xa8>
 8007e76:	3601      	adds	r6, #1
 8007e78:	e7d1      	b.n	8007e1e <_printf_common+0x82>
	...

08007e7c <_printf_i>:
 8007e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7e:	b08b      	sub	sp, #44	@ 0x2c
 8007e80:	9206      	str	r2, [sp, #24]
 8007e82:	000a      	movs	r2, r1
 8007e84:	3243      	adds	r2, #67	@ 0x43
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	9005      	str	r0, [sp, #20]
 8007e8a:	9203      	str	r2, [sp, #12]
 8007e8c:	7e0a      	ldrb	r2, [r1, #24]
 8007e8e:	000c      	movs	r4, r1
 8007e90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e92:	2a78      	cmp	r2, #120	@ 0x78
 8007e94:	d809      	bhi.n	8007eaa <_printf_i+0x2e>
 8007e96:	2a62      	cmp	r2, #98	@ 0x62
 8007e98:	d80b      	bhi.n	8007eb2 <_printf_i+0x36>
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	d100      	bne.n	8007ea0 <_printf_i+0x24>
 8007e9e:	e0bc      	b.n	800801a <_printf_i+0x19e>
 8007ea0:	497b      	ldr	r1, [pc, #492]	@ (8008090 <_printf_i+0x214>)
 8007ea2:	9104      	str	r1, [sp, #16]
 8007ea4:	2a58      	cmp	r2, #88	@ 0x58
 8007ea6:	d100      	bne.n	8007eaa <_printf_i+0x2e>
 8007ea8:	e090      	b.n	8007fcc <_printf_i+0x150>
 8007eaa:	0025      	movs	r5, r4
 8007eac:	3542      	adds	r5, #66	@ 0x42
 8007eae:	702a      	strb	r2, [r5, #0]
 8007eb0:	e022      	b.n	8007ef8 <_printf_i+0x7c>
 8007eb2:	0010      	movs	r0, r2
 8007eb4:	3863      	subs	r0, #99	@ 0x63
 8007eb6:	2815      	cmp	r0, #21
 8007eb8:	d8f7      	bhi.n	8007eaa <_printf_i+0x2e>
 8007eba:	f7f8 f92d 	bl	8000118 <__gnu_thumb1_case_shi>
 8007ebe:	0016      	.short	0x0016
 8007ec0:	fff6001f 	.word	0xfff6001f
 8007ec4:	fff6fff6 	.word	0xfff6fff6
 8007ec8:	001ffff6 	.word	0x001ffff6
 8007ecc:	fff6fff6 	.word	0xfff6fff6
 8007ed0:	fff6fff6 	.word	0xfff6fff6
 8007ed4:	003600a1 	.word	0x003600a1
 8007ed8:	fff60080 	.word	0xfff60080
 8007edc:	00b2fff6 	.word	0x00b2fff6
 8007ee0:	0036fff6 	.word	0x0036fff6
 8007ee4:	fff6fff6 	.word	0xfff6fff6
 8007ee8:	0084      	.short	0x0084
 8007eea:	0025      	movs	r5, r4
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	3542      	adds	r5, #66	@ 0x42
 8007ef0:	1d11      	adds	r1, r2, #4
 8007ef2:	6019      	str	r1, [r3, #0]
 8007ef4:	6813      	ldr	r3, [r2, #0]
 8007ef6:	702b      	strb	r3, [r5, #0]
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e0a0      	b.n	800803e <_printf_i+0x1c2>
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	6809      	ldr	r1, [r1, #0]
 8007f00:	1d02      	adds	r2, r0, #4
 8007f02:	060d      	lsls	r5, r1, #24
 8007f04:	d50b      	bpl.n	8007f1e <_printf_i+0xa2>
 8007f06:	6806      	ldr	r6, [r0, #0]
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	da03      	bge.n	8007f16 <_printf_i+0x9a>
 8007f0e:	232d      	movs	r3, #45	@ 0x2d
 8007f10:	9a03      	ldr	r2, [sp, #12]
 8007f12:	4276      	negs	r6, r6
 8007f14:	7013      	strb	r3, [r2, #0]
 8007f16:	4b5e      	ldr	r3, [pc, #376]	@ (8008090 <_printf_i+0x214>)
 8007f18:	270a      	movs	r7, #10
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	e018      	b.n	8007f50 <_printf_i+0xd4>
 8007f1e:	6806      	ldr	r6, [r0, #0]
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	0649      	lsls	r1, r1, #25
 8007f24:	d5f1      	bpl.n	8007f0a <_printf_i+0x8e>
 8007f26:	b236      	sxth	r6, r6
 8007f28:	e7ef      	b.n	8007f0a <_printf_i+0x8e>
 8007f2a:	6808      	ldr	r0, [r1, #0]
 8007f2c:	6819      	ldr	r1, [r3, #0]
 8007f2e:	c940      	ldmia	r1!, {r6}
 8007f30:	0605      	lsls	r5, r0, #24
 8007f32:	d402      	bmi.n	8007f3a <_printf_i+0xbe>
 8007f34:	0640      	lsls	r0, r0, #25
 8007f36:	d500      	bpl.n	8007f3a <_printf_i+0xbe>
 8007f38:	b2b6      	uxth	r6, r6
 8007f3a:	6019      	str	r1, [r3, #0]
 8007f3c:	4b54      	ldr	r3, [pc, #336]	@ (8008090 <_printf_i+0x214>)
 8007f3e:	270a      	movs	r7, #10
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	2a6f      	cmp	r2, #111	@ 0x6f
 8007f44:	d100      	bne.n	8007f48 <_printf_i+0xcc>
 8007f46:	3f02      	subs	r7, #2
 8007f48:	0023      	movs	r3, r4
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	3343      	adds	r3, #67	@ 0x43
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	60a3      	str	r3, [r4, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	db03      	blt.n	8007f60 <_printf_i+0xe4>
 8007f58:	2104      	movs	r1, #4
 8007f5a:	6822      	ldr	r2, [r4, #0]
 8007f5c:	438a      	bics	r2, r1
 8007f5e:	6022      	str	r2, [r4, #0]
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	d102      	bne.n	8007f6a <_printf_i+0xee>
 8007f64:	9d03      	ldr	r5, [sp, #12]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00c      	beq.n	8007f84 <_printf_i+0x108>
 8007f6a:	9d03      	ldr	r5, [sp, #12]
 8007f6c:	0030      	movs	r0, r6
 8007f6e:	0039      	movs	r1, r7
 8007f70:	f7f8 f962 	bl	8000238 <__aeabi_uidivmod>
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	3d01      	subs	r5, #1
 8007f78:	5c5b      	ldrb	r3, [r3, r1]
 8007f7a:	702b      	strb	r3, [r5, #0]
 8007f7c:	0033      	movs	r3, r6
 8007f7e:	0006      	movs	r6, r0
 8007f80:	429f      	cmp	r7, r3
 8007f82:	d9f3      	bls.n	8007f6c <_printf_i+0xf0>
 8007f84:	2f08      	cmp	r7, #8
 8007f86:	d109      	bne.n	8007f9c <_printf_i+0x120>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	07db      	lsls	r3, r3, #31
 8007f8c:	d506      	bpl.n	8007f9c <_printf_i+0x120>
 8007f8e:	6862      	ldr	r2, [r4, #4]
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	dc02      	bgt.n	8007f9c <_printf_i+0x120>
 8007f96:	2330      	movs	r3, #48	@ 0x30
 8007f98:	3d01      	subs	r5, #1
 8007f9a:	702b      	strb	r3, [r5, #0]
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	1b5b      	subs	r3, r3, r5
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	0021      	movs	r1, r4
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	9805      	ldr	r0, [sp, #20]
 8007faa:	9b06      	ldr	r3, [sp, #24]
 8007fac:	aa09      	add	r2, sp, #36	@ 0x24
 8007fae:	f7ff fef5 	bl	8007d9c <_printf_common>
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d148      	bne.n	8008048 <_printf_i+0x1cc>
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	4240      	negs	r0, r0
 8007fba:	b00b      	add	sp, #44	@ 0x2c
 8007fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	6809      	ldr	r1, [r1, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	6022      	str	r2, [r4, #0]
 8007fc6:	2278      	movs	r2, #120	@ 0x78
 8007fc8:	4932      	ldr	r1, [pc, #200]	@ (8008094 <_printf_i+0x218>)
 8007fca:	9104      	str	r1, [sp, #16]
 8007fcc:	0021      	movs	r1, r4
 8007fce:	3145      	adds	r1, #69	@ 0x45
 8007fd0:	700a      	strb	r2, [r1, #0]
 8007fd2:	6819      	ldr	r1, [r3, #0]
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	c940      	ldmia	r1!, {r6}
 8007fd8:	0610      	lsls	r0, r2, #24
 8007fda:	d402      	bmi.n	8007fe2 <_printf_i+0x166>
 8007fdc:	0650      	lsls	r0, r2, #25
 8007fde:	d500      	bpl.n	8007fe2 <_printf_i+0x166>
 8007fe0:	b2b6      	uxth	r6, r6
 8007fe2:	6019      	str	r1, [r3, #0]
 8007fe4:	07d3      	lsls	r3, r2, #31
 8007fe6:	d502      	bpl.n	8007fee <_printf_i+0x172>
 8007fe8:	2320      	movs	r3, #32
 8007fea:	4313      	orrs	r3, r2
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	d001      	beq.n	8007ff6 <_printf_i+0x17a>
 8007ff2:	2710      	movs	r7, #16
 8007ff4:	e7a8      	b.n	8007f48 <_printf_i+0xcc>
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	4393      	bics	r3, r2
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	e7f8      	b.n	8007ff2 <_printf_i+0x176>
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	680d      	ldr	r5, [r1, #0]
 8008004:	1d10      	adds	r0, r2, #4
 8008006:	6949      	ldr	r1, [r1, #20]
 8008008:	6018      	str	r0, [r3, #0]
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	062e      	lsls	r6, r5, #24
 800800e:	d501      	bpl.n	8008014 <_printf_i+0x198>
 8008010:	6019      	str	r1, [r3, #0]
 8008012:	e002      	b.n	800801a <_printf_i+0x19e>
 8008014:	066d      	lsls	r5, r5, #25
 8008016:	d5fb      	bpl.n	8008010 <_printf_i+0x194>
 8008018:	8019      	strh	r1, [r3, #0]
 800801a:	2300      	movs	r3, #0
 800801c:	9d03      	ldr	r5, [sp, #12]
 800801e:	6123      	str	r3, [r4, #16]
 8008020:	e7bf      	b.n	8007fa2 <_printf_i+0x126>
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	1d11      	adds	r1, r2, #4
 8008026:	6019      	str	r1, [r3, #0]
 8008028:	6815      	ldr	r5, [r2, #0]
 800802a:	2100      	movs	r1, #0
 800802c:	0028      	movs	r0, r5
 800802e:	6862      	ldr	r2, [r4, #4]
 8008030:	f000 f858 	bl	80080e4 <memchr>
 8008034:	2800      	cmp	r0, #0
 8008036:	d001      	beq.n	800803c <_printf_i+0x1c0>
 8008038:	1b40      	subs	r0, r0, r5
 800803a:	6060      	str	r0, [r4, #4]
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	2300      	movs	r3, #0
 8008042:	9a03      	ldr	r2, [sp, #12]
 8008044:	7013      	strb	r3, [r2, #0]
 8008046:	e7ac      	b.n	8007fa2 <_printf_i+0x126>
 8008048:	002a      	movs	r2, r5
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	9906      	ldr	r1, [sp, #24]
 800804e:	9805      	ldr	r0, [sp, #20]
 8008050:	9d07      	ldr	r5, [sp, #28]
 8008052:	47a8      	blx	r5
 8008054:	3001      	adds	r0, #1
 8008056:	d0ae      	beq.n	8007fb6 <_printf_i+0x13a>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	079b      	lsls	r3, r3, #30
 800805c:	d415      	bmi.n	800808a <_printf_i+0x20e>
 800805e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008060:	68e0      	ldr	r0, [r4, #12]
 8008062:	4298      	cmp	r0, r3
 8008064:	daa9      	bge.n	8007fba <_printf_i+0x13e>
 8008066:	0018      	movs	r0, r3
 8008068:	e7a7      	b.n	8007fba <_printf_i+0x13e>
 800806a:	0022      	movs	r2, r4
 800806c:	2301      	movs	r3, #1
 800806e:	9906      	ldr	r1, [sp, #24]
 8008070:	9805      	ldr	r0, [sp, #20]
 8008072:	9e07      	ldr	r6, [sp, #28]
 8008074:	3219      	adds	r2, #25
 8008076:	47b0      	blx	r6
 8008078:	3001      	adds	r0, #1
 800807a:	d09c      	beq.n	8007fb6 <_printf_i+0x13a>
 800807c:	3501      	adds	r5, #1
 800807e:	68e3      	ldr	r3, [r4, #12]
 8008080:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008082:	1a9b      	subs	r3, r3, r2
 8008084:	42ab      	cmp	r3, r5
 8008086:	dcf0      	bgt.n	800806a <_printf_i+0x1ee>
 8008088:	e7e9      	b.n	800805e <_printf_i+0x1e2>
 800808a:	2500      	movs	r5, #0
 800808c:	e7f7      	b.n	800807e <_printf_i+0x202>
 800808e:	46c0      	nop			@ (mov r8, r8)
 8008090:	08008285 	.word	0x08008285
 8008094:	08008296 	.word	0x08008296

08008098 <memmove>:
 8008098:	b510      	push	{r4, lr}
 800809a:	4288      	cmp	r0, r1
 800809c:	d806      	bhi.n	80080ac <memmove+0x14>
 800809e:	2300      	movs	r3, #0
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d008      	beq.n	80080b6 <memmove+0x1e>
 80080a4:	5ccc      	ldrb	r4, [r1, r3]
 80080a6:	54c4      	strb	r4, [r0, r3]
 80080a8:	3301      	adds	r3, #1
 80080aa:	e7f9      	b.n	80080a0 <memmove+0x8>
 80080ac:	188b      	adds	r3, r1, r2
 80080ae:	4298      	cmp	r0, r3
 80080b0:	d2f5      	bcs.n	800809e <memmove+0x6>
 80080b2:	3a01      	subs	r2, #1
 80080b4:	d200      	bcs.n	80080b8 <memmove+0x20>
 80080b6:	bd10      	pop	{r4, pc}
 80080b8:	5c8b      	ldrb	r3, [r1, r2]
 80080ba:	5483      	strb	r3, [r0, r2]
 80080bc:	e7f9      	b.n	80080b2 <memmove+0x1a>
	...

080080c0 <_sbrk_r>:
 80080c0:	2300      	movs	r3, #0
 80080c2:	b570      	push	{r4, r5, r6, lr}
 80080c4:	4d06      	ldr	r5, [pc, #24]	@ (80080e0 <_sbrk_r+0x20>)
 80080c6:	0004      	movs	r4, r0
 80080c8:	0008      	movs	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f7f8 fb7a 	bl	80007c4 <_sbrk>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d103      	bne.n	80080dc <_sbrk_r+0x1c>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d000      	beq.n	80080dc <_sbrk_r+0x1c>
 80080da:	6023      	str	r3, [r4, #0]
 80080dc:	bd70      	pop	{r4, r5, r6, pc}
 80080de:	46c0      	nop			@ (mov r8, r8)
 80080e0:	20000b40 	.word	0x20000b40

080080e4 <memchr>:
 80080e4:	b2c9      	uxtb	r1, r1
 80080e6:	1882      	adds	r2, r0, r2
 80080e8:	4290      	cmp	r0, r2
 80080ea:	d101      	bne.n	80080f0 <memchr+0xc>
 80080ec:	2000      	movs	r0, #0
 80080ee:	4770      	bx	lr
 80080f0:	7803      	ldrb	r3, [r0, #0]
 80080f2:	428b      	cmp	r3, r1
 80080f4:	d0fb      	beq.n	80080ee <memchr+0xa>
 80080f6:	3001      	adds	r0, #1
 80080f8:	e7f6      	b.n	80080e8 <memchr+0x4>

080080fa <memcpy>:
 80080fa:	2300      	movs	r3, #0
 80080fc:	b510      	push	{r4, lr}
 80080fe:	429a      	cmp	r2, r3
 8008100:	d100      	bne.n	8008104 <memcpy+0xa>
 8008102:	bd10      	pop	{r4, pc}
 8008104:	5ccc      	ldrb	r4, [r1, r3]
 8008106:	54c4      	strb	r4, [r0, r3]
 8008108:	3301      	adds	r3, #1
 800810a:	e7f8      	b.n	80080fe <memcpy+0x4>

0800810c <_realloc_r>:
 800810c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800810e:	0006      	movs	r6, r0
 8008110:	000c      	movs	r4, r1
 8008112:	0015      	movs	r5, r2
 8008114:	2900      	cmp	r1, #0
 8008116:	d105      	bne.n	8008124 <_realloc_r+0x18>
 8008118:	0011      	movs	r1, r2
 800811a:	f7ff fc51 	bl	80079c0 <_malloc_r>
 800811e:	0004      	movs	r4, r0
 8008120:	0020      	movs	r0, r4
 8008122:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008124:	2a00      	cmp	r2, #0
 8008126:	d103      	bne.n	8008130 <_realloc_r+0x24>
 8008128:	f7ff fbde 	bl	80078e8 <_free_r>
 800812c:	2400      	movs	r4, #0
 800812e:	e7f7      	b.n	8008120 <_realloc_r+0x14>
 8008130:	f000 f81b 	bl	800816a <_malloc_usable_size_r>
 8008134:	0007      	movs	r7, r0
 8008136:	4285      	cmp	r5, r0
 8008138:	d802      	bhi.n	8008140 <_realloc_r+0x34>
 800813a:	0843      	lsrs	r3, r0, #1
 800813c:	42ab      	cmp	r3, r5
 800813e:	d3ef      	bcc.n	8008120 <_realloc_r+0x14>
 8008140:	0029      	movs	r1, r5
 8008142:	0030      	movs	r0, r6
 8008144:	f7ff fc3c 	bl	80079c0 <_malloc_r>
 8008148:	9001      	str	r0, [sp, #4]
 800814a:	2800      	cmp	r0, #0
 800814c:	d0ee      	beq.n	800812c <_realloc_r+0x20>
 800814e:	002a      	movs	r2, r5
 8008150:	42bd      	cmp	r5, r7
 8008152:	d900      	bls.n	8008156 <_realloc_r+0x4a>
 8008154:	003a      	movs	r2, r7
 8008156:	0021      	movs	r1, r4
 8008158:	9801      	ldr	r0, [sp, #4]
 800815a:	f7ff ffce 	bl	80080fa <memcpy>
 800815e:	0021      	movs	r1, r4
 8008160:	0030      	movs	r0, r6
 8008162:	f7ff fbc1 	bl	80078e8 <_free_r>
 8008166:	9c01      	ldr	r4, [sp, #4]
 8008168:	e7da      	b.n	8008120 <_realloc_r+0x14>

0800816a <_malloc_usable_size_r>:
 800816a:	1f0b      	subs	r3, r1, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	1f18      	subs	r0, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	da01      	bge.n	8008178 <_malloc_usable_size_r+0xe>
 8008174:	580b      	ldr	r3, [r1, r0]
 8008176:	18c0      	adds	r0, r0, r3
 8008178:	4770      	bx	lr
	...

0800817c <_init>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	46c0      	nop			@ (mov r8, r8)
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr

08008188 <_fini>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr


7.3-SPI-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008e84  08008e84  00009e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009330  08009330  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009330  08009330  0000a330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009338  08009338  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009338  08009338  0000a338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800933c  0800933c  0000a33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009340  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  20000074  080093b4  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000970  080093b4  0000b970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011994  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289f  00000000  00000000  0001ca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc4  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286b3  00000000  00000000  00020dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001526b  00000000  00000000  0004949f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f195c  00000000  00000000  0005e70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004490  00000000  00000000  001500ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0015453c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e6c 	.word	0x08008e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008e6c 	.word	0x08008e6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <UART_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void UART_Print(char* str)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fb23 	bl	80001d0 <strlen>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	2364      	movs	r3, #100	@ 0x64
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <UART_Print+0x24>)
 8000b94:	f004 f874 	bl	8004c80 <HAL_UART_Transmit>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000118 	.word	0x20000118

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba8:	f001 f9ca 	bl	8001f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bac:	f000 f818 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb0:	f000 f934 	bl	8000e1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb4:	f000 f902 	bl	8000dbc <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000bb8:	f000 f866 	bl	8000c88 <MX_RTC_Init>
  MX_FATFS_Init();
 8000bbc:	f004 fdb8 	bl	8005730 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000bc0:	f000 f8be 	bl	8000d40 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  //Mount sd card

    f_mount(&FatFs, "/", 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4904      	ldr	r1, [pc, #16]	@ (8000bd8 <main+0x34>)
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <main+0x38>)
 8000bca:	f006 fb5f 	bl	800728c <f_mount>
//      	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
//      	send_uart(buffer);
//      	bufclear();

  //Test The SD Card
    SD_Card_Test();
 8000bce:	f000 f97b 	bl	8000ec8 <SD_Card_Test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd2:	bf00      	nop
 8000bd4:	e7fd      	b.n	8000bd2 <main+0x2e>
 8000bd6:	bf00      	nop
 8000bd8:	08008e84 	.word	0x08008e84
 8000bdc:	2000029c 	.word	0x2000029c

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b096      	sub	sp, #88	@ 0x58
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2244      	movs	r2, #68	@ 0x44
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 fcbc 	bl	800856c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c06:	f001 fccd 	bl	80025a4 <HAL_PWREx_ControlVoltageScaling>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c10:	f000 faea 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c14:	230a      	movs	r3, #10
 8000c16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c32:	2308      	movs	r3, #8
 8000c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c36:	2307      	movs	r3, #7
 8000c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fd02 	bl	8002650 <HAL_RCC_OscConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000c52:	f000 fac9 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	230f      	movs	r3, #15
 8000c58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c5e:	2380      	movs	r3, #128	@ 0x80
 8000c60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f002 f8ca 	bl	8002e08 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c7a:	f000 fab5 	bl	80011e8 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3758      	adds	r7, #88	@ 0x58
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ca0:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000ca2:	4a26      	ldr	r2, [pc, #152]	@ (8000d3c <MX_RTC_Init+0xb4>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ca6:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cac:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000cae:	227f      	movs	r2, #127	@ 0x7f
 8000cb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000cb4:	22ff      	movs	r2, #255	@ 0xff
 8000cb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cd0:	4819      	ldr	r0, [pc, #100]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000cd2:	f002 ff79 	bl	8003bc8 <HAL_RTC_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f000 fa84 	bl	80011e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000cfc:	f002 ffec 	bl	8003cd8 <HAL_RTC_SetTime>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000d06:	f000 fa6f 	bl	80011e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8000d12:	2322      	movs	r3, #34	@ 0x22
 8000d14:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8000d16:	2324      	movs	r3, #36	@ 0x24
 8000d18:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_RTC_Init+0xb0>)
 8000d22:	f003 f876 	bl	8003e12 <HAL_RTC_SetDate>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000d2c:	f000 fa5c 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000090 	.word	0x20000090
 8000d3c:	40002800 	.word	0x40002800

08000d40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <MX_SPI2_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d5a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d8e:	2207      	movs	r2, #7
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_SPI2_Init+0x74>)
 8000da0:	f003 f974 	bl	800408c <HAL_SPI_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f000 fa1d 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000b4 	.word	0x200000b4
 8000db8:	40003800 	.word	0x40003800

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	@ (8000e18 <MX_USART2_UART_Init+0x5c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000e00:	f003 fef0 	bl	8004be4 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f000 f9ed 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000118 	.word	0x20000118
 8000e18:	40004400 	.word	0x40004400

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	4a22      	ldr	r2, [pc, #136]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	4a16      	ldr	r2, [pc, #88]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_GPIO_Init+0xa4>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e98:	f001 fb5e 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000eb4:	f001 f9a6 	bl	8002204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	@ 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <SD_Card_Test>:

/* USER CODE BEGIN 4 */
static void SD_Card_Test(void)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, "/", 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	49a6      	ldr	r1, [pc, #664]	@ (8001168 <SD_Card_Test+0x2a0>)
 8000ed0:	48a6      	ldr	r0, [pc, #664]	@ (800116c <SD_Card_Test+0x2a4>)
 8000ed2:	f006 f9db 	bl	800728c <f_mount>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4ba5      	ldr	r3, [pc, #660]	@ (8001170 <SD_Card_Test+0x2a8>)
 8000edc:	701a      	strb	r2, [r3, #0]
    if (FR_Status != FR_OK)
 8000ede:	4ba4      	ldr	r3, [pc, #656]	@ (8001170 <SD_Card_Test+0x2a8>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00a      	beq.n	8000efc <SD_Card_Test+0x34>
    {
      sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000ee6:	4ba2      	ldr	r3, [pc, #648]	@ (8001170 <SD_Card_Test+0x2a8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	49a1      	ldr	r1, [pc, #644]	@ (8001174 <SD_Card_Test+0x2ac>)
 8000eee:	48a2      	ldr	r0, [pc, #648]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000ef0:	f007 fb1c 	bl	800852c <siprintf>
      UART_Print(TxBuffer);
 8000ef4:	48a0      	ldr	r0, [pc, #640]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000ef6:	f7ff fe41 	bl	8000b7c <UART_Print>
      break;
 8000efa:	e114      	b.n	8001126 <SD_Card_Test+0x25e>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 8000efc:	499f      	ldr	r1, [pc, #636]	@ (800117c <SD_Card_Test+0x2b4>)
 8000efe:	489e      	ldr	r0, [pc, #632]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000f00:	f007 fb14 	bl	800852c <siprintf>
    UART_Print(TxBuffer);
 8000f04:	489c      	ldr	r0, [pc, #624]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000f06:	f7ff fe39 	bl	8000b7c <UART_Print>
    //------------------[ Get & Print The SD Card Size & Free Space ]--------------------
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000f0a:	4a9d      	ldr	r2, [pc, #628]	@ (8001180 <SD_Card_Test+0x2b8>)
 8000f0c:	499d      	ldr	r1, [pc, #628]	@ (8001184 <SD_Card_Test+0x2bc>)
 8000f0e:	489e      	ldr	r0, [pc, #632]	@ (8001188 <SD_Card_Test+0x2c0>)
 8000f10:	f007 f921 	bl	8008156 <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000f14:	4b9a      	ldr	r3, [pc, #616]	@ (8001180 <SD_Card_Test+0x2b8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4a98      	ldr	r2, [pc, #608]	@ (8001180 <SD_Card_Test+0x2b8>)
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	8952      	ldrh	r2, [r2, #10]
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fc16 	bl	8000758 <__aeabi_ui2d>
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b96      	ldr	r3, [pc, #600]	@ (800118c <SD_Card_Test+0x2c4>)
 8000f32:	f7ff f9a5 	bl	8000280 <__aeabi_dmul>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fc85 	bl	800084c <__aeabi_d2uiz>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a92      	ldr	r2, [pc, #584]	@ (8001190 <SD_Card_Test+0x2c8>)
 8000f46:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000f48:	4b8d      	ldr	r3, [pc, #564]	@ (8001180 <SD_Card_Test+0x2b8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	895b      	ldrh	r3, [r3, #10]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b8c      	ldr	r3, [pc, #560]	@ (8001184 <SD_Card_Test+0x2bc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbfd 	bl	8000758 <__aeabi_ui2d>
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b8a      	ldr	r3, [pc, #552]	@ (800118c <SD_Card_Test+0x2c4>)
 8000f64:	f7ff f98c 	bl	8000280 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fc6c 	bl	800084c <__aeabi_d2uiz>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a87      	ldr	r2, [pc, #540]	@ (8001194 <SD_Card_Test+0x2cc>)
 8000f78:	6013      	str	r3, [r2, #0]
    sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000f7a:	4b85      	ldr	r3, [pc, #532]	@ (8001190 <SD_Card_Test+0x2c8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4985      	ldr	r1, [pc, #532]	@ (8001198 <SD_Card_Test+0x2d0>)
 8000f82:	487d      	ldr	r0, [pc, #500]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000f84:	f007 fad2 	bl	800852c <siprintf>
    UART_Print(TxBuffer);
 8000f88:	487b      	ldr	r0, [pc, #492]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000f8a:	f7ff fdf7 	bl	8000b7c <UART_Print>
    sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000f8e:	4b81      	ldr	r3, [pc, #516]	@ (8001194 <SD_Card_Test+0x2cc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4981      	ldr	r1, [pc, #516]	@ (800119c <SD_Card_Test+0x2d4>)
 8000f96:	4878      	ldr	r0, [pc, #480]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000f98:	f007 fac8 	bl	800852c <siprintf>
    UART_Print(TxBuffer);
 8000f9c:	4876      	ldr	r0, [pc, #472]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000f9e:	f7ff fded 	bl	8000b7c <UART_Print>
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000fa2:	220b      	movs	r2, #11
 8000fa4:	497e      	ldr	r1, [pc, #504]	@ (80011a0 <SD_Card_Test+0x2d8>)
 8000fa6:	487f      	ldr	r0, [pc, #508]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8000fa8:	f006 f9b6 	bl	8007318 <f_open>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8001170 <SD_Card_Test+0x2a8>)
 8000fb2:	701a      	strb	r2, [r3, #0]
    if(FR_Status != FR_OK)
 8000fb4:	4b6e      	ldr	r3, [pc, #440]	@ (8001170 <SD_Card_Test+0x2a8>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00a      	beq.n	8000fd2 <SD_Card_Test+0x10a>
    {
      sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8001170 <SD_Card_Test+0x2a8>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4979      	ldr	r1, [pc, #484]	@ (80011a8 <SD_Card_Test+0x2e0>)
 8000fc4:	486c      	ldr	r0, [pc, #432]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000fc6:	f007 fab1 	bl	800852c <siprintf>
      UART_Print(TxBuffer);
 8000fca:	486b      	ldr	r0, [pc, #428]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000fcc:	f7ff fdd6 	bl	8000b7c <UART_Print>
      break;
 8000fd0:	e0a9      	b.n	8001126 <SD_Card_Test+0x25e>
    }
    sprintf(TxBuffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000fd2:	4976      	ldr	r1, [pc, #472]	@ (80011ac <SD_Card_Test+0x2e4>)
 8000fd4:	4868      	ldr	r0, [pc, #416]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000fd6:	f007 faa9 	bl	800852c <siprintf>
    UART_Print(TxBuffer);
 8000fda:	4867      	ldr	r0, [pc, #412]	@ (8001178 <SD_Card_Test+0x2b0>)
 8000fdc:	f7ff fdce 	bl	8000b7c <UART_Print>
    // (1) Write Data To The Text File [ Using f_puts() Function ]
    f_puts("Hello! From STM32 To SD Card Over SPI, Using f_puts()\n", &Fil);
 8000fe0:	4970      	ldr	r1, [pc, #448]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8000fe2:	4873      	ldr	r0, [pc, #460]	@ (80011b0 <SD_Card_Test+0x2e8>)
 8000fe4:	f007 fa21 	bl	800842a <f_puts>
    // (2) Write Data To The Text File [ Using f_write() Function ]
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SPI, Using f_write()\r\n");
 8000fe8:	4a72      	ldr	r2, [pc, #456]	@ (80011b4 <SD_Card_Test+0x2ec>)
 8000fea:	4b73      	ldr	r3, [pc, #460]	@ (80011b8 <SD_Card_Test+0x2f0>)
 8000fec:	4614      	mov	r4, r2
 8000fee:	461d      	mov	r5, r3
 8000ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001000:	c403      	stmia	r4!, {r0, r1}
 8001002:	7022      	strb	r2, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8001004:	486b      	ldr	r0, [pc, #428]	@ (80011b4 <SD_Card_Test+0x2ec>)
 8001006:	f7ff f8e3 	bl	80001d0 <strlen>
 800100a:	4602      	mov	r2, r0
 800100c:	4b6b      	ldr	r3, [pc, #428]	@ (80011bc <SD_Card_Test+0x2f4>)
 800100e:	4969      	ldr	r1, [pc, #420]	@ (80011b4 <SD_Card_Test+0x2ec>)
 8001010:	4864      	ldr	r0, [pc, #400]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001012:	f006 fc7a 	bl	800790a <f_write>
    // Close The File
    f_close(&Fil);
 8001016:	4863      	ldr	r0, [pc, #396]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001018:	f006 fe6a 	bl	8007cf0 <f_close>
    //------------------[ Open A Text File For Read & Read Its Data ]--------------------
    // Open The File
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ);
 800101c:	2201      	movs	r2, #1
 800101e:	4960      	ldr	r1, [pc, #384]	@ (80011a0 <SD_Card_Test+0x2d8>)
 8001020:	4860      	ldr	r0, [pc, #384]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001022:	f006 f979 	bl	8007318 <f_open>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b51      	ldr	r3, [pc, #324]	@ (8001170 <SD_Card_Test+0x2a8>)
 800102c:	701a      	strb	r2, [r3, #0]
    if(FR_Status != FR_OK)
 800102e:	4b50      	ldr	r3, [pc, #320]	@ (8001170 <SD_Card_Test+0x2a8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <SD_Card_Test+0x17e>
    {
      sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Read.. \r\n");
 8001036:	4962      	ldr	r1, [pc, #392]	@ (80011c0 <SD_Card_Test+0x2f8>)
 8001038:	484f      	ldr	r0, [pc, #316]	@ (8001178 <SD_Card_Test+0x2b0>)
 800103a:	f007 fa77 	bl	800852c <siprintf>
      UART_Print(TxBuffer);
 800103e:	484e      	ldr	r0, [pc, #312]	@ (8001178 <SD_Card_Test+0x2b0>)
 8001040:	f7ff fd9c 	bl	8000b7c <UART_Print>
      break;
 8001044:	e06f      	b.n	8001126 <SD_Card_Test+0x25e>
    }
    // (1) Read The Text File's Data [ Using f_gets() Function ]
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 8001046:	4a57      	ldr	r2, [pc, #348]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001048:	21c8      	movs	r1, #200	@ 0xc8
 800104a:	485a      	ldr	r0, [pc, #360]	@ (80011b4 <SD_Card_Test+0x2ec>)
 800104c:	f007 f938 	bl	80082c0 <f_gets>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_gets():%s", RW_Buffer);
 8001050:	4a58      	ldr	r2, [pc, #352]	@ (80011b4 <SD_Card_Test+0x2ec>)
 8001052:	495c      	ldr	r1, [pc, #368]	@ (80011c4 <SD_Card_Test+0x2fc>)
 8001054:	4848      	ldr	r0, [pc, #288]	@ (8001178 <SD_Card_Test+0x2b0>)
 8001056:	f007 fa69 	bl	800852c <siprintf>
    UART_Print(TxBuffer);
 800105a:	4847      	ldr	r0, [pc, #284]	@ (8001178 <SD_Card_Test+0x2b0>)
 800105c:	f7ff fd8e 	bl	8000b7c <UART_Print>
    // (2) Read The Text File's Data [ Using f_read() Function ]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8001060:	4b50      	ldr	r3, [pc, #320]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	4b58      	ldr	r3, [pc, #352]	@ (80011c8 <SD_Card_Test+0x300>)
 8001066:	4953      	ldr	r1, [pc, #332]	@ (80011b4 <SD_Card_Test+0x2ec>)
 8001068:	484e      	ldr	r0, [pc, #312]	@ (80011a4 <SD_Card_Test+0x2dc>)
 800106a:	f006 fb0f 	bl	800768c <f_read>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_read():%s", RW_Buffer);
 800106e:	4a51      	ldr	r2, [pc, #324]	@ (80011b4 <SD_Card_Test+0x2ec>)
 8001070:	4956      	ldr	r1, [pc, #344]	@ (80011cc <SD_Card_Test+0x304>)
 8001072:	4841      	ldr	r0, [pc, #260]	@ (8001178 <SD_Card_Test+0x2b0>)
 8001074:	f007 fa5a 	bl	800852c <siprintf>
    UART_Print(TxBuffer);
 8001078:	483f      	ldr	r0, [pc, #252]	@ (8001178 <SD_Card_Test+0x2b0>)
 800107a:	f7ff fd7f 	bl	8000b7c <UART_Print>
    // Close The File
    f_close(&Fil);
 800107e:	4849      	ldr	r0, [pc, #292]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001080:	f006 fe36 	bl	8007cf0 <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 8001084:	4952      	ldr	r1, [pc, #328]	@ (80011d0 <SD_Card_Test+0x308>)
 8001086:	483c      	ldr	r0, [pc, #240]	@ (8001178 <SD_Card_Test+0x2b0>)
 8001088:	f007 fa50 	bl	800852c <siprintf>
    UART_Print(TxBuffer);
 800108c:	483a      	ldr	r0, [pc, #232]	@ (8001178 <SD_Card_Test+0x2b0>)
 800108e:	f7ff fd75 	bl	8000b7c <UART_Print>
    //------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
    // (1) Open The Existing File For Write (Update)
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_OPEN_EXISTING | FA_WRITE);
 8001092:	2202      	movs	r2, #2
 8001094:	4942      	ldr	r1, [pc, #264]	@ (80011a0 <SD_Card_Test+0x2d8>)
 8001096:	4843      	ldr	r0, [pc, #268]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001098:	f006 f93e 	bl	8007318 <f_open>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b33      	ldr	r3, [pc, #204]	@ (8001170 <SD_Card_Test+0x2a8>)
 80010a2:	701a      	strb	r2, [r3, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 80010a4:	4b3f      	ldr	r3, [pc, #252]	@ (80011a4 <SD_Card_Test+0x2dc>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	4619      	mov	r1, r3
 80010aa:	483e      	ldr	r0, [pc, #248]	@ (80011a4 <SD_Card_Test+0x2dc>)
 80010ac:	f006 fe4a 	bl	8007d44 <f_lseek>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <SD_Card_Test+0x2a8>)
 80010b6:	701a      	strb	r2, [r3, #0]
    if(FR_Status != FR_OK)
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <SD_Card_Test+0x2a8>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <SD_Card_Test+0x208>
    {
      sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Update.. \r\n");
 80010c0:	4944      	ldr	r1, [pc, #272]	@ (80011d4 <SD_Card_Test+0x30c>)
 80010c2:	482d      	ldr	r0, [pc, #180]	@ (8001178 <SD_Card_Test+0x2b0>)
 80010c4:	f007 fa32 	bl	800852c <siprintf>
      UART_Print(TxBuffer);
 80010c8:	482b      	ldr	r0, [pc, #172]	@ (8001178 <SD_Card_Test+0x2b0>)
 80010ca:	f7ff fd57 	bl	8000b7c <UART_Print>
      break;
 80010ce:	e02a      	b.n	8001126 <SD_Card_Test+0x25e>
    }
    // (2) Write New Line of Text Data To The File
    FR_Status = f_puts("This New Line Was Added During Update!\r\n", &Fil);
 80010d0:	4934      	ldr	r1, [pc, #208]	@ (80011a4 <SD_Card_Test+0x2dc>)
 80010d2:	4841      	ldr	r0, [pc, #260]	@ (80011d8 <SD_Card_Test+0x310>)
 80010d4:	f007 f9a9 	bl	800842a <f_puts>
 80010d8:	4603      	mov	r3, r0
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <SD_Card_Test+0x2a8>)
 80010de:	701a      	strb	r2, [r3, #0]
    f_close(&Fil);
 80010e0:	4830      	ldr	r0, [pc, #192]	@ (80011a4 <SD_Card_Test+0x2dc>)
 80010e2:	f006 fe05 	bl	8007cf0 <f_close>
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 80010e6:	22c8      	movs	r2, #200	@ 0xc8
 80010e8:	2100      	movs	r1, #0
 80010ea:	4832      	ldr	r0, [pc, #200]	@ (80011b4 <SD_Card_Test+0x2ec>)
 80010ec:	f007 fa3e 	bl	800856c <memset>
    // (3) Read The Contents of The Text File After The Update
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ); // Open The File For Read
 80010f0:	2201      	movs	r2, #1
 80010f2:	492b      	ldr	r1, [pc, #172]	@ (80011a0 <SD_Card_Test+0x2d8>)
 80010f4:	482b      	ldr	r0, [pc, #172]	@ (80011a4 <SD_Card_Test+0x2dc>)
 80010f6:	f006 f90f 	bl	8007318 <f_open>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <SD_Card_Test+0x2a8>)
 8001100:	701a      	strb	r2, [r3, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8001102:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	4b30      	ldr	r3, [pc, #192]	@ (80011c8 <SD_Card_Test+0x300>)
 8001108:	492a      	ldr	r1, [pc, #168]	@ (80011b4 <SD_Card_Test+0x2ec>)
 800110a:	4826      	ldr	r0, [pc, #152]	@ (80011a4 <SD_Card_Test+0x2dc>)
 800110c:	f006 fabe 	bl	800768c <f_read>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) After Update:%s", RW_Buffer);
 8001110:	4a28      	ldr	r2, [pc, #160]	@ (80011b4 <SD_Card_Test+0x2ec>)
 8001112:	4932      	ldr	r1, [pc, #200]	@ (80011dc <SD_Card_Test+0x314>)
 8001114:	4818      	ldr	r0, [pc, #96]	@ (8001178 <SD_Card_Test+0x2b0>)
 8001116:	f007 fa09 	bl	800852c <siprintf>
    UART_Print(TxBuffer);
 800111a:	4817      	ldr	r0, [pc, #92]	@ (8001178 <SD_Card_Test+0x2b0>)
 800111c:	f7ff fd2e 	bl	8000b7c <UART_Print>
    f_close(&Fil);
 8001120:	4820      	ldr	r0, [pc, #128]	@ (80011a4 <SD_Card_Test+0x2dc>)
 8001122:	f006 fde5 	bl	8007cf0 <f_close>
        UART_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8001126:	2200      	movs	r2, #0
 8001128:	4917      	ldr	r1, [pc, #92]	@ (8001188 <SD_Card_Test+0x2c0>)
 800112a:	2000      	movs	r0, #0
 800112c:	f006 f8ae 	bl	800728c <f_mount>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <SD_Card_Test+0x2a8>)
 8001136:	701a      	strb	r2, [r3, #0]
  if (FR_Status != FR_OK)
 8001138:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <SD_Card_Test+0x2a8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00a      	beq.n	8001156 <SD_Card_Test+0x28e>
  {
      sprintf(TxBuffer, "Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <SD_Card_Test+0x2a8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4926      	ldr	r1, [pc, #152]	@ (80011e0 <SD_Card_Test+0x318>)
 8001148:	480b      	ldr	r0, [pc, #44]	@ (8001178 <SD_Card_Test+0x2b0>)
 800114a:	f007 f9ef 	bl	800852c <siprintf>
      UART_Print(TxBuffer);
 800114e:	480a      	ldr	r0, [pc, #40]	@ (8001178 <SD_Card_Test+0x2b0>)
 8001150:	f7ff fd14 	bl	8000b7c <UART_Print>
  } else{
      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
      UART_Print(TxBuffer);
  }
}
 8001154:	e006      	b.n	8001164 <SD_Card_Test+0x29c>
      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8001156:	4923      	ldr	r1, [pc, #140]	@ (80011e4 <SD_Card_Test+0x31c>)
 8001158:	4807      	ldr	r0, [pc, #28]	@ (8001178 <SD_Card_Test+0x2b0>)
 800115a:	f007 f9e7 	bl	800852c <siprintf>
      UART_Print(TxBuffer);
 800115e:	4806      	ldr	r0, [pc, #24]	@ (8001178 <SD_Card_Test+0x2b0>)
 8001160:	f7ff fd0c 	bl	8000b7c <UART_Print>
}
 8001164:	bf00      	nop
 8001166:	bdb0      	pop	{r4, r5, r7, pc}
 8001168:	08008e84 	.word	0x08008e84
 800116c:	2000029c 	.word	0x2000029c
 8001170:	200006fc 	.word	0x200006fc
 8001174:	08008e88 	.word	0x08008e88
 8001178:	200001a0 	.word	0x200001a0
 800117c:	08008ebc 	.word	0x08008ebc
 8001180:	20000700 	.word	0x20000700
 8001184:	2000070c 	.word	0x2000070c
 8001188:	08008ee0 	.word	0x08008ee0
 800118c:	3fe00000 	.word	0x3fe00000
 8001190:	20000710 	.word	0x20000710
 8001194:	20000714 	.word	0x20000714
 8001198:	08008ee4 	.word	0x08008ee4
 800119c:	08008f04 	.word	0x08008f04
 80011a0:	08008f28 	.word	0x08008f28
 80011a4:	200004cc 	.word	0x200004cc
 80011a8:	08008f3c 	.word	0x08008f3c
 80011ac:	08008f80 	.word	0x08008f80
 80011b0:	08008fc0 	.word	0x08008fc0
 80011b4:	20000718 	.word	0x20000718
 80011b8:	08008ff8 	.word	0x08008ff8
 80011bc:	20000708 	.word	0x20000708
 80011c0:	08009034 	.word	0x08009034
 80011c4:	08009070 	.word	0x08009070
 80011c8:	20000704 	.word	0x20000704
 80011cc:	080090a8 	.word	0x080090a8
 80011d0:	080090e0 	.word	0x080090e0
 80011d4:	080090f4 	.word	0x080090f4
 80011d8:	08009134 	.word	0x08009134
 80011dc:	08009160 	.word	0x08009160
 80011e0:	08009194 	.word	0x08009194
 80011e4:	080091cc 	.word	0x080091cc

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <HAL_MspInit+0x44>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	@ 0x60
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_MspInit+0x44>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121c:	6593      	str	r3, [r2, #88]	@ 0x58
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0a4      	sub	sp, #144	@ 0x90
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2288      	movs	r2, #136	@ 0x88
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f007 f98d 	bl	800856c <memset>
  if(hrtc->Instance==RTC)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <HAL_RTC_MspInit+0x5c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d118      	bne.n	800128e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800125c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001262:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4618      	mov	r0, r3
 8001270:	f001 ffee 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800127a:	f7ff ffb5 	bl	80011e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <HAL_RTC_MspInit+0x60>)
 8001280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001284:	4a05      	ldr	r2, [pc, #20]	@ (800129c <HAL_RTC_MspInit+0x60>)
 8001286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800128a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3790      	adds	r7, #144	@ 0x90
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40002800 	.word	0x40002800
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a25      	ldr	r2, [pc, #148]	@ (8001354 <HAL_SPI_MspInit+0xb4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d144      	bne.n	800134c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012c2:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	4a24      	ldr	r2, [pc, #144]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ce:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a18      	ldr	r2, [pc, #96]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_SPI_MspInit+0xb8>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800130a:	230c      	movs	r3, #12
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131a:	2305      	movs	r3, #5
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	480d      	ldr	r0, [pc, #52]	@ (800135c <HAL_SPI_MspInit+0xbc>)
 8001326:	f000 ff6d 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800132a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133c:	2305      	movs	r3, #5
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	@ (8001360 <HAL_SPI_MspInit+0xc0>)
 8001348:	f000 ff5c 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40003800 	.word	0x40003800
 8001358:	40021000 	.word	0x40021000
 800135c:	48000800 	.word	0x48000800
 8001360:	48000400 	.word	0x48000400

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0ac      	sub	sp, #176	@ 0xb0
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2288      	movs	r2, #136	@ 0x88
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f007 f8f1 	bl	800856c <memset>
  if(huart->Instance==USART2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a21      	ldr	r2, [pc, #132]	@ (8001414 <HAL_UART_MspInit+0xb0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d13b      	bne.n	800140c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001394:	2302      	movs	r3, #2
 8001396:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001398:	2300      	movs	r3, #0
 800139a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 ff55 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013ac:	f7ff ff1c 	bl	80011e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_UART_MspInit+0xb4>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b4:	4a18      	ldr	r2, [pc, #96]	@ (8001418 <HAL_UART_MspInit+0xb4>)
 80013b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80013bc:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <HAL_UART_MspInit+0xb4>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_UART_MspInit+0xb4>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <HAL_UART_MspInit+0xb4>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d4:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_UART_MspInit+0xb4>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013e0:	230c      	movs	r3, #12
 80013e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f8:	2307      	movs	r3, #7
 80013fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001408:	f000 fefc 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	37b0      	adds	r7, #176	@ 0xb0
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40004400 	.word	0x40004400
 8001418:	40021000 	.word	0x40021000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <SysTick_Handler+0x34>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <SysTick_Handler+0x18>
	    Timer1--;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <SysTick_Handler+0x34>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <SysTick_Handler+0x34>)
 8001486:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <SysTick_Handler+0x38>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <SysTick_Handler+0x2c>
	    Timer2--;
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <SysTick_Handler+0x38>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <SysTick_Handler+0x38>)
 800149a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149c:	f000 fdac 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000029a 	.word	0x2000029a
 80014a8:	2000029b 	.word	0x2000029b

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	@ (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f007 f84e 	bl	800857c <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20018000 	.word	0x20018000
 800150c:	00000400 	.word	0x00000400
 8001510:	200007e0 	.word	0x200007e0
 8001514:	20000970 	.word	0x20000970

08001518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001574 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001540:	f7ff ffea 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <LoopForever+0x6>)
  ldr r1, =_edata
 8001546:	490d      	ldr	r1, [pc, #52]	@ (800157c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <LoopForever+0xe>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800155c:	4c0a      	ldr	r4, [pc, #40]	@ (8001588 <LoopForever+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156a:	f007 f80d 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800156e:	f7ff fb19 	bl	8000ba4 <main>

08001572 <LoopForever>:

LoopForever:
    b LoopForever
 8001572:	e7fe      	b.n	8001572 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001574:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001580:	08009340 	.word	0x08009340
  ldr r2, =_sbss
 8001584:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001588:	20000970 	.word	0x20000970

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>
	...

08001590 <SELECT>:
#define BSP_SD_CS_GPIO_Port GPIOB
#define BSP_SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BSP_SD_CS_GPIO_Port, BSP_SD_CS_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2101      	movs	r1, #1
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <SELECT+0x14>)
 800159a:	f000 ffdd 	bl	8002558 <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	48000400 	.word	0x48000400

080015a8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BSP_SD_CS_GPIO_Port, BSP_SD_CS_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2101      	movs	r1, #1
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <DESELECT+0x14>)
 80015b2:	f000 ffd1 	bl	8002558 <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	48000400 	.word	0x48000400

080015c0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80015ca:	bf00      	nop
 80015cc:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <SPI_TxByte+0x30>)
 80015ce:	f003 f997 	bl	8004900 <HAL_SPI_GetState>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d1f9      	bne.n	80015cc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80015d8:	1df9      	adds	r1, r7, #7
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	2201      	movs	r2, #1
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <SPI_TxByte+0x30>)
 80015e2:	f002 fdf6 	bl	80041d2 <HAL_SPI_Transmit>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200000b4 	.word	0x200000b4

080015f4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80015fa:	23ff      	movs	r3, #255	@ 0xff
 80015fc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001602:	bf00      	nop
 8001604:	4809      	ldr	r0, [pc, #36]	@ (800162c <SPI_RxByte+0x38>)
 8001606:	f003 f97b 	bl	8004900 <HAL_SPI_GetState>
 800160a:	4603      	mov	r3, r0
 800160c:	2b01      	cmp	r3, #1
 800160e:	d1f9      	bne.n	8001604 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001610:	1dba      	adds	r2, r7, #6
 8001612:	1df9      	adds	r1, r7, #7
 8001614:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <SPI_RxByte+0x38>)
 800161e:	f002 ff4d 	bl	80044bc <HAL_SPI_TransmitReceive>

  return data;
 8001622:	79bb      	ldrb	r3, [r7, #6]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000b4 	.word	0x200000b4

08001630 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001638:	f7ff ffdc 	bl	80015f4 <SPI_RxByte>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	701a      	strb	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <SD_ReadyWait+0x34>)
 8001654:	2232      	movs	r2, #50	@ 0x32
 8001656:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001658:	f7ff ffcc 	bl	80015f4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800165c:	f7ff ffca 	bl	80015f4 <SPI_RxByte>
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2bff      	cmp	r3, #255	@ 0xff
 8001668:	d004      	beq.n	8001674 <SD_ReadyWait+0x28>
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SD_ReadyWait+0x34>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f3      	bne.n	800165c <SD_ReadyWait+0x10>

  return res;
 8001674:	79fb      	ldrb	r3, [r7, #7]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000029b 	.word	0x2000029b

08001684 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800168a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800168e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001690:	f7ff ff8a 	bl	80015a8 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	e005      	b.n	80016a6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800169a:	20ff      	movs	r0, #255	@ 0xff
 800169c:	f7ff ff90 	bl	80015c0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	3301      	adds	r3, #1
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	ddf6      	ble.n	800169a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80016ac:	f7ff ff70 	bl	8001590 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80016b0:	2340      	movs	r3, #64	@ 0x40
 80016b2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80016c4:	2395      	movs	r3, #149	@ 0x95
 80016c6:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	e009      	b.n	80016e2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80016ce:	1d3a      	adds	r2, r7, #4
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff72 	bl	80015c0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	ddf2      	ble.n	80016ce <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80016e8:	e002      	b.n	80016f0 <SD_PowerOn+0x6c>
  {
    Count--;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80016f0:	f7ff ff80 	bl	80015f4 <SPI_RxByte>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d002      	beq.n	8001700 <SD_PowerOn+0x7c>
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f4      	bne.n	80016ea <SD_PowerOn+0x66>
  }

  DESELECT();
 8001700:	f7ff ff52 	bl	80015a8 <DESELECT>
  SPI_TxByte(0XFF);
 8001704:	20ff      	movs	r0, #255	@ 0xff
 8001706:	f7ff ff5b 	bl	80015c0 <SPI_TxByte>

  PowerFlag = 1;
 800170a:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <SD_PowerOn+0x94>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200007e5 	.word	0x200007e5

0800171c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <SD_PowerOff+0x14>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	200007e5 	.word	0x200007e5

08001734 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001738:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <SD_CheckPower+0x14>)
 800173a:	781b      	ldrb	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200007e5 	.word	0x200007e5

0800174c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <SD_RxDataBlock+0x68>)
 8001758:	220a      	movs	r2, #10
 800175a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800175c:	f7ff ff4a 	bl	80015f4 <SPI_RxByte>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2bff      	cmp	r3, #255	@ 0xff
 8001768:	d104      	bne.n	8001774 <SD_RxDataBlock+0x28>
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <SD_RxDataBlock+0x68>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f3      	bne.n	800175c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2bfe      	cmp	r3, #254	@ 0xfe
 8001778:	d001      	beq.n	800177e <SD_RxDataBlock+0x32>
    return FALSE;
 800177a:	2300      	movs	r3, #0
 800177c:	e016      	b.n	80017ac <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff53 	bl	8001630 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff4d 	bl	8001630 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	3b02      	subs	r3, #2
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ed      	bne.n	800177e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80017a2:	f7ff ff27 	bl	80015f4 <SPI_RxByte>
  SPI_RxByte();
 80017a6:	f7ff ff25 	bl	80015f4 <SPI_RxByte>

  return TRUE;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000029a 	.word	0x2000029a

080017b8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80017c8:	f7ff ff40 	bl	800164c <SD_ReadyWait>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2bff      	cmp	r3, #255	@ 0xff
 80017d0:	d001      	beq.n	80017d6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e040      	b.n	8001858 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fef1 	bl	80015c0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	2bfd      	cmp	r3, #253	@ 0xfd
 80017e2:	d031      	beq.n	8001848 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fee5 	bl	80015c0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fede 	bl	80015c0 <SPI_TxByte>
    } while (--wc);
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	3b01      	subs	r3, #1
 8001808:	73bb      	strb	r3, [r7, #14]
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1eb      	bne.n	80017e8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001810:	f7ff fef0 	bl	80015f4 <SPI_RxByte>
    SPI_RxByte();
 8001814:	f7ff feee 	bl	80015f4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001818:	e00b      	b.n	8001832 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800181a:	f7ff feeb 	bl	80015f4 <SPI_RxByte>
 800181e:	4603      	mov	r3, r0
 8001820:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	2b05      	cmp	r3, #5
 800182a:	d006      	beq.n	800183a <SD_TxDataBlock+0x82>
        break;

      i++;
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	3301      	adds	r3, #1
 8001830:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001832:	7b7b      	ldrb	r3, [r7, #13]
 8001834:	2b40      	cmp	r3, #64	@ 0x40
 8001836:	d9f0      	bls.n	800181a <SD_TxDataBlock+0x62>
 8001838:	e000      	b.n	800183c <SD_TxDataBlock+0x84>
        break;
 800183a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800183c:	bf00      	nop
 800183e:	f7ff fed9 	bl	80015f4 <SPI_RxByte>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0fa      	beq.n	800183e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2b05      	cmp	r3, #5
 8001850:	d101      	bne.n	8001856 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800186c:	f7ff feee 	bl	800164c <SD_ReadyWait>
 8001870:	4603      	mov	r3, r0
 8001872:	2bff      	cmp	r3, #255	@ 0xff
 8001874:	d001      	beq.n	800187a <SD_SendCmd+0x1a>
    return 0xFF;
 8001876:	23ff      	movs	r3, #255	@ 0xff
 8001878:	e040      	b.n	80018fc <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe9f 	bl	80015c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	0e1b      	lsrs	r3, r3, #24
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe99 	bl	80015c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fe93 	bl	80015c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe8d 	bl	80015c0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fe88 	bl	80015c0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	2b40      	cmp	r3, #64	@ 0x40
 80018b8:	d101      	bne.n	80018be <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80018ba:	2395      	movs	r3, #149	@ 0x95
 80018bc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b48      	cmp	r3, #72	@ 0x48
 80018c2:	d101      	bne.n	80018c8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80018c4:	2387      	movs	r3, #135	@ 0x87
 80018c6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fe78 	bl	80015c0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b4c      	cmp	r3, #76	@ 0x4c
 80018d4:	d101      	bne.n	80018da <SD_SendCmd+0x7a>
    SPI_RxByte();
 80018d6:	f7ff fe8d 	bl	80015f4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80018da:	230a      	movs	r3, #10
 80018dc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80018de:	f7ff fe89 	bl	80015f4 <SPI_RxByte>
 80018e2:	4603      	mov	r3, r0
 80018e4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80018e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da05      	bge.n	80018fa <SD_SendCmd+0x9a>
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	73bb      	strb	r3, [r7, #14]
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f1      	bne.n	80018de <SD_SendCmd+0x7e>

  return res;
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001914:	2301      	movs	r3, #1
 8001916:	e0d5      	b.n	8001ac4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001918:	4b6c      	ldr	r3, [pc, #432]	@ (8001acc <SD_disk_initialize+0x1c8>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <SD_disk_initialize+0x2a>
    return Stat;
 8001926:	4b69      	ldr	r3, [pc, #420]	@ (8001acc <SD_disk_initialize+0x1c8>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	e0ca      	b.n	8001ac4 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800192e:	f7ff fea9 	bl	8001684 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001932:	f7ff fe2d 	bl	8001590 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800193a:	2100      	movs	r1, #0
 800193c:	2040      	movs	r0, #64	@ 0x40
 800193e:	f7ff ff8f 	bl	8001860 <SD_SendCmd>
 8001942:	4603      	mov	r3, r0
 8001944:	2b01      	cmp	r3, #1
 8001946:	f040 80a5 	bne.w	8001a94 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800194a:	4b61      	ldr	r3, [pc, #388]	@ (8001ad0 <SD_disk_initialize+0x1cc>)
 800194c:	2264      	movs	r2, #100	@ 0x64
 800194e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001950:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001954:	2048      	movs	r0, #72	@ 0x48
 8001956:	f7ff ff83 	bl	8001860 <SD_SendCmd>
 800195a:	4603      	mov	r3, r0
 800195c:	2b01      	cmp	r3, #1
 800195e:	d158      	bne.n	8001a12 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e00c      	b.n	8001980 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001966:	7bfc      	ldrb	r4, [r7, #15]
 8001968:	f7ff fe44 	bl	80015f4 <SPI_RxByte>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	f104 0310 	add.w	r3, r4, #16
 8001974:	443b      	add	r3, r7
 8001976:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	3301      	adds	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d9ef      	bls.n	8001966 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001986:	7abb      	ldrb	r3, [r7, #10]
 8001988:	2b01      	cmp	r3, #1
 800198a:	f040 8083 	bne.w	8001a94 <SD_disk_initialize+0x190>
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	2baa      	cmp	r3, #170	@ 0xaa
 8001992:	d17f      	bne.n	8001a94 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001994:	2100      	movs	r1, #0
 8001996:	2077      	movs	r0, #119	@ 0x77
 8001998:	f7ff ff62 	bl	8001860 <SD_SendCmd>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d807      	bhi.n	80019b2 <SD_disk_initialize+0xae>
 80019a2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019a6:	2069      	movs	r0, #105	@ 0x69
 80019a8:	f7ff ff5a 	bl	8001860 <SD_SendCmd>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80019b2:	4b47      	ldr	r3, [pc, #284]	@ (8001ad0 <SD_disk_initialize+0x1cc>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1eb      	bne.n	8001994 <SD_disk_initialize+0x90>
 80019bc:	e000      	b.n	80019c0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80019be:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80019c0:	4b43      	ldr	r3, [pc, #268]	@ (8001ad0 <SD_disk_initialize+0x1cc>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d064      	beq.n	8001a94 <SD_disk_initialize+0x190>
 80019ca:	2100      	movs	r1, #0
 80019cc:	207a      	movs	r0, #122	@ 0x7a
 80019ce:	f7ff ff47 	bl	8001860 <SD_SendCmd>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d15d      	bne.n	8001a94 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e00c      	b.n	80019f8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80019de:	7bfc      	ldrb	r4, [r7, #15]
 80019e0:	f7ff fe08 	bl	80015f4 <SPI_RxByte>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	f104 0310 	add.w	r3, r4, #16
 80019ec:	443b      	add	r3, r7
 80019ee:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d9ef      	bls.n	80019de <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80019fe:	7a3b      	ldrb	r3, [r7, #8]
 8001a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SD_disk_initialize+0x108>
 8001a08:	2306      	movs	r3, #6
 8001a0a:	e000      	b.n	8001a0e <SD_disk_initialize+0x10a>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	73bb      	strb	r3, [r7, #14]
 8001a10:	e040      	b.n	8001a94 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001a12:	2100      	movs	r1, #0
 8001a14:	2077      	movs	r0, #119	@ 0x77
 8001a16:	f7ff ff23 	bl	8001860 <SD_SendCmd>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d808      	bhi.n	8001a32 <SD_disk_initialize+0x12e>
 8001a20:	2100      	movs	r1, #0
 8001a22:	2069      	movs	r0, #105	@ 0x69
 8001a24:	f7ff ff1c 	bl	8001860 <SD_SendCmd>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d801      	bhi.n	8001a32 <SD_disk_initialize+0x12e>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e000      	b.n	8001a34 <SD_disk_initialize+0x130>
 8001a32:	2301      	movs	r3, #1
 8001a34:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d10e      	bne.n	8001a5a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2077      	movs	r0, #119	@ 0x77
 8001a40:	f7ff ff0e 	bl	8001860 <SD_SendCmd>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d80e      	bhi.n	8001a68 <SD_disk_initialize+0x164>
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2069      	movs	r0, #105	@ 0x69
 8001a4e:	f7ff ff07 	bl	8001860 <SD_SendCmd>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001a58:	e00d      	b.n	8001a76 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2041      	movs	r0, #65	@ 0x41
 8001a5e:	f7ff feff 	bl	8001860 <SD_SendCmd>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <SD_disk_initialize+0x1cc>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e1      	bne.n	8001a36 <SD_disk_initialize+0x132>
 8001a72:	e000      	b.n	8001a76 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001a74:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <SD_disk_initialize+0x1cc>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <SD_disk_initialize+0x18c>
 8001a80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a84:	2050      	movs	r0, #80	@ 0x50
 8001a86:	f7ff feeb 	bl	8001860 <SD_SendCmd>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001a94:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <SD_disk_initialize+0x1d0>)
 8001a96:	7bbb      	ldrb	r3, [r7, #14]
 8001a98:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001a9a:	f7ff fd85 	bl	80015a8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001a9e:	f7ff fda9 	bl	80015f4 <SPI_RxByte>

  if (type)
 8001aa2:	7bbb      	ldrb	r3, [r7, #14]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <SD_disk_initialize+0x1c8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <SD_disk_initialize+0x1c8>)
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e001      	b.n	8001abe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001aba:	f7ff fe2f 	bl	800171c <SD_PowerOff>
  }

  return Stat;
 8001abe:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <SD_disk_initialize+0x1c8>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	2000029a 	.word	0x2000029a
 8001ad4:	200007e4 	.word	0x200007e4

08001ad8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SD_disk_status+0x14>
    return STA_NOINIT;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e002      	b.n	8001af2 <SD_disk_status+0x1a>

  return Stat;
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <SD_disk_status+0x28>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b2db      	uxtb	r3, r3
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000004 	.word	0x20000004

08001b04 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <SD_disk_read+0x1c>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <SD_disk_read+0x20>
    return RES_PARERR;
 8001b20:	2304      	movs	r3, #4
 8001b22:	e051      	b.n	8001bc8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001b24:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd0 <SD_disk_read+0xcc>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e048      	b.n	8001bc8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001b36:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <SD_disk_read+0xd0>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	607b      	str	r3, [r7, #4]

  SELECT();
 8001b48:	f7ff fd22 	bl	8001590 <SELECT>

  if (count == 1)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d111      	bne.n	8001b76 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	2051      	movs	r0, #81	@ 0x51
 8001b56:	f7ff fe83 	bl	8001860 <SD_SendCmd>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d129      	bne.n	8001bb4 <SD_disk_read+0xb0>
 8001b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b64:	68b8      	ldr	r0, [r7, #8]
 8001b66:	f7ff fdf1 	bl	800174c <SD_RxDataBlock>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d021      	beq.n	8001bb4 <SD_disk_read+0xb0>
      count = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	e01e      	b.n	8001bb4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	2052      	movs	r0, #82	@ 0x52
 8001b7a:	f7ff fe71 	bl	8001860 <SD_SendCmd>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d117      	bne.n	8001bb4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001b84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b88:	68b8      	ldr	r0, [r7, #8]
 8001b8a:	f7ff fddf 	bl	800174c <SD_RxDataBlock>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00a      	beq.n	8001baa <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001b9a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ed      	bne.n	8001b84 <SD_disk_read+0x80>
 8001ba8:	e000      	b.n	8001bac <SD_disk_read+0xa8>
          break;
 8001baa:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001bac:	2100      	movs	r1, #0
 8001bae:	204c      	movs	r0, #76	@ 0x4c
 8001bb0:	f7ff fe56 	bl	8001860 <SD_SendCmd>
    }
  }

  DESELECT();
 8001bb4:	f7ff fcf8 	bl	80015a8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001bb8:	f7ff fd1c 	bl	80015f4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	200007e4 	.word	0x200007e4

08001bd8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <SD_disk_write+0x1c>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <SD_disk_write+0x20>
    return RES_PARERR;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e06b      	b.n	8001cd0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001bf8:	4b37      	ldr	r3, [pc, #220]	@ (8001cd8 <SD_disk_write+0x100>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e062      	b.n	8001cd0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001c0a:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <SD_disk_write+0x100>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e059      	b.n	8001cd0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <SD_disk_write+0x104>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	025b      	lsls	r3, r3, #9
 8001c2c:	607b      	str	r3, [r7, #4]

  SELECT();
 8001c2e:	f7ff fcaf 	bl	8001590 <SELECT>

  if (count == 1)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d110      	bne.n	8001c5a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	2058      	movs	r0, #88	@ 0x58
 8001c3c:	f7ff fe10 	bl	8001860 <SD_SendCmd>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d13a      	bne.n	8001cbc <SD_disk_write+0xe4>
 8001c46:	21fe      	movs	r1, #254	@ 0xfe
 8001c48:	68b8      	ldr	r0, [r7, #8]
 8001c4a:	f7ff fdb5 	bl	80017b8 <SD_TxDataBlock>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d033      	beq.n	8001cbc <SD_disk_write+0xe4>
      count = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	e030      	b.n	8001cbc <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <SD_disk_write+0x104>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001c66:	2100      	movs	r1, #0
 8001c68:	2077      	movs	r0, #119	@ 0x77
 8001c6a:	f7ff fdf9 	bl	8001860 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	2057      	movs	r0, #87	@ 0x57
 8001c72:	f7ff fdf5 	bl	8001860 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	2059      	movs	r0, #89	@ 0x59
 8001c7a:	f7ff fdf1 	bl	8001860 <SD_SendCmd>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11b      	bne.n	8001cbc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001c84:	21fc      	movs	r1, #252	@ 0xfc
 8001c86:	68b8      	ldr	r0, [r7, #8]
 8001c88:	f7ff fd96 	bl	80017b8 <SD_TxDataBlock>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001c98:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ee      	bne.n	8001c84 <SD_disk_write+0xac>
 8001ca6:	e000      	b.n	8001caa <SD_disk_write+0xd2>
          break;
 8001ca8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001caa:	21fd      	movs	r1, #253	@ 0xfd
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff fd83 	bl	80017b8 <SD_TxDataBlock>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <SD_disk_write+0xe4>
      {
        count = 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001cbc:	f7ff fc74 	bl	80015a8 <DESELECT>
  SPI_RxByte();
 8001cc0:	f7ff fc98 	bl	80015f4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	200007e4 	.word	0x200007e4

08001ce0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b08b      	sub	sp, #44	@ 0x2c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	603a      	str	r2, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	460b      	mov	r3, r1
 8001cee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e119      	b.n	8001f32 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d129      	bne.n	8001d5e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d017      	beq.n	8001d42 <SD_disk_ioctl+0x62>
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	dc1f      	bgt.n	8001d56 <SD_disk_ioctl+0x76>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <SD_disk_ioctl+0x40>
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d00b      	beq.n	8001d36 <SD_disk_ioctl+0x56>
 8001d1e:	e01a      	b.n	8001d56 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001d20:	f7ff fd08 	bl	8001734 <SD_CheckPower>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001d2a:	f7ff fcf7 	bl	800171c <SD_PowerOff>
      res = RES_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001d34:	e0fb      	b.n	8001f2e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001d36:	f7ff fca5 	bl	8001684 <SD_PowerOn>
      res = RES_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001d40:	e0f5      	b.n	8001f2e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	1c5c      	adds	r4, r3, #1
 8001d46:	f7ff fcf5 	bl	8001734 <SD_CheckPower>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001d54:	e0eb      	b.n	8001f2e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001d56:	2304      	movs	r3, #4
 8001d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d5c:	e0e7      	b.n	8001f2e <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001d5e:	4b77      	ldr	r3, [pc, #476]	@ (8001f3c <SD_disk_ioctl+0x25c>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0e0      	b.n	8001f32 <SD_disk_ioctl+0x252>

    SELECT();
 8001d70:	f7ff fc0e 	bl	8001590 <SELECT>

    switch (ctrl)
 8001d74:	79bb      	ldrb	r3, [r7, #6]
 8001d76:	2b0d      	cmp	r3, #13
 8001d78:	f200 80ca 	bhi.w	8001f10 <SD_disk_ioctl+0x230>
 8001d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d84 <SD_disk_ioctl+0xa4>)
 8001d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d82:	bf00      	nop
 8001d84:	08001e7b 	.word	0x08001e7b
 8001d88:	08001dbd 	.word	0x08001dbd
 8001d8c:	08001e6b 	.word	0x08001e6b
 8001d90:	08001f11 	.word	0x08001f11
 8001d94:	08001f11 	.word	0x08001f11
 8001d98:	08001f11 	.word	0x08001f11
 8001d9c:	08001f11 	.word	0x08001f11
 8001da0:	08001f11 	.word	0x08001f11
 8001da4:	08001f11 	.word	0x08001f11
 8001da8:	08001f11 	.word	0x08001f11
 8001dac:	08001f11 	.word	0x08001f11
 8001db0:	08001e8d 	.word	0x08001e8d
 8001db4:	08001eb1 	.word	0x08001eb1
 8001db8:	08001ed5 	.word	0x08001ed5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2049      	movs	r0, #73	@ 0x49
 8001dc0:	f7ff fd4e 	bl	8001860 <SD_SendCmd>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 80a6 	bne.w	8001f18 <SD_disk_ioctl+0x238>
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fcba 	bl	800174c <SD_RxDataBlock>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 809c 	beq.w	8001f18 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8001de0:	7b3b      	ldrb	r3, [r7, #12]
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10d      	bne.n	8001e06 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001dea:	7d7b      	ldrb	r3, [r7, #21]
 8001dec:	461a      	mov	r2, r3
 8001dee:	7d3b      	ldrb	r3, [r7, #20]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001dfc:	8bfb      	ldrh	r3, [r7, #30]
 8001dfe:	029a      	lsls	r2, r3, #10
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e02d      	b.n	8001e62 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e06:	7c7b      	ldrb	r3, [r7, #17]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	7dbb      	ldrb	r3, [r7, #22]
 8001e10:	09db      	lsrs	r3, r3, #7
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	7d7b      	ldrb	r3, [r7, #21]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 0306 	and.w	r3, r3, #6
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001e2e:	7d3b      	ldrb	r3, [r7, #20]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	7cbb      	ldrb	r3, [r7, #18]
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001e54:	8bfa      	ldrh	r2, [r7, #30]
 8001e56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e5a:	3b09      	subs	r3, #9
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001e68:	e056      	b.n	8001f18 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e70:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001e78:	e055      	b.n	8001f26 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001e7a:	f7ff fbe7 	bl	800164c <SD_ReadyWait>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2bff      	cmp	r3, #255	@ 0xff
 8001e82:	d14b      	bne.n	8001f1c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001e8a:	e047      	b.n	8001f1c <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2049      	movs	r0, #73	@ 0x49
 8001e90:	f7ff fce6 	bl	8001860 <SD_SendCmd>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d142      	bne.n	8001f20 <SD_disk_ioctl+0x240>
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	6a38      	ldr	r0, [r7, #32]
 8001e9e:	f7ff fc55 	bl	800174c <SD_RxDataBlock>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d03b      	beq.n	8001f20 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001eae:	e037      	b.n	8001f20 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	204a      	movs	r0, #74	@ 0x4a
 8001eb4:	f7ff fcd4 	bl	8001860 <SD_SendCmd>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d132      	bne.n	8001f24 <SD_disk_ioctl+0x244>
 8001ebe:	2110      	movs	r1, #16
 8001ec0:	6a38      	ldr	r0, [r7, #32]
 8001ec2:	f7ff fc43 	bl	800174c <SD_RxDataBlock>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d02b      	beq.n	8001f24 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ed2:	e027      	b.n	8001f24 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	207a      	movs	r0, #122	@ 0x7a
 8001ed8:	f7ff fcc2 	bl	8001860 <SD_SendCmd>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d116      	bne.n	8001f10 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001ee8:	e00b      	b.n	8001f02 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001eea:	6a3c      	ldr	r4, [r7, #32]
 8001eec:	1c63      	adds	r3, r4, #1
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	f7ff fb80 	bl	80015f4 <SPI_RxByte>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001efc:	3301      	adds	r3, #1
 8001efe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d9ef      	bls.n	8001eea <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8001f10:	2304      	movs	r3, #4
 8001f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f16:	e006      	b.n	8001f26 <SD_disk_ioctl+0x246>
      break;
 8001f18:	bf00      	nop
 8001f1a:	e004      	b.n	8001f26 <SD_disk_ioctl+0x246>
      break;
 8001f1c:	bf00      	nop
 8001f1e:	e002      	b.n	8001f26 <SD_disk_ioctl+0x246>
      break;
 8001f20:	bf00      	nop
 8001f22:	e000      	b.n	8001f26 <SD_disk_ioctl+0x246>
      break;
 8001f24:	bf00      	nop
    }

    DESELECT();
 8001f26:	f7ff fb3f 	bl	80015a8 <DESELECT>
    SPI_RxByte();
 8001f2a:	f7ff fb63 	bl	80015f4 <SPI_RxByte>
  }

  return res;
 8001f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	372c      	adds	r7, #44	@ 0x2c
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <HAL_Init+0x3c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <HAL_Init+0x3c>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f56:	2003      	movs	r0, #3
 8001f58:	f000 f920 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 f80f 	bl	8001f80 <HAL_InitTick>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	e001      	b.n	8001f72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f6e:	f7ff f941 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f72:	79fb      	ldrb	r3, [r7, #7]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40022000 	.word	0x40022000

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <HAL_InitTick+0x6c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <HAL_InitTick+0x70>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_InitTick+0x6c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f91d 	bl	80021ea <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d809      	bhi.n	8001fd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f000 f8f5 	bl	80021b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <HAL_InitTick+0x74>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e007      	b.n	8001fe0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e004      	b.n	8001fe0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e001      	b.n	8001fe0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000000c 	.word	0x2000000c
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000008 	.word	0x20000008

08001ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_IncTick+0x20>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_IncTick+0x24>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_IncTick+0x24>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	2000000c 	.word	0x2000000c
 800201c:	200007e8 	.word	0x200007e8

08002020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <HAL_GetTick+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	200007e8 	.word	0x200007e8

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	@ (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
         );
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f7ff ff8e 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff47 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff5c 	bl	8002080 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff8e 	bl	80020f0 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5d 	bl	800209c <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffb0 	bl	8002158 <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002212:	e17f      	b.n	8002514 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8171 	beq.w	800250e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d005      	beq.n	8002244 <HAL_GPIO_Init+0x40>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d130      	bne.n	80022a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800227a:	2201      	movs	r2, #1
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 0201 	and.w	r2, r3, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d118      	bne.n	80022e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d017      	beq.n	8002320 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	6939      	ldr	r1, [r7, #16]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80ac 	beq.w	800250e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002534 <HAL_GPIO_Init+0x330>)
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002534 <HAL_GPIO_Init+0x330>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002534 <HAL_GPIO_Init+0x330>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002538 <HAL_GPIO_Init+0x334>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023f8:	d025      	beq.n	8002446 <HAL_GPIO_Init+0x242>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4f      	ldr	r2, [pc, #316]	@ (800253c <HAL_GPIO_Init+0x338>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_GPIO_Init+0x23e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4e      	ldr	r2, [pc, #312]	@ (8002540 <HAL_GPIO_Init+0x33c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x23a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4d      	ldr	r2, [pc, #308]	@ (8002544 <HAL_GPIO_Init+0x340>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x236>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4c      	ldr	r2, [pc, #304]	@ (8002548 <HAL_GPIO_Init+0x344>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x232>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4b      	ldr	r2, [pc, #300]	@ (800254c <HAL_GPIO_Init+0x348>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x22e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4a      	ldr	r2, [pc, #296]	@ (8002550 <HAL_GPIO_Init+0x34c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x22a>
 800242a:	2306      	movs	r3, #6
 800242c:	e00c      	b.n	8002448 <HAL_GPIO_Init+0x244>
 800242e:	2307      	movs	r3, #7
 8002430:	e00a      	b.n	8002448 <HAL_GPIO_Init+0x244>
 8002432:	2305      	movs	r3, #5
 8002434:	e008      	b.n	8002448 <HAL_GPIO_Init+0x244>
 8002436:	2304      	movs	r3, #4
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x244>
 800243a:	2303      	movs	r3, #3
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x244>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x244>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x244>
 8002446:	2300      	movs	r3, #0
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002458:	4937      	ldr	r1, [pc, #220]	@ (8002538 <HAL_GPIO_Init+0x334>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002466:	4b3b      	ldr	r3, [pc, #236]	@ (8002554 <HAL_GPIO_Init+0x350>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800248a:	4a32      	ldr	r2, [pc, #200]	@ (8002554 <HAL_GPIO_Init+0x350>)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002490:	4b30      	ldr	r3, [pc, #192]	@ (8002554 <HAL_GPIO_Init+0x350>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b4:	4a27      	ldr	r2, [pc, #156]	@ (8002554 <HAL_GPIO_Init+0x350>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024ba:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <HAL_GPIO_Init+0x350>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024de:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_GPIO_Init+0x350>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_GPIO_Init+0x350>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002508:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <HAL_GPIO_Init+0x350>)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	f47f ae78 	bne.w	8002214 <HAL_GPIO_Init+0x10>
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000
 800253c:	48000400 	.word	0x48000400
 8002540:	48000800 	.word	0x48000800
 8002544:	48000c00 	.word	0x48000c00
 8002548:	48001000 	.word	0x48001000
 800254c:	48001400 	.word	0x48001400
 8002550:	48001800 	.word	0x48001800
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002568:	787b      	ldrb	r3, [r7, #1]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002574:	e002      	b.n	800257c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40007000 	.word	0x40007000

080025a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025b2:	d130      	bne.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b4:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025c0:	d038      	beq.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c2:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2232      	movs	r2, #50	@ 0x32
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	4a1b      	ldr	r2, [pc, #108]	@ (800264c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0c9b      	lsrs	r3, r3, #18
 80025e4:	3301      	adds	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e8:	e002      	b.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025fc:	d102      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f2      	bne.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002604:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002610:	d110      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e00f      	b.n	8002636 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002622:	d007      	beq.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002624:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800262c:	4a05      	ldr	r2, [pc, #20]	@ (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002632:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40007000 	.word	0x40007000
 8002648:	20000000 	.word	0x20000000
 800264c:	431bde83 	.word	0x431bde83

08002650 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e3ca      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002662:	4b97      	ldr	r3, [pc, #604]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800266c:	4b94      	ldr	r3, [pc, #592]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80e4 	beq.w	800284c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_RCC_OscConfig+0x4a>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	f040 808b 	bne.w	80027a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 8087 	bne.w	80027a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800269a:	4b89      	ldr	r3, [pc, #548]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e3a2      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	4b82      	ldr	r3, [pc, #520]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_RCC_OscConfig+0x7c>
 80026c2:	4b7f      	ldr	r3, [pc, #508]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026ca:	e005      	b.n	80026d8 <HAL_RCC_OscConfig+0x88>
 80026cc:	4b7c      	ldr	r3, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d8:	4293      	cmp	r3, r2
 80026da:	d223      	bcs.n	8002724 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fd55 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e383      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f0:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a72      	ldr	r2, [pc, #456]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b70      	ldr	r3, [pc, #448]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	496d      	ldr	r1, [pc, #436]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270e:	4b6c      	ldr	r3, [pc, #432]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	4968      	ldr	r1, [pc, #416]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
 8002722:	e025      	b.n	8002770 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002724:	4b66      	ldr	r3, [pc, #408]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a65      	ldr	r2, [pc, #404]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b63      	ldr	r3, [pc, #396]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4960      	ldr	r1, [pc, #384]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002742:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	495b      	ldr	r1, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd15 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e343      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002770:	f000 fc4a 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b52      	ldr	r3, [pc, #328]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	4950      	ldr	r1, [pc, #320]	@ (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	4a4e      	ldr	r2, [pc, #312]	@ (80028c8 <HAL_RCC_OscConfig+0x278>)
 800278e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002790:	4b4e      	ldr	r3, [pc, #312]	@ (80028cc <HAL_RCC_OscConfig+0x27c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fbf3 	bl	8001f80 <HAL_InitTick>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d052      	beq.n	800284a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	e327      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d032      	beq.n	8002816 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027b0:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a42      	ldr	r2, [pc, #264]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027bc:	f7ff fc30 	bl	8002020 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c4:	f7ff fc2c 	bl	8002020 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e310      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027d6:	4b3a      	ldr	r3, [pc, #232]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e2:	4b37      	ldr	r3, [pc, #220]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a36      	ldr	r2, [pc, #216]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4931      	ldr	r1, [pc, #196]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	492c      	ldr	r1, [pc, #176]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e01a      	b.n	800284c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002816:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a29      	ldr	r2, [pc, #164]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002822:	f7ff fbfd 	bl	8002020 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282a:	f7ff fbf9 	bl	8002020 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e2dd      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800283c:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x1da>
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800284a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d074      	beq.n	8002942 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x21a>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d10e      	bne.n	8002882 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d10b      	bne.n	8002882 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286a:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d064      	beq.n	8002940 <HAL_RCC_OscConfig+0x2f0>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d160      	bne.n	8002940 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e2ba      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x24a>
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e026      	b.n	80028e8 <HAL_RCC_OscConfig+0x298>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a2:	d115      	bne.n	80028d0 <HAL_RCC_OscConfig+0x280>
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80028aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a02      	ldr	r2, [pc, #8]	@ (80028c0 <HAL_RCC_OscConfig+0x270>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e014      	b.n	80028e8 <HAL_RCC_OscConfig+0x298>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08009234 	.word	0x08009234
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000008 	.word	0x20000008
 80028d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a9f      	ldr	r2, [pc, #636]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b9d      	ldr	r3, [pc, #628]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a9c      	ldr	r2, [pc, #624]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7ff fb96 	bl	8002020 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7ff fb92 	bl	8002020 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	@ 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e276      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290a:	4b92      	ldr	r3, [pc, #584]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x2a8>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff fb82 	bl	8002020 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff fb7e 	bl	8002020 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e262      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002932:	4b88      	ldr	r3, [pc, #544]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x2d0>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d060      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d005      	beq.n	8002960 <HAL_RCC_OscConfig+0x310>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d119      	bne.n	800298e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d116      	bne.n	800298e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002960:	4b7c      	ldr	r3, [pc, #496]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_OscConfig+0x328>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e23f      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b76      	ldr	r3, [pc, #472]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	4973      	ldr	r1, [pc, #460]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298c:	e040      	b.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d023      	beq.n	80029de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002996:	4b6f      	ldr	r3, [pc, #444]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6e      	ldr	r2, [pc, #440]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7ff fb3d 	bl	8002020 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029aa:	f7ff fb39 	bl	8002020 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e21d      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029bc:	4b65      	ldr	r3, [pc, #404]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b62      	ldr	r3, [pc, #392]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	495f      	ldr	r1, [pc, #380]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
 80029dc:	e018      	b.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b5d      	ldr	r3, [pc, #372]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 80029e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff fb19 	bl	8002020 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff fb15 	bl	8002020 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1f9      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a04:	4b53      	ldr	r3, [pc, #332]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03c      	beq.n	8002a96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a24:	4b4b      	ldr	r3, [pc, #300]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff faf4 	bl	8002020 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7ff faf0 	bl	8002020 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1d4      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ef      	beq.n	8002a3c <HAL_RCC_OscConfig+0x3ec>
 8002a5c:	e01b      	b.n	8002a96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a64:	4a3b      	ldr	r2, [pc, #236]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fad7 	bl	8002020 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a76:	f7ff fad3 	bl	8002020 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1b7      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a88:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ef      	bne.n	8002a76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a6 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	4a26      	ldr	r2, [pc, #152]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac0:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad0:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <HAL_RCC_OscConfig+0x508>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d118      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002adc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RCC_OscConfig+0x508>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <HAL_RCC_OscConfig+0x508>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae8:	f7ff fa9a 	bl	8002020 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7ff fa96 	bl	8002020 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e17a      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <HAL_RCC_OscConfig+0x508>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4d8>
 8002b16:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b26:	e029      	b.n	8002b7c <HAL_RCC_OscConfig+0x52c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d115      	bne.n	8002b5c <HAL_RCC_OscConfig+0x50c>
 8002b30:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	4a07      	ldr	r2, [pc, #28]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b46:	4a03      	ldr	r2, [pc, #12]	@ (8002b54 <HAL_RCC_OscConfig+0x504>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x52c>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	4b9c      	ldr	r3, [pc, #624]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b62:	4a9b      	ldr	r2, [pc, #620]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b6c:	4b98      	ldr	r3, [pc, #608]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	4a97      	ldr	r2, [pc, #604]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d016      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7ff fa4c 	bl	8002020 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7ff fa48 	bl	8002020 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e12a      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba2:	4b8b      	ldr	r3, [pc, #556]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ed      	beq.n	8002b8c <HAL_RCC_OscConfig+0x53c>
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7ff fa35 	bl	8002020 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7ff fa31 	bl	8002020 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e113      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ed      	bne.n	8002bba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bde:	7ffb      	ldrb	r3, [r7, #31]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	4a79      	ldr	r2, [pc, #484]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80fe 	beq.w	8002df6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	f040 80d0 	bne.w	8002da4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c04:	4b72      	ldr	r3, [pc, #456]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d130      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d127      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c44:	2a07      	cmp	r2, #7
 8002c46:	bf14      	ite	ne
 8002c48:	2201      	movne	r2, #1
 8002c4a:	2200      	moveq	r2, #0
 8002c4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d113      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d06e      	beq.n	8002d58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	d069      	beq.n	8002d54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c80:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c8c:	4b50      	ldr	r3, [pc, #320]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0ad      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca8:	f7ff f9ba 	bl	8002020 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7ff f9b6 	bl	8002020 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e09a      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc2:	4b43      	ldr	r3, [pc, #268]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cce:	4b40      	ldr	r3, [pc, #256]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	4b40      	ldr	r3, [pc, #256]	@ (8002dd4 <HAL_RCC_OscConfig+0x784>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ce8:	0212      	lsls	r2, r2, #8
 8002cea:	4311      	orrs	r1, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cf0:	0852      	lsrs	r2, r2, #1
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	0552      	lsls	r2, r2, #21
 8002cf6:	4311      	orrs	r1, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cfc:	0852      	lsrs	r2, r2, #1
 8002cfe:	3a01      	subs	r2, #1
 8002d00:	0652      	lsls	r2, r2, #25
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d08:	0912      	lsrs	r2, r2, #4
 8002d0a:	0452      	lsls	r2, r2, #17
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	4930      	ldr	r1, [pc, #192]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d14:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d2c:	f7ff f978 	bl	8002020 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7ff f974 	bl	8002020 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e058      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d52:	e050      	b.n	8002df6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e04f      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d148      	bne.n	8002df6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d64:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d7c:	f7ff f950 	bl	8002020 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff f94c 	bl	8002020 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e030      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x734>
 8002da2:	e028      	b.n	8002df6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d023      	beq.n	8002df2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7ff f933 	bl	8002020 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbc:	e00c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7ff f92f 	bl	8002020 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d905      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e013      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <HAL_RCC_OscConfig+0x7b0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ec      	bne.n	8002dbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_OscConfig+0x7b0>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4905      	ldr	r1, [pc, #20]	@ (8002e00 <HAL_RCC_OscConfig+0x7b0>)
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_OscConfig+0x7b4>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	60cb      	str	r3, [r1, #12]
 8002df0:	e001      	b.n	8002df6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	feeefffc 	.word	0xfeeefffc

08002e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0e7      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b72      	ldr	r3, [pc, #456]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4970      	ldr	r1, [pc, #448]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0cf      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b66      	ldr	r3, [pc, #408]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d908      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b63      	ldr	r3, [pc, #396]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4960      	ldr	r1, [pc, #384]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d04c      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d121      	bne.n	8002ede <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0a6      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea6:	4b54      	ldr	r3, [pc, #336]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d115      	bne.n	8002ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e09a      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e08e      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ece:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e086      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ede:	4b46      	ldr	r3, [pc, #280]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 0203 	bic.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4943      	ldr	r1, [pc, #268]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef0:	f7ff f896 	bl	8002020 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7ff f892 	bl	8002020 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e06e      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 020c 	and.w	r2, r3, #12
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1eb      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d208      	bcs.n	8002f4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	492b      	ldr	r1, [pc, #172]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4e:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d210      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 0207 	bic.w	r2, r3, #7
 8002f64:	4923      	ldr	r1, [pc, #140]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e036      	b.n	8002fec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4918      	ldr	r1, [pc, #96]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d009      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa8:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4910      	ldr	r1, [pc, #64]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fbc:	f000 f824 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	490b      	ldr	r1, [pc, #44]	@ (8002ffc <HAL_RCC_ClockConfig+0x1f4>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002fda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <HAL_RCC_ClockConfig+0x1fc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe ffcd 	bl	8001f80 <HAL_InitTick>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fea:	7afb      	ldrb	r3, [r7, #11]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08009234 	.word	0x08009234
 8003000:	20000000 	.word	0x20000000
 8003004:	20000008 	.word	0x20000008

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	@ 0x24
 800300c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003016:	4b3e      	ldr	r3, [pc, #248]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003020:	4b3b      	ldr	r3, [pc, #236]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x34>
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d121      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d11e      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800303c:	4b34      	ldr	r3, [pc, #208]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003048:	4b31      	ldr	r3, [pc, #196]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 800304a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e005      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003058:	4b2d      	ldr	r3, [pc, #180]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003064:	4a2b      	ldr	r2, [pc, #172]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10d      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d102      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003080:	4b25      	ldr	r3, [pc, #148]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x110>)
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e004      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d101      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800308c:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_RCC_GetSysClockFreq+0x114>)
 800308e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d134      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003096:	4b1e      	ldr	r3, [pc, #120]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0xa6>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d003      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0xac>
 80030ac:	e005      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x110>)
 80030b0:	617b      	str	r3, [r7, #20]
      break;
 80030b2:	e005      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030b4:	4b19      	ldr	r3, [pc, #100]	@ (800311c <HAL_RCC_GetSysClockFreq+0x114>)
 80030b6:	617b      	str	r3, [r7, #20]
      break;
 80030b8:	e002      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	617b      	str	r3, [r7, #20]
      break;
 80030be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	3301      	adds	r3, #1
 80030cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	fb03 f202 	mul.w	r2, r3, r2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	0e5b      	lsrs	r3, r3, #25
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	3301      	adds	r3, #1
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003100:	69bb      	ldr	r3, [r7, #24]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	@ 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	0800924c 	.word	0x0800924c
 8003118:	00f42400 	.word	0x00f42400
 800311c:	007a1200 	.word	0x007a1200

08003120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003124:	4b03      	ldr	r3, [pc, #12]	@ (8003134 <HAL_RCC_GetHCLKFreq+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000000 	.word	0x20000000

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800313c:	f7ff fff0 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4904      	ldr	r1, [pc, #16]	@ (8003160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08009244 	.word	0x08009244

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003168:	f7ff ffda 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4904      	ldr	r1, [pc, #16]	@ (800318c <HAL_RCC_GetPCLK2Freq+0x28>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	08009244 	.word	0x08009244

08003190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800319c:	4b2a      	ldr	r3, [pc, #168]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031a8:	f7ff f9ee 	bl	8002588 <HAL_PWREx_GetVoltageRange>
 80031ac:	6178      	str	r0, [r7, #20]
 80031ae:	e014      	b.n	80031da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	4a24      	ldr	r2, [pc, #144]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80031bc:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031c8:	f7ff f9de 	bl	8002588 <HAL_PWREx_GetVoltageRange>
 80031cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e0:	d10b      	bne.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b80      	cmp	r3, #128	@ 0x80
 80031e6:	d919      	bls.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80031ec:	d902      	bls.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ee:	2302      	movs	r3, #2
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e013      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f4:	2301      	movs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e010      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b80      	cmp	r3, #128	@ 0x80
 80031fe:	d902      	bls.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003200:	2303      	movs	r3, #3
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e00a      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b80      	cmp	r3, #128	@ 0x80
 800320a:	d102      	bne.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800320c:	2302      	movs	r3, #2
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e004      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b70      	cmp	r3, #112	@ 0x70
 8003216:	d101      	bne.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 0207 	bic.w	r2, r3, #7
 8003224:	4909      	ldr	r1, [pc, #36]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800322c:	4b07      	ldr	r3, [pc, #28]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	40022000 	.word	0x40022000

08003250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003258:	2300      	movs	r3, #0
 800325a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800325c:	2300      	movs	r3, #0
 800325e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003268:	2b00      	cmp	r3, #0
 800326a:	d041      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003270:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003274:	d02a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003276:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800327a:	d824      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003280:	d008      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003282:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003286:	d81e      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003290:	d010      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003292:	e018      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003294:	4b86      	ldr	r3, [pc, #536]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a85      	ldr	r2, [pc, #532]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032a0:	e015      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fabb 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b2:	e00c      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3320      	adds	r3, #32
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fba6 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d4:	4b76      	ldr	r3, [pc, #472]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e2:	4973      	ldr	r1, [pc, #460]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d041      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003300:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003304:	d02a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003306:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800330a:	d824      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800330c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003316:	d81e      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800331c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003320:	d010      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003322:	e018      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003324:	4b62      	ldr	r3, [pc, #392]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a61      	ldr	r2, [pc, #388]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003330:	e015      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa73 	bl	8003824 <RCCEx_PLLSAI1_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003342:	e00c      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3320      	adds	r3, #32
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb5e 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003354:	e003      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	74fb      	strb	r3, [r7, #19]
      break;
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800335c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003364:	4b52      	ldr	r3, [pc, #328]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003372:	494f      	ldr	r1, [pc, #316]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800337a:	e001      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a0 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b41      	ldr	r3, [pc, #260]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	4a40      	ldr	r2, [pc, #256]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b4:	4b3e      	ldr	r3, [pc, #248]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c4:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3a      	ldr	r2, [pc, #232]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d0:	f7fe fe26 	bl	8002020 <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d6:	e009      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe fe22 	bl	8002020 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d902      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	74fb      	strb	r3, [r7, #19]
        break;
 80033ea:	e005      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ec:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d15c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033fe:	4b2c      	ldr	r3, [pc, #176]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01f      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	429a      	cmp	r2, r3
 800341a:	d019      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800341c:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003428:	4b21      	ldr	r3, [pc, #132]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342e:	4a20      	ldr	r2, [pc, #128]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003438:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003448:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fde1 	bl	8002020 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003460:	e00b      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe fddd 	bl	8002020 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d902      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	74fb      	strb	r3, [r7, #19]
            break;
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ec      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348e:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800349e:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034a6:	e009      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
 80034ac:	e006      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034bc:	7c7b      	ldrb	r3, [r7, #17]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b9e      	ldr	r3, [pc, #632]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	4a9d      	ldr	r2, [pc, #628]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034da:	4b98      	ldr	r3, [pc, #608]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e0:	f023 0203 	bic.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	4994      	ldr	r1, [pc, #592]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fc:	4b8f      	ldr	r3, [pc, #572]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003502:	f023 020c 	bic.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350a:	498c      	ldr	r1, [pc, #560]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800351e:	4b87      	ldr	r3, [pc, #540]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003524:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	4983      	ldr	r1, [pc, #524]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003540:	4b7e      	ldr	r3, [pc, #504]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	497b      	ldr	r1, [pc, #492]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003562:	4b76      	ldr	r3, [pc, #472]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003570:	4972      	ldr	r1, [pc, #456]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003584:	4b6d      	ldr	r3, [pc, #436]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	496a      	ldr	r1, [pc, #424]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a6:	4b65      	ldr	r3, [pc, #404]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	4961      	ldr	r1, [pc, #388]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035c8:	4b5c      	ldr	r3, [pc, #368]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d6:	4959      	ldr	r1, [pc, #356]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ea:	4b54      	ldr	r3, [pc, #336]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	4950      	ldr	r1, [pc, #320]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360c:	4b4b      	ldr	r3, [pc, #300]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	4948      	ldr	r1, [pc, #288]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362e:	4b43      	ldr	r3, [pc, #268]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363c:	493f      	ldr	r1, [pc, #252]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d028      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003650:	4b3a      	ldr	r3, [pc, #232]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365e:	4937      	ldr	r1, [pc, #220]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800366e:	d106      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b32      	ldr	r3, [pc, #200]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a31      	ldr	r2, [pc, #196]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
 800367c:	e011      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003682:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003686:	d10c      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f8c8 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d028      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ae:	4b23      	ldr	r3, [pc, #140]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036bc:	491f      	ldr	r1, [pc, #124]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036cc:	d106      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ce:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a1a      	ldr	r2, [pc, #104]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036d8:	60d3      	str	r3, [r2, #12]
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f899 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371a:	4908      	ldr	r1, [pc, #32]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372a:	d109      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a02      	ldr	r2, [pc, #8]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
 8003738:	e014      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f867 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02f      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003770:	4b2b      	ldr	r3, [pc, #172]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800377e:	4928      	ldr	r1, [pc, #160]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378e:	d10d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	2102      	movs	r1, #2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f844 	bl	8003824 <RCCEx_PLLSAI1_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d014      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	74bb      	strb	r3, [r7, #18]
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3320      	adds	r3, #32
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f925 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037dc:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ea:	490d      	ldr	r1, [pc, #52]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380e:	4904      	ldr	r1, [pc, #16]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003816:	7cbb      	ldrb	r3, [r7, #18]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000

08003824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003832:	4b75      	ldr	r3, [pc, #468]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800383e:	4b72      	ldr	r3, [pc, #456]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d10d      	bne.n	800386a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
       ||
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003856:	4b6c      	ldr	r3, [pc, #432]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
       ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d047      	beq.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e044      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d018      	beq.n	80038aa <RCCEx_PLLSAI1_Config+0x86>
 8003878:	2b03      	cmp	r3, #3
 800387a:	d825      	bhi.n	80038c8 <RCCEx_PLLSAI1_Config+0xa4>
 800387c:	2b01      	cmp	r3, #1
 800387e:	d002      	beq.n	8003886 <RCCEx_PLLSAI1_Config+0x62>
 8003880:	2b02      	cmp	r3, #2
 8003882:	d009      	beq.n	8003898 <RCCEx_PLLSAI1_Config+0x74>
 8003884:	e020      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003886:	4b60      	ldr	r3, [pc, #384]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11d      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003896:	e01a      	b.n	80038ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003898:	4b5b      	ldr	r3, [pc, #364]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e013      	b.n	80038d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038aa:	4b57      	ldr	r3, [pc, #348]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038b6:	4b54      	ldr	r3, [pc, #336]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038c6:	e006      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      break;
 80038cc:	e004      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ce:	bf00      	nop
 80038d0:	e002      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038de:	4b4a      	ldr	r3, [pc, #296]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	430b      	orrs	r3, r1
 80038f4:	4944      	ldr	r1, [pc, #272]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d17d      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003900:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a40      	ldr	r2, [pc, #256]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800390a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fe fb88 	bl	8002020 <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003912:	e009      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003914:	f7fe fb84 	bl	8002020 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
        break;
 8003926:	e005      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003928:	4b37      	ldr	r3, [pc, #220]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ef      	bne.n	8003914 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d160      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d111      	bne.n	8003964 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003940:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	0211      	lsls	r1, r2, #8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	0912      	lsrs	r2, r2, #4
 8003958:	0452      	lsls	r2, r2, #17
 800395a:	430a      	orrs	r2, r1
 800395c:	492a      	ldr	r1, [pc, #168]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	610b      	str	r3, [r1, #16]
 8003962:	e027      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d112      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800396a:	4b27      	ldr	r3, [pc, #156]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003972:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	0211      	lsls	r1, r2, #8
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6912      	ldr	r2, [r2, #16]
 8003980:	0852      	lsrs	r2, r2, #1
 8003982:	3a01      	subs	r2, #1
 8003984:	0552      	lsls	r2, r2, #21
 8003986:	430a      	orrs	r2, r1
 8003988:	491f      	ldr	r1, [pc, #124]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	610b      	str	r3, [r1, #16]
 800398e:	e011      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003990:	4b1d      	ldr	r3, [pc, #116]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003998:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6892      	ldr	r2, [r2, #8]
 80039a0:	0211      	lsls	r1, r2, #8
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6952      	ldr	r2, [r2, #20]
 80039a6:	0852      	lsrs	r2, r2, #1
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0652      	lsls	r2, r2, #25
 80039ac:	430a      	orrs	r2, r1
 80039ae:	4916      	ldr	r1, [pc, #88]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039b4:	4b14      	ldr	r3, [pc, #80]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a13      	ldr	r2, [pc, #76]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe fb2e 	bl	8002020 <HAL_GetTick>
 80039c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039c6:	e009      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c8:	f7fe fb2a 	bl	8002020 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d902      	bls.n	80039dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	73fb      	strb	r3, [r7, #15]
          break;
 80039da:	e005      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ef      	beq.n	80039c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039ee:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	4904      	ldr	r1, [pc, #16]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a26:	4b67      	ldr	r3, [pc, #412]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0203 	and.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10d      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a3e:	4b61      	ldr	r3, [pc, #388]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d047      	beq.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
 8003a56:	e044      	b.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d018      	beq.n	8003a92 <RCCEx_PLLSAI2_Config+0x86>
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d825      	bhi.n	8003ab0 <RCCEx_PLLSAI2_Config+0xa4>
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d002      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0x62>
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d009      	beq.n	8003a80 <RCCEx_PLLSAI2_Config+0x74>
 8003a6c:	e020      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a6e:	4b55      	ldr	r3, [pc, #340]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11d      	bne.n	8003ab6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7e:	e01a      	b.n	8003ab6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a80:	4b50      	ldr	r3, [pc, #320]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a90:	e013      	b.n	8003aba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a92:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a9e:	4b49      	ldr	r3, [pc, #292]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aae:	e006      	b.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e004      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003abe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10d      	bne.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	430b      	orrs	r3, r1
 8003adc:	4939      	ldr	r1, [pc, #228]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d167      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ae8:	4b36      	ldr	r3, [pc, #216]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a35      	ldr	r2, [pc, #212]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fe fa94 	bl	8002020 <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003afa:	e009      	b.n	8003b10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003afc:	f7fe fa90 	bl	8002020 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b0e:	e005      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b10:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ef      	bne.n	8003afc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d14a      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d111      	bne.n	8003b4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b28:	4b26      	ldr	r3, [pc, #152]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6892      	ldr	r2, [r2, #8]
 8003b38:	0211      	lsls	r1, r2, #8
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	0912      	lsrs	r2, r2, #4
 8003b40:	0452      	lsls	r2, r2, #17
 8003b42:	430a      	orrs	r2, r1
 8003b44:	491f      	ldr	r1, [pc, #124]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	614b      	str	r3, [r1, #20]
 8003b4a:	e011      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	0211      	lsls	r1, r2, #8
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6912      	ldr	r2, [r2, #16]
 8003b62:	0852      	lsrs	r2, r2, #1
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0652      	lsls	r2, r2, #25
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	4916      	ldr	r1, [pc, #88]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b70:	4b14      	ldr	r3, [pc, #80]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a13      	ldr	r2, [pc, #76]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fa50 	bl	8002020 <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b82:	e009      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b84:	f7fe fa4c 	bl	8002020 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	73fb      	strb	r3, [r7, #15]
          break;
 8003b96:	e005      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b98:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003baa:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	4904      	ldr	r1, [pc, #16]	@ (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d079      	beq.n	8003cce <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fd fb24 	bl	800123c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d058      	beq.n	8003cbc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	22ca      	movs	r2, #202	@ 0xca
 8003c10:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2253      	movs	r2, #83	@ 0x53
 8003c18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f9a4 	bl	8003f68 <RTC_EnterInitMode>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d127      	bne.n	8003c7a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c3c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68d2      	ldr	r2, [r2, #12]
 8003c64:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6919      	ldr	r1, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	041a      	lsls	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9a8 	bl	8003fd0 <RTC_ExitInitMode>
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0203 	bic.w	r2, r2, #3
 8003c98:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	22ff      	movs	r2, #255	@ 0xff
 8003cb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cba:	e001      	b.n	8003cc0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_RTC_SetTime+0x1a>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e08b      	b.n	8003e0a <HAL_RTC_SetTime+0x132>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	22ca      	movs	r2, #202	@ 0xca
 8003d08:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2253      	movs	r2, #83	@ 0x53
 8003d10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f928 	bl	8003f68 <RTC_EnterInitMode>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d163      	bne.n	8003dea <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d126      	bne.n	8003d76 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f983 	bl	800404c <RTC_ByteToBcd2>
 8003d46:	4603      	mov	r3, r0
 8003d48:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	785b      	ldrb	r3, [r3, #1]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f97c 	bl	800404c <RTC_ByteToBcd2>
 8003d54:	4603      	mov	r3, r0
 8003d56:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d58:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	789b      	ldrb	r3, [r3, #2]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f974 	bl	800404c <RTC_ByteToBcd2>
 8003d64:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d66:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	78db      	ldrb	r3, [r3, #3]
 8003d6e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e018      	b.n	8003da8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2200      	movs	r2, #0
 8003d88:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d96:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d9c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	78db      	ldrb	r3, [r3, #3]
 8003da2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003db2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003db6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6899      	ldr	r1, [r3, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f8f5 	bl	8003fd0 <RTC_ExitInitMode>
 8003de6:	4603      	mov	r3, r0
 8003de8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	22ff      	movs	r2, #255	@ 0xff
 8003df0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d103      	bne.n	8003e00 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}

08003e12 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e12:	b590      	push	{r4, r7, lr}
 8003e14:	b087      	sub	sp, #28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_RTC_SetDate+0x1a>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e075      	b.n	8003f18 <HAL_RTC_SetDate+0x106>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10e      	bne.n	8003e60 <HAL_RTC_SetDate+0x4e>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d008      	beq.n	8003e60 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	f023 0310 	bic.w	r3, r3, #16
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	330a      	adds	r3, #10
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d11c      	bne.n	8003ea0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	78db      	ldrb	r3, [r3, #3]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f8ee 	bl	800404c <RTC_ByteToBcd2>
 8003e70:	4603      	mov	r3, r0
 8003e72:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 f8e7 	bl	800404c <RTC_ByteToBcd2>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e82:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	789b      	ldrb	r3, [r3, #2]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f8df 	bl	800404c <RTC_ByteToBcd2>
 8003e8e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e90:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e00e      	b.n	8003ebe <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	78db      	ldrb	r3, [r3, #3]
 8003ea4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003eac:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003eb2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	22ca      	movs	r2, #202	@ 0xca
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f84a 	bl	8003f68 <RTC_EnterInitMode>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ee8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003eec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f86e 	bl	8003fd0 <RTC_ExitInitMode>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	22ff      	movs	r2, #255	@ 0xff
 8003efe:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd90      	pop	{r4, r7, pc}

08003f20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f64 <HAL_RTC_WaitForSynchro+0x44>)
 8003f2e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003f30:	f7fe f876 	bl	8002020 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f36:	e009      	b.n	8003f4c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f38:	f7fe f872 	bl	8002020 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f46:	d901      	bls.n	8003f4c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e007      	b.n	8003f5c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ee      	beq.n	8003f38 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	0003ff5f 	.word	0x0003ff5f

08003f68 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d120      	bne.n	8003fc4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f8c:	f7fe f848 	bl	8002020 <HAL_GetTick>
 8003f90:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f92:	e00d      	b.n	8003fb0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f94:	f7fe f844 	bl	8002020 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fa2:	d905      	bls.n	8003fb0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2203      	movs	r2, #3
 8003fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <RTC_EnterInitMode+0x5c>
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d1e7      	bne.n	8003f94 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <RTC_ExitInitMode+0x78>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <RTC_ExitInitMode+0x78>)
 8003fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003fe8:	4b17      	ldr	r3, [pc, #92]	@ (8004048 <RTC_ExitInitMode+0x78>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10c      	bne.n	800400e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff93 	bl	8003f20 <HAL_RTC_WaitForSynchro>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01e      	beq.n	800403e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2203      	movs	r2, #3
 8004004:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e017      	b.n	800403e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800400e:	4b0e      	ldr	r3, [pc, #56]	@ (8004048 <RTC_ExitInitMode+0x78>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4a0d      	ldr	r2, [pc, #52]	@ (8004048 <RTC_ExitInitMode+0x78>)
 8004014:	f023 0320 	bic.w	r3, r3, #32
 8004018:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff ff80 	bl	8003f20 <HAL_RTC_WaitForSynchro>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2203      	movs	r2, #3
 800402a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004032:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <RTC_ExitInitMode+0x78>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4a04      	ldr	r2, [pc, #16]	@ (8004048 <RTC_ExitInitMode+0x78>)
 8004038:	f043 0320 	orr.w	r3, r3, #32
 800403c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40002800 	.word	0x40002800

0800404c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800405e:	e005      	b.n	800406c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3301      	adds	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004066:	7afb      	ldrb	r3, [r7, #11]
 8004068:	3b0a      	subs	r3, #10
 800406a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800406c:	7afb      	ldrb	r3, [r7, #11]
 800406e:	2b09      	cmp	r3, #9
 8004070:	d8f6      	bhi.n	8004060 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	b2da      	uxtb	r2, r3
 800407a:	7afb      	ldrb	r3, [r7, #11]
 800407c:	4313      	orrs	r3, r2
 800407e:	b2db      	uxtb	r3, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e095      	b.n	80041ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d108      	bne.n	80040b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ae:	d009      	beq.n	80040c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	61da      	str	r2, [r3, #28]
 80040b6:	e005      	b.n	80040c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd f8de 	bl	80012a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004104:	d902      	bls.n	800410c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	e002      	b.n	8004112 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800410c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004110:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800411a:	d007      	beq.n	800412c <HAL_SPI_Init+0xa0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004124:	d002      	beq.n	800412c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	ea42 0103 	orr.w	r1, r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	f003 0204 	and.w	r2, r3, #4
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80041a8:	ea42 0103 	orr.w	r1, r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b088      	sub	sp, #32
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_SPI_Transmit+0x22>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e15f      	b.n	80044b4 <HAL_SPI_Transmit+0x2e2>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041fc:	f7fd ff10 	bl	8002020 <HAL_GetTick>
 8004200:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d002      	beq.n	8004218 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004212:	2302      	movs	r3, #2
 8004214:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004216:	e148      	b.n	80044aa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_SPI_Transmit+0x52>
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004228:	e13f      	b.n	80044aa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2203      	movs	r2, #3
 800422e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	88fa      	ldrh	r2, [r7, #6]
 8004242:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004274:	d10f      	bne.n	8004296 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d007      	beq.n	80042b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042bc:	d94f      	bls.n	800435e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_SPI_Transmit+0xfa>
 80042c6:	8afb      	ldrh	r3, [r7, #22]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d142      	bne.n	8004352 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	881a      	ldrh	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	1c9a      	adds	r2, r3, #2
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042f0:	e02f      	b.n	8004352 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d112      	bne.n	8004326 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	881a      	ldrh	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004310:	1c9a      	adds	r2, r3, #2
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004324:	e015      	b.n	8004352 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004326:	f7fd fe7b 	bl	8002020 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d803      	bhi.n	800433e <HAL_SPI_Transmit+0x16c>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d102      	bne.n	8004344 <HAL_SPI_Transmit+0x172>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004350:	e0ab      	b.n	80044aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ca      	bne.n	80042f2 <HAL_SPI_Transmit+0x120>
 800435c:	e080      	b.n	8004460 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_Transmit+0x19a>
 8004366:	8afb      	ldrh	r3, [r7, #22]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d174      	bne.n	8004456 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d912      	bls.n	800439c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437a:	881a      	ldrh	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	1c9a      	adds	r2, r3, #2
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b02      	subs	r3, #2
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800439a:	e05c      	b.n	8004456 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	7812      	ldrb	r2, [r2, #0]
 80043a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043c2:	e048      	b.n	8004456 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d12b      	bne.n	800442a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d912      	bls.n	8004402 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b02      	subs	r3, #2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004400:	e029      	b.n	8004456 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004428:	e015      	b.n	8004456 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800442a:	f7fd fdf9 	bl	8002020 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d803      	bhi.n	8004442 <HAL_SPI_Transmit+0x270>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d102      	bne.n	8004448 <HAL_SPI_Transmit+0x276>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004454:	e029      	b.n	80044aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1b1      	bne.n	80043c4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fb77 	bl	8004b58 <SPI_EndRxTxTransaction>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e003      	b.n	80044aa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80044b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	@ 0x28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044ca:	2301      	movs	r3, #1
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_SPI_TransmitReceive+0x26>
 80044de:	2302      	movs	r3, #2
 80044e0:	e20a      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x43c>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ea:	f7fd fd99 	bl	8002020 <HAL_GetTick>
 80044ee:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044f6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044fe:	887b      	ldrh	r3, [r7, #2]
 8004500:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004502:	887b      	ldrh	r3, [r7, #2]
 8004504:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004506:	7efb      	ldrb	r3, [r7, #27]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d00e      	beq.n	800452a <HAL_SPI_TransmitReceive+0x6e>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004512:	d106      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x66>
 800451c:	7efb      	ldrb	r3, [r7, #27]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d003      	beq.n	800452a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004522:	2302      	movs	r3, #2
 8004524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004528:	e1e0      	b.n	80048ec <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_SPI_TransmitReceive+0x80>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_SPI_TransmitReceive+0x80>
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004542:	e1d3      	b.n	80048ec <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b04      	cmp	r3, #4
 800454e:	d003      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2205      	movs	r2, #5
 8004554:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	887a      	ldrh	r2, [r7, #2]
 800457e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	887a      	ldrh	r2, [r7, #2]
 8004584:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800459a:	d802      	bhi.n	80045a2 <HAL_SPI_TransmitReceive+0xe6>
 800459c:	8a3b      	ldrh	r3, [r7, #16]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d908      	bls.n	80045b4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	e007      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d007      	beq.n	80045e2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045ea:	f240 8081 	bls.w	80046f0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x140>
 80045f6:	8a7b      	ldrh	r3, [r7, #18]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d16d      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	881a      	ldrh	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460c:	1c9a      	adds	r2, r3, #2
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004620:	e05a      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b02      	cmp	r3, #2
 800462e:	d11b      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x1ac>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d016      	beq.n	8004668 <HAL_SPI_TransmitReceive+0x1ac>
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	2b01      	cmp	r3, #1
 800463e:	d113      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	881a      	ldrh	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	1c9a      	adds	r2, r3, #2
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d11c      	bne.n	80046b0 <HAL_SPI_TransmitReceive+0x1f4>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	b292      	uxth	r2, r2
 800468e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	1c9a      	adds	r2, r3, #2
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046ac:	2301      	movs	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046b0:	f7fd fcb6 	bl	8002020 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046bc:	429a      	cmp	r2, r3
 80046be:	d80b      	bhi.n	80046d8 <HAL_SPI_TransmitReceive+0x21c>
 80046c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d007      	beq.n	80046d8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80046d6:	e109      	b.n	80048ec <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d19f      	bne.n	8004622 <HAL_SPI_TransmitReceive+0x166>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d199      	bne.n	8004622 <HAL_SPI_TransmitReceive+0x166>
 80046ee:	e0e3      	b.n	80048b8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x244>
 80046f8:	8a7b      	ldrh	r3, [r7, #18]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	f040 80cf 	bne.w	800489e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d912      	bls.n	8004730 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470e:	881a      	ldrh	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b02      	subs	r3, #2
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800472e:	e0b6      	b.n	800489e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004756:	e0a2      	b.n	800489e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d134      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x314>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02f      	beq.n	80047d0 <HAL_SPI_TransmitReceive+0x314>
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	2b01      	cmp	r3, #1
 8004774:	d12c      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d912      	bls.n	80047a6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004784:	881a      	ldrh	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	1c9a      	adds	r2, r3, #2
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b02      	subs	r3, #2
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047a4:	e012      	b.n	80047cc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d148      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x3b4>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d042      	beq.n	8004870 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d923      	bls.n	800483e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	b292      	uxth	r2, r2
 8004802:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b02      	subs	r3, #2
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d81f      	bhi.n	800486c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800483a:	605a      	str	r2, [r3, #4]
 800483c:	e016      	b.n	800486c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f103 020c 	add.w	r2, r3, #12
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800486c:	2301      	movs	r3, #1
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004870:	f7fd fbd6 	bl	8002020 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800487c:	429a      	cmp	r2, r3
 800487e:	d803      	bhi.n	8004888 <HAL_SPI_TransmitReceive+0x3cc>
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d102      	bne.n	800488e <HAL_SPI_TransmitReceive+0x3d2>
 8004888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800489c:	e026      	b.n	80048ec <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f47f af57 	bne.w	8004758 <HAL_SPI_TransmitReceive+0x29c>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f47f af50 	bne.w	8004758 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f94b 	bl	8004b58 <SPI_EndRxTxTransaction>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e003      	b.n	80048ec <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80048f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3728      	adds	r7, #40	@ 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800490e:	b2db      	uxtb	r3, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800492c:	f7fd fb78 	bl	8002020 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	4413      	add	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800493c:	f7fd fb70 	bl	8002020 <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004942:	4b39      	ldr	r3, [pc, #228]	@ (8004a28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	015b      	lsls	r3, r3, #5
 8004948:	0d1b      	lsrs	r3, r3, #20
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004952:	e054      	b.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d050      	beq.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800495c:	f7fd fb60 	bl	8002020 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	429a      	cmp	r2, r3
 800496a:	d902      	bls.n	8004972 <SPI_WaitFlagStateUntilTimeout+0x56>
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d13d      	bne.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800498a:	d111      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004994:	d004      	beq.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499e:	d107      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b8:	d10f      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e017      	b.n	8004a1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d19b      	bne.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000000 	.word	0x20000000

08004a2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	@ 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a3e:	f7fd faef 	bl	8002020 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004a4e:	f7fd fae7 	bl	8002020 <HAL_GetTick>
 8004a52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	00da      	lsls	r2, r3, #3
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	0d1b      	lsrs	r3, r3, #20
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a74:	e060      	b.n	8004b38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a7c:	d107      	bne.n	8004a8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d050      	beq.n	8004b38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a96:	f7fd fac3 	bl	8002020 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d902      	bls.n	8004aac <SPI_WaitFifoStateUntilTimeout+0x80>
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d13d      	bne.n	8004b28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004aba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ac4:	d111      	bne.n	8004aea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ace:	d004      	beq.n	8004ada <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad8:	d107      	bne.n	8004aea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ae8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af2:	d10f      	bne.n	8004b14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e010      	b.n	8004b4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d196      	bne.n	8004a76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3728      	adds	r7, #40	@ 0x28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000000 	.word	0x20000000

08004b58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff ff5b 	bl	8004a2c <SPI_WaitFifoStateUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e027      	b.n	8004bdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2180      	movs	r1, #128	@ 0x80
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fec0 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e014      	b.n	8004bdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7ff ff34 	bl	8004a2c <SPI_WaitFifoStateUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e000      	b.n	8004bdc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e040      	b.n	8004c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc fbac 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2224      	movs	r2, #36	@ 0x24
 8004c10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fb6a 	bl	8005304 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8af 	bl	8004d94 <UART_SetConfig>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e01b      	b.n	8004c78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fbe9 	bl	8005448 <UART_CheckIdleState>
 8004c76:	4603      	mov	r3, r0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	@ 0x28
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d177      	bne.n	8004d88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Transmit+0x24>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e070      	b.n	8004d8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2221      	movs	r2, #33	@ 0x21
 8004cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cb6:	f7fd f9b3 	bl	8002020 <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd4:	d108      	bne.n	8004ce8 <HAL_UART_Transmit+0x68>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e003      	b.n	8004cf0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cf0:	e02f      	b.n	8004d52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2180      	movs	r1, #128	@ 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fc4b 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e03b      	b.n	8004d8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	881a      	ldrh	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d24:	b292      	uxth	r2, r2
 8004d26:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e007      	b.n	8004d40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1c9      	bne.n	8004cf2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2140      	movs	r1, #64	@ 0x40
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fc15 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e005      	b.n	8004d8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e000      	b.n	8004d8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d98:	b08a      	sub	sp, #40	@ 0x28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4ba4      	ldr	r3, [pc, #656]	@ (8005054 <UART_SetConfig+0x2c0>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a99      	ldr	r2, [pc, #612]	@ (8005058 <UART_SetConfig+0x2c4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a90      	ldr	r2, [pc, #576]	@ (800505c <UART_SetConfig+0x2c8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d126      	bne.n	8004e6c <UART_SetConfig+0xd8>
 8004e1e:	4b90      	ldr	r3, [pc, #576]	@ (8005060 <UART_SetConfig+0x2cc>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d81b      	bhi.n	8004e64 <UART_SetConfig+0xd0>
 8004e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <UART_SetConfig+0xa0>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e55 	.word	0x08004e55
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4a:	e116      	b.n	800507a <UART_SetConfig+0x2e6>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e52:	e112      	b.n	800507a <UART_SetConfig+0x2e6>
 8004e54:	2304      	movs	r3, #4
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5a:	e10e      	b.n	800507a <UART_SetConfig+0x2e6>
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e62:	e10a      	b.n	800507a <UART_SetConfig+0x2e6>
 8004e64:	2310      	movs	r3, #16
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	e106      	b.n	800507a <UART_SetConfig+0x2e6>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a7c      	ldr	r2, [pc, #496]	@ (8005064 <UART_SetConfig+0x2d0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d138      	bne.n	8004ee8 <UART_SetConfig+0x154>
 8004e76:	4b7a      	ldr	r3, [pc, #488]	@ (8005060 <UART_SetConfig+0x2cc>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	d82d      	bhi.n	8004ee0 <UART_SetConfig+0x14c>
 8004e84:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <UART_SetConfig+0xf8>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004ec1 	.word	0x08004ec1
 8004e90:	08004ee1 	.word	0x08004ee1
 8004e94:	08004ee1 	.word	0x08004ee1
 8004e98:	08004ee1 	.word	0x08004ee1
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	08004ee1 	.word	0x08004ee1
 8004ea4:	08004ee1 	.word	0x08004ee1
 8004ea8:	08004ee1 	.word	0x08004ee1
 8004eac:	08004ec9 	.word	0x08004ec9
 8004eb0:	08004ee1 	.word	0x08004ee1
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ed9 	.word	0x08004ed9
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec6:	e0d8      	b.n	800507a <UART_SetConfig+0x2e6>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ece:	e0d4      	b.n	800507a <UART_SetConfig+0x2e6>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed6:	e0d0      	b.n	800507a <UART_SetConfig+0x2e6>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ede:	e0cc      	b.n	800507a <UART_SetConfig+0x2e6>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee6:	e0c8      	b.n	800507a <UART_SetConfig+0x2e6>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a5e      	ldr	r2, [pc, #376]	@ (8005068 <UART_SetConfig+0x2d4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d125      	bne.n	8004f3e <UART_SetConfig+0x1aa>
 8004ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8005060 <UART_SetConfig+0x2cc>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004efc:	2b30      	cmp	r3, #48	@ 0x30
 8004efe:	d016      	beq.n	8004f2e <UART_SetConfig+0x19a>
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d818      	bhi.n	8004f36 <UART_SetConfig+0x1a2>
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d00a      	beq.n	8004f1e <UART_SetConfig+0x18a>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d814      	bhi.n	8004f36 <UART_SetConfig+0x1a2>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <UART_SetConfig+0x182>
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d008      	beq.n	8004f26 <UART_SetConfig+0x192>
 8004f14:	e00f      	b.n	8004f36 <UART_SetConfig+0x1a2>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1c:	e0ad      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f24:	e0a9      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f26:	2304      	movs	r3, #4
 8004f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2c:	e0a5      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f34:	e0a1      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f36:	2310      	movs	r3, #16
 8004f38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3c:	e09d      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a4a      	ldr	r2, [pc, #296]	@ (800506c <UART_SetConfig+0x2d8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d125      	bne.n	8004f94 <UART_SetConfig+0x200>
 8004f48:	4b45      	ldr	r3, [pc, #276]	@ (8005060 <UART_SetConfig+0x2cc>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f54:	d016      	beq.n	8004f84 <UART_SetConfig+0x1f0>
 8004f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f58:	d818      	bhi.n	8004f8c <UART_SetConfig+0x1f8>
 8004f5a:	2b80      	cmp	r3, #128	@ 0x80
 8004f5c:	d00a      	beq.n	8004f74 <UART_SetConfig+0x1e0>
 8004f5e:	2b80      	cmp	r3, #128	@ 0x80
 8004f60:	d814      	bhi.n	8004f8c <UART_SetConfig+0x1f8>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <UART_SetConfig+0x1d8>
 8004f66:	2b40      	cmp	r3, #64	@ 0x40
 8004f68:	d008      	beq.n	8004f7c <UART_SetConfig+0x1e8>
 8004f6a:	e00f      	b.n	8004f8c <UART_SetConfig+0x1f8>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f72:	e082      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f74:	2302      	movs	r3, #2
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7a:	e07e      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f82:	e07a      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8a:	e076      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f92:	e072      	b.n	800507a <UART_SetConfig+0x2e6>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a35      	ldr	r2, [pc, #212]	@ (8005070 <UART_SetConfig+0x2dc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d12a      	bne.n	8004ff4 <UART_SetConfig+0x260>
 8004f9e:	4b30      	ldr	r3, [pc, #192]	@ (8005060 <UART_SetConfig+0x2cc>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fac:	d01a      	beq.n	8004fe4 <UART_SetConfig+0x250>
 8004fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb2:	d81b      	bhi.n	8004fec <UART_SetConfig+0x258>
 8004fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb8:	d00c      	beq.n	8004fd4 <UART_SetConfig+0x240>
 8004fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fbe:	d815      	bhi.n	8004fec <UART_SetConfig+0x258>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <UART_SetConfig+0x238>
 8004fc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc8:	d008      	beq.n	8004fdc <UART_SetConfig+0x248>
 8004fca:	e00f      	b.n	8004fec <UART_SetConfig+0x258>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e052      	b.n	800507a <UART_SetConfig+0x2e6>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e04e      	b.n	800507a <UART_SetConfig+0x2e6>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e04a      	b.n	800507a <UART_SetConfig+0x2e6>
 8004fe4:	2308      	movs	r3, #8
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fea:	e046      	b.n	800507a <UART_SetConfig+0x2e6>
 8004fec:	2310      	movs	r3, #16
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff2:	e042      	b.n	800507a <UART_SetConfig+0x2e6>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <UART_SetConfig+0x2c4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d13a      	bne.n	8005074 <UART_SetConfig+0x2e0>
 8004ffe:	4b18      	ldr	r3, [pc, #96]	@ (8005060 <UART_SetConfig+0x2cc>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005004:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005008:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800500c:	d01a      	beq.n	8005044 <UART_SetConfig+0x2b0>
 800500e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005012:	d81b      	bhi.n	800504c <UART_SetConfig+0x2b8>
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005018:	d00c      	beq.n	8005034 <UART_SetConfig+0x2a0>
 800501a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800501e:	d815      	bhi.n	800504c <UART_SetConfig+0x2b8>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <UART_SetConfig+0x298>
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005028:	d008      	beq.n	800503c <UART_SetConfig+0x2a8>
 800502a:	e00f      	b.n	800504c <UART_SetConfig+0x2b8>
 800502c:	2300      	movs	r3, #0
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e022      	b.n	800507a <UART_SetConfig+0x2e6>
 8005034:	2302      	movs	r3, #2
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e01e      	b.n	800507a <UART_SetConfig+0x2e6>
 800503c:	2304      	movs	r3, #4
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005042:	e01a      	b.n	800507a <UART_SetConfig+0x2e6>
 8005044:	2308      	movs	r3, #8
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504a:	e016      	b.n	800507a <UART_SetConfig+0x2e6>
 800504c:	2310      	movs	r3, #16
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005052:	e012      	b.n	800507a <UART_SetConfig+0x2e6>
 8005054:	efff69f3 	.word	0xefff69f3
 8005058:	40008000 	.word	0x40008000
 800505c:	40013800 	.word	0x40013800
 8005060:	40021000 	.word	0x40021000
 8005064:	40004400 	.word	0x40004400
 8005068:	40004800 	.word	0x40004800
 800506c:	40004c00 	.word	0x40004c00
 8005070:	40005000 	.word	0x40005000
 8005074:	2310      	movs	r3, #16
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a9f      	ldr	r2, [pc, #636]	@ (80052fc <UART_SetConfig+0x568>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d17a      	bne.n	800517a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005084:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005088:	2b08      	cmp	r3, #8
 800508a:	d824      	bhi.n	80050d6 <UART_SetConfig+0x342>
 800508c:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <UART_SetConfig+0x300>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050d7 	.word	0x080050d7
 80050a4:	080050c7 	.word	0x080050c7
 80050a8:	080050d7 	.word	0x080050d7
 80050ac:	080050d7 	.word	0x080050d7
 80050b0:	080050d7 	.word	0x080050d7
 80050b4:	080050cf 	.word	0x080050cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b8:	f7fe f83e 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80050bc:	61f8      	str	r0, [r7, #28]
        break;
 80050be:	e010      	b.n	80050e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c0:	4b8f      	ldr	r3, [pc, #572]	@ (8005300 <UART_SetConfig+0x56c>)
 80050c2:	61fb      	str	r3, [r7, #28]
        break;
 80050c4:	e00d      	b.n	80050e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c6:	f7fd ff9f 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 80050ca:	61f8      	str	r0, [r7, #28]
        break;
 80050cc:	e009      	b.n	80050e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050d2:	61fb      	str	r3, [r7, #28]
        break;
 80050d4:	e005      	b.n	80050e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80fb 	beq.w	80052e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d305      	bcc.n	8005106 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	429a      	cmp	r2, r3
 8005104:	d903      	bls.n	800510e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800510c:	e0e8      	b.n	80052e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2200      	movs	r2, #0
 8005112:	461c      	mov	r4, r3
 8005114:	4615      	mov	r5, r2
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	022b      	lsls	r3, r5, #8
 8005120:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005124:	0222      	lsls	r2, r4, #8
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	6849      	ldr	r1, [r1, #4]
 800512a:	0849      	lsrs	r1, r1, #1
 800512c:	2000      	movs	r0, #0
 800512e:	4688      	mov	r8, r1
 8005130:	4681      	mov	r9, r0
 8005132:	eb12 0a08 	adds.w	sl, r2, r8
 8005136:	eb43 0b09 	adc.w	fp, r3, r9
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005148:	4650      	mov	r0, sl
 800514a:	4659      	mov	r1, fp
 800514c:	f7fb fb9e 	bl	800088c <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4613      	mov	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800515e:	d308      	bcc.n	8005172 <UART_SetConfig+0x3de>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005166:	d204      	bcs.n	8005172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	e0b6      	b.n	80052e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005178:	e0b2      	b.n	80052e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005182:	d15e      	bne.n	8005242 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005184:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005188:	2b08      	cmp	r3, #8
 800518a:	d828      	bhi.n	80051de <UART_SetConfig+0x44a>
 800518c:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <UART_SetConfig+0x400>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051cf 	.word	0x080051cf
 80051a8:	080051df 	.word	0x080051df
 80051ac:	080051df 	.word	0x080051df
 80051b0:	080051df 	.word	0x080051df
 80051b4:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b8:	f7fd ffbe 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80051bc:	61f8      	str	r0, [r7, #28]
        break;
 80051be:	e014      	b.n	80051ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fd ffd0 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 80051c4:	61f8      	str	r0, [r7, #28]
        break;
 80051c6:	e010      	b.n	80051ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005300 <UART_SetConfig+0x56c>)
 80051ca:	61fb      	str	r3, [r7, #28]
        break;
 80051cc:	e00d      	b.n	80051ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ce:	f7fd ff1b 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 80051d2:	61f8      	str	r0, [r7, #28]
        break;
 80051d4:	e009      	b.n	80051ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051da:	61fb      	str	r3, [r7, #28]
        break;
 80051dc:	e005      	b.n	80051ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d077      	beq.n	80052e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005a      	lsls	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b0f      	cmp	r3, #15
 800520a:	d916      	bls.n	800523a <UART_SetConfig+0x4a6>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005212:	d212      	bcs.n	800523a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f023 030f 	bic.w	r3, r3, #15
 800521c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	b29b      	uxth	r3, r3
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	b29a      	uxth	r2, r3
 800522a:	8afb      	ldrh	r3, [r7, #22]
 800522c:	4313      	orrs	r3, r2
 800522e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	8afa      	ldrh	r2, [r7, #22]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e052      	b.n	80052e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005240:	e04e      	b.n	80052e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005242:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005246:	2b08      	cmp	r3, #8
 8005248:	d827      	bhi.n	800529a <UART_SetConfig+0x506>
 800524a:	a201      	add	r2, pc, #4	@ (adr r2, 8005250 <UART_SetConfig+0x4bc>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005275 	.word	0x08005275
 8005254:	0800527d 	.word	0x0800527d
 8005258:	08005285 	.word	0x08005285
 800525c:	0800529b 	.word	0x0800529b
 8005260:	0800528b 	.word	0x0800528b
 8005264:	0800529b 	.word	0x0800529b
 8005268:	0800529b 	.word	0x0800529b
 800526c:	0800529b 	.word	0x0800529b
 8005270:	08005293 	.word	0x08005293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005274:	f7fd ff60 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8005278:	61f8      	str	r0, [r7, #28]
        break;
 800527a:	e014      	b.n	80052a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800527c:	f7fd ff72 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 8005280:	61f8      	str	r0, [r7, #28]
        break;
 8005282:	e010      	b.n	80052a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005284:	4b1e      	ldr	r3, [pc, #120]	@ (8005300 <UART_SetConfig+0x56c>)
 8005286:	61fb      	str	r3, [r7, #28]
        break;
 8005288:	e00d      	b.n	80052a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528a:	f7fd febd 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 800528e:	61f8      	str	r0, [r7, #28]
        break;
 8005290:	e009      	b.n	80052a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005296:	61fb      	str	r3, [r7, #28]
        break;
 8005298:	e005      	b.n	80052a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052a4:	bf00      	nop
    }

    if (pclk != 0U)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d019      	beq.n	80052e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	085a      	lsrs	r2, r3, #1
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	d909      	bls.n	80052da <UART_SetConfig+0x546>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052cc:	d205      	bcs.n	80052da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60da      	str	r2, [r3, #12]
 80052d8:	e002      	b.n	80052e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3728      	adds	r7, #40	@ 0x28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fa:	bf00      	nop
 80052fc:	40008000 	.word	0x40008000
 8005300:	00f42400 	.word	0x00f42400

08005304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01a      	beq.n	800541a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005402:	d10a      	bne.n	800541a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  }
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b098      	sub	sp, #96	@ 0x60
 800544c:	af02      	add	r7, sp, #8
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005458:	f7fc fde2 	bl	8002020 <HAL_GetTick>
 800545c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d12e      	bne.n	80054ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f88c 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d021      	beq.n	80054ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800549a:	653b      	str	r3, [r7, #80]	@ 0x50
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e062      	b.n	8005590 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d149      	bne.n	800556c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e0:	2200      	movs	r2, #0
 80054e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f856 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d03c      	beq.n	800556c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005506:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005510:	633b      	str	r3, [r7, #48]	@ 0x30
 8005512:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800551e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e6      	bne.n	80054f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	60fb      	str	r3, [r7, #12]
   return(result);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3308      	adds	r3, #8
 8005542:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005544:	61fa      	str	r2, [r7, #28]
 8005546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	69b9      	ldr	r1, [r7, #24]
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	617b      	str	r3, [r7, #20]
   return(result);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e011      	b.n	8005590 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3758      	adds	r7, #88	@ 0x58
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a8:	e049      	b.n	800563e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d045      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b2:	f7fc fd35 	bl	8002020 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d302      	bcc.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e048      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d031      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d110      	bne.n	800560a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2208      	movs	r2, #8
 80055ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f838 	bl	8005666 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2208      	movs	r2, #8
 80055fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e029      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005618:	d111      	bne.n	800563e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f81e 	bl	8005666 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e00f      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4013      	ands	r3, r2
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	429a      	cmp	r2, r3
 800565a:	d0a6      	beq.n	80055aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005666:	b480      	push	{r7}
 8005668:	b095      	sub	sp, #84	@ 0x54
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800568c:	643b      	str	r3, [r7, #64]	@ 0x40
 800568e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e6      	bne.n	800566e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f023 0301 	bic.w	r3, r3, #1
 80056b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3308      	adds	r3, #8
 80056be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d118      	bne.n	800570e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f023 0310 	bic.w	r3, r3, #16
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6979      	ldr	r1, [r7, #20]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	613b      	str	r3, [r7, #16]
   return(result);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e6      	bne.n	80056dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005722:	bf00      	nop
 8005724:	3754      	adds	r7, #84	@ 0x54
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005734:	4904      	ldr	r1, [pc, #16]	@ (8005748 <MX_FATFS_Init+0x18>)
 8005736:	4805      	ldr	r0, [pc, #20]	@ (800574c <MX_FATFS_Init+0x1c>)
 8005738:	f002 fee8 	bl	800850c <FATFS_LinkDriver>
 800573c:	4603      	mov	r3, r0
 800573e:	461a      	mov	r2, r3
 8005740:	4b03      	ldr	r3, [pc, #12]	@ (8005750 <MX_FATFS_Init+0x20>)
 8005742:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005744:	bf00      	nop
 8005746:	bd80      	pop	{r7, pc}
 8005748:	200007f0 	.word	0x200007f0
 800574c:	20000010 	.word	0x20000010
 8005750:	200007ec 	.word	0x200007ec

08005754 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005758:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800575a:	4618      	mov	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	4618      	mov	r0, r3
 8005772:	f7fc f8c7 	bl	8001904 <SD_disk_initialize>
 8005776:	4603      	mov	r3, r0
 8005778:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	4603      	mov	r3, r0
 800578a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;

	return SD_disk_status(pdrv);
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	4618      	mov	r0, r3
 8005790:	f7fc f9a2 	bl	8001ad8 <SD_disk_status>
 8005794:	4603      	mov	r3, r0
 8005796:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	4603      	mov	r3, r0
 80057ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80057b0:	7bf8      	ldrb	r0, [r7, #15]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	f7fc f9a4 	bl	8001b04 <SD_disk_read>
 80057bc:	4603      	mov	r3, r0
 80057be:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	 return SD_disk_write(pdrv, buff, sector, count);
 80057d8:	7bf8      	ldrb	r0, [r7, #15]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	f7fc f9fa 	bl	8001bd8 <SD_disk_write>
 80057e4:	4603      	mov	r3, r0
 80057e6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	603a      	str	r2, [r7, #0]
 80057fa:	71fb      	strb	r3, [r7, #7]
 80057fc:	460b      	mov	r3, r1
 80057fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	79b9      	ldrb	r1, [r7, #6]
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc fa6a 	bl	8001ce0 <SD_disk_ioctl>
 800580c:	4603      	mov	r3, r0
 800580e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	4a08      	ldr	r2, [pc, #32]	@ (8005848 <disk_status+0x30>)
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	79fa      	ldrb	r2, [r7, #7]
 8005830:	4905      	ldr	r1, [pc, #20]	@ (8005848 <disk_status+0x30>)
 8005832:	440a      	add	r2, r1
 8005834:	7a12      	ldrb	r2, [r2, #8]
 8005836:	4610      	mov	r0, r2
 8005838:	4798      	blx	r3
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	2000081c 	.word	0x2000081c

0800584c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	4a0d      	ldr	r2, [pc, #52]	@ (8005894 <disk_initialize+0x48>)
 800585e:	5cd3      	ldrb	r3, [r2, r3]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d111      	bne.n	8005888 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	4a0b      	ldr	r2, [pc, #44]	@ (8005894 <disk_initialize+0x48>)
 8005868:	2101      	movs	r1, #1
 800586a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	4a09      	ldr	r2, [pc, #36]	@ (8005894 <disk_initialize+0x48>)
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	79fa      	ldrb	r2, [r7, #7]
 800587a:	4906      	ldr	r1, [pc, #24]	@ (8005894 <disk_initialize+0x48>)
 800587c:	440a      	add	r2, r1
 800587e:	7a12      	ldrb	r2, [r2, #8]
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
 8005884:	4603      	mov	r3, r0
 8005886:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000081c 	.word	0x2000081c

08005898 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	4a0a      	ldr	r2, [pc, #40]	@ (80058d4 <disk_read+0x3c>)
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	689c      	ldr	r4, [r3, #8]
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	4a07      	ldr	r2, [pc, #28]	@ (80058d4 <disk_read+0x3c>)
 80058b8:	4413      	add	r3, r2
 80058ba:	7a18      	ldrb	r0, [r3, #8]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	47a0      	blx	r4
 80058c4:	4603      	mov	r3, r0
 80058c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd90      	pop	{r4, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	2000081c 	.word	0x2000081c

080058d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058d8:	b590      	push	{r4, r7, lr}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005914 <disk_write+0x3c>)
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68dc      	ldr	r4, [r3, #12]
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	4a07      	ldr	r2, [pc, #28]	@ (8005914 <disk_write+0x3c>)
 80058f8:	4413      	add	r3, r2
 80058fa:	7a18      	ldrb	r0, [r3, #8]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	47a0      	blx	r4
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]
  return res;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
}
 800590a:	4618      	mov	r0, r3
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd90      	pop	{r4, r7, pc}
 8005912:	bf00      	nop
 8005914:	2000081c 	.word	0x2000081c

08005918 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	603a      	str	r2, [r7, #0]
 8005922:	71fb      	strb	r3, [r7, #7]
 8005924:	460b      	mov	r3, r1
 8005926:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	4a09      	ldr	r2, [pc, #36]	@ (8005950 <disk_ioctl+0x38>)
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	79fa      	ldrb	r2, [r7, #7]
 8005936:	4906      	ldr	r1, [pc, #24]	@ (8005950 <disk_ioctl+0x38>)
 8005938:	440a      	add	r2, r1
 800593a:	7a10      	ldrb	r0, [r2, #8]
 800593c:	79b9      	ldrb	r1, [r7, #6]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	4798      	blx	r3
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]
  return res;
 8005946:	7bfb      	ldrb	r3, [r7, #15]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	2000081c 	.word	0x2000081c

08005954 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3301      	adds	r3, #1
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	b21a      	sxth	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b21b      	sxth	r3, r3
 8005970:	4313      	orrs	r3, r2
 8005972:	b21b      	sxth	r3, r3
 8005974:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005976:	89fb      	ldrh	r3, [r7, #14]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3303      	adds	r3, #3
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	3202      	adds	r2, #2
 800599c:	7812      	ldrb	r2, [r2, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	3201      	adds	r2, #1
 80059aa:	7812      	ldrb	r2, [r2, #0]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	887a      	ldrh	r2, [r7, #2]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	887b      	ldrh	r3, [r7, #2]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	887a      	ldrh	r2, [r7, #2]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	0a1b      	lsrs	r3, r3, #8
 8005a3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	1c53      	adds	r3, r2, #1
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1c59      	adds	r1, r3, #1
 8005a7c:	6179      	str	r1, [r7, #20]
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f1      	bne.n	8005a72 <mem_cpy+0x1a>
	}
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a9a:	b480      	push	{r7}
 8005a9c:	b087      	sub	sp, #28
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	617a      	str	r2, [r7, #20]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	607b      	str	r3, [r7, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f3      	bne.n	8005aaa <mem_set+0x10>
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ad0:	b480      	push	{r7}
 8005ad2:	b089      	sub	sp, #36	@ 0x24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	61fa      	str	r2, [r7, #28]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	4619      	mov	r1, r3
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	61ba      	str	r2, [r7, #24]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	1acb      	subs	r3, r1, r3
 8005afc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	607b      	str	r3, [r7, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <mem_cmp+0x40>
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0eb      	beq.n	8005ae8 <mem_cmp+0x18>

	return r;
 8005b10:	697b      	ldr	r3, [r7, #20]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3724      	adds	r7, #36	@ 0x24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b28:	e002      	b.n	8005b30 <chk_chr+0x12>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <chk_chr+0x26>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d1f2      	bne.n	8005b2a <chk_chr+0xc>
	return *str;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	781b      	ldrb	r3, [r3, #0]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e029      	b.n	8005bbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b68:	4a27      	ldr	r2, [pc, #156]	@ (8005c08 <chk_lock+0xb4>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4413      	add	r3, r2
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01d      	beq.n	8005bb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b76:	4a24      	ldr	r2, [pc, #144]	@ (8005c08 <chk_lock+0xb4>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	4413      	add	r3, r2
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d116      	bne.n	8005bb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b88:	4a1f      	ldr	r2, [pc, #124]	@ (8005c08 <chk_lock+0xb4>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	4413      	add	r3, r2
 8005b90:	3304      	adds	r3, #4
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d10c      	bne.n	8005bb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c08 <chk_lock+0xb4>)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d102      	bne.n	8005bb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bb0:	e007      	b.n	8005bc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d9d2      	bls.n	8005b68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d109      	bne.n	8005bdc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <chk_lock+0x80>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d101      	bne.n	8005bd8 <chk_lock+0x84>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e010      	b.n	8005bfa <chk_lock+0xa6>
 8005bd8:	2312      	movs	r3, #18
 8005bda:	e00e      	b.n	8005bfa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <chk_lock+0xa0>
 8005be2:	4a09      	ldr	r2, [pc, #36]	@ (8005c08 <chk_lock+0xb4>)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	4413      	add	r3, r2
 8005bea:	330c      	adds	r3, #12
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf2:	d101      	bne.n	8005bf8 <chk_lock+0xa4>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	e000      	b.n	8005bfa <chk_lock+0xa6>
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	200007fc 	.word	0x200007fc

08005c0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	e002      	b.n	8005c1e <enq_lock+0x12>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d806      	bhi.n	8005c32 <enq_lock+0x26>
 8005c24:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <enq_lock+0x40>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	4413      	add	r3, r2
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f2      	bne.n	8005c18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	bf14      	ite	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	2300      	moveq	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	200007fc 	.word	0x200007fc

08005c50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e01f      	b.n	8005ca0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c60:	4a41      	ldr	r2, [pc, #260]	@ (8005d68 <inc_lock+0x118>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	4413      	add	r3, r2
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d113      	bne.n	8005c9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c72:	4a3d      	ldr	r2, [pc, #244]	@ (8005d68 <inc_lock+0x118>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	4413      	add	r3, r2
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d109      	bne.n	8005c9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c86:	4a38      	ldr	r2, [pc, #224]	@ (8005d68 <inc_lock+0x118>)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3308      	adds	r3, #8
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d006      	beq.n	8005ca8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d9dc      	bls.n	8005c60 <inc_lock+0x10>
 8005ca6:	e000      	b.n	8005caa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005ca8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d132      	bne.n	8005d16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e002      	b.n	8005cbc <inc_lock+0x6c>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d806      	bhi.n	8005cd0 <inc_lock+0x80>
 8005cc2:	4a29      	ldr	r2, [pc, #164]	@ (8005d68 <inc_lock+0x118>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	4413      	add	r3, r2
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f2      	bne.n	8005cb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d101      	bne.n	8005cda <inc_lock+0x8a>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e040      	b.n	8005d5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4922      	ldr	r1, [pc, #136]	@ (8005d68 <inc_lock+0x118>)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	440b      	add	r3, r1
 8005ce6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	491e      	ldr	r1, [pc, #120]	@ (8005d68 <inc_lock+0x118>)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	491a      	ldr	r1, [pc, #104]	@ (8005d68 <inc_lock+0x118>)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	440b      	add	r3, r1
 8005d04:	3308      	adds	r3, #8
 8005d06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d08:	4a17      	ldr	r2, [pc, #92]	@ (8005d68 <inc_lock+0x118>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	4413      	add	r3, r2
 8005d10:	330c      	adds	r3, #12
 8005d12:	2200      	movs	r2, #0
 8005d14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d009      	beq.n	8005d30 <inc_lock+0xe0>
 8005d1c:	4a12      	ldr	r2, [pc, #72]	@ (8005d68 <inc_lock+0x118>)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	330c      	adds	r3, #12
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <inc_lock+0xe0>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e015      	b.n	8005d5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d108      	bne.n	8005d48 <inc_lock+0xf8>
 8005d36:	4a0c      	ldr	r2, [pc, #48]	@ (8005d68 <inc_lock+0x118>)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	4413      	add	r3, r2
 8005d3e:	330c      	adds	r3, #12
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	e001      	b.n	8005d4c <inc_lock+0xfc>
 8005d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d4c:	4906      	ldr	r1, [pc, #24]	@ (8005d68 <inc_lock+0x118>)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	440b      	add	r3, r1
 8005d54:	330c      	adds	r3, #12
 8005d56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	200007fc 	.word	0x200007fc

08005d6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d825      	bhi.n	8005dcc <dec_lock+0x60>
		n = Files[i].ctr;
 8005d80:	4a17      	ldr	r2, [pc, #92]	@ (8005de0 <dec_lock+0x74>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	4413      	add	r3, r2
 8005d88:	330c      	adds	r3, #12
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d8e:	89fb      	ldrh	r3, [r7, #14]
 8005d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d94:	d101      	bne.n	8005d9a <dec_lock+0x2e>
 8005d96:	2300      	movs	r3, #0
 8005d98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d9a:	89fb      	ldrh	r3, [r7, #14]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <dec_lock+0x3a>
 8005da0:	89fb      	ldrh	r3, [r7, #14]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005da6:	4a0e      	ldr	r2, [pc, #56]	@ (8005de0 <dec_lock+0x74>)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	4413      	add	r3, r2
 8005dae:	330c      	adds	r3, #12
 8005db0:	89fa      	ldrh	r2, [r7, #14]
 8005db2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005db4:	89fb      	ldrh	r3, [r7, #14]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <dec_lock+0x5a>
 8005dba:	4a09      	ldr	r2, [pc, #36]	@ (8005de0 <dec_lock+0x74>)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	4413      	add	r3, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	737b      	strb	r3, [r7, #13]
 8005dca:	e001      	b.n	8005dd0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005dcc:	2302      	movs	r3, #2
 8005dce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005dd0:	7b7b      	ldrb	r3, [r7, #13]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	200007fc 	.word	0x200007fc

08005de4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e010      	b.n	8005e14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005df2:	4a0d      	ldr	r2, [pc, #52]	@ (8005e28 <clear_lock+0x44>)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	4413      	add	r3, r2
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d105      	bne.n	8005e0e <clear_lock+0x2a>
 8005e02:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <clear_lock+0x44>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	4413      	add	r3, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d9eb      	bls.n	8005df2 <clear_lock+0xe>
	}
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	200007fc 	.word	0x200007fc

08005e2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	78db      	ldrb	r3, [r3, #3]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d034      	beq.n	8005eaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	7858      	ldrb	r0, [r3, #1]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005e50:	2301      	movs	r3, #1
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	f7ff fd40 	bl	80058d8 <disk_write>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	73fb      	strb	r3, [r7, #15]
 8005e62:	e022      	b.n	8005eaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	1ad2      	subs	r2, r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d217      	bcs.n	8005eaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	789b      	ldrb	r3, [r3, #2]
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	e010      	b.n	8005ea4 <sync_window+0x78>
					wsect += fs->fsize;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	7858      	ldrb	r0, [r3, #1]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005e96:	2301      	movs	r3, #1
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	f7ff fd1d 	bl	80058d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d8eb      	bhi.n	8005e82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d01b      	beq.n	8005f04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff ffad 	bl	8005e2c <sync_window>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d113      	bne.n	8005f04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	7858      	ldrb	r0, [r3, #1]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	f7ff fcd5 	bl	8005898 <disk_read>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d004      	beq.n	8005efe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff87 	bl	8005e2c <sync_window>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d158      	bne.n	8005fda <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d148      	bne.n	8005fc2 <sync_fs+0xb2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	791b      	ldrb	r3, [r3, #4]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d144      	bne.n	8005fc2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3330      	adds	r3, #48	@ 0x30
 8005f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fda9 	bl	8005a9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3330      	adds	r3, #48	@ 0x30
 8005f4c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005f50:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fd38 	bl	80059ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3330      	adds	r3, #48	@ 0x30
 8005f5e:	4921      	ldr	r1, [pc, #132]	@ (8005fe4 <sync_fs+0xd4>)
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fd4d 	bl	8005a00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3330      	adds	r3, #48	@ 0x30
 8005f6a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005f6e:	491e      	ldr	r1, [pc, #120]	@ (8005fe8 <sync_fs+0xd8>)
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fd45 	bl	8005a00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3330      	adds	r3, #48	@ 0x30
 8005f7a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4619      	mov	r1, r3
 8005f84:	4610      	mov	r0, r2
 8005f86:	f7ff fd3b 	bl	8005a00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3330      	adds	r3, #48	@ 0x30
 8005f8e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f7ff fd31 	bl	8005a00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	7858      	ldrb	r0, [r3, #1]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f7ff fc8e 	bl	80058d8 <disk_write>
			fs->fsi_flag = 0;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fca4 	bl	8005918 <disk_ioctl>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <sync_fs+0xca>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	41615252 	.word	0x41615252
 8005fe8:	61417272 	.word	0x61417272

08005fec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	3b02      	subs	r3, #2
 8005ffa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	3b02      	subs	r3, #2
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d301      	bcc.n	800600c <clust2sect+0x20>
 8006008:	2300      	movs	r3, #0
 800600a:	e008      	b.n	800601e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	895b      	ldrh	r3, [r3, #10]
 8006010:	461a      	mov	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	fb03 f202 	mul.w	r2, r3, r2
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601c:	4413      	add	r3, r2
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d904      	bls.n	800604a <get_fat+0x20>
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <get_fat+0x26>
		val = 1;	/* Internal error */
 800604a:	2301      	movs	r3, #1
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e08e      	b.n	800616e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d061      	beq.n	8006122 <get_fat+0xf8>
 800605e:	2b03      	cmp	r3, #3
 8006060:	dc7b      	bgt.n	800615a <get_fat+0x130>
 8006062:	2b01      	cmp	r3, #1
 8006064:	d002      	beq.n	800606c <get_fat+0x42>
 8006066:	2b02      	cmp	r3, #2
 8006068:	d041      	beq.n	80060ee <get_fat+0xc4>
 800606a:	e076      	b.n	800615a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6a1a      	ldr	r2, [r3, #32]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	0a5b      	lsrs	r3, r3, #9
 8006082:	4413      	add	r3, r2
 8006084:	4619      	mov	r1, r3
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f7ff ff14 	bl	8005eb4 <move_window>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d166      	bne.n	8006160 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	60fa      	str	r2, [r7, #12]
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6a1a      	ldr	r2, [r3, #32]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	0a5b      	lsrs	r3, r3, #9
 80060ae:	4413      	add	r3, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f7ff fefe 	bl	8005eb4 <move_window>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d152      	bne.n	8006164 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4413      	add	r3, r2
 80060c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <get_fat+0xba>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	e002      	b.n	80060ea <get_fat+0xc0>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ea:	617b      	str	r3, [r7, #20]
			break;
 80060ec:	e03f      	b.n	800616e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	6a1a      	ldr	r2, [r3, #32]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	4413      	add	r3, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f7ff feda 	bl	8005eb4 <move_window>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d130      	bne.n	8006168 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006114:	4413      	add	r3, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fc1c 	bl	8005954 <ld_word>
 800611c:	4603      	mov	r3, r0
 800611e:	617b      	str	r3, [r7, #20]
			break;
 8006120:	e025      	b.n	800616e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6a1a      	ldr	r2, [r3, #32]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	09db      	lsrs	r3, r3, #7
 800612a:	4413      	add	r3, r2
 800612c:	4619      	mov	r1, r3
 800612e:	6938      	ldr	r0, [r7, #16]
 8006130:	f7ff fec0 	bl	8005eb4 <move_window>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d118      	bne.n	800616c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006148:	4413      	add	r3, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fc1a 	bl	8005984 <ld_dword>
 8006150:	4603      	mov	r3, r0
 8006152:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006156:	617b      	str	r3, [r7, #20]
			break;
 8006158:	e009      	b.n	800616e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800615a:	2301      	movs	r3, #1
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	e006      	b.n	800616e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006160:	bf00      	nop
 8006162:	e004      	b.n	800616e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006164:	bf00      	nop
 8006166:	e002      	b.n	800616e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006168:	bf00      	nop
 800616a:	e000      	b.n	800616e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800616c:	bf00      	nop
		}
	}

	return val;
 800616e:	697b      	ldr	r3, [r7, #20]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006178:	b590      	push	{r4, r7, lr}
 800617a:	b089      	sub	sp, #36	@ 0x24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006184:	2302      	movs	r3, #2
 8006186:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b01      	cmp	r3, #1
 800618c:	f240 80d9 	bls.w	8006342 <put_fat+0x1ca>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	429a      	cmp	r2, r3
 8006198:	f080 80d3 	bcs.w	8006342 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	f000 8096 	beq.w	80062d2 <put_fat+0x15a>
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	f300 80cb 	bgt.w	8006342 <put_fat+0x1ca>
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d002      	beq.n	80061b6 <put_fat+0x3e>
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d06e      	beq.n	8006292 <put_fat+0x11a>
 80061b4:	e0c5      	b.n	8006342 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	085b      	lsrs	r3, r3, #1
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	4413      	add	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	0a5b      	lsrs	r3, r3, #9
 80061cc:	4413      	add	r3, r2
 80061ce:	4619      	mov	r1, r3
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff fe6f 	bl	8005eb4 <move_window>
 80061d6:	4603      	mov	r3, r0
 80061d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061da:	7ffb      	ldrb	r3, [r7, #31]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 80a9 	bne.w	8006334 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	1c59      	adds	r1, r3, #1
 80061ec:	61b9      	str	r1, [r7, #24]
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	4413      	add	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <put_fat+0xa4>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b25b      	sxtb	r3, r3
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	b25a      	sxtb	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	b25b      	sxtb	r3, r3
 8006214:	4313      	orrs	r3, r2
 8006216:	b25b      	sxtb	r3, r3
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e001      	b.n	8006220 <put_fat+0xa8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	0a5b      	lsrs	r3, r3, #9
 8006232:	4413      	add	r3, r2
 8006234:	4619      	mov	r1, r3
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fe3c 	bl	8005eb4 <move_window>
 800623c:	4603      	mov	r3, r0
 800623e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006240:	7ffb      	ldrb	r3, [r7, #31]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d178      	bne.n	8006338 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006252:	4413      	add	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <put_fat+0xf0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	091b      	lsrs	r3, r3, #4
 8006264:	b2db      	uxtb	r3, r3
 8006266:	e00e      	b.n	8006286 <put_fat+0x10e>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b25b      	sxtb	r3, r3
 800626e:	f023 030f 	bic.w	r3, r3, #15
 8006272:	b25a      	sxtb	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	b25b      	sxtb	r3, r3
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	b25b      	sxtb	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b25b      	sxtb	r3, r3
 8006284:	b2db      	uxtb	r3, r3
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	70da      	strb	r2, [r3, #3]
			break;
 8006290:	e057      	b.n	8006342 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1a      	ldr	r2, [r3, #32]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	0a1b      	lsrs	r3, r3, #8
 800629a:	4413      	add	r3, r2
 800629c:	4619      	mov	r1, r3
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff fe08 	bl	8005eb4 <move_window>
 80062a4:	4603      	mov	r3, r0
 80062a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062a8:	7ffb      	ldrb	r3, [r7, #31]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d146      	bne.n	800633c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80062bc:	4413      	add	r3, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	b292      	uxth	r2, r2
 80062c2:	4611      	mov	r1, r2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fb80 	bl	80059ca <st_word>
			fs->wflag = 1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	70da      	strb	r2, [r3, #3]
			break;
 80062d0:	e037      	b.n	8006342 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	09db      	lsrs	r3, r3, #7
 80062da:	4413      	add	r3, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff fde8 	bl	8005eb4 <move_window>
 80062e4:	4603      	mov	r3, r0
 80062e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062e8:	7ffb      	ldrb	r3, [r7, #31]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d128      	bne.n	8006340 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006302:	4413      	add	r3, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fb3d 	bl	8005984 <ld_dword>
 800630a:	4603      	mov	r3, r0
 800630c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006310:	4323      	orrs	r3, r4
 8006312:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006322:	4413      	add	r3, r2
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fb6a 	bl	8005a00 <st_dword>
			fs->wflag = 1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	70da      	strb	r2, [r3, #3]
			break;
 8006332:	e006      	b.n	8006342 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006334:	bf00      	nop
 8006336:	e004      	b.n	8006342 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006338:	bf00      	nop
 800633a:	e002      	b.n	8006342 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006340:	bf00      	nop
		}
	}
	return res;
 8006342:	7ffb      	ldrb	r3, [r7, #31]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3724      	adds	r7, #36	@ 0x24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd90      	pop	{r4, r7, pc}

0800634c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d904      	bls.n	8006372 <remove_chain+0x26>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	d301      	bcc.n	8006376 <remove_chain+0x2a>
 8006372:	2302      	movs	r3, #2
 8006374:	e04b      	b.n	800640e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00c      	beq.n	8006396 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800637c:	f04f 32ff 	mov.w	r2, #4294967295
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	69b8      	ldr	r0, [r7, #24]
 8006384:	f7ff fef8 	bl	8006178 <put_fat>
 8006388:	4603      	mov	r3, r0
 800638a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800638c:	7ffb      	ldrb	r3, [r7, #31]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <remove_chain+0x4a>
 8006392:	7ffb      	ldrb	r3, [r7, #31]
 8006394:	e03b      	b.n	800640e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff fe46 	bl	800602a <get_fat>
 800639e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d031      	beq.n	800640a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <remove_chain+0x64>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e02e      	b.n	800640e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d101      	bne.n	80063bc <remove_chain+0x70>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e028      	b.n	800640e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063bc:	2200      	movs	r2, #0
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	69b8      	ldr	r0, [r7, #24]
 80063c2:	f7ff fed9 	bl	8006178 <put_fat>
 80063c6:	4603      	mov	r3, r0
 80063c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063ca:	7ffb      	ldrb	r3, [r7, #31]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <remove_chain+0x88>
 80063d0:	7ffb      	ldrb	r3, [r7, #31]
 80063d2:	e01c      	b.n	800640e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	3b02      	subs	r3, #2
 80063de:	429a      	cmp	r2, r3
 80063e0:	d20b      	bcs.n	80063fa <remove_chain+0xae>
			fs->free_clst++;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	791b      	ldrb	r3, [r3, #4]
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	d3c6      	bcc.n	8006396 <remove_chain+0x4a>
 8006408:	e000      	b.n	800640c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800640a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b088      	sub	sp, #32
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10d      	bne.n	8006448 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <create_chain+0x2c>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	429a      	cmp	r2, r3
 8006440:	d31b      	bcc.n	800647a <create_chain+0x64>
 8006442:	2301      	movs	r3, #1
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e018      	b.n	800647a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fded 	bl	800602a <get_fat>
 8006450:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d801      	bhi.n	800645c <create_chain+0x46>
 8006458:	2301      	movs	r3, #1
 800645a:	e070      	b.n	800653e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d101      	bne.n	8006468 <create_chain+0x52>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e06a      	b.n	800653e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d201      	bcs.n	8006476 <create_chain+0x60>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	e063      	b.n	800653e <create_chain+0x128>
		scl = clst;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	3301      	adds	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	429a      	cmp	r2, r3
 800648c:	d307      	bcc.n	800649e <create_chain+0x88>
				ncl = 2;
 800648e:	2302      	movs	r3, #2
 8006490:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	429a      	cmp	r2, r3
 8006498:	d901      	bls.n	800649e <create_chain+0x88>
 800649a:	2300      	movs	r3, #0
 800649c:	e04f      	b.n	800653e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800649e:	69f9      	ldr	r1, [r7, #28]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff fdc2 	bl	800602a <get_fat>
 80064a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d003      	beq.n	80064bc <create_chain+0xa6>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d101      	bne.n	80064c0 <create_chain+0xaa>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	e03e      	b.n	800653e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1da      	bne.n	800647e <create_chain+0x68>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e038      	b.n	800653e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295
 80064d2:	69f9      	ldr	r1, [r7, #28]
 80064d4:	6938      	ldr	r0, [r7, #16]
 80064d6:	f7ff fe4f 	bl	8006178 <put_fat>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <create_chain+0xe2>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d006      	beq.n	80064f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6938      	ldr	r0, [r7, #16]
 80064f0:	f7ff fe42 	bl	8006178 <put_fat>
 80064f4:	4603      	mov	r3, r0
 80064f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d116      	bne.n	800652c <create_chain+0x116>
		fs->last_clst = ncl;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	3b02      	subs	r3, #2
 800650e:	429a      	cmp	r2, r3
 8006510:	d804      	bhi.n	800651c <create_chain+0x106>
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	1e5a      	subs	r2, r3, #1
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	711a      	strb	r2, [r3, #4]
 800652a:	e007      	b.n	800653c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d102      	bne.n	8006538 <create_chain+0x122>
 8006532:	f04f 33ff 	mov.w	r3, #4294967295
 8006536:	e000      	b.n	800653a <create_chain+0x124>
 8006538:	2301      	movs	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800653c:	69fb      	ldr	r3, [r7, #28]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006546:	b480      	push	{r7}
 8006548:	b087      	sub	sp, #28
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	3304      	adds	r3, #4
 800655c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	0a5b      	lsrs	r3, r3, #9
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	8952      	ldrh	r2, [r2, #10]
 8006566:	fbb3 f3f2 	udiv	r3, r3, r2
 800656a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	613a      	str	r2, [r7, #16]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <clmt_clust+0x3a>
 800657c:	2300      	movs	r3, #0
 800657e:	e010      	b.n	80065a2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	429a      	cmp	r2, r3
 8006586:	d307      	bcc.n	8006598 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3304      	adds	r3, #4
 8006594:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006596:	e7e9      	b.n	800656c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006598:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065c4:	d204      	bcs.n	80065d0 <dir_sdi+0x22>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80065d0:	2302      	movs	r3, #2
 80065d2:	e063      	b.n	800669c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <dir_sdi+0x46>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d902      	bls.n	80065f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10c      	bne.n	8006614 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	8912      	ldrh	r2, [r2, #8]
 8006602:	4293      	cmp	r3, r2
 8006604:	d301      	bcc.n	800660a <dir_sdi+0x5c>
 8006606:	2302      	movs	r3, #2
 8006608:	e048      	b.n	800669c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	61da      	str	r2, [r3, #28]
 8006612:	e029      	b.n	8006668 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	895b      	ldrh	r3, [r3, #10]
 8006618:	025b      	lsls	r3, r3, #9
 800661a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800661c:	e019      	b.n	8006652 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6979      	ldr	r1, [r7, #20]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fd01 	bl	800602a <get_fat>
 8006628:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d101      	bne.n	8006636 <dir_sdi+0x88>
 8006632:	2301      	movs	r3, #1
 8006634:	e032      	b.n	800669c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d904      	bls.n	8006646 <dir_sdi+0x98>
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	429a      	cmp	r2, r3
 8006644:	d301      	bcc.n	800664a <dir_sdi+0x9c>
 8006646:	2302      	movs	r3, #2
 8006648:	e028      	b.n	800669c <dir_sdi+0xee>
			ofs -= csz;
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	429a      	cmp	r2, r3
 8006658:	d2e1      	bcs.n	800661e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800665a:	6979      	ldr	r1, [r7, #20]
 800665c:	6938      	ldr	r0, [r7, #16]
 800665e:	f7ff fcc5 	bl	8005fec <clust2sect>
 8006662:	4602      	mov	r2, r0
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <dir_sdi+0xcc>
 8006676:	2302      	movs	r3, #2
 8006678:	e010      	b.n	800669c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69da      	ldr	r2, [r3, #28]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	0a5b      	lsrs	r3, r3, #9
 8006682:	441a      	add	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	441a      	add	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	3320      	adds	r3, #32
 80066ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <dir_next+0x28>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066ca:	d301      	bcc.n	80066d0 <dir_next+0x2c>
 80066cc:	2304      	movs	r3, #4
 80066ce:	e0aa      	b.n	8006826 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f040 8098 	bne.w	800680c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10b      	bne.n	8006706 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	8912      	ldrh	r2, [r2, #8]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f0c0 8088 	bcc.w	800680c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
 8006702:	2304      	movs	r3, #4
 8006704:	e08f      	b.n	8006826 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	0a5b      	lsrs	r3, r3, #9
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	8952      	ldrh	r2, [r2, #10]
 800670e:	3a01      	subs	r2, #1
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d17a      	bne.n	800680c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f7ff fc83 	bl	800602a <get_fat>
 8006724:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d801      	bhi.n	8006730 <dir_next+0x8c>
 800672c:	2302      	movs	r3, #2
 800672e:	e07a      	b.n	8006826 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d101      	bne.n	800673c <dir_next+0x98>
 8006738:	2301      	movs	r3, #1
 800673a:	e074      	b.n	8006826 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	429a      	cmp	r2, r3
 8006744:	d358      	bcc.n	80067f8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	61da      	str	r2, [r3, #28]
 8006752:	2304      	movs	r3, #4
 8006754:	e067      	b.n	8006826 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f7ff fe59 	bl	8006416 <create_chain>
 8006764:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <dir_next+0xcc>
 800676c:	2307      	movs	r3, #7
 800676e:	e05a      	b.n	8006826 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <dir_next+0xd6>
 8006776:	2302      	movs	r3, #2
 8006778:	e055      	b.n	8006826 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d101      	bne.n	8006786 <dir_next+0xe2>
 8006782:	2301      	movs	r3, #1
 8006784:	e04f      	b.n	8006826 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fb50 	bl	8005e2c <sync_window>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <dir_next+0xf2>
 8006792:	2301      	movs	r3, #1
 8006794:	e047      	b.n	8006826 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3330      	adds	r3, #48	@ 0x30
 800679a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff f97a 	bl	8005a9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	6979      	ldr	r1, [r7, #20]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fc1d 	bl	8005fec <clust2sect>
 80067b2:	4602      	mov	r2, r0
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80067b8:	e012      	b.n	80067e0 <dir_next+0x13c>
						fs->wflag = 1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff fb33 	bl	8005e2c <sync_window>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <dir_next+0x12c>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e02a      	b.n	8006826 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3301      	adds	r3, #1
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	895b      	ldrh	r3, [r3, #10]
 80067e4:	461a      	mov	r2, r3
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d3e6      	bcc.n	80067ba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067fe:	6979      	ldr	r1, [r7, #20]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff fbf3 	bl	8005fec <clust2sect>
 8006806:	4602      	mov	r2, r0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681e:	441a      	add	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800683e:	2100      	movs	r1, #0
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff feb4 	bl	80065ae <dir_sdi>
 8006846:	4603      	mov	r3, r0
 8006848:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d12b      	bne.n	80068a8 <dir_alloc+0x7a>
		n = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	4619      	mov	r1, r3
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fb2a 	bl	8005eb4 <move_window>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d11d      	bne.n	80068a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2be5      	cmp	r3, #229	@ 0xe5
 8006872:	d004      	beq.n	800687e <dir_alloc+0x50>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d107      	bne.n	800688e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	3301      	adds	r3, #1
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d102      	bne.n	8006892 <dir_alloc+0x64>
 800688c:	e00c      	b.n	80068a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800688e:	2300      	movs	r3, #0
 8006890:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006892:	2101      	movs	r1, #1
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff ff05 	bl	80066a4 <dir_next>
 800689a:	4603      	mov	r3, r0
 800689c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0d7      	beq.n	8006854 <dir_alloc+0x26>
 80068a4:	e000      	b.n	80068a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80068a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d101      	bne.n	80068b2 <dir_alloc+0x84>
 80068ae:	2307      	movs	r3, #7
 80068b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	331a      	adds	r3, #26
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff f842 	bl	8005954 <ld_word>
 80068d0:	4603      	mov	r3, r0
 80068d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d109      	bne.n	80068f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	3314      	adds	r3, #20
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff f837 	bl	8005954 <ld_word>
 80068e6:	4603      	mov	r3, r0
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068f0:	68fb      	ldr	r3, [r7, #12]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	331a      	adds	r3, #26
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	b292      	uxth	r2, r2
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff f85a 	bl	80059ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b03      	cmp	r3, #3
 800691c:	d109      	bne.n	8006932 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f103 0214 	add.w	r2, r3, #20
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	b29b      	uxth	r3, r3
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f7ff f84c 	bl	80059ca <st_word>
	}
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006948:	2100      	movs	r1, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fe2f 	bl	80065ae <dir_sdi>
 8006950:	4603      	mov	r3, r0
 8006952:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <dir_find+0x24>
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	e03e      	b.n	80069dc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	4619      	mov	r1, r3
 8006964:	6938      	ldr	r0, [r7, #16]
 8006966:	f7ff faa5 	bl	8005eb4 <move_window>
 800696a:	4603      	mov	r3, r0
 800696c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d12f      	bne.n	80069d4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <dir_find+0x4e>
 8006982:	2304      	movs	r3, #4
 8006984:	75fb      	strb	r3, [r7, #23]
 8006986:	e028      	b.n	80069da <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	330b      	adds	r3, #11
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006994:	b2da      	uxtb	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	330b      	adds	r3, #11
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <dir_find+0x86>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a18      	ldr	r0, [r3, #32]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3324      	adds	r3, #36	@ 0x24
 80069b2:	220b      	movs	r2, #11
 80069b4:	4619      	mov	r1, r3
 80069b6:	f7ff f88b 	bl	8005ad0 <mem_cmp>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80069c0:	2100      	movs	r1, #0
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff fe6e 	bl	80066a4 <dir_next>
 80069c8:	4603      	mov	r3, r0
 80069ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0c5      	beq.n	800695e <dir_find+0x24>
 80069d2:	e002      	b.n	80069da <dir_find+0xa0>
		if (res != FR_OK) break;
 80069d4:	bf00      	nop
 80069d6:	e000      	b.n	80069da <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069d8:	bf00      	nop

	return res;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80069f2:	2101      	movs	r1, #1
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ff1a 	bl	800682e <dir_alloc>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d11c      	bne.n	8006a3e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68b8      	ldr	r0, [r7, #8]
 8006a0c:	f7ff fa52 	bl	8005eb4 <move_window>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d111      	bne.n	8006a3e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff f839 	bl	8005a9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a18      	ldr	r0, [r3, #32]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3324      	adds	r3, #36	@ 0x24
 8006a30:	220b      	movs	r2, #11
 8006a32:	4619      	mov	r1, r3
 8006a34:	f7ff f810 	bl	8005a58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3324      	adds	r3, #36	@ 0x24
 8006a5c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006a5e:	220b      	movs	r2, #11
 8006a60:	2120      	movs	r1, #32
 8006a62:	68b8      	ldr	r0, [r7, #8]
 8006a64:	f7ff f819 	bl	8005a9a <mem_set>
	si = i = 0; ni = 8;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	2308      	movs	r3, #8
 8006a72:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	61fa      	str	r2, [r7, #28]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a82:	7efb      	ldrb	r3, [r7, #27]
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d94e      	bls.n	8006b26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006a88:	7efb      	ldrb	r3, [r7, #27]
 8006a8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8006a8c:	d006      	beq.n	8006a9c <create_name+0x54>
 8006a8e:	7efb      	ldrb	r3, [r7, #27]
 8006a90:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a92:	d110      	bne.n	8006ab6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006a94:	e002      	b.n	8006a9c <create_name+0x54>
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	61fb      	str	r3, [r7, #28]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006aa6:	d0f6      	beq.n	8006a96 <create_name+0x4e>
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	4413      	add	r3, r2
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ab2:	d0f0      	beq.n	8006a96 <create_name+0x4e>
			break;
 8006ab4:	e038      	b.n	8006b28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006ab6:	7efb      	ldrb	r3, [r7, #27]
 8006ab8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006aba:	d003      	beq.n	8006ac4 <create_name+0x7c>
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d30c      	bcc.n	8006ade <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2b0b      	cmp	r3, #11
 8006ac8:	d002      	beq.n	8006ad0 <create_name+0x88>
 8006aca:	7efb      	ldrb	r3, [r7, #27]
 8006acc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ace:	d001      	beq.n	8006ad4 <create_name+0x8c>
 8006ad0:	2306      	movs	r3, #6
 8006ad2:	e044      	b.n	8006b5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	230b      	movs	r3, #11
 8006ada:	617b      	str	r3, [r7, #20]
			continue;
 8006adc:	e022      	b.n	8006b24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006ade:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	da04      	bge.n	8006af0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006ae6:	7efb      	ldrb	r3, [r7, #27]
 8006ae8:	3b80      	subs	r3, #128	@ 0x80
 8006aea:	4a1f      	ldr	r2, [pc, #124]	@ (8006b68 <create_name+0x120>)
 8006aec:	5cd3      	ldrb	r3, [r2, r3]
 8006aee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006af0:	7efb      	ldrb	r3, [r7, #27]
 8006af2:	4619      	mov	r1, r3
 8006af4:	481d      	ldr	r0, [pc, #116]	@ (8006b6c <create_name+0x124>)
 8006af6:	f7ff f812 	bl	8005b1e <chk_chr>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <create_name+0xbc>
 8006b00:	2306      	movs	r3, #6
 8006b02:	e02c      	b.n	8006b5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006b04:	7efb      	ldrb	r3, [r7, #27]
 8006b06:	2b60      	cmp	r3, #96	@ 0x60
 8006b08:	d905      	bls.n	8006b16 <create_name+0xce>
 8006b0a:	7efb      	ldrb	r3, [r7, #27]
 8006b0c:	2b7a      	cmp	r3, #122	@ 0x7a
 8006b0e:	d802      	bhi.n	8006b16 <create_name+0xce>
 8006b10:	7efb      	ldrb	r3, [r7, #27]
 8006b12:	3b20      	subs	r3, #32
 8006b14:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	613a      	str	r2, [r7, #16]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	4413      	add	r3, r2
 8006b20:	7efa      	ldrb	r2, [r7, #27]
 8006b22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006b24:	e7a6      	b.n	8006a74 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006b26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	441a      	add	r2, r3
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <create_name+0xf4>
 8006b38:	2306      	movs	r3, #6
 8006b3a:	e010      	b.n	8006b5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2be5      	cmp	r3, #229	@ 0xe5
 8006b42:	d102      	bne.n	8006b4a <create_name+0x102>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2205      	movs	r2, #5
 8006b48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b4a:	7efb      	ldrb	r3, [r7, #27]
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d801      	bhi.n	8006b54 <create_name+0x10c>
 8006b50:	2204      	movs	r2, #4
 8006b52:	e000      	b.n	8006b56 <create_name+0x10e>
 8006b54:	2200      	movs	r2, #0
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	330b      	adds	r3, #11
 8006b5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006b5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3720      	adds	r7, #32
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	0800927c 	.word	0x0800927c
 8006b6c:	080091f0 	.word	0x080091f0

08006b70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006b84:	e002      	b.n	8006b8c <follow_path+0x1c>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b92:	d0f8      	beq.n	8006b86 <follow_path+0x16>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b9a:	d0f4      	beq.n	8006b86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b1f      	cmp	r3, #31
 8006ba8:	d80a      	bhi.n	8006bc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2280      	movs	r2, #128	@ 0x80
 8006bae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff fcfa 	bl	80065ae <dir_sdi>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]
 8006bbe:	e043      	b.n	8006c48 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff ff3f 	bl	8006a48 <create_name>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d134      	bne.n	8006c3e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff feb0 	bl	800693a <dir_find>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006be4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d127      	bne.n	8006c42 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d122      	bne.n	8006c42 <follow_path+0xd2>
 8006bfc:	2305      	movs	r3, #5
 8006bfe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006c00:	e01f      	b.n	8006c42 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11c      	bne.n	8006c46 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	799b      	ldrb	r3, [r3, #6]
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c18:	2305      	movs	r3, #5
 8006c1a:	75fb      	strb	r3, [r7, #23]
 8006c1c:	e014      	b.n	8006c48 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2c:	4413      	add	r3, r2
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff fe43 	bl	80068bc <ld_clust>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c3c:	e7c0      	b.n	8006bc0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006c3e:	bf00      	nop
 8006c40:	e002      	b.n	8006c48 <follow_path+0xd8>
				break;
 8006c42:	bf00      	nop
 8006c44:	e000      	b.n	8006c48 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c46:	bf00      	nop
			}
		}
	}

	return res;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b087      	sub	sp, #28
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d031      	beq.n	8006ccc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	e002      	b.n	8006c76 <get_ldnumber+0x24>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	3301      	adds	r3, #1
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d903      	bls.n	8006c86 <get_ldnumber+0x34>
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c84:	d1f4      	bne.n	8006c70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c8c:	d11c      	bne.n	8006cc8 <get_ldnumber+0x76>
			tp = *path;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	60fa      	str	r2, [r7, #12]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	3b30      	subs	r3, #48	@ 0x30
 8006c9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	d80e      	bhi.n	8006cc4 <get_ldnumber+0x72>
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d10a      	bne.n	8006cc4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d107      	bne.n	8006cc4 <get_ldnumber+0x72>
					vol = (int)i;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	e002      	b.n	8006cce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ccc:	693b      	ldr	r3, [r7, #16]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	70da      	strb	r2, [r3, #3]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff f8dc 	bl	8005eb4 <move_window>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <check_fs+0x2a>
 8006d02:	2304      	movs	r3, #4
 8006d04:	e038      	b.n	8006d78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3330      	adds	r3, #48	@ 0x30
 8006d0a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe fe20 	bl	8005954 <ld_word>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d001      	beq.n	8006d24 <check_fs+0x48>
 8006d20:	2303      	movs	r3, #3
 8006d22:	e029      	b.n	8006d78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d2a:	2be9      	cmp	r3, #233	@ 0xe9
 8006d2c:	d009      	beq.n	8006d42 <check_fs+0x66>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d34:	2beb      	cmp	r3, #235	@ 0xeb
 8006d36:	d11e      	bne.n	8006d76 <check_fs+0x9a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006d3e:	2b90      	cmp	r3, #144	@ 0x90
 8006d40:	d119      	bne.n	8006d76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3330      	adds	r3, #48	@ 0x30
 8006d46:	3336      	adds	r3, #54	@ 0x36
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe fe1b 	bl	8005984 <ld_dword>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d54:	4a0a      	ldr	r2, [pc, #40]	@ (8006d80 <check_fs+0xa4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <check_fs+0x82>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e00c      	b.n	8006d78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3330      	adds	r3, #48	@ 0x30
 8006d62:	3352      	adds	r3, #82	@ 0x52
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fe0d 	bl	8005984 <ld_dword>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4a05      	ldr	r2, [pc, #20]	@ (8006d84 <check_fs+0xa8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d101      	bne.n	8006d76 <check_fs+0x9a>
 8006d72:	2300      	movs	r3, #0
 8006d74:	e000      	b.n	8006d78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d76:	2302      	movs	r3, #2
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	00544146 	.word	0x00544146
 8006d84:	33544146 	.word	0x33544146

08006d88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b096      	sub	sp, #88	@ 0x58
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff ff58 	bl	8006c52 <get_ldnumber>
 8006da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da01      	bge.n	8006dae <find_volume+0x26>
 8006daa:	230b      	movs	r3, #11
 8006dac:	e22d      	b.n	800720a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dae:	4aa1      	ldr	r2, [pc, #644]	@ (8007034 <find_volume+0x2ac>)
 8006db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <find_volume+0x3a>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	e223      	b.n	800720a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dc6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01a      	beq.n	8006e0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fd1b 	bl	8005818 <disk_status>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006de8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10c      	bne.n	8006e0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <find_volume+0x82>
 8006dfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e06:	230a      	movs	r3, #10
 8006e08:	e1ff      	b.n	800720a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e1fd      	b.n	800720a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fd13 	bl	800584c <disk_initialize>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e1e6      	b.n	800720a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <find_volume+0xca>
 8006e42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e4e:	230a      	movs	r3, #10
 8006e50:	e1db      	b.n	800720a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e5a:	f7ff ff3f 	bl	8006cdc <check_fs>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d149      	bne.n	8006f00 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e70:	e01e      	b.n	8006eb0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006e80:	4413      	add	r3, r2
 8006e82:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	3304      	adds	r3, #4
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d006      	beq.n	8006e9c <find_volume+0x114>
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	3308      	adds	r3, #8
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fd76 	bl	8005984 <ld_dword>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	e000      	b.n	8006e9e <find_volume+0x116>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	3358      	adds	r3, #88	@ 0x58
 8006ea4:	443b      	add	r3, r7
 8006ea6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eac:	3301      	adds	r3, #1
 8006eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d9dd      	bls.n	8006e72 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <find_volume+0x13e>
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	3358      	adds	r3, #88	@ 0x58
 8006ecc:	443b      	add	r3, r7
 8006ece:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ed2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <find_volume+0x15e>
 8006eda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006edc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ede:	f7ff fefd 	bl	8006cdc <check_fs>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	e000      	b.n	8006ee8 <find_volume+0x160>
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006eec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d905      	bls.n	8006f00 <find_volume+0x178>
 8006ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d9e2      	bls.n	8006ec6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d101      	bne.n	8006f0c <find_volume+0x184>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e17e      	b.n	800720a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d901      	bls.n	8006f18 <find_volume+0x190>
 8006f14:	230d      	movs	r3, #13
 8006f16:	e178      	b.n	800720a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	3330      	adds	r3, #48	@ 0x30
 8006f1c:	330b      	adds	r3, #11
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fd18 	bl	8005954 <ld_word>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f2a:	d001      	beq.n	8006f30 <find_volume+0x1a8>
 8006f2c:	230d      	movs	r3, #13
 8006f2e:	e16c      	b.n	800720a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	3330      	adds	r3, #48	@ 0x30
 8006f34:	3316      	adds	r3, #22
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fd0c 	bl	8005954 <ld_word>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <find_volume+0x1cc>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	3330      	adds	r3, #48	@ 0x30
 8006f4a:	3324      	adds	r3, #36	@ 0x24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fd19 	bl	8005984 <ld_dword>
 8006f52:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f58:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	789b      	ldrb	r3, [r3, #2]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d005      	beq.n	8006f78 <find_volume+0x1f0>
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6e:	789b      	ldrb	r3, [r3, #2]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d001      	beq.n	8006f78 <find_volume+0x1f0>
 8006f74:	230d      	movs	r3, #13
 8006f76:	e148      	b.n	800720a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7a:	789b      	ldrb	r3, [r3, #2]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f80:	fb02 f303 	mul.w	r3, r2, r3
 8006f84:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f94:	895b      	ldrh	r3, [r3, #10]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d008      	beq.n	8006fac <find_volume+0x224>
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9c:	895b      	ldrh	r3, [r3, #10]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	895b      	ldrh	r3, [r3, #10]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <find_volume+0x228>
 8006fac:	230d      	movs	r3, #13
 8006fae:	e12c      	b.n	800720a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	3330      	adds	r3, #48	@ 0x30
 8006fb4:	3311      	adds	r3, #17
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fccc 	bl	8005954 <ld_word>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	891b      	ldrh	r3, [r3, #8]
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <find_volume+0x24e>
 8006fd2:	230d      	movs	r3, #13
 8006fd4:	e119      	b.n	800720a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	3330      	adds	r3, #48	@ 0x30
 8006fda:	3313      	adds	r3, #19
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe fcb9 	bl	8005954 <ld_word>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d106      	bne.n	8006ffa <find_volume+0x272>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fee:	3330      	adds	r3, #48	@ 0x30
 8006ff0:	3320      	adds	r3, #32
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fcc6 	bl	8005984 <ld_dword>
 8006ff8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffc:	3330      	adds	r3, #48	@ 0x30
 8006ffe:	330e      	adds	r3, #14
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fca7 	bl	8005954 <ld_word>
 8007006:	4603      	mov	r3, r0
 8007008:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800700a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <find_volume+0x28c>
 8007010:	230d      	movs	r3, #13
 8007012:	e0fa      	b.n	800720a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007014:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007018:	4413      	add	r3, r2
 800701a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800701c:	8912      	ldrh	r2, [r2, #8]
 800701e:	0912      	lsrs	r2, r2, #4
 8007020:	b292      	uxth	r2, r2
 8007022:	4413      	add	r3, r2
 8007024:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	429a      	cmp	r2, r3
 800702c:	d204      	bcs.n	8007038 <find_volume+0x2b0>
 800702e:	230d      	movs	r3, #13
 8007030:	e0eb      	b.n	800720a <find_volume+0x482>
 8007032:	bf00      	nop
 8007034:	200007f4 	.word	0x200007f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800703a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007040:	8952      	ldrh	r2, [r2, #10]
 8007042:	fbb3 f3f2 	udiv	r3, r3, r2
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <find_volume+0x2ca>
 800704e:	230d      	movs	r3, #13
 8007050:	e0db      	b.n	800720a <find_volume+0x482>
		fmt = FS_FAT32;
 8007052:	2303      	movs	r3, #3
 8007054:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800705e:	4293      	cmp	r3, r2
 8007060:	d802      	bhi.n	8007068 <find_volume+0x2e0>
 8007062:	2302      	movs	r3, #2
 8007064:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800706e:	4293      	cmp	r3, r2
 8007070:	d802      	bhi.n	8007078 <find_volume+0x2f0>
 8007072:	2301      	movs	r3, #1
 8007074:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	1c9a      	adds	r2, r3, #2
 800707c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007082:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007084:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007086:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800708a:	441a      	add	r2, r3
 800708c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007090:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007094:	441a      	add	r2, r3
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800709a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d11e      	bne.n	80070e0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	3330      	adds	r3, #48	@ 0x30
 80070a6:	332a      	adds	r3, #42	@ 0x2a
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe fc53 	bl	8005954 <ld_word>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <find_volume+0x330>
 80070b4:	230d      	movs	r3, #13
 80070b6:	e0a8      	b.n	800720a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80070b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ba:	891b      	ldrh	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <find_volume+0x33c>
 80070c0:	230d      	movs	r3, #13
 80070c2:	e0a2      	b.n	800720a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	3330      	adds	r3, #48	@ 0x30
 80070c8:	332c      	adds	r3, #44	@ 0x2c
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fc5a 	bl	8005984 <ld_dword>
 80070d0:	4602      	mov	r2, r0
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80070d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80070de:	e01f      	b.n	8007120 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80070e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e2:	891b      	ldrh	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <find_volume+0x364>
 80070e8:	230d      	movs	r3, #13
 80070ea:	e08e      	b.n	800720a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80070ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070f2:	441a      	add	r2, r3
 80070f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80070f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d103      	bne.n	8007108 <find_volume+0x380>
 8007100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	e00a      	b.n	800711e <find_volume+0x396>
 8007108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	4613      	mov	r3, r2
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	4413      	add	r3, r2
 8007112:	085a      	lsrs	r2, r3, #1
 8007114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800711e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007126:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800712a:	0a5b      	lsrs	r3, r3, #9
 800712c:	429a      	cmp	r2, r3
 800712e:	d201      	bcs.n	8007134 <find_volume+0x3ac>
 8007130:	230d      	movs	r3, #13
 8007132:	e06a      	b.n	800720a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	611a      	str	r2, [r3, #16]
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	2280      	movs	r2, #128	@ 0x80
 8007148:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800714a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800714e:	2b03      	cmp	r3, #3
 8007150:	d149      	bne.n	80071e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	3330      	adds	r3, #48	@ 0x30
 8007156:	3330      	adds	r3, #48	@ 0x30
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fbfb 	bl	8005954 <ld_word>
 800715e:	4603      	mov	r3, r0
 8007160:	2b01      	cmp	r3, #1
 8007162:	d140      	bne.n	80071e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007166:	3301      	adds	r3, #1
 8007168:	4619      	mov	r1, r3
 800716a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800716c:	f7fe fea2 	bl	8005eb4 <move_window>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d137      	bne.n	80071e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	2200      	movs	r2, #0
 800717a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800717c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717e:	3330      	adds	r3, #48	@ 0x30
 8007180:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fbe5 	bl	8005954 <ld_word>
 800718a:	4603      	mov	r3, r0
 800718c:	461a      	mov	r2, r3
 800718e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007192:	429a      	cmp	r2, r3
 8007194:	d127      	bne.n	80071e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007198:	3330      	adds	r3, #48	@ 0x30
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fbf2 	bl	8005984 <ld_dword>
 80071a0:	4603      	mov	r3, r0
 80071a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007214 <find_volume+0x48c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d11e      	bne.n	80071e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80071a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071aa:	3330      	adds	r3, #48	@ 0x30
 80071ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fbe7 	bl	8005984 <ld_dword>
 80071b6:	4603      	mov	r3, r0
 80071b8:	4a17      	ldr	r2, [pc, #92]	@ (8007218 <find_volume+0x490>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d113      	bne.n	80071e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	3330      	adds	r3, #48	@ 0x30
 80071c2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fbdc 	bl	8005984 <ld_dword>
 80071cc:	4602      	mov	r2, r0
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	3330      	adds	r3, #48	@ 0x30
 80071d6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fbd2 	bl	8005984 <ld_dword>
 80071e0:	4602      	mov	r2, r0
 80071e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80071e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80071ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80071ee:	4b0b      	ldr	r3, [pc, #44]	@ (800721c <find_volume+0x494>)
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	3301      	adds	r3, #1
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	4b09      	ldr	r3, [pc, #36]	@ (800721c <find_volume+0x494>)
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	4b08      	ldr	r3, [pc, #32]	@ (800721c <find_volume+0x494>)
 80071fc:	881a      	ldrh	r2, [r3, #0]
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007202:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007204:	f7fe fdee 	bl	8005de4 <clear_lock>
#endif
	return FR_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3758      	adds	r7, #88	@ 0x58
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	41615252 	.word	0x41615252
 8007218:	61417272 	.word	0x61417272
 800721c:	200007f8 	.word	0x200007f8

08007220 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800722a:	2309      	movs	r3, #9
 800722c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01c      	beq.n	800726e <validate+0x4e>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d018      	beq.n	800726e <validate+0x4e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d013      	beq.n	800726e <validate+0x4e>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	889a      	ldrh	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	88db      	ldrh	r3, [r3, #6]
 8007250:	429a      	cmp	r2, r3
 8007252:	d10c      	bne.n	800726e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fadc 	bl	8005818 <disk_status>
 8007260:	4603      	mov	r3, r0
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <validate+0x4e>
			res = FR_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <validate+0x5a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	e000      	b.n	800727c <validate+0x5c>
 800727a:	2300      	movs	r3, #0
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	6013      	str	r3, [r2, #0]
	return res;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800729e:	f107 0310 	add.w	r3, r7, #16
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fcd5 	bl	8006c52 <get_ldnumber>
 80072a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	da01      	bge.n	80072b4 <f_mount+0x28>
 80072b0:	230b      	movs	r3, #11
 80072b2:	e02b      	b.n	800730c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80072b4:	4a17      	ldr	r2, [pc, #92]	@ (8007314 <f_mount+0x88>)
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80072c4:	69b8      	ldr	r0, [r7, #24]
 80072c6:	f7fe fd8d 	bl	8005de4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	490d      	ldr	r1, [pc, #52]	@ (8007314 <f_mount+0x88>)
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <f_mount+0x66>
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d001      	beq.n	80072f6 <f_mount+0x6a>
 80072f2:	2300      	movs	r3, #0
 80072f4:	e00a      	b.n	800730c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80072f6:	f107 010c 	add.w	r1, r7, #12
 80072fa:	f107 0308 	add.w	r3, r7, #8
 80072fe:	2200      	movs	r2, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff fd41 	bl	8006d88 <find_volume>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	200007f4 	.word	0x200007f4

08007318 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b098      	sub	sp, #96	@ 0x60
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <f_open+0x18>
 800732c:	2309      	movs	r3, #9
 800732e:	e1a9      	b.n	8007684 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007336:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007338:	79fa      	ldrb	r2, [r7, #7]
 800733a:	f107 0110 	add.w	r1, r7, #16
 800733e:	f107 0308 	add.w	r3, r7, #8
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff fd20 	bl	8006d88 <find_volume>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800734e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 818d 	bne.w	8007672 <f_open+0x35a>
		dj.obj.fs = fs;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	f107 0314 	add.w	r3, r7, #20
 8007362:	4611      	mov	r1, r2
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fc03 	bl	8006b70 <follow_path>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007374:	2b00      	cmp	r3, #0
 8007376:	d118      	bne.n	80073aa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007378:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800737c:	b25b      	sxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	da03      	bge.n	800738a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007382:	2306      	movs	r3, #6
 8007384:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007388:	e00f      	b.n	80073aa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	2b01      	cmp	r3, #1
 800738e:	bf8c      	ite	hi
 8007390:	2301      	movhi	r3, #1
 8007392:	2300      	movls	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	461a      	mov	r2, r3
 8007398:	f107 0314 	add.w	r3, r7, #20
 800739c:	4611      	mov	r1, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fbd8 	bl	8005b54 <chk_lock>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	f003 031c 	and.w	r3, r3, #28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d07f      	beq.n	80074b4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80073b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d017      	beq.n	80073ec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80073bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d10e      	bne.n	80073e2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80073c4:	f7fe fc22 	bl	8005c0c <enq_lock>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d006      	beq.n	80073dc <f_open+0xc4>
 80073ce:	f107 0314 	add.w	r3, r7, #20
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fb06 	bl	80069e4 <dir_register>
 80073d8:	4603      	mov	r3, r0
 80073da:	e000      	b.n	80073de <f_open+0xc6>
 80073dc:	2312      	movs	r3, #18
 80073de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	f043 0308 	orr.w	r3, r3, #8
 80073e8:	71fb      	strb	r3, [r7, #7]
 80073ea:	e010      	b.n	800740e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80073ec:	7ebb      	ldrb	r3, [r7, #26]
 80073ee:	f003 0311 	and.w	r3, r3, #17
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <f_open+0xe6>
					res = FR_DENIED;
 80073f6:	2307      	movs	r3, #7
 80073f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80073fc:	e007      	b.n	800740e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <f_open+0xf6>
 8007408:	2308      	movs	r3, #8
 800740a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800740e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007412:	2b00      	cmp	r3, #0
 8007414:	d168      	bne.n	80074e8 <f_open+0x1d0>
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d063      	beq.n	80074e8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007420:	f7fe f998 	bl	8005754 <get_fattime>
 8007424:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007428:	330e      	adds	r3, #14
 800742a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe fae7 	bl	8005a00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007434:	3316      	adds	r3, #22
 8007436:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fae1 	bl	8005a00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800743e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007440:	330b      	adds	r3, #11
 8007442:	2220      	movs	r2, #32
 8007444:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800744a:	4611      	mov	r1, r2
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff fa35 	bl	80068bc <ld_clust>
 8007452:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007458:	2200      	movs	r2, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fa4d 	bl	80068fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007462:	331c      	adds	r3, #28
 8007464:	2100      	movs	r1, #0
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe faca 	bl	8005a00 <st_dword>
					fs->wflag = 1;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2201      	movs	r2, #1
 8007470:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007474:	2b00      	cmp	r3, #0
 8007476:	d037      	beq.n	80074e8 <f_open+0x1d0>
						dw = fs->winsect;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800747e:	f107 0314 	add.w	r3, r7, #20
 8007482:	2200      	movs	r2, #0
 8007484:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe ff60 	bl	800634c <remove_chain>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007492:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007496:	2b00      	cmp	r3, #0
 8007498:	d126      	bne.n	80074e8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fd08 	bl	8005eb4 <move_window>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074ae:	3a01      	subs	r2, #1
 80074b0:	60da      	str	r2, [r3, #12]
 80074b2:	e019      	b.n	80074e8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80074b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d115      	bne.n	80074e8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80074bc:	7ebb      	ldrb	r3, [r7, #26]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <f_open+0x1b6>
					res = FR_NO_FILE;
 80074c6:	2304      	movs	r3, #4
 80074c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80074cc:	e00c      	b.n	80074e8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d007      	beq.n	80074e8 <f_open+0x1d0>
 80074d8:	7ebb      	ldrb	r3, [r7, #26]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <f_open+0x1d0>
						res = FR_DENIED;
 80074e2:	2307      	movs	r3, #7
 80074e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80074e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d126      	bne.n	800753e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007500:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800750a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	2b01      	cmp	r3, #1
 8007514:	bf8c      	ite	hi
 8007516:	2301      	movhi	r3, #1
 8007518:	2300      	movls	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	461a      	mov	r2, r3
 800751e:	f107 0314 	add.w	r3, r7, #20
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe fb93 	bl	8005c50 <inc_lock>
 800752a:	4602      	mov	r2, r0
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <f_open+0x226>
 8007538:	2302      	movs	r3, #2
 800753a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800753e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007542:	2b00      	cmp	r3, #0
 8007544:	f040 8095 	bne.w	8007672 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff f9b4 	bl	80068bc <ld_clust>
 8007554:	4602      	mov	r2, r0
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800755a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755c:	331c      	adds	r3, #28
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fa10 	bl	8005984 <ld_dword>
 8007564:	4602      	mov	r2, r0
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	88da      	ldrh	r2, [r3, #6]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	79fa      	ldrb	r2, [r7, #7]
 8007582:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3330      	adds	r3, #48	@ 0x30
 800759a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fa7a 	bl	8005a9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d060      	beq.n	8007672 <f_open+0x35a>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d05c      	beq.n	8007672 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	895b      	ldrh	r3, [r3, #10]
 80075c4:	025b      	lsls	r3, r3, #9
 80075c6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80075d4:	e016      	b.n	8007604 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fd25 	bl	800602a <get_fat>
 80075e0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80075e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d802      	bhi.n	80075ee <f_open+0x2d6>
 80075e8:	2302      	movs	r3, #2
 80075ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80075ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f4:	d102      	bne.n	80075fc <f_open+0x2e4>
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80075fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	657b      	str	r3, [r7, #84]	@ 0x54
 8007604:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007608:	2b00      	cmp	r3, #0
 800760a:	d103      	bne.n	8007614 <f_open+0x2fc>
 800760c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800760e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007610:	429a      	cmp	r2, r3
 8007612:	d8e0      	bhi.n	80075d6 <f_open+0x2be>
				}
				fp->clust = clst;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007618:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800761a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800761e:	2b00      	cmp	r3, #0
 8007620:	d127      	bne.n	8007672 <f_open+0x35a>
 8007622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007628:	2b00      	cmp	r3, #0
 800762a:	d022      	beq.n	8007672 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fcdb 	bl	8005fec <clust2sect>
 8007636:	6478      	str	r0, [r7, #68]	@ 0x44
 8007638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800763a:	2b00      	cmp	r3, #0
 800763c:	d103      	bne.n	8007646 <f_open+0x32e>
						res = FR_INT_ERR;
 800763e:	2302      	movs	r3, #2
 8007640:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007644:	e015      	b.n	8007672 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007648:	0a5a      	lsrs	r2, r3, #9
 800764a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764c:	441a      	add	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	7858      	ldrb	r0, [r3, #1]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1a      	ldr	r2, [r3, #32]
 8007660:	2301      	movs	r3, #1
 8007662:	f7fe f919 	bl	8005898 <disk_read>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <f_open+0x35a>
 800766c:	2301      	movs	r3, #1
 800766e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007672:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <f_open+0x368>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007680:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007684:	4618      	mov	r0, r3
 8007686:	3760      	adds	r7, #96	@ 0x60
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08e      	sub	sp, #56	@ 0x38
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f107 0214 	add.w	r2, r7, #20
 80076aa:	4611      	mov	r1, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff fdb7 	bl	8007220 <validate>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80076b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <f_read+0x44>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	7d5b      	ldrb	r3, [r3, #21]
 80076c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80076c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <f_read+0x4a>
 80076d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076d4:	e115      	b.n	8007902 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	7d1b      	ldrb	r3, [r3, #20]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <f_read+0x5a>
 80076e2:	2307      	movs	r3, #7
 80076e4:	e10d      	b.n	8007902 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	f240 80fe 	bls.w	80078f8 <f_read+0x26c>
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007700:	e0fa      	b.n	80078f8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 80c6 	bne.w	800789c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	0a5b      	lsrs	r3, r3, #9
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	8952      	ldrh	r2, [r2, #10]
 800771a:	3a01      	subs	r2, #1
 800771c:	4013      	ands	r3, r2
 800771e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d12f      	bne.n	8007786 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	633b      	str	r3, [r7, #48]	@ 0x30
 8007734:	e013      	b.n	800775e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	4619      	mov	r1, r3
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7fe fefe 	bl	8006546 <clmt_clust>
 800774a:	6338      	str	r0, [r7, #48]	@ 0x30
 800774c:	e007      	b.n	800775e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fc67 	bl	800602a <get_fat>
 800775c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	2b01      	cmp	r3, #1
 8007762:	d804      	bhi.n	800776e <f_read+0xe2>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2202      	movs	r2, #2
 8007768:	755a      	strb	r2, [r3, #21]
 800776a:	2302      	movs	r3, #2
 800776c:	e0c9      	b.n	8007902 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d104      	bne.n	8007780 <f_read+0xf4>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	755a      	strb	r2, [r3, #21]
 800777c:	2301      	movs	r3, #1
 800777e:	e0c0      	b.n	8007902 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007784:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	4619      	mov	r1, r3
 800778e:	4610      	mov	r0, r2
 8007790:	f7fe fc2c 	bl	8005fec <clust2sect>
 8007794:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <f_read+0x11a>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2202      	movs	r2, #2
 80077a0:	755a      	strb	r2, [r3, #21]
 80077a2:	2302      	movs	r3, #2
 80077a4:	e0ad      	b.n	8007902 <f_read+0x276>
			sect += csect;
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	4413      	add	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	0a5b      	lsrs	r3, r3, #9
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80077b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d039      	beq.n	800782e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077be:	4413      	add	r3, r2
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	8952      	ldrh	r2, [r2, #10]
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d905      	bls.n	80077d4 <f_read+0x148>
					cc = fs->csize - csect;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	895b      	ldrh	r3, [r3, #10]
 80077cc:	461a      	mov	r2, r3
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	7858      	ldrb	r0, [r3, #1]
 80077d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077de:	f7fe f85b 	bl	8005898 <disk_read>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d004      	beq.n	80077f2 <f_read+0x166>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	755a      	strb	r2, [r3, #21]
 80077ee:	2301      	movs	r3, #1
 80077f0:	e087      	b.n	8007902 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	7d1b      	ldrb	r3, [r3, #20]
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da14      	bge.n	8007826 <f_read+0x19a>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a1a      	ldr	r2, [r3, #32]
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007806:	429a      	cmp	r2, r3
 8007808:	d90d      	bls.n	8007826 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a1a      	ldr	r2, [r3, #32]
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	025b      	lsls	r3, r3, #9
 8007814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007816:	18d0      	adds	r0, r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3330      	adds	r3, #48	@ 0x30
 800781c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007820:	4619      	mov	r1, r3
 8007822:	f7fe f919 	bl	8005a58 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	025b      	lsls	r3, r3, #9
 800782a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800782c:	e050      	b.n	80078d0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	429a      	cmp	r2, r3
 8007836:	d02e      	beq.n	8007896 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	7d1b      	ldrb	r3, [r3, #20]
 800783c:	b25b      	sxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	da18      	bge.n	8007874 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	7858      	ldrb	r0, [r3, #1]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a1a      	ldr	r2, [r3, #32]
 8007850:	2301      	movs	r3, #1
 8007852:	f7fe f841 	bl	80058d8 <disk_write>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <f_read+0x1da>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	755a      	strb	r2, [r3, #21]
 8007862:	2301      	movs	r3, #1
 8007864:	e04d      	b.n	8007902 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	7d1b      	ldrb	r3, [r3, #20]
 800786a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800786e:	b2da      	uxtb	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	7858      	ldrb	r0, [r3, #1]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800787e:	2301      	movs	r3, #1
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	f7fe f809 	bl	8005898 <disk_read>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <f_read+0x20a>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	755a      	strb	r2, [r3, #21]
 8007892:	2301      	movs	r3, #1
 8007894:	e035      	b.n	8007902 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80078a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80078aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d901      	bls.n	80078b6 <f_read+0x22a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c4:	4413      	add	r3, r2
 80078c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078c8:	4619      	mov	r1, r3
 80078ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078cc:	f7fe f8c4 	bl	8005a58 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d4:	4413      	add	r3, r2
 80078d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	699a      	ldr	r2, [r3, #24]
 80078dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078de:	441a      	add	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	619a      	str	r2, [r3, #24]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ea:	441a      	add	r2, r3
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f47f af01 	bne.w	8007702 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3738      	adds	r7, #56	@ 0x38
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b08c      	sub	sp, #48	@ 0x30
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f107 0210 	add.w	r2, r7, #16
 8007928:	4611      	mov	r1, r2
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff fc78 	bl	8007220 <validate>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800793a:	2b00      	cmp	r3, #0
 800793c:	d107      	bne.n	800794e <f_write+0x44>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	7d5b      	ldrb	r3, [r3, #21]
 8007942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <f_write+0x4a>
 800794e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007952:	e14b      	b.n	8007bec <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	7d1b      	ldrb	r3, [r3, #20]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <f_write+0x5a>
 8007960:	2307      	movs	r3, #7
 8007962:	e143      	b.n	8007bec <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	441a      	add	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	429a      	cmp	r2, r3
 8007972:	f080 812d 	bcs.w	8007bd0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	43db      	mvns	r3, r3
 800797c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800797e:	e127      	b.n	8007bd0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 80e3 	bne.w	8007b54 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	0a5b      	lsrs	r3, r3, #9
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	8952      	ldrh	r2, [r2, #10]
 8007998:	3a01      	subs	r2, #1
 800799a:	4013      	ands	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d143      	bne.n	8007a2c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10c      	bne.n	80079c6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80079b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d11a      	bne.n	80079ee <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2100      	movs	r1, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fd2a 	bl	8006416 <create_chain>
 80079c2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80079c4:	e013      	b.n	80079ee <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	4619      	mov	r1, r3
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7fe fdb6 	bl	8006546 <clmt_clust>
 80079da:	62b8      	str	r0, [r7, #40]	@ 0x28
 80079dc:	e007      	b.n	80079ee <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7fe fd15 	bl	8006416 <create_chain>
 80079ec:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80f2 	beq.w	8007bda <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80079f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d104      	bne.n	8007a06 <f_write+0xfc>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2202      	movs	r2, #2
 8007a00:	755a      	strb	r2, [r3, #21]
 8007a02:	2302      	movs	r3, #2
 8007a04:	e0f2      	b.n	8007bec <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0c:	d104      	bne.n	8007a18 <f_write+0x10e>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	755a      	strb	r2, [r3, #21]
 8007a14:	2301      	movs	r3, #1
 8007a16:	e0e9      	b.n	8007bec <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a1c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d102      	bne.n	8007a2c <f_write+0x122>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a2a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	7d1b      	ldrb	r3, [r3, #20]
 8007a30:	b25b      	sxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da18      	bge.n	8007a68 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	7858      	ldrb	r0, [r3, #1]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a1a      	ldr	r2, [r3, #32]
 8007a44:	2301      	movs	r3, #1
 8007a46:	f7fd ff47 	bl	80058d8 <disk_write>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d004      	beq.n	8007a5a <f_write+0x150>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	755a      	strb	r2, [r3, #21]
 8007a56:	2301      	movs	r3, #1
 8007a58:	e0c8      	b.n	8007bec <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	7d1b      	ldrb	r3, [r3, #20]
 8007a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f7fe fabb 	bl	8005fec <clust2sect>
 8007a76:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d104      	bne.n	8007a88 <f_write+0x17e>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2202      	movs	r2, #2
 8007a82:	755a      	strb	r2, [r3, #21]
 8007a84:	2302      	movs	r3, #2
 8007a86:	e0b1      	b.n	8007bec <f_write+0x2e2>
			sect += csect;
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	0a5b      	lsrs	r3, r3, #9
 8007a94:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d03c      	beq.n	8007b16 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	8952      	ldrh	r2, [r2, #10]
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d905      	bls.n	8007ab6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	895b      	ldrh	r3, [r3, #10]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	7858      	ldrb	r0, [r3, #1]
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	69f9      	ldr	r1, [r7, #28]
 8007ac0:	f7fd ff0a 	bl	80058d8 <disk_write>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <f_write+0x1ca>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	755a      	strb	r2, [r3, #21]
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e08b      	b.n	8007bec <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a1a      	ldr	r2, [r3, #32]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	6a3a      	ldr	r2, [r7, #32]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d915      	bls.n	8007b0e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1a      	ldr	r2, [r3, #32]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	025b      	lsls	r3, r3, #9
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	4413      	add	r3, r2
 8007af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007afa:	4619      	mov	r1, r3
 8007afc:	f7fd ffac 	bl	8005a58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	7d1b      	ldrb	r3, [r3, #20]
 8007b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	025b      	lsls	r3, r3, #9
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007b14:	e03f      	b.n	8007b96 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d016      	beq.n	8007b4e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	699a      	ldr	r2, [r3, #24]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d210      	bcs.n	8007b4e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	7858      	ldrb	r0, [r3, #1]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b36:	2301      	movs	r3, #1
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	f7fd fead 	bl	8005898 <disk_read>
 8007b3e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2201      	movs	r2, #1
 8007b48:	755a      	strb	r2, [r3, #21]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e04e      	b.n	8007bec <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d901      	bls.n	8007b6e <f_write+0x264>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7c:	4413      	add	r3, r2
 8007b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd ff68 	bl	8005a58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	7d1b      	ldrb	r3, [r3, #20]
 8007b8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	4413      	add	r3, r2
 8007b9c:	61fb      	str	r3, [r7, #28]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	441a      	add	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	619a      	str	r2, [r3, #24]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	bf38      	it	cc
 8007bb6:	461a      	movcc	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	60da      	str	r2, [r3, #12]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc2:	441a      	add	r2, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f47f aed4 	bne.w	8007980 <f_write+0x76>
 8007bd8:	e000      	b.n	8007bdc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007bda:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	7d1b      	ldrb	r3, [r3, #20]
 8007be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3730      	adds	r7, #48	@ 0x30
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f107 0208 	add.w	r2, r7, #8
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff fb0b 	bl	8007220 <validate>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d168      	bne.n	8007ce6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7d1b      	ldrb	r3, [r3, #20]
 8007c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d062      	beq.n	8007ce6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7d1b      	ldrb	r3, [r3, #20]
 8007c24:	b25b      	sxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	da15      	bge.n	8007c56 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	7858      	ldrb	r0, [r3, #1]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1a      	ldr	r2, [r3, #32]
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f7fd fe4d 	bl	80058d8 <disk_write>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <f_sync+0x54>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e04f      	b.n	8007ce8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7d1b      	ldrb	r3, [r3, #20]
 8007c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c56:	f7fd fd7d 	bl	8005754 <get_fattime>
 8007c5a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c62:	4619      	mov	r1, r3
 8007c64:	4610      	mov	r0, r2
 8007c66:	f7fe f925 	bl	8005eb4 <move_window>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d138      	bne.n	8007ce6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	330b      	adds	r3, #11
 8007c7e:	781a      	ldrb	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	330b      	adds	r3, #11
 8007c84:	f042 0220 	orr.w	r2, r2, #32
 8007c88:	b2d2      	uxtb	r2, r2
 8007c8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	461a      	mov	r2, r3
 8007c96:	68f9      	ldr	r1, [r7, #12]
 8007c98:	f7fe fe2f 	bl	80068fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f103 021c 	add.w	r2, r3, #28
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f7fd fea9 	bl	8005a00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3316      	adds	r3, #22
 8007cb2:	6939      	ldr	r1, [r7, #16]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fd fea3 	bl	8005a00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3312      	adds	r3, #18
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fd fe82 	bl	80059ca <st_word>
					fs->wflag = 1;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe f91e 	bl	8005f10 <sync_fs>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	7d1b      	ldrb	r3, [r3, #20]
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff ff7b 	bl	8007bf4 <f_sync>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d118      	bne.n	8007d3a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f107 0208 	add.w	r2, r7, #8
 8007d0e:	4611      	mov	r1, r2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fa85 	bl	8007220 <validate>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10c      	bne.n	8007d3a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe f821 	bl	8005d6c <dec_lock>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b090      	sub	sp, #64	@ 0x40
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f107 0208 	add.w	r2, r7, #8
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fa62 	bl	8007220 <validate>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007d62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <f_lseek+0x2e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	7d5b      	ldrb	r3, [r3, #21]
 8007d6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007d72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <f_lseek+0x3c>
 8007d7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007d7e:	e1e6      	b.n	800814e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80d1 	beq.w	8007f2c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d15a      	bne.n	8007e48 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	1d1a      	adds	r2, r3, #4
 8007d9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	2302      	movs	r3, #2
 8007da4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d03a      	beq.n	8007e28 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	2300      	movs	r3, #0
 8007db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe f92b 	bl	800602a <get_fat>
 8007dd4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d804      	bhi.n	8007de6 <f_lseek+0xa2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	755a      	strb	r2, [r3, #21]
 8007de2:	2302      	movs	r3, #2
 8007de4:	e1b3      	b.n	800814e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dec:	d104      	bne.n	8007df8 <f_lseek+0xb4>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	755a      	strb	r2, [r3, #21]
 8007df4:	2301      	movs	r3, #1
 8007df6:	e1aa      	b.n	800814e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d0de      	beq.n	8007dc0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d809      	bhi.n	8007e1e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	1d1a      	adds	r2, r3, #4
 8007e0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	1d1a      	adds	r2, r3, #4
 8007e18:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d3c4      	bcc.n	8007db2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e2e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d803      	bhi.n	8007e40 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	e184      	b.n	800814a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007e40:	2311      	movs	r3, #17
 8007e42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007e46:	e180      	b.n	800814a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d902      	bls.n	8007e58 <f_lseek+0x114>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8172 	beq.w	800814a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fe fb6a 	bl	8006546 <clmt_clust>
 8007e72:	4602      	mov	r2, r0
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f7fe f8b3 	bl	8005fec <clust2sect>
 8007e86:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <f_lseek+0x154>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	755a      	strb	r2, [r3, #21]
 8007e94:	2302      	movs	r3, #2
 8007e96:	e15a      	b.n	800814e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	0a5b      	lsrs	r3, r3, #9
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	8952      	ldrh	r2, [r2, #10]
 8007ea2:	3a01      	subs	r2, #1
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8148 	beq.w	800814a <f_lseek+0x406>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	f000 8142 	beq.w	800814a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	7d1b      	ldrb	r3, [r3, #20]
 8007eca:	b25b      	sxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	da18      	bge.n	8007f02 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	7858      	ldrb	r0, [r3, #1]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1a      	ldr	r2, [r3, #32]
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f7fd fcfa 	bl	80058d8 <disk_write>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <f_lseek+0x1b0>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	755a      	strb	r2, [r3, #21]
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e12c      	b.n	800814e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	7d1b      	ldrb	r3, [r3, #20]
 8007ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	7858      	ldrb	r0, [r3, #1]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	f7fd fcc2 	bl	8005898 <disk_read>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <f_lseek+0x1e0>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	755a      	strb	r2, [r3, #21]
 8007f20:	2301      	movs	r3, #1
 8007f22:	e114      	b.n	800814e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	621a      	str	r2, [r3, #32]
 8007f2a:	e10e      	b.n	800814a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d908      	bls.n	8007f48 <f_lseek+0x204>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7d1b      	ldrb	r3, [r3, #20]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f56:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80a7 	beq.w	80080ae <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	895b      	ldrh	r3, [r3, #10]
 8007f64:	025b      	lsls	r3, r3, #9
 8007f66:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d01b      	beq.n	8007fa6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	1e5a      	subs	r2, r3, #1
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	1e59      	subs	r1, r3, #1
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d30f      	bcc.n	8007fa6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	1e5a      	subs	r2, r3, #1
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	425b      	negs	r3, r3
 8007f8e:	401a      	ands	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fa4:	e022      	b.n	8007fec <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d119      	bne.n	8007fe6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fe fa2d 	bl	8006416 <create_chain>
 8007fbc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d104      	bne.n	8007fce <f_lseek+0x28a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	755a      	strb	r2, [r3, #21]
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e0bf      	b.n	800814e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd4:	d104      	bne.n	8007fe0 <f_lseek+0x29c>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	755a      	strb	r2, [r3, #21]
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e0b6      	b.n	800814e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fe4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fea:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d05d      	beq.n	80080ae <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007ff2:	e03a      	b.n	800806a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699a      	ldr	r2, [r3, #24]
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	441a      	add	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7d1b      	ldrb	r3, [r3, #20]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008018:	4618      	mov	r0, r3
 800801a:	f7fe f9fc 	bl	8006416 <create_chain>
 800801e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008022:	2b00      	cmp	r3, #0
 8008024:	d108      	bne.n	8008038 <f_lseek+0x2f4>
							ofs = 0; break;
 8008026:	2300      	movs	r3, #0
 8008028:	603b      	str	r3, [r7, #0]
 800802a:	e022      	b.n	8008072 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008030:	4618      	mov	r0, r3
 8008032:	f7fd fffa 	bl	800602a <get_fat>
 8008036:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803e:	d104      	bne.n	800804a <f_lseek+0x306>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	755a      	strb	r2, [r3, #21]
 8008046:	2301      	movs	r3, #1
 8008048:	e081      	b.n	800814e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800804a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804c:	2b01      	cmp	r3, #1
 800804e:	d904      	bls.n	800805a <f_lseek+0x316>
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008056:	429a      	cmp	r2, r3
 8008058:	d304      	bcc.n	8008064 <f_lseek+0x320>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	755a      	strb	r2, [r3, #21]
 8008060:	2302      	movs	r3, #2
 8008062:	e074      	b.n	800814e <f_lseek+0x40a>
					fp->clust = clst;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008068:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	429a      	cmp	r2, r3
 8008070:	d8c0      	bhi.n	8007ff4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	441a      	add	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008084:	2b00      	cmp	r3, #0
 8008086:	d012      	beq.n	80080ae <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800808c:	4618      	mov	r0, r3
 800808e:	f7fd ffad 	bl	8005fec <clust2sect>
 8008092:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008096:	2b00      	cmp	r3, #0
 8008098:	d104      	bne.n	80080a4 <f_lseek+0x360>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	755a      	strb	r2, [r3, #21]
 80080a0:	2302      	movs	r3, #2
 80080a2:	e054      	b.n	800814e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	0a5b      	lsrs	r3, r3, #9
 80080a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080aa:	4413      	add	r3, r2
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d90a      	bls.n	80080d0 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699a      	ldr	r2, [r3, #24]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7d1b      	ldrb	r3, [r3, #20]
 80080c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d036      	beq.n	800814a <f_lseek+0x406>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d031      	beq.n	800814a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7d1b      	ldrb	r3, [r3, #20]
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	da18      	bge.n	8008122 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	7858      	ldrb	r0, [r3, #1]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1a      	ldr	r2, [r3, #32]
 80080fe:	2301      	movs	r3, #1
 8008100:	f7fd fbea 	bl	80058d8 <disk_write>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <f_lseek+0x3d0>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	755a      	strb	r2, [r3, #21]
 8008110:	2301      	movs	r3, #1
 8008112:	e01c      	b.n	800814e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	7d1b      	ldrb	r3, [r3, #20]
 8008118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800811c:	b2da      	uxtb	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	7858      	ldrb	r0, [r3, #1]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800812c:	2301      	movs	r3, #1
 800812e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008130:	f7fd fbb2 	bl	8005898 <disk_read>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <f_lseek+0x400>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	755a      	strb	r2, [r3, #21]
 8008140:	2301      	movs	r3, #1
 8008142:	e004      	b.n	800814e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008148:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800814a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800814e:	4618      	mov	r0, r3
 8008150:	3740      	adds	r7, #64	@ 0x40
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b092      	sub	sp, #72	@ 0x48
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008162:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008166:	f107 030c 	add.w	r3, r7, #12
 800816a:	2200      	movs	r2, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe fe0b 	bl	8006d88 <find_volume>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008178:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 8099 	bne.w	80082b4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	3b02      	subs	r3, #2
 8008192:	429a      	cmp	r2, r3
 8008194:	d804      	bhi.n	80081a0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e089      	b.n	80082b4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d128      	bne.n	80081fe <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80081ac:	2302      	movs	r3, #2
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80081b4:	f107 0314 	add.w	r3, r7, #20
 80081b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fd ff35 	bl	800602a <get_fat>
 80081c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80081c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d103      	bne.n	80081d2 <f_getfree+0x7c>
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80081d0:	e063      	b.n	800829a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80081d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d103      	bne.n	80081e0 <f_getfree+0x8a>
 80081d8:	2302      	movs	r3, #2
 80081da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80081de:	e05c      	b.n	800829a <f_getfree+0x144>
					if (stat == 0) nfree++;
 80081e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <f_getfree+0x96>
 80081e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081e8:	3301      	adds	r3, #1
 80081ea:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80081ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ee:	3301      	adds	r3, #1
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d3db      	bcc.n	80081b4 <f_getfree+0x5e>
 80081fc:	e04d      	b.n	800829a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	637b      	str	r3, [r7, #52]	@ 0x34
 800820e:	2300      	movs	r3, #0
 8008210:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008214:	2b00      	cmp	r3, #0
 8008216:	d113      	bne.n	8008240 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800821a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008220:	4619      	mov	r1, r3
 8008222:	f7fd fe47 	bl	8005eb4 <move_window>
 8008226:	4603      	mov	r3, r0
 8008228:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800822c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008230:	2b00      	cmp	r3, #0
 8008232:	d131      	bne.n	8008298 <f_getfree+0x142>
							p = fs->win;
 8008234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008236:	3330      	adds	r3, #48	@ 0x30
 8008238:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800823a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800823e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b02      	cmp	r3, #2
 8008246:	d10f      	bne.n	8008268 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800824a:	f7fd fb83 	bl	8005954 <ld_word>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <f_getfree+0x104>
 8008254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008256:	3301      	adds	r3, #1
 8008258:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	3302      	adds	r3, #2
 800825e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008262:	3b02      	subs	r3, #2
 8008264:	637b      	str	r3, [r7, #52]	@ 0x34
 8008266:	e010      	b.n	800828a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800826a:	f7fd fb8b 	bl	8005984 <ld_dword>
 800826e:	4603      	mov	r3, r0
 8008270:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <f_getfree+0x128>
 8008278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800827a:	3301      	adds	r3, #1
 800827c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	3304      	adds	r3, #4
 8008282:	633b      	str	r3, [r7, #48]	@ 0x30
 8008284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008286:	3b04      	subs	r3, #4
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800828a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828c:	3b01      	subs	r3, #1
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1bd      	bne.n	8008212 <f_getfree+0xbc>
 8008296:	e000      	b.n	800829a <f_getfree+0x144>
							if (res != FR_OK) break;
 8008298:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800829e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80082a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082a4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80082a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a8:	791a      	ldrb	r2, [r3, #4]
 80082aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ac:	f042 0201 	orr.w	r2, r2, #1
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80082b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3748      	adds	r7, #72	@ 0x48
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
	int n = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80082d4:	e01c      	b.n	8008310 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80082d6:	f107 0310 	add.w	r3, r7, #16
 80082da:	f107 0114 	add.w	r1, r7, #20
 80082de:	2201      	movs	r2, #1
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff f9d3 	bl	800768c <f_read>
		if (rc != 1) break;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d117      	bne.n	800831c <f_gets+0x5c>
		c = s[0];
 80082ec:	7d3b      	ldrb	r3, [r7, #20]
 80082ee:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	2b0d      	cmp	r3, #13
 80082f4:	d00b      	beq.n	800830e <f_gets+0x4e>
		*p++ = c;
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	61ba      	str	r2, [r7, #24]
 80082fc:	7dfa      	ldrb	r2, [r7, #23]
 80082fe:	701a      	strb	r2, [r3, #0]
		n++;
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	3301      	adds	r3, #1
 8008304:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	2b0a      	cmp	r3, #10
 800830a:	d009      	beq.n	8008320 <f_gets+0x60>
 800830c:	e000      	b.n	8008310 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800830e:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3b01      	subs	r3, #1
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	429a      	cmp	r2, r3
 8008318:	dbdd      	blt.n	80082d6 <f_gets+0x16>
 800831a:	e002      	b.n	8008322 <f_gets+0x62>
		if (rc != 1) break;
 800831c:	bf00      	nop
 800831e:	e000      	b.n	8008322 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008320:	bf00      	nop
	}
	*p = 0;
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <f_gets+0x72>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	e000      	b.n	8008334 <f_gets+0x74>
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3720      	adds	r7, #32
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	2b0a      	cmp	r3, #10
 800834c:	d103      	bne.n	8008356 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800834e:	210d      	movs	r1, #13
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff fff3 	bl	800833c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	db25      	blt.n	80083ae <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	60fa      	str	r2, [r7, #12]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	4413      	add	r3, r2
 800836c:	78fa      	ldrb	r2, [r7, #3]
 800836e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b3c      	cmp	r3, #60	@ 0x3c
 8008374:	dd12      	ble.n	800839c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f103 010c 	add.w	r1, r3, #12
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	f7ff fac0 	bl	800790a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	429a      	cmp	r2, r3
 8008390:	d101      	bne.n	8008396 <putc_bfd+0x5a>
 8008392:	2300      	movs	r3, #0
 8008394:	e001      	b.n	800839a <putc_bfd+0x5e>
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	609a      	str	r2, [r3, #8]
 80083ac:	e000      	b.n	80083b0 <putc_bfd+0x74>
	if (i < 0) return;
 80083ae:	bf00      	nop
}
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	db16      	blt.n	80083f4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f103 010c 	add.w	r1, r3, #12
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	461a      	mov	r2, r3
 80083d6:	f107 030c 	add.w	r3, r7, #12
 80083da:	f7ff fa96 	bl	800790a <f_write>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d107      	bne.n	80083f4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d102      	bne.n	80083f4 <putc_flush+0x3e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	e001      	b.n	80083f8 <putc_flush+0x42>
	return EOF;
 80083f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	609a      	str	r2, [r3, #8]
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b096      	sub	sp, #88	@ 0x58
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008434:	f107 030c 	add.w	r3, r7, #12
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff ffe0 	bl	8008400 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008440:	e009      	b.n	8008456 <f_puts+0x2c>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff ff73 	bl	800833c <putc_bfd>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1f1      	bne.n	8008442 <f_puts+0x18>
	return putc_flush(&pb);
 800845e:	f107 030c 	add.w	r3, r7, #12
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff ffa7 	bl	80083b6 <putc_flush>
 8008468:	4603      	mov	r3, r0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3758      	adds	r7, #88	@ 0x58
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008482:	2301      	movs	r3, #1
 8008484:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800848a:	4b1f      	ldr	r3, [pc, #124]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 800848c:	7a5b      	ldrb	r3, [r3, #9]
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d131      	bne.n	80084f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008494:	4b1c      	ldr	r3, [pc, #112]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 8008496:	7a5b      	ldrb	r3, [r3, #9]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	461a      	mov	r2, r3
 800849c:	4b1a      	ldr	r3, [pc, #104]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 800849e:	2100      	movs	r1, #0
 80084a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084a2:	4b19      	ldr	r3, [pc, #100]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 80084a4:	7a5b      	ldrb	r3, [r3, #9]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	4a17      	ldr	r2, [pc, #92]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084b2:	4b15      	ldr	r3, [pc, #84]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 80084b4:	7a5b      	ldrb	r3, [r3, #9]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	4b13      	ldr	r3, [pc, #76]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 80084bc:	4413      	add	r3, r2
 80084be:	79fa      	ldrb	r2, [r7, #7]
 80084c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084c2:	4b11      	ldr	r3, [pc, #68]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 80084c4:	7a5b      	ldrb	r3, [r3, #9]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	b2d1      	uxtb	r1, r2
 80084cc:	4a0e      	ldr	r2, [pc, #56]	@ (8008508 <FATFS_LinkDriverEx+0x94>)
 80084ce:	7251      	strb	r1, [r2, #9]
 80084d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084d2:	7dbb      	ldrb	r3, [r7, #22]
 80084d4:	3330      	adds	r3, #48	@ 0x30
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	3301      	adds	r3, #1
 80084e0:	223a      	movs	r2, #58	@ 0x3a
 80084e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	3302      	adds	r3, #2
 80084e8:	222f      	movs	r2, #47	@ 0x2f
 80084ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	3303      	adds	r3, #3
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	2000081c 	.word	0x2000081c

0800850c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008516:	2200      	movs	r2, #0
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7ff ffaa 	bl	8008474 <FATFS_LinkDriverEx>
 8008520:	4603      	mov	r3, r0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <siprintf>:
 800852c:	b40e      	push	{r1, r2, r3}
 800852e:	b500      	push	{lr}
 8008530:	b09c      	sub	sp, #112	@ 0x70
 8008532:	ab1d      	add	r3, sp, #116	@ 0x74
 8008534:	9002      	str	r0, [sp, #8]
 8008536:	9006      	str	r0, [sp, #24]
 8008538:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800853c:	4809      	ldr	r0, [pc, #36]	@ (8008564 <siprintf+0x38>)
 800853e:	9107      	str	r1, [sp, #28]
 8008540:	9104      	str	r1, [sp, #16]
 8008542:	4909      	ldr	r1, [pc, #36]	@ (8008568 <siprintf+0x3c>)
 8008544:	f853 2b04 	ldr.w	r2, [r3], #4
 8008548:	9105      	str	r1, [sp, #20]
 800854a:	6800      	ldr	r0, [r0, #0]
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	a902      	add	r1, sp, #8
 8008550:	f000 f994 	bl	800887c <_svfiprintf_r>
 8008554:	9b02      	ldr	r3, [sp, #8]
 8008556:	2200      	movs	r2, #0
 8008558:	701a      	strb	r2, [r3, #0]
 800855a:	b01c      	add	sp, #112	@ 0x70
 800855c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008560:	b003      	add	sp, #12
 8008562:	4770      	bx	lr
 8008564:	20000024 	.word	0x20000024
 8008568:	ffff0208 	.word	0xffff0208

0800856c <memset>:
 800856c:	4402      	add	r2, r0
 800856e:	4603      	mov	r3, r0
 8008570:	4293      	cmp	r3, r2
 8008572:	d100      	bne.n	8008576 <memset+0xa>
 8008574:	4770      	bx	lr
 8008576:	f803 1b01 	strb.w	r1, [r3], #1
 800857a:	e7f9      	b.n	8008570 <memset+0x4>

0800857c <__errno>:
 800857c:	4b01      	ldr	r3, [pc, #4]	@ (8008584 <__errno+0x8>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000024 	.word	0x20000024

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4d0d      	ldr	r5, [pc, #52]	@ (80085c0 <__libc_init_array+0x38>)
 800858c:	4c0d      	ldr	r4, [pc, #52]	@ (80085c4 <__libc_init_array+0x3c>)
 800858e:	1b64      	subs	r4, r4, r5
 8008590:	10a4      	asrs	r4, r4, #2
 8008592:	2600      	movs	r6, #0
 8008594:	42a6      	cmp	r6, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	4d0b      	ldr	r5, [pc, #44]	@ (80085c8 <__libc_init_array+0x40>)
 800859a:	4c0c      	ldr	r4, [pc, #48]	@ (80085cc <__libc_init_array+0x44>)
 800859c:	f000 fc66 	bl	8008e6c <_init>
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	2600      	movs	r6, #0
 80085a6:	42a6      	cmp	r6, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b0:	4798      	blx	r3
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ba:	4798      	blx	r3
 80085bc:	3601      	adds	r6, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	08009338 	.word	0x08009338
 80085c4:	08009338 	.word	0x08009338
 80085c8:	08009338 	.word	0x08009338
 80085cc:	0800933c 	.word	0x0800933c

080085d0 <__retarget_lock_acquire_recursive>:
 80085d0:	4770      	bx	lr

080085d2 <__retarget_lock_release_recursive>:
 80085d2:	4770      	bx	lr

080085d4 <_free_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4605      	mov	r5, r0
 80085d8:	2900      	cmp	r1, #0
 80085da:	d041      	beq.n	8008660 <_free_r+0x8c>
 80085dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e0:	1f0c      	subs	r4, r1, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bfb8      	it	lt
 80085e6:	18e4      	addlt	r4, r4, r3
 80085e8:	f000 f8e0 	bl	80087ac <__malloc_lock>
 80085ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008664 <_free_r+0x90>)
 80085ee:	6813      	ldr	r3, [r2, #0]
 80085f0:	b933      	cbnz	r3, 8008600 <_free_r+0x2c>
 80085f2:	6063      	str	r3, [r4, #4]
 80085f4:	6014      	str	r4, [r2, #0]
 80085f6:	4628      	mov	r0, r5
 80085f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085fc:	f000 b8dc 	b.w	80087b8 <__malloc_unlock>
 8008600:	42a3      	cmp	r3, r4
 8008602:	d908      	bls.n	8008616 <_free_r+0x42>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	1821      	adds	r1, r4, r0
 8008608:	428b      	cmp	r3, r1
 800860a:	bf01      	itttt	eq
 800860c:	6819      	ldreq	r1, [r3, #0]
 800860e:	685b      	ldreq	r3, [r3, #4]
 8008610:	1809      	addeq	r1, r1, r0
 8008612:	6021      	streq	r1, [r4, #0]
 8008614:	e7ed      	b.n	80085f2 <_free_r+0x1e>
 8008616:	461a      	mov	r2, r3
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	b10b      	cbz	r3, 8008620 <_free_r+0x4c>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d9fa      	bls.n	8008616 <_free_r+0x42>
 8008620:	6811      	ldr	r1, [r2, #0]
 8008622:	1850      	adds	r0, r2, r1
 8008624:	42a0      	cmp	r0, r4
 8008626:	d10b      	bne.n	8008640 <_free_r+0x6c>
 8008628:	6820      	ldr	r0, [r4, #0]
 800862a:	4401      	add	r1, r0
 800862c:	1850      	adds	r0, r2, r1
 800862e:	4283      	cmp	r3, r0
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	d1e0      	bne.n	80085f6 <_free_r+0x22>
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	6053      	str	r3, [r2, #4]
 800863a:	4408      	add	r0, r1
 800863c:	6010      	str	r0, [r2, #0]
 800863e:	e7da      	b.n	80085f6 <_free_r+0x22>
 8008640:	d902      	bls.n	8008648 <_free_r+0x74>
 8008642:	230c      	movs	r3, #12
 8008644:	602b      	str	r3, [r5, #0]
 8008646:	e7d6      	b.n	80085f6 <_free_r+0x22>
 8008648:	6820      	ldr	r0, [r4, #0]
 800864a:	1821      	adds	r1, r4, r0
 800864c:	428b      	cmp	r3, r1
 800864e:	bf04      	itt	eq
 8008650:	6819      	ldreq	r1, [r3, #0]
 8008652:	685b      	ldreq	r3, [r3, #4]
 8008654:	6063      	str	r3, [r4, #4]
 8008656:	bf04      	itt	eq
 8008658:	1809      	addeq	r1, r1, r0
 800865a:	6021      	streq	r1, [r4, #0]
 800865c:	6054      	str	r4, [r2, #4]
 800865e:	e7ca      	b.n	80085f6 <_free_r+0x22>
 8008660:	bd38      	pop	{r3, r4, r5, pc}
 8008662:	bf00      	nop
 8008664:	2000096c 	.word	0x2000096c

08008668 <sbrk_aligned>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	4e0f      	ldr	r6, [pc, #60]	@ (80086a8 <sbrk_aligned+0x40>)
 800866c:	460c      	mov	r4, r1
 800866e:	6831      	ldr	r1, [r6, #0]
 8008670:	4605      	mov	r5, r0
 8008672:	b911      	cbnz	r1, 800867a <sbrk_aligned+0x12>
 8008674:	f000 fba6 	bl	8008dc4 <_sbrk_r>
 8008678:	6030      	str	r0, [r6, #0]
 800867a:	4621      	mov	r1, r4
 800867c:	4628      	mov	r0, r5
 800867e:	f000 fba1 	bl	8008dc4 <_sbrk_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	d103      	bne.n	800868e <sbrk_aligned+0x26>
 8008686:	f04f 34ff 	mov.w	r4, #4294967295
 800868a:	4620      	mov	r0, r4
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	1cc4      	adds	r4, r0, #3
 8008690:	f024 0403 	bic.w	r4, r4, #3
 8008694:	42a0      	cmp	r0, r4
 8008696:	d0f8      	beq.n	800868a <sbrk_aligned+0x22>
 8008698:	1a21      	subs	r1, r4, r0
 800869a:	4628      	mov	r0, r5
 800869c:	f000 fb92 	bl	8008dc4 <_sbrk_r>
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1f2      	bne.n	800868a <sbrk_aligned+0x22>
 80086a4:	e7ef      	b.n	8008686 <sbrk_aligned+0x1e>
 80086a6:	bf00      	nop
 80086a8:	20000968 	.word	0x20000968

080086ac <_malloc_r>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	1ccd      	adds	r5, r1, #3
 80086b2:	f025 0503 	bic.w	r5, r5, #3
 80086b6:	3508      	adds	r5, #8
 80086b8:	2d0c      	cmp	r5, #12
 80086ba:	bf38      	it	cc
 80086bc:	250c      	movcc	r5, #12
 80086be:	2d00      	cmp	r5, #0
 80086c0:	4606      	mov	r6, r0
 80086c2:	db01      	blt.n	80086c8 <_malloc_r+0x1c>
 80086c4:	42a9      	cmp	r1, r5
 80086c6:	d904      	bls.n	80086d2 <_malloc_r+0x26>
 80086c8:	230c      	movs	r3, #12
 80086ca:	6033      	str	r3, [r6, #0]
 80086cc:	2000      	movs	r0, #0
 80086ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087a8 <_malloc_r+0xfc>
 80086d6:	f000 f869 	bl	80087ac <__malloc_lock>
 80086da:	f8d8 3000 	ldr.w	r3, [r8]
 80086de:	461c      	mov	r4, r3
 80086e0:	bb44      	cbnz	r4, 8008734 <_malloc_r+0x88>
 80086e2:	4629      	mov	r1, r5
 80086e4:	4630      	mov	r0, r6
 80086e6:	f7ff ffbf 	bl	8008668 <sbrk_aligned>
 80086ea:	1c43      	adds	r3, r0, #1
 80086ec:	4604      	mov	r4, r0
 80086ee:	d158      	bne.n	80087a2 <_malloc_r+0xf6>
 80086f0:	f8d8 4000 	ldr.w	r4, [r8]
 80086f4:	4627      	mov	r7, r4
 80086f6:	2f00      	cmp	r7, #0
 80086f8:	d143      	bne.n	8008782 <_malloc_r+0xd6>
 80086fa:	2c00      	cmp	r4, #0
 80086fc:	d04b      	beq.n	8008796 <_malloc_r+0xea>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	4639      	mov	r1, r7
 8008702:	4630      	mov	r0, r6
 8008704:	eb04 0903 	add.w	r9, r4, r3
 8008708:	f000 fb5c 	bl	8008dc4 <_sbrk_r>
 800870c:	4581      	cmp	r9, r0
 800870e:	d142      	bne.n	8008796 <_malloc_r+0xea>
 8008710:	6821      	ldr	r1, [r4, #0]
 8008712:	1a6d      	subs	r5, r5, r1
 8008714:	4629      	mov	r1, r5
 8008716:	4630      	mov	r0, r6
 8008718:	f7ff ffa6 	bl	8008668 <sbrk_aligned>
 800871c:	3001      	adds	r0, #1
 800871e:	d03a      	beq.n	8008796 <_malloc_r+0xea>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	442b      	add	r3, r5
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	f8d8 3000 	ldr.w	r3, [r8]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	bb62      	cbnz	r2, 8008788 <_malloc_r+0xdc>
 800872e:	f8c8 7000 	str.w	r7, [r8]
 8008732:	e00f      	b.n	8008754 <_malloc_r+0xa8>
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	1b52      	subs	r2, r2, r5
 8008738:	d420      	bmi.n	800877c <_malloc_r+0xd0>
 800873a:	2a0b      	cmp	r2, #11
 800873c:	d917      	bls.n	800876e <_malloc_r+0xc2>
 800873e:	1961      	adds	r1, r4, r5
 8008740:	42a3      	cmp	r3, r4
 8008742:	6025      	str	r5, [r4, #0]
 8008744:	bf18      	it	ne
 8008746:	6059      	strne	r1, [r3, #4]
 8008748:	6863      	ldr	r3, [r4, #4]
 800874a:	bf08      	it	eq
 800874c:	f8c8 1000 	streq.w	r1, [r8]
 8008750:	5162      	str	r2, [r4, r5]
 8008752:	604b      	str	r3, [r1, #4]
 8008754:	4630      	mov	r0, r6
 8008756:	f000 f82f 	bl	80087b8 <__malloc_unlock>
 800875a:	f104 000b 	add.w	r0, r4, #11
 800875e:	1d23      	adds	r3, r4, #4
 8008760:	f020 0007 	bic.w	r0, r0, #7
 8008764:	1ac2      	subs	r2, r0, r3
 8008766:	bf1c      	itt	ne
 8008768:	1a1b      	subne	r3, r3, r0
 800876a:	50a3      	strne	r3, [r4, r2]
 800876c:	e7af      	b.n	80086ce <_malloc_r+0x22>
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	42a3      	cmp	r3, r4
 8008772:	bf0c      	ite	eq
 8008774:	f8c8 2000 	streq.w	r2, [r8]
 8008778:	605a      	strne	r2, [r3, #4]
 800877a:	e7eb      	b.n	8008754 <_malloc_r+0xa8>
 800877c:	4623      	mov	r3, r4
 800877e:	6864      	ldr	r4, [r4, #4]
 8008780:	e7ae      	b.n	80086e0 <_malloc_r+0x34>
 8008782:	463c      	mov	r4, r7
 8008784:	687f      	ldr	r7, [r7, #4]
 8008786:	e7b6      	b.n	80086f6 <_malloc_r+0x4a>
 8008788:	461a      	mov	r2, r3
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	42a3      	cmp	r3, r4
 800878e:	d1fb      	bne.n	8008788 <_malloc_r+0xdc>
 8008790:	2300      	movs	r3, #0
 8008792:	6053      	str	r3, [r2, #4]
 8008794:	e7de      	b.n	8008754 <_malloc_r+0xa8>
 8008796:	230c      	movs	r3, #12
 8008798:	6033      	str	r3, [r6, #0]
 800879a:	4630      	mov	r0, r6
 800879c:	f000 f80c 	bl	80087b8 <__malloc_unlock>
 80087a0:	e794      	b.n	80086cc <_malloc_r+0x20>
 80087a2:	6005      	str	r5, [r0, #0]
 80087a4:	e7d6      	b.n	8008754 <_malloc_r+0xa8>
 80087a6:	bf00      	nop
 80087a8:	2000096c 	.word	0x2000096c

080087ac <__malloc_lock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	@ (80087b4 <__malloc_lock+0x8>)
 80087ae:	f7ff bf0f 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	20000964 	.word	0x20000964

080087b8 <__malloc_unlock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	@ (80087c0 <__malloc_unlock+0x8>)
 80087ba:	f7ff bf0a 	b.w	80085d2 <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	20000964 	.word	0x20000964

080087c4 <__ssputs_r>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	688e      	ldr	r6, [r1, #8]
 80087ca:	461f      	mov	r7, r3
 80087cc:	42be      	cmp	r6, r7
 80087ce:	680b      	ldr	r3, [r1, #0]
 80087d0:	4682      	mov	sl, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4690      	mov	r8, r2
 80087d6:	d82d      	bhi.n	8008834 <__ssputs_r+0x70>
 80087d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087e0:	d026      	beq.n	8008830 <__ssputs_r+0x6c>
 80087e2:	6965      	ldr	r5, [r4, #20]
 80087e4:	6909      	ldr	r1, [r1, #16]
 80087e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ea:	eba3 0901 	sub.w	r9, r3, r1
 80087ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f2:	1c7b      	adds	r3, r7, #1
 80087f4:	444b      	add	r3, r9
 80087f6:	106d      	asrs	r5, r5, #1
 80087f8:	429d      	cmp	r5, r3
 80087fa:	bf38      	it	cc
 80087fc:	461d      	movcc	r5, r3
 80087fe:	0553      	lsls	r3, r2, #21
 8008800:	d527      	bpl.n	8008852 <__ssputs_r+0x8e>
 8008802:	4629      	mov	r1, r5
 8008804:	f7ff ff52 	bl	80086ac <_malloc_r>
 8008808:	4606      	mov	r6, r0
 800880a:	b360      	cbz	r0, 8008866 <__ssputs_r+0xa2>
 800880c:	6921      	ldr	r1, [r4, #16]
 800880e:	464a      	mov	r2, r9
 8008810:	f000 fae8 	bl	8008de4 <memcpy>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800881a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	6126      	str	r6, [r4, #16]
 8008822:	6165      	str	r5, [r4, #20]
 8008824:	444e      	add	r6, r9
 8008826:	eba5 0509 	sub.w	r5, r5, r9
 800882a:	6026      	str	r6, [r4, #0]
 800882c:	60a5      	str	r5, [r4, #8]
 800882e:	463e      	mov	r6, r7
 8008830:	42be      	cmp	r6, r7
 8008832:	d900      	bls.n	8008836 <__ssputs_r+0x72>
 8008834:	463e      	mov	r6, r7
 8008836:	6820      	ldr	r0, [r4, #0]
 8008838:	4632      	mov	r2, r6
 800883a:	4641      	mov	r1, r8
 800883c:	f000 faa8 	bl	8008d90 <memmove>
 8008840:	68a3      	ldr	r3, [r4, #8]
 8008842:	1b9b      	subs	r3, r3, r6
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	4433      	add	r3, r6
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	2000      	movs	r0, #0
 800884e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008852:	462a      	mov	r2, r5
 8008854:	f000 fad4 	bl	8008e00 <_realloc_r>
 8008858:	4606      	mov	r6, r0
 800885a:	2800      	cmp	r0, #0
 800885c:	d1e0      	bne.n	8008820 <__ssputs_r+0x5c>
 800885e:	6921      	ldr	r1, [r4, #16]
 8008860:	4650      	mov	r0, sl
 8008862:	f7ff feb7 	bl	80085d4 <_free_r>
 8008866:	230c      	movs	r3, #12
 8008868:	f8ca 3000 	str.w	r3, [sl]
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	f04f 30ff 	mov.w	r0, #4294967295
 8008878:	e7e9      	b.n	800884e <__ssputs_r+0x8a>
	...

0800887c <_svfiprintf_r>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	4698      	mov	r8, r3
 8008882:	898b      	ldrh	r3, [r1, #12]
 8008884:	061b      	lsls	r3, r3, #24
 8008886:	b09d      	sub	sp, #116	@ 0x74
 8008888:	4607      	mov	r7, r0
 800888a:	460d      	mov	r5, r1
 800888c:	4614      	mov	r4, r2
 800888e:	d510      	bpl.n	80088b2 <_svfiprintf_r+0x36>
 8008890:	690b      	ldr	r3, [r1, #16]
 8008892:	b973      	cbnz	r3, 80088b2 <_svfiprintf_r+0x36>
 8008894:	2140      	movs	r1, #64	@ 0x40
 8008896:	f7ff ff09 	bl	80086ac <_malloc_r>
 800889a:	6028      	str	r0, [r5, #0]
 800889c:	6128      	str	r0, [r5, #16]
 800889e:	b930      	cbnz	r0, 80088ae <_svfiprintf_r+0x32>
 80088a0:	230c      	movs	r3, #12
 80088a2:	603b      	str	r3, [r7, #0]
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	b01d      	add	sp, #116	@ 0x74
 80088aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ae:	2340      	movs	r3, #64	@ 0x40
 80088b0:	616b      	str	r3, [r5, #20]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b6:	2320      	movs	r3, #32
 80088b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c0:	2330      	movs	r3, #48	@ 0x30
 80088c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a60 <_svfiprintf_r+0x1e4>
 80088c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088ca:	f04f 0901 	mov.w	r9, #1
 80088ce:	4623      	mov	r3, r4
 80088d0:	469a      	mov	sl, r3
 80088d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d6:	b10a      	cbz	r2, 80088dc <_svfiprintf_r+0x60>
 80088d8:	2a25      	cmp	r2, #37	@ 0x25
 80088da:	d1f9      	bne.n	80088d0 <_svfiprintf_r+0x54>
 80088dc:	ebba 0b04 	subs.w	fp, sl, r4
 80088e0:	d00b      	beq.n	80088fa <_svfiprintf_r+0x7e>
 80088e2:	465b      	mov	r3, fp
 80088e4:	4622      	mov	r2, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7ff ff6b 	bl	80087c4 <__ssputs_r>
 80088ee:	3001      	adds	r0, #1
 80088f0:	f000 80a7 	beq.w	8008a42 <_svfiprintf_r+0x1c6>
 80088f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088f6:	445a      	add	r2, fp
 80088f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80088fa:	f89a 3000 	ldrb.w	r3, [sl]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 809f 	beq.w	8008a42 <_svfiprintf_r+0x1c6>
 8008904:	2300      	movs	r3, #0
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
 800890a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800890e:	f10a 0a01 	add.w	sl, sl, #1
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	9307      	str	r3, [sp, #28]
 8008916:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800891a:	931a      	str	r3, [sp, #104]	@ 0x68
 800891c:	4654      	mov	r4, sl
 800891e:	2205      	movs	r2, #5
 8008920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008924:	484e      	ldr	r0, [pc, #312]	@ (8008a60 <_svfiprintf_r+0x1e4>)
 8008926:	f7f7 fc5b 	bl	80001e0 <memchr>
 800892a:	9a04      	ldr	r2, [sp, #16]
 800892c:	b9d8      	cbnz	r0, 8008966 <_svfiprintf_r+0xea>
 800892e:	06d0      	lsls	r0, r2, #27
 8008930:	bf44      	itt	mi
 8008932:	2320      	movmi	r3, #32
 8008934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008938:	0711      	lsls	r1, r2, #28
 800893a:	bf44      	itt	mi
 800893c:	232b      	movmi	r3, #43	@ 0x2b
 800893e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008942:	f89a 3000 	ldrb.w	r3, [sl]
 8008946:	2b2a      	cmp	r3, #42	@ 0x2a
 8008948:	d015      	beq.n	8008976 <_svfiprintf_r+0xfa>
 800894a:	9a07      	ldr	r2, [sp, #28]
 800894c:	4654      	mov	r4, sl
 800894e:	2000      	movs	r0, #0
 8008950:	f04f 0c0a 	mov.w	ip, #10
 8008954:	4621      	mov	r1, r4
 8008956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800895a:	3b30      	subs	r3, #48	@ 0x30
 800895c:	2b09      	cmp	r3, #9
 800895e:	d94b      	bls.n	80089f8 <_svfiprintf_r+0x17c>
 8008960:	b1b0      	cbz	r0, 8008990 <_svfiprintf_r+0x114>
 8008962:	9207      	str	r2, [sp, #28]
 8008964:	e014      	b.n	8008990 <_svfiprintf_r+0x114>
 8008966:	eba0 0308 	sub.w	r3, r0, r8
 800896a:	fa09 f303 	lsl.w	r3, r9, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	9304      	str	r3, [sp, #16]
 8008972:	46a2      	mov	sl, r4
 8008974:	e7d2      	b.n	800891c <_svfiprintf_r+0xa0>
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	1d19      	adds	r1, r3, #4
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	9103      	str	r1, [sp, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	bfbb      	ittet	lt
 8008982:	425b      	neglt	r3, r3
 8008984:	f042 0202 	orrlt.w	r2, r2, #2
 8008988:	9307      	strge	r3, [sp, #28]
 800898a:	9307      	strlt	r3, [sp, #28]
 800898c:	bfb8      	it	lt
 800898e:	9204      	strlt	r2, [sp, #16]
 8008990:	7823      	ldrb	r3, [r4, #0]
 8008992:	2b2e      	cmp	r3, #46	@ 0x2e
 8008994:	d10a      	bne.n	80089ac <_svfiprintf_r+0x130>
 8008996:	7863      	ldrb	r3, [r4, #1]
 8008998:	2b2a      	cmp	r3, #42	@ 0x2a
 800899a:	d132      	bne.n	8008a02 <_svfiprintf_r+0x186>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1d1a      	adds	r2, r3, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	9203      	str	r2, [sp, #12]
 80089a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089a8:	3402      	adds	r4, #2
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a70 <_svfiprintf_r+0x1f4>
 80089b0:	7821      	ldrb	r1, [r4, #0]
 80089b2:	2203      	movs	r2, #3
 80089b4:	4650      	mov	r0, sl
 80089b6:	f7f7 fc13 	bl	80001e0 <memchr>
 80089ba:	b138      	cbz	r0, 80089cc <_svfiprintf_r+0x150>
 80089bc:	9b04      	ldr	r3, [sp, #16]
 80089be:	eba0 000a 	sub.w	r0, r0, sl
 80089c2:	2240      	movs	r2, #64	@ 0x40
 80089c4:	4082      	lsls	r2, r0
 80089c6:	4313      	orrs	r3, r2
 80089c8:	3401      	adds	r4, #1
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d0:	4824      	ldr	r0, [pc, #144]	@ (8008a64 <_svfiprintf_r+0x1e8>)
 80089d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089d6:	2206      	movs	r2, #6
 80089d8:	f7f7 fc02 	bl	80001e0 <memchr>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d036      	beq.n	8008a4e <_svfiprintf_r+0x1d2>
 80089e0:	4b21      	ldr	r3, [pc, #132]	@ (8008a68 <_svfiprintf_r+0x1ec>)
 80089e2:	bb1b      	cbnz	r3, 8008a2c <_svfiprintf_r+0x1b0>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	3307      	adds	r3, #7
 80089e8:	f023 0307 	bic.w	r3, r3, #7
 80089ec:	3308      	adds	r3, #8
 80089ee:	9303      	str	r3, [sp, #12]
 80089f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f2:	4433      	add	r3, r6
 80089f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089f6:	e76a      	b.n	80088ce <_svfiprintf_r+0x52>
 80089f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089fc:	460c      	mov	r4, r1
 80089fe:	2001      	movs	r0, #1
 8008a00:	e7a8      	b.n	8008954 <_svfiprintf_r+0xd8>
 8008a02:	2300      	movs	r3, #0
 8008a04:	3401      	adds	r4, #1
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f04f 0c0a 	mov.w	ip, #10
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a14:	3a30      	subs	r2, #48	@ 0x30
 8008a16:	2a09      	cmp	r2, #9
 8008a18:	d903      	bls.n	8008a22 <_svfiprintf_r+0x1a6>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0c6      	beq.n	80089ac <_svfiprintf_r+0x130>
 8008a1e:	9105      	str	r1, [sp, #20]
 8008a20:	e7c4      	b.n	80089ac <_svfiprintf_r+0x130>
 8008a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a26:	4604      	mov	r4, r0
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e7f0      	b.n	8008a0e <_svfiprintf_r+0x192>
 8008a2c:	ab03      	add	r3, sp, #12
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	462a      	mov	r2, r5
 8008a32:	4b0e      	ldr	r3, [pc, #56]	@ (8008a6c <_svfiprintf_r+0x1f0>)
 8008a34:	a904      	add	r1, sp, #16
 8008a36:	4638      	mov	r0, r7
 8008a38:	f3af 8000 	nop.w
 8008a3c:	1c42      	adds	r2, r0, #1
 8008a3e:	4606      	mov	r6, r0
 8008a40:	d1d6      	bne.n	80089f0 <_svfiprintf_r+0x174>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	065b      	lsls	r3, r3, #25
 8008a46:	f53f af2d 	bmi.w	80088a4 <_svfiprintf_r+0x28>
 8008a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a4c:	e72c      	b.n	80088a8 <_svfiprintf_r+0x2c>
 8008a4e:	ab03      	add	r3, sp, #12
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	462a      	mov	r2, r5
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <_svfiprintf_r+0x1f0>)
 8008a56:	a904      	add	r1, sp, #16
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f000 f879 	bl	8008b50 <_printf_i>
 8008a5e:	e7ed      	b.n	8008a3c <_svfiprintf_r+0x1c0>
 8008a60:	080092fc 	.word	0x080092fc
 8008a64:	08009306 	.word	0x08009306
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	080087c5 	.word	0x080087c5
 8008a70:	08009302 	.word	0x08009302

08008a74 <_printf_common>:
 8008a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	4616      	mov	r6, r2
 8008a7a:	4698      	mov	r8, r3
 8008a7c:	688a      	ldr	r2, [r1, #8]
 8008a7e:	690b      	ldr	r3, [r1, #16]
 8008a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a84:	4293      	cmp	r3, r2
 8008a86:	bfb8      	it	lt
 8008a88:	4613      	movlt	r3, r2
 8008a8a:	6033      	str	r3, [r6, #0]
 8008a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a90:	4607      	mov	r7, r0
 8008a92:	460c      	mov	r4, r1
 8008a94:	b10a      	cbz	r2, 8008a9a <_printf_common+0x26>
 8008a96:	3301      	adds	r3, #1
 8008a98:	6033      	str	r3, [r6, #0]
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	0699      	lsls	r1, r3, #26
 8008a9e:	bf42      	ittt	mi
 8008aa0:	6833      	ldrmi	r3, [r6, #0]
 8008aa2:	3302      	addmi	r3, #2
 8008aa4:	6033      	strmi	r3, [r6, #0]
 8008aa6:	6825      	ldr	r5, [r4, #0]
 8008aa8:	f015 0506 	ands.w	r5, r5, #6
 8008aac:	d106      	bne.n	8008abc <_printf_common+0x48>
 8008aae:	f104 0a19 	add.w	sl, r4, #25
 8008ab2:	68e3      	ldr	r3, [r4, #12]
 8008ab4:	6832      	ldr	r2, [r6, #0]
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	dc26      	bgt.n	8008b0a <_printf_common+0x96>
 8008abc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	3b00      	subs	r3, #0
 8008ac4:	bf18      	it	ne
 8008ac6:	2301      	movne	r3, #1
 8008ac8:	0692      	lsls	r2, r2, #26
 8008aca:	d42b      	bmi.n	8008b24 <_printf_common+0xb0>
 8008acc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	47c8      	blx	r9
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d01e      	beq.n	8008b18 <_printf_common+0xa4>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	6922      	ldr	r2, [r4, #16]
 8008ade:	f003 0306 	and.w	r3, r3, #6
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	bf02      	ittt	eq
 8008ae6:	68e5      	ldreq	r5, [r4, #12]
 8008ae8:	6833      	ldreq	r3, [r6, #0]
 8008aea:	1aed      	subeq	r5, r5, r3
 8008aec:	68a3      	ldr	r3, [r4, #8]
 8008aee:	bf0c      	ite	eq
 8008af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008af4:	2500      	movne	r5, #0
 8008af6:	4293      	cmp	r3, r2
 8008af8:	bfc4      	itt	gt
 8008afa:	1a9b      	subgt	r3, r3, r2
 8008afc:	18ed      	addgt	r5, r5, r3
 8008afe:	2600      	movs	r6, #0
 8008b00:	341a      	adds	r4, #26
 8008b02:	42b5      	cmp	r5, r6
 8008b04:	d11a      	bne.n	8008b3c <_printf_common+0xc8>
 8008b06:	2000      	movs	r0, #0
 8008b08:	e008      	b.n	8008b1c <_printf_common+0xa8>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4652      	mov	r2, sl
 8008b0e:	4641      	mov	r1, r8
 8008b10:	4638      	mov	r0, r7
 8008b12:	47c8      	blx	r9
 8008b14:	3001      	adds	r0, #1
 8008b16:	d103      	bne.n	8008b20 <_printf_common+0xac>
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b20:	3501      	adds	r5, #1
 8008b22:	e7c6      	b.n	8008ab2 <_printf_common+0x3e>
 8008b24:	18e1      	adds	r1, r4, r3
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	2030      	movs	r0, #48	@ 0x30
 8008b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b2e:	4422      	add	r2, r4
 8008b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b38:	3302      	adds	r3, #2
 8008b3a:	e7c7      	b.n	8008acc <_printf_common+0x58>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	4622      	mov	r2, r4
 8008b40:	4641      	mov	r1, r8
 8008b42:	4638      	mov	r0, r7
 8008b44:	47c8      	blx	r9
 8008b46:	3001      	adds	r0, #1
 8008b48:	d0e6      	beq.n	8008b18 <_printf_common+0xa4>
 8008b4a:	3601      	adds	r6, #1
 8008b4c:	e7d9      	b.n	8008b02 <_printf_common+0x8e>
	...

08008b50 <_printf_i>:
 8008b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	7e0f      	ldrb	r7, [r1, #24]
 8008b56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b58:	2f78      	cmp	r7, #120	@ 0x78
 8008b5a:	4691      	mov	r9, r2
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	469a      	mov	sl, r3
 8008b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b66:	d807      	bhi.n	8008b78 <_printf_i+0x28>
 8008b68:	2f62      	cmp	r7, #98	@ 0x62
 8008b6a:	d80a      	bhi.n	8008b82 <_printf_i+0x32>
 8008b6c:	2f00      	cmp	r7, #0
 8008b6e:	f000 80d2 	beq.w	8008d16 <_printf_i+0x1c6>
 8008b72:	2f58      	cmp	r7, #88	@ 0x58
 8008b74:	f000 80b9 	beq.w	8008cea <_printf_i+0x19a>
 8008b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b80:	e03a      	b.n	8008bf8 <_printf_i+0xa8>
 8008b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b86:	2b15      	cmp	r3, #21
 8008b88:	d8f6      	bhi.n	8008b78 <_printf_i+0x28>
 8008b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8008b90 <_printf_i+0x40>)
 8008b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b90:	08008be9 	.word	0x08008be9
 8008b94:	08008bfd 	.word	0x08008bfd
 8008b98:	08008b79 	.word	0x08008b79
 8008b9c:	08008b79 	.word	0x08008b79
 8008ba0:	08008b79 	.word	0x08008b79
 8008ba4:	08008b79 	.word	0x08008b79
 8008ba8:	08008bfd 	.word	0x08008bfd
 8008bac:	08008b79 	.word	0x08008b79
 8008bb0:	08008b79 	.word	0x08008b79
 8008bb4:	08008b79 	.word	0x08008b79
 8008bb8:	08008b79 	.word	0x08008b79
 8008bbc:	08008cfd 	.word	0x08008cfd
 8008bc0:	08008c27 	.word	0x08008c27
 8008bc4:	08008cb7 	.word	0x08008cb7
 8008bc8:	08008b79 	.word	0x08008b79
 8008bcc:	08008b79 	.word	0x08008b79
 8008bd0:	08008d1f 	.word	0x08008d1f
 8008bd4:	08008b79 	.word	0x08008b79
 8008bd8:	08008c27 	.word	0x08008c27
 8008bdc:	08008b79 	.word	0x08008b79
 8008be0:	08008b79 	.word	0x08008b79
 8008be4:	08008cbf 	.word	0x08008cbf
 8008be8:	6833      	ldr	r3, [r6, #0]
 8008bea:	1d1a      	adds	r2, r3, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6032      	str	r2, [r6, #0]
 8008bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e09d      	b.n	8008d38 <_printf_i+0x1e8>
 8008bfc:	6833      	ldr	r3, [r6, #0]
 8008bfe:	6820      	ldr	r0, [r4, #0]
 8008c00:	1d19      	adds	r1, r3, #4
 8008c02:	6031      	str	r1, [r6, #0]
 8008c04:	0606      	lsls	r6, r0, #24
 8008c06:	d501      	bpl.n	8008c0c <_printf_i+0xbc>
 8008c08:	681d      	ldr	r5, [r3, #0]
 8008c0a:	e003      	b.n	8008c14 <_printf_i+0xc4>
 8008c0c:	0645      	lsls	r5, r0, #25
 8008c0e:	d5fb      	bpl.n	8008c08 <_printf_i+0xb8>
 8008c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c14:	2d00      	cmp	r5, #0
 8008c16:	da03      	bge.n	8008c20 <_printf_i+0xd0>
 8008c18:	232d      	movs	r3, #45	@ 0x2d
 8008c1a:	426d      	negs	r5, r5
 8008c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c20:	4859      	ldr	r0, [pc, #356]	@ (8008d88 <_printf_i+0x238>)
 8008c22:	230a      	movs	r3, #10
 8008c24:	e011      	b.n	8008c4a <_printf_i+0xfa>
 8008c26:	6821      	ldr	r1, [r4, #0]
 8008c28:	6833      	ldr	r3, [r6, #0]
 8008c2a:	0608      	lsls	r0, r1, #24
 8008c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c30:	d402      	bmi.n	8008c38 <_printf_i+0xe8>
 8008c32:	0649      	lsls	r1, r1, #25
 8008c34:	bf48      	it	mi
 8008c36:	b2ad      	uxthmi	r5, r5
 8008c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c3a:	4853      	ldr	r0, [pc, #332]	@ (8008d88 <_printf_i+0x238>)
 8008c3c:	6033      	str	r3, [r6, #0]
 8008c3e:	bf14      	ite	ne
 8008c40:	230a      	movne	r3, #10
 8008c42:	2308      	moveq	r3, #8
 8008c44:	2100      	movs	r1, #0
 8008c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c4a:	6866      	ldr	r6, [r4, #4]
 8008c4c:	60a6      	str	r6, [r4, #8]
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	bfa2      	ittt	ge
 8008c52:	6821      	ldrge	r1, [r4, #0]
 8008c54:	f021 0104 	bicge.w	r1, r1, #4
 8008c58:	6021      	strge	r1, [r4, #0]
 8008c5a:	b90d      	cbnz	r5, 8008c60 <_printf_i+0x110>
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	d04b      	beq.n	8008cf8 <_printf_i+0x1a8>
 8008c60:	4616      	mov	r6, r2
 8008c62:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c66:	fb03 5711 	mls	r7, r3, r1, r5
 8008c6a:	5dc7      	ldrb	r7, [r0, r7]
 8008c6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c70:	462f      	mov	r7, r5
 8008c72:	42bb      	cmp	r3, r7
 8008c74:	460d      	mov	r5, r1
 8008c76:	d9f4      	bls.n	8008c62 <_printf_i+0x112>
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d10b      	bne.n	8008c94 <_printf_i+0x144>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	07df      	lsls	r7, r3, #31
 8008c80:	d508      	bpl.n	8008c94 <_printf_i+0x144>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	6861      	ldr	r1, [r4, #4]
 8008c86:	4299      	cmp	r1, r3
 8008c88:	bfde      	ittt	le
 8008c8a:	2330      	movle	r3, #48	@ 0x30
 8008c8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c94:	1b92      	subs	r2, r2, r6
 8008c96:	6122      	str	r2, [r4, #16]
 8008c98:	f8cd a000 	str.w	sl, [sp]
 8008c9c:	464b      	mov	r3, r9
 8008c9e:	aa03      	add	r2, sp, #12
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f7ff fee6 	bl	8008a74 <_printf_common>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d14a      	bne.n	8008d42 <_printf_i+0x1f2>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	b004      	add	sp, #16
 8008cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f043 0320 	orr.w	r3, r3, #32
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	4833      	ldr	r0, [pc, #204]	@ (8008d8c <_printf_i+0x23c>)
 8008cc0:	2778      	movs	r7, #120	@ 0x78
 8008cc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	6831      	ldr	r1, [r6, #0]
 8008cca:	061f      	lsls	r7, r3, #24
 8008ccc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cd0:	d402      	bmi.n	8008cd8 <_printf_i+0x188>
 8008cd2:	065f      	lsls	r7, r3, #25
 8008cd4:	bf48      	it	mi
 8008cd6:	b2ad      	uxthmi	r5, r5
 8008cd8:	6031      	str	r1, [r6, #0]
 8008cda:	07d9      	lsls	r1, r3, #31
 8008cdc:	bf44      	itt	mi
 8008cde:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce2:	6023      	strmi	r3, [r4, #0]
 8008ce4:	b11d      	cbz	r5, 8008cee <_printf_i+0x19e>
 8008ce6:	2310      	movs	r3, #16
 8008ce8:	e7ac      	b.n	8008c44 <_printf_i+0xf4>
 8008cea:	4827      	ldr	r0, [pc, #156]	@ (8008d88 <_printf_i+0x238>)
 8008cec:	e7e9      	b.n	8008cc2 <_printf_i+0x172>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	f023 0320 	bic.w	r3, r3, #32
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	e7f6      	b.n	8008ce6 <_printf_i+0x196>
 8008cf8:	4616      	mov	r6, r2
 8008cfa:	e7bd      	b.n	8008c78 <_printf_i+0x128>
 8008cfc:	6833      	ldr	r3, [r6, #0]
 8008cfe:	6825      	ldr	r5, [r4, #0]
 8008d00:	6961      	ldr	r1, [r4, #20]
 8008d02:	1d18      	adds	r0, r3, #4
 8008d04:	6030      	str	r0, [r6, #0]
 8008d06:	062e      	lsls	r6, r5, #24
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	d501      	bpl.n	8008d10 <_printf_i+0x1c0>
 8008d0c:	6019      	str	r1, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <_printf_i+0x1c6>
 8008d10:	0668      	lsls	r0, r5, #25
 8008d12:	d5fb      	bpl.n	8008d0c <_printf_i+0x1bc>
 8008d14:	8019      	strh	r1, [r3, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	4616      	mov	r6, r2
 8008d1c:	e7bc      	b.n	8008c98 <_printf_i+0x148>
 8008d1e:	6833      	ldr	r3, [r6, #0]
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	6032      	str	r2, [r6, #0]
 8008d24:	681e      	ldr	r6, [r3, #0]
 8008d26:	6862      	ldr	r2, [r4, #4]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7f7 fa58 	bl	80001e0 <memchr>
 8008d30:	b108      	cbz	r0, 8008d36 <_printf_i+0x1e6>
 8008d32:	1b80      	subs	r0, r0, r6
 8008d34:	6060      	str	r0, [r4, #4]
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d40:	e7aa      	b.n	8008c98 <_printf_i+0x148>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	4632      	mov	r2, r6
 8008d46:	4649      	mov	r1, r9
 8008d48:	4640      	mov	r0, r8
 8008d4a:	47d0      	blx	sl
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d0ad      	beq.n	8008cac <_printf_i+0x15c>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	079b      	lsls	r3, r3, #30
 8008d54:	d413      	bmi.n	8008d7e <_printf_i+0x22e>
 8008d56:	68e0      	ldr	r0, [r4, #12]
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	4298      	cmp	r0, r3
 8008d5c:	bfb8      	it	lt
 8008d5e:	4618      	movlt	r0, r3
 8008d60:	e7a6      	b.n	8008cb0 <_printf_i+0x160>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4632      	mov	r2, r6
 8008d66:	4649      	mov	r1, r9
 8008d68:	4640      	mov	r0, r8
 8008d6a:	47d0      	blx	sl
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d09d      	beq.n	8008cac <_printf_i+0x15c>
 8008d70:	3501      	adds	r5, #1
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	9903      	ldr	r1, [sp, #12]
 8008d76:	1a5b      	subs	r3, r3, r1
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	dcf2      	bgt.n	8008d62 <_printf_i+0x212>
 8008d7c:	e7eb      	b.n	8008d56 <_printf_i+0x206>
 8008d7e:	2500      	movs	r5, #0
 8008d80:	f104 0619 	add.w	r6, r4, #25
 8008d84:	e7f5      	b.n	8008d72 <_printf_i+0x222>
 8008d86:	bf00      	nop
 8008d88:	0800930d 	.word	0x0800930d
 8008d8c:	0800931e 	.word	0x0800931e

08008d90 <memmove>:
 8008d90:	4288      	cmp	r0, r1
 8008d92:	b510      	push	{r4, lr}
 8008d94:	eb01 0402 	add.w	r4, r1, r2
 8008d98:	d902      	bls.n	8008da0 <memmove+0x10>
 8008d9a:	4284      	cmp	r4, r0
 8008d9c:	4623      	mov	r3, r4
 8008d9e:	d807      	bhi.n	8008db0 <memmove+0x20>
 8008da0:	1e43      	subs	r3, r0, #1
 8008da2:	42a1      	cmp	r1, r4
 8008da4:	d008      	beq.n	8008db8 <memmove+0x28>
 8008da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dae:	e7f8      	b.n	8008da2 <memmove+0x12>
 8008db0:	4402      	add	r2, r0
 8008db2:	4601      	mov	r1, r0
 8008db4:	428a      	cmp	r2, r1
 8008db6:	d100      	bne.n	8008dba <memmove+0x2a>
 8008db8:	bd10      	pop	{r4, pc}
 8008dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dc2:	e7f7      	b.n	8008db4 <memmove+0x24>

08008dc4 <_sbrk_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d06      	ldr	r5, [pc, #24]	@ (8008de0 <_sbrk_r+0x1c>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	f7f8 fb6c 	bl	80014ac <_sbrk>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_sbrk_r+0x1a>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_sbrk_r+0x1a>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20000960 	.word	0x20000960

08008de4 <memcpy>:
 8008de4:	440a      	add	r2, r1
 8008de6:	4291      	cmp	r1, r2
 8008de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dec:	d100      	bne.n	8008df0 <memcpy+0xc>
 8008dee:	4770      	bx	lr
 8008df0:	b510      	push	{r4, lr}
 8008df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dfa:	4291      	cmp	r1, r2
 8008dfc:	d1f9      	bne.n	8008df2 <memcpy+0xe>
 8008dfe:	bd10      	pop	{r4, pc}

08008e00 <_realloc_r>:
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	4680      	mov	r8, r0
 8008e06:	4615      	mov	r5, r2
 8008e08:	460c      	mov	r4, r1
 8008e0a:	b921      	cbnz	r1, 8008e16 <_realloc_r+0x16>
 8008e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	4611      	mov	r1, r2
 8008e12:	f7ff bc4b 	b.w	80086ac <_malloc_r>
 8008e16:	b92a      	cbnz	r2, 8008e24 <_realloc_r+0x24>
 8008e18:	f7ff fbdc 	bl	80085d4 <_free_r>
 8008e1c:	2400      	movs	r4, #0
 8008e1e:	4620      	mov	r0, r4
 8008e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e24:	f000 f81a 	bl	8008e5c <_malloc_usable_size_r>
 8008e28:	4285      	cmp	r5, r0
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	d802      	bhi.n	8008e34 <_realloc_r+0x34>
 8008e2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e32:	d8f4      	bhi.n	8008e1e <_realloc_r+0x1e>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4640      	mov	r0, r8
 8008e38:	f7ff fc38 	bl	80086ac <_malloc_r>
 8008e3c:	4607      	mov	r7, r0
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d0ec      	beq.n	8008e1c <_realloc_r+0x1c>
 8008e42:	42b5      	cmp	r5, r6
 8008e44:	462a      	mov	r2, r5
 8008e46:	4621      	mov	r1, r4
 8008e48:	bf28      	it	cs
 8008e4a:	4632      	movcs	r2, r6
 8008e4c:	f7ff ffca 	bl	8008de4 <memcpy>
 8008e50:	4621      	mov	r1, r4
 8008e52:	4640      	mov	r0, r8
 8008e54:	f7ff fbbe 	bl	80085d4 <_free_r>
 8008e58:	463c      	mov	r4, r7
 8008e5a:	e7e0      	b.n	8008e1e <_realloc_r+0x1e>

08008e5c <_malloc_usable_size_r>:
 8008e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e60:	1f18      	subs	r0, r3, #4
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bfbc      	itt	lt
 8008e66:	580b      	ldrlt	r3, [r1, r0]
 8008e68:	18c0      	addlt	r0, r0, r3
 8008e6a:	4770      	bx	lr

08008e6c <_init>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	bf00      	nop
 8008e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e72:	bc08      	pop	{r3}
 8008e74:	469e      	mov	lr, r3
 8008e76:	4770      	bx	lr

08008e78 <_fini>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	bf00      	nop
 8008e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7e:	bc08      	pop	{r3}
 8008e80:	469e      	mov	lr, r3
 8008e82:	4770      	bx	lr

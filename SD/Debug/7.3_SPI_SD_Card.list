
7.3_SPI_SD_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008928  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08008ab8  08008ab8  00009ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e34  08008e34  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008e34  08008e34  00009e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e3c  08008e3c  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e3c  08008e3c  00009e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008e44  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000271c  20000074  08008eb8  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002790  08008eb8  0000a790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001033a  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a0  00000000  00000000  0001a3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001ca80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b09  00000000  00000000  0001d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a59  00000000  00000000  0001e3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e49  00000000  00000000  00045e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb77b  00000000  00000000  00059c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  0014544c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  001494c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008aa0 	.word	0x08008aa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008aa0 	.word	0x08008aa0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <SELECT+0x14>)
 8000b86:	f001 fc41 	bl	800240c <HAL_GPIO_WritePin>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	48000400 	.word	0x48000400

08000b94 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <DESELECT+0x14>)
 8000b9e:	f001 fc35 	bl	800240c <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	48000400 	.word	0x48000400

08000bac <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000bb6:	bf00      	nop
 8000bb8:	4807      	ldr	r0, [pc, #28]	@ (8000bd8 <SPI_TxByte+0x2c>)
 8000bba:	f003 fb99 	bl	80042f0 <HAL_SPI_GetState>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d1f9      	bne.n	8000bb8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000bc4:	1df9      	adds	r1, r7, #7
 8000bc6:	2364      	movs	r3, #100	@ 0x64
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <SPI_TxByte+0x2c>)
 8000bcc:	f002 fff9 	bl	8003bc2 <HAL_SPI_Transmit>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000094 	.word	0x20000094

08000bdc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000be2:	23ff      	movs	r3, #255	@ 0xff
 8000be4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000bea:	bf00      	nop
 8000bec:	4809      	ldr	r0, [pc, #36]	@ (8000c14 <SPI_RxByte+0x38>)
 8000bee:	f003 fb7f 	bl	80042f0 <HAL_SPI_GetState>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d1f9      	bne.n	8000bec <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000bf8:	1dba      	adds	r2, r7, #6
 8000bfa:	1df9      	adds	r1, r7, #7
 8000bfc:	2364      	movs	r3, #100	@ 0x64
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <SPI_RxByte+0x38>)
 8000c04:	f003 f952 	bl	8003eac <HAL_SPI_TransmitReceive>

  return data;
 8000c08:	79bb      	ldrb	r3, [r7, #6]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000094 	.word	0x20000094

08000c18 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c20:	f7ff ffdc 	bl	8000bdc <SPI_RxByte>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	701a      	strb	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <SD_ReadyWait+0x34>)
 8000c3c:	2232      	movs	r2, #50	@ 0x32
 8000c3e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000c40:	f7ff ffcc 	bl	8000bdc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000c44:	f7ff ffca 	bl	8000bdc <SPI_RxByte>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2bff      	cmp	r3, #255	@ 0xff
 8000c50:	d004      	beq.n	8000c5c <SD_ReadyWait+0x28>
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <SD_ReadyWait+0x34>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1f3      	bne.n	8000c44 <SD_ReadyWait+0x10>

  return res;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20002602 	.word	0x20002602

08000c6c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c72:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000c76:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000c78:	f7ff ff8c 	bl	8000b94 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	e005      	b.n	8000c8e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c82:	20ff      	movs	r0, #255	@ 0xff
 8000c84:	f7ff ff92 	bl	8000bac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	2b09      	cmp	r3, #9
 8000c92:	ddf6      	ble.n	8000c82 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000c94:	f7ff ff72 	bl	8000b7c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000c98:	2340      	movs	r3, #64	@ 0x40
 8000c9a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000cac:	2395      	movs	r3, #149	@ 0x95
 8000cae:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e009      	b.n	8000cca <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000cb6:	1d3a      	adds	r2, r7, #4
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff74 	bl	8000bac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b05      	cmp	r3, #5
 8000cce:	ddf2      	ble.n	8000cb6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000cd0:	e002      	b.n	8000cd8 <SD_PowerOn+0x6c>
  {
    Count--;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000cd8:	f7ff ff80 	bl	8000bdc <SPI_RxByte>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d002      	beq.n	8000ce8 <SD_PowerOn+0x7c>
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f4      	bne.n	8000cd2 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000ce8:	f7ff ff54 	bl	8000b94 <DESELECT>
  SPI_TxByte(0XFF);
 8000cec:	20ff      	movs	r0, #255	@ 0xff
 8000cee:	f7ff ff5d 	bl	8000bac <SPI_TxByte>

  PowerFlag = 1;
 8000cf2:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <SD_PowerOn+0x94>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000091 	.word	0x20000091

08000d04 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <SD_PowerOff+0x14>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	20000091 	.word	0x20000091

08000d1c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <SD_CheckPower+0x14>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000091 	.word	0x20000091

08000d34 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <SD_RxDataBlock+0x68>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000d44:	f7ff ff4a 	bl	8000bdc <SPI_RxByte>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2bff      	cmp	r3, #255	@ 0xff
 8000d50:	d104      	bne.n	8000d5c <SD_RxDataBlock+0x28>
 8000d52:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <SD_RxDataBlock+0x68>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f3      	bne.n	8000d44 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d60:	d001      	beq.n	8000d66 <SD_RxDataBlock+0x32>
    return FALSE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e016      	b.n	8000d94 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff53 	bl	8000c18 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff4d 	bl	8000c18 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3b02      	subs	r3, #2
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1ed      	bne.n	8000d66 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000d8a:	f7ff ff27 	bl	8000bdc <SPI_RxByte>
  SPI_RxByte();
 8000d8e:	f7ff ff25 	bl	8000bdc <SPI_RxByte>

  return TRUE;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20002601 	.word	0x20002601

08000da0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000db0:	f7ff ff40 	bl	8000c34 <SD_ReadyWait>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2bff      	cmp	r3, #255	@ 0xff
 8000db8:	d001      	beq.n	8000dbe <SD_TxDataBlock+0x1e>
    return FALSE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e040      	b.n	8000e40 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fef3 	bl	8000bac <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	2bfd      	cmp	r3, #253	@ 0xfd
 8000dca:	d031      	beq.n	8000e30 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fee7 	bl	8000bac <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fee0 	bl	8000bac <SPI_TxByte>
    } while (--wc);
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	73bb      	strb	r3, [r7, #14]
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1eb      	bne.n	8000dd0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000df8:	f7ff fef0 	bl	8000bdc <SPI_RxByte>
    SPI_RxByte();
 8000dfc:	f7ff feee 	bl	8000bdc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000e00:	e00b      	b.n	8000e1a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000e02:	f7ff feeb 	bl	8000bdc <SPI_RxByte>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f003 031f 	and.w	r3, r3, #31
 8000e10:	2b05      	cmp	r3, #5
 8000e12:	d006      	beq.n	8000e22 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000e14:	7b7b      	ldrb	r3, [r7, #13]
 8000e16:	3301      	adds	r3, #1
 8000e18:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000e1a:	7b7b      	ldrb	r3, [r7, #13]
 8000e1c:	2b40      	cmp	r3, #64	@ 0x40
 8000e1e:	d9f0      	bls.n	8000e02 <SD_TxDataBlock+0x62>
 8000e20:	e000      	b.n	8000e24 <SD_TxDataBlock+0x84>
        break;
 8000e22:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000e24:	bf00      	nop
 8000e26:	f7ff fed9 	bl	8000bdc <SPI_RxByte>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0fa      	beq.n	8000e26 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	2b05      	cmp	r3, #5
 8000e38:	d101      	bne.n	8000e3e <SD_TxDataBlock+0x9e>
    return TRUE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e54:	f7ff feee 	bl	8000c34 <SD_ReadyWait>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2bff      	cmp	r3, #255	@ 0xff
 8000e5c:	d001      	beq.n	8000e62 <SD_SendCmd+0x1a>
    return 0xFF;
 8000e5e:	23ff      	movs	r3, #255	@ 0xff
 8000e60:	e040      	b.n	8000ee4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fea1 	bl	8000bac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	0e1b      	lsrs	r3, r3, #24
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fe9b 	bl	8000bac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fe95 	bl	8000bac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fe8f 	bl	8000bac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fe8a 	bl	8000bac <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b40      	cmp	r3, #64	@ 0x40
 8000ea0:	d101      	bne.n	8000ea6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000ea2:	2395      	movs	r3, #149	@ 0x95
 8000ea4:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b48      	cmp	r3, #72	@ 0x48
 8000eaa:	d101      	bne.n	8000eb0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000eac:	2387      	movs	r3, #135	@ 0x87
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fe7a 	bl	8000bac <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b4c      	cmp	r3, #76	@ 0x4c
 8000ebc:	d101      	bne.n	8000ec2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000ebe:	f7ff fe8d 	bl	8000bdc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ec6:	f7ff fe89 	bl	8000bdc <SPI_RxByte>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000ece:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da05      	bge.n	8000ee2 <SD_SendCmd+0x9a>
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	73bb      	strb	r3, [r7, #14]
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f1      	bne.n	8000ec6 <SD_SendCmd+0x7e>

  return res;
 8000ee2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e0d5      	b.n	80010ac <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000f00:	4b6c      	ldr	r3, [pc, #432]	@ (80010b4 <SD_disk_initialize+0x1c8>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <SD_disk_initialize+0x2a>
    return Stat;
 8000f0e:	4b69      	ldr	r3, [pc, #420]	@ (80010b4 <SD_disk_initialize+0x1c8>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	e0ca      	b.n	80010ac <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000f16:	f7ff fea9 	bl	8000c6c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000f1a:	f7ff fe2f 	bl	8000b7c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f22:	2100      	movs	r1, #0
 8000f24:	2040      	movs	r0, #64	@ 0x40
 8000f26:	f7ff ff8f 	bl	8000e48 <SD_SendCmd>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	f040 80a5 	bne.w	800107c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000f32:	4b61      	ldr	r3, [pc, #388]	@ (80010b8 <SD_disk_initialize+0x1cc>)
 8000f34:	2264      	movs	r2, #100	@ 0x64
 8000f36:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f38:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f3c:	2048      	movs	r0, #72	@ 0x48
 8000f3e:	f7ff ff83 	bl	8000e48 <SD_SendCmd>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d158      	bne.n	8000ffa <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e00c      	b.n	8000f68 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f4e:	7bfc      	ldrb	r4, [r7, #15]
 8000f50:	f7ff fe44 	bl	8000bdc <SPI_RxByte>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	f104 0310 	add.w	r3, r4, #16
 8000f5c:	443b      	add	r3, r7
 8000f5e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	3301      	adds	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d9ef      	bls.n	8000f4e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f6e:	7abb      	ldrb	r3, [r7, #10]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	f040 8083 	bne.w	800107c <SD_disk_initialize+0x190>
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	2baa      	cmp	r3, #170	@ 0xaa
 8000f7a:	d17f      	bne.n	800107c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2077      	movs	r0, #119	@ 0x77
 8000f80:	f7ff ff62 	bl	8000e48 <SD_SendCmd>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d807      	bhi.n	8000f9a <SD_disk_initialize+0xae>
 8000f8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f8e:	2069      	movs	r0, #105	@ 0x69
 8000f90:	f7ff ff5a 	bl	8000e48 <SD_SendCmd>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000f9a:	4b47      	ldr	r3, [pc, #284]	@ (80010b8 <SD_disk_initialize+0x1cc>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1eb      	bne.n	8000f7c <SD_disk_initialize+0x90>
 8000fa4:	e000      	b.n	8000fa8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000fa6:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fa8:	4b43      	ldr	r3, [pc, #268]	@ (80010b8 <SD_disk_initialize+0x1cc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d064      	beq.n	800107c <SD_disk_initialize+0x190>
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	207a      	movs	r0, #122	@ 0x7a
 8000fb6:	f7ff ff47 	bl	8000e48 <SD_SendCmd>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d15d      	bne.n	800107c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e00c      	b.n	8000fe0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000fc6:	7bfc      	ldrb	r4, [r7, #15]
 8000fc8:	f7ff fe08 	bl	8000bdc <SPI_RxByte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f104 0310 	add.w	r3, r4, #16
 8000fd4:	443b      	add	r3, r7
 8000fd6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d9ef      	bls.n	8000fc6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000fe6:	7a3b      	ldrb	r3, [r7, #8]
 8000fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SD_disk_initialize+0x108>
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	e000      	b.n	8000ff6 <SD_disk_initialize+0x10a>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	73bb      	strb	r3, [r7, #14]
 8000ff8:	e040      	b.n	800107c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2077      	movs	r0, #119	@ 0x77
 8000ffe:	f7ff ff23 	bl	8000e48 <SD_SendCmd>
 8001002:	4603      	mov	r3, r0
 8001004:	2b01      	cmp	r3, #1
 8001006:	d808      	bhi.n	800101a <SD_disk_initialize+0x12e>
 8001008:	2100      	movs	r1, #0
 800100a:	2069      	movs	r0, #105	@ 0x69
 800100c:	f7ff ff1c 	bl	8000e48 <SD_SendCmd>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d801      	bhi.n	800101a <SD_disk_initialize+0x12e>
 8001016:	2302      	movs	r3, #2
 8001018:	e000      	b.n	800101c <SD_disk_initialize+0x130>
 800101a:	2301      	movs	r3, #1
 800101c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d10e      	bne.n	8001042 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001024:	2100      	movs	r1, #0
 8001026:	2077      	movs	r0, #119	@ 0x77
 8001028:	f7ff ff0e 	bl	8000e48 <SD_SendCmd>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d80e      	bhi.n	8001050 <SD_disk_initialize+0x164>
 8001032:	2100      	movs	r1, #0
 8001034:	2069      	movs	r0, #105	@ 0x69
 8001036:	f7ff ff07 	bl	8000e48 <SD_SendCmd>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d107      	bne.n	8001050 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001040:	e00d      	b.n	800105e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001042:	2100      	movs	r1, #0
 8001044:	2041      	movs	r0, #65	@ 0x41
 8001046:	f7ff feff 	bl	8000e48 <SD_SendCmd>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <SD_disk_initialize+0x1cc>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1e1      	bne.n	800101e <SD_disk_initialize+0x132>
 800105a:	e000      	b.n	800105e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800105c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <SD_disk_initialize+0x1cc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d007      	beq.n	8001078 <SD_disk_initialize+0x18c>
 8001068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106c:	2050      	movs	r0, #80	@ 0x50
 800106e:	f7ff feeb 	bl	8000e48 <SD_SendCmd>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800107c:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <SD_disk_initialize+0x1d0>)
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001082:	f7ff fd87 	bl	8000b94 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001086:	f7ff fda9 	bl	8000bdc <SPI_RxByte>

  if (type)
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <SD_disk_initialize+0x1c8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SD_disk_initialize+0x1c8>)
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e001      	b.n	80010a6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010a2:	f7ff fe2f 	bl	8000d04 <SD_PowerOff>
  }

  return Stat;
 80010a6:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <SD_disk_initialize+0x1c8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20002601 	.word	0x20002601
 80010bc:	20000090 	.word	0x20000090

080010c0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e002      	b.n	80010da <SD_disk_status+0x1a>

  return Stat;
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <SD_disk_status+0x28>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000

080010ec <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <SD_disk_read+0x1c>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <SD_disk_read+0x20>
    return RES_PARERR;
 8001108:	2304      	movs	r3, #4
 800110a:	e051      	b.n	80011b0 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800110c:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <SD_disk_read+0xcc>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800111a:	2303      	movs	r3, #3
 800111c:	e048      	b.n	80011b0 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800111e:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <SD_disk_read+0xd0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	025b      	lsls	r3, r3, #9
 800112e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001130:	f7ff fd24 	bl	8000b7c <SELECT>

  if (count == 1)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d111      	bne.n	800115e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	2051      	movs	r0, #81	@ 0x51
 800113e:	f7ff fe83 	bl	8000e48 <SD_SendCmd>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d129      	bne.n	800119c <SD_disk_read+0xb0>
 8001148:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	f7ff fdf1 	bl	8000d34 <SD_RxDataBlock>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d021      	beq.n	800119c <SD_disk_read+0xb0>
      count = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	e01e      	b.n	800119c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	2052      	movs	r0, #82	@ 0x52
 8001162:	f7ff fe71 	bl	8000e48 <SD_SendCmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d117      	bne.n	800119c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800116c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff fddf 	bl	8000d34 <SD_RxDataBlock>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00a      	beq.n	8001192 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001182:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	3b01      	subs	r3, #1
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1ed      	bne.n	800116c <SD_disk_read+0x80>
 8001190:	e000      	b.n	8001194 <SD_disk_read+0xa8>
          break;
 8001192:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001194:	2100      	movs	r1, #0
 8001196:	204c      	movs	r0, #76	@ 0x4c
 8001198:	f7ff fe56 	bl	8000e48 <SD_SendCmd>
    }
  }

  DESELECT();
 800119c:	f7ff fcfa 	bl	8000b94 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80011a0:	f7ff fd1c 	bl	8000bdc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf14      	ite	ne
 80011aa:	2301      	movne	r3, #1
 80011ac:	2300      	moveq	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000090 	.word	0x20000090

080011c0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <SD_disk_write+0x1c>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <SD_disk_write+0x20>
    return RES_PARERR;
 80011dc:	2304      	movs	r3, #4
 80011de:	e06b      	b.n	80012b8 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80011e0:	4b37      	ldr	r3, [pc, #220]	@ (80012c0 <SD_disk_write+0x100>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e062      	b.n	80012b8 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80011f2:	4b33      	ldr	r3, [pc, #204]	@ (80012c0 <SD_disk_write+0x100>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001200:	2302      	movs	r3, #2
 8001202:	e059      	b.n	80012b8 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <SD_disk_write+0x104>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	025b      	lsls	r3, r3, #9
 8001214:	607b      	str	r3, [r7, #4]

  SELECT();
 8001216:	f7ff fcb1 	bl	8000b7c <SELECT>

  if (count == 1)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d110      	bne.n	8001242 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	2058      	movs	r0, #88	@ 0x58
 8001224:	f7ff fe10 	bl	8000e48 <SD_SendCmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d13a      	bne.n	80012a4 <SD_disk_write+0xe4>
 800122e:	21fe      	movs	r1, #254	@ 0xfe
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f7ff fdb5 	bl	8000da0 <SD_TxDataBlock>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d033      	beq.n	80012a4 <SD_disk_write+0xe4>
      count = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	e030      	b.n	80012a4 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <SD_disk_write+0x104>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800124e:	2100      	movs	r1, #0
 8001250:	2077      	movs	r0, #119	@ 0x77
 8001252:	f7ff fdf9 	bl	8000e48 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	2057      	movs	r0, #87	@ 0x57
 800125a:	f7ff fdf5 	bl	8000e48 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	2059      	movs	r0, #89	@ 0x59
 8001262:	f7ff fdf1 	bl	8000e48 <SD_SendCmd>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d11b      	bne.n	80012a4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800126c:	21fc      	movs	r1, #252	@ 0xfc
 800126e:	68b8      	ldr	r0, [r7, #8]
 8001270:	f7ff fd96 	bl	8000da0 <SD_TxDataBlock>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00a      	beq.n	8001290 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001280:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ee      	bne.n	800126c <SD_disk_write+0xac>
 800128e:	e000      	b.n	8001292 <SD_disk_write+0xd2>
          break;
 8001290:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001292:	21fd      	movs	r1, #253	@ 0xfd
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fd83 	bl	8000da0 <SD_TxDataBlock>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <SD_disk_write+0xe4>
      {
        count = 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80012a4:	f7ff fc76 	bl	8000b94 <DESELECT>
  SPI_RxByte();
 80012a8:	f7ff fc98 	bl	8000bdc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf14      	ite	ne
 80012b2:	2301      	movne	r3, #1
 80012b4:	2300      	moveq	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000090 	.word	0x20000090

080012c8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b08b      	sub	sp, #44	@ 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	603a      	str	r2, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	460b      	mov	r3, r1
 80012d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80012e2:	2304      	movs	r3, #4
 80012e4:	e119      	b.n	800151a <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d129      	bne.n	8001346 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d017      	beq.n	800132a <SD_disk_ioctl+0x62>
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	dc1f      	bgt.n	800133e <SD_disk_ioctl+0x76>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <SD_disk_ioctl+0x40>
 8001302:	2b01      	cmp	r3, #1
 8001304:	d00b      	beq.n	800131e <SD_disk_ioctl+0x56>
 8001306:	e01a      	b.n	800133e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001308:	f7ff fd08 	bl	8000d1c <SD_CheckPower>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001312:	f7ff fcf7 	bl	8000d04 <SD_PowerOff>
      res = RES_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800131c:	e0fb      	b.n	8001516 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 800131e:	f7ff fca5 	bl	8000c6c <SD_PowerOn>
      res = RES_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001328:	e0f5      	b.n	8001516 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	1c5c      	adds	r4, r3, #1
 800132e:	f7ff fcf5 	bl	8000d1c <SD_CheckPower>
 8001332:	4603      	mov	r3, r0
 8001334:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800133c:	e0eb      	b.n	8001516 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 800133e:	2304      	movs	r3, #4
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001344:	e0e7      	b.n	8001516 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001346:	4b77      	ldr	r3, [pc, #476]	@ (8001524 <SD_disk_ioctl+0x25c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001354:	2303      	movs	r3, #3
 8001356:	e0e0      	b.n	800151a <SD_disk_ioctl+0x252>

    SELECT();
 8001358:	f7ff fc10 	bl	8000b7c <SELECT>

    switch (ctrl)
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	2b0d      	cmp	r3, #13
 8001360:	f200 80ca 	bhi.w	80014f8 <SD_disk_ioctl+0x230>
 8001364:	a201      	add	r2, pc, #4	@ (adr r2, 800136c <SD_disk_ioctl+0xa4>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	08001463 	.word	0x08001463
 8001370:	080013a5 	.word	0x080013a5
 8001374:	08001453 	.word	0x08001453
 8001378:	080014f9 	.word	0x080014f9
 800137c:	080014f9 	.word	0x080014f9
 8001380:	080014f9 	.word	0x080014f9
 8001384:	080014f9 	.word	0x080014f9
 8001388:	080014f9 	.word	0x080014f9
 800138c:	080014f9 	.word	0x080014f9
 8001390:	080014f9 	.word	0x080014f9
 8001394:	080014f9 	.word	0x080014f9
 8001398:	08001475 	.word	0x08001475
 800139c:	08001499 	.word	0x08001499
 80013a0:	080014bd 	.word	0x080014bd
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013a4:	2100      	movs	r1, #0
 80013a6:	2049      	movs	r0, #73	@ 0x49
 80013a8:	f7ff fd4e 	bl	8000e48 <SD_SendCmd>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 80a6 	bne.w	8001500 <SD_disk_ioctl+0x238>
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	2110      	movs	r1, #16
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fcba 	bl	8000d34 <SD_RxDataBlock>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 809c 	beq.w	8001500 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	099b      	lsrs	r3, r3, #6
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10d      	bne.n	80013ee <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013d2:	7d7b      	ldrb	r3, [r7, #21]
 80013d4:	461a      	mov	r2, r3
 80013d6:	7d3b      	ldrb	r3, [r7, #20]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3301      	adds	r3, #1
 80013e2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80013e4:	8bfb      	ldrh	r3, [r7, #30]
 80013e6:	029a      	lsls	r2, r3, #10
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e02d      	b.n	800144a <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013ee:	7c7b      	ldrb	r3, [r7, #17]
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	7dbb      	ldrb	r3, [r7, #22]
 80013f8:	09db      	lsrs	r3, r3, #7
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	7d7b      	ldrb	r3, [r7, #21]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f003 0306 	and.w	r3, r3, #6
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	3302      	adds	r3, #2
 8001412:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001416:	7d3b      	ldrb	r3, [r7, #20]
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	7cfb      	ldrb	r3, [r7, #19]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	b29b      	uxth	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b29a      	uxth	r2, r3
 8001428:	7cbb      	ldrb	r3, [r7, #18]
 800142a:	029b      	lsls	r3, r3, #10
 800142c:	b29b      	uxth	r3, r3
 800142e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001432:	b29b      	uxth	r3, r3
 8001434:	4413      	add	r3, r2
 8001436:	b29b      	uxth	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800143c:	8bfa      	ldrh	r2, [r7, #30]
 800143e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001442:	3b09      	subs	r3, #9
 8001444:	409a      	lsls	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001450:	e056      	b.n	8001500 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001458:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001460:	e055      	b.n	800150e <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001462:	f7ff fbe7 	bl	8000c34 <SD_ReadyWait>
 8001466:	4603      	mov	r3, r0
 8001468:	2bff      	cmp	r3, #255	@ 0xff
 800146a:	d14b      	bne.n	8001504 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001472:	e047      	b.n	8001504 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001474:	2100      	movs	r1, #0
 8001476:	2049      	movs	r0, #73	@ 0x49
 8001478:	f7ff fce6 	bl	8000e48 <SD_SendCmd>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d142      	bne.n	8001508 <SD_disk_ioctl+0x240>
 8001482:	2110      	movs	r1, #16
 8001484:	6a38      	ldr	r0, [r7, #32]
 8001486:	f7ff fc55 	bl	8000d34 <SD_RxDataBlock>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d03b      	beq.n	8001508 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001496:	e037      	b.n	8001508 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001498:	2100      	movs	r1, #0
 800149a:	204a      	movs	r0, #74	@ 0x4a
 800149c:	f7ff fcd4 	bl	8000e48 <SD_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d132      	bne.n	800150c <SD_disk_ioctl+0x244>
 80014a6:	2110      	movs	r1, #16
 80014a8:	6a38      	ldr	r0, [r7, #32]
 80014aa:	f7ff fc43 	bl	8000d34 <SD_RxDataBlock>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d02b      	beq.n	800150c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014ba:	e027      	b.n	800150c <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014bc:	2100      	movs	r1, #0
 80014be:	207a      	movs	r0, #122	@ 0x7a
 80014c0:	f7ff fcc2 	bl	8000e48 <SD_SendCmd>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d116      	bne.n	80014f8 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014d0:	e00b      	b.n	80014ea <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80014d2:	6a3c      	ldr	r4, [r7, #32]
 80014d4:	1c63      	adds	r3, r4, #1
 80014d6:	623b      	str	r3, [r7, #32]
 80014d8:	f7ff fb80 	bl	8000bdc <SPI_RxByte>
 80014dc:	4603      	mov	r3, r0
 80014de:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80014e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014e4:	3301      	adds	r3, #1
 80014e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d9ef      	bls.n	80014d2 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 80014f8:	2304      	movs	r3, #4
 80014fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014fe:	e006      	b.n	800150e <SD_disk_ioctl+0x246>
      break;
 8001500:	bf00      	nop
 8001502:	e004      	b.n	800150e <SD_disk_ioctl+0x246>
      break;
 8001504:	bf00      	nop
 8001506:	e002      	b.n	800150e <SD_disk_ioctl+0x246>
      break;
 8001508:	bf00      	nop
 800150a:	e000      	b.n	800150e <SD_disk_ioctl+0x246>
      break;
 800150c:	bf00      	nop
    }

    DESELECT();
 800150e:	f7ff fb41 	bl	8000b94 <DESELECT>
    SPI_RxByte();
 8001512:	f7ff fb63 	bl	8000bdc <SPI_RxByte>
  }

  return res;
 8001516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800151a:	4618      	mov	r0, r3
 800151c:	372c      	adds	r7, #44	@ 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	20000000 	.word	0x20000000

08001528 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

// to send the uart

void send_uart(char *string) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7fe fe4d 	bl	80001d0 <strlen>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000); // transmiting in bloking mode
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	b29a      	uxth	r2, r3
 800153e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4803      	ldr	r0, [pc, #12]	@ (8001554 <send_uart+0x2c>)
 8001546:	f003 f893 	bl	8004670 <HAL_UART_Transmit>

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000f8 	.word	0x200000f8

08001558 <bufsize>:

// to fined the size of data in buffer

int bufsize(char *buf) {
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8001564:	bf00      	nop
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <bufsize+0xe>
		;
	return i;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <bufclear>:

void bufclear(void) {  // clear the buffer
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0

	for (int i = 0; i < 1024; i++) {
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	e007      	b.n	800159c <bufclear+0x1c>
		buffer[i] = '\0';
 800158c:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <bufclear+0x34>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3301      	adds	r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a2:	dbf3      	blt.n	800158c <bufclear+0xc>
	}
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200021f0 	.word	0x200021f0

080015b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015bc:	f000 fc1a 	bl	8001df4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015c0:	f000 f96c 	bl	800189c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015c4:	f000 fa2a 	bl	8001a1c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80015c8:	f000 f9f8 	bl	80019bc <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80015cc:	f000 f9b8 	bl	8001940 <MX_SPI1_Init>
	MX_FATFS_Init();
 80015d0:	f003 fda6 	bl	8005120 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	//Mount sd card
	fresult = f_mount(&fs, "/", 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	4995      	ldr	r1, [pc, #596]	@ (800182c <main+0x274>)
 80015d8:	4895      	ldr	r0, [pc, #596]	@ (8001830 <main+0x278>)
 80015da:	f005 fc09 	bl	8006df0 <f_mount>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b94      	ldr	r3, [pc, #592]	@ (8001834 <main+0x27c>)
 80015e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80015e6:	4b93      	ldr	r3, [pc, #588]	@ (8001834 <main+0x27c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <main+0x3e>
		send_uart("ERROR!!! in mounting SD CARD...\n\n");
 80015ee:	4892      	ldr	r0, [pc, #584]	@ (8001838 <main+0x280>)
 80015f0:	f7ff ff9a 	bl	8001528 <send_uart>
 80015f4:	e002      	b.n	80015fc <main+0x44>
	else
		send_uart("SD CARD mounted successfully...\n\n");
 80015f6:	4891      	ldr	r0, [pc, #580]	@ (800183c <main+0x284>)
 80015f8:	f7ff ff96 	bl	8001528 <send_uart>

	/***** Card capacity details ********/

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 80015fc:	4a90      	ldr	r2, [pc, #576]	@ (8001840 <main+0x288>)
 80015fe:	4991      	ldr	r1, [pc, #580]	@ (8001844 <main+0x28c>)
 8001600:	4891      	ldr	r0, [pc, #580]	@ (8001848 <main+0x290>)
 8001602:	f006 fbc2 	bl	8007d8a <f_getfree>

	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001606:	4b8e      	ldr	r3, [pc, #568]	@ (8001840 <main+0x288>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	3b02      	subs	r3, #2
 800160e:	4a8c      	ldr	r2, [pc, #560]	@ (8001840 <main+0x288>)
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	8952      	ldrh	r2, [r2, #10]
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f89d 	bl	8000758 <__aeabi_ui2d>
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b8a      	ldr	r3, [pc, #552]	@ (800184c <main+0x294>)
 8001624:	f7fe fe2c 	bl	8000280 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff f90c 	bl	800084c <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	4a86      	ldr	r2, [pc, #536]	@ (8001850 <main+0x298>)
 8001638:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD CARD Total Size: \t%lu\n", total);
 800163a:	4b85      	ldr	r3, [pc, #532]	@ (8001850 <main+0x298>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4984      	ldr	r1, [pc, #528]	@ (8001854 <main+0x29c>)
 8001642:	4885      	ldr	r0, [pc, #532]	@ (8001858 <main+0x2a0>)
 8001644:	f006 fd8c 	bl	8008160 <siprintf>
	send_uart(buffer);
 8001648:	4883      	ldr	r0, [pc, #524]	@ (8001858 <main+0x2a0>)
 800164a:	f7ff ff6d 	bl	8001528 <send_uart>
	bufclear();
 800164e:	f7ff ff97 	bl	8001580 <bufclear>
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001652:	4b7b      	ldr	r3, [pc, #492]	@ (8001840 <main+0x288>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	895b      	ldrh	r3, [r3, #10]
 8001658:	461a      	mov	r2, r3
 800165a:	4b7a      	ldr	r3, [pc, #488]	@ (8001844 <main+0x28c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f878 	bl	8000758 <__aeabi_ui2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b77      	ldr	r3, [pc, #476]	@ (800184c <main+0x294>)
 800166e:	f7fe fe07 	bl	8000280 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff f8e7 	bl	800084c <__aeabi_d2uiz>
 800167e:	4603      	mov	r3, r0
 8001680:	4a76      	ldr	r2, [pc, #472]	@ (800185c <main+0x2a4>)
 8001682:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD CARD Free Space: \t%lu\n\n", free_space);
 8001684:	4b75      	ldr	r3, [pc, #468]	@ (800185c <main+0x2a4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4975      	ldr	r1, [pc, #468]	@ (8001860 <main+0x2a8>)
 800168c:	4872      	ldr	r0, [pc, #456]	@ (8001858 <main+0x2a0>)
 800168e:	f006 fd67 	bl	8008160 <siprintf>
	send_uart(buffer);
 8001692:	4871      	ldr	r0, [pc, #452]	@ (8001858 <main+0x2a0>)
 8001694:	f7ff ff48 	bl	8001528 <send_uart>
	bufclear();
 8001698:	f7ff ff72 	bl	8001580 <bufclear>

	//puts and gets operation

	/* Create file with read write access and open it */
	fresult = f_open(&fil, "DISHANT.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800169c:	2213      	movs	r2, #19
 800169e:	4971      	ldr	r1, [pc, #452]	@ (8001864 <main+0x2ac>)
 80016a0:	4871      	ldr	r0, [pc, #452]	@ (8001868 <main+0x2b0>)
 80016a2:	f005 fbeb 	bl	8006e7c <f_open>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b62      	ldr	r3, [pc, #392]	@ (8001834 <main+0x27c>)
 80016ac:	701a      	strb	r2, [r3, #0]

	//Writing text
	fresult = f_puts("This is First File and created by dishant.\r\n", &fil);
 80016ae:	496e      	ldr	r1, [pc, #440]	@ (8001868 <main+0x2b0>)
 80016b0:	486e      	ldr	r0, [pc, #440]	@ (800186c <main+0x2b4>)
 80016b2:	f006 fcd4 	bl	800805e <f_puts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001834 <main+0x27c>)
 80016bc:	701a      	strb	r2, [r3, #0]

	//Close file
	fresult = f_close(&fil);
 80016be:	486a      	ldr	r0, [pc, #424]	@ (8001868 <main+0x2b0>)
 80016c0:	f006 f915 	bl	80078ee <f_close>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001834 <main+0x27c>)
 80016ca:	701a      	strb	r2, [r3, #0]

	/*--------------------------------------------------------------------------*/
	send_uart("DISHANT.txt is opened and it contains the data as shown below\n");
 80016cc:	4868      	ldr	r0, [pc, #416]	@ (8001870 <main+0x2b8>)
 80016ce:	f7ff ff2b 	bl	8001528 <send_uart>
	/* Open file to read */
	fresult = f_open(&fil, "DISHANT.txt", FA_READ);
 80016d2:	2201      	movs	r2, #1
 80016d4:	4963      	ldr	r1, [pc, #396]	@ (8001864 <main+0x2ac>)
 80016d6:	4864      	ldr	r0, [pc, #400]	@ (8001868 <main+0x2b0>)
 80016d8:	f005 fbd0 	bl	8006e7c <f_open>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b54      	ldr	r3, [pc, #336]	@ (8001834 <main+0x27c>)
 80016e2:	701a      	strb	r2, [r3, #0]

	/* Read string from the file */
	f_gets(buffer, f_size(&fil), &fil);
 80016e4:	4b60      	ldr	r3, [pc, #384]	@ (8001868 <main+0x2b0>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a5f      	ldr	r2, [pc, #380]	@ (8001868 <main+0x2b0>)
 80016ea:	4619      	mov	r1, r3
 80016ec:	485a      	ldr	r0, [pc, #360]	@ (8001858 <main+0x2a0>)
 80016ee:	f006 fc01 	bl	8007ef4 <f_gets>

	send_uart(buffer);
 80016f2:	4859      	ldr	r0, [pc, #356]	@ (8001858 <main+0x2a0>)
 80016f4:	f7ff ff18 	bl	8001528 <send_uart>
	//Close file

	f_close(&fil);
 80016f8:	485b      	ldr	r0, [pc, #364]	@ (8001868 <main+0x2b0>)
 80016fa:	f006 f8f8 	bl	80078ee <f_close>
//	bufclear();

	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&fil, "file4.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80016fe:	220a      	movs	r2, #10
 8001700:	495c      	ldr	r1, [pc, #368]	@ (8001874 <main+0x2bc>)
 8001702:	4859      	ldr	r0, [pc, #356]	@ (8001868 <main+0x2b0>)
 8001704:	f005 fbba 	bl	8006e7c <f_open>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b49      	ldr	r3, [pc, #292]	@ (8001834 <main+0x27c>)
 800170e:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	strcpy(buffer,
 8001710:	4a51      	ldr	r2, [pc, #324]	@ (8001858 <main+0x2a0>)
 8001712:	4b59      	ldr	r3, [pc, #356]	@ (8001878 <main+0x2c0>)
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	234f      	movs	r3, #79	@ 0x4f
 800171a:	461a      	mov	r2, r3
 800171c:	f006 fd74 	bl	8008208 <memcpy>
			"This is File4.txt, written using ...f_write... and it says Hello from Dishant\n");

	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001720:	484d      	ldr	r0, [pc, #308]	@ (8001858 <main+0x2a0>)
 8001722:	f7ff ff19 	bl	8001558 <bufsize>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b54      	ldr	r3, [pc, #336]	@ (800187c <main+0x2c4>)
 800172c:	494a      	ldr	r1, [pc, #296]	@ (8001858 <main+0x2a0>)
 800172e:	484e      	ldr	r0, [pc, #312]	@ (8001868 <main+0x2b0>)
 8001730:	f005 fecb 	bl	80074ca <f_write>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <main+0x27c>)
 800173a:	701a      	strb	r2, [r3, #0]

	send_uart("File4.txt created and data is written\n");
 800173c:	4850      	ldr	r0, [pc, #320]	@ (8001880 <main+0x2c8>)
 800173e:	f7ff fef3 	bl	8001528 <send_uart>

	/* Close file */
	f_close(&fil);
 8001742:	4849      	ldr	r0, [pc, #292]	@ (8001868 <main+0x2b0>)
 8001744:	f006 f8d3 	bl	80078ee <f_close>

	// clearing buffer to show that result obtained is from the file
	//          	    bufclear();

	/* Open second file to read */
	fresult = f_open(&fil, "file4.txt", FA_READ);
 8001748:	2201      	movs	r2, #1
 800174a:	494a      	ldr	r1, [pc, #296]	@ (8001874 <main+0x2bc>)
 800174c:	4846      	ldr	r0, [pc, #280]	@ (8001868 <main+0x2b0>)
 800174e:	f005 fb95 	bl	8006e7c <f_open>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	4b37      	ldr	r3, [pc, #220]	@ (8001834 <main+0x27c>)
 8001758:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK) {
 800175a:	4b36      	ldr	r3, [pc, #216]	@ (8001834 <main+0x27c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <main+0x1b0>
		send_uart("file4.txt is open and the data is shown below\n");
 8001762:	4848      	ldr	r0, [pc, #288]	@ (8001884 <main+0x2cc>)
 8001764:	f7ff fee0 	bl	8001528 <send_uart>

	}
	/* Read data from the file
	 * Please see the function details for the arguments */
	f_read(&fil, buffer, f_size(&fil), &br);
 8001768:	4b3f      	ldr	r3, [pc, #252]	@ (8001868 <main+0x2b0>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4b46      	ldr	r3, [pc, #280]	@ (8001888 <main+0x2d0>)
 800176e:	493a      	ldr	r1, [pc, #232]	@ (8001858 <main+0x2a0>)
 8001770:	483d      	ldr	r0, [pc, #244]	@ (8001868 <main+0x2b0>)
 8001772:	f005 fd4b 	bl	800720c <f_read>

	send_uart(buffer);
 8001776:	4838      	ldr	r0, [pc, #224]	@ (8001858 <main+0x2a0>)
 8001778:	f7ff fed6 	bl	8001528 <send_uart>
	send_uart("\n\n");
 800177c:	4843      	ldr	r0, [pc, #268]	@ (800188c <main+0x2d4>)
 800177e:	f7ff fed3 	bl	8001528 <send_uart>

	/* Close file */
	f_close(&fil);
 8001782:	4839      	ldr	r0, [pc, #228]	@ (8001868 <main+0x2b0>)
 8001784:	f006 f8b3 	bl	80078ee <f_close>

	bufclear();
 8001788:	f7ff fefa 	bl	8001580 <bufclear>

	/*********************UPDATING an existing file ***************************/

	/* Open the file with write access */
	fresult = f_open(&fil, "file4.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800178c:	2203      	movs	r2, #3
 800178e:	4939      	ldr	r1, [pc, #228]	@ (8001874 <main+0x2bc>)
 8001790:	4835      	ldr	r0, [pc, #212]	@ (8001868 <main+0x2b0>)
 8001792:	f005 fb73 	bl	8006e7c <f_open>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <main+0x27c>)
 800179c:	701a      	strb	r2, [r3, #0]

	/* Move to offset to the end of the file */
	fresult = f_lseek(&fil, f_size(&fil));
 800179e:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <main+0x2b0>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4830      	ldr	r0, [pc, #192]	@ (8001868 <main+0x2b0>)
 80017a6:	f006 f8cc 	bl	8007942 <f_lseek>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <main+0x27c>)
 80017b0:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <main+0x27c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <main+0x208>
		send_uart("About to update the file4.txt\n");
 80017ba:	4835      	ldr	r0, [pc, #212]	@ (8001890 <main+0x2d8>)
 80017bc:	f7ff feb4 	bl	8001528 <send_uart>

	/* write the string to the file */
	fresult = f_puts("This is updated data and it should be in the end", &fil);
 80017c0:	4929      	ldr	r1, [pc, #164]	@ (8001868 <main+0x2b0>)
 80017c2:	4834      	ldr	r0, [pc, #208]	@ (8001894 <main+0x2dc>)
 80017c4:	f006 fc4b 	bl	800805e <f_puts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <main+0x27c>)
 80017ce:	701a      	strb	r2, [r3, #0]

	f_close(&fil);
 80017d0:	4825      	ldr	r0, [pc, #148]	@ (8001868 <main+0x2b0>)
 80017d2:	f006 f88c 	bl	80078ee <f_close>

	bufclear();
 80017d6:	f7ff fed3 	bl	8001580 <bufclear>

	/* Open to read the file */
	fresult = f_open(&fil, "file4.txt", FA_READ);
 80017da:	2201      	movs	r2, #1
 80017dc:	4925      	ldr	r1, [pc, #148]	@ (8001874 <main+0x2bc>)
 80017de:	4822      	ldr	r0, [pc, #136]	@ (8001868 <main+0x2b0>)
 80017e0:	f005 fb4c 	bl	8006e7c <f_open>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <main+0x27c>)
 80017ea:	701a      	strb	r2, [r3, #0]

	/* Read string from the file */
	fresult = f_read(&fil, buffer, f_size(&fil), &br);
 80017ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <main+0x2b0>)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <main+0x2d0>)
 80017f2:	4919      	ldr	r1, [pc, #100]	@ (8001858 <main+0x2a0>)
 80017f4:	481c      	ldr	r0, [pc, #112]	@ (8001868 <main+0x2b0>)
 80017f6:	f005 fd09 	bl	800720c <f_read>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <main+0x27c>)
 8001800:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <main+0x27c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <main+0x258>
		send_uart("Below is the data from updated file4.txt\n");
 800180a:	4823      	ldr	r0, [pc, #140]	@ (8001898 <main+0x2e0>)
 800180c:	f7ff fe8c 	bl	8001528 <send_uart>
	send_uart(buffer);
 8001810:	4811      	ldr	r0, [pc, #68]	@ (8001858 <main+0x2a0>)
 8001812:	f7ff fe89 	bl	8001528 <send_uart>
	send_uart("\n\n");
 8001816:	481d      	ldr	r0, [pc, #116]	@ (800188c <main+0x2d4>)
 8001818:	f7ff fe86 	bl	8001528 <send_uart>

	/* Close file */
	f_close(&fil);
 800181c:	4812      	ldr	r0, [pc, #72]	@ (8001868 <main+0x2b0>)
 800181e:	f006 f866 	bl	80078ee <f_close>

	bufclear();
 8001822:	f7ff fead 	bl	8001580 <bufclear>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001826:	bf00      	nop
 8001828:	e7fd      	b.n	8001826 <main+0x26e>
 800182a:	bf00      	nop
 800182c:	08008ab8 	.word	0x08008ab8
 8001830:	20000180 	.word	0x20000180
 8001834:	200021e4 	.word	0x200021e4
 8001838:	08008abc 	.word	0x08008abc
 800183c:	08008ae0 	.word	0x08008ae0
 8001840:	200025f0 	.word	0x200025f0
 8001844:	200025f4 	.word	0x200025f4
 8001848:	08008b04 	.word	0x08008b04
 800184c:	3fe00000 	.word	0x3fe00000
 8001850:	200025f8 	.word	0x200025f8
 8001854:	08008b08 	.word	0x08008b08
 8001858:	200021f0 	.word	0x200021f0
 800185c:	200025fc 	.word	0x200025fc
 8001860:	08008b24 	.word	0x08008b24
 8001864:	08008b40 	.word	0x08008b40
 8001868:	200011b4 	.word	0x200011b4
 800186c:	08008b4c 	.word	0x08008b4c
 8001870:	08008b7c 	.word	0x08008b7c
 8001874:	08008bbc 	.word	0x08008bbc
 8001878:	08008bc8 	.word	0x08008bc8
 800187c:	200021ec 	.word	0x200021ec
 8001880:	08008c18 	.word	0x08008c18
 8001884:	08008c40 	.word	0x08008c40
 8001888:	200021e8 	.word	0x200021e8
 800188c:	08008c70 	.word	0x08008c70
 8001890:	08008c74 	.word	0x08008c74
 8001894:	08008c94 	.word	0x08008c94
 8001898:	08008cc8 	.word	0x08008cc8

0800189c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b096      	sub	sp, #88	@ 0x58
 80018a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	2244      	movs	r2, #68	@ 0x44
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f006 fc78 	bl	80081a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80018be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018c2:	f000 fdc9 	bl	8002458 <HAL_PWREx_ControlVoltageScaling>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80018cc:	f000 f8f0 	bl	8001ab0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d0:	2302      	movs	r3, #2
 80018d2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018da:	2310      	movs	r3, #16
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018de:	2302      	movs	r3, #2
 80018e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e2:	2302      	movs	r3, #2
 80018e4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80018ea:	230a      	movs	r3, #10
 80018ec:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018ee:	2307      	movs	r3, #7
 80018f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fe00 	bl	8002504 <HAL_RCC_OscConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x72>
		Error_Handler();
 800190a:	f000 f8d1 	bl	8001ab0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800190e:	230f      	movs	r3, #15
 8001910:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001912:	2303      	movs	r3, #3
 8001914:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001922:	463b      	mov	r3, r7
 8001924:	2104      	movs	r1, #4
 8001926:	4618      	mov	r0, r3
 8001928:	f001 f9c8 	bl	8002cbc <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x9a>
		Error_Handler();
 8001932:	f000 f8bd 	bl	8001ab0 <Error_Handler>
	}
}
 8001936:	bf00      	nop
 8001938:	3758      	adds	r7, #88	@ 0x58
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <MX_SPI1_Init+0x74>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	@ (80019b8 <MX_SPI1_Init+0x78>)
 8001948:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800194a:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <MX_SPI1_Init+0x74>)
 800194c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001950:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <MX_SPI1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001958:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <MX_SPI1_Init+0x74>)
 800195a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800195e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001960:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <MX_SPI1_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <MX_SPI1_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_SPI1_Init+0x74>)
 800196e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001972:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_SPI1_Init+0x74>)
 8001976:	2210      	movs	r2, #16
 8001978:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_SPI1_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_SPI1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <MX_SPI1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_SPI1_Init+0x74>)
 800198e:	2207      	movs	r2, #7
 8001990:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <MX_SPI1_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_SPI1_Init+0x74>)
 800199a:	2208      	movs	r2, #8
 800199c:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_SPI1_Init+0x74>)
 80019a0:	f002 f86c 	bl	8003a7c <HAL_SPI_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_SPI1_Init+0x6e>
		Error_Handler();
 80019aa:	f000 f881 	bl	8001ab0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000094 	.word	0x20000094
 80019b8:	40013000 	.word	0x40013000

080019bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019c2:	4a15      	ldr	r2, [pc, #84]	@ (8001a18 <MX_USART2_UART_Init+0x5c>)
 80019c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 8001a00:	f002 fde8 	bl	80045d4 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001a0a:	f000 f851 	bl	8001ab0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200000f8 	.word	0x200000f8
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_GPIO_Init+0x8c>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	480b      	ldr	r0, [pc, #44]	@ (8001aac <MX_GPIO_Init+0x90>)
 8001a80:	f000 fcc4 	bl	800240c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a84:	2301      	movs	r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4804      	ldr	r0, [pc, #16]	@ (8001aac <MX_GPIO_Init+0x90>)
 8001a9c:	f000 fb0c 	bl	80020b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48000400 	.word	0x48000400

08001ab0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <Error_Handler+0x8>

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_MspInit+0x44>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	4a08      	ldr	r2, [pc, #32]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_MspInit+0x44>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <HAL_SPI_MspInit+0x7c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d128      	bne.n	8001b78 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b26:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_SPI_MspInit+0x80>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2a:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <HAL_SPI_MspInit+0x80>)
 8001b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_SPI_MspInit+0x80>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_SPI_MspInit+0x80>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	4a10      	ldr	r2, [pc, #64]	@ (8001b84 <HAL_SPI_MspInit+0x80>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_SPI_MspInit+0x80>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b56:	23e0      	movs	r3, #224	@ 0xe0
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b66:	2305      	movs	r3, #5
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b74:	f000 faa0 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	@ 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40013000 	.word	0x40013000
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0ac      	sub	sp, #176	@ 0xb0
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2288      	movs	r2, #136	@ 0x88
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f006 faf9 	bl	80081a0 <memset>
  if(huart->Instance==USART2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a21      	ldr	r2, [pc, #132]	@ (8001c38 <HAL_UART_MspInit+0xb0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d13b      	bne.n	8001c30 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 fa9d 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bd0:	f7ff ff6e 	bl	8001ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_UART_MspInit+0xb4>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <HAL_UART_MspInit+0xb4>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be0:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <HAL_UART_MspInit+0xb4>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <HAL_UART_MspInit+0xb4>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf0:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <HAL_UART_MspInit+0xb4>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_UART_MspInit+0xb4>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c04:	230c      	movs	r3, #12
 8001c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2c:	f000 fa44 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	37b0      	adds	r7, #176	@ 0xb0
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40004400 	.word	0x40004400
 8001c3c:	40021000 	.word	0x40021000

08001c40 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <SDTimer_Handler+0x40>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <SDTimer_Handler+0x1c>
    Timer1--;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <SDTimer_Handler+0x40>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <SDTimer_Handler+0x40>)
 8001c5a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <SDTimer_Handler+0x44>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <SDTimer_Handler+0x34>
    Timer2--;
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <SDTimer_Handler+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SDTimer_Handler+0x44>)
 8001c72:	701a      	strb	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20002601 	.word	0x20002601
 8001c84:	20002602 	.word	0x20002602

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <NMI_Handler+0x4>

08001c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <MemManage_Handler+0x4>

08001ca0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <UsageFault_Handler+0x4>

08001cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <SysTick_Handler+0x30>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <SysTick_Handler+0x30>)
 8001cec:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <SysTick_Handler+0x30>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d904      	bls.n	8001d02 <SysTick_Handler+0x26>
	{
	 FatFsCnt = 0;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <SysTick_Handler+0x30>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
     SDTimer_Handler();
 8001cfe:	f7ff ff9f 	bl	8001c40 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d02:	f000 f8d3 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20002600 	.word	0x20002600

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f006 fa36 	bl	80081b0 <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20018000 	.word	0x20018000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	20002604 	.word	0x20002604
 8001d78:	20002790 	.word	0x20002790

08001d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da4:	f7ff ffea 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <LoopForever+0xe>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dec <LoopForever+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dce:	f006 f9f5 	bl	80081bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd2:	f7ff fbf1 	bl	80015b8 <main>

08001dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dd6:	e7fe      	b.n	8001dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001de4:	08008e44 	.word	0x08008e44
  ldr r2, =_sbss
 8001de8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001dec:	20002790 	.word	0x20002790

08001df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC1_2_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <HAL_Init+0x3c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <HAL_Init+0x3c>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	f000 f920 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e10:	2000      	movs	r0, #0
 8001e12:	f000 f80f 	bl	8001e34 <HAL_InitTick>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	e001      	b.n	8001e26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e22:	f7ff fe4b 	bl	8001abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e26:	79fb      	ldrb	r3, [r7, #7]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40022000 	.word	0x40022000

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e40:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <HAL_InitTick+0x6c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <HAL_InitTick+0x70>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <HAL_InitTick+0x6c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f91d 	bl	800209e <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d809      	bhi.n	8001e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f8f5 	bl	8002066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <HAL_InitTick+0x74>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e007      	b.n	8001e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e004      	b.n	8001e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e001      	b.n	8001e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	20000008 	.word	0x20000008

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000000c 	.word	0x2000000c
 8001ed0:	20002608 	.word	0x20002608

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20002608 	.word	0x20002608

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	@ (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	@ (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	@ 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	@ (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff47 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff5c 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffb0 	bl	800200c <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c6:	e17f      	b.n	80023c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8171 	beq.w	80023c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d005      	beq.n	80020f8 <HAL_GPIO_Init+0x40>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0201 	and.w	r2, r3, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b03      	cmp	r3, #3
 8002164:	d118      	bne.n	8002198 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	6939      	ldr	r1, [r7, #16]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80ac 	beq.w	80023c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	4b5f      	ldr	r3, [pc, #380]	@ (80023e8 <HAL_GPIO_Init+0x330>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	4a5e      	ldr	r2, [pc, #376]	@ (80023e8 <HAL_GPIO_Init+0x330>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6613      	str	r3, [r2, #96]	@ 0x60
 8002276:	4b5c      	ldr	r3, [pc, #368]	@ (80023e8 <HAL_GPIO_Init+0x330>)
 8002278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002282:	4a5a      	ldr	r2, [pc, #360]	@ (80023ec <HAL_GPIO_Init+0x334>)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022ac:	d025      	beq.n	80022fa <HAL_GPIO_Init+0x242>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	@ (80023f0 <HAL_GPIO_Init+0x338>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01f      	beq.n	80022f6 <HAL_GPIO_Init+0x23e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4e      	ldr	r2, [pc, #312]	@ (80023f4 <HAL_GPIO_Init+0x33c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d019      	beq.n	80022f2 <HAL_GPIO_Init+0x23a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4d      	ldr	r2, [pc, #308]	@ (80023f8 <HAL_GPIO_Init+0x340>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_GPIO_Init+0x236>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4c      	ldr	r2, [pc, #304]	@ (80023fc <HAL_GPIO_Init+0x344>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00d      	beq.n	80022ea <HAL_GPIO_Init+0x232>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002400 <HAL_GPIO_Init+0x348>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <HAL_GPIO_Init+0x22e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002404 <HAL_GPIO_Init+0x34c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_GPIO_Init+0x22a>
 80022de:	2306      	movs	r3, #6
 80022e0:	e00c      	b.n	80022fc <HAL_GPIO_Init+0x244>
 80022e2:	2307      	movs	r3, #7
 80022e4:	e00a      	b.n	80022fc <HAL_GPIO_Init+0x244>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e008      	b.n	80022fc <HAL_GPIO_Init+0x244>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x244>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_Init+0x244>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_Init+0x244>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x244>
 80022fa:	2300      	movs	r3, #0
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	f002 0203 	and.w	r2, r2, #3
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800230c:	4937      	ldr	r1, [pc, #220]	@ (80023ec <HAL_GPIO_Init+0x334>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800231a:	4b3b      	ldr	r3, [pc, #236]	@ (8002408 <HAL_GPIO_Init+0x350>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800233e:	4a32      	ldr	r2, [pc, #200]	@ (8002408 <HAL_GPIO_Init+0x350>)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002344:	4b30      	ldr	r3, [pc, #192]	@ (8002408 <HAL_GPIO_Init+0x350>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002368:	4a27      	ldr	r2, [pc, #156]	@ (8002408 <HAL_GPIO_Init+0x350>)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800236e:	4b26      	ldr	r3, [pc, #152]	@ (8002408 <HAL_GPIO_Init+0x350>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002392:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <HAL_GPIO_Init+0x350>)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_GPIO_Init+0x350>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023bc:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <HAL_GPIO_Init+0x350>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f47f ae78 	bne.w	80020c8 <HAL_GPIO_Init+0x10>
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	48001000 	.word	0x48001000
 8002400:	48001400 	.word	0x48001400
 8002404:	48001800 	.word	0x48001800
 8002408:	40010400 	.word	0x40010400

0800240c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
 8002418:	4613      	mov	r3, r2
 800241a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800241c:	787b      	ldrb	r3, [r7, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002428:	e002      	b.n	8002430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <HAL_PWREx_GetVoltageRange+0x18>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40007000 	.word	0x40007000

08002458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002466:	d130      	bne.n	80024ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002468:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002474:	d038      	beq.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002476:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800247e:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002480:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002484:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002486:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2232      	movs	r2, #50	@ 0x32
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	4a1b      	ldr	r2, [pc, #108]	@ (8002500 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800249c:	e002      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a4:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b0:	d102      	bne.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f2      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c4:	d110      	bne.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e00f      	b.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ca:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d6:	d007      	beq.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d8:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024e0:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40007000 	.word	0x40007000
 80024fc:	20000004 	.word	0x20000004
 8002500:	431bde83 	.word	0x431bde83

08002504 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e3ca      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002516:	4b97      	ldr	r3, [pc, #604]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002520:	4b94      	ldr	r3, [pc, #592]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80e4 	beq.w	8002700 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_RCC_OscConfig+0x4a>
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	f040 808b 	bne.w	800265c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b01      	cmp	r3, #1
 800254a:	f040 8087 	bne.w	800265c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254e:	4b89      	ldr	r3, [pc, #548]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x62>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e3a2      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1a      	ldr	r2, [r3, #32]
 800256a:	4b82      	ldr	r3, [pc, #520]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d004      	beq.n	8002580 <HAL_RCC_OscConfig+0x7c>
 8002576:	4b7f      	ldr	r3, [pc, #508]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800257e:	e005      	b.n	800258c <HAL_RCC_OscConfig+0x88>
 8002580:	4b7c      	ldr	r3, [pc, #496]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800258c:	4293      	cmp	r3, r2
 800258e:	d223      	bcs.n	80025d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fd55 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e383      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a4:	4b73      	ldr	r3, [pc, #460]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a72      	ldr	r2, [pc, #456]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025aa:	f043 0308 	orr.w	r3, r3, #8
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b70      	ldr	r3, [pc, #448]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	496d      	ldr	r1, [pc, #436]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	4968      	ldr	r1, [pc, #416]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
 80025d6:	e025      	b.n	8002624 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d8:	4b66      	ldr	r3, [pc, #408]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a65      	ldr	r2, [pc, #404]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4960      	ldr	r1, [pc, #384]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	495b      	ldr	r1, [pc, #364]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fd15 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e343      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002624:	f000 fc4a 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b52      	ldr	r3, [pc, #328]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	4950      	ldr	r1, [pc, #320]	@ (8002778 <HAL_RCC_OscConfig+0x274>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
 8002640:	4a4e      	ldr	r2, [pc, #312]	@ (800277c <HAL_RCC_OscConfig+0x278>)
 8002642:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002644:	4b4e      	ldr	r3, [pc, #312]	@ (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fbf3 	bl	8001e34 <HAL_InitTick>
 800264e:	4603      	mov	r3, r0
 8002650:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d052      	beq.n	80026fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	e327      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d032      	beq.n	80026ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002664:	4b43      	ldr	r3, [pc, #268]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002670:	f7ff fc30 	bl	8001ed4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002678:	f7ff fc2c 	bl	8001ed4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e310      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800268a:	4b3a      	ldr	r3, [pc, #232]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002696:	4b37      	ldr	r3, [pc, #220]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a36      	ldr	r2, [pc, #216]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b34      	ldr	r3, [pc, #208]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4931      	ldr	r1, [pc, #196]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	492c      	ldr	r1, [pc, #176]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
 80026c8:	e01a      	b.n	8002700 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a29      	ldr	r2, [pc, #164]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d6:	f7ff fbfd 	bl	8001ed4 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026de:	f7ff fbf9 	bl	8001ed4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e2dd      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f0:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x1da>
 80026fc:	e000      	b.n	8002700 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d074      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x21a>
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d10e      	bne.n	8002736 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d10b      	bne.n	8002736 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d064      	beq.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d160      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e2ba      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x24a>
 8002740:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	e026      	b.n	800279c <HAL_RCC_OscConfig+0x298>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002756:	d115      	bne.n	8002784 <HAL_RCC_OscConfig+0x280>
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a05      	ldr	r2, [pc, #20]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800275e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a02      	ldr	r2, [pc, #8]	@ (8002774 <HAL_RCC_OscConfig+0x270>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x298>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	08008d38 	.word	0x08008d38
 800277c:	20000004 	.word	0x20000004
 8002780:	20000008 	.word	0x20000008
 8002784:	4ba0      	ldr	r3, [pc, #640]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a9f      	ldr	r2, [pc, #636]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b9d      	ldr	r3, [pc, #628]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a9c      	ldr	r2, [pc, #624]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7ff fb96 	bl	8001ed4 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7ff fb92 	bl	8001ed4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e276      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027be:	4b92      	ldr	r3, [pc, #584]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x2a8>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff fb82 	bl	8001ed4 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7ff fb7e 	bl	8001ed4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e262      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e6:	4b88      	ldr	r3, [pc, #544]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2d0>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d060      	beq.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x310>
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d119      	bne.n	8002842 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d116      	bne.n	8002842 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002814:	4b7c      	ldr	r3, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x328>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e23f      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b76      	ldr	r3, [pc, #472]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	4973      	ldr	r1, [pc, #460]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002840:	e040      	b.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d023      	beq.n	8002892 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7ff fb3d 	bl	8001ed4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7ff fb39 	bl	8001ed4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e21d      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002870:	4b65      	ldr	r3, [pc, #404]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b62      	ldr	r3, [pc, #392]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	495f      	ldr	r1, [pc, #380]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
 8002890:	e018      	b.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002892:	4b5d      	ldr	r3, [pc, #372]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5c      	ldr	r2, [pc, #368]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800289c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7ff fb19 	bl	8001ed4 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7ff fb15 	bl	8001ed4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1f9      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b8:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d03c      	beq.n	800294a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01c      	beq.n	8002912 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028de:	4a4a      	ldr	r2, [pc, #296]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7ff faf4 	bl	8001ed4 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f0:	f7ff faf0 	bl	8001ed4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1d4      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002902:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <HAL_RCC_OscConfig+0x3ec>
 8002910:	e01b      	b.n	800294a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002912:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002918:	4a3b      	ldr	r2, [pc, #236]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7ff fad7 	bl	8001ed4 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292a:	f7ff fad3 	bl	8001ed4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e1b7      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800293c:	4b32      	ldr	r3, [pc, #200]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800293e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ef      	bne.n	800292a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80a6 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002958:	2300      	movs	r3, #0
 800295a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800295c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10d      	bne.n	8002984 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	4a26      	ldr	r2, [pc, #152]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002972:	6593      	str	r3, [r2, #88]	@ 0x58
 8002974:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002980:	2301      	movs	r3, #1
 8002982:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_RCC_OscConfig+0x508>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d118      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_RCC_OscConfig+0x508>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <HAL_RCC_OscConfig+0x508>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299c:	f7ff fa9a 	bl	8001ed4 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7ff fa96 	bl	8001ed4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e17a      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <HAL_RCC_OscConfig+0x508>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_RCC_OscConfig+0x4d8>
 80029ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029da:	e029      	b.n	8002a30 <HAL_RCC_OscConfig+0x52c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d115      	bne.n	8002a10 <HAL_RCC_OscConfig+0x50c>
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ea:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fa:	4a03      	ldr	r2, [pc, #12]	@ (8002a08 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a04:	e014      	b.n	8002a30 <HAL_RCC_OscConfig+0x52c>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	4b9c      	ldr	r3, [pc, #624]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a16:	4a9b      	ldr	r2, [pc, #620]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a20:	4b98      	ldr	r3, [pc, #608]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a26:	4a97      	ldr	r2, [pc, #604]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d016      	beq.n	8002a66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7ff fa4c 	bl	8001ed4 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7ff fa48 	bl	8001ed4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e12a      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a56:	4b8b      	ldr	r3, [pc, #556]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ed      	beq.n	8002a40 <HAL_RCC_OscConfig+0x53c>
 8002a64:	e015      	b.n	8002a92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7ff fa35 	bl	8001ed4 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7ff fa31 	bl	8001ed4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e113      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a84:	4b7f      	ldr	r3, [pc, #508]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1ed      	bne.n	8002a6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a98:	4b7a      	ldr	r3, [pc, #488]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	4a79      	ldr	r2, [pc, #484]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80fe 	beq.w	8002caa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	f040 80d0 	bne.w	8002c58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ab8:	4b72      	ldr	r3, [pc, #456]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d130      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d127      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002af8:	2a07      	cmp	r2, #7
 8002afa:	bf14      	ite	ne
 8002afc:	2201      	movne	r2, #1
 8002afe:	2200      	moveq	r2, #0
 8002b00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d113      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	3b01      	subs	r3, #1
 8002b14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d06e      	beq.n	8002c0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d069      	beq.n	8002c08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b34:	4b53      	ldr	r3, [pc, #332]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b40:	4b50      	ldr	r3, [pc, #320]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0ad      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b50:	4b4c      	ldr	r3, [pc, #304]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a4b      	ldr	r2, [pc, #300]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b5c:	f7ff f9ba 	bl	8001ed4 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7ff f9b6 	bl	8001ed4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e09a      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b76:	4b43      	ldr	r3, [pc, #268]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b82:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	4b40      	ldr	r3, [pc, #256]	@ (8002c88 <HAL_RCC_OscConfig+0x784>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b9c:	0212      	lsls	r2, r2, #8
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ba4:	0852      	lsrs	r2, r2, #1
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	0552      	lsls	r2, r2, #21
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bb0:	0852      	lsrs	r2, r2, #1
 8002bb2:	3a01      	subs	r2, #1
 8002bb4:	0652      	lsls	r2, r2, #25
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bbc:	0912      	lsrs	r2, r2, #4
 8002bbe:	0452      	lsls	r2, r2, #17
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	4930      	ldr	r1, [pc, #192]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be0:	f7ff f978 	bl	8001ed4 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7ff f974 	bl	8001ed4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e058      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfa:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c06:	e050      	b.n	8002caa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e04f      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d148      	bne.n	8002caa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c18:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c24:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a16      	ldr	r2, [pc, #88]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c30:	f7ff f950 	bl	8001ed4 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7ff f94c 	bl	8001ed4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e030      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x734>
 8002c56:	e028      	b.n	8002caa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d023      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a08      	ldr	r2, [pc, #32]	@ (8002c84 <HAL_RCC_OscConfig+0x780>)
 8002c64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f933 	bl	8001ed4 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c70:	e00c      	b.n	8002c8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7ff f92f 	bl	8001ed4 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d905      	bls.n	8002c8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e013      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
 8002c84:	40021000 	.word	0x40021000
 8002c88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ec      	bne.n	8002c72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c98:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b0>)
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	4905      	ldr	r1, [pc, #20]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b0>)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCC_OscConfig+0x7b4>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
 8002ca4:	e001      	b.n	8002caa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	feeefffc 	.word	0xfeeefffc

08002cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0e7      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b75      	ldr	r3, [pc, #468]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d910      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b72      	ldr	r3, [pc, #456]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 0207 	bic.w	r2, r3, #7
 8002ce6:	4970      	ldr	r1, [pc, #448]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0cf      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d908      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b63      	ldr	r3, [pc, #396]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4960      	ldr	r1, [pc, #384]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d04c      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	4b5a      	ldr	r3, [pc, #360]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d121      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0a6      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5a:	4b54      	ldr	r3, [pc, #336]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d115      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e09a      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d72:	4b4e      	ldr	r3, [pc, #312]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e08e      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d82:	4b4a      	ldr	r3, [pc, #296]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e086      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b46      	ldr	r3, [pc, #280]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4943      	ldr	r1, [pc, #268]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7ff f896 	bl	8001ed4 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7ff f892 	bl	8001ed4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e06e      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d010      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d208      	bcs.n	8002e02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df0:	4b2e      	ldr	r3, [pc, #184]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	492b      	ldr	r1, [pc, #172]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e02:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d210      	bcs.n	8002e32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 0207 	bic.w	r2, r3, #7
 8002e18:	4923      	ldr	r1, [pc, #140]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e036      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4918      	ldr	r1, [pc, #96]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4910      	ldr	r1, [pc, #64]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e70:	f000 f824 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	490b      	ldr	r1, [pc, #44]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8c:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ffcd 	bl	8001e34 <HAL_InitTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	08008d38 	.word	0x08008d38
 8002eb4:	20000004 	.word	0x20000004
 8002eb8:	20000008 	.word	0x20000008

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d121      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d11e      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef0:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002efc:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e005      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f18:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f34:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e004      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f40:	4b23      	ldr	r3, [pc, #140]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d134      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d003      	beq.n	8002f62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d003      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0xac>
 8002f60:	e005      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f64:	617b      	str	r3, [r7, #20]
      break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f68:	4b19      	ldr	r3, [pc, #100]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6a:	617b      	str	r3, [r7, #20]
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	617b      	str	r3, [r7, #20]
      break;
 8002f72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	3301      	adds	r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	fb03 f202 	mul.w	r2, r3, r2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	0e5b      	lsrs	r3, r3, #25
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	@ 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08008d50 	.word	0x08008d50
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	007a1200 	.word	0x007a1200

08002fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000004 	.word	0x20000004

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4904      	ldr	r1, [pc, #16]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08008d48 	.word	0x08008d48

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800301c:	f7ff ffda 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08008d48 	.word	0x08008d48

08003044 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003050:	4b2a      	ldr	r3, [pc, #168]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800305c:	f7ff f9ee 	bl	800243c <HAL_PWREx_GetVoltageRange>
 8003060:	6178      	str	r0, [r7, #20]
 8003062:	e014      	b.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b25      	ldr	r3, [pc, #148]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003070:	4b22      	ldr	r3, [pc, #136]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff f9de 	bl	800243c <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b1e      	ldr	r3, [pc, #120]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003094:	d10b      	bne.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b80      	cmp	r3, #128	@ 0x80
 800309a:	d919      	bls.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2ba0      	cmp	r3, #160	@ 0xa0
 80030a0:	d902      	bls.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a2:	2302      	movs	r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e013      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e010      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b80      	cmp	r3, #128	@ 0x80
 80030b2:	d902      	bls.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b4:	2303      	movs	r3, #3
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e00a      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	@ 0x80
 80030be:	d102      	bne.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c0:	2302      	movs	r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e004      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b70      	cmp	r3, #112	@ 0x70
 80030ca:	d101      	bne.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 0207 	bic.w	r2, r3, #7
 80030d8:	4909      	ldr	r1, [pc, #36]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030e0:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	40022000 	.word	0x40022000

08003104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800310c:	2300      	movs	r3, #0
 800310e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003110:	2300      	movs	r3, #0
 8003112:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800311c:	2b00      	cmp	r3, #0
 800311e:	d041      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003124:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003128:	d02a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800312a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800312e:	d824      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800313a:	d81e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003146:	e018      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003148:	4b86      	ldr	r3, [pc, #536]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a85      	ldr	r2, [pc, #532]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003152:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003154:	e015      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fabb 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003166:	e00c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3320      	adds	r3, #32
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fba6 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	74fb      	strb	r3, [r7, #19]
      break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003188:	4b76      	ldr	r3, [pc, #472]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003196:	4973      	ldr	r1, [pc, #460]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d041      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031b8:	d02a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031be:	d824      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031c4:	d008      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ca:	d81e      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031d4:	d010      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031d6:	e018      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031d8:	4b62      	ldr	r3, [pc, #392]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a61      	ldr	r2, [pc, #388]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e4:	e015      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa73 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f6:	e00c      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3320      	adds	r3, #32
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fb5e 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	74fb      	strb	r3, [r7, #19]
      break;
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003218:	4b52      	ldr	r3, [pc, #328]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003226:	494f      	ldr	r1, [pc, #316]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800322e:	e001      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a0 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003246:	4b47      	ldr	r3, [pc, #284]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b41      	ldr	r3, [pc, #260]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	4a40      	ldr	r2, [pc, #256]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003266:	6593      	str	r3, [r2, #88]	@ 0x58
 8003268:	4b3e      	ldr	r3, [pc, #248]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003274:	2301      	movs	r3, #1
 8003276:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003278:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3a      	ldr	r2, [pc, #232]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003284:	f7fe fe26 	bl	8001ed4 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800328a:	e009      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7fe fe22 	bl	8001ed4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	74fb      	strb	r3, [r7, #19]
        break;
 800329e:	e005      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a0:	4b31      	ldr	r3, [pc, #196]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d15c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01f      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d019      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d0:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032dc:	4b21      	ldr	r3, [pc, #132]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e2:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032fc:	4a19      	ldr	r2, [pc, #100]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe fde1 	bl	8001ed4 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003314:	e00b      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fddd 	bl	8001ed4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d902      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	74fb      	strb	r3, [r7, #19]
            break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ec      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003342:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003352:	4904      	ldr	r1, [pc, #16]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800335a:	e009      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003370:	7c7b      	ldrb	r3, [r7, #17]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b9e      	ldr	r3, [pc, #632]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	4a9d      	ldr	r2, [pc, #628]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338e:	4b98      	ldr	r3, [pc, #608]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	4994      	ldr	r1, [pc, #592]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033b0:	4b8f      	ldr	r3, [pc, #572]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f023 020c 	bic.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	498c      	ldr	r1, [pc, #560]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033d2:	4b87      	ldr	r3, [pc, #540]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	4983      	ldr	r1, [pc, #524]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f4:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	497b      	ldr	r1, [pc, #492]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003416:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003424:	4972      	ldr	r1, [pc, #456]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003438:	4b6d      	ldr	r3, [pc, #436]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003446:	496a      	ldr	r1, [pc, #424]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800345a:	4b65      	ldr	r3, [pc, #404]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	4961      	ldr	r1, [pc, #388]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800347c:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	4959      	ldr	r1, [pc, #356]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349e:	4b54      	ldr	r3, [pc, #336]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ac:	4950      	ldr	r1, [pc, #320]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c0:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	4948      	ldr	r1, [pc, #288]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e2:	4b43      	ldr	r3, [pc, #268]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f0:	493f      	ldr	r1, [pc, #252]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d028      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003504:	4b3a      	ldr	r3, [pc, #232]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003512:	4937      	ldr	r1, [pc, #220]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003522:	d106      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352e:	60d3      	str	r3, [r2, #12]
 8003530:	e011      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003536:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800353a:	d10c      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f8c8 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d028      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003562:	4b23      	ldr	r3, [pc, #140]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	491f      	ldr	r1, [pc, #124]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003580:	d106      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003582:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a1a      	ldr	r2, [pc, #104]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800358c:	60d3      	str	r3, [r2, #12]
 800358e:	e011      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f899 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d02b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ce:	4908      	ldr	r1, [pc, #32]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035de:	d109      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e0:	4b03      	ldr	r3, [pc, #12]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a02      	ldr	r2, [pc, #8]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ea:	60d3      	str	r3, [r2, #12]
 80035ec:	e014      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f867 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02f      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003624:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003632:	4928      	ldr	r1, [pc, #160]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800363e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003642:	d10d      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f844 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d014      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	74bb      	strb	r3, [r7, #18]
 800365e:	e011      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003664:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3320      	adds	r3, #32
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f925 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800369e:	490d      	ldr	r1, [pc, #52]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b2:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c2:	4904      	ldr	r1, [pc, #16]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000

080036d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036e6:	4b75      	ldr	r3, [pc, #468]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036f2:	4b72      	ldr	r3, [pc, #456]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0203 	and.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d10d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
       ||
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800370a:	4b6c      	ldr	r3, [pc, #432]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
       ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d047      	beq.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e044      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d018      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x86>
 800372c:	2b03      	cmp	r3, #3
 800372e:	d825      	bhi.n	800377c <RCCEx_PLLSAI1_Config+0xa4>
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <RCCEx_PLLSAI1_Config+0x62>
 8003734:	2b02      	cmp	r3, #2
 8003736:	d009      	beq.n	800374c <RCCEx_PLLSAI1_Config+0x74>
 8003738:	e020      	b.n	800377c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800373a:	4b60      	ldr	r3, [pc, #384]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11d      	bne.n	8003782 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374a:	e01a      	b.n	8003782 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800374c:	4b5b      	ldr	r3, [pc, #364]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d116      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e013      	b.n	8003786 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375e:	4b57      	ldr	r3, [pc, #348]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800376a:	4b54      	ldr	r3, [pc, #336]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800377a:	e006      	b.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e004      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378a:	bf00      	nop
    }

    if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003792:	4b4a      	ldr	r3, [pc, #296]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	430b      	orrs	r3, r1
 80037a8:	4944      	ldr	r1, [pc, #272]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d17d      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037b4:	4b41      	ldr	r3, [pc, #260]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a40      	ldr	r2, [pc, #256]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fe fb88 	bl	8001ed4 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c8:	f7fe fb84 	bl	8001ed4 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
        break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037dc:	4b37      	ldr	r3, [pc, #220]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ef      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d160      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d111      	bne.n	8003818 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f4:	4b31      	ldr	r3, [pc, #196]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6892      	ldr	r2, [r2, #8]
 8003804:	0211      	lsls	r1, r2, #8
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68d2      	ldr	r2, [r2, #12]
 800380a:	0912      	lsrs	r2, r2, #4
 800380c:	0452      	lsls	r2, r2, #17
 800380e:	430a      	orrs	r2, r1
 8003810:	492a      	ldr	r1, [pc, #168]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]
 8003816:	e027      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d112      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381e:	4b27      	ldr	r3, [pc, #156]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003826:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	0211      	lsls	r1, r2, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6912      	ldr	r2, [r2, #16]
 8003834:	0852      	lsrs	r2, r2, #1
 8003836:	3a01      	subs	r2, #1
 8003838:	0552      	lsls	r2, r2, #21
 800383a:	430a      	orrs	r2, r1
 800383c:	491f      	ldr	r1, [pc, #124]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]
 8003842:	e011      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003844:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800384c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6892      	ldr	r2, [r2, #8]
 8003854:	0211      	lsls	r1, r2, #8
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6952      	ldr	r2, [r2, #20]
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0652      	lsls	r2, r2, #25
 8003860:	430a      	orrs	r2, r1
 8003862:	4916      	ldr	r1, [pc, #88]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003868:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a13      	ldr	r2, [pc, #76]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003872:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe fb2e 	bl	8001ed4 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800387a:	e009      	b.n	8003890 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800387c:	f7fe fb2a 	bl	8001ed4 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d902      	bls.n	8003890 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	73fb      	strb	r3, [r7, #15]
          break;
 800388e:	e005      	b.n	800389c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003890:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ef      	beq.n	800387c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	4904      	ldr	r1, [pc, #16]	@ (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000

080038c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038da:	4b67      	ldr	r3, [pc, #412]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0203 	and.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
       ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038f2:	4b61      	ldr	r3, [pc, #388]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
       ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d047      	beq.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e044      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d018      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x86>
 8003914:	2b03      	cmp	r3, #3
 8003916:	d825      	bhi.n	8003964 <RCCEx_PLLSAI2_Config+0xa4>
 8003918:	2b01      	cmp	r3, #1
 800391a:	d002      	beq.n	8003922 <RCCEx_PLLSAI2_Config+0x62>
 800391c:	2b02      	cmp	r3, #2
 800391e:	d009      	beq.n	8003934 <RCCEx_PLLSAI2_Config+0x74>
 8003920:	e020      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003922:	4b55      	ldr	r3, [pc, #340]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11d      	bne.n	800396a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003932:	e01a      	b.n	800396a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003934:	4b50      	ldr	r3, [pc, #320]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d116      	bne.n	800396e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003944:	e013      	b.n	800396e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003946:	4b4c      	ldr	r3, [pc, #304]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003952:	4b49      	ldr	r3, [pc, #292]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003962:	e006      	b.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e004      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003972:	bf00      	nop
    }

    if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6819      	ldr	r1, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	430b      	orrs	r3, r1
 8003990:	4939      	ldr	r1, [pc, #228]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d167      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800399c:	4b36      	ldr	r3, [pc, #216]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fe fa94 	bl	8001ed4 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ae:	e009      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b0:	f7fe fa90 	bl	8001ed4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
        break;
 80039c2:	e005      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d14a      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d111      	bne.n	8003a00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039dc:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6892      	ldr	r2, [r2, #8]
 80039ec:	0211      	lsls	r1, r2, #8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	0912      	lsrs	r2, r2, #4
 80039f4:	0452      	lsls	r2, r2, #17
 80039f6:	430a      	orrs	r2, r1
 80039f8:	491f      	ldr	r1, [pc, #124]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	614b      	str	r3, [r1, #20]
 80039fe:	e011      	b.n	8003a24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a00:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6912      	ldr	r2, [r2, #16]
 8003a16:	0852      	lsrs	r2, r2, #1
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	0652      	lsls	r2, r2, #25
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	4916      	ldr	r1, [pc, #88]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a24:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a13      	ldr	r2, [pc, #76]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fe fa50 	bl	8001ed4 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a38:	f7fe fa4c 	bl	8001ed4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
          break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	4904      	ldr	r1, [pc, #16]	@ (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000

08003a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e095      	b.n	8003bba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a9e:	d009      	beq.n	8003ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
 8003aa6:	e005      	b.n	8003ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe f818 	bl	8001b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003af4:	d902      	bls.n	8003afc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e002      	b.n	8003b02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b0a:	d007      	beq.n	8003b1c <HAL_SPI_Init+0xa0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b14:	d002      	beq.n	8003b1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	0c1b      	lsrs	r3, r3, #16
 8003b78:	f003 0204 	and.w	r2, r3, #4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b98:	ea42 0103 	orr.w	r1, r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b088      	sub	sp, #32
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_SPI_Transmit+0x22>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e15f      	b.n	8003ea4 <HAL_SPI_Transmit+0x2e2>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bec:	f7fe f972 	bl	8001ed4 <HAL_GetTick>
 8003bf0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c06:	e148      	b.n	8003e9a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_SPI_Transmit+0x52>
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c18:	e13f      	b.n	8003e9a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c64:	d10f      	bne.n	8003c86 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c90:	2b40      	cmp	r3, #64	@ 0x40
 8003c92:	d007      	beq.n	8003ca4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cac:	d94f      	bls.n	8003d4e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_SPI_Transmit+0xfa>
 8003cb6:	8afb      	ldrh	r3, [r7, #22]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d142      	bne.n	8003d42 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ce0:	e02f      	b.n	8003d42 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d112      	bne.n	8003d16 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf4:	881a      	ldrh	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d00:	1c9a      	adds	r2, r3, #2
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d14:	e015      	b.n	8003d42 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d16:	f7fe f8dd 	bl	8001ed4 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d803      	bhi.n	8003d2e <HAL_SPI_Transmit+0x16c>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d102      	bne.n	8003d34 <HAL_SPI_Transmit+0x172>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d40:	e0ab      	b.n	8003e9a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ca      	bne.n	8003ce2 <HAL_SPI_Transmit+0x120>
 8003d4c:	e080      	b.n	8003e50 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0x19a>
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d174      	bne.n	8003e46 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d912      	bls.n	8003d8c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b02      	subs	r3, #2
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d8a:	e05c      	b.n	8003e46 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	7812      	ldrb	r2, [r2, #0]
 8003d98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003db2:	e048      	b.n	8003e46 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d12b      	bne.n	8003e1a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d912      	bls.n	8003df2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	1c9a      	adds	r2, r3, #2
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b02      	subs	r3, #2
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003df0:	e029      	b.n	8003e46 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e18:	e015      	b.n	8003e46 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e1a:	f7fe f85b 	bl	8001ed4 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d803      	bhi.n	8003e32 <HAL_SPI_Transmit+0x270>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Transmit+0x276>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003e44:	e029      	b.n	8003e9a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1b1      	bne.n	8003db4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fb77 	bl	8004548 <SPI_EndRxTxTransaction>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e003      	b.n	8003e9a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ea2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	@ 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x26>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e20a      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x43c>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eda:	f7fd fffb 	bl	8001ed4 <HAL_GetTick>
 8003ede:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ee6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003eee:	887b      	ldrh	r3, [r7, #2]
 8003ef0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ef6:	7efb      	ldrb	r3, [r7, #27]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d00e      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x6e>
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f02:	d106      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x66>
 8003f0c:	7efb      	ldrb	r3, [r7, #27]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d003      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
 8003f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003f18:	e1e0      	b.n	80042dc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_SPI_TransmitReceive+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_SPI_TransmitReceive+0x80>
 8003f26:	887b      	ldrh	r3, [r7, #2]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003f32:	e1d3      	b.n	80042dc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d003      	beq.n	8003f48 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2205      	movs	r2, #5
 8003f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	887a      	ldrh	r2, [r7, #2]
 8003f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f8a:	d802      	bhi.n	8003f92 <HAL_SPI_TransmitReceive+0xe6>
 8003f8c:	8a3b      	ldrh	r3, [r7, #16]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d908      	bls.n	8003fa4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	e007      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d007      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fda:	f240 8081 	bls.w	80040e0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_TransmitReceive+0x140>
 8003fe6:	8a7b      	ldrh	r3, [r7, #18]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d16d      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004010:	e05a      	b.n	80040c8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d11b      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x1ac>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x1ac>
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	2b01      	cmp	r3, #1
 800402e:	d113      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	881a      	ldrh	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d11c      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x1f4>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	b292      	uxth	r2, r2
 800407e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	1c9a      	adds	r2, r3, #2
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800409c:	2301      	movs	r3, #1
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040a0:	f7fd ff18 	bl	8001ed4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d80b      	bhi.n	80040c8 <HAL_SPI_TransmitReceive+0x21c>
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d007      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80040c6:	e109      	b.n	80042dc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d19f      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x166>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d199      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x166>
 80040de:	e0e3      	b.n	80042a8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x244>
 80040e8:	8a7b      	ldrh	r3, [r7, #18]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	f040 80cf 	bne.w	800428e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d912      	bls.n	8004120 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410a:	1c9a      	adds	r2, r3, #2
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b02      	subs	r3, #2
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800411e:	e0b6      	b.n	800428e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004146:	e0a2      	b.n	800428e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d134      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x314>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02f      	beq.n	80041c0 <HAL_SPI_TransmitReceive+0x314>
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	2b01      	cmp	r3, #1
 8004164:	d12c      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d912      	bls.n	8004196 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b02      	subs	r3, #2
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004194:	e012      	b.n	80041bc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	7812      	ldrb	r2, [r2, #0]
 80041a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d148      	bne.n	8004260 <HAL_SPI_TransmitReceive+0x3b4>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d042      	beq.n	8004260 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d923      	bls.n	800422e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	b292      	uxth	r2, r2
 80041f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b02      	subs	r3, #2
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d81f      	bhi.n	800425c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	e016      	b.n	800425c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f103 020c 	add.w	r2, r3, #12
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800425c:	2301      	movs	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004260:	f7fd fe38 	bl	8001ed4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800426c:	429a      	cmp	r2, r3
 800426e:	d803      	bhi.n	8004278 <HAL_SPI_TransmitReceive+0x3cc>
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d102      	bne.n	800427e <HAL_SPI_TransmitReceive+0x3d2>
 8004278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800428c:	e026      	b.n	80042dc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	f47f af57 	bne.w	8004148 <HAL_SPI_TransmitReceive+0x29c>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f47f af50 	bne.w	8004148 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f94b 	bl	8004548 <SPI_EndRxTxTransaction>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d2:	e003      	b.n	80042dc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80042e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	@ 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042fe:	b2db      	uxtb	r3, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800431c:	f7fd fdda 	bl	8001ed4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	4413      	add	r3, r2
 800432a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800432c:	f7fd fdd2 	bl	8001ed4 <HAL_GetTick>
 8004330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004332:	4b39      	ldr	r3, [pc, #228]	@ (8004418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	015b      	lsls	r3, r3, #5
 8004338:	0d1b      	lsrs	r3, r3, #20
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004342:	e054      	b.n	80043ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d050      	beq.n	80043ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800434c:	f7fd fdc2 	bl	8001ed4 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	429a      	cmp	r2, r3
 800435a:	d902      	bls.n	8004362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d13d      	bne.n	80043de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800437a:	d111      	bne.n	80043a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004384:	d004      	beq.n	8004390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438e:	d107      	bne.n	80043a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800439e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a8:	d10f      	bne.n	80043ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e017      	b.n	800440e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	bf0c      	ite	eq
 80043fe:	2301      	moveq	r3, #1
 8004400:	2300      	movne	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	429a      	cmp	r2, r3
 800440a:	d19b      	bne.n	8004344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000004 	.word	0x20000004

0800441c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	@ 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800442e:	f7fd fd51 	bl	8001ed4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	4413      	add	r3, r2
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800443e:	f7fd fd49 	bl	8001ed4 <HAL_GetTick>
 8004442:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800444c:	4b3d      	ldr	r3, [pc, #244]	@ (8004544 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	00da      	lsls	r2, r3, #3
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	0d1b      	lsrs	r3, r3, #20
 800445c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004464:	e060      	b.n	8004528 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800446c:	d107      	bne.n	800447e <SPI_WaitFifoStateUntilTimeout+0x62>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800447c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d050      	beq.n	8004528 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004486:	f7fd fd25 	bl	8001ed4 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004492:	429a      	cmp	r2, r3
 8004494:	d902      	bls.n	800449c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d13d      	bne.n	8004518 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044b4:	d111      	bne.n	80044da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044be:	d004      	beq.n	80044ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c8:	d107      	bne.n	80044da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e2:	d10f      	bne.n	8004504 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004502:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e010      	b.n	800453a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	3b01      	subs	r3, #1
 8004526:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d196      	bne.n	8004466 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3728      	adds	r7, #40	@ 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000004 	.word	0x20000004

08004548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff ff5b 	bl	800441c <SPI_WaitFifoStateUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e027      	b.n	80045cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	2180      	movs	r1, #128	@ 0x80
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff fec0 	bl	800430c <SPI_WaitFlagStateUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e014      	b.n	80045cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff ff34 	bl	800441c <SPI_WaitFifoStateUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e000      	b.n	80045cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e040      	b.n	8004668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fd fac6 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	@ 0x24
 8004600:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fb6a 	bl	8004cf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f8af 	bl	8004784 <UART_SetConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e01b      	b.n	8004668 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800463e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800464e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fbe9 	bl	8004e38 <UART_CheckIdleState>
 8004666:	4603      	mov	r3, r0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	@ 0x28
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004684:	2b20      	cmp	r3, #32
 8004686:	d177      	bne.n	8004778 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_UART_Transmit+0x24>
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e070      	b.n	800477a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2221      	movs	r2, #33	@ 0x21
 80046a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046a6:	f7fd fc15 	bl	8001ed4 <HAL_GetTick>
 80046aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046c4:	d108      	bne.n	80046d8 <HAL_UART_Transmit+0x68>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	e003      	b.n	80046e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046e0:	e02f      	b.n	8004742 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2200      	movs	r2, #0
 80046ea:	2180      	movs	r1, #128	@ 0x80
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fc4b 	bl	8004f88 <UART_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e03b      	b.n	800477a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	881a      	ldrh	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004714:	b292      	uxth	r2, r2
 8004716:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3302      	adds	r3, #2
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	e007      	b.n	8004730 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1c9      	bne.n	80046e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	2140      	movs	r1, #64	@ 0x40
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fc15 	bl	8004f88 <UART_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e005      	b.n	800477a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004788:	b08a      	sub	sp, #40	@ 0x28
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4ba4      	ldr	r3, [pc, #656]	@ (8004a44 <UART_SetConfig+0x2c0>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047bc:	430b      	orrs	r3, r1
 80047be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a99      	ldr	r2, [pc, #612]	@ (8004a48 <UART_SetConfig+0x2c4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ec:	4313      	orrs	r3, r2
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004800:	430a      	orrs	r2, r1
 8004802:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a90      	ldr	r2, [pc, #576]	@ (8004a4c <UART_SetConfig+0x2c8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d126      	bne.n	800485c <UART_SetConfig+0xd8>
 800480e:	4b90      	ldr	r3, [pc, #576]	@ (8004a50 <UART_SetConfig+0x2cc>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b03      	cmp	r3, #3
 800481a:	d81b      	bhi.n	8004854 <UART_SetConfig+0xd0>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <UART_SetConfig+0xa0>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004835 	.word	0x08004835
 8004828:	08004845 	.word	0x08004845
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800484d 	.word	0x0800484d
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483a:	e116      	b.n	8004a6a <UART_SetConfig+0x2e6>
 800483c:	2302      	movs	r3, #2
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004842:	e112      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484a:	e10e      	b.n	8004a6a <UART_SetConfig+0x2e6>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004852:	e10a      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e106      	b.n	8004a6a <UART_SetConfig+0x2e6>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a7c      	ldr	r2, [pc, #496]	@ (8004a54 <UART_SetConfig+0x2d0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d138      	bne.n	80048d8 <UART_SetConfig+0x154>
 8004866:	4b7a      	ldr	r3, [pc, #488]	@ (8004a50 <UART_SetConfig+0x2cc>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d82d      	bhi.n	80048d0 <UART_SetConfig+0x14c>
 8004874:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <UART_SetConfig+0xf8>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048d1 	.word	0x080048d1
 8004884:	080048d1 	.word	0x080048d1
 8004888:	080048d1 	.word	0x080048d1
 800488c:	080048c1 	.word	0x080048c1
 8004890:	080048d1 	.word	0x080048d1
 8004894:	080048d1 	.word	0x080048d1
 8004898:	080048d1 	.word	0x080048d1
 800489c:	080048b9 	.word	0x080048b9
 80048a0:	080048d1 	.word	0x080048d1
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048c9 	.word	0x080048c9
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b6:	e0d8      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80048b8:	2302      	movs	r3, #2
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048be:	e0d4      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80048c0:	2304      	movs	r3, #4
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e0d0      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80048c8:	2308      	movs	r3, #8
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ce:	e0cc      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80048d0:	2310      	movs	r3, #16
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d6:	e0c8      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004a58 <UART_SetConfig+0x2d4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d125      	bne.n	800492e <UART_SetConfig+0x1aa>
 80048e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a50 <UART_SetConfig+0x2cc>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048ec:	2b30      	cmp	r3, #48	@ 0x30
 80048ee:	d016      	beq.n	800491e <UART_SetConfig+0x19a>
 80048f0:	2b30      	cmp	r3, #48	@ 0x30
 80048f2:	d818      	bhi.n	8004926 <UART_SetConfig+0x1a2>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d00a      	beq.n	800490e <UART_SetConfig+0x18a>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d814      	bhi.n	8004926 <UART_SetConfig+0x1a2>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <UART_SetConfig+0x182>
 8004900:	2b10      	cmp	r3, #16
 8004902:	d008      	beq.n	8004916 <UART_SetConfig+0x192>
 8004904:	e00f      	b.n	8004926 <UART_SetConfig+0x1a2>
 8004906:	2300      	movs	r3, #0
 8004908:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490c:	e0ad      	b.n	8004a6a <UART_SetConfig+0x2e6>
 800490e:	2302      	movs	r3, #2
 8004910:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004914:	e0a9      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004916:	2304      	movs	r3, #4
 8004918:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491c:	e0a5      	b.n	8004a6a <UART_SetConfig+0x2e6>
 800491e:	2308      	movs	r3, #8
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004924:	e0a1      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004926:	2310      	movs	r3, #16
 8004928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492c:	e09d      	b.n	8004a6a <UART_SetConfig+0x2e6>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a4a      	ldr	r2, [pc, #296]	@ (8004a5c <UART_SetConfig+0x2d8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d125      	bne.n	8004984 <UART_SetConfig+0x200>
 8004938:	4b45      	ldr	r3, [pc, #276]	@ (8004a50 <UART_SetConfig+0x2cc>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004942:	2bc0      	cmp	r3, #192	@ 0xc0
 8004944:	d016      	beq.n	8004974 <UART_SetConfig+0x1f0>
 8004946:	2bc0      	cmp	r3, #192	@ 0xc0
 8004948:	d818      	bhi.n	800497c <UART_SetConfig+0x1f8>
 800494a:	2b80      	cmp	r3, #128	@ 0x80
 800494c:	d00a      	beq.n	8004964 <UART_SetConfig+0x1e0>
 800494e:	2b80      	cmp	r3, #128	@ 0x80
 8004950:	d814      	bhi.n	800497c <UART_SetConfig+0x1f8>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <UART_SetConfig+0x1d8>
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d008      	beq.n	800496c <UART_SetConfig+0x1e8>
 800495a:	e00f      	b.n	800497c <UART_SetConfig+0x1f8>
 800495c:	2300      	movs	r3, #0
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004962:	e082      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004964:	2302      	movs	r3, #2
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496a:	e07e      	b.n	8004a6a <UART_SetConfig+0x2e6>
 800496c:	2304      	movs	r3, #4
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004972:	e07a      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004974:	2308      	movs	r3, #8
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497a:	e076      	b.n	8004a6a <UART_SetConfig+0x2e6>
 800497c:	2310      	movs	r3, #16
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004982:	e072      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a35      	ldr	r2, [pc, #212]	@ (8004a60 <UART_SetConfig+0x2dc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d12a      	bne.n	80049e4 <UART_SetConfig+0x260>
 800498e:	4b30      	ldr	r3, [pc, #192]	@ (8004a50 <UART_SetConfig+0x2cc>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004998:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800499c:	d01a      	beq.n	80049d4 <UART_SetConfig+0x250>
 800499e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049a2:	d81b      	bhi.n	80049dc <UART_SetConfig+0x258>
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a8:	d00c      	beq.n	80049c4 <UART_SetConfig+0x240>
 80049aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ae:	d815      	bhi.n	80049dc <UART_SetConfig+0x258>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <UART_SetConfig+0x238>
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b8:	d008      	beq.n	80049cc <UART_SetConfig+0x248>
 80049ba:	e00f      	b.n	80049dc <UART_SetConfig+0x258>
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c2:	e052      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80049c4:	2302      	movs	r3, #2
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ca:	e04e      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80049cc:	2304      	movs	r3, #4
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d2:	e04a      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80049d4:	2308      	movs	r3, #8
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049da:	e046      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e042      	b.n	8004a6a <UART_SetConfig+0x2e6>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a17      	ldr	r2, [pc, #92]	@ (8004a48 <UART_SetConfig+0x2c4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d13a      	bne.n	8004a64 <UART_SetConfig+0x2e0>
 80049ee:	4b18      	ldr	r3, [pc, #96]	@ (8004a50 <UART_SetConfig+0x2cc>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049fc:	d01a      	beq.n	8004a34 <UART_SetConfig+0x2b0>
 80049fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a02:	d81b      	bhi.n	8004a3c <UART_SetConfig+0x2b8>
 8004a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a08:	d00c      	beq.n	8004a24 <UART_SetConfig+0x2a0>
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0e:	d815      	bhi.n	8004a3c <UART_SetConfig+0x2b8>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <UART_SetConfig+0x298>
 8004a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a18:	d008      	beq.n	8004a2c <UART_SetConfig+0x2a8>
 8004a1a:	e00f      	b.n	8004a3c <UART_SetConfig+0x2b8>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a22:	e022      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004a24:	2302      	movs	r3, #2
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2a:	e01e      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a32:	e01a      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004a34:	2308      	movs	r3, #8
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3a:	e016      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a42:	e012      	b.n	8004a6a <UART_SetConfig+0x2e6>
 8004a44:	efff69f3 	.word	0xefff69f3
 8004a48:	40008000 	.word	0x40008000
 8004a4c:	40013800 	.word	0x40013800
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40004400 	.word	0x40004400
 8004a58:	40004800 	.word	0x40004800
 8004a5c:	40004c00 	.word	0x40004c00
 8004a60:	40005000 	.word	0x40005000
 8004a64:	2310      	movs	r3, #16
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a9f      	ldr	r2, [pc, #636]	@ (8004cec <UART_SetConfig+0x568>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d17a      	bne.n	8004b6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d824      	bhi.n	8004ac6 <UART_SetConfig+0x342>
 8004a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <UART_SetConfig+0x300>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004aa9 	.word	0x08004aa9
 8004a88:	08004ac7 	.word	0x08004ac7
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ac7 	.word	0x08004ac7
 8004a94:	08004ab7 	.word	0x08004ab7
 8004a98:	08004ac7 	.word	0x08004ac7
 8004a9c:	08004ac7 	.word	0x08004ac7
 8004aa0:	08004ac7 	.word	0x08004ac7
 8004aa4:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f7fe faa0 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004aac:	61f8      	str	r0, [r7, #28]
        break;
 8004aae:	e010      	b.n	8004ad2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab0:	4b8f      	ldr	r3, [pc, #572]	@ (8004cf0 <UART_SetConfig+0x56c>)
 8004ab2:	61fb      	str	r3, [r7, #28]
        break;
 8004ab4:	e00d      	b.n	8004ad2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fe fa01 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8004aba:	61f8      	str	r0, [r7, #28]
        break;
 8004abc:	e009      	b.n	8004ad2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ac2:	61fb      	str	r3, [r7, #28]
        break;
 8004ac4:	e005      	b.n	8004ad2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ad0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80fb 	beq.w	8004cd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d305      	bcc.n	8004af6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d903      	bls.n	8004afe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004afc:	e0e8      	b.n	8004cd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2200      	movs	r2, #0
 8004b02:	461c      	mov	r4, r3
 8004b04:	4615      	mov	r5, r2
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	022b      	lsls	r3, r5, #8
 8004b10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b14:	0222      	lsls	r2, r4, #8
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	6849      	ldr	r1, [r1, #4]
 8004b1a:	0849      	lsrs	r1, r1, #1
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	4688      	mov	r8, r1
 8004b20:	4681      	mov	r9, r0
 8004b22:	eb12 0a08 	adds.w	sl, r2, r8
 8004b26:	eb43 0b09 	adc.w	fp, r3, r9
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b38:	4650      	mov	r0, sl
 8004b3a:	4659      	mov	r1, fp
 8004b3c:	f7fb fea6 	bl	800088c <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b4e:	d308      	bcc.n	8004b62 <UART_SetConfig+0x3de>
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b56:	d204      	bcs.n	8004b62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	60da      	str	r2, [r3, #12]
 8004b60:	e0b6      	b.n	8004cd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b68:	e0b2      	b.n	8004cd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b72:	d15e      	bne.n	8004c32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d828      	bhi.n	8004bce <UART_SetConfig+0x44a>
 8004b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b84 <UART_SetConfig+0x400>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	08004bcf 	.word	0x08004bcf
 8004b94:	08004bbf 	.word	0x08004bbf
 8004b98:	08004bcf 	.word	0x08004bcf
 8004b9c:	08004bcf 	.word	0x08004bcf
 8004ba0:	08004bcf 	.word	0x08004bcf
 8004ba4:	08004bc7 	.word	0x08004bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fe fa20 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e014      	b.n	8004bda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb0:	f7fe fa32 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8004bb4:	61f8      	str	r0, [r7, #28]
        break;
 8004bb6:	e010      	b.n	8004bda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8004cf0 <UART_SetConfig+0x56c>)
 8004bba:	61fb      	str	r3, [r7, #28]
        break;
 8004bbc:	e00d      	b.n	8004bda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bbe:	f7fe f97d 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8004bc2:	61f8      	str	r0, [r7, #28]
        break;
 8004bc4:	e009      	b.n	8004bda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bca:	61fb      	str	r3, [r7, #28]
        break;
 8004bcc:	e005      	b.n	8004bda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d077      	beq.n	8004cd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	005a      	lsls	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b0f      	cmp	r3, #15
 8004bfa:	d916      	bls.n	8004c2a <UART_SetConfig+0x4a6>
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c02:	d212      	bcs.n	8004c2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f023 030f 	bic.w	r3, r3, #15
 8004c0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	8afb      	ldrh	r3, [r7, #22]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	8afa      	ldrh	r2, [r7, #22]
 8004c26:	60da      	str	r2, [r3, #12]
 8004c28:	e052      	b.n	8004cd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c30:	e04e      	b.n	8004cd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d827      	bhi.n	8004c8a <UART_SetConfig+0x506>
 8004c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <UART_SetConfig+0x4bc>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004c6d 	.word	0x08004c6d
 8004c48:	08004c75 	.word	0x08004c75
 8004c4c:	08004c8b 	.word	0x08004c8b
 8004c50:	08004c7b 	.word	0x08004c7b
 8004c54:	08004c8b 	.word	0x08004c8b
 8004c58:	08004c8b 	.word	0x08004c8b
 8004c5c:	08004c8b 	.word	0x08004c8b
 8004c60:	08004c83 	.word	0x08004c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c64:	f7fe f9c2 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004c68:	61f8      	str	r0, [r7, #28]
        break;
 8004c6a:	e014      	b.n	8004c96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c6c:	f7fe f9d4 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8004c70:	61f8      	str	r0, [r7, #28]
        break;
 8004c72:	e010      	b.n	8004c96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c74:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <UART_SetConfig+0x56c>)
 8004c76:	61fb      	str	r3, [r7, #28]
        break;
 8004c78:	e00d      	b.n	8004c96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c7a:	f7fe f91f 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8004c7e:	61f8      	str	r0, [r7, #28]
        break;
 8004c80:	e009      	b.n	8004c96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c86:	61fb      	str	r3, [r7, #28]
        break;
 8004c88:	e005      	b.n	8004c96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c94:	bf00      	nop
    }

    if (pclk != 0U)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d019      	beq.n	8004cd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	085a      	lsrs	r2, r3, #1
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b0f      	cmp	r3, #15
 8004cb4:	d909      	bls.n	8004cca <UART_SetConfig+0x546>
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cbc:	d205      	bcs.n	8004cca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60da      	str	r2, [r3, #12]
 8004cc8:	e002      	b.n	8004cd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cdc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3728      	adds	r7, #40	@ 0x28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cea:	bf00      	nop
 8004cec:	40008000 	.word	0x40008000
 8004cf0:	00f42400 	.word	0x00f42400

08004cf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004df2:	d10a      	bne.n	8004e0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b098      	sub	sp, #96	@ 0x60
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e48:	f7fd f844 	bl	8001ed4 <HAL_GetTick>
 8004e4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d12e      	bne.n	8004eba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e64:	2200      	movs	r2, #0
 8004e66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f88c 	bl	8004f88 <UART_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d021      	beq.n	8004eba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e6      	bne.n	8004e76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e062      	b.n	8004f80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d149      	bne.n	8004f5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f856 	bl	8004f88 <UART_WaitOnFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03c      	beq.n	8004f5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	623b      	str	r3, [r7, #32]
   return(result);
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e6      	bne.n	8004ee2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3308      	adds	r3, #8
 8004f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f34:	61fa      	str	r2, [r7, #28]
 8004f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	69b9      	ldr	r1, [r7, #24]
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	617b      	str	r3, [r7, #20]
   return(result);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e5      	bne.n	8004f14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e011      	b.n	8004f80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3758      	adds	r7, #88	@ 0x58
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f98:	e049      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d045      	beq.n	800502e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa2:	f7fc ff97 	bl	8001ed4 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e048      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d031      	beq.n	800502e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d110      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f838 	bl	8005056 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e029      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005008:	d111      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f81e 	bl	8005056 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e00f      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4013      	ands	r3, r2
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	bf0c      	ite	eq
 800503e:	2301      	moveq	r3, #1
 8005040:	2300      	movne	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	429a      	cmp	r2, r3
 800504a:	d0a6      	beq.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005056:	b480      	push	{r7}
 8005058:	b095      	sub	sp, #84	@ 0x54
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800506c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800507c:	643b      	str	r3, [r7, #64]	@ 0x40
 800507e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e6      	bne.n	800505e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3308      	adds	r3, #8
 8005096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3308      	adds	r3, #8
 80050ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e5      	bne.n	8005090 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d118      	bne.n	80050fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f023 0310 	bic.w	r3, r3, #16
 80050e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6979      	ldr	r1, [r7, #20]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	613b      	str	r3, [r7, #16]
   return(result);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e6      	bne.n	80050cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005112:	bf00      	nop
 8005114:	3754      	adds	r7, #84	@ 0x54
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
	...

08005120 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005124:	4904      	ldr	r1, [pc, #16]	@ (8005138 <MX_FATFS_Init+0x18>)
 8005126:	4805      	ldr	r0, [pc, #20]	@ (800513c <MX_FATFS_Init+0x1c>)
 8005128:	f003 f80a 	bl	8008140 <FATFS_LinkDriver>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <MX_FATFS_Init+0x20>)
 8005132:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20002610 	.word	0x20002610
 800513c:	20000010 	.word	0x20000010
 8005140:	2000260c 	.word	0x2000260c

08005144 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005148:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fb fec3 	bl	8000eec <SD_disk_initialize>
 8005166:	4603      	mov	r3, r0
 8005168:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	4603      	mov	r3, r0
 800517a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fb ff9e 	bl	80010c0 <SD_disk_status>
 8005184:	4603      	mov	r3, r0
 8005186:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff,sector,count);
 80051a0:	7bf8      	ldrb	r0, [r7, #15]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	f7fb ffa0 	bl	80010ec <SD_disk_read>
 80051ac:	4603      	mov	r3, r0
 80051ae:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff,sector,count);
 80051c8:	7bf8      	ldrb	r0, [r7, #15]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	f7fb fff6 	bl	80011c0 <SD_disk_write>
 80051d4:	4603      	mov	r3, r0
 80051d6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	603a      	str	r2, [r7, #0]
 80051ea:	71fb      	strb	r3, [r7, #7]
 80051ec:	460b      	mov	r3, r1
 80051ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    return SD_disk_ioctl(pdrv, cmd, buff);
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	79b9      	ldrb	r1, [r7, #6]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fc f866 	bl	80012c8 <SD_disk_ioctl>
 80051fc:	4603      	mov	r3, r0
 80051fe:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	4a08      	ldr	r2, [pc, #32]	@ (8005238 <disk_status+0x30>)
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	79fa      	ldrb	r2, [r7, #7]
 8005220:	4905      	ldr	r1, [pc, #20]	@ (8005238 <disk_status+0x30>)
 8005222:	440a      	add	r2, r1
 8005224:	7a12      	ldrb	r2, [r2, #8]
 8005226:	4610      	mov	r0, r2
 8005228:	4798      	blx	r3
 800522a:	4603      	mov	r3, r0
 800522c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	2000263c 	.word	0x2000263c

0800523c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	4a0d      	ldr	r2, [pc, #52]	@ (8005284 <disk_initialize+0x48>)
 800524e:	5cd3      	ldrb	r3, [r2, r3]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d111      	bne.n	8005278 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	4a0b      	ldr	r2, [pc, #44]	@ (8005284 <disk_initialize+0x48>)
 8005258:	2101      	movs	r1, #1
 800525a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	4a09      	ldr	r2, [pc, #36]	@ (8005284 <disk_initialize+0x48>)
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	79fa      	ldrb	r2, [r7, #7]
 800526a:	4906      	ldr	r1, [pc, #24]	@ (8005284 <disk_initialize+0x48>)
 800526c:	440a      	add	r2, r1
 800526e:	7a12      	ldrb	r2, [r2, #8]
 8005270:	4610      	mov	r0, r2
 8005272:	4798      	blx	r3
 8005274:	4603      	mov	r3, r0
 8005276:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	2000263c 	.word	0x2000263c

08005288 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	4a0a      	ldr	r2, [pc, #40]	@ (80052c4 <disk_read+0x3c>)
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	689c      	ldr	r4, [r3, #8]
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	4a07      	ldr	r2, [pc, #28]	@ (80052c4 <disk_read+0x3c>)
 80052a8:	4413      	add	r3, r2
 80052aa:	7a18      	ldrb	r0, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	47a0      	blx	r4
 80052b4:	4603      	mov	r3, r0
 80052b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}
 80052c2:	bf00      	nop
 80052c4:	2000263c 	.word	0x2000263c

080052c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	4a0a      	ldr	r2, [pc, #40]	@ (8005304 <disk_write+0x3c>)
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68dc      	ldr	r4, [r3, #12]
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	4a07      	ldr	r2, [pc, #28]	@ (8005304 <disk_write+0x3c>)
 80052e8:	4413      	add	r3, r2
 80052ea:	7a18      	ldrb	r0, [r3, #8]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	47a0      	blx	r4
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd90      	pop	{r4, r7, pc}
 8005302:	bf00      	nop
 8005304:	2000263c 	.word	0x2000263c

08005308 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	603a      	str	r2, [r7, #0]
 8005312:	71fb      	strb	r3, [r7, #7]
 8005314:	460b      	mov	r3, r1
 8005316:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <disk_ioctl+0x38>)
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	79fa      	ldrb	r2, [r7, #7]
 8005326:	4906      	ldr	r1, [pc, #24]	@ (8005340 <disk_ioctl+0x38>)
 8005328:	440a      	add	r2, r1
 800532a:	7a10      	ldrb	r0, [r2, #8]
 800532c:	79b9      	ldrb	r1, [r7, #6]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4798      	blx	r3
 8005332:	4603      	mov	r3, r0
 8005334:	73fb      	strb	r3, [r7, #15]
  return res;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	2000263c 	.word	0x2000263c

08005344 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3301      	adds	r3, #1
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005354:	89fb      	ldrh	r3, [r7, #14]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	b21a      	sxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	b21b      	sxth	r3, r3
 8005360:	4313      	orrs	r3, r2
 8005362:	b21b      	sxth	r3, r3
 8005364:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005366:	89fb      	ldrh	r3, [r7, #14]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3303      	adds	r3, #3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	3202      	adds	r2, #2
 800538c:	7812      	ldrb	r2, [r2, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	3201      	adds	r2, #1
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	887a      	ldrh	r2, [r7, #2]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	887b      	ldrh	r3, [r7, #2]
 80053d4:	0a1b      	lsrs	r3, r3, #8
 80053d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	0a1b      	lsrs	r3, r3, #8
 800542e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	1c53      	adds	r3, r2, #1
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	1c59      	adds	r1, r3, #1
 800546c:	6179      	str	r1, [r7, #20]
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3b01      	subs	r3, #1
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f1      	bne.n	8005462 <mem_cpy+0x1a>
	}
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800548a:	b480      	push	{r7}
 800548c:	b087      	sub	sp, #28
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	617a      	str	r2, [r7, #20]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f3      	bne.n	800549a <mem_set+0x10>
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80054c0:	b480      	push	{r7}
 80054c2:	b089      	sub	sp, #36	@ 0x24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	61fa      	str	r2, [r7, #28]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	61ba      	str	r2, [r7, #24]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	1acb      	subs	r3, r1, r3
 80054ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <mem_cmp+0x40>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0eb      	beq.n	80054d8 <mem_cmp+0x18>

	return r;
 8005500:	697b      	ldr	r3, [r7, #20]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3724      	adds	r7, #36	@ 0x24
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005518:	e002      	b.n	8005520 <chk_chr+0x12>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3301      	adds	r3, #1
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <chk_chr+0x26>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	4293      	cmp	r3, r2
 8005532:	d1f2      	bne.n	800551a <chk_chr+0xc>
	return *str;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	781b      	ldrb	r3, [r3, #0]
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e029      	b.n	80055ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005558:	4a27      	ldr	r2, [pc, #156]	@ (80055f8 <chk_lock+0xb4>)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	4413      	add	r3, r2
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01d      	beq.n	80055a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005566:	4a24      	ldr	r2, [pc, #144]	@ (80055f8 <chk_lock+0xb4>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	4413      	add	r3, r2
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d116      	bne.n	80055a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005578:	4a1f      	ldr	r2, [pc, #124]	@ (80055f8 <chk_lock+0xb4>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	3304      	adds	r3, #4
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005588:	429a      	cmp	r2, r3
 800558a:	d10c      	bne.n	80055a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800558c:	4a1a      	ldr	r2, [pc, #104]	@ (80055f8 <chk_lock+0xb4>)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	4413      	add	r3, r2
 8005594:	3308      	adds	r3, #8
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800559c:	429a      	cmp	r2, r3
 800559e:	d102      	bne.n	80055a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80055a0:	e007      	b.n	80055b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80055a2:	2301      	movs	r3, #1
 80055a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d9d2      	bls.n	8005558 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d109      	bne.n	80055cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <chk_lock+0x80>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d101      	bne.n	80055c8 <chk_lock+0x84>
 80055c4:	2300      	movs	r3, #0
 80055c6:	e010      	b.n	80055ea <chk_lock+0xa6>
 80055c8:	2312      	movs	r3, #18
 80055ca:	e00e      	b.n	80055ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <chk_lock+0xa0>
 80055d2:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <chk_lock+0xb4>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	4413      	add	r3, r2
 80055da:	330c      	adds	r3, #12
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e2:	d101      	bne.n	80055e8 <chk_lock+0xa4>
 80055e4:	2310      	movs	r3, #16
 80055e6:	e000      	b.n	80055ea <chk_lock+0xa6>
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	2000261c 	.word	0x2000261c

080055fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	e002      	b.n	800560e <enq_lock+0x12>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3301      	adds	r3, #1
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d806      	bhi.n	8005622 <enq_lock+0x26>
 8005614:	4a09      	ldr	r2, [pc, #36]	@ (800563c <enq_lock+0x40>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	4413      	add	r3, r2
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f2      	bne.n	8005608 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b02      	cmp	r3, #2
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000261c 	.word	0x2000261c

08005640 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e01f      	b.n	8005690 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005650:	4a41      	ldr	r2, [pc, #260]	@ (8005758 <inc_lock+0x118>)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	4413      	add	r3, r2
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d113      	bne.n	800568a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005662:	4a3d      	ldr	r2, [pc, #244]	@ (8005758 <inc_lock+0x118>)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	4413      	add	r3, r2
 800566a:	3304      	adds	r3, #4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005672:	429a      	cmp	r2, r3
 8005674:	d109      	bne.n	800568a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005676:	4a38      	ldr	r2, [pc, #224]	@ (8005758 <inc_lock+0x118>)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	4413      	add	r3, r2
 800567e:	3308      	adds	r3, #8
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005686:	429a      	cmp	r2, r3
 8005688:	d006      	beq.n	8005698 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d9dc      	bls.n	8005650 <inc_lock+0x10>
 8005696:	e000      	b.n	800569a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005698:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d132      	bne.n	8005706 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e002      	b.n	80056ac <inc_lock+0x6c>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3301      	adds	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d806      	bhi.n	80056c0 <inc_lock+0x80>
 80056b2:	4a29      	ldr	r2, [pc, #164]	@ (8005758 <inc_lock+0x118>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4413      	add	r3, r2
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f2      	bne.n	80056a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d101      	bne.n	80056ca <inc_lock+0x8a>
 80056c6:	2300      	movs	r3, #0
 80056c8:	e040      	b.n	800574c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4922      	ldr	r1, [pc, #136]	@ (8005758 <inc_lock+0x118>)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	440b      	add	r3, r1
 80056d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	491e      	ldr	r1, [pc, #120]	@ (8005758 <inc_lock+0x118>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	440b      	add	r3, r1
 80056e4:	3304      	adds	r3, #4
 80056e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	491a      	ldr	r1, [pc, #104]	@ (8005758 <inc_lock+0x118>)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	440b      	add	r3, r1
 80056f4:	3308      	adds	r3, #8
 80056f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80056f8:	4a17      	ldr	r2, [pc, #92]	@ (8005758 <inc_lock+0x118>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	4413      	add	r3, r2
 8005700:	330c      	adds	r3, #12
 8005702:	2200      	movs	r2, #0
 8005704:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <inc_lock+0xe0>
 800570c:	4a12      	ldr	r2, [pc, #72]	@ (8005758 <inc_lock+0x118>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	4413      	add	r3, r2
 8005714:	330c      	adds	r3, #12
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <inc_lock+0xe0>
 800571c:	2300      	movs	r3, #0
 800571e:	e015      	b.n	800574c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d108      	bne.n	8005738 <inc_lock+0xf8>
 8005726:	4a0c      	ldr	r2, [pc, #48]	@ (8005758 <inc_lock+0x118>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	4413      	add	r3, r2
 800572e:	330c      	adds	r3, #12
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	e001      	b.n	800573c <inc_lock+0xfc>
 8005738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800573c:	4906      	ldr	r1, [pc, #24]	@ (8005758 <inc_lock+0x118>)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	440b      	add	r3, r1
 8005744:	330c      	adds	r3, #12
 8005746:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	2000261c 	.word	0x2000261c

0800575c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3b01      	subs	r3, #1
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d825      	bhi.n	80057bc <dec_lock+0x60>
		n = Files[i].ctr;
 8005770:	4a17      	ldr	r2, [pc, #92]	@ (80057d0 <dec_lock+0x74>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	4413      	add	r3, r2
 8005778:	330c      	adds	r3, #12
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800577e:	89fb      	ldrh	r3, [r7, #14]
 8005780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005784:	d101      	bne.n	800578a <dec_lock+0x2e>
 8005786:	2300      	movs	r3, #0
 8005788:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800578a:	89fb      	ldrh	r3, [r7, #14]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <dec_lock+0x3a>
 8005790:	89fb      	ldrh	r3, [r7, #14]
 8005792:	3b01      	subs	r3, #1
 8005794:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005796:	4a0e      	ldr	r2, [pc, #56]	@ (80057d0 <dec_lock+0x74>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	4413      	add	r3, r2
 800579e:	330c      	adds	r3, #12
 80057a0:	89fa      	ldrh	r2, [r7, #14]
 80057a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80057a4:	89fb      	ldrh	r3, [r7, #14]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d105      	bne.n	80057b6 <dec_lock+0x5a>
 80057aa:	4a09      	ldr	r2, [pc, #36]	@ (80057d0 <dec_lock+0x74>)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	4413      	add	r3, r2
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	737b      	strb	r3, [r7, #13]
 80057ba:	e001      	b.n	80057c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80057bc:	2302      	movs	r3, #2
 80057be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80057c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	2000261c 	.word	0x2000261c

080057d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e010      	b.n	8005804 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80057e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005818 <clear_lock+0x44>)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	4413      	add	r3, r2
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d105      	bne.n	80057fe <clear_lock+0x2a>
 80057f2:	4a09      	ldr	r2, [pc, #36]	@ (8005818 <clear_lock+0x44>)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	4413      	add	r3, r2
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d9eb      	bls.n	80057e2 <clear_lock+0xe>
	}
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	2000261c 	.word	0x2000261c

0800581c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	78db      	ldrb	r3, [r3, #3]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d034      	beq.n	800589a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005834:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	7858      	ldrb	r0, [r3, #1]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005840:	2301      	movs	r3, #1
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	f7ff fd40 	bl	80052c8 <disk_write>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <sync_window+0x38>
			res = FR_DISK_ERR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	e022      	b.n	800589a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	1ad2      	subs	r2, r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	429a      	cmp	r2, r3
 8005868:	d217      	bcs.n	800589a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	789b      	ldrb	r3, [r3, #2]
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	e010      	b.n	8005894 <sync_window+0x78>
					wsect += fs->fsize;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4413      	add	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	7858      	ldrb	r0, [r3, #1]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005886:	2301      	movs	r3, #1
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	f7ff fd1d 	bl	80052c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3b01      	subs	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d8eb      	bhi.n	8005872 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d01b      	beq.n	80058f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ffad 	bl	800581c <sync_window>
 80058c2:	4603      	mov	r3, r0
 80058c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d113      	bne.n	80058f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7858      	ldrb	r0, [r3, #1]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80058d6:	2301      	movs	r3, #1
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	f7ff fcd5 	bl	8005288 <disk_read>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80058e4:	f04f 33ff 	mov.w	r3, #4294967295
 80058e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff87 	bl	800581c <sync_window>
 800590e:	4603      	mov	r3, r0
 8005910:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d159      	bne.n	80059cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d149      	bne.n	80059b4 <sync_fs+0xb4>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	791b      	ldrb	r3, [r3, #4]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d145      	bne.n	80059b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	899b      	ldrh	r3, [r3, #12]
 8005932:	461a      	mov	r2, r3
 8005934:	2100      	movs	r1, #0
 8005936:	f7ff fda8 	bl	800548a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3334      	adds	r3, #52	@ 0x34
 800593e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005942:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fd37 	bl	80053ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3334      	adds	r3, #52	@ 0x34
 8005950:	4921      	ldr	r1, [pc, #132]	@ (80059d8 <sync_fs+0xd8>)
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fd4c 	bl	80053f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3334      	adds	r3, #52	@ 0x34
 800595c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005960:	491e      	ldr	r1, [pc, #120]	@ (80059dc <sync_fs+0xdc>)
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff fd44 	bl	80053f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3334      	adds	r3, #52	@ 0x34
 800596c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7ff fd3a 	bl	80053f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3334      	adds	r3, #52	@ 0x34
 8005980:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f7ff fd30 	bl	80053f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	7858      	ldrb	r0, [r3, #1]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059a8:	2301      	movs	r3, #1
 80059aa:	f7ff fc8d 	bl	80052c8 <disk_write>
			fs->fsi_flag = 0;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2200      	movs	r2, #0
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fca3 	bl	8005308 <disk_ioctl>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <sync_fs+0xcc>
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	41615252 	.word	0x41615252
 80059dc:	61417272 	.word	0x61417272

080059e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	3b02      	subs	r3, #2
 80059ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	3b02      	subs	r3, #2
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d301      	bcc.n	8005a00 <clust2sect+0x20>
 80059fc:	2300      	movs	r3, #0
 80059fe:	e008      	b.n	8005a12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	895b      	ldrh	r3, [r3, #10]
 8005a04:	461a      	mov	r2, r3
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	fb03 f202 	mul.w	r2, r3, r2
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	4413      	add	r3, r2
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d904      	bls.n	8005a3e <get_fat+0x20>
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005a3e:	2301      	movs	r3, #1
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e0ba      	b.n	8005bba <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	f000 8082 	beq.w	8005b58 <get_fat+0x13a>
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	f300 80a6 	bgt.w	8005ba6 <get_fat+0x188>
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d002      	beq.n	8005a64 <get_fat+0x46>
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d055      	beq.n	8005b0e <get_fat+0xf0>
 8005a62:	e0a0      	b.n	8005ba6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	899b      	ldrh	r3, [r3, #12]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a82:	4413      	add	r3, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	6938      	ldr	r0, [r7, #16]
 8005a88:	f7ff ff0c 	bl	80058a4 <move_window>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 808c 	bne.w	8005bac <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	60fa      	str	r2, [r7, #12]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	8992      	ldrh	r2, [r2, #12]
 8005a9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005aa2:	fb01 f202 	mul.w	r2, r1, r2
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ab0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	899b      	ldrh	r3, [r3, #12]
 8005aba:	4619      	mov	r1, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6938      	ldr	r0, [r7, #16]
 8005ac8:	f7ff feec 	bl	80058a4 <move_window>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d16e      	bne.n	8005bb0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	899b      	ldrh	r3, [r3, #12]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ade:	fb01 f202 	mul.w	r2, r1, r2
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <get_fat+0xe6>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	e002      	b.n	8005b0a <get_fat+0xec>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0a:	617b      	str	r3, [r7, #20]
			break;
 8005b0c:	e055      	b.n	8005bba <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	899b      	ldrh	r3, [r3, #12]
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b22:	4413      	add	r3, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	6938      	ldr	r0, [r7, #16]
 8005b28:	f7ff febc 	bl	80058a4 <move_window>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d140      	bne.n	8005bb4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	8992      	ldrh	r2, [r2, #12]
 8005b40:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b44:	fb00 f202 	mul.w	r2, r0, r2
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fbf9 	bl	8005344 <ld_word>
 8005b52:	4603      	mov	r3, r0
 8005b54:	617b      	str	r3, [r7, #20]
			break;
 8005b56:	e030      	b.n	8005bba <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	899b      	ldrh	r3, [r3, #12]
 8005b60:	089b      	lsrs	r3, r3, #2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4619      	mov	r1, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6938      	ldr	r0, [r7, #16]
 8005b72:	f7ff fe97 	bl	80058a4 <move_window>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11d      	bne.n	8005bb8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	8992      	ldrh	r2, [r2, #12]
 8005b8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b8e:	fb00 f202 	mul.w	r2, r0, r2
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	440b      	add	r3, r1
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fbec 	bl	8005374 <ld_dword>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005ba2:	617b      	str	r3, [r7, #20]
			break;
 8005ba4:	e009      	b.n	8005bba <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	e006      	b.n	8005bba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bac:	bf00      	nop
 8005bae:	e004      	b.n	8005bba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bb0:	bf00      	nop
 8005bb2:	e002      	b.n	8005bba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005bb8:	bf00      	nop
		}
	}

	return val;
 8005bba:	697b      	ldr	r3, [r7, #20]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b089      	sub	sp, #36	@ 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f240 8109 	bls.w	8005dee <put_fat+0x22a>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f080 8103 	bcs.w	8005dee <put_fat+0x22a>
		switch (fs->fs_type) {
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	f000 80b6 	beq.w	8005d5e <put_fat+0x19a>
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	f300 80fb 	bgt.w	8005dee <put_fat+0x22a>
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d003      	beq.n	8005c04 <put_fat+0x40>
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	f000 8083 	beq.w	8005d08 <put_fat+0x144>
 8005c02:	e0f4      	b.n	8005dee <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	61bb      	str	r3, [r7, #24]
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4413      	add	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	899b      	ldrh	r3, [r3, #12]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c22:	4413      	add	r3, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff fe3c 	bl	80058a4 <move_window>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 80d4 	bne.w	8005de0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	61ba      	str	r2, [r7, #24]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	8992      	ldrh	r2, [r2, #12]
 8005c48:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c4c:	fb00 f202 	mul.w	r2, r0, r2
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	440b      	add	r3, r1
 8005c54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <put_fat+0xb8>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b25b      	sxtb	r3, r3
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	b25a      	sxtb	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	b25b      	sxtb	r3, r3
 8005c74:	4313      	orrs	r3, r2
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e001      	b.n	8005c80 <put_fat+0xbc>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	899b      	ldrh	r3, [r3, #12]
 8005c92:	4619      	mov	r1, r3
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fe00 	bl	80058a4 <move_window>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ca8:	7ffb      	ldrb	r3, [r7, #31]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 809a 	bne.w	8005de4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	899b      	ldrh	r3, [r3, #12]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cc2:	fb00 f202 	mul.w	r2, r0, r2
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	440b      	add	r3, r1
 8005cca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <put_fat+0x11a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	e00e      	b.n	8005cfc <put_fat+0x138>
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b25b      	sxtb	r3, r3
 8005ce4:	f023 030f 	bic.w	r3, r3, #15
 8005ce8:	b25a      	sxtb	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	b25b      	sxtb	r3, r3
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	b25b      	sxtb	r3, r3
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	70da      	strb	r2, [r3, #3]
			break;
 8005d06:	e072      	b.n	8005dee <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	899b      	ldrh	r3, [r3, #12]
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	4619      	mov	r1, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f7ff fdbf 	bl	80058a4 <move_window>
 8005d26:	4603      	mov	r3, r0
 8005d28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d2a:	7ffb      	ldrb	r3, [r7, #31]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d15b      	bne.n	8005de8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	8992      	ldrh	r2, [r2, #12]
 8005d3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d42:	fb00 f202 	mul.w	r2, r0, r2
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	440b      	add	r3, r1
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	b292      	uxth	r2, r2
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fb32 	bl	80053ba <st_word>
			fs->wflag = 1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	70da      	strb	r2, [r3, #3]
			break;
 8005d5c:	e047      	b.n	8005dee <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	899b      	ldrh	r3, [r3, #12]
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d72:	4413      	add	r3, r2
 8005d74:	4619      	mov	r1, r3
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff fd94 	bl	80058a4 <move_window>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d80:	7ffb      	ldrb	r3, [r7, #31]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d132      	bne.n	8005dec <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	8992      	ldrh	r2, [r2, #12]
 8005d9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d9e:	fb00 f202 	mul.w	r2, r0, r2
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	440b      	add	r3, r1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fae4 	bl	8005374 <ld_dword>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005db2:	4323      	orrs	r3, r4
 8005db4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	8992      	ldrh	r2, [r2, #12]
 8005dc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dc8:	fb00 f202 	mul.w	r2, r0, r2
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	440b      	add	r3, r1
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fb0c 	bl	80053f0 <st_dword>
			fs->wflag = 1;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	70da      	strb	r2, [r3, #3]
			break;
 8005dde:	e006      	b.n	8005dee <put_fat+0x22a>
			if (res != FR_OK) break;
 8005de0:	bf00      	nop
 8005de2:	e004      	b.n	8005dee <put_fat+0x22a>
			if (res != FR_OK) break;
 8005de4:	bf00      	nop
 8005de6:	e002      	b.n	8005dee <put_fat+0x22a>
			if (res != FR_OK) break;
 8005de8:	bf00      	nop
 8005dea:	e000      	b.n	8005dee <put_fat+0x22a>
			if (res != FR_OK) break;
 8005dec:	bf00      	nop
		}
	}
	return res;
 8005dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3724      	adds	r7, #36	@ 0x24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd90      	pop	{r4, r7, pc}

08005df8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d904      	bls.n	8005e1e <remove_chain+0x26>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d301      	bcc.n	8005e22 <remove_chain+0x2a>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e04b      	b.n	8005eba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00c      	beq.n	8005e42 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	69b8      	ldr	r0, [r7, #24]
 8005e30:	f7ff fec8 	bl	8005bc4 <put_fat>
 8005e34:	4603      	mov	r3, r0
 8005e36:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005e38:	7ffb      	ldrb	r3, [r7, #31]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <remove_chain+0x4a>
 8005e3e:	7ffb      	ldrb	r3, [r7, #31]
 8005e40:	e03b      	b.n	8005eba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff fdea 	bl	8005a1e <get_fat>
 8005e4a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d031      	beq.n	8005eb6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <remove_chain+0x64>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e02e      	b.n	8005eba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d101      	bne.n	8005e68 <remove_chain+0x70>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e028      	b.n	8005eba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005e68:	2200      	movs	r2, #0
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	69b8      	ldr	r0, [r7, #24]
 8005e6e:	f7ff fea9 	bl	8005bc4 <put_fat>
 8005e72:	4603      	mov	r3, r0
 8005e74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005e76:	7ffb      	ldrb	r3, [r7, #31]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <remove_chain+0x88>
 8005e7c:	7ffb      	ldrb	r3, [r7, #31]
 8005e7e:	e01c      	b.n	8005eba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	3b02      	subs	r3, #2
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d20b      	bcs.n	8005ea6 <remove_chain+0xae>
			fs->free_clst++;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	791b      	ldrb	r3, [r3, #4]
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d3c6      	bcc.n	8005e42 <remove_chain+0x4a>
 8005eb4:	e000      	b.n	8005eb8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005eb6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b088      	sub	sp, #32
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10d      	bne.n	8005ef4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <create_chain+0x2c>
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d31b      	bcc.n	8005f26 <create_chain+0x64>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e018      	b.n	8005f26 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fd91 	bl	8005a1e <get_fat>
 8005efc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d801      	bhi.n	8005f08 <create_chain+0x46>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e070      	b.n	8005fea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d101      	bne.n	8005f14 <create_chain+0x52>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	e06a      	b.n	8005fea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d201      	bcs.n	8005f22 <create_chain+0x60>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	e063      	b.n	8005fea <create_chain+0x128>
		scl = clst;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d307      	bcc.n	8005f4a <create_chain+0x88>
				ncl = 2;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d901      	bls.n	8005f4a <create_chain+0x88>
 8005f46:	2300      	movs	r3, #0
 8005f48:	e04f      	b.n	8005fea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005f4a:	69f9      	ldr	r1, [r7, #28]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fd66 	bl	8005a1e <get_fat>
 8005f52:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d003      	beq.n	8005f68 <create_chain+0xa6>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f66:	d101      	bne.n	8005f6c <create_chain+0xaa>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	e03e      	b.n	8005fea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d1da      	bne.n	8005f2a <create_chain+0x68>
 8005f74:	2300      	movs	r3, #0
 8005f76:	e038      	b.n	8005fea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005f78:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7e:	69f9      	ldr	r1, [r7, #28]
 8005f80:	6938      	ldr	r0, [r7, #16]
 8005f82:	f7ff fe1f 	bl	8005bc4 <put_fat>
 8005f86:	4603      	mov	r3, r0
 8005f88:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <create_chain+0xe2>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d006      	beq.n	8005fa4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6938      	ldr	r0, [r7, #16]
 8005f9c:	f7ff fe12 	bl	8005bc4 <put_fat>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d116      	bne.n	8005fd8 <create_chain+0x116>
		fs->last_clst = ncl;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	3b02      	subs	r3, #2
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d804      	bhi.n	8005fc8 <create_chain+0x106>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	1e5a      	subs	r2, r3, #1
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	791b      	ldrb	r3, [r3, #4]
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	711a      	strb	r2, [r3, #4]
 8005fd6:	e007      	b.n	8005fe8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d102      	bne.n	8005fe4 <create_chain+0x122>
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	e000      	b.n	8005fe6 <create_chain+0x124>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005fe8:	69fb      	ldr	r3, [r7, #28]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b087      	sub	sp, #28
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	3304      	adds	r3, #4
 8006008:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	899b      	ldrh	r3, [r3, #12]
 800600e:	461a      	mov	r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	fbb3 f3f2 	udiv	r3, r3, r2
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	8952      	ldrh	r2, [r2, #10]
 800601a:	fbb3 f3f2 	udiv	r3, r3, r2
 800601e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1d1a      	adds	r2, r3, #4
 8006024:	613a      	str	r2, [r7, #16]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <clmt_clust+0x42>
 8006030:	2300      	movs	r3, #0
 8006032:	e010      	b.n	8006056 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	d307      	bcc.n	800604c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	3304      	adds	r3, #4
 8006048:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800604a:	e7e9      	b.n	8006020 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800604c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4413      	add	r3, r2
}
 8006056:	4618      	mov	r0, r3
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b086      	sub	sp, #24
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006078:	d204      	bcs.n	8006084 <dir_sdi+0x22>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006084:	2302      	movs	r3, #2
 8006086:	e071      	b.n	800616c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <dir_sdi+0x46>
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d902      	bls.n	80060a8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	8912      	ldrh	r2, [r2, #8]
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d301      	bcc.n	80060be <dir_sdi+0x5c>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e056      	b.n	800616c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	61da      	str	r2, [r3, #28]
 80060c6:	e02d      	b.n	8006124 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	895b      	ldrh	r3, [r3, #10]
 80060cc:	461a      	mov	r2, r3
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	899b      	ldrh	r3, [r3, #12]
 80060d2:	fb02 f303 	mul.w	r3, r2, r3
 80060d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80060d8:	e019      	b.n	800610e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fc9d 	bl	8005a1e <get_fat>
 80060e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d101      	bne.n	80060f2 <dir_sdi+0x90>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e03c      	b.n	800616c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d904      	bls.n	8006102 <dir_sdi+0xa0>
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d301      	bcc.n	8006106 <dir_sdi+0xa4>
 8006102:	2302      	movs	r3, #2
 8006104:	e032      	b.n	800616c <dir_sdi+0x10a>
			ofs -= csz;
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	429a      	cmp	r2, r3
 8006114:	d2e1      	bcs.n	80060da <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006116:	6979      	ldr	r1, [r7, #20]
 8006118:	6938      	ldr	r0, [r7, #16]
 800611a:	f7ff fc61 	bl	80059e0 <clust2sect>
 800611e:	4602      	mov	r2, r0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <dir_sdi+0xd4>
 8006132:	2302      	movs	r3, #2
 8006134:	e01a      	b.n	800616c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	899b      	ldrh	r3, [r3, #12]
 800613e:	4619      	mov	r1, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	fbb3 f3f1 	udiv	r3, r3, r1
 8006146:	441a      	add	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	899b      	ldrh	r3, [r3, #12]
 8006156:	461a      	mov	r2, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	fbb3 f0f2 	udiv	r0, r3, r2
 800615e:	fb00 f202 	mul.w	r2, r0, r2
 8006162:	1a9b      	subs	r3, r3, r2
 8006164:	18ca      	adds	r2, r1, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	3320      	adds	r3, #32
 800618a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <dir_next+0x28>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800619a:	d301      	bcc.n	80061a0 <dir_next+0x2c>
 800619c:	2304      	movs	r3, #4
 800619e:	e0bb      	b.n	8006318 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	899b      	ldrh	r3, [r3, #12]
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061ac:	fb01 f202 	mul.w	r2, r1, r2
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f040 809d 	bne.w	80062f2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	8912      	ldrh	r2, [r2, #8]
 80061d2:	4293      	cmp	r3, r2
 80061d4:	f0c0 808d 	bcc.w	80062f2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	61da      	str	r2, [r3, #28]
 80061de:	2304      	movs	r3, #4
 80061e0:	e09a      	b.n	8006318 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	899b      	ldrh	r3, [r3, #12]
 80061e6:	461a      	mov	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	8952      	ldrh	r2, [r2, #10]
 80061f2:	3a01      	subs	r2, #1
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d17b      	bne.n	80062f2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7ff fc0b 	bl	8005a1e <get_fat>
 8006208:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d801      	bhi.n	8006214 <dir_next+0xa0>
 8006210:	2302      	movs	r3, #2
 8006212:	e081      	b.n	8006318 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d101      	bne.n	8006220 <dir_next+0xac>
 800621c:	2301      	movs	r3, #1
 800621e:	e07b      	b.n	8006318 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	429a      	cmp	r2, r3
 8006228:	d359      	bcc.n	80062de <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	61da      	str	r2, [r3, #28]
 8006236:	2304      	movs	r3, #4
 8006238:	e06e      	b.n	8006318 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7ff fe3d 	bl	8005ec2 <create_chain>
 8006248:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <dir_next+0xe0>
 8006250:	2307      	movs	r3, #7
 8006252:	e061      	b.n	8006318 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <dir_next+0xea>
 800625a:	2302      	movs	r3, #2
 800625c:	e05c      	b.n	8006318 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d101      	bne.n	800626a <dir_next+0xf6>
 8006266:	2301      	movs	r3, #1
 8006268:	e056      	b.n	8006318 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fad6 	bl	800581c <sync_window>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <dir_next+0x106>
 8006276:	2301      	movs	r3, #1
 8006278:	e04e      	b.n	8006318 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	899b      	ldrh	r3, [r3, #12]
 8006284:	461a      	mov	r2, r3
 8006286:	2100      	movs	r1, #0
 8006288:	f7ff f8ff 	bl	800548a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800628c:	2300      	movs	r3, #0
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	6979      	ldr	r1, [r7, #20]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fba4 	bl	80059e0 <clust2sect>
 8006298:	4602      	mov	r2, r0
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	631a      	str	r2, [r3, #48]	@ 0x30
 800629e:	e012      	b.n	80062c6 <dir_next+0x152>
						fs->wflag = 1;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff fab8 	bl	800581c <sync_window>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <dir_next+0x142>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e030      	b.n	8006318 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3301      	adds	r3, #1
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	895b      	ldrh	r3, [r3, #10]
 80062ca:	461a      	mov	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d3e6      	bcc.n	80062a0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad2      	subs	r2, r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80062e4:	6979      	ldr	r1, [r7, #20]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff fb7a 	bl	80059e0 <clust2sect>
 80062ec:	4602      	mov	r2, r0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	899b      	ldrh	r3, [r3, #12]
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	fbb3 f0f2 	udiv	r0, r3, r2
 800630a:	fb00 f202 	mul.w	r2, r0, r2
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	18ca      	adds	r2, r1, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fe95 	bl	8006062 <dir_sdi>
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d12b      	bne.n	800639a <dir_alloc+0x7a>
		n = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4619      	mov	r1, r3
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff faa9 	bl	80058a4 <move_window>
 8006352:	4603      	mov	r3, r0
 8006354:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d11d      	bne.n	8006398 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2be5      	cmp	r3, #229	@ 0xe5
 8006364:	d004      	beq.n	8006370 <dir_alloc+0x50>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d107      	bne.n	8006380 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3301      	adds	r3, #1
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d102      	bne.n	8006384 <dir_alloc+0x64>
 800637e:	e00c      	b.n	800639a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006384:	2101      	movs	r1, #1
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fef4 	bl	8006174 <dir_next>
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0d7      	beq.n	8006346 <dir_alloc+0x26>
 8006396:	e000      	b.n	800639a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006398:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b04      	cmp	r3, #4
 800639e:	d101      	bne.n	80063a4 <dir_alloc+0x84>
 80063a0:	2307      	movs	r3, #7
 80063a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	331a      	adds	r3, #26
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe ffc1 	bl	8005344 <ld_word>
 80063c2:	4603      	mov	r3, r0
 80063c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d109      	bne.n	80063e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	3314      	adds	r3, #20
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe ffb6 	bl	8005344 <ld_word>
 80063d8:	4603      	mov	r3, r0
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80063e2:	68fb      	ldr	r3, [r7, #12]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	331a      	adds	r3, #26
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	b292      	uxth	r2, r2
 8006400:	4611      	mov	r1, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe ffd9 	bl	80053ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d109      	bne.n	8006424 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f103 0214 	add.w	r2, r3, #20
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	0c1b      	lsrs	r3, r3, #16
 800641a:	b29b      	uxth	r3, r3
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7fe ffcb 	bl	80053ba <st_word>
	}
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800643a:	2100      	movs	r1, #0
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fe10 	bl	8006062 <dir_sdi>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <dir_find+0x24>
 800644c:	7dfb      	ldrb	r3, [r7, #23]
 800644e:	e03e      	b.n	80064ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	4619      	mov	r1, r3
 8006456:	6938      	ldr	r0, [r7, #16]
 8006458:	f7ff fa24 	bl	80058a4 <move_window>
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d12f      	bne.n	80064c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <dir_find+0x4e>
 8006474:	2304      	movs	r3, #4
 8006476:	75fb      	strb	r3, [r7, #23]
 8006478:	e028      	b.n	80064cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	330b      	adds	r3, #11
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006486:	b2da      	uxtb	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	330b      	adds	r3, #11
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <dir_find+0x86>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a18      	ldr	r0, [r3, #32]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3324      	adds	r3, #36	@ 0x24
 80064a4:	220b      	movs	r2, #11
 80064a6:	4619      	mov	r1, r3
 80064a8:	f7ff f80a 	bl	80054c0 <mem_cmp>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80064b2:	2100      	movs	r1, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fe5d 	bl	8006174 <dir_next>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0c5      	beq.n	8006450 <dir_find+0x24>
 80064c4:	e002      	b.n	80064cc <dir_find+0xa0>
		if (res != FR_OK) break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80064ca:	bf00      	nop

	return res;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80064e4:	2101      	movs	r1, #1
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ff1a 	bl	8006320 <dir_alloc>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d11c      	bne.n	8006530 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	4619      	mov	r1, r3
 80064fc:	68b8      	ldr	r0, [r7, #8]
 80064fe:	f7ff f9d1 	bl	80058a4 <move_window>
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d111      	bne.n	8006530 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	2220      	movs	r2, #32
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe ffb8 	bl	800548a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a18      	ldr	r0, [r3, #32]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3324      	adds	r3, #36	@ 0x24
 8006522:	220b      	movs	r2, #11
 8006524:	4619      	mov	r1, r3
 8006526:	f7fe ff8f 	bl	8005448 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2201      	movs	r2, #1
 800652e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3324      	adds	r3, #36	@ 0x24
 8006550:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006552:	220b      	movs	r2, #11
 8006554:	2120      	movs	r1, #32
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f7fe ff97 	bl	800548a <mem_set>
	si = i = 0; ni = 8;
 800655c:	2300      	movs	r3, #0
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	2308      	movs	r3, #8
 8006566:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	61fa      	str	r2, [r7, #28]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006576:	7efb      	ldrb	r3, [r7, #27]
 8006578:	2b20      	cmp	r3, #32
 800657a:	d94e      	bls.n	800661a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800657c:	7efb      	ldrb	r3, [r7, #27]
 800657e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006580:	d006      	beq.n	8006590 <create_name+0x54>
 8006582:	7efb      	ldrb	r3, [r7, #27]
 8006584:	2b5c      	cmp	r3, #92	@ 0x5c
 8006586:	d110      	bne.n	80065aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006588:	e002      	b.n	8006590 <create_name+0x54>
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b2f      	cmp	r3, #47	@ 0x2f
 800659a:	d0f6      	beq.n	800658a <create_name+0x4e>
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80065a6:	d0f0      	beq.n	800658a <create_name+0x4e>
			break;
 80065a8:	e038      	b.n	800661c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80065aa:	7efb      	ldrb	r3, [r7, #27]
 80065ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80065ae:	d003      	beq.n	80065b8 <create_name+0x7c>
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d30c      	bcc.n	80065d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b0b      	cmp	r3, #11
 80065bc:	d002      	beq.n	80065c4 <create_name+0x88>
 80065be:	7efb      	ldrb	r3, [r7, #27]
 80065c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80065c2:	d001      	beq.n	80065c8 <create_name+0x8c>
 80065c4:	2306      	movs	r3, #6
 80065c6:	e044      	b.n	8006652 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80065c8:	2308      	movs	r3, #8
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	230b      	movs	r3, #11
 80065ce:	617b      	str	r3, [r7, #20]
			continue;
 80065d0:	e022      	b.n	8006618 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80065d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	da04      	bge.n	80065e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80065da:	7efb      	ldrb	r3, [r7, #27]
 80065dc:	3b80      	subs	r3, #128	@ 0x80
 80065de:	4a1f      	ldr	r2, [pc, #124]	@ (800665c <create_name+0x120>)
 80065e0:	5cd3      	ldrb	r3, [r2, r3]
 80065e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80065e4:	7efb      	ldrb	r3, [r7, #27]
 80065e6:	4619      	mov	r1, r3
 80065e8:	481d      	ldr	r0, [pc, #116]	@ (8006660 <create_name+0x124>)
 80065ea:	f7fe ff90 	bl	800550e <chk_chr>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <create_name+0xbc>
 80065f4:	2306      	movs	r3, #6
 80065f6:	e02c      	b.n	8006652 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80065f8:	7efb      	ldrb	r3, [r7, #27]
 80065fa:	2b60      	cmp	r3, #96	@ 0x60
 80065fc:	d905      	bls.n	800660a <create_name+0xce>
 80065fe:	7efb      	ldrb	r3, [r7, #27]
 8006600:	2b7a      	cmp	r3, #122	@ 0x7a
 8006602:	d802      	bhi.n	800660a <create_name+0xce>
 8006604:	7efb      	ldrb	r3, [r7, #27]
 8006606:	3b20      	subs	r3, #32
 8006608:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	613a      	str	r2, [r7, #16]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	4413      	add	r3, r2
 8006614:	7efa      	ldrb	r2, [r7, #27]
 8006616:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006618:	e7a6      	b.n	8006568 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800661a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	441a      	add	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <create_name+0xf4>
 800662c:	2306      	movs	r3, #6
 800662e:	e010      	b.n	8006652 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2be5      	cmp	r3, #229	@ 0xe5
 8006636:	d102      	bne.n	800663e <create_name+0x102>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2205      	movs	r2, #5
 800663c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800663e:	7efb      	ldrb	r3, [r7, #27]
 8006640:	2b20      	cmp	r3, #32
 8006642:	d801      	bhi.n	8006648 <create_name+0x10c>
 8006644:	2204      	movs	r2, #4
 8006646:	e000      	b.n	800664a <create_name+0x10e>
 8006648:	2200      	movs	r2, #0
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	330b      	adds	r3, #11
 800664e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006650:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006652:	4618      	mov	r0, r3
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	08008d80 	.word	0x08008d80
 8006660:	08008cf4 	.word	0x08008cf4

08006664 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006678:	e002      	b.n	8006680 <follow_path+0x1c>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b2f      	cmp	r3, #47	@ 0x2f
 8006686:	d0f8      	beq.n	800667a <follow_path+0x16>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b5c      	cmp	r3, #92	@ 0x5c
 800668e:	d0f4      	beq.n	800667a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2200      	movs	r2, #0
 8006694:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b1f      	cmp	r3, #31
 800669c:	d80a      	bhi.n	80066b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2280      	movs	r2, #128	@ 0x80
 80066a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80066a6:	2100      	movs	r1, #0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fcda 	bl	8006062 <dir_sdi>
 80066ae:	4603      	mov	r3, r0
 80066b0:	75fb      	strb	r3, [r7, #23]
 80066b2:	e048      	b.n	8006746 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066b4:	463b      	mov	r3, r7
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff3f 	bl	800653c <create_name>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d139      	bne.n	800673c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff feaf 	bl	800642c <dir_find>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80066d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d12c      	bne.n	8006740 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80066e6:	7afb      	ldrb	r3, [r7, #11]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d127      	bne.n	8006740 <follow_path+0xdc>
 80066f0:	2305      	movs	r3, #5
 80066f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80066f4:	e024      	b.n	8006740 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066f6:	7afb      	ldrb	r3, [r7, #11]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d121      	bne.n	8006744 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	799b      	ldrb	r3, [r3, #6]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800670c:	2305      	movs	r3, #5
 800670e:	75fb      	strb	r3, [r7, #23]
 8006710:	e019      	b.n	8006746 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	8992      	ldrh	r2, [r2, #12]
 8006720:	fbb3 f0f2 	udiv	r0, r3, r2
 8006724:	fb00 f202 	mul.w	r2, r0, r2
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	440b      	add	r3, r1
 800672c:	4619      	mov	r1, r3
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff fe3d 	bl	80063ae <ld_clust>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800673a:	e7bb      	b.n	80066b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800673c:	bf00      	nop
 800673e:	e002      	b.n	8006746 <follow_path+0xe2>
				break;
 8006740:	bf00      	nop
 8006742:	e000      	b.n	8006746 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006744:	bf00      	nop
			}
		}
	}

	return res;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
 800675c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d031      	beq.n	80067ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e002      	b.n	8006774 <get_ldnumber+0x24>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	3301      	adds	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b20      	cmp	r3, #32
 800677a:	d903      	bls.n	8006784 <get_ldnumber+0x34>
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b3a      	cmp	r3, #58	@ 0x3a
 8006782:	d1f4      	bne.n	800676e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b3a      	cmp	r3, #58	@ 0x3a
 800678a:	d11c      	bne.n	80067c6 <get_ldnumber+0x76>
			tp = *path;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	60fa      	str	r2, [r7, #12]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	3b30      	subs	r3, #48	@ 0x30
 800679c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b09      	cmp	r3, #9
 80067a2:	d80e      	bhi.n	80067c2 <get_ldnumber+0x72>
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d10a      	bne.n	80067c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d107      	bne.n	80067c2 <get_ldnumber+0x72>
					vol = (int)i;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3301      	adds	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	e002      	b.n	80067cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80067ca:	693b      	ldr	r3, [r7, #16]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	70da      	strb	r2, [r3, #3]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f04f 32ff 	mov.w	r2, #4294967295
 80067ee:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff f856 	bl	80058a4 <move_window>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <check_fs+0x2a>
 80067fe:	2304      	movs	r3, #4
 8006800:	e038      	b.n	8006874 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3334      	adds	r3, #52	@ 0x34
 8006806:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fd9a 	bl	8005344 <ld_word>
 8006810:	4603      	mov	r3, r0
 8006812:	461a      	mov	r2, r3
 8006814:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006818:	429a      	cmp	r2, r3
 800681a:	d001      	beq.n	8006820 <check_fs+0x48>
 800681c:	2303      	movs	r3, #3
 800681e:	e029      	b.n	8006874 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006826:	2be9      	cmp	r3, #233	@ 0xe9
 8006828:	d009      	beq.n	800683e <check_fs+0x66>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006830:	2beb      	cmp	r3, #235	@ 0xeb
 8006832:	d11e      	bne.n	8006872 <check_fs+0x9a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800683a:	2b90      	cmp	r3, #144	@ 0x90
 800683c:	d119      	bne.n	8006872 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3334      	adds	r3, #52	@ 0x34
 8006842:	3336      	adds	r3, #54	@ 0x36
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fd95 	bl	8005374 <ld_dword>
 800684a:	4603      	mov	r3, r0
 800684c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006850:	4a0a      	ldr	r2, [pc, #40]	@ (800687c <check_fs+0xa4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d101      	bne.n	800685a <check_fs+0x82>
 8006856:	2300      	movs	r3, #0
 8006858:	e00c      	b.n	8006874 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3334      	adds	r3, #52	@ 0x34
 800685e:	3352      	adds	r3, #82	@ 0x52
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe fd87 	bl	8005374 <ld_dword>
 8006866:	4603      	mov	r3, r0
 8006868:	4a05      	ldr	r2, [pc, #20]	@ (8006880 <check_fs+0xa8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d101      	bne.n	8006872 <check_fs+0x9a>
 800686e:	2300      	movs	r3, #0
 8006870:	e000      	b.n	8006874 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006872:	2302      	movs	r3, #2
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	00544146 	.word	0x00544146
 8006880:	33544146 	.word	0x33544146

08006884 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b096      	sub	sp, #88	@ 0x58
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7ff ff59 	bl	8006750 <get_ldnumber>
 800689e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80068a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da01      	bge.n	80068aa <find_volume+0x26>
 80068a6:	230b      	movs	r3, #11
 80068a8:	e262      	b.n	8006d70 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80068aa:	4a9f      	ldr	r2, [pc, #636]	@ (8006b28 <find_volume+0x2a4>)
 80068ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80068b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <find_volume+0x3a>
 80068ba:	230c      	movs	r3, #12
 80068bc:	e258      	b.n	8006d70 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01a      	beq.n	800690a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe fc95 	bl	8005208 <disk_status>
 80068de:	4603      	mov	r3, r0
 80068e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80068e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10c      	bne.n	800690a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <find_volume+0x82>
 80068f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006902:	230a      	movs	r3, #10
 8006904:	e234      	b.n	8006d70 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006906:	2300      	movs	r3, #0
 8006908:	e232      	b.n	8006d70 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800690a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006912:	b2da      	uxtb	r2, r3
 8006914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006916:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fc8d 	bl	800523c <disk_initialize>
 8006922:	4603      	mov	r3, r0
 8006924:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006928:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006934:	2303      	movs	r3, #3
 8006936:	e21b      	b.n	8006d70 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <find_volume+0xca>
 800693e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800694a:	230a      	movs	r3, #10
 800694c:	e210      	b.n	8006d70 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	7858      	ldrb	r0, [r3, #1]
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	330c      	adds	r3, #12
 8006956:	461a      	mov	r2, r3
 8006958:	2102      	movs	r1, #2
 800695a:	f7fe fcd5 	bl	8005308 <disk_ioctl>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <find_volume+0xe4>
 8006964:	2301      	movs	r3, #1
 8006966:	e203      	b.n	8006d70 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	899b      	ldrh	r3, [r3, #12]
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006970:	d80d      	bhi.n	800698e <find_volume+0x10a>
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	899b      	ldrh	r3, [r3, #12]
 8006976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800697a:	d308      	bcc.n	800698e <find_volume+0x10a>
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	899b      	ldrh	r3, [r3, #12]
 8006980:	461a      	mov	r2, r3
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	899b      	ldrh	r3, [r3, #12]
 8006986:	3b01      	subs	r3, #1
 8006988:	4013      	ands	r3, r2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <find_volume+0x10e>
 800698e:	2301      	movs	r3, #1
 8006990:	e1ee      	b.n	8006d70 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006996:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006998:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800699a:	f7ff ff1d 	bl	80067d8 <check_fs>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80069a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d149      	bne.n	8006a40 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069ac:	2300      	movs	r3, #0
 80069ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80069b0:	e01e      	b.n	80069f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80069b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80069b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80069c0:	4413      	add	r3, r2
 80069c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	3304      	adds	r3, #4
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d006      	beq.n	80069dc <find_volume+0x158>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	3308      	adds	r3, #8
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fcce 	bl	8005374 <ld_dword>
 80069d8:	4602      	mov	r2, r0
 80069da:	e000      	b.n	80069de <find_volume+0x15a>
 80069dc:	2200      	movs	r2, #0
 80069de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	3358      	adds	r3, #88	@ 0x58
 80069e4:	443b      	add	r3, r7
 80069e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ec:	3301      	adds	r3, #1
 80069ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80069f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d9dd      	bls.n	80069b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80069f6:	2300      	movs	r3, #0
 80069f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80069fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <find_volume+0x182>
 8006a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a02:	3b01      	subs	r3, #1
 8006a04:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	3358      	adds	r3, #88	@ 0x58
 8006a0c:	443b      	add	r3, r7
 8006a0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a12:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <find_volume+0x1a2>
 8006a1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a1e:	f7ff fedb 	bl	80067d8 <check_fs>
 8006a22:	4603      	mov	r3, r0
 8006a24:	e000      	b.n	8006a28 <find_volume+0x1a4>
 8006a26:	2303      	movs	r3, #3
 8006a28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d905      	bls.n	8006a40 <find_volume+0x1bc>
 8006a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a36:	3301      	adds	r3, #1
 8006a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d9e2      	bls.n	8006a06 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d101      	bne.n	8006a4c <find_volume+0x1c8>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e191      	b.n	8006d70 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d901      	bls.n	8006a58 <find_volume+0x1d4>
 8006a54:	230d      	movs	r3, #13
 8006a56:	e18b      	b.n	8006d70 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5a:	3334      	adds	r3, #52	@ 0x34
 8006a5c:	330b      	adds	r3, #11
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fc70 	bl	8005344 <ld_word>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	899b      	ldrh	r3, [r3, #12]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <find_volume+0x1f0>
 8006a70:	230d      	movs	r3, #13
 8006a72:	e17d      	b.n	8006d70 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a76:	3334      	adds	r3, #52	@ 0x34
 8006a78:	3316      	adds	r3, #22
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fc62 	bl	8005344 <ld_word>
 8006a80:	4603      	mov	r3, r0
 8006a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <find_volume+0x214>
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8c:	3334      	adds	r3, #52	@ 0x34
 8006a8e:	3324      	adds	r3, #36	@ 0x24
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe fc6f 	bl	8005374 <ld_dword>
 8006a96:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a9c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aaa:	789b      	ldrb	r3, [r3, #2]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d005      	beq.n	8006abc <find_volume+0x238>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab2:	789b      	ldrb	r3, [r3, #2]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d001      	beq.n	8006abc <find_volume+0x238>
 8006ab8:	230d      	movs	r3, #13
 8006aba:	e159      	b.n	8006d70 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	789b      	ldrb	r3, [r3, #2]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac4:	fb02 f303 	mul.w	r3, r2, r3
 8006ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	895b      	ldrh	r3, [r3, #10]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <find_volume+0x26c>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	895b      	ldrh	r3, [r3, #10]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	895b      	ldrh	r3, [r3, #10]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <find_volume+0x270>
 8006af0:	230d      	movs	r3, #13
 8006af2:	e13d      	b.n	8006d70 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	3334      	adds	r3, #52	@ 0x34
 8006af8:	3311      	adds	r3, #17
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fc22 	bl	8005344 <ld_word>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0a:	891b      	ldrh	r3, [r3, #8]
 8006b0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b0e:	8992      	ldrh	r2, [r2, #12]
 8006b10:	0952      	lsrs	r2, r2, #5
 8006b12:	b292      	uxth	r2, r2
 8006b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b18:	fb01 f202 	mul.w	r2, r1, r2
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <find_volume+0x2a8>
 8006b24:	230d      	movs	r3, #13
 8006b26:	e123      	b.n	8006d70 <find_volume+0x4ec>
 8006b28:	20002614 	.word	0x20002614

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2e:	3334      	adds	r3, #52	@ 0x34
 8006b30:	3313      	adds	r3, #19
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fc06 	bl	8005344 <ld_word>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <find_volume+0x2cc>
 8006b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b44:	3334      	adds	r3, #52	@ 0x34
 8006b46:	3320      	adds	r3, #32
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fe fc13 	bl	8005374 <ld_dword>
 8006b4e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b52:	3334      	adds	r3, #52	@ 0x34
 8006b54:	330e      	adds	r3, #14
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fbf4 	bl	8005344 <ld_word>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006b60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <find_volume+0x2e6>
 8006b66:	230d      	movs	r3, #13
 8006b68:	e102      	b.n	8006d70 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006b6a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b6e:	4413      	add	r3, r2
 8006b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b72:	8911      	ldrh	r1, [r2, #8]
 8006b74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b76:	8992      	ldrh	r2, [r2, #12]
 8006b78:	0952      	lsrs	r2, r2, #5
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	fbb1 f2f2 	udiv	r2, r1, r2
 8006b80:	b292      	uxth	r2, r2
 8006b82:	4413      	add	r3, r2
 8006b84:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d201      	bcs.n	8006b92 <find_volume+0x30e>
 8006b8e:	230d      	movs	r3, #13
 8006b90:	e0ee      	b.n	8006d70 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b9a:	8952      	ldrh	r2, [r2, #10]
 8006b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <find_volume+0x328>
 8006ba8:	230d      	movs	r3, #13
 8006baa:	e0e1      	b.n	8006d70 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006bac:	2303      	movs	r3, #3
 8006bae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d802      	bhi.n	8006bc2 <find_volume+0x33e>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d802      	bhi.n	8006bd2 <find_volume+0x34e>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	1c9a      	adds	r2, r3, #2
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bde:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006be0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006be4:	441a      	add	r2, r3
 8006be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be8:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006bea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	441a      	add	r2, r3
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8006bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d11e      	bne.n	8006c3a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfe:	3334      	adds	r3, #52	@ 0x34
 8006c00:	332a      	adds	r3, #42	@ 0x2a
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fb9e 	bl	8005344 <ld_word>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <find_volume+0x38e>
 8006c0e:	230d      	movs	r3, #13
 8006c10:	e0ae      	b.n	8006d70 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	891b      	ldrh	r3, [r3, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <find_volume+0x39a>
 8006c1a:	230d      	movs	r3, #13
 8006c1c:	e0a8      	b.n	8006d70 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	3334      	adds	r3, #52	@ 0x34
 8006c22:	332c      	adds	r3, #44	@ 0x2c
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fe fba5 	bl	8005374 <ld_dword>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c38:	e01f      	b.n	8006c7a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3c:	891b      	ldrh	r3, [r3, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <find_volume+0x3c2>
 8006c42:	230d      	movs	r3, #13
 8006c44:	e094      	b.n	8006d70 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c4c:	441a      	add	r2, r3
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d103      	bne.n	8006c62 <find_volume+0x3de>
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	e00a      	b.n	8006c78 <find_volume+0x3f4>
 8006c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	4613      	mov	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	085a      	lsrs	r2, r3, #1
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006c78:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	899b      	ldrh	r3, [r3, #12]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c86:	440b      	add	r3, r1
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c8c:	8989      	ldrh	r1, [r1, #12]
 8006c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d201      	bcs.n	8006c9a <find_volume+0x416>
 8006c96:	230d      	movs	r3, #13
 8006c98:	e06a      	b.n	8006d70 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	615a      	str	r2, [r3, #20]
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	695a      	ldr	r2, [r3, #20]
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cac:	2280      	movs	r2, #128	@ 0x80
 8006cae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d149      	bne.n	8006d4c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cba:	3334      	adds	r3, #52	@ 0x34
 8006cbc:	3330      	adds	r3, #48	@ 0x30
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fb40 	bl	8005344 <ld_word>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d140      	bne.n	8006d4c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ccc:	3301      	adds	r3, #1
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006cd2:	f7fe fde7 	bl	80058a4 <move_window>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d137      	bne.n	8006d4c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cde:	2200      	movs	r2, #0
 8006ce0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce4:	3334      	adds	r3, #52	@ 0x34
 8006ce6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fb2a 	bl	8005344 <ld_word>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d127      	bne.n	8006d4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfe:	3334      	adds	r3, #52	@ 0x34
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fe fb37 	bl	8005374 <ld_dword>
 8006d06:	4603      	mov	r3, r0
 8006d08:	4a1b      	ldr	r2, [pc, #108]	@ (8006d78 <find_volume+0x4f4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d11e      	bne.n	8006d4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	3334      	adds	r3, #52	@ 0x34
 8006d12:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fb2c 	bl	8005374 <ld_dword>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	4a17      	ldr	r2, [pc, #92]	@ (8006d7c <find_volume+0x4f8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d113      	bne.n	8006d4c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	3334      	adds	r3, #52	@ 0x34
 8006d28:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fb21 	bl	8005374 <ld_dword>
 8006d32:	4602      	mov	r2, r0
 8006d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d36:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	3334      	adds	r3, #52	@ 0x34
 8006d3c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe fb17 	bl	8005374 <ld_dword>
 8006d46:	4602      	mov	r2, r0
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006d52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006d54:	4b0a      	ldr	r3, [pc, #40]	@ (8006d80 <find_volume+0x4fc>)
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	4b08      	ldr	r3, [pc, #32]	@ (8006d80 <find_volume+0x4fc>)
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	4b07      	ldr	r3, [pc, #28]	@ (8006d80 <find_volume+0x4fc>)
 8006d62:	881a      	ldrh	r2, [r3, #0]
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d6a:	f7fe fd33 	bl	80057d4 <clear_lock>
#endif
	return FR_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3758      	adds	r7, #88	@ 0x58
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	41615252 	.word	0x41615252
 8006d7c:	61417272 	.word	0x61417272
 8006d80:	20002618 	.word	0x20002618

08006d84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006d8e:	2309      	movs	r3, #9
 8006d90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01c      	beq.n	8006dd2 <validate+0x4e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d018      	beq.n	8006dd2 <validate+0x4e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d013      	beq.n	8006dd2 <validate+0x4e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	889a      	ldrh	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	88db      	ldrh	r3, [r3, #6]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d10c      	bne.n	8006dd2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe fa22 	bl	8005208 <disk_status>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <validate+0x4e>
			res = FR_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <validate+0x5a>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	e000      	b.n	8006de0 <validate+0x5c>
 8006dde:	2300      	movs	r3, #0
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	6013      	str	r3, [r2, #0]
	return res;
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e02:	f107 0310 	add.w	r3, r7, #16
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff fca2 	bl	8006750 <get_ldnumber>
 8006e0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	da01      	bge.n	8006e18 <f_mount+0x28>
 8006e14:	230b      	movs	r3, #11
 8006e16:	e02b      	b.n	8006e70 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e18:	4a17      	ldr	r2, [pc, #92]	@ (8006e78 <f_mount+0x88>)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006e28:	69b8      	ldr	r0, [r7, #24]
 8006e2a:	f7fe fcd3 	bl	80057d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2200      	movs	r2, #0
 8006e32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	490d      	ldr	r1, [pc, #52]	@ (8006e78 <f_mount+0x88>)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <f_mount+0x66>
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d001      	beq.n	8006e5a <f_mount+0x6a>
 8006e56:	2300      	movs	r3, #0
 8006e58:	e00a      	b.n	8006e70 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e5a:	f107 010c 	add.w	r1, r7, #12
 8006e5e:	f107 0308 	add.w	r3, r7, #8
 8006e62:	2200      	movs	r2, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff fd0d 	bl	8006884 <find_volume>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3720      	adds	r7, #32
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20002614 	.word	0x20002614

08006e7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b098      	sub	sp, #96	@ 0x60
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <f_open+0x18>
 8006e90:	2309      	movs	r3, #9
 8006e92:	e1b7      	b.n	8007204 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e9a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006e9c:	79fa      	ldrb	r2, [r7, #7]
 8006e9e:	f107 0110 	add.w	r1, r7, #16
 8006ea2:	f107 0308 	add.w	r3, r7, #8
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fcec 	bl	8006884 <find_volume>
 8006eac:	4603      	mov	r3, r0
 8006eae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006eb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 819b 	bne.w	80071f2 <f_open+0x376>
		dj.obj.fs = fs;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	f107 0314 	add.w	r3, r7, #20
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fbcb 	bl	8006664 <follow_path>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006ed4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d118      	bne.n	8006f0e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006edc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	da03      	bge.n	8006eee <f_open+0x72>
				res = FR_INVALID_NAME;
 8006ee6:	2306      	movs	r3, #6
 8006ee8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006eec:	e00f      	b.n	8006f0e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	bf8c      	ite	hi
 8006ef4:	2301      	movhi	r3, #1
 8006ef6:	2300      	movls	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fb1e 	bl	8005544 <chk_lock>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	f003 031c 	and.w	r3, r3, #28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d07f      	beq.n	8007018 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006f18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d017      	beq.n	8006f50 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006f20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d10e      	bne.n	8006f46 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f28:	f7fe fb68 	bl	80055fc <enq_lock>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <f_open+0xc4>
 8006f32:	f107 0314 	add.w	r3, r7, #20
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff facd 	bl	80064d6 <dir_register>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	e000      	b.n	8006f42 <f_open+0xc6>
 8006f40:	2312      	movs	r3, #18
 8006f42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	f043 0308 	orr.w	r3, r3, #8
 8006f4c:	71fb      	strb	r3, [r7, #7]
 8006f4e:	e010      	b.n	8006f72 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f50:	7ebb      	ldrb	r3, [r7, #26]
 8006f52:	f003 0311 	and.w	r3, r3, #17
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <f_open+0xe6>
					res = FR_DENIED;
 8006f5a:	2307      	movs	r3, #7
 8006f5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006f60:	e007      	b.n	8006f72 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <f_open+0xf6>
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d168      	bne.n	800704c <f_open+0x1d0>
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d063      	beq.n	800704c <f_open+0x1d0>
				dw = GET_FATTIME();
 8006f84:	f7fe f8de 	bl	8005144 <get_fattime>
 8006f88:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8c:	330e      	adds	r3, #14
 8006f8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe fa2d 	bl	80053f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f98:	3316      	adds	r3, #22
 8006f9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fa27 	bl	80053f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa4:	330b      	adds	r3, #11
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff f9fc 	bl	80063ae <ld_clust>
 8006fb6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff fa14 	bl	80063ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	331c      	adds	r3, #28
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fa10 	bl	80053f0 <st_dword>
					fs->wflag = 1;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d037      	beq.n	800704c <f_open+0x1d0>
						dw = fs->winsect;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006fe2:	f107 0314 	add.w	r3, r7, #20
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe ff04 	bl	8005df8 <remove_chain>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d126      	bne.n	800704c <f_open+0x1d0>
							res = move_window(fs, dw);
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fc4e 	bl	80058a4 <move_window>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007012:	3a01      	subs	r2, #1
 8007014:	611a      	str	r2, [r3, #16]
 8007016:	e019      	b.n	800704c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007018:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800701c:	2b00      	cmp	r3, #0
 800701e:	d115      	bne.n	800704c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007020:	7ebb      	ldrb	r3, [r7, #26]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <f_open+0x1b6>
					res = FR_NO_FILE;
 800702a:	2304      	movs	r3, #4
 800702c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007030:	e00c      	b.n	800704c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <f_open+0x1d0>
 800703c:	7ebb      	ldrb	r3, [r7, #26]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <f_open+0x1d0>
						res = FR_DENIED;
 8007046:	2307      	movs	r3, #7
 8007048:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800704c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007050:	2b00      	cmp	r3, #0
 8007052:	d126      	bne.n	80070a2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007064:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800706e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	2b01      	cmp	r3, #1
 8007078:	bf8c      	ite	hi
 800707a:	2301      	movhi	r3, #1
 800707c:	2300      	movls	r3, #0
 800707e:	b2db      	uxtb	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	f107 0314 	add.w	r3, r7, #20
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fad9 	bl	8005640 <inc_lock>
 800708e:	4602      	mov	r2, r0
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <f_open+0x226>
 800709c:	2302      	movs	r3, #2
 800709e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80070a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f040 80a3 	bne.w	80071f2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070b0:	4611      	mov	r1, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff f97b 	bl	80063ae <ld_clust>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	331c      	adds	r3, #28
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe f956 	bl	8005374 <ld_dword>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	88da      	ldrh	r2, [r3, #6]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	79fa      	ldrb	r2, [r7, #7]
 80070e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3330      	adds	r3, #48	@ 0x30
 80070fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f7fe f9c0 	bl	800548a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d06e      	beq.n	80071f2 <f_open+0x376>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d06a      	beq.n	80071f2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	895b      	ldrh	r3, [r3, #10]
 8007128:	461a      	mov	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	899b      	ldrh	r3, [r3, #12]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007140:	e016      	b.n	8007170 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fc69 	bl	8005a1e <get_fat>
 800714c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800714e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007150:	2b01      	cmp	r3, #1
 8007152:	d802      	bhi.n	800715a <f_open+0x2de>
 8007154:	2302      	movs	r3, #2
 8007156:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800715a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d102      	bne.n	8007168 <f_open+0x2ec>
 8007162:	2301      	movs	r3, #1
 8007164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007168:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800716a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007170:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007174:	2b00      	cmp	r3, #0
 8007176:	d103      	bne.n	8007180 <f_open+0x304>
 8007178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800717a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800717c:	429a      	cmp	r2, r3
 800717e:	d8e0      	bhi.n	8007142 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007184:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007186:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800718a:	2b00      	cmp	r3, #0
 800718c:	d131      	bne.n	80071f2 <f_open+0x376>
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	899b      	ldrh	r3, [r3, #12]
 8007192:	461a      	mov	r2, r3
 8007194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007196:	fbb3 f1f2 	udiv	r1, r3, r2
 800719a:	fb01 f202 	mul.w	r2, r1, r2
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d026      	beq.n	80071f2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fe fc19 	bl	80059e0 <clust2sect>
 80071ae:	6478      	str	r0, [r7, #68]	@ 0x44
 80071b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d103      	bne.n	80071be <f_open+0x342>
						res = FR_INT_ERR;
 80071b6:	2302      	movs	r3, #2
 80071b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80071bc:	e019      	b.n	80071f2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	899b      	ldrh	r3, [r3, #12]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80071ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071cc:	441a      	add	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	7858      	ldrb	r0, [r3, #1]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a1a      	ldr	r2, [r3, #32]
 80071e0:	2301      	movs	r3, #1
 80071e2:	f7fe f851 	bl	8005288 <disk_read>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <f_open+0x376>
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80071f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <f_open+0x384>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007200:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007204:	4618      	mov	r0, r3
 8007206:	3760      	adds	r7, #96	@ 0x60
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08e      	sub	sp, #56	@ 0x38
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f107 0214 	add.w	r2, r7, #20
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fda9 	bl	8006d84 <validate>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007238:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800723c:	2b00      	cmp	r3, #0
 800723e:	d107      	bne.n	8007250 <f_read+0x44>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	7d5b      	ldrb	r3, [r3, #21]
 8007244:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007248:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <f_read+0x4a>
 8007250:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007254:	e135      	b.n	80074c2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	7d1b      	ldrb	r3, [r3, #20]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <f_read+0x5a>
 8007262:	2307      	movs	r3, #7
 8007264:	e12d      	b.n	80074c2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	429a      	cmp	r2, r3
 8007278:	f240 811e 	bls.w	80074b8 <f_read+0x2ac>
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007280:	e11a      	b.n	80074b8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	8992      	ldrh	r2, [r2, #12]
 800728a:	fbb3 f1f2 	udiv	r1, r3, r2
 800728e:	fb01 f202 	mul.w	r2, r1, r2
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	2b00      	cmp	r3, #0
 8007296:	f040 80d5 	bne.w	8007444 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	8992      	ldrh	r2, [r2, #12]
 80072a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	8952      	ldrh	r2, [r2, #10]
 80072aa:	3a01      	subs	r2, #1
 80072ac:	4013      	ands	r3, r2
 80072ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d12f      	bne.n	8007316 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c4:	e013      	b.n	80072ee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	4619      	mov	r1, r3
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7fe fe8c 	bl	8005ff2 <clmt_clust>
 80072da:	6338      	str	r0, [r7, #48]	@ 0x30
 80072dc:	e007      	b.n	80072ee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7fe fb99 	bl	8005a1e <get_fat>
 80072ec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d804      	bhi.n	80072fe <f_read+0xf2>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2202      	movs	r2, #2
 80072f8:	755a      	strb	r2, [r3, #21]
 80072fa:	2302      	movs	r3, #2
 80072fc:	e0e1      	b.n	80074c2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d104      	bne.n	8007310 <f_read+0x104>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	755a      	strb	r2, [r3, #21]
 800730c:	2301      	movs	r3, #1
 800730e:	e0d8      	b.n	80074c2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007314:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	f7fe fb5e 	bl	80059e0 <clust2sect>
 8007324:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <f_read+0x12a>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2202      	movs	r2, #2
 8007330:	755a      	strb	r2, [r3, #21]
 8007332:	2302      	movs	r3, #2
 8007334:	e0c5      	b.n	80074c2 <f_read+0x2b6>
			sect += csect;
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	4413      	add	r3, r2
 800733c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	899b      	ldrh	r3, [r3, #12]
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	fbb3 f3f2 	udiv	r3, r3, r2
 800734a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800734c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d041      	beq.n	80073d6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	4413      	add	r3, r2
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	8952      	ldrh	r2, [r2, #10]
 800735c:	4293      	cmp	r3, r2
 800735e:	d905      	bls.n	800736c <f_read+0x160>
					cc = fs->csize - csect;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	895b      	ldrh	r3, [r3, #10]
 8007364:	461a      	mov	r2, r3
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	7858      	ldrb	r0, [r3, #1]
 8007370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007376:	f7fd ff87 	bl	8005288 <disk_read>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <f_read+0x17e>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	755a      	strb	r2, [r3, #21]
 8007386:	2301      	movs	r3, #1
 8007388:	e09b      	b.n	80074c2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	7d1b      	ldrb	r3, [r3, #20]
 800738e:	b25b      	sxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	da18      	bge.n	80073c6 <f_read+0x1ba>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800739e:	429a      	cmp	r2, r3
 80073a0:	d911      	bls.n	80073c6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1a      	ldr	r2, [r3, #32]
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	8992      	ldrh	r2, [r2, #12]
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b4:	18d0      	adds	r0, r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	899b      	ldrh	r3, [r3, #12]
 80073c0:	461a      	mov	r2, r3
 80073c2:	f7fe f841 	bl	8005448 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	899b      	ldrh	r3, [r3, #12]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80073d4:	e05c      	b.n	8007490 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d02e      	beq.n	800743e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	7d1b      	ldrb	r3, [r3, #20]
 80073e4:	b25b      	sxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da18      	bge.n	800741c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	7858      	ldrb	r0, [r3, #1]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a1a      	ldr	r2, [r3, #32]
 80073f8:	2301      	movs	r3, #1
 80073fa:	f7fd ff65 	bl	80052c8 <disk_write>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <f_read+0x202>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	755a      	strb	r2, [r3, #21]
 800740a:	2301      	movs	r3, #1
 800740c:	e059      	b.n	80074c2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	7d1b      	ldrb	r3, [r3, #20]
 8007412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007416:	b2da      	uxtb	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	7858      	ldrb	r0, [r3, #1]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007426:	2301      	movs	r3, #1
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	f7fd ff2d 	bl	8005288 <disk_read>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <f_read+0x232>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	755a      	strb	r2, [r3, #21]
 800743a:	2301      	movs	r3, #1
 800743c:	e041      	b.n	80074c2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	899b      	ldrh	r3, [r3, #12]
 8007448:	4618      	mov	r0, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	8992      	ldrh	r2, [r2, #12]
 8007452:	fbb3 f1f2 	udiv	r1, r3, r2
 8007456:	fb01 f202 	mul.w	r2, r1, r2
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	1ac3      	subs	r3, r0, r3
 800745e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	429a      	cmp	r2, r3
 8007466:	d901      	bls.n	800746c <f_read+0x260>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	8992      	ldrh	r2, [r2, #12]
 800747a:	fbb3 f0f2 	udiv	r0, r3, r2
 800747e:	fb00 f202 	mul.w	r2, r0, r2
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	440b      	add	r3, r1
 8007486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007488:	4619      	mov	r1, r3
 800748a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800748c:	f7fd ffdc 	bl	8005448 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	4413      	add	r3, r2
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	699a      	ldr	r2, [r3, #24]
 800749c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749e:	441a      	add	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	619a      	str	r2, [r3, #24]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	441a      	add	r2, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f47f aee1 	bne.w	8007282 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3738      	adds	r7, #56	@ 0x38
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b08c      	sub	sp, #48	@ 0x30
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f107 0210 	add.w	r2, r7, #16
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fc4a 	bl	8006d84 <validate>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80074f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d107      	bne.n	800750e <f_write+0x44>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	7d5b      	ldrb	r3, [r3, #21]
 8007502:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007506:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <f_write+0x4a>
 800750e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007512:	e16a      	b.n	80077ea <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	7d1b      	ldrb	r3, [r3, #20]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <f_write+0x5a>
 8007520:	2307      	movs	r3, #7
 8007522:	e162      	b.n	80077ea <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	441a      	add	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	429a      	cmp	r2, r3
 8007532:	f080 814c 	bcs.w	80077ce <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	43db      	mvns	r3, r3
 800753c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800753e:	e146      	b.n	80077ce <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	8992      	ldrh	r2, [r2, #12]
 8007548:	fbb3 f1f2 	udiv	r1, r3, r2
 800754c:	fb01 f202 	mul.w	r2, r1, r2
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	f040 80f1 	bne.w	800773a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	8992      	ldrh	r2, [r2, #12]
 8007560:	fbb3 f3f2 	udiv	r3, r3, r2
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	8952      	ldrh	r2, [r2, #10]
 8007568:	3a01      	subs	r2, #1
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d143      	bne.n	80075fc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10c      	bne.n	8007596 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	d11a      	bne.n	80075be <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe fc98 	bl	8005ec2 <create_chain>
 8007592:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007594:	e013      	b.n	80075be <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	4619      	mov	r1, r3
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7fe fd24 	bl	8005ff2 <clmt_clust>
 80075aa:	62b8      	str	r0, [r7, #40]	@ 0x28
 80075ac:	e007      	b.n	80075be <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f7fe fc83 	bl	8005ec2 <create_chain>
 80075bc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 8109 	beq.w	80077d8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d104      	bne.n	80075d6 <f_write+0x10c>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2202      	movs	r2, #2
 80075d0:	755a      	strb	r2, [r3, #21]
 80075d2:	2302      	movs	r3, #2
 80075d4:	e109      	b.n	80077ea <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d104      	bne.n	80075e8 <f_write+0x11e>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	755a      	strb	r2, [r3, #21]
 80075e4:	2301      	movs	r3, #1
 80075e6:	e100      	b.n	80077ea <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075ec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <f_write+0x132>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075fa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	7d1b      	ldrb	r3, [r3, #20]
 8007600:	b25b      	sxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	da18      	bge.n	8007638 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	7858      	ldrb	r0, [r3, #1]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a1a      	ldr	r2, [r3, #32]
 8007614:	2301      	movs	r3, #1
 8007616:	f7fd fe57 	bl	80052c8 <disk_write>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <f_write+0x160>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	755a      	strb	r2, [r3, #21]
 8007626:	2301      	movs	r3, #1
 8007628:	e0df      	b.n	80077ea <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	7d1b      	ldrb	r3, [r3, #20]
 800762e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007632:	b2da      	uxtb	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f7fe f9cd 	bl	80059e0 <clust2sect>
 8007646:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <f_write+0x18e>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2202      	movs	r2, #2
 8007652:	755a      	strb	r2, [r3, #21]
 8007654:	2302      	movs	r3, #2
 8007656:	e0c8      	b.n	80077ea <f_write+0x320>
			sect += csect;
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	4413      	add	r3, r2
 800765e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	899b      	ldrh	r3, [r3, #12]
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	fbb3 f3f2 	udiv	r3, r3, r2
 800766c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d043      	beq.n	80076fc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	4413      	add	r3, r2
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	8952      	ldrh	r2, [r2, #10]
 800767e:	4293      	cmp	r3, r2
 8007680:	d905      	bls.n	800768e <f_write+0x1c4>
					cc = fs->csize - csect;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	895b      	ldrh	r3, [r3, #10]
 8007686:	461a      	mov	r2, r3
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	7858      	ldrb	r0, [r3, #1]
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	69f9      	ldr	r1, [r7, #28]
 8007698:	f7fd fe16 	bl	80052c8 <disk_write>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d004      	beq.n	80076ac <f_write+0x1e2>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	755a      	strb	r2, [r3, #21]
 80076a8:	2301      	movs	r3, #1
 80076aa:	e09e      	b.n	80077ea <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d918      	bls.n	80076ec <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1a      	ldr	r2, [r3, #32]
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	8992      	ldrh	r2, [r2, #12]
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	18d1      	adds	r1, r2, r3
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	899b      	ldrh	r3, [r3, #12]
 80076d8:	461a      	mov	r2, r3
 80076da:	f7fd feb5 	bl	8005448 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	7d1b      	ldrb	r3, [r3, #20]
 80076e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	899b      	ldrh	r3, [r3, #12]
 80076f0:	461a      	mov	r2, r3
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	fb02 f303 	mul.w	r3, r2, r3
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80076fa:	e04b      	b.n	8007794 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	429a      	cmp	r2, r3
 8007704:	d016      	beq.n	8007734 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800770e:	429a      	cmp	r2, r3
 8007710:	d210      	bcs.n	8007734 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	7858      	ldrb	r0, [r3, #1]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800771c:	2301      	movs	r3, #1
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	f7fd fdb2 	bl	8005288 <disk_read>
 8007724:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	755a      	strb	r2, [r3, #21]
 8007730:	2301      	movs	r3, #1
 8007732:	e05a      	b.n	80077ea <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	899b      	ldrh	r3, [r3, #12]
 800773e:	4618      	mov	r0, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	8992      	ldrh	r2, [r2, #12]
 8007748:	fbb3 f1f2 	udiv	r1, r3, r2
 800774c:	fb01 f202 	mul.w	r2, r1, r2
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	1ac3      	subs	r3, r0, r3
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	429a      	cmp	r2, r3
 800775c:	d901      	bls.n	8007762 <f_write+0x298>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	8992      	ldrh	r2, [r2, #12]
 8007770:	fbb3 f0f2 	udiv	r0, r3, r2
 8007774:	fb00 f202 	mul.w	r2, r0, r2
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	440b      	add	r3, r1
 800777c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800777e:	69f9      	ldr	r1, [r7, #28]
 8007780:	4618      	mov	r0, r3
 8007782:	f7fd fe61 	bl	8005448 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	7d1b      	ldrb	r3, [r3, #20]
 800778a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800778e:	b2da      	uxtb	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	4413      	add	r3, r2
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	441a      	add	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	619a      	str	r2, [r3, #24]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	bf38      	it	cc
 80077b4:	461a      	movcc	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	60da      	str	r2, [r3, #12]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	441a      	add	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f47f aeb5 	bne.w	8007540 <f_write+0x76>
 80077d6:	e000      	b.n	80077da <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	7d1b      	ldrb	r3, [r3, #20]
 80077de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3730      	adds	r7, #48	@ 0x30
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b086      	sub	sp, #24
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f107 0208 	add.w	r2, r7, #8
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff fabe 	bl	8006d84 <validate>
 8007808:	4603      	mov	r3, r0
 800780a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d168      	bne.n	80078e4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7d1b      	ldrb	r3, [r3, #20]
 8007816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d062      	beq.n	80078e4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7d1b      	ldrb	r3, [r3, #20]
 8007822:	b25b      	sxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	da15      	bge.n	8007854 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	7858      	ldrb	r0, [r3, #1]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1a      	ldr	r2, [r3, #32]
 8007836:	2301      	movs	r3, #1
 8007838:	f7fd fd46 	bl	80052c8 <disk_write>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <f_sync+0x54>
 8007842:	2301      	movs	r3, #1
 8007844:	e04f      	b.n	80078e6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	7d1b      	ldrb	r3, [r3, #20]
 800784a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800784e:	b2da      	uxtb	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007854:	f7fd fc76 	bl	8005144 <get_fattime>
 8007858:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f7fe f81e 	bl	80058a4 <move_window>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d138      	bne.n	80078e4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007876:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	330b      	adds	r3, #11
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	330b      	adds	r3, #11
 8007882:	f042 0220 	orr.w	r2, r2, #32
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	461a      	mov	r2, r3
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	f7fe fda9 	bl	80063ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f103 021c 	add.w	r2, r3, #28
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f7fd fda2 	bl	80053f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3316      	adds	r3, #22
 80078b0:	6939      	ldr	r1, [r7, #16]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd fd9c 	bl	80053f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3312      	adds	r3, #18
 80078bc:	2100      	movs	r1, #0
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fd fd7b 	bl	80053ba <st_word>
					fs->wflag = 1;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2201      	movs	r2, #1
 80078c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe f817 	bl	8005900 <sync_fs>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7d1b      	ldrb	r3, [r3, #20]
 80078da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff ff7b 	bl	80077f2 <f_sync>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d118      	bne.n	8007938 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f107 0208 	add.w	r2, r7, #8
 800790c:	4611      	mov	r1, r2
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fa38 	bl	8006d84 <validate>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd ff1a 	bl	800575c <dec_lock>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b090      	sub	sp, #64	@ 0x40
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f107 0208 	add.w	r2, r7, #8
 8007952:	4611      	mov	r1, r2
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fa15 	bl	8006d84 <validate>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007960:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <f_lseek+0x2e>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7d5b      	ldrb	r3, [r3, #21]
 800796c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007970:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <f_lseek+0x3c>
 8007978:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800797c:	e201      	b.n	8007d82 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 80d9 	beq.w	8007b3a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d15a      	bne.n	8007a46 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007994:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	1d1a      	adds	r2, r3, #4
 800799a:	627a      	str	r2, [r7, #36]	@ 0x24
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	2302      	movs	r3, #2
 80079a2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d03a      	beq.n	8007a26 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	2300      	movs	r3, #0
 80079b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ba:	3302      	adds	r3, #2
 80079bc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c4:	3301      	adds	r3, #1
 80079c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe f826 	bl	8005a1e <get_fat>
 80079d2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d804      	bhi.n	80079e4 <f_lseek+0xa2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2202      	movs	r2, #2
 80079de:	755a      	strb	r2, [r3, #21]
 80079e0:	2302      	movs	r3, #2
 80079e2:	e1ce      	b.n	8007d82 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d104      	bne.n	80079f6 <f_lseek+0xb4>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	755a      	strb	r2, [r3, #21]
 80079f2:	2301      	movs	r3, #1
 80079f4:	e1c5      	b.n	8007d82 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3301      	adds	r3, #1
 80079fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d0de      	beq.n	80079be <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d809      	bhi.n	8007a1c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a14:	1d1a      	adds	r2, r3, #4
 8007a16:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d3c4      	bcc.n	80079b0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a2c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d803      	bhi.n	8007a3e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e19f      	b.n	8007d7e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007a3e:	2311      	movs	r3, #17
 8007a40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007a44:	e19b      	b.n	8007d7e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d902      	bls.n	8007a56 <f_lseek+0x114>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 818d 	beq.w	8007d7e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fe fac1 	bl	8005ff2 <clmt_clust>
 8007a70:	4602      	mov	r2, r0
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7fd ffae 	bl	80059e0 <clust2sect>
 8007a84:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <f_lseek+0x154>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	755a      	strb	r2, [r3, #21]
 8007a92:	2302      	movs	r3, #2
 8007a94:	e175      	b.n	8007d82 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	8992      	ldrh	r2, [r2, #12]
 8007a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	8952      	ldrh	r2, [r2, #10]
 8007aa6:	3a01      	subs	r2, #1
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4413      	add	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	8992      	ldrh	r2, [r2, #12]
 8007ab8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007abc:	fb01 f202 	mul.w	r2, r1, r2
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 815b 	beq.w	8007d7e <f_lseek+0x43c>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	f000 8155 	beq.w	8007d7e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	7d1b      	ldrb	r3, [r3, #20]
 8007ad8:	b25b      	sxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da18      	bge.n	8007b10 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	7858      	ldrb	r0, [r3, #1]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1a      	ldr	r2, [r3, #32]
 8007aec:	2301      	movs	r3, #1
 8007aee:	f7fd fbeb 	bl	80052c8 <disk_write>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d004      	beq.n	8007b02 <f_lseek+0x1c0>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	755a      	strb	r2, [r3, #21]
 8007afe:	2301      	movs	r3, #1
 8007b00:	e13f      	b.n	8007d82 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7d1b      	ldrb	r3, [r3, #20]
 8007b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	7858      	ldrb	r0, [r3, #1]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	f7fd fbb3 	bl	8005288 <disk_read>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d004      	beq.n	8007b32 <f_lseek+0x1f0>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	755a      	strb	r2, [r3, #21]
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e127      	b.n	8007d82 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	621a      	str	r2, [r3, #32]
 8007b38:	e121      	b.n	8007d7e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d908      	bls.n	8007b56 <f_lseek+0x214>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	7d1b      	ldrb	r3, [r3, #20]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b64:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80b5 	beq.w	8007cd8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	895b      	ldrh	r3, [r3, #10]
 8007b72:	461a      	mov	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	899b      	ldrh	r3, [r3, #12]
 8007b78:	fb02 f303 	mul.w	r3, r2, r3
 8007b7c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01b      	beq.n	8007bbc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	1e5a      	subs	r2, r3, #1
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	1e59      	subs	r1, r3, #1
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d30f      	bcc.n	8007bbc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	1e5a      	subs	r2, r3, #1
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	425b      	negs	r3, r3
 8007ba4:	401a      	ands	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bba:	e022      	b.n	8007c02 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d119      	bne.n	8007bfc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe f978 	bl	8005ec2 <create_chain>
 8007bd2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d104      	bne.n	8007be4 <f_lseek+0x2a2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	755a      	strb	r2, [r3, #21]
 8007be0:	2302      	movs	r3, #2
 8007be2:	e0ce      	b.n	8007d82 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d104      	bne.n	8007bf6 <f_lseek+0x2b4>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	755a      	strb	r2, [r3, #21]
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e0c5      	b.n	8007d82 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bfa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c00:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d067      	beq.n	8007cd8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007c08:	e03a      	b.n	8007c80 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	603b      	str	r3, [r7, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	441a      	add	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7d1b      	ldrb	r3, [r3, #20]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00b      	beq.n	8007c42 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe f947 	bl	8005ec2 <create_chain>
 8007c34:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d108      	bne.n	8007c4e <f_lseek+0x30c>
							ofs = 0; break;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	e022      	b.n	8007c88 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd fee9 	bl	8005a1e <get_fat>
 8007c4c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d104      	bne.n	8007c60 <f_lseek+0x31e>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	755a      	strb	r2, [r3, #21]
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e090      	b.n	8007d82 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d904      	bls.n	8007c70 <f_lseek+0x32e>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d304      	bcc.n	8007c7a <f_lseek+0x338>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	755a      	strb	r2, [r3, #21]
 8007c76:	2302      	movs	r3, #2
 8007c78:	e083      	b.n	8007d82 <f_lseek+0x440>
					fp->clust = clst;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c7e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d8c0      	bhi.n	8007c0a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699a      	ldr	r2, [r3, #24]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	441a      	add	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	899b      	ldrh	r3, [r3, #12]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ca0:	fb01 f202 	mul.w	r2, r1, r2
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d016      	beq.n	8007cd8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fd fe96 	bl	80059e0 <clust2sect>
 8007cb4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <f_lseek+0x384>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	755a      	strb	r2, [r3, #21]
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e05d      	b.n	8007d82 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	899b      	ldrh	r3, [r3, #12]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cd4:	4413      	add	r3, r2
 8007cd6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d90a      	bls.n	8007cfa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699a      	ldr	r2, [r3, #24]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7d1b      	ldrb	r3, [r3, #20]
 8007cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	8992      	ldrh	r2, [r2, #12]
 8007d02:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d06:	fb01 f202 	mul.w	r2, r1, r2
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d036      	beq.n	8007d7e <f_lseek+0x43c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d031      	beq.n	8007d7e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7d1b      	ldrb	r3, [r3, #20]
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	da18      	bge.n	8007d56 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	7858      	ldrb	r0, [r3, #1]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	2301      	movs	r3, #1
 8007d34:	f7fd fac8 	bl	80052c8 <disk_write>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <f_lseek+0x406>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	755a      	strb	r2, [r3, #21]
 8007d44:	2301      	movs	r3, #1
 8007d46:	e01c      	b.n	8007d82 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7d1b      	ldrb	r3, [r3, #20]
 8007d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	7858      	ldrb	r0, [r3, #1]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d60:	2301      	movs	r3, #1
 8007d62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d64:	f7fd fa90 	bl	8005288 <disk_read>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d004      	beq.n	8007d78 <f_lseek+0x436>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	755a      	strb	r2, [r3, #21]
 8007d74:	2301      	movs	r3, #1
 8007d76:	e004      	b.n	8007d82 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d7c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3740      	adds	r7, #64	@ 0x40
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b092      	sub	sp, #72	@ 0x48
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007d96:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007d9a:	f107 030c 	add.w	r3, r7, #12
 8007d9e:	2200      	movs	r2, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe fd6f 	bl	8006884 <find_volume>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8007dac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f040 8099 	bne.w	8007ee8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbe:	695a      	ldr	r2, [r3, #20]
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	3b02      	subs	r3, #2
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d804      	bhi.n	8007dd4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e089      	b.n	8007ee8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d128      	bne.n	8007e32 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007de0:	2302      	movs	r3, #2
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007de8:	f107 0314 	add.w	r3, r7, #20
 8007dec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fd fe15 	bl	8005a1e <get_fat>
 8007df4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d103      	bne.n	8007e06 <f_getfree+0x7c>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007e04:	e063      	b.n	8007ece <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d103      	bne.n	8007e14 <f_getfree+0x8a>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007e12:	e05c      	b.n	8007ece <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <f_getfree+0x96>
 8007e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e22:	3301      	adds	r3, #1
 8007e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d3db      	bcc.n	8007de8 <f_getfree+0x5e>
 8007e30:	e04d      	b.n	8007ece <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e42:	2300      	movs	r3, #0
 8007e44:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d113      	bne.n	8007e74 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007e54:	4619      	mov	r1, r3
 8007e56:	f7fd fd25 	bl	80058a4 <move_window>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007e60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d131      	bne.n	8007ecc <f_getfree+0x142>
							p = fs->win;
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	3334      	adds	r3, #52	@ 0x34
 8007e6c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e70:	899b      	ldrh	r3, [r3, #12]
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d10f      	bne.n	8007e9c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007e7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e7e:	f7fd fa61 	bl	8005344 <ld_word>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <f_getfree+0x104>
 8007e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	3302      	adds	r3, #2
 8007e92:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e96:	3b02      	subs	r3, #2
 8007e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e9a:	e010      	b.n	8007ebe <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e9e:	f7fd fa69 	bl	8005374 <ld_dword>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <f_getfree+0x128>
 8007eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eae:	3301      	adds	r3, #1
 8007eb0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eba:	3b04      	subs	r3, #4
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1bd      	bne.n	8007e46 <f_getfree+0xbc>
 8007eca:	e000      	b.n	8007ece <f_getfree+0x144>
							if (res != FR_OK) break;
 8007ecc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007edc:	791a      	ldrb	r2, [r3, #4]
 8007ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee0:	f042 0201 	orr.w	r2, r2, #1
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007ee8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3748      	adds	r7, #72	@ 0x48
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007f08:	e01c      	b.n	8007f44 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007f0a:	f107 0310 	add.w	r3, r7, #16
 8007f0e:	f107 0114 	add.w	r1, r7, #20
 8007f12:	2201      	movs	r2, #1
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff f979 	bl	800720c <f_read>
		if (rc != 1) break;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d117      	bne.n	8007f50 <f_gets+0x5c>
		c = s[0];
 8007f20:	7d3b      	ldrb	r3, [r7, #20]
 8007f22:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	2b0d      	cmp	r3, #13
 8007f28:	d00b      	beq.n	8007f42 <f_gets+0x4e>
		*p++ = c;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	61ba      	str	r2, [r7, #24]
 8007f30:	7dfa      	ldrb	r2, [r7, #23]
 8007f32:	701a      	strb	r2, [r3, #0]
		n++;
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	3301      	adds	r3, #1
 8007f38:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	2b0a      	cmp	r3, #10
 8007f3e:	d009      	beq.n	8007f54 <f_gets+0x60>
 8007f40:	e000      	b.n	8007f44 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007f42:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	dbdd      	blt.n	8007f0a <f_gets+0x16>
 8007f4e:	e002      	b.n	8007f56 <f_gets+0x62>
		if (rc != 1) break;
 8007f50:	bf00      	nop
 8007f52:	e000      	b.n	8007f56 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007f54:	bf00      	nop
	}
	*p = 0;
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <f_gets+0x72>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	e000      	b.n	8007f68 <f_gets+0x74>
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	2b0a      	cmp	r3, #10
 8007f80:	d103      	bne.n	8007f8a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007f82:	210d      	movs	r1, #13
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff fff3 	bl	8007f70 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	db25      	blt.n	8007fe2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	60fa      	str	r2, [r7, #12]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b3c      	cmp	r3, #60	@ 0x3c
 8007fa8:	dd12      	ble.n	8007fd0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f103 010c 	add.w	r1, r3, #12
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	f7ff fa86 	bl	80074ca <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d101      	bne.n	8007fca <putc_bfd+0x5a>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e001      	b.n	8007fce <putc_bfd+0x5e>
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295
 8007fce:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	609a      	str	r2, [r3, #8]
 8007fe0:	e000      	b.n	8007fe4 <putc_bfd+0x74>
	if (i < 0) return;
 8007fe2:	bf00      	nop
}
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	db16      	blt.n	8008028 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6818      	ldr	r0, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f103 010c 	add.w	r1, r3, #12
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	461a      	mov	r2, r3
 800800a:	f107 030c 	add.w	r3, r7, #12
 800800e:	f7ff fa5c 	bl	80074ca <f_write>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d107      	bne.n	8008028 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4293      	cmp	r3, r2
 8008020:	d102      	bne.n	8008028 <putc_flush+0x3e>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	e001      	b.n	800802c <putc_flush+0x42>
	return EOF;
 8008028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	605a      	str	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	609a      	str	r2, [r3, #8]
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b096      	sub	sp, #88	@ 0x58
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008068:	f107 030c 	add.w	r3, r7, #12
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff ffe0 	bl	8008034 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008074:	e009      	b.n	800808a <f_puts+0x2c>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	781a      	ldrb	r2, [r3, #0]
 800807e:	f107 030c 	add.w	r3, r7, #12
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff ff73 	bl	8007f70 <putc_bfd>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f1      	bne.n	8008076 <f_puts+0x18>
	return putc_flush(&pb);
 8008092:	f107 030c 	add.w	r3, r7, #12
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff ffa7 	bl	8007fea <putc_flush>
 800809c:	4603      	mov	r3, r0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3758      	adds	r7, #88	@ 0x58
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80080b6:	2301      	movs	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80080be:	4b1f      	ldr	r3, [pc, #124]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 80080c0:	7a5b      	ldrb	r3, [r3, #9]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d131      	bne.n	800812c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80080c8:	4b1c      	ldr	r3, [pc, #112]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 80080ca:	7a5b      	ldrb	r3, [r3, #9]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	4b1a      	ldr	r3, [pc, #104]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 80080d2:	2100      	movs	r1, #0
 80080d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80080d6:	4b19      	ldr	r3, [pc, #100]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 80080d8:	7a5b      	ldrb	r3, [r3, #9]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	4a17      	ldr	r2, [pc, #92]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80080e6:	4b15      	ldr	r3, [pc, #84]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 80080e8:	7a5b      	ldrb	r3, [r3, #9]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	4b13      	ldr	r3, [pc, #76]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 80080f0:	4413      	add	r3, r2
 80080f2:	79fa      	ldrb	r2, [r7, #7]
 80080f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80080f6:	4b11      	ldr	r3, [pc, #68]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 80080f8:	7a5b      	ldrb	r3, [r3, #9]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	b2d1      	uxtb	r1, r2
 8008100:	4a0e      	ldr	r2, [pc, #56]	@ (800813c <FATFS_LinkDriverEx+0x94>)
 8008102:	7251      	strb	r1, [r2, #9]
 8008104:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008106:	7dbb      	ldrb	r3, [r7, #22]
 8008108:	3330      	adds	r3, #48	@ 0x30
 800810a:	b2da      	uxtb	r2, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3301      	adds	r3, #1
 8008114:	223a      	movs	r2, #58	@ 0x3a
 8008116:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	3302      	adds	r3, #2
 800811c:	222f      	movs	r2, #47	@ 0x2f
 800811e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	3303      	adds	r3, #3
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800812c:	7dfb      	ldrb	r3, [r7, #23]
}
 800812e:	4618      	mov	r0, r3
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	2000263c 	.word	0x2000263c

08008140 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800814a:	2200      	movs	r2, #0
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff ffaa 	bl	80080a8 <FATFS_LinkDriverEx>
 8008154:	4603      	mov	r3, r0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <siprintf>:
 8008160:	b40e      	push	{r1, r2, r3}
 8008162:	b500      	push	{lr}
 8008164:	b09c      	sub	sp, #112	@ 0x70
 8008166:	ab1d      	add	r3, sp, #116	@ 0x74
 8008168:	9002      	str	r0, [sp, #8]
 800816a:	9006      	str	r0, [sp, #24]
 800816c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008170:	4809      	ldr	r0, [pc, #36]	@ (8008198 <siprintf+0x38>)
 8008172:	9107      	str	r1, [sp, #28]
 8008174:	9104      	str	r1, [sp, #16]
 8008176:	4909      	ldr	r1, [pc, #36]	@ (800819c <siprintf+0x3c>)
 8008178:	f853 2b04 	ldr.w	r2, [r3], #4
 800817c:	9105      	str	r1, [sp, #20]
 800817e:	6800      	ldr	r0, [r0, #0]
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	a902      	add	r1, sp, #8
 8008184:	f000 f9a2 	bl	80084cc <_svfiprintf_r>
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	b01c      	add	sp, #112	@ 0x70
 8008190:	f85d eb04 	ldr.w	lr, [sp], #4
 8008194:	b003      	add	sp, #12
 8008196:	4770      	bx	lr
 8008198:	20000024 	.word	0x20000024
 800819c:	ffff0208 	.word	0xffff0208

080081a0 <memset>:
 80081a0:	4402      	add	r2, r0
 80081a2:	4603      	mov	r3, r0
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d100      	bne.n	80081aa <memset+0xa>
 80081a8:	4770      	bx	lr
 80081aa:	f803 1b01 	strb.w	r1, [r3], #1
 80081ae:	e7f9      	b.n	80081a4 <memset+0x4>

080081b0 <__errno>:
 80081b0:	4b01      	ldr	r3, [pc, #4]	@ (80081b8 <__errno+0x8>)
 80081b2:	6818      	ldr	r0, [r3, #0]
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	20000024 	.word	0x20000024

080081bc <__libc_init_array>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	4d0d      	ldr	r5, [pc, #52]	@ (80081f4 <__libc_init_array+0x38>)
 80081c0:	4c0d      	ldr	r4, [pc, #52]	@ (80081f8 <__libc_init_array+0x3c>)
 80081c2:	1b64      	subs	r4, r4, r5
 80081c4:	10a4      	asrs	r4, r4, #2
 80081c6:	2600      	movs	r6, #0
 80081c8:	42a6      	cmp	r6, r4
 80081ca:	d109      	bne.n	80081e0 <__libc_init_array+0x24>
 80081cc:	4d0b      	ldr	r5, [pc, #44]	@ (80081fc <__libc_init_array+0x40>)
 80081ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008200 <__libc_init_array+0x44>)
 80081d0:	f000 fc66 	bl	8008aa0 <_init>
 80081d4:	1b64      	subs	r4, r4, r5
 80081d6:	10a4      	asrs	r4, r4, #2
 80081d8:	2600      	movs	r6, #0
 80081da:	42a6      	cmp	r6, r4
 80081dc:	d105      	bne.n	80081ea <__libc_init_array+0x2e>
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e4:	4798      	blx	r3
 80081e6:	3601      	adds	r6, #1
 80081e8:	e7ee      	b.n	80081c8 <__libc_init_array+0xc>
 80081ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ee:	4798      	blx	r3
 80081f0:	3601      	adds	r6, #1
 80081f2:	e7f2      	b.n	80081da <__libc_init_array+0x1e>
 80081f4:	08008e3c 	.word	0x08008e3c
 80081f8:	08008e3c 	.word	0x08008e3c
 80081fc:	08008e3c 	.word	0x08008e3c
 8008200:	08008e40 	.word	0x08008e40

08008204 <__retarget_lock_acquire_recursive>:
 8008204:	4770      	bx	lr

08008206 <__retarget_lock_release_recursive>:
 8008206:	4770      	bx	lr

08008208 <memcpy>:
 8008208:	440a      	add	r2, r1
 800820a:	4291      	cmp	r1, r2
 800820c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008210:	d100      	bne.n	8008214 <memcpy+0xc>
 8008212:	4770      	bx	lr
 8008214:	b510      	push	{r4, lr}
 8008216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800821a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800821e:	4291      	cmp	r1, r2
 8008220:	d1f9      	bne.n	8008216 <memcpy+0xe>
 8008222:	bd10      	pop	{r4, pc}

08008224 <_free_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4605      	mov	r5, r0
 8008228:	2900      	cmp	r1, #0
 800822a:	d041      	beq.n	80082b0 <_free_r+0x8c>
 800822c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008230:	1f0c      	subs	r4, r1, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	bfb8      	it	lt
 8008236:	18e4      	addlt	r4, r4, r3
 8008238:	f000 f8e0 	bl	80083fc <__malloc_lock>
 800823c:	4a1d      	ldr	r2, [pc, #116]	@ (80082b4 <_free_r+0x90>)
 800823e:	6813      	ldr	r3, [r2, #0]
 8008240:	b933      	cbnz	r3, 8008250 <_free_r+0x2c>
 8008242:	6063      	str	r3, [r4, #4]
 8008244:	6014      	str	r4, [r2, #0]
 8008246:	4628      	mov	r0, r5
 8008248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800824c:	f000 b8dc 	b.w	8008408 <__malloc_unlock>
 8008250:	42a3      	cmp	r3, r4
 8008252:	d908      	bls.n	8008266 <_free_r+0x42>
 8008254:	6820      	ldr	r0, [r4, #0]
 8008256:	1821      	adds	r1, r4, r0
 8008258:	428b      	cmp	r3, r1
 800825a:	bf01      	itttt	eq
 800825c:	6819      	ldreq	r1, [r3, #0]
 800825e:	685b      	ldreq	r3, [r3, #4]
 8008260:	1809      	addeq	r1, r1, r0
 8008262:	6021      	streq	r1, [r4, #0]
 8008264:	e7ed      	b.n	8008242 <_free_r+0x1e>
 8008266:	461a      	mov	r2, r3
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	b10b      	cbz	r3, 8008270 <_free_r+0x4c>
 800826c:	42a3      	cmp	r3, r4
 800826e:	d9fa      	bls.n	8008266 <_free_r+0x42>
 8008270:	6811      	ldr	r1, [r2, #0]
 8008272:	1850      	adds	r0, r2, r1
 8008274:	42a0      	cmp	r0, r4
 8008276:	d10b      	bne.n	8008290 <_free_r+0x6c>
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	4401      	add	r1, r0
 800827c:	1850      	adds	r0, r2, r1
 800827e:	4283      	cmp	r3, r0
 8008280:	6011      	str	r1, [r2, #0]
 8008282:	d1e0      	bne.n	8008246 <_free_r+0x22>
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	6053      	str	r3, [r2, #4]
 800828a:	4408      	add	r0, r1
 800828c:	6010      	str	r0, [r2, #0]
 800828e:	e7da      	b.n	8008246 <_free_r+0x22>
 8008290:	d902      	bls.n	8008298 <_free_r+0x74>
 8008292:	230c      	movs	r3, #12
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	e7d6      	b.n	8008246 <_free_r+0x22>
 8008298:	6820      	ldr	r0, [r4, #0]
 800829a:	1821      	adds	r1, r4, r0
 800829c:	428b      	cmp	r3, r1
 800829e:	bf04      	itt	eq
 80082a0:	6819      	ldreq	r1, [r3, #0]
 80082a2:	685b      	ldreq	r3, [r3, #4]
 80082a4:	6063      	str	r3, [r4, #4]
 80082a6:	bf04      	itt	eq
 80082a8:	1809      	addeq	r1, r1, r0
 80082aa:	6021      	streq	r1, [r4, #0]
 80082ac:	6054      	str	r4, [r2, #4]
 80082ae:	e7ca      	b.n	8008246 <_free_r+0x22>
 80082b0:	bd38      	pop	{r3, r4, r5, pc}
 80082b2:	bf00      	nop
 80082b4:	2000278c 	.word	0x2000278c

080082b8 <sbrk_aligned>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4e0f      	ldr	r6, [pc, #60]	@ (80082f8 <sbrk_aligned+0x40>)
 80082bc:	460c      	mov	r4, r1
 80082be:	6831      	ldr	r1, [r6, #0]
 80082c0:	4605      	mov	r5, r0
 80082c2:	b911      	cbnz	r1, 80082ca <sbrk_aligned+0x12>
 80082c4:	f000 fba6 	bl	8008a14 <_sbrk_r>
 80082c8:	6030      	str	r0, [r6, #0]
 80082ca:	4621      	mov	r1, r4
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 fba1 	bl	8008a14 <_sbrk_r>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	d103      	bne.n	80082de <sbrk_aligned+0x26>
 80082d6:	f04f 34ff 	mov.w	r4, #4294967295
 80082da:	4620      	mov	r0, r4
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	1cc4      	adds	r4, r0, #3
 80082e0:	f024 0403 	bic.w	r4, r4, #3
 80082e4:	42a0      	cmp	r0, r4
 80082e6:	d0f8      	beq.n	80082da <sbrk_aligned+0x22>
 80082e8:	1a21      	subs	r1, r4, r0
 80082ea:	4628      	mov	r0, r5
 80082ec:	f000 fb92 	bl	8008a14 <_sbrk_r>
 80082f0:	3001      	adds	r0, #1
 80082f2:	d1f2      	bne.n	80082da <sbrk_aligned+0x22>
 80082f4:	e7ef      	b.n	80082d6 <sbrk_aligned+0x1e>
 80082f6:	bf00      	nop
 80082f8:	20002788 	.word	0x20002788

080082fc <_malloc_r>:
 80082fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008300:	1ccd      	adds	r5, r1, #3
 8008302:	f025 0503 	bic.w	r5, r5, #3
 8008306:	3508      	adds	r5, #8
 8008308:	2d0c      	cmp	r5, #12
 800830a:	bf38      	it	cc
 800830c:	250c      	movcc	r5, #12
 800830e:	2d00      	cmp	r5, #0
 8008310:	4606      	mov	r6, r0
 8008312:	db01      	blt.n	8008318 <_malloc_r+0x1c>
 8008314:	42a9      	cmp	r1, r5
 8008316:	d904      	bls.n	8008322 <_malloc_r+0x26>
 8008318:	230c      	movs	r3, #12
 800831a:	6033      	str	r3, [r6, #0]
 800831c:	2000      	movs	r0, #0
 800831e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083f8 <_malloc_r+0xfc>
 8008326:	f000 f869 	bl	80083fc <__malloc_lock>
 800832a:	f8d8 3000 	ldr.w	r3, [r8]
 800832e:	461c      	mov	r4, r3
 8008330:	bb44      	cbnz	r4, 8008384 <_malloc_r+0x88>
 8008332:	4629      	mov	r1, r5
 8008334:	4630      	mov	r0, r6
 8008336:	f7ff ffbf 	bl	80082b8 <sbrk_aligned>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	4604      	mov	r4, r0
 800833e:	d158      	bne.n	80083f2 <_malloc_r+0xf6>
 8008340:	f8d8 4000 	ldr.w	r4, [r8]
 8008344:	4627      	mov	r7, r4
 8008346:	2f00      	cmp	r7, #0
 8008348:	d143      	bne.n	80083d2 <_malloc_r+0xd6>
 800834a:	2c00      	cmp	r4, #0
 800834c:	d04b      	beq.n	80083e6 <_malloc_r+0xea>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	4639      	mov	r1, r7
 8008352:	4630      	mov	r0, r6
 8008354:	eb04 0903 	add.w	r9, r4, r3
 8008358:	f000 fb5c 	bl	8008a14 <_sbrk_r>
 800835c:	4581      	cmp	r9, r0
 800835e:	d142      	bne.n	80083e6 <_malloc_r+0xea>
 8008360:	6821      	ldr	r1, [r4, #0]
 8008362:	1a6d      	subs	r5, r5, r1
 8008364:	4629      	mov	r1, r5
 8008366:	4630      	mov	r0, r6
 8008368:	f7ff ffa6 	bl	80082b8 <sbrk_aligned>
 800836c:	3001      	adds	r0, #1
 800836e:	d03a      	beq.n	80083e6 <_malloc_r+0xea>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	442b      	add	r3, r5
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	f8d8 3000 	ldr.w	r3, [r8]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	bb62      	cbnz	r2, 80083d8 <_malloc_r+0xdc>
 800837e:	f8c8 7000 	str.w	r7, [r8]
 8008382:	e00f      	b.n	80083a4 <_malloc_r+0xa8>
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	1b52      	subs	r2, r2, r5
 8008388:	d420      	bmi.n	80083cc <_malloc_r+0xd0>
 800838a:	2a0b      	cmp	r2, #11
 800838c:	d917      	bls.n	80083be <_malloc_r+0xc2>
 800838e:	1961      	adds	r1, r4, r5
 8008390:	42a3      	cmp	r3, r4
 8008392:	6025      	str	r5, [r4, #0]
 8008394:	bf18      	it	ne
 8008396:	6059      	strne	r1, [r3, #4]
 8008398:	6863      	ldr	r3, [r4, #4]
 800839a:	bf08      	it	eq
 800839c:	f8c8 1000 	streq.w	r1, [r8]
 80083a0:	5162      	str	r2, [r4, r5]
 80083a2:	604b      	str	r3, [r1, #4]
 80083a4:	4630      	mov	r0, r6
 80083a6:	f000 f82f 	bl	8008408 <__malloc_unlock>
 80083aa:	f104 000b 	add.w	r0, r4, #11
 80083ae:	1d23      	adds	r3, r4, #4
 80083b0:	f020 0007 	bic.w	r0, r0, #7
 80083b4:	1ac2      	subs	r2, r0, r3
 80083b6:	bf1c      	itt	ne
 80083b8:	1a1b      	subne	r3, r3, r0
 80083ba:	50a3      	strne	r3, [r4, r2]
 80083bc:	e7af      	b.n	800831e <_malloc_r+0x22>
 80083be:	6862      	ldr	r2, [r4, #4]
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	bf0c      	ite	eq
 80083c4:	f8c8 2000 	streq.w	r2, [r8]
 80083c8:	605a      	strne	r2, [r3, #4]
 80083ca:	e7eb      	b.n	80083a4 <_malloc_r+0xa8>
 80083cc:	4623      	mov	r3, r4
 80083ce:	6864      	ldr	r4, [r4, #4]
 80083d0:	e7ae      	b.n	8008330 <_malloc_r+0x34>
 80083d2:	463c      	mov	r4, r7
 80083d4:	687f      	ldr	r7, [r7, #4]
 80083d6:	e7b6      	b.n	8008346 <_malloc_r+0x4a>
 80083d8:	461a      	mov	r2, r3
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	42a3      	cmp	r3, r4
 80083de:	d1fb      	bne.n	80083d8 <_malloc_r+0xdc>
 80083e0:	2300      	movs	r3, #0
 80083e2:	6053      	str	r3, [r2, #4]
 80083e4:	e7de      	b.n	80083a4 <_malloc_r+0xa8>
 80083e6:	230c      	movs	r3, #12
 80083e8:	6033      	str	r3, [r6, #0]
 80083ea:	4630      	mov	r0, r6
 80083ec:	f000 f80c 	bl	8008408 <__malloc_unlock>
 80083f0:	e794      	b.n	800831c <_malloc_r+0x20>
 80083f2:	6005      	str	r5, [r0, #0]
 80083f4:	e7d6      	b.n	80083a4 <_malloc_r+0xa8>
 80083f6:	bf00      	nop
 80083f8:	2000278c 	.word	0x2000278c

080083fc <__malloc_lock>:
 80083fc:	4801      	ldr	r0, [pc, #4]	@ (8008404 <__malloc_lock+0x8>)
 80083fe:	f7ff bf01 	b.w	8008204 <__retarget_lock_acquire_recursive>
 8008402:	bf00      	nop
 8008404:	20002784 	.word	0x20002784

08008408 <__malloc_unlock>:
 8008408:	4801      	ldr	r0, [pc, #4]	@ (8008410 <__malloc_unlock+0x8>)
 800840a:	f7ff befc 	b.w	8008206 <__retarget_lock_release_recursive>
 800840e:	bf00      	nop
 8008410:	20002784 	.word	0x20002784

08008414 <__ssputs_r>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	688e      	ldr	r6, [r1, #8]
 800841a:	461f      	mov	r7, r3
 800841c:	42be      	cmp	r6, r7
 800841e:	680b      	ldr	r3, [r1, #0]
 8008420:	4682      	mov	sl, r0
 8008422:	460c      	mov	r4, r1
 8008424:	4690      	mov	r8, r2
 8008426:	d82d      	bhi.n	8008484 <__ssputs_r+0x70>
 8008428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800842c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008430:	d026      	beq.n	8008480 <__ssputs_r+0x6c>
 8008432:	6965      	ldr	r5, [r4, #20]
 8008434:	6909      	ldr	r1, [r1, #16]
 8008436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800843a:	eba3 0901 	sub.w	r9, r3, r1
 800843e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008442:	1c7b      	adds	r3, r7, #1
 8008444:	444b      	add	r3, r9
 8008446:	106d      	asrs	r5, r5, #1
 8008448:	429d      	cmp	r5, r3
 800844a:	bf38      	it	cc
 800844c:	461d      	movcc	r5, r3
 800844e:	0553      	lsls	r3, r2, #21
 8008450:	d527      	bpl.n	80084a2 <__ssputs_r+0x8e>
 8008452:	4629      	mov	r1, r5
 8008454:	f7ff ff52 	bl	80082fc <_malloc_r>
 8008458:	4606      	mov	r6, r0
 800845a:	b360      	cbz	r0, 80084b6 <__ssputs_r+0xa2>
 800845c:	6921      	ldr	r1, [r4, #16]
 800845e:	464a      	mov	r2, r9
 8008460:	f7ff fed2 	bl	8008208 <memcpy>
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800846a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	6126      	str	r6, [r4, #16]
 8008472:	6165      	str	r5, [r4, #20]
 8008474:	444e      	add	r6, r9
 8008476:	eba5 0509 	sub.w	r5, r5, r9
 800847a:	6026      	str	r6, [r4, #0]
 800847c:	60a5      	str	r5, [r4, #8]
 800847e:	463e      	mov	r6, r7
 8008480:	42be      	cmp	r6, r7
 8008482:	d900      	bls.n	8008486 <__ssputs_r+0x72>
 8008484:	463e      	mov	r6, r7
 8008486:	6820      	ldr	r0, [r4, #0]
 8008488:	4632      	mov	r2, r6
 800848a:	4641      	mov	r1, r8
 800848c:	f000 faa8 	bl	80089e0 <memmove>
 8008490:	68a3      	ldr	r3, [r4, #8]
 8008492:	1b9b      	subs	r3, r3, r6
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	4433      	add	r3, r6
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	2000      	movs	r0, #0
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	462a      	mov	r2, r5
 80084a4:	f000 fac6 	bl	8008a34 <_realloc_r>
 80084a8:	4606      	mov	r6, r0
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d1e0      	bne.n	8008470 <__ssputs_r+0x5c>
 80084ae:	6921      	ldr	r1, [r4, #16]
 80084b0:	4650      	mov	r0, sl
 80084b2:	f7ff feb7 	bl	8008224 <_free_r>
 80084b6:	230c      	movs	r3, #12
 80084b8:	f8ca 3000 	str.w	r3, [sl]
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	e7e9      	b.n	800849e <__ssputs_r+0x8a>
	...

080084cc <_svfiprintf_r>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	4698      	mov	r8, r3
 80084d2:	898b      	ldrh	r3, [r1, #12]
 80084d4:	061b      	lsls	r3, r3, #24
 80084d6:	b09d      	sub	sp, #116	@ 0x74
 80084d8:	4607      	mov	r7, r0
 80084da:	460d      	mov	r5, r1
 80084dc:	4614      	mov	r4, r2
 80084de:	d510      	bpl.n	8008502 <_svfiprintf_r+0x36>
 80084e0:	690b      	ldr	r3, [r1, #16]
 80084e2:	b973      	cbnz	r3, 8008502 <_svfiprintf_r+0x36>
 80084e4:	2140      	movs	r1, #64	@ 0x40
 80084e6:	f7ff ff09 	bl	80082fc <_malloc_r>
 80084ea:	6028      	str	r0, [r5, #0]
 80084ec:	6128      	str	r0, [r5, #16]
 80084ee:	b930      	cbnz	r0, 80084fe <_svfiprintf_r+0x32>
 80084f0:	230c      	movs	r3, #12
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	b01d      	add	sp, #116	@ 0x74
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	2340      	movs	r3, #64	@ 0x40
 8008500:	616b      	str	r3, [r5, #20]
 8008502:	2300      	movs	r3, #0
 8008504:	9309      	str	r3, [sp, #36]	@ 0x24
 8008506:	2320      	movs	r3, #32
 8008508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800850c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008510:	2330      	movs	r3, #48	@ 0x30
 8008512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086b0 <_svfiprintf_r+0x1e4>
 8008516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800851a:	f04f 0901 	mov.w	r9, #1
 800851e:	4623      	mov	r3, r4
 8008520:	469a      	mov	sl, r3
 8008522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008526:	b10a      	cbz	r2, 800852c <_svfiprintf_r+0x60>
 8008528:	2a25      	cmp	r2, #37	@ 0x25
 800852a:	d1f9      	bne.n	8008520 <_svfiprintf_r+0x54>
 800852c:	ebba 0b04 	subs.w	fp, sl, r4
 8008530:	d00b      	beq.n	800854a <_svfiprintf_r+0x7e>
 8008532:	465b      	mov	r3, fp
 8008534:	4622      	mov	r2, r4
 8008536:	4629      	mov	r1, r5
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ff6b 	bl	8008414 <__ssputs_r>
 800853e:	3001      	adds	r0, #1
 8008540:	f000 80a7 	beq.w	8008692 <_svfiprintf_r+0x1c6>
 8008544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008546:	445a      	add	r2, fp
 8008548:	9209      	str	r2, [sp, #36]	@ 0x24
 800854a:	f89a 3000 	ldrb.w	r3, [sl]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 809f 	beq.w	8008692 <_svfiprintf_r+0x1c6>
 8008554:	2300      	movs	r3, #0
 8008556:	f04f 32ff 	mov.w	r2, #4294967295
 800855a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800855e:	f10a 0a01 	add.w	sl, sl, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	9307      	str	r3, [sp, #28]
 8008566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800856a:	931a      	str	r3, [sp, #104]	@ 0x68
 800856c:	4654      	mov	r4, sl
 800856e:	2205      	movs	r2, #5
 8008570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008574:	484e      	ldr	r0, [pc, #312]	@ (80086b0 <_svfiprintf_r+0x1e4>)
 8008576:	f7f7 fe33 	bl	80001e0 <memchr>
 800857a:	9a04      	ldr	r2, [sp, #16]
 800857c:	b9d8      	cbnz	r0, 80085b6 <_svfiprintf_r+0xea>
 800857e:	06d0      	lsls	r0, r2, #27
 8008580:	bf44      	itt	mi
 8008582:	2320      	movmi	r3, #32
 8008584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008588:	0711      	lsls	r1, r2, #28
 800858a:	bf44      	itt	mi
 800858c:	232b      	movmi	r3, #43	@ 0x2b
 800858e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008592:	f89a 3000 	ldrb.w	r3, [sl]
 8008596:	2b2a      	cmp	r3, #42	@ 0x2a
 8008598:	d015      	beq.n	80085c6 <_svfiprintf_r+0xfa>
 800859a:	9a07      	ldr	r2, [sp, #28]
 800859c:	4654      	mov	r4, sl
 800859e:	2000      	movs	r0, #0
 80085a0:	f04f 0c0a 	mov.w	ip, #10
 80085a4:	4621      	mov	r1, r4
 80085a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085aa:	3b30      	subs	r3, #48	@ 0x30
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	d94b      	bls.n	8008648 <_svfiprintf_r+0x17c>
 80085b0:	b1b0      	cbz	r0, 80085e0 <_svfiprintf_r+0x114>
 80085b2:	9207      	str	r2, [sp, #28]
 80085b4:	e014      	b.n	80085e0 <_svfiprintf_r+0x114>
 80085b6:	eba0 0308 	sub.w	r3, r0, r8
 80085ba:	fa09 f303 	lsl.w	r3, r9, r3
 80085be:	4313      	orrs	r3, r2
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	46a2      	mov	sl, r4
 80085c4:	e7d2      	b.n	800856c <_svfiprintf_r+0xa0>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	1d19      	adds	r1, r3, #4
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	9103      	str	r1, [sp, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bfbb      	ittet	lt
 80085d2:	425b      	neglt	r3, r3
 80085d4:	f042 0202 	orrlt.w	r2, r2, #2
 80085d8:	9307      	strge	r3, [sp, #28]
 80085da:	9307      	strlt	r3, [sp, #28]
 80085dc:	bfb8      	it	lt
 80085de:	9204      	strlt	r2, [sp, #16]
 80085e0:	7823      	ldrb	r3, [r4, #0]
 80085e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085e4:	d10a      	bne.n	80085fc <_svfiprintf_r+0x130>
 80085e6:	7863      	ldrb	r3, [r4, #1]
 80085e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ea:	d132      	bne.n	8008652 <_svfiprintf_r+0x186>
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	1d1a      	adds	r2, r3, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	9203      	str	r2, [sp, #12]
 80085f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085f8:	3402      	adds	r4, #2
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086c0 <_svfiprintf_r+0x1f4>
 8008600:	7821      	ldrb	r1, [r4, #0]
 8008602:	2203      	movs	r2, #3
 8008604:	4650      	mov	r0, sl
 8008606:	f7f7 fdeb 	bl	80001e0 <memchr>
 800860a:	b138      	cbz	r0, 800861c <_svfiprintf_r+0x150>
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	eba0 000a 	sub.w	r0, r0, sl
 8008612:	2240      	movs	r2, #64	@ 0x40
 8008614:	4082      	lsls	r2, r0
 8008616:	4313      	orrs	r3, r2
 8008618:	3401      	adds	r4, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008620:	4824      	ldr	r0, [pc, #144]	@ (80086b4 <_svfiprintf_r+0x1e8>)
 8008622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008626:	2206      	movs	r2, #6
 8008628:	f7f7 fdda 	bl	80001e0 <memchr>
 800862c:	2800      	cmp	r0, #0
 800862e:	d036      	beq.n	800869e <_svfiprintf_r+0x1d2>
 8008630:	4b21      	ldr	r3, [pc, #132]	@ (80086b8 <_svfiprintf_r+0x1ec>)
 8008632:	bb1b      	cbnz	r3, 800867c <_svfiprintf_r+0x1b0>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	3307      	adds	r3, #7
 8008638:	f023 0307 	bic.w	r3, r3, #7
 800863c:	3308      	adds	r3, #8
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008642:	4433      	add	r3, r6
 8008644:	9309      	str	r3, [sp, #36]	@ 0x24
 8008646:	e76a      	b.n	800851e <_svfiprintf_r+0x52>
 8008648:	fb0c 3202 	mla	r2, ip, r2, r3
 800864c:	460c      	mov	r4, r1
 800864e:	2001      	movs	r0, #1
 8008650:	e7a8      	b.n	80085a4 <_svfiprintf_r+0xd8>
 8008652:	2300      	movs	r3, #0
 8008654:	3401      	adds	r4, #1
 8008656:	9305      	str	r3, [sp, #20]
 8008658:	4619      	mov	r1, r3
 800865a:	f04f 0c0a 	mov.w	ip, #10
 800865e:	4620      	mov	r0, r4
 8008660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008664:	3a30      	subs	r2, #48	@ 0x30
 8008666:	2a09      	cmp	r2, #9
 8008668:	d903      	bls.n	8008672 <_svfiprintf_r+0x1a6>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0c6      	beq.n	80085fc <_svfiprintf_r+0x130>
 800866e:	9105      	str	r1, [sp, #20]
 8008670:	e7c4      	b.n	80085fc <_svfiprintf_r+0x130>
 8008672:	fb0c 2101 	mla	r1, ip, r1, r2
 8008676:	4604      	mov	r4, r0
 8008678:	2301      	movs	r3, #1
 800867a:	e7f0      	b.n	800865e <_svfiprintf_r+0x192>
 800867c:	ab03      	add	r3, sp, #12
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	462a      	mov	r2, r5
 8008682:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <_svfiprintf_r+0x1f0>)
 8008684:	a904      	add	r1, sp, #16
 8008686:	4638      	mov	r0, r7
 8008688:	f3af 8000 	nop.w
 800868c:	1c42      	adds	r2, r0, #1
 800868e:	4606      	mov	r6, r0
 8008690:	d1d6      	bne.n	8008640 <_svfiprintf_r+0x174>
 8008692:	89ab      	ldrh	r3, [r5, #12]
 8008694:	065b      	lsls	r3, r3, #25
 8008696:	f53f af2d 	bmi.w	80084f4 <_svfiprintf_r+0x28>
 800869a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800869c:	e72c      	b.n	80084f8 <_svfiprintf_r+0x2c>
 800869e:	ab03      	add	r3, sp, #12
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	462a      	mov	r2, r5
 80086a4:	4b05      	ldr	r3, [pc, #20]	@ (80086bc <_svfiprintf_r+0x1f0>)
 80086a6:	a904      	add	r1, sp, #16
 80086a8:	4638      	mov	r0, r7
 80086aa:	f000 f879 	bl	80087a0 <_printf_i>
 80086ae:	e7ed      	b.n	800868c <_svfiprintf_r+0x1c0>
 80086b0:	08008e00 	.word	0x08008e00
 80086b4:	08008e0a 	.word	0x08008e0a
 80086b8:	00000000 	.word	0x00000000
 80086bc:	08008415 	.word	0x08008415
 80086c0:	08008e06 	.word	0x08008e06

080086c4 <_printf_common>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	4616      	mov	r6, r2
 80086ca:	4698      	mov	r8, r3
 80086cc:	688a      	ldr	r2, [r1, #8]
 80086ce:	690b      	ldr	r3, [r1, #16]
 80086d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bfb8      	it	lt
 80086d8:	4613      	movlt	r3, r2
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086e0:	4607      	mov	r7, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	b10a      	cbz	r2, 80086ea <_printf_common+0x26>
 80086e6:	3301      	adds	r3, #1
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	0699      	lsls	r1, r3, #26
 80086ee:	bf42      	ittt	mi
 80086f0:	6833      	ldrmi	r3, [r6, #0]
 80086f2:	3302      	addmi	r3, #2
 80086f4:	6033      	strmi	r3, [r6, #0]
 80086f6:	6825      	ldr	r5, [r4, #0]
 80086f8:	f015 0506 	ands.w	r5, r5, #6
 80086fc:	d106      	bne.n	800870c <_printf_common+0x48>
 80086fe:	f104 0a19 	add.w	sl, r4, #25
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	6832      	ldr	r2, [r6, #0]
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	42ab      	cmp	r3, r5
 800870a:	dc26      	bgt.n	800875a <_printf_common+0x96>
 800870c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	3b00      	subs	r3, #0
 8008714:	bf18      	it	ne
 8008716:	2301      	movne	r3, #1
 8008718:	0692      	lsls	r2, r2, #26
 800871a:	d42b      	bmi.n	8008774 <_printf_common+0xb0>
 800871c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008720:	4641      	mov	r1, r8
 8008722:	4638      	mov	r0, r7
 8008724:	47c8      	blx	r9
 8008726:	3001      	adds	r0, #1
 8008728:	d01e      	beq.n	8008768 <_printf_common+0xa4>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	f003 0306 	and.w	r3, r3, #6
 8008732:	2b04      	cmp	r3, #4
 8008734:	bf02      	ittt	eq
 8008736:	68e5      	ldreq	r5, [r4, #12]
 8008738:	6833      	ldreq	r3, [r6, #0]
 800873a:	1aed      	subeq	r5, r5, r3
 800873c:	68a3      	ldr	r3, [r4, #8]
 800873e:	bf0c      	ite	eq
 8008740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008744:	2500      	movne	r5, #0
 8008746:	4293      	cmp	r3, r2
 8008748:	bfc4      	itt	gt
 800874a:	1a9b      	subgt	r3, r3, r2
 800874c:	18ed      	addgt	r5, r5, r3
 800874e:	2600      	movs	r6, #0
 8008750:	341a      	adds	r4, #26
 8008752:	42b5      	cmp	r5, r6
 8008754:	d11a      	bne.n	800878c <_printf_common+0xc8>
 8008756:	2000      	movs	r0, #0
 8008758:	e008      	b.n	800876c <_printf_common+0xa8>
 800875a:	2301      	movs	r3, #1
 800875c:	4652      	mov	r2, sl
 800875e:	4641      	mov	r1, r8
 8008760:	4638      	mov	r0, r7
 8008762:	47c8      	blx	r9
 8008764:	3001      	adds	r0, #1
 8008766:	d103      	bne.n	8008770 <_printf_common+0xac>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008770:	3501      	adds	r5, #1
 8008772:	e7c6      	b.n	8008702 <_printf_common+0x3e>
 8008774:	18e1      	adds	r1, r4, r3
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	2030      	movs	r0, #48	@ 0x30
 800877a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800877e:	4422      	add	r2, r4
 8008780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008788:	3302      	adds	r3, #2
 800878a:	e7c7      	b.n	800871c <_printf_common+0x58>
 800878c:	2301      	movs	r3, #1
 800878e:	4622      	mov	r2, r4
 8008790:	4641      	mov	r1, r8
 8008792:	4638      	mov	r0, r7
 8008794:	47c8      	blx	r9
 8008796:	3001      	adds	r0, #1
 8008798:	d0e6      	beq.n	8008768 <_printf_common+0xa4>
 800879a:	3601      	adds	r6, #1
 800879c:	e7d9      	b.n	8008752 <_printf_common+0x8e>
	...

080087a0 <_printf_i>:
 80087a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	7e0f      	ldrb	r7, [r1, #24]
 80087a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087a8:	2f78      	cmp	r7, #120	@ 0x78
 80087aa:	4691      	mov	r9, r2
 80087ac:	4680      	mov	r8, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	469a      	mov	sl, r3
 80087b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087b6:	d807      	bhi.n	80087c8 <_printf_i+0x28>
 80087b8:	2f62      	cmp	r7, #98	@ 0x62
 80087ba:	d80a      	bhi.n	80087d2 <_printf_i+0x32>
 80087bc:	2f00      	cmp	r7, #0
 80087be:	f000 80d2 	beq.w	8008966 <_printf_i+0x1c6>
 80087c2:	2f58      	cmp	r7, #88	@ 0x58
 80087c4:	f000 80b9 	beq.w	800893a <_printf_i+0x19a>
 80087c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087d0:	e03a      	b.n	8008848 <_printf_i+0xa8>
 80087d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087d6:	2b15      	cmp	r3, #21
 80087d8:	d8f6      	bhi.n	80087c8 <_printf_i+0x28>
 80087da:	a101      	add	r1, pc, #4	@ (adr r1, 80087e0 <_printf_i+0x40>)
 80087dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e0:	08008839 	.word	0x08008839
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	080087c9 	.word	0x080087c9
 80087ec:	080087c9 	.word	0x080087c9
 80087f0:	080087c9 	.word	0x080087c9
 80087f4:	080087c9 	.word	0x080087c9
 80087f8:	0800884d 	.word	0x0800884d
 80087fc:	080087c9 	.word	0x080087c9
 8008800:	080087c9 	.word	0x080087c9
 8008804:	080087c9 	.word	0x080087c9
 8008808:	080087c9 	.word	0x080087c9
 800880c:	0800894d 	.word	0x0800894d
 8008810:	08008877 	.word	0x08008877
 8008814:	08008907 	.word	0x08008907
 8008818:	080087c9 	.word	0x080087c9
 800881c:	080087c9 	.word	0x080087c9
 8008820:	0800896f 	.word	0x0800896f
 8008824:	080087c9 	.word	0x080087c9
 8008828:	08008877 	.word	0x08008877
 800882c:	080087c9 	.word	0x080087c9
 8008830:	080087c9 	.word	0x080087c9
 8008834:	0800890f 	.word	0x0800890f
 8008838:	6833      	ldr	r3, [r6, #0]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6032      	str	r2, [r6, #0]
 8008840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008848:	2301      	movs	r3, #1
 800884a:	e09d      	b.n	8008988 <_printf_i+0x1e8>
 800884c:	6833      	ldr	r3, [r6, #0]
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	1d19      	adds	r1, r3, #4
 8008852:	6031      	str	r1, [r6, #0]
 8008854:	0606      	lsls	r6, r0, #24
 8008856:	d501      	bpl.n	800885c <_printf_i+0xbc>
 8008858:	681d      	ldr	r5, [r3, #0]
 800885a:	e003      	b.n	8008864 <_printf_i+0xc4>
 800885c:	0645      	lsls	r5, r0, #25
 800885e:	d5fb      	bpl.n	8008858 <_printf_i+0xb8>
 8008860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008864:	2d00      	cmp	r5, #0
 8008866:	da03      	bge.n	8008870 <_printf_i+0xd0>
 8008868:	232d      	movs	r3, #45	@ 0x2d
 800886a:	426d      	negs	r5, r5
 800886c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008870:	4859      	ldr	r0, [pc, #356]	@ (80089d8 <_printf_i+0x238>)
 8008872:	230a      	movs	r3, #10
 8008874:	e011      	b.n	800889a <_printf_i+0xfa>
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	6833      	ldr	r3, [r6, #0]
 800887a:	0608      	lsls	r0, r1, #24
 800887c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008880:	d402      	bmi.n	8008888 <_printf_i+0xe8>
 8008882:	0649      	lsls	r1, r1, #25
 8008884:	bf48      	it	mi
 8008886:	b2ad      	uxthmi	r5, r5
 8008888:	2f6f      	cmp	r7, #111	@ 0x6f
 800888a:	4853      	ldr	r0, [pc, #332]	@ (80089d8 <_printf_i+0x238>)
 800888c:	6033      	str	r3, [r6, #0]
 800888e:	bf14      	ite	ne
 8008890:	230a      	movne	r3, #10
 8008892:	2308      	moveq	r3, #8
 8008894:	2100      	movs	r1, #0
 8008896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800889a:	6866      	ldr	r6, [r4, #4]
 800889c:	60a6      	str	r6, [r4, #8]
 800889e:	2e00      	cmp	r6, #0
 80088a0:	bfa2      	ittt	ge
 80088a2:	6821      	ldrge	r1, [r4, #0]
 80088a4:	f021 0104 	bicge.w	r1, r1, #4
 80088a8:	6021      	strge	r1, [r4, #0]
 80088aa:	b90d      	cbnz	r5, 80088b0 <_printf_i+0x110>
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	d04b      	beq.n	8008948 <_printf_i+0x1a8>
 80088b0:	4616      	mov	r6, r2
 80088b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80088b6:	fb03 5711 	mls	r7, r3, r1, r5
 80088ba:	5dc7      	ldrb	r7, [r0, r7]
 80088bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088c0:	462f      	mov	r7, r5
 80088c2:	42bb      	cmp	r3, r7
 80088c4:	460d      	mov	r5, r1
 80088c6:	d9f4      	bls.n	80088b2 <_printf_i+0x112>
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d10b      	bne.n	80088e4 <_printf_i+0x144>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	07df      	lsls	r7, r3, #31
 80088d0:	d508      	bpl.n	80088e4 <_printf_i+0x144>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	6861      	ldr	r1, [r4, #4]
 80088d6:	4299      	cmp	r1, r3
 80088d8:	bfde      	ittt	le
 80088da:	2330      	movle	r3, #48	@ 0x30
 80088dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088e4:	1b92      	subs	r2, r2, r6
 80088e6:	6122      	str	r2, [r4, #16]
 80088e8:	f8cd a000 	str.w	sl, [sp]
 80088ec:	464b      	mov	r3, r9
 80088ee:	aa03      	add	r2, sp, #12
 80088f0:	4621      	mov	r1, r4
 80088f2:	4640      	mov	r0, r8
 80088f4:	f7ff fee6 	bl	80086c4 <_printf_common>
 80088f8:	3001      	adds	r0, #1
 80088fa:	d14a      	bne.n	8008992 <_printf_i+0x1f2>
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	b004      	add	sp, #16
 8008902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f043 0320 	orr.w	r3, r3, #32
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	4833      	ldr	r0, [pc, #204]	@ (80089dc <_printf_i+0x23c>)
 8008910:	2778      	movs	r7, #120	@ 0x78
 8008912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	6831      	ldr	r1, [r6, #0]
 800891a:	061f      	lsls	r7, r3, #24
 800891c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008920:	d402      	bmi.n	8008928 <_printf_i+0x188>
 8008922:	065f      	lsls	r7, r3, #25
 8008924:	bf48      	it	mi
 8008926:	b2ad      	uxthmi	r5, r5
 8008928:	6031      	str	r1, [r6, #0]
 800892a:	07d9      	lsls	r1, r3, #31
 800892c:	bf44      	itt	mi
 800892e:	f043 0320 	orrmi.w	r3, r3, #32
 8008932:	6023      	strmi	r3, [r4, #0]
 8008934:	b11d      	cbz	r5, 800893e <_printf_i+0x19e>
 8008936:	2310      	movs	r3, #16
 8008938:	e7ac      	b.n	8008894 <_printf_i+0xf4>
 800893a:	4827      	ldr	r0, [pc, #156]	@ (80089d8 <_printf_i+0x238>)
 800893c:	e7e9      	b.n	8008912 <_printf_i+0x172>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f023 0320 	bic.w	r3, r3, #32
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	e7f6      	b.n	8008936 <_printf_i+0x196>
 8008948:	4616      	mov	r6, r2
 800894a:	e7bd      	b.n	80088c8 <_printf_i+0x128>
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	6825      	ldr	r5, [r4, #0]
 8008950:	6961      	ldr	r1, [r4, #20]
 8008952:	1d18      	adds	r0, r3, #4
 8008954:	6030      	str	r0, [r6, #0]
 8008956:	062e      	lsls	r6, r5, #24
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	d501      	bpl.n	8008960 <_printf_i+0x1c0>
 800895c:	6019      	str	r1, [r3, #0]
 800895e:	e002      	b.n	8008966 <_printf_i+0x1c6>
 8008960:	0668      	lsls	r0, r5, #25
 8008962:	d5fb      	bpl.n	800895c <_printf_i+0x1bc>
 8008964:	8019      	strh	r1, [r3, #0]
 8008966:	2300      	movs	r3, #0
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	4616      	mov	r6, r2
 800896c:	e7bc      	b.n	80088e8 <_printf_i+0x148>
 800896e:	6833      	ldr	r3, [r6, #0]
 8008970:	1d1a      	adds	r2, r3, #4
 8008972:	6032      	str	r2, [r6, #0]
 8008974:	681e      	ldr	r6, [r3, #0]
 8008976:	6862      	ldr	r2, [r4, #4]
 8008978:	2100      	movs	r1, #0
 800897a:	4630      	mov	r0, r6
 800897c:	f7f7 fc30 	bl	80001e0 <memchr>
 8008980:	b108      	cbz	r0, 8008986 <_printf_i+0x1e6>
 8008982:	1b80      	subs	r0, r0, r6
 8008984:	6060      	str	r0, [r4, #4]
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	6123      	str	r3, [r4, #16]
 800898a:	2300      	movs	r3, #0
 800898c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008990:	e7aa      	b.n	80088e8 <_printf_i+0x148>
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d0ad      	beq.n	80088fc <_printf_i+0x15c>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	079b      	lsls	r3, r3, #30
 80089a4:	d413      	bmi.n	80089ce <_printf_i+0x22e>
 80089a6:	68e0      	ldr	r0, [r4, #12]
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	4298      	cmp	r0, r3
 80089ac:	bfb8      	it	lt
 80089ae:	4618      	movlt	r0, r3
 80089b0:	e7a6      	b.n	8008900 <_printf_i+0x160>
 80089b2:	2301      	movs	r3, #1
 80089b4:	4632      	mov	r2, r6
 80089b6:	4649      	mov	r1, r9
 80089b8:	4640      	mov	r0, r8
 80089ba:	47d0      	blx	sl
 80089bc:	3001      	adds	r0, #1
 80089be:	d09d      	beq.n	80088fc <_printf_i+0x15c>
 80089c0:	3501      	adds	r5, #1
 80089c2:	68e3      	ldr	r3, [r4, #12]
 80089c4:	9903      	ldr	r1, [sp, #12]
 80089c6:	1a5b      	subs	r3, r3, r1
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	dcf2      	bgt.n	80089b2 <_printf_i+0x212>
 80089cc:	e7eb      	b.n	80089a6 <_printf_i+0x206>
 80089ce:	2500      	movs	r5, #0
 80089d0:	f104 0619 	add.w	r6, r4, #25
 80089d4:	e7f5      	b.n	80089c2 <_printf_i+0x222>
 80089d6:	bf00      	nop
 80089d8:	08008e11 	.word	0x08008e11
 80089dc:	08008e22 	.word	0x08008e22

080089e0 <memmove>:
 80089e0:	4288      	cmp	r0, r1
 80089e2:	b510      	push	{r4, lr}
 80089e4:	eb01 0402 	add.w	r4, r1, r2
 80089e8:	d902      	bls.n	80089f0 <memmove+0x10>
 80089ea:	4284      	cmp	r4, r0
 80089ec:	4623      	mov	r3, r4
 80089ee:	d807      	bhi.n	8008a00 <memmove+0x20>
 80089f0:	1e43      	subs	r3, r0, #1
 80089f2:	42a1      	cmp	r1, r4
 80089f4:	d008      	beq.n	8008a08 <memmove+0x28>
 80089f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089fe:	e7f8      	b.n	80089f2 <memmove+0x12>
 8008a00:	4402      	add	r2, r0
 8008a02:	4601      	mov	r1, r0
 8008a04:	428a      	cmp	r2, r1
 8008a06:	d100      	bne.n	8008a0a <memmove+0x2a>
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a12:	e7f7      	b.n	8008a04 <memmove+0x24>

08008a14 <_sbrk_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4d06      	ldr	r5, [pc, #24]	@ (8008a30 <_sbrk_r+0x1c>)
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	602b      	str	r3, [r5, #0]
 8008a20:	f7f9 f976 	bl	8001d10 <_sbrk>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_sbrk_r+0x1a>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_sbrk_r+0x1a>
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	20002780 	.word	0x20002780

08008a34 <_realloc_r>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4615      	mov	r5, r2
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	b921      	cbnz	r1, 8008a4a <_realloc_r+0x16>
 8008a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a44:	4611      	mov	r1, r2
 8008a46:	f7ff bc59 	b.w	80082fc <_malloc_r>
 8008a4a:	b92a      	cbnz	r2, 8008a58 <_realloc_r+0x24>
 8008a4c:	f7ff fbea 	bl	8008224 <_free_r>
 8008a50:	2400      	movs	r4, #0
 8008a52:	4620      	mov	r0, r4
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	f000 f81a 	bl	8008a90 <_malloc_usable_size_r>
 8008a5c:	4285      	cmp	r5, r0
 8008a5e:	4606      	mov	r6, r0
 8008a60:	d802      	bhi.n	8008a68 <_realloc_r+0x34>
 8008a62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a66:	d8f4      	bhi.n	8008a52 <_realloc_r+0x1e>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7ff fc46 	bl	80082fc <_malloc_r>
 8008a70:	4607      	mov	r7, r0
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d0ec      	beq.n	8008a50 <_realloc_r+0x1c>
 8008a76:	42b5      	cmp	r5, r6
 8008a78:	462a      	mov	r2, r5
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	bf28      	it	cs
 8008a7e:	4632      	movcs	r2, r6
 8008a80:	f7ff fbc2 	bl	8008208 <memcpy>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4640      	mov	r0, r8
 8008a88:	f7ff fbcc 	bl	8008224 <_free_r>
 8008a8c:	463c      	mov	r4, r7
 8008a8e:	e7e0      	b.n	8008a52 <_realloc_r+0x1e>

08008a90 <_malloc_usable_size_r>:
 8008a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a94:	1f18      	subs	r0, r3, #4
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfbc      	itt	lt
 8008a9a:	580b      	ldrlt	r3, [r1, r0]
 8008a9c:	18c0      	addlt	r0, r0, r3
 8008a9e:	4770      	bx	lr

08008aa0 <_init>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr

08008aac <_fini>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr

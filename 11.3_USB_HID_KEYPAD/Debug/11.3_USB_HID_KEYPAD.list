
11.3_USB_HID_KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003df4  08003df4  00004df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea8  08003ea8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00004ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003eb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08003f18  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003f18  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d5b  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e9  00000000  00000000  0000ddeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005aa  00000000  00000000  0000fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146ef  00000000  00000000  000102f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1b8  00000000  00000000  000249e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079540  00000000  00000000  0002eb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a80d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d4  00000000  00000000  000a811c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000aa1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ddc 	.word	0x08003ddc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003ddc 	.word	0x08003ddc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fcf8 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f822 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f8c2 	bl	8000650 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004cc:	f000 f890 	bl	80005f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	0219      	lsls	r1, r3, #8
 80004d4:	23a0      	movs	r3, #160	@ 0xa0
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2201      	movs	r2, #1
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 ffcb 	bl	8001476 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <main+0x4c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	2108      	movs	r1, #8
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 ffc5 	bl	8001476 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <main+0x4c>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	2110      	movs	r1, #16
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 ffbf 	bl	8001476 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80004f8:	4b03      	ldr	r3, [pc, #12]	@ (8000508 <main+0x4c>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	2120      	movs	r1, #32
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 ffb9 	bl	8001476 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	e7fd      	b.n	8000504 <main+0x48>
 8000508:	50000400 	.word	0x50000400

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b09d      	sub	sp, #116	@ 0x74
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	2438      	movs	r4, #56	@ 0x38
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	2338      	movs	r3, #56	@ 0x38
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fe1b 	bl	8003158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000522:	2324      	movs	r3, #36	@ 0x24
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	0018      	movs	r0, r3
 8000528:	2314      	movs	r3, #20
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f002 fe13 	bl	8003158 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000532:	003b      	movs	r3, r7
 8000534:	0018      	movs	r0, r3
 8000536:	2324      	movs	r3, #36	@ 0x24
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f002 fe0c 	bl	8003158 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <SystemClock_Config+0xdc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a29      	ldr	r2, [pc, #164]	@ (80005ec <SystemClock_Config+0xe0>)
 8000546:	401a      	ands	r2, r3
 8000548:	4b27      	ldr	r3, [pc, #156]	@ (80005e8 <SystemClock_Config+0xdc>)
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	0109      	lsls	r1, r1, #4
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	0021      	movs	r1, r4
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2202      	movs	r2, #2
 8000558:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2201      	movs	r2, #1
 800055e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2210      	movs	r2, #16
 8000564:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2202      	movs	r2, #2
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	02d2      	lsls	r2, r2, #11
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2280      	movs	r2, #128	@ 0x80
 800057e:	03d2      	lsls	r2, r2, #15
 8000580:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	187b      	adds	r3, r7, r1
 8000584:	0018      	movs	r0, r3
 8000586:	f000 ffaf 	bl	80014e8 <HAL_RCC_OscConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800058e:	f000 fb3f 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	2124      	movs	r1, #36	@ 0x24
 8000594:	187b      	adds	r3, r7, r1
 8000596:	220f      	movs	r2, #15
 8000598:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2203      	movs	r2, #3
 800059e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2101      	movs	r1, #1
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 fb5a 	bl	8001c70 <HAL_RCC_ClockConfig>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005c0:	f000 fb26 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2201      	movs	r2, #1
 80005c8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	003b      	movs	r3, r7
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fd70 	bl	80020b8 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005dc:	f000 fb18 	bl	8000c10 <Error_Handler>
  }
}
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b01d      	add	sp, #116	@ 0x74
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	40007000 	.word	0x40007000
 80005ec:	ffffe7ff 	.word	0xffffe7ff

080005f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 80005f6:	4a15      	ldr	r2, [pc, #84]	@ (800064c <MX_USART1_UART_Init+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fa:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 80005fc:	22e1      	movs	r2, #225	@ 0xe1
 80005fe:	0252      	lsls	r2, r2, #9
 8000600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000632:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <MX_USART1_UART_Init+0x58>)
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fecd 	bl	80023d4 <HAL_UART_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 fae7 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000084 	.word	0x20000084
 800064c:	40013800 	.word	0x40013800

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b089      	sub	sp, #36	@ 0x24
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	240c      	movs	r4, #12
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	2314      	movs	r3, #20
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f002 fd79 	bl	8003158 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <MX_GPIO_Init+0xec>)
 8000668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800066a:	4b34      	ldr	r3, [pc, #208]	@ (800073c <MX_GPIO_Init+0xec>)
 800066c:	2102      	movs	r1, #2
 800066e:	430a      	orrs	r2, r1
 8000670:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000672:	4b32      	ldr	r3, [pc, #200]	@ (800073c <MX_GPIO_Init+0xec>)
 8000674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000676:	2202      	movs	r2, #2
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <MX_GPIO_Init+0xec>)
 8000680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000682:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <MX_GPIO_Init+0xec>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	62da      	str	r2, [r3, #44]	@ 0x2c
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <MX_GPIO_Init+0xec>)
 800068c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_C1_OUTPUT_GPIO_Port, BSP_C1_OUTPUT_Pin, GPIO_PIN_RESET);
 8000696:	2380      	movs	r3, #128	@ 0x80
 8000698:	0219      	lsls	r1, r3, #8
 800069a:	23a0      	movs	r3, #160	@ 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2200      	movs	r2, #0
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fee8 	bl	8001476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BSP_C2_OUTPUT_Pin|BSP_C3_OUTPUT_Pin|BSP_C4_OUTPUT_Pin, GPIO_PIN_RESET);
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <MX_GPIO_Init+0xf0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	2138      	movs	r1, #56	@ 0x38
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fee2 	bl	8001476 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSP_R3_INPUT_Pin BSP_R4_INPUT_Pin BSP_R1_INPUT_Pin BSP_R2_INPUT_Pin */
  GPIO_InitStruct.Pin = BSP_R3_INPUT_Pin|BSP_R4_INPUT_Pin|BSP_R1_INPUT_Pin|BSP_R2_INPUT_Pin;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <MX_GPIO_Init+0xf4>)
 80006b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2288      	movs	r2, #136	@ 0x88
 80006bc:	0352      	lsls	r2, r2, #13
 80006be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <MX_GPIO_Init+0xf0>)
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f000 fd3f 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_C1_OUTPUT_Pin */
  GPIO_InitStruct.Pin = BSP_C1_OUTPUT_Pin;
 80006d2:	0021      	movs	r1, r4
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2280      	movs	r2, #128	@ 0x80
 80006d8:	0212      	lsls	r2, r2, #8
 80006da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	000c      	movs	r4, r1
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2201      	movs	r2, #1
 80006e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_C1_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80006f0:	193a      	adds	r2, r7, r4
 80006f2:	23a0      	movs	r3, #160	@ 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fd29 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : BSP_C2_OUTPUT_Pin BSP_C3_OUTPUT_Pin BSP_C4_OUTPUT_Pin */
  GPIO_InitStruct.Pin = BSP_C2_OUTPUT_Pin|BSP_C3_OUTPUT_Pin|BSP_C4_OUTPUT_Pin;
 80006fe:	0021      	movs	r1, r4
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2238      	movs	r2, #56	@ 0x38
 8000704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2201      	movs	r2, #1
 800070a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	187b      	adds	r3, r7, r1
 800071a:	4a09      	ldr	r2, [pc, #36]	@ (8000740 <MX_GPIO_Init+0xf0>)
 800071c:	0019      	movs	r1, r3
 800071e:	0010      	movs	r0, r2
 8000720:	f000 fd16 	bl	8001150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2007      	movs	r0, #7
 800072a:	f000 fcdf 	bl	80010ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800072e:	2007      	movs	r0, #7
 8000730:	f000 fcf1 	bl	8001116 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b009      	add	sp, #36	@ 0x24
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	50000400 	.word	0x50000400
 8000744:	000060c0 	.word	0x000060c0

08000748 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	0002      	movs	r2, r0
 8000750:	1dbb      	adds	r3, r7, #6
 8000752:	801a      	strh	r2, [r3, #0]
  currentMillis = HAL_GetTick();
 8000754:	f000 fc14 	bl	8000f80 <HAL_GetTick>
 8000758:	0002      	movs	r2, r0
 800075a:	4bbd      	ldr	r3, [pc, #756]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0x308>)
 800075c:	601a      	str	r2, [r3, #0]
  if (currentMillis - previousMillis > 1000) {
 800075e:	4bbc      	ldr	r3, [pc, #752]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0x308>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4bbc      	ldr	r3, [pc, #752]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1ad2      	subs	r2, r2, r3
 8000768:	23fa      	movs	r3, #250	@ 0xfa
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	429a      	cmp	r2, r3
 800076e:	d800      	bhi.n	8000772 <HAL_GPIO_EXTI_Callback+0x2a>
 8000770:	e23e      	b.n	8000bf0 <HAL_GPIO_EXTI_Callback+0x4a8>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_13|GPIO_PIN_14;
 8000772:	4bb9      	ldr	r3, [pc, #740]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x310>)
 8000774:	4ab9      	ldr	r2, [pc, #740]	@ (8000a5c <HAL_GPIO_EXTI_Callback+0x314>)
 8000776:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000778:	4bb7      	ldr	r3, [pc, #732]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x310>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800077e:	4bb6      	ldr	r3, [pc, #728]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x310>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	4bb4      	ldr	r3, [pc, #720]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x310>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 800078a:	4bb3      	ldr	r3, [pc, #716]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0x310>)
 800078c:	4ab4      	ldr	r2, [pc, #720]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 800078e:	0019      	movs	r1, r3
 8000790:	0010      	movs	r0, r2
 8000792:	f000 fcdd 	bl	8001150 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000796:	2380      	movs	r3, #128	@ 0x80
 8000798:	0219      	lsls	r1, r3, #8
 800079a:	23a0      	movs	r3, #160	@ 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2201      	movs	r2, #1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fe68 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80007a6:	4bae      	ldr	r3, [pc, #696]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	2108      	movs	r1, #8
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 fe62 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80007b2:	4bab      	ldr	r3, [pc, #684]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	2110      	movs	r1, #16
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fe5c 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80007be:	4ba8      	ldr	r3, [pc, #672]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	2120      	movs	r1, #32
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fe56 	bl	8001476 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80007ca:	1dbb      	adds	r3, r7, #6
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b40      	cmp	r3, #64	@ 0x40
 80007d0:	d112      	bne.n	80007f8 <HAL_GPIO_EXTI_Callback+0xb0>
 80007d2:	4ba3      	ldr	r3, [pc, #652]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80007d4:	2140      	movs	r1, #64	@ 0x40
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fe30 	bl	800143c <HAL_GPIO_ReadPin>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d00b      	beq.n	80007f8 <HAL_GPIO_EXTI_Callback+0xb0>
    {
      keyPressed = 68; //ASCII value of D
 80007e0:	4ba0      	ldr	r3, [pc, #640]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 80007e2:	2244      	movs	r2, #68	@ 0x44
 80007e4:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 80007e6:	4b9f      	ldr	r3, [pc, #636]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	001a      	movs	r2, r3
 80007ec:	4b9e      	ldr	r3, [pc, #632]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fc55 	bl	80030a0 <iprintf>
 80007f6:	e04b      	b.n	8000890 <HAL_GPIO_EXTI_Callback+0x148>
    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2b80      	cmp	r3, #128	@ 0x80
 80007fe:	d112      	bne.n	8000826 <HAL_GPIO_EXTI_Callback+0xde>
 8000800:	4b97      	ldr	r3, [pc, #604]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000802:	2180      	movs	r1, #128	@ 0x80
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fe19 	bl	800143c <HAL_GPIO_ReadPin>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d00b      	beq.n	8000826 <HAL_GPIO_EXTI_Callback+0xde>
    {
      keyPressed = 67; //ASCII value of C
 800080e:	4b95      	ldr	r3, [pc, #596]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000810:	2243      	movs	r2, #67	@ 0x43
 8000812:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000814:	4b93      	ldr	r3, [pc, #588]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	001a      	movs	r2, r3
 800081a:	4b93      	ldr	r3, [pc, #588]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f002 fc3e 	bl	80030a0 <iprintf>
 8000824:	e034      	b.n	8000890 <HAL_GPIO_EXTI_Callback+0x148>

    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000826:	1dbb      	adds	r3, r7, #6
 8000828:	881a      	ldrh	r2, [r3, #0]
 800082a:	2380      	movs	r3, #128	@ 0x80
 800082c:	019b      	lsls	r3, r3, #6
 800082e:	429a      	cmp	r2, r3
 8000830:	d114      	bne.n	800085c <HAL_GPIO_EXTI_Callback+0x114>
 8000832:	2380      	movs	r3, #128	@ 0x80
 8000834:	019b      	lsls	r3, r3, #6
 8000836:	4a8a      	ldr	r2, [pc, #552]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000838:	0019      	movs	r1, r3
 800083a:	0010      	movs	r0, r2
 800083c:	f000 fdfe 	bl	800143c <HAL_GPIO_ReadPin>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d00b      	beq.n	800085c <HAL_GPIO_EXTI_Callback+0x114>
    {
      keyPressed = 66; //ASCII value of B
 8000844:	4b87      	ldr	r3, [pc, #540]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000846:	2242      	movs	r2, #66	@ 0x42
 8000848:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 800084a:	4b86      	ldr	r3, [pc, #536]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	001a      	movs	r2, r3
 8000850:	4b85      	ldr	r3, [pc, #532]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fc23 	bl	80030a0 <iprintf>
 800085a:	e019      	b.n	8000890 <HAL_GPIO_EXTI_Callback+0x148>

    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 800085c:	1dbb      	adds	r3, r7, #6
 800085e:	881a      	ldrh	r2, [r3, #0]
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	01db      	lsls	r3, r3, #7
 8000864:	429a      	cmp	r2, r3
 8000866:	d113      	bne.n	8000890 <HAL_GPIO_EXTI_Callback+0x148>
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	01db      	lsls	r3, r3, #7
 800086c:	4a7c      	ldr	r2, [pc, #496]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 800086e:	0019      	movs	r1, r3
 8000870:	0010      	movs	r0, r2
 8000872:	f000 fde3 	bl	800143c <HAL_GPIO_ReadPin>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d00a      	beq.n	8000890 <HAL_GPIO_EXTI_Callback+0x148>
    {
      keyPressed = 65; //ASCII value of A
 800087a:	4b7a      	ldr	r3, [pc, #488]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 800087c:	2241      	movs	r2, #65	@ 0x41
 800087e:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000880:	4b78      	ldr	r3, [pc, #480]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	001a      	movs	r2, r3
 8000886:	4b78      	ldr	r3, [pc, #480]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f002 fc08 	bl	80030a0 <iprintf>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	0219      	lsls	r1, r3, #8
 8000894:	23a0      	movs	r3, #160	@ 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2200      	movs	r2, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fdeb 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80008a0:	4b6f      	ldr	r3, [pc, #444]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	2108      	movs	r1, #8
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fde5 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80008ac:	4b6c      	ldr	r3, [pc, #432]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	2110      	movs	r1, #16
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fddf 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80008b8:	4b69      	ldr	r3, [pc, #420]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fdd9 	bl	8001476 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80008c4:	1dbb      	adds	r3, r7, #6
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	2b40      	cmp	r3, #64	@ 0x40
 80008ca:	d112      	bne.n	80008f2 <HAL_GPIO_EXTI_Callback+0x1aa>
 80008cc:	4b64      	ldr	r3, [pc, #400]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80008ce:	2140      	movs	r1, #64	@ 0x40
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fdb3 	bl	800143c <HAL_GPIO_ReadPin>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d00b      	beq.n	80008f2 <HAL_GPIO_EXTI_Callback+0x1aa>
    {
      keyPressed = 35; //ASCII value of #
 80008da:	4b62      	ldr	r3, [pc, #392]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 80008dc:	2223      	movs	r2, #35	@ 0x23
 80008de:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 80008e0:	4b60      	ldr	r3, [pc, #384]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	001a      	movs	r2, r3
 80008e6:	4b60      	ldr	r3, [pc, #384]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 fbd8 	bl	80030a0 <iprintf>
 80008f0:	e04b      	b.n	800098a <HAL_GPIO_EXTI_Callback+0x242>

    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80008f2:	1dbb      	adds	r3, r7, #6
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	2b80      	cmp	r3, #128	@ 0x80
 80008f8:	d112      	bne.n	8000920 <HAL_GPIO_EXTI_Callback+0x1d8>
 80008fa:	4b59      	ldr	r3, [pc, #356]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80008fc:	2180      	movs	r1, #128	@ 0x80
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fd9c 	bl	800143c <HAL_GPIO_ReadPin>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d00b      	beq.n	8000920 <HAL_GPIO_EXTI_Callback+0x1d8>
    {
      keyPressed = 57; //ASCII value of 9
 8000908:	4b56      	ldr	r3, [pc, #344]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 800090a:	2239      	movs	r2, #57	@ 0x39
 800090c:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 800090e:	4b55      	ldr	r3, [pc, #340]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	001a      	movs	r2, r3
 8000914:	4b54      	ldr	r3, [pc, #336]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f002 fbc1 	bl	80030a0 <iprintf>
 800091e:	e034      	b.n	800098a <HAL_GPIO_EXTI_Callback+0x242>

    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	019b      	lsls	r3, r3, #6
 8000928:	429a      	cmp	r2, r3
 800092a:	d114      	bne.n	8000956 <HAL_GPIO_EXTI_Callback+0x20e>
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	019b      	lsls	r3, r3, #6
 8000930:	4a4b      	ldr	r2, [pc, #300]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000932:	0019      	movs	r1, r3
 8000934:	0010      	movs	r0, r2
 8000936:	f000 fd81 	bl	800143c <HAL_GPIO_ReadPin>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d00b      	beq.n	8000956 <HAL_GPIO_EXTI_Callback+0x20e>
    {
      keyPressed = 54; //ASCII value of 6
 800093e:	4b49      	ldr	r3, [pc, #292]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000940:	2236      	movs	r2, #54	@ 0x36
 8000942:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000944:	4b47      	ldr	r3, [pc, #284]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	001a      	movs	r2, r3
 800094a:	4b47      	ldr	r3, [pc, #284]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f002 fba6 	bl	80030a0 <iprintf>
 8000954:	e019      	b.n	800098a <HAL_GPIO_EXTI_Callback+0x242>

    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	881a      	ldrh	r2, [r3, #0]
 800095a:	2380      	movs	r3, #128	@ 0x80
 800095c:	01db      	lsls	r3, r3, #7
 800095e:	429a      	cmp	r2, r3
 8000960:	d113      	bne.n	800098a <HAL_GPIO_EXTI_Callback+0x242>
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	01db      	lsls	r3, r3, #7
 8000966:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000968:	0019      	movs	r1, r3
 800096a:	0010      	movs	r0, r2
 800096c:	f000 fd66 	bl	800143c <HAL_GPIO_ReadPin>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d00a      	beq.n	800098a <HAL_GPIO_EXTI_Callback+0x242>
    {
      keyPressed = 51; //ASCII value of 3
 8000974:	4b3b      	ldr	r3, [pc, #236]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000976:	2233      	movs	r2, #51	@ 0x33
 8000978:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 800097a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	001a      	movs	r2, r3
 8000980:	4b39      	ldr	r3, [pc, #228]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 8000982:	0011      	movs	r1, r2
 8000984:	0018      	movs	r0, r3
 8000986:	f002 fb8b 	bl	80030a0 <iprintf>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	0219      	lsls	r1, r3, #8
 800098e:	23a0      	movs	r3, #160	@ 0xa0
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	2200      	movs	r2, #0
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fd6e 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800099a:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 800099c:	2200      	movs	r2, #0
 800099e:	2108      	movs	r1, #8
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fd68 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80009a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fd62 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80009b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	2120      	movs	r1, #32
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fd5c 	bl	8001476 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80009be:	1dbb      	adds	r3, r7, #6
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	2b40      	cmp	r3, #64	@ 0x40
 80009c4:	d112      	bne.n	80009ec <HAL_GPIO_EXTI_Callback+0x2a4>
 80009c6:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80009c8:	2140      	movs	r1, #64	@ 0x40
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fd36 	bl	800143c <HAL_GPIO_ReadPin>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d00b      	beq.n	80009ec <HAL_GPIO_EXTI_Callback+0x2a4>
    {
      keyPressed = 48; //ASCII value of 0
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 80009d6:	2230      	movs	r2, #48	@ 0x30
 80009d8:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 80009da:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	001a      	movs	r2, r3
 80009e0:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f002 fb5b 	bl	80030a0 <iprintf>
 80009ea:	e059      	b.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x358>

    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2b80      	cmp	r3, #128	@ 0x80
 80009f2:	d112      	bne.n	8000a1a <HAL_GPIO_EXTI_Callback+0x2d2>
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 80009f6:	2180      	movs	r1, #128	@ 0x80
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 fd1f 	bl	800143c <HAL_GPIO_ReadPin>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d00b      	beq.n	8000a1a <HAL_GPIO_EXTI_Callback+0x2d2>
    {
      keyPressed = 56; //ASCII value of 8
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000a04:	2238      	movs	r2, #56	@ 0x38
 8000a06:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 fb44 	bl	80030a0 <iprintf>
 8000a18:	e042      	b.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x358>

    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000a1a:	1dbb      	adds	r3, r7, #6
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	2380      	movs	r3, #128	@ 0x80
 8000a20:	019b      	lsls	r3, r3, #6
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d122      	bne.n	8000a6c <HAL_GPIO_EXTI_Callback+0x324>
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	019b      	lsls	r3, r3, #6
 8000a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	0010      	movs	r0, r2
 8000a30:	f000 fd04 	bl	800143c <HAL_GPIO_ReadPin>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d019      	beq.n	8000a6c <HAL_GPIO_EXTI_Callback+0x324>
    {
      keyPressed = 53; //ASCII value of 5
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000a3a:	2235      	movs	r2, #53	@ 0x35
 8000a3c:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	001a      	movs	r2, r3
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_GPIO_EXTI_Callback+0x320>)
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 fb29 	bl	80030a0 <iprintf>
 8000a4e:	e027      	b.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x358>
 8000a50:	20000124 	.word	0x20000124
 8000a54:	20000120 	.word	0x20000120
 8000a58:	2000010c 	.word	0x2000010c
 8000a5c:	000060c0 	.word	0x000060c0
 8000a60:	50000400 	.word	0x50000400
 8000a64:	20000128 	.word	0x20000128
 8000a68:	08003df4 	.word	0x08003df4

    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 8000a6c:	1dbb      	adds	r3, r7, #6
 8000a6e:	881a      	ldrh	r2, [r3, #0]
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	01db      	lsls	r3, r3, #7
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d113      	bne.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x358>
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	01db      	lsls	r3, r3, #7
 8000a7c:	4a5e      	ldr	r2, [pc, #376]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000a7e:	0019      	movs	r1, r3
 8000a80:	0010      	movs	r0, r2
 8000a82:	f000 fcdb 	bl	800143c <HAL_GPIO_ReadPin>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d00a      	beq.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x358>
    {
      keyPressed = 50; //ASCII value of 2
 8000a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000a8c:	2232      	movs	r2, #50	@ 0x32
 8000a8e:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000a90:	4b5a      	ldr	r3, [pc, #360]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	001a      	movs	r2, r3
 8000a96:	4b5a      	ldr	r3, [pc, #360]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fb00 	bl	80030a0 <iprintf>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	0219      	lsls	r1, r3, #8
 8000aa4:	23a0      	movs	r3, #160	@ 0xa0
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fce3 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000ab0:	4b51      	ldr	r3, [pc, #324]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fcdd 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000abc:	4b4e      	ldr	r3, [pc, #312]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 fcd7 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 fcd1 	bl	8001476 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	2b40      	cmp	r3, #64	@ 0x40
 8000ada:	d112      	bne.n	8000b02 <HAL_GPIO_EXTI_Callback+0x3ba>
 8000adc:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000ade:	2140      	movs	r1, #64	@ 0x40
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fcab 	bl	800143c <HAL_GPIO_ReadPin>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d00b      	beq.n	8000b02 <HAL_GPIO_EXTI_Callback+0x3ba>
    {
      keyPressed = 42; //ASCII value of *
 8000aea:	4b44      	ldr	r3, [pc, #272]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000aec:	222a      	movs	r2, #42	@ 0x2a
 8000aee:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000af0:	4b42      	ldr	r3, [pc, #264]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	001a      	movs	r2, r3
 8000af6:	4b42      	ldr	r3, [pc, #264]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f002 fad0 	bl	80030a0 <iprintf>
 8000b00:	e04b      	b.n	8000b9a <HAL_GPIO_EXTI_Callback+0x452>

    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000b02:	1dbb      	adds	r3, r7, #6
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2b80      	cmp	r3, #128	@ 0x80
 8000b08:	d112      	bne.n	8000b30 <HAL_GPIO_EXTI_Callback+0x3e8>
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fc94 	bl	800143c <HAL_GPIO_ReadPin>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d00b      	beq.n	8000b30 <HAL_GPIO_EXTI_Callback+0x3e8>
    {
      keyPressed = 55; //ASCII value of 7
 8000b18:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000b1a:	2237      	movs	r2, #55	@ 0x37
 8000b1c:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000b1e:	4b37      	ldr	r3, [pc, #220]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001a      	movs	r2, r3
 8000b24:	4b36      	ldr	r3, [pc, #216]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 fab9 	bl	80030a0 <iprintf>
 8000b2e:	e034      	b.n	8000b9a <HAL_GPIO_EXTI_Callback+0x452>

    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000b30:	1dbb      	adds	r3, r7, #6
 8000b32:	881a      	ldrh	r2, [r3, #0]
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	019b      	lsls	r3, r3, #6
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d114      	bne.n	8000b66 <HAL_GPIO_EXTI_Callback+0x41e>
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	019b      	lsls	r3, r3, #6
 8000b40:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000b42:	0019      	movs	r1, r3
 8000b44:	0010      	movs	r0, r2
 8000b46:	f000 fc79 	bl	800143c <HAL_GPIO_ReadPin>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d00b      	beq.n	8000b66 <HAL_GPIO_EXTI_Callback+0x41e>
    {
      keyPressed = 52; //ASCII value of 4
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000b50:	2234      	movs	r2, #52	@ 0x34
 8000b52:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000b54:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f002 fa9e 	bl	80030a0 <iprintf>
 8000b64:	e019      	b.n	8000b9a <HAL_GPIO_EXTI_Callback+0x452>

    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	881a      	ldrh	r2, [r3, #0]
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	01db      	lsls	r3, r3, #7
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d113      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0x452>
 8000b72:	2380      	movs	r3, #128	@ 0x80
 8000b74:	01db      	lsls	r3, r3, #7
 8000b76:	4a20      	ldr	r2, [pc, #128]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000b78:	0019      	movs	r1, r3
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	f000 fc5e 	bl	800143c <HAL_GPIO_ReadPin>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d00a      	beq.n	8000b9a <HAL_GPIO_EXTI_Callback+0x452>
    {
      keyPressed = 49; //ASCII value of 1
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000b86:	2231      	movs	r2, #49	@ 0x31
 8000b88:	701a      	strb	r2, [r3, #0]
      printf("Key = %c\r\n", (char)keyPressed);
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4b4>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001a      	movs	r2, r3
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f002 fa83 	bl	80030a0 <iprintf>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	0219      	lsls	r1, r3, #8
 8000b9e:	23a0      	movs	r3, #160	@ 0xa0
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fc66 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2108      	movs	r1, #8
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fc60 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fc5a 	bl	8001476 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fc54 	bl	8001476 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8000bd0:	2288      	movs	r2, #136	@ 0x88
 8000bd2:	0352      	lsls	r2, r2, #13
 8000bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8000bde:	4a06      	ldr	r2, [pc, #24]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8000be0:	0019      	movs	r1, r3
 8000be2:	0010      	movs	r0, r2
 8000be4:	f000 fab4 	bl	8001150 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x4c0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <HAL_GPIO_EXTI_Callback+0x4c4>)
 8000bee:	601a      	str	r2, [r3, #0]
  }
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	50000400 	.word	0x50000400
 8000bfc:	20000128 	.word	0x20000128
 8000c00:	08003df4 	.word	0x08003df4
 8000c04:	2000010c 	.word	0x2000010c
 8000c08:	20000124 	.word	0x20000124
 8000c0c:	20000120 	.word	0x20000120

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	e7fd      	b.n	8000c18 <Error_Handler+0x8>

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <HAL_MspInit+0x24>)
 8000c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_MspInit+0x24>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <HAL_MspInit+0x24>)
 8000c2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <HAL_MspInit+0x24>)
 8000c32:	2180      	movs	r1, #128	@ 0x80
 8000c34:	0549      	lsls	r1, r1, #21
 8000c36:	430a      	orrs	r2, r1
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b089      	sub	sp, #36	@ 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	240c      	movs	r4, #12
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	2314      	movs	r3, #20
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f002 fa7e 	bl	8003158 <memset>
  if(huart->Instance==USART1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12a      	bne.n	8000cbc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c6a:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c6c:	2180      	movs	r1, #128	@ 0x80
 8000c6e:	01c9      	lsls	r1, r1, #7
 8000c70:	430a      	orrs	r2, r1
 8000c72:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c84:	2201      	movs	r2, #1
 8000c86:	4013      	ands	r3, r2
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	22c0      	movs	r2, #192	@ 0xc0
 8000c90:	00d2      	lsls	r2, r2, #3
 8000c92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	0021      	movs	r1, r4
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2202      	movs	r2, #2
 8000c9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2204      	movs	r2, #4
 8000cac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	187a      	adds	r2, r7, r1
 8000cb0:	23a0      	movs	r3, #160	@ 0xa0
 8000cb2:	05db      	lsls	r3, r3, #23
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 fa4a 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b009      	add	sp, #36	@ 0x24
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	40021000 	.word	0x40021000

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	e7fd      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	e7fd      	b.n	8000cd8 <HardFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f932 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_R1_INPUT_Pin);
 8000d02:	2040      	movs	r0, #64	@ 0x40
 8000d04:	f000 fbd4 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BSP_R2_INPUT_Pin);
 8000d08:	2080      	movs	r0, #128	@ 0x80
 8000d0a:	f000 fbd1 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BSP_R3_INPUT_Pin);
 8000d0e:	2380      	movs	r3, #128	@ 0x80
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fbcc 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BSP_R4_INPUT_Pin);
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fbc7 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e00a      	b.n	8000d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3a:	e000      	b.n	8000d3e <_read+0x16>
 8000d3c:	bf00      	nop
 8000d3e:	0001      	movs	r1, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	b2ca      	uxtb	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf0      	blt.n	8000d3a <_read+0x12>
  }

  return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b006      	add	sp, #24
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart1, (const unsigned char *)ptr, len, HAL_MAX_DELAY);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	2301      	movs	r3, #1
 8000d76:	425b      	negs	r3, r3
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <_write+0x28>)
 8000d7c:	f001 fb7e 	bl	800247c <HAL_UART_Transmit>
  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000084 	.word	0x20000084

08000d90 <_close>:

int _close(int file)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	425b      	negs	r3, r3
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	0192      	lsls	r2, r2, #6
 8000db4:	605a      	str	r2, [r3, #4]
  return 0;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b002      	add	sp, #8
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_isatty>:

int _isatty(int file)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dc8:	2301      	movs	r3, #1
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b004      	add	sp, #16
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	18d3      	adds	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f002 f9f4 	bl	8003204 <__errno>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	18d2      	adds	r2, r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <_sbrk+0x64>)
 8000e38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b006      	add	sp, #24
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20002000 	.word	0x20002000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	2000012c 	.word	0x2000012c
 8000e50:	20000280 	.word	0x20000280

08000e54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000e60:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e64:	f7ff fff6 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f002 f9bf 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fb13 	bl	80004bc <main>

08000e96 <LoopForever>:

LoopForever:
    b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
  ldr   r0, =_estack
 8000e98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ea4:	08003eb0 	.word	0x08003eb0
  ldr r2, =_sbss
 8000ea8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eac:	20000280 	.word	0x20000280

08000eb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_COMP_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_Init+0x3c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_Init+0x3c>)
 8000ec6:	2140      	movs	r1, #64	@ 0x40
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f811 	bl	8000ef4 <HAL_InitTick>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e001      	b.n	8000ee2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ede:	f7ff fe9d 	bl	8000c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <HAL_InitTick+0x5c>)
 8000efe:	681c      	ldr	r4, [r3, #0]
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_InitTick+0x60>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	0019      	movs	r1, r3
 8000f06:	23fa      	movs	r3, #250	@ 0xfa
 8000f08:	0098      	lsls	r0, r3, #2
 8000f0a:	f7ff f907 	bl	800011c <__udivsi3>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	0019      	movs	r1, r3
 8000f12:	0020      	movs	r0, r4
 8000f14:	f7ff f902 	bl	800011c <__udivsi3>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 f90b 	bl	8001136 <HAL_SYSTICK_Config>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e00f      	b.n	8000f48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d80b      	bhi.n	8000f46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	2301      	movs	r3, #1
 8000f32:	425b      	negs	r3, r3
 8000f34:	2200      	movs	r2, #0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 f8d8 	bl	80010ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_InitTick+0x64>)
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b003      	add	sp, #12
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <HAL_IncTick+0x1c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	001a      	movs	r2, r3
 8000f66:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	18d2      	adds	r2, r2, r3
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000130 	.word	0x20000130

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b02      	ldr	r3, [pc, #8]	@ (8000f90 <HAL_GetTick+0x10>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	20000130 	.word	0x20000130

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fa6:	d809      	bhi.n	8000fbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	001a      	movs	r2, r3
 8000fae:	231f      	movs	r3, #31
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <__NVIC_EnableIRQ+0x30>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4091      	lsls	r1, r2
 8000fb8:	000a      	movs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
  }
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b002      	add	sp, #8
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	0002      	movs	r2, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fdc:	d828      	bhi.n	8001030 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fde:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <__NVIC_SetPriority+0xd4>)
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	33c0      	adds	r3, #192	@ 0xc0
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	589b      	ldr	r3, [r3, r2]
 8000fee:	1dfa      	adds	r2, r7, #7
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	00d2      	lsls	r2, r2, #3
 8000ffa:	21ff      	movs	r1, #255	@ 0xff
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	000a      	movs	r2, r1
 8001000:	43d2      	mvns	r2, r2
 8001002:	401a      	ands	r2, r3
 8001004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	401a      	ands	r2, r3
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	0018      	movs	r0, r3
 8001014:	2303      	movs	r3, #3
 8001016:	4003      	ands	r3, r0
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800101c:	481f      	ldr	r0, [pc, #124]	@ (800109c <__NVIC_SetPriority+0xd4>)
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	430a      	orrs	r2, r1
 8001028:	33c0      	adds	r3, #192	@ 0xc0
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800102e:	e031      	b.n	8001094 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <__NVIC_SetPriority+0xd8>)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	0019      	movs	r1, r3
 8001038:	230f      	movs	r3, #15
 800103a:	400b      	ands	r3, r1
 800103c:	3b08      	subs	r3, #8
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3306      	adds	r3, #6
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	3304      	adds	r3, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1dfa      	adds	r2, r7, #7
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	0011      	movs	r1, r2
 8001050:	2203      	movs	r2, #3
 8001052:	400a      	ands	r2, r1
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	21ff      	movs	r1, #255	@ 0xff
 8001058:	4091      	lsls	r1, r2
 800105a:	000a      	movs	r2, r1
 800105c:	43d2      	mvns	r2, r2
 800105e:	401a      	ands	r2, r3
 8001060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	019b      	lsls	r3, r3, #6
 8001066:	22ff      	movs	r2, #255	@ 0xff
 8001068:	401a      	ands	r2, r3
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	0018      	movs	r0, r3
 8001070:	2303      	movs	r3, #3
 8001072:	4003      	ands	r3, r0
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001078:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <__NVIC_SetPriority+0xd8>)
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	001c      	movs	r4, r3
 8001080:	230f      	movs	r3, #15
 8001082:	4023      	ands	r3, r4
 8001084:	3b08      	subs	r3, #8
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	430a      	orrs	r2, r1
 800108a:	3306      	adds	r3, #6
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	18c3      	adds	r3, r0, r3
 8001090:	3304      	adds	r3, #4
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b003      	add	sp, #12
 800109a:	bd90      	pop	{r4, r7, pc}
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1e5a      	subs	r2, r3, #1
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	045b      	lsls	r3, r3, #17
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d301      	bcc.n	80010bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b8:	2301      	movs	r3, #1
 80010ba:	e010      	b.n	80010de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <SysTick_Config+0x44>)
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	3a01      	subs	r2, #1
 80010c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c4:	2301      	movs	r3, #1
 80010c6:	425b      	negs	r3, r3
 80010c8:	2103      	movs	r1, #3
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff ff7c 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <SysTick_Config+0x44>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <SysTick_Config+0x44>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	210f      	movs	r1, #15
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	1c02      	adds	r2, r0, #0
 80010fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	187b      	adds	r3, r7, r1
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b25b      	sxtb	r3, r3
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b004      	add	sp, #16
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	0002      	movs	r2, r0
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff33 	bl	8000f94 <__NVIC_EnableIRQ>
}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ffaf 	bl	80010a4 <SysTick_Config>
 8001146:	0003      	movs	r3, r0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001166:	e14f      	b.n	8001408 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4091      	lsls	r1, r2
 8001172:	000a      	movs	r2, r1
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <HAL_GPIO_Init+0x30>
 800117e:	e140      	b.n	8001402 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	4013      	ands	r3, r2
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001194:	2b02      	cmp	r3, #2
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	409a      	lsls	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	43da      	mvns	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	409a      	lsls	r2, r3
 80011ba:	0013      	movs	r3, r2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	2201      	movs	r2, #1
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2203      	movs	r2, #3
 8001200:	4013      	ands	r3, r2
 8001202:	2b03      	cmp	r3, #3
 8001204:	d017      	beq.n	8001236 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	4013      	ands	r3, r2
 800123e:	2b02      	cmp	r3, #2
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	58d3      	ldr	r3, [r2, r3]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2207      	movs	r2, #7
 8001254:	4013      	ands	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	43da      	mvns	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2107      	movs	r1, #7
 800126e:	400b      	ands	r3, r1
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	6939      	ldr	r1, [r7, #16]
 8001288:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2203      	movs	r2, #3
 80012a8:	401a      	ands	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	23c0      	movs	r3, #192	@ 0xc0
 80012c4:	029b      	lsls	r3, r3, #10
 80012c6:	4013      	ands	r3, r2
 80012c8:	d100      	bne.n	80012cc <HAL_GPIO_Init+0x17c>
 80012ca:	e09a      	b.n	8001402 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012cc:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <HAL_GPIO_Init+0x2d0>)
 80012ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d0:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <HAL_GPIO_Init+0x2d0>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d8:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <HAL_GPIO_Init+0x2d4>)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	589b      	ldr	r3, [r3, r2]
 80012e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	409a      	lsls	r2, r3
 80012f2:	0013      	movs	r3, r2
 80012f4:	43da      	mvns	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	23a0      	movs	r3, #160	@ 0xa0
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	429a      	cmp	r2, r3
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x1ea>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a47      	ldr	r2, [pc, #284]	@ (8001428 <HAL_GPIO_Init+0x2d8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x1e6>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a46      	ldr	r2, [pc, #280]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x1e2>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a45      	ldr	r2, [pc, #276]	@ (8001430 <HAL_GPIO_Init+0x2e0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x1de>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a44      	ldr	r2, [pc, #272]	@ (8001434 <HAL_GPIO_Init+0x2e4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x1da>
 8001326:	2305      	movs	r3, #5
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x1ec>
 800132a:	2306      	movs	r3, #6
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x1ec>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x1ec>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x1ec>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x1ec>
 800133a:	2300      	movs	r3, #0
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	2103      	movs	r1, #3
 8001340:	400a      	ands	r2, r1
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	@ (8001424 <HAL_GPIO_Init+0x2d4>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	035b      	lsls	r3, r3, #13
 8001372:	4013      	ands	r3, r2
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800137e:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001384:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43da      	mvns	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	039b      	lsls	r3, r3, #14
 800139c:	4013      	ands	r3, r2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a8:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80013ae:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	029b      	lsls	r3, r3, #10
 80013c6:	4013      	ands	r3, r2
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	025b      	lsls	r3, r3, #9
 80013f0:	4013      	ands	r3, r2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	40da      	lsrs	r2, r3
 8001410:	1e13      	subs	r3, r2, #0
 8001412:	d000      	beq.n	8001416 <HAL_GPIO_Init+0x2c6>
 8001414:	e6a8      	b.n	8001168 <HAL_GPIO_Init+0x18>
  }
}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b006      	add	sp, #24
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	50000400 	.word	0x50000400
 800142c:	50000800 	.word	0x50000800
 8001430:	50000c00 	.word	0x50000c00
 8001434:	50001c00 	.word	0x50001c00
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	000a      	movs	r2, r1
 8001446:	1cbb      	adds	r3, r7, #2
 8001448:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	1cba      	adds	r2, r7, #2
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	4013      	ands	r3, r2
 8001454:	d004      	beq.n	8001460 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001456:	230f      	movs	r3, #15
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	e003      	b.n	8001468 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001460:	230f      	movs	r3, #15
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001468:	230f      	movs	r3, #15
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	781b      	ldrb	r3, [r3, #0]
}
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b004      	add	sp, #16
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	0008      	movs	r0, r1
 8001480:	0011      	movs	r1, r2
 8001482:	1cbb      	adds	r3, r7, #2
 8001484:	1c02      	adds	r2, r0, #0
 8001486:	801a      	strh	r2, [r3, #0]
 8001488:	1c7b      	adds	r3, r7, #1
 800148a:	1c0a      	adds	r2, r1, #0
 800148c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148e:	1c7b      	adds	r3, r7, #1
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	1cbb      	adds	r3, r7, #2
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800149e:	e003      	b.n	80014a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014a0:	1cbb      	adds	r3, r7, #2
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	0002      	movs	r2, r0
 80014b8:	1dbb      	adds	r3, r7, #6
 80014ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	1dba      	adds	r2, r7, #6
 80014c2:	8812      	ldrh	r2, [r2, #0]
 80014c4:	4013      	ands	r3, r2
 80014c6:	d008      	beq.n	80014da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80014ca:	1dba      	adds	r2, r7, #6
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d0:	1dbb      	adds	r3, r7, #6
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff f937 	bl	8000748 <HAL_GPIO_EXTI_Callback>
  }
}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	40010400 	.word	0x40010400

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 fbaf 	bl	8001c5a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fc:	4bcf      	ldr	r3, [pc, #828]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	220c      	movs	r2, #12
 8001502:	4013      	ands	r3, r2
 8001504:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001506:	4bcd      	ldr	r3, [pc, #820]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4013      	ands	r3, r2
 8001510:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4013      	ands	r3, r2
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x36>
 800151c:	e07e      	b.n	800161c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	2b08      	cmp	r3, #8
 8001522:	d007      	beq.n	8001534 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d112      	bne.n	8001550 <HAL_RCC_OscConfig+0x68>
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	025b      	lsls	r3, r3, #9
 8001530:	429a      	cmp	r2, r3
 8001532:	d10d      	bne.n	8001550 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	4bc1      	ldr	r3, [pc, #772]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	4013      	ands	r3, r2
 800153e:	d100      	bne.n	8001542 <HAL_RCC_OscConfig+0x5a>
 8001540:	e06b      	b.n	800161a <HAL_RCC_OscConfig+0x132>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d167      	bne.n	800161a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	f000 fb85 	bl	8001c5a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	429a      	cmp	r2, r3
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x84>
 800155c:	4bb7      	ldr	r3, [pc, #732]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4bb6      	ldr	r3, [pc, #728]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001562:	2180      	movs	r1, #128	@ 0x80
 8001564:	0249      	lsls	r1, r1, #9
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e027      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	23a0      	movs	r3, #160	@ 0xa0
 8001572:	02db      	lsls	r3, r3, #11
 8001574:	429a      	cmp	r2, r3
 8001576:	d10e      	bne.n	8001596 <HAL_RCC_OscConfig+0xae>
 8001578:	4bb0      	ldr	r3, [pc, #704]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4baf      	ldr	r3, [pc, #700]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800157e:	2180      	movs	r1, #128	@ 0x80
 8001580:	02c9      	lsls	r1, r1, #11
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	4bad      	ldr	r3, [pc, #692]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4bac      	ldr	r3, [pc, #688]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800158c:	2180      	movs	r1, #128	@ 0x80
 800158e:	0249      	lsls	r1, r1, #9
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e012      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 8001596:	4ba9      	ldr	r3, [pc, #676]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4ba8      	ldr	r3, [pc, #672]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800159c:	49a8      	ldr	r1, [pc, #672]	@ (8001840 <HAL_RCC_OscConfig+0x358>)
 800159e:	400a      	ands	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	4ba6      	ldr	r3, [pc, #664]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	4013      	ands	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4ba2      	ldr	r3, [pc, #648]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4ba1      	ldr	r3, [pc, #644]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80015b6:	49a3      	ldr	r1, [pc, #652]	@ (8001844 <HAL_RCC_OscConfig+0x35c>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d015      	beq.n	80015f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fcdc 	bl	8000f80 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015cc:	e009      	b.n	80015e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ce:	f7ff fcd7 	bl	8000f80 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b64      	cmp	r3, #100	@ 0x64
 80015da:	d902      	bls.n	80015e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	f000 fb3c 	bl	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015e2:	4b96      	ldr	r3, [pc, #600]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	029b      	lsls	r3, r3, #10
 80015ea:	4013      	ands	r3, r2
 80015ec:	d0ef      	beq.n	80015ce <HAL_RCC_OscConfig+0xe6>
 80015ee:	e015      	b.n	800161c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fcc6 	bl	8000f80 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fa:	f7ff fcc1 	bl	8000f80 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b64      	cmp	r3, #100	@ 0x64
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e326      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800160c:	4b8b      	ldr	r3, [pc, #556]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	4013      	ands	r3, r2
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x112>
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d100      	bne.n	8001628 <HAL_RCC_OscConfig+0x140>
 8001626:	e08b      	b.n	8001740 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d005      	beq.n	8001640 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d13e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1d0>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d13b      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001640:	4b7e      	ldr	r3, [pc, #504]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2204      	movs	r2, #4
 8001646:	4013      	ands	r3, r2
 8001648:	d004      	beq.n	8001654 <HAL_RCC_OscConfig+0x16c>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e302      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b79      	ldr	r3, [pc, #484]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a7b      	ldr	r2, [pc, #492]	@ (8001848 <HAL_RCC_OscConfig+0x360>)
 800165a:	4013      	ands	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	021a      	lsls	r2, r3, #8
 8001664:	4b75      	ldr	r3, [pc, #468]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800166a:	4b74      	ldr	r3, [pc, #464]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2209      	movs	r2, #9
 8001670:	4393      	bics	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	4b71      	ldr	r3, [pc, #452]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167c:	f000 fc40 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001680:	0001      	movs	r1, r0
 8001682:	4b6e      	ldr	r3, [pc, #440]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	220f      	movs	r2, #15
 800168a:	4013      	ands	r3, r2
 800168c:	4a6f      	ldr	r2, [pc, #444]	@ (800184c <HAL_RCC_OscConfig+0x364>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	000a      	movs	r2, r1
 8001692:	40da      	lsrs	r2, r3
 8001694:	4b6e      	ldr	r3, [pc, #440]	@ (8001850 <HAL_RCC_OscConfig+0x368>)
 8001696:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001698:	4b6e      	ldr	r3, [pc, #440]	@ (8001854 <HAL_RCC_OscConfig+0x36c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2513      	movs	r5, #19
 800169e:	197c      	adds	r4, r7, r5
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fc27 	bl	8000ef4 <HAL_InitTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016aa:	197b      	adds	r3, r7, r5
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d046      	beq.n	8001740 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	e2d0      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d027      	beq.n	800170e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016be:	4b5f      	ldr	r3, [pc, #380]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2209      	movs	r2, #9
 80016c4:	4393      	bics	r3, r2
 80016c6:	0019      	movs	r1, r3
 80016c8:	4b5c      	ldr	r3, [pc, #368]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc56 	bl	8000f80 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fc51 	bl	8000f80 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e2b6      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ec:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2204      	movs	r2, #4
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f1      	beq.n	80016da <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b51      	ldr	r3, [pc, #324]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a53      	ldr	r2, [pc, #332]	@ (8001848 <HAL_RCC_OscConfig+0x360>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	021a      	lsls	r2, r3, #8
 8001706:	4b4d      	ldr	r3, [pc, #308]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	e018      	b.n	8001740 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b4b      	ldr	r3, [pc, #300]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b4a      	ldr	r3, [pc, #296]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001714:	2101      	movs	r1, #1
 8001716:	438a      	bics	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fc31 	bl	8000f80 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fc2c 	bl	8000f80 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e291      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001736:	4b41      	ldr	r3, [pc, #260]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2204      	movs	r2, #4
 800173c:	4013      	ands	r3, r2
 800173e:	d1f1      	bne.n	8001724 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2210      	movs	r2, #16
 8001746:	4013      	ands	r3, r2
 8001748:	d100      	bne.n	800174c <HAL_RCC_OscConfig+0x264>
 800174a:	e0a1      	b.n	8001890 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d140      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001752:	4b3a      	ldr	r3, [pc, #232]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	@ 0x80
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d005      	beq.n	800176a <HAL_RCC_OscConfig+0x282>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e277      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a3a      	ldr	r2, [pc, #232]	@ (8001858 <HAL_RCC_OscConfig+0x370>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177e:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	0a19      	lsrs	r1, r3, #8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	061a      	lsls	r2, r3, #24
 800178c:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	0b5b      	lsrs	r3, r3, #13
 8001798:	3301      	adds	r3, #1
 800179a:	2280      	movs	r2, #128	@ 0x80
 800179c:	0212      	lsls	r2, r2, #8
 800179e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017a0:	4b26      	ldr	r3, [pc, #152]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	210f      	movs	r1, #15
 80017a8:	400b      	ands	r3, r1
 80017aa:	4928      	ldr	r1, [pc, #160]	@ (800184c <HAL_RCC_OscConfig+0x364>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <HAL_RCC_OscConfig+0x368>)
 80017b2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80017b4:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <HAL_RCC_OscConfig+0x36c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2513      	movs	r5, #19
 80017ba:	197c      	adds	r4, r7, r5
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff fb99 	bl	8000ef4 <HAL_InitTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017c6:	197b      	adds	r3, r7, r5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d060      	beq.n	8001890 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80017ce:	197b      	adds	r3, r7, r5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	e242      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d03f      	beq.n	800185c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	0049      	lsls	r1, r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fbc9 	bl	8000f80 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f4:	f7ff fbc4 	bl	8000f80 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e229      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a10      	ldr	r2, [pc, #64]	@ (8001858 <HAL_RCC_OscConfig+0x370>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	0a19      	lsrs	r1, r3, #8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	061a      	lsls	r2, r3, #24
 8001834:	4b01      	ldr	r3, [pc, #4]	@ (800183c <HAL_RCC_OscConfig+0x354>)
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	e029      	b.n	8001890 <HAL_RCC_OscConfig+0x3a8>
 800183c:	40021000 	.word	0x40021000
 8001840:	fffeffff 	.word	0xfffeffff
 8001844:	fffbffff 	.word	0xfffbffff
 8001848:	ffffe0ff 	.word	0xffffe0ff
 800184c:	08003e00 	.word	0x08003e00
 8001850:	20000000 	.word	0x20000000
 8001854:	20000004 	.word	0x20000004
 8001858:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800185c:	4bbd      	ldr	r3, [pc, #756]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4bbc      	ldr	r3, [pc, #752]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001862:	49bd      	ldr	r1, [pc, #756]	@ (8001b58 <HAL_RCC_OscConfig+0x670>)
 8001864:	400a      	ands	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fb8a 	bl	8000f80 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001872:	f7ff fb85 	bl	8000f80 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1ea      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001884:	4bb3      	ldr	r3, [pc, #716]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2208      	movs	r2, #8
 8001896:	4013      	ands	r3, r2
 8001898:	d036      	beq.n	8001908 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d019      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a2:	4bac      	ldr	r3, [pc, #688]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80018a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018a6:	4bab      	ldr	r3, [pc, #684]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fb67 	bl	8000f80 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fb62 	bl	8000f80 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1c7      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ca:	4ba2      	ldr	r3, [pc, #648]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80018cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d0f1      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3d0>
 80018d4:	e018      	b.n	8001908 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d6:	4b9f      	ldr	r3, [pc, #636]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80018d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018da:	4b9e      	ldr	r3, [pc, #632]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80018dc:	2101      	movs	r1, #1
 80018de:	438a      	bics	r2, r1
 80018e0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fb4d 	bl	8000f80 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb48 	bl	8000f80 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1ad      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018fe:	4b95      	ldr	r3, [pc, #596]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d1f1      	bne.n	80018ec <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2204      	movs	r2, #4
 800190e:	4013      	ands	r3, r2
 8001910:	d100      	bne.n	8001914 <HAL_RCC_OscConfig+0x42c>
 8001912:	e0ae      	b.n	8001a72 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001914:	2027      	movs	r0, #39	@ 0x27
 8001916:	183b      	adds	r3, r7, r0
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 800191e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	4013      	ands	r3, r2
 8001926:	d109      	bne.n	800193c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b8a      	ldr	r3, [pc, #552]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 800192a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800192c:	4b89      	ldr	r3, [pc, #548]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	0549      	lsls	r1, r1, #21
 8001932:	430a      	orrs	r2, r1
 8001934:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001936:	183b      	adds	r3, r7, r0
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b87      	ldr	r3, [pc, #540]	@ (8001b5c <HAL_RCC_OscConfig+0x674>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4013      	ands	r3, r2
 8001946:	d11a      	bne.n	800197e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001948:	4b84      	ldr	r3, [pc, #528]	@ (8001b5c <HAL_RCC_OscConfig+0x674>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b83      	ldr	r3, [pc, #524]	@ (8001b5c <HAL_RCC_OscConfig+0x674>)
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	0049      	lsls	r1, r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff fb13 	bl	8000f80 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001960:	f7ff fb0e 	bl	8000f80 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e173      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b7a      	ldr	r3, [pc, #488]	@ (8001b5c <HAL_RCC_OscConfig+0x674>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4013      	ands	r3, r2
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	2380      	movs	r3, #128	@ 0x80
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d107      	bne.n	800199a <HAL_RCC_OscConfig+0x4b2>
 800198a:	4b72      	ldr	r3, [pc, #456]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 800198c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800198e:	4b71      	ldr	r3, [pc, #452]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001990:	2180      	movs	r1, #128	@ 0x80
 8001992:	0049      	lsls	r1, r1, #1
 8001994:	430a      	orrs	r2, r1
 8001996:	651a      	str	r2, [r3, #80]	@ 0x50
 8001998:	e031      	b.n	80019fe <HAL_RCC_OscConfig+0x516>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x4d4>
 80019a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019a8:	496b      	ldr	r1, [pc, #428]	@ (8001b58 <HAL_RCC_OscConfig+0x670>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80019ae:	4b69      	ldr	r3, [pc, #420]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019b2:	4b68      	ldr	r3, [pc, #416]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019b4:	496a      	ldr	r1, [pc, #424]	@ (8001b60 <HAL_RCC_OscConfig+0x678>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80019ba:	e020      	b.n	80019fe <HAL_RCC_OscConfig+0x516>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	23a0      	movs	r3, #160	@ 0xa0
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d10e      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4fe>
 80019c8:	4b62      	ldr	r3, [pc, #392]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019cc:	4b61      	ldr	r3, [pc, #388]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019ce:	2180      	movs	r1, #128	@ 0x80
 80019d0:	00c9      	lsls	r1, r1, #3
 80019d2:	430a      	orrs	r2, r1
 80019d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80019d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019da:	4b5e      	ldr	r3, [pc, #376]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019dc:	2180      	movs	r1, #128	@ 0x80
 80019de:	0049      	lsls	r1, r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x516>
 80019e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019ec:	495a      	ldr	r1, [pc, #360]	@ (8001b58 <HAL_RCC_OscConfig+0x670>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80019f2:	4b58      	ldr	r3, [pc, #352]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019f6:	4b57      	ldr	r3, [pc, #348]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 80019f8:	4959      	ldr	r1, [pc, #356]	@ (8001b60 <HAL_RCC_OscConfig+0x678>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fabb 	bl	8000f80 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a0e:	e009      	b.n	8001a24 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff fab6 	bl	8000f80 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	4a52      	ldr	r2, [pc, #328]	@ (8001b64 <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e11a      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a24:	4b4b      	ldr	r3, [pc, #300]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001a26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0ef      	beq.n	8001a10 <HAL_RCC_OscConfig+0x528>
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff faa5 	bl	8000f80 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff faa0 	bl	8000f80 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	4a47      	ldr	r2, [pc, #284]	@ (8001b64 <HAL_RCC_OscConfig+0x67c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e104      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a50:	4b40      	ldr	r3, [pc, #256]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001a52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d1ef      	bne.n	8001a3c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a5c:	2327      	movs	r3, #39	@ 0x27
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001a6c:	493e      	ldr	r1, [pc, #248]	@ (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2220      	movs	r2, #32
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d049      	beq.n	8001b10 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d026      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a84:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	4b30      	ldr	r3, [pc, #192]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a94:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a9c:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <HAL_RCC_OscConfig+0x684>)
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <HAL_RCC_OscConfig+0x684>)
 8001aa2:	2180      	movs	r1, #128	@ 0x80
 8001aa4:	0189      	lsls	r1, r1, #6
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fa69 	bl	8000f80 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab4:	f7ff fa64 	bl	8000f80 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e0c9      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ac6:	4b23      	ldr	r3, [pc, #140]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2202      	movs	r2, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d0f1      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x5cc>
 8001ad0:	e01e      	b.n	8001b10 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001ad8:	2101      	movs	r1, #1
 8001ada:	438a      	bics	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <HAL_RCC_OscConfig+0x684>)
 8001ae0:	6a1a      	ldr	r2, [r3, #32]
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <HAL_RCC_OscConfig+0x684>)
 8001ae4:	4922      	ldr	r1, [pc, #136]	@ (8001b70 <HAL_RCC_OscConfig+0x688>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff fa49 	bl	8000f80 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af4:	f7ff fa44 	bl	8000f80 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e0a9      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b06:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d1f1      	bne.n	8001af4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x632>
 8001b18:	e09e      	b.n	8001c58 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x63a>
 8001b20:	e077      	b.n	8001c12 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d158      	bne.n	8001bdc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_RCC_OscConfig+0x66c>)
 8001b30:	4910      	ldr	r1, [pc, #64]	@ (8001b74 <HAL_RCC_OscConfig+0x68c>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fa23 	bl	8000f80 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b3e:	e01b      	b.n	8001b78 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff fa1e 	bl	8000f80 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d914      	bls.n	8001b78 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e083      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	40021000 	.word	0x40021000
 8001b58:	fffffeff 	.word	0xfffffeff
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	fffffbff 	.word	0xfffffbff
 8001b64:	00001388 	.word	0x00001388
 8001b68:	efffffff 	.word	0xefffffff
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	ffffdfff 	.word	0xffffdfff
 8001b74:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b78:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	049b      	lsls	r3, r3, #18
 8001b80:	4013      	ands	r3, r2
 8001b82:	d1dd      	bne.n	8001b40 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4a37      	ldr	r2, [pc, #220]	@ (8001c68 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	4b31      	ldr	r3, [pc, #196]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001baa:	2180      	movs	r1, #128	@ 0x80
 8001bac:	0449      	lsls	r1, r1, #17
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f9e5 	bl	8000f80 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f9e0 	bl	8000f80 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e045      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	049b      	lsls	r3, r3, #18
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x6d4>
 8001bda:	e03d      	b.n	8001c58 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bdc:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001be2:	4922      	ldr	r1, [pc, #136]	@ (8001c6c <HAL_RCC_OscConfig+0x784>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff f9ca 	bl	8000f80 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff f9c5 	bl	8000f80 <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e02a      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c04:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	049b      	lsls	r3, r3, #18
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x70a>
 8001c10:	e022      	b.n	8001c58 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e01d      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <HAL_RCC_OscConfig+0x77c>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	025b      	lsls	r3, r3, #9
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10f      	bne.n	8001c54 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	23f0      	movs	r3, #240	@ 0xf0
 8001c38:	039b      	lsls	r3, r3, #14
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	23c0      	movs	r3, #192	@ 0xc0
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b00a      	add	sp, #40	@ 0x28
 8001c60:	bdb0      	pop	{r4, r5, r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	40021000 	.word	0x40021000
 8001c68:	ff02ffff 	.word	0xff02ffff
 8001c6c:	feffffff 	.word	0xfeffffff

08001c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e128      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b96      	ldr	r3, [pc, #600]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d91e      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b93      	ldr	r3, [pc, #588]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4393      	bics	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	4b90      	ldr	r3, [pc, #576]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f96c 	bl	8000f80 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cac:	e009      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7ff f967 	bl	8000f80 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	4a8a      	ldr	r2, [pc, #552]	@ (8001ee4 <HAL_RCC_ClockConfig+0x274>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e109      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b87      	ldr	r3, [pc, #540]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1ee      	bne.n	8001cae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cda:	4b83      	ldr	r3, [pc, #524]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	22f0      	movs	r2, #240	@ 0xf0
 8001ce0:	4393      	bics	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001cea:	430a      	orrs	r2, r1
 8001cec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d100      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x8a>
 8001cf8:	e089      	b.n	8001e0e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d02:	4b79      	ldr	r3, [pc, #484]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	029b      	lsls	r3, r3, #10
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d120      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0e1      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d1a:	4b73      	ldr	r3, [pc, #460]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	049b      	lsls	r3, r3, #18
 8001d22:	4013      	ands	r3, r2
 8001d24:	d114      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0d5      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d106      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d32:	4b6d      	ldr	r3, [pc, #436]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d109      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0ca      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d40:	4b69      	ldr	r3, [pc, #420]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0c2      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d50:	4b65      	ldr	r3, [pc, #404]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2203      	movs	r2, #3
 8001d56:	4393      	bics	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4b62      	ldr	r3, [pc, #392]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d64:	f7ff f90c 	bl	8000f80 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d111      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d74:	e009      	b.n	8001d8a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d76:	f7ff f903 	bl	8000f80 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	4a58      	ldr	r2, [pc, #352]	@ (8001ee4 <HAL_RCC_ClockConfig+0x274>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e0a5      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d8a:	4b57      	ldr	r3, [pc, #348]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	220c      	movs	r2, #12
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d1ef      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x106>
 8001d96:	e03a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d111      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da0:	e009      	b.n	8001db6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f7ff f8ed 	bl	8000f80 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <HAL_RCC_ClockConfig+0x274>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e08f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	220c      	movs	r2, #12
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d1ef      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x132>
 8001dc2:	e024      	b.n	8001e0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d11b      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7ff f8d7 	bl	8000f80 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4a42      	ldr	r2, [pc, #264]	@ (8001ee4 <HAL_RCC_ClockConfig+0x274>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e079      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de2:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	220c      	movs	r2, #12
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d1ef      	bne.n	8001dce <HAL_RCC_ClockConfig+0x15e>
 8001dee:	e00e      	b.n	8001e0e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff f8c6 	bl	8000f80 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee4 <HAL_RCC_ClockConfig+0x274>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e068      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e04:	4b38      	ldr	r3, [pc, #224]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	220c      	movs	r2, #12
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d21e      	bcs.n	8001e5a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4393      	bics	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e2e:	f7ff f8a7 	bl	8000f80 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	e009      	b.n	8001e4c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f8a2 	bl	8000f80 <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	4a28      	ldr	r2, [pc, #160]	@ (8001ee4 <HAL_RCC_ClockConfig+0x274>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e044      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_RCC_ClockConfig+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4013      	ands	r3, r2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d1ee      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4013      	ands	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a20      	ldr	r2, [pc, #128]	@ (8001eec <HAL_RCC_ClockConfig+0x27c>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef0 <HAL_RCC_ClockConfig+0x280>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	00da      	lsls	r2, r3, #3
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e98:	f000 f832 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_RCC_ClockConfig+0x278>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <HAL_RCC_ClockConfig+0x284>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	000a      	movs	r2, r1
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_RCC_ClockConfig+0x288>)
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_RCC_ClockConfig+0x28c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	250b      	movs	r5, #11
 8001eba:	197c      	adds	r4, r7, r5
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff f819 	bl	8000ef4 <HAL_InitTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ec6:	197b      	adds	r3, r7, r5
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b004      	add	sp, #16
 8001edc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	00001388 	.word	0x00001388
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	fffff8ff 	.word	0xfffff8ff
 8001ef0:	ffffc7ff 	.word	0xffffc7ff
 8001ef4:	08003e00 	.word	0x08003e00
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b08e      	sub	sp, #56	@ 0x38
 8001f04:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f06:	4b4c      	ldr	r3, [pc, #304]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f0e:	230c      	movs	r3, #12
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d014      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x40>
 8001f16:	d900      	bls.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1a>
 8001f18:	e07b      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x112>
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d002      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x24>
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f22:	e076      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f24:	4b44      	ldr	r3, [pc, #272]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d002      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f2e:	4b43      	ldr	r3, [pc, #268]	@ (800203c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f30:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f32:	e07c      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f34:	4b42      	ldr	r3, [pc, #264]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f38:	e079      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f3a:	4b42      	ldr	r3, [pc, #264]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f3c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f3e:	e076      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f42:	0c9a      	lsrs	r2, r3, #18
 8001f44:	230f      	movs	r3, #15
 8001f46:	401a      	ands	r2, r3
 8001f48:	4b3f      	ldr	r3, [pc, #252]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x148>)
 8001f4a:	5c9b      	ldrb	r3, [r3, r2]
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f50:	0d9a      	lsrs	r2, r3, #22
 8001f52:	2303      	movs	r3, #3
 8001f54:	4013      	ands	r3, r2
 8001f56:	3301      	adds	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f5a:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	025b      	lsls	r3, r3, #9
 8001f62:	4013      	ands	r3, r2
 8001f64:	d01a      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	4a35      	ldr	r2, [pc, #212]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f70:	2300      	movs	r3, #0
 8001f72:	69b8      	ldr	r0, [r7, #24]
 8001f74:	69f9      	ldr	r1, [r7, #28]
 8001f76:	f7fe f97d 	bl	8000274 <__aeabi_lmul>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	000b      	movs	r3, r1
 8001f7e:	0010      	movs	r0, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f7fe f951 	bl	8000234 <__aeabi_uldivmod>
 8001f92:	0002      	movs	r2, r0
 8001f94:	000b      	movs	r3, r1
 8001f96:	0013      	movs	r3, r2
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f9a:	e037      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f9c:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d01a      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4a23      	ldr	r2, [pc, #140]	@ (800203c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	68b8      	ldr	r0, [r7, #8]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	f7fe f95d 	bl	8000274 <__aeabi_lmul>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	000b      	movs	r3, r1
 8001fbe:	0010      	movs	r0, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f7fe f931 	bl	8000234 <__aeabi_uldivmod>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	000b      	movs	r3, r1
 8001fd6:	0013      	movs	r3, r2
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fda:	e017      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x140>)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f7fe f944 	bl	8000274 <__aeabi_lmul>
 8001fec:	0002      	movs	r2, r0
 8001fee:	000b      	movs	r3, r1
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	001d      	movs	r5, r3
 8001ffc:	0022      	movs	r2, r4
 8001ffe:	002b      	movs	r3, r5
 8002000:	f7fe f918 	bl	8000234 <__aeabi_uldivmod>
 8002004:	0002      	movs	r2, r0
 8002006:	000b      	movs	r3, r1
 8002008:	0013      	movs	r3, r2
 800200a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800200c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002010:	e00d      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x138>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0b5b      	lsrs	r3, r3, #13
 8002018:	2207      	movs	r2, #7
 800201a:	4013      	ands	r3, r2
 800201c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	3301      	adds	r3, #1
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	0212      	lsls	r2, r2, #8
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800202c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800202e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b00e      	add	sp, #56	@ 0x38
 8002036:	bdb0      	pop	{r4, r5, r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	003d0900 	.word	0x003d0900
 8002040:	00f42400 	.word	0x00f42400
 8002044:	007a1200 	.word	0x007a1200
 8002048:	08003e18 	.word	0x08003e18

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002050:	4b02      	ldr	r3, [pc, #8]	@ (800205c <HAL_RCC_GetHCLKFreq+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff2 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002068:	0001      	movs	r1, r0
 800206a:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	2207      	movs	r2, #7
 8002072:	4013      	ands	r3, r2
 8002074:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	40d9      	lsrs	r1, r3
 800207a:	000b      	movs	r3, r1
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	08003e10 	.word	0x08003e10

0800208c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002090:	f7ff ffdc 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002094:	0001      	movs	r1, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	0adb      	lsrs	r3, r3, #11
 800209c:	2207      	movs	r2, #7
 800209e:	4013      	ands	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	40d9      	lsrs	r1, r3
 80020a6:	000b      	movs	r3, r1
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08003e10 	.word	0x08003e10

080020b8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80020c0:	2317      	movs	r3, #23
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2220      	movs	r2, #32
 80020ce:	4013      	ands	r3, r2
 80020d0:	d106      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4013      	ands	r3, r2
 80020dc:	d100      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80020de:	e104      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e0:	4bb1      	ldr	r3, [pc, #708]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	055b      	lsls	r3, r3, #21
 80020e8:	4013      	ands	r3, r2
 80020ea:	d10a      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	4bae      	ldr	r3, [pc, #696]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020f0:	4bad      	ldr	r3, [pc, #692]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020f2:	2180      	movs	r1, #128	@ 0x80
 80020f4:	0549      	lsls	r1, r1, #21
 80020f6:	430a      	orrs	r2, r1
 80020f8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80020fa:	2317      	movs	r3, #23
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4baa      	ldr	r3, [pc, #680]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d11a      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4ba7      	ldr	r3, [pc, #668]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4ba6      	ldr	r3, [pc, #664]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002114:	2180      	movs	r1, #128	@ 0x80
 8002116:	0049      	lsls	r1, r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211c:	f7fe ff30 	bl	8000f80 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe ff2b 	bl	8000f80 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	@ 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e133      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b9c      	ldr	r3, [pc, #624]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d0f0      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002144:	4b98      	ldr	r3, [pc, #608]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	23c0      	movs	r3, #192	@ 0xc0
 800214a:	039b      	lsls	r3, r3, #14
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	23c0      	movs	r3, #192	@ 0xc0
 8002156:	039b      	lsls	r3, r3, #14
 8002158:	4013      	ands	r3, r2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d107      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	23c0      	movs	r3, #192	@ 0xc0
 8002166:	039b      	lsls	r3, r3, #14
 8002168:	4013      	ands	r3, r2
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d013      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	23c0      	movs	r3, #192	@ 0xc0
 8002176:	029b      	lsls	r3, r3, #10
 8002178:	401a      	ands	r2, r3
 800217a:	23c0      	movs	r3, #192	@ 0xc0
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	429a      	cmp	r2, r3
 8002180:	d10a      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002182:	4b89      	ldr	r3, [pc, #548]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	401a      	ands	r2, r3
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	429a      	cmp	r2, r3
 8002192:	d101      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e103      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002198:	4b83      	ldr	r3, [pc, #524]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800219a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800219c:	23c0      	movs	r3, #192	@ 0xc0
 800219e:	029b      	lsls	r3, r3, #10
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d049      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	23c0      	movs	r3, #192	@ 0xc0
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	4013      	ands	r3, r2
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d004      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2220      	movs	r2, #32
 80021c0:	4013      	ands	r3, r2
 80021c2:	d10d      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	23c0      	movs	r3, #192	@ 0xc0
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	4013      	ands	r3, r2
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d034      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4013      	ands	r3, r2
 80021de:	d02e      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021e0:	4b71      	ldr	r3, [pc, #452]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e4:	4a72      	ldr	r2, [pc, #456]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ea:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ee:	4b6e      	ldr	r3, [pc, #440]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021f0:	2180      	movs	r1, #128	@ 0x80
 80021f2:	0309      	lsls	r1, r1, #12
 80021f4:	430a      	orrs	r2, r1
 80021f6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021f8:	4b6b      	ldr	r3, [pc, #428]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021fc:	4b6a      	ldr	r3, [pc, #424]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021fe:	496d      	ldr	r1, [pc, #436]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002200:	400a      	ands	r2, r1
 8002202:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002204:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d014      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe feb4 	bl	8000f80 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800221c:	e009      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe feaf 	bl	8000f80 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a63      	ldr	r2, [pc, #396]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e0b6      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002232:	4b5d      	ldr	r3, [pc, #372]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4013      	ands	r3, r2
 800223c:	d0ef      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	4013      	ands	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	23c0      	movs	r3, #192	@ 0xc0
 8002250:	029b      	lsls	r3, r3, #10
 8002252:	401a      	ands	r2, r3
 8002254:	23c0      	movs	r3, #192	@ 0xc0
 8002256:	029b      	lsls	r3, r3, #10
 8002258:	429a      	cmp	r2, r3
 800225a:	d10c      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800225c:	4b52      	ldr	r3, [pc, #328]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a56      	ldr	r2, [pc, #344]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	23c0      	movs	r3, #192	@ 0xc0
 800226c:	039b      	lsls	r3, r3, #14
 800226e:	401a      	ands	r2, r3
 8002270:	4b4d      	ldr	r3, [pc, #308]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b4c      	ldr	r3, [pc, #304]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002278:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	23c0      	movs	r3, #192	@ 0xc0
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	401a      	ands	r2, r3
 8002284:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002286:	430a      	orrs	r2, r1
 8002288:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2220      	movs	r2, #32
 8002290:	4013      	ands	r3, r2
 8002292:	d01f      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	23c0      	movs	r3, #192	@ 0xc0
 800229a:	029b      	lsls	r3, r3, #10
 800229c:	401a      	ands	r2, r3
 800229e:	23c0      	movs	r3, #192	@ 0xc0
 80022a0:	029b      	lsls	r3, r3, #10
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80022a6:	4b40      	ldr	r3, [pc, #256]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a44      	ldr	r2, [pc, #272]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	23c0      	movs	r3, #192	@ 0xc0
 80022b6:	039b      	lsls	r3, r3, #14
 80022b8:	401a      	ands	r2, r3
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022c2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	23c0      	movs	r3, #192	@ 0xc0
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	401a      	ands	r2, r3
 80022ce:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d4:	2317      	movs	r3, #23
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d105      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022de:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022e2:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022e4:	4936      	ldr	r1, [pc, #216]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e6:	400a      	ands	r2, r1
 80022e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f4:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	2203      	movs	r2, #3
 80022fa:	4393      	bics	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002304:	430a      	orrs	r2, r1
 8002306:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002312:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	220c      	movs	r2, #12
 8002318:	4393      	bics	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002322:	430a      	orrs	r2, r1
 8002324:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2204      	movs	r2, #4
 800232c:	4013      	ands	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	4a23      	ldr	r2, [pc, #140]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002336:	4013      	ands	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002340:	430a      	orrs	r2, r1
 8002342:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2208      	movs	r2, #8
 800234a:	4013      	ands	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002354:	4013      	ands	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800235e:	430a      	orrs	r2, r1
 8002360:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2240      	movs	r2, #64	@ 0x40
 8002368:	4013      	ands	r3, r2
 800236a:	d009      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800236c:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002370:	4a16      	ldr	r2, [pc, #88]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800237c:	430a      	orrs	r2, r1
 800237e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2280      	movs	r2, #128	@ 0x80
 8002386:	4013      	ands	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800239a:	430a      	orrs	r2, r1
 800239c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b006      	add	sp, #24
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	fffcffff 	.word	0xfffcffff
 80023b4:	fff7ffff 	.word	0xfff7ffff
 80023b8:	00001388 	.word	0x00001388
 80023bc:	ffcfffff 	.word	0xffcfffff
 80023c0:	efffffff 	.word	0xefffffff
 80023c4:	fffff3ff 	.word	0xfffff3ff
 80023c8:	ffffcfff 	.word	0xffffcfff
 80023cc:	fbffffff 	.word	0xfbffffff
 80023d0:	fff3ffff 	.word	0xfff3ffff

080023d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e044      	b.n	8002470 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d107      	bne.n	80023fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2278      	movs	r2, #120	@ 0x78
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7fe fc23 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2224      	movs	r2, #36	@ 0x24
 8002402:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2101      	movs	r1, #1
 8002410:	438a      	bics	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	0018      	movs	r0, r3
 8002418:	f000 f8d0 	bl	80025bc <UART_SetConfig>
 800241c:	0003      	movs	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e024      	b.n	8002470 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f000 fb47 	bl	8002ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	490d      	ldr	r1, [pc, #52]	@ (8002478 <HAL_UART_Init+0xa4>)
 8002442:	400a      	ands	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	212a      	movs	r1, #42	@ 0x2a
 8002452:	438a      	bics	r2, r1
 8002454:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0018      	movs	r0, r3
 800246a:	f000 fbdf 	bl	8002c2c <UART_CheckIdleState>
 800246e:	0003      	movs	r3, r0
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}
 8002478:	ffffb7ff 	.word	0xffffb7ff

0800247c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	1dbb      	adds	r3, r7, #6
 800248a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002490:	2b20      	cmp	r3, #32
 8002492:	d000      	beq.n	8002496 <HAL_UART_Transmit+0x1a>
 8002494:	e08c      	b.n	80025b0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_UART_Transmit+0x28>
 800249c:	1dbb      	adds	r3, r7, #6
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e084      	b.n	80025b2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	015b      	lsls	r3, r3, #5
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d109      	bne.n	80024c8 <HAL_UART_Transmit+0x4c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2201      	movs	r2, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	d001      	beq.n	80024c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e074      	b.n	80025b2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2284      	movs	r2, #132	@ 0x84
 80024cc:	2100      	movs	r1, #0
 80024ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2221      	movs	r2, #33	@ 0x21
 80024d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024d6:	f7fe fd53 	bl	8000f80 <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1dba      	adds	r2, r7, #6
 80024e2:	2150      	movs	r1, #80	@ 0x50
 80024e4:	8812      	ldrh	r2, [r2, #0]
 80024e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1dba      	adds	r2, r7, #6
 80024ec:	2152      	movs	r1, #82	@ 0x52
 80024ee:	8812      	ldrh	r2, [r2, #0]
 80024f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	015b      	lsls	r3, r3, #5
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d108      	bne.n	8002510 <HAL_UART_Transmit+0x94>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	e003      	b.n	8002518 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002518:	e02f      	b.n	800257a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	0013      	movs	r3, r2
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	@ 0x80
 8002528:	f000 fc28 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 800252c:	1e03      	subs	r3, r0, #0
 800252e:	d004      	beq.n	800253a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e03b      	b.n	80025b2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10b      	bne.n	8002558 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	001a      	movs	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	05d2      	lsls	r2, r2, #23
 800254c:	0dd2      	lsrs	r2, r2, #23
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	3302      	adds	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e007      	b.n	8002568 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2252      	movs	r2, #82	@ 0x52
 800256c:	5a9b      	ldrh	r3, [r3, r2]
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b299      	uxth	r1, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2252      	movs	r2, #82	@ 0x52
 8002578:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2252      	movs	r2, #82	@ 0x52
 800257e:	5a9b      	ldrh	r3, [r3, r2]
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1c9      	bne.n	800251a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	0013      	movs	r3, r2
 8002590:	2200      	movs	r2, #0
 8002592:	2140      	movs	r1, #64	@ 0x40
 8002594:	f000 fbf2 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 8002598:	1e03      	subs	r3, r0, #0
 800259a:	d004      	beq.n	80025a6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e005      	b.n	80025b2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b008      	add	sp, #32
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025bc:	b5b0      	push	{r4, r5, r7, lr}
 80025be:	b08e      	sub	sp, #56	@ 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025c4:	231a      	movs	r3, #26
 80025c6:	2218      	movs	r2, #24
 80025c8:	189b      	adds	r3, r3, r2
 80025ca:	19db      	adds	r3, r3, r7
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	431a      	orrs	r2, r3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4ac6      	ldr	r2, [pc, #792]	@ (8002908 <UART_SetConfig+0x34c>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4ac1      	ldr	r2, [pc, #772]	@ (800290c <UART_SetConfig+0x350>)
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4abb      	ldr	r2, [pc, #748]	@ (8002910 <UART_SetConfig+0x354>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800262c:	4313      	orrs	r3, r2
 800262e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4ab7      	ldr	r2, [pc, #732]	@ (8002914 <UART_SetConfig+0x358>)
 8002638:	4013      	ands	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002642:	430a      	orrs	r2, r1
 8002644:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4ab3      	ldr	r2, [pc, #716]	@ (8002918 <UART_SetConfig+0x35c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d131      	bne.n	80026b4 <UART_SetConfig+0xf8>
 8002650:	4bb2      	ldr	r3, [pc, #712]	@ (800291c <UART_SetConfig+0x360>)
 8002652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002654:	2203      	movs	r2, #3
 8002656:	4013      	ands	r3, r2
 8002658:	2b03      	cmp	r3, #3
 800265a:	d01d      	beq.n	8002698 <UART_SetConfig+0xdc>
 800265c:	d823      	bhi.n	80026a6 <UART_SetConfig+0xea>
 800265e:	2b02      	cmp	r3, #2
 8002660:	d00c      	beq.n	800267c <UART_SetConfig+0xc0>
 8002662:	d820      	bhi.n	80026a6 <UART_SetConfig+0xea>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <UART_SetConfig+0xb2>
 8002668:	2b01      	cmp	r3, #1
 800266a:	d00e      	beq.n	800268a <UART_SetConfig+0xce>
 800266c:	e01b      	b.n	80026a6 <UART_SetConfig+0xea>
 800266e:	231b      	movs	r3, #27
 8002670:	2218      	movs	r2, #24
 8002672:	189b      	adds	r3, r3, r2
 8002674:	19db      	adds	r3, r3, r7
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e09c      	b.n	80027b6 <UART_SetConfig+0x1fa>
 800267c:	231b      	movs	r3, #27
 800267e:	2218      	movs	r2, #24
 8002680:	189b      	adds	r3, r3, r2
 8002682:	19db      	adds	r3, r3, r7
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e095      	b.n	80027b6 <UART_SetConfig+0x1fa>
 800268a:	231b      	movs	r3, #27
 800268c:	2218      	movs	r2, #24
 800268e:	189b      	adds	r3, r3, r2
 8002690:	19db      	adds	r3, r3, r7
 8002692:	2204      	movs	r2, #4
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e08e      	b.n	80027b6 <UART_SetConfig+0x1fa>
 8002698:	231b      	movs	r3, #27
 800269a:	2218      	movs	r2, #24
 800269c:	189b      	adds	r3, r3, r2
 800269e:	19db      	adds	r3, r3, r7
 80026a0:	2208      	movs	r2, #8
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e087      	b.n	80027b6 <UART_SetConfig+0x1fa>
 80026a6:	231b      	movs	r3, #27
 80026a8:	2218      	movs	r2, #24
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	19db      	adds	r3, r3, r7
 80026ae:	2210      	movs	r2, #16
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e080      	b.n	80027b6 <UART_SetConfig+0x1fa>
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a99      	ldr	r2, [pc, #612]	@ (8002920 <UART_SetConfig+0x364>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d131      	bne.n	8002722 <UART_SetConfig+0x166>
 80026be:	4b97      	ldr	r3, [pc, #604]	@ (800291c <UART_SetConfig+0x360>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	220c      	movs	r2, #12
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d01d      	beq.n	8002706 <UART_SetConfig+0x14a>
 80026ca:	d823      	bhi.n	8002714 <UART_SetConfig+0x158>
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d00c      	beq.n	80026ea <UART_SetConfig+0x12e>
 80026d0:	d820      	bhi.n	8002714 <UART_SetConfig+0x158>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <UART_SetConfig+0x120>
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d00e      	beq.n	80026f8 <UART_SetConfig+0x13c>
 80026da:	e01b      	b.n	8002714 <UART_SetConfig+0x158>
 80026dc:	231b      	movs	r3, #27
 80026de:	2218      	movs	r2, #24
 80026e0:	189b      	adds	r3, r3, r2
 80026e2:	19db      	adds	r3, r3, r7
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e065      	b.n	80027b6 <UART_SetConfig+0x1fa>
 80026ea:	231b      	movs	r3, #27
 80026ec:	2218      	movs	r2, #24
 80026ee:	189b      	adds	r3, r3, r2
 80026f0:	19db      	adds	r3, r3, r7
 80026f2:	2202      	movs	r2, #2
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e05e      	b.n	80027b6 <UART_SetConfig+0x1fa>
 80026f8:	231b      	movs	r3, #27
 80026fa:	2218      	movs	r2, #24
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	19db      	adds	r3, r3, r7
 8002700:	2204      	movs	r2, #4
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e057      	b.n	80027b6 <UART_SetConfig+0x1fa>
 8002706:	231b      	movs	r3, #27
 8002708:	2218      	movs	r2, #24
 800270a:	189b      	adds	r3, r3, r2
 800270c:	19db      	adds	r3, r3, r7
 800270e:	2208      	movs	r2, #8
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e050      	b.n	80027b6 <UART_SetConfig+0x1fa>
 8002714:	231b      	movs	r3, #27
 8002716:	2218      	movs	r2, #24
 8002718:	189b      	adds	r3, r3, r2
 800271a:	19db      	adds	r3, r3, r7
 800271c:	2210      	movs	r2, #16
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e049      	b.n	80027b6 <UART_SetConfig+0x1fa>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a7a      	ldr	r2, [pc, #488]	@ (8002910 <UART_SetConfig+0x354>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d13e      	bne.n	80027aa <UART_SetConfig+0x1ee>
 800272c:	4b7b      	ldr	r3, [pc, #492]	@ (800291c <UART_SetConfig+0x360>)
 800272e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002730:	23c0      	movs	r3, #192	@ 0xc0
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	4013      	ands	r3, r2
 8002736:	22c0      	movs	r2, #192	@ 0xc0
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	4293      	cmp	r3, r2
 800273c:	d027      	beq.n	800278e <UART_SetConfig+0x1d2>
 800273e:	22c0      	movs	r2, #192	@ 0xc0
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	4293      	cmp	r3, r2
 8002744:	d82a      	bhi.n	800279c <UART_SetConfig+0x1e0>
 8002746:	2280      	movs	r2, #128	@ 0x80
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	4293      	cmp	r3, r2
 800274c:	d011      	beq.n	8002772 <UART_SetConfig+0x1b6>
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	4293      	cmp	r3, r2
 8002754:	d822      	bhi.n	800279c <UART_SetConfig+0x1e0>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <UART_SetConfig+0x1a8>
 800275a:	2280      	movs	r2, #128	@ 0x80
 800275c:	00d2      	lsls	r2, r2, #3
 800275e:	4293      	cmp	r3, r2
 8002760:	d00e      	beq.n	8002780 <UART_SetConfig+0x1c4>
 8002762:	e01b      	b.n	800279c <UART_SetConfig+0x1e0>
 8002764:	231b      	movs	r3, #27
 8002766:	2218      	movs	r2, #24
 8002768:	189b      	adds	r3, r3, r2
 800276a:	19db      	adds	r3, r3, r7
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e021      	b.n	80027b6 <UART_SetConfig+0x1fa>
 8002772:	231b      	movs	r3, #27
 8002774:	2218      	movs	r2, #24
 8002776:	189b      	adds	r3, r3, r2
 8002778:	19db      	adds	r3, r3, r7
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e01a      	b.n	80027b6 <UART_SetConfig+0x1fa>
 8002780:	231b      	movs	r3, #27
 8002782:	2218      	movs	r2, #24
 8002784:	189b      	adds	r3, r3, r2
 8002786:	19db      	adds	r3, r3, r7
 8002788:	2204      	movs	r2, #4
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e013      	b.n	80027b6 <UART_SetConfig+0x1fa>
 800278e:	231b      	movs	r3, #27
 8002790:	2218      	movs	r2, #24
 8002792:	189b      	adds	r3, r3, r2
 8002794:	19db      	adds	r3, r3, r7
 8002796:	2208      	movs	r2, #8
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e00c      	b.n	80027b6 <UART_SetConfig+0x1fa>
 800279c:	231b      	movs	r3, #27
 800279e:	2218      	movs	r2, #24
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	2210      	movs	r2, #16
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e005      	b.n	80027b6 <UART_SetConfig+0x1fa>
 80027aa:	231b      	movs	r3, #27
 80027ac:	2218      	movs	r2, #24
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	19db      	adds	r3, r3, r7
 80027b2:	2210      	movs	r2, #16
 80027b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a55      	ldr	r2, [pc, #340]	@ (8002910 <UART_SetConfig+0x354>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d000      	beq.n	80027c2 <UART_SetConfig+0x206>
 80027c0:	e084      	b.n	80028cc <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027c2:	231b      	movs	r3, #27
 80027c4:	2218      	movs	r2, #24
 80027c6:	189b      	adds	r3, r3, r2
 80027c8:	19db      	adds	r3, r3, r7
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d01d      	beq.n	800280c <UART_SetConfig+0x250>
 80027d0:	dc20      	bgt.n	8002814 <UART_SetConfig+0x258>
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d015      	beq.n	8002802 <UART_SetConfig+0x246>
 80027d6:	dc1d      	bgt.n	8002814 <UART_SetConfig+0x258>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <UART_SetConfig+0x226>
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d005      	beq.n	80027ec <UART_SetConfig+0x230>
 80027e0:	e018      	b.n	8002814 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e2:	f7ff fc3d 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80027e6:	0003      	movs	r3, r0
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027ea:	e01c      	b.n	8002826 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027ec:	4b4b      	ldr	r3, [pc, #300]	@ (800291c <UART_SetConfig+0x360>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2210      	movs	r2, #16
 80027f2:	4013      	ands	r3, r2
 80027f4:	d002      	beq.n	80027fc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <UART_SetConfig+0x368>)
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027fa:	e014      	b.n	8002826 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80027fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002928 <UART_SetConfig+0x36c>)
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002800:	e011      	b.n	8002826 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002802:	f7ff fb7d 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8002806:	0003      	movs	r3, r0
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800280a:	e00c      	b.n	8002826 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002812:	e008      	b.n	8002826 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002818:	231a      	movs	r3, #26
 800281a:	2218      	movs	r2, #24
 800281c:	189b      	adds	r3, r3, r2
 800281e:	19db      	adds	r3, r3, r7
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
        break;
 8002824:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d100      	bne.n	800282e <UART_SetConfig+0x272>
 800282c:	e132      	b.n	8002a94 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	0013      	movs	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	189b      	adds	r3, r3, r2
 8002838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800283a:	429a      	cmp	r2, r3
 800283c:	d305      	bcc.n	800284a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002846:	429a      	cmp	r2, r3
 8002848:	d906      	bls.n	8002858 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800284a:	231a      	movs	r3, #26
 800284c:	2218      	movs	r2, #24
 800284e:	189b      	adds	r3, r3, r2
 8002850:	19db      	adds	r3, r3, r7
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e11d      	b.n	8002a94 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	6939      	ldr	r1, [r7, #16]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	000b      	movs	r3, r1
 8002866:	0e1b      	lsrs	r3, r3, #24
 8002868:	0010      	movs	r0, r2
 800286a:	0205      	lsls	r5, r0, #8
 800286c:	431d      	orrs	r5, r3
 800286e:	000b      	movs	r3, r1
 8002870:	021c      	lsls	r4, r3, #8
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68b8      	ldr	r0, [r7, #8]
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	1900      	adds	r0, r0, r4
 8002884:	4169      	adcs	r1, r5
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f7fd fcce 	bl	8000234 <__aeabi_uldivmod>
 8002898:	0002      	movs	r2, r0
 800289a:	000b      	movs	r3, r1
 800289c:	0013      	movs	r3, r2
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028a2:	23c0      	movs	r3, #192	@ 0xc0
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d309      	bcc.n	80028be <UART_SetConfig+0x302>
 80028aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	035b      	lsls	r3, r3, #13
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d204      	bcs.n	80028be <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	e0ea      	b.n	8002a94 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80028be:	231a      	movs	r3, #26
 80028c0:	2218      	movs	r2, #24
 80028c2:	189b      	adds	r3, r3, r2
 80028c4:	19db      	adds	r3, r3, r7
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e0e3      	b.n	8002a94 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d000      	beq.n	80028da <UART_SetConfig+0x31e>
 80028d8:	e085      	b.n	80029e6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80028da:	231b      	movs	r3, #27
 80028dc:	2218      	movs	r2, #24
 80028de:	189b      	adds	r3, r3, r2
 80028e0:	19db      	adds	r3, r3, r7
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d837      	bhi.n	8002958 <UART_SetConfig+0x39c>
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	4b10      	ldr	r3, [pc, #64]	@ (800292c <UART_SetConfig+0x370>)
 80028ec:	18d3      	adds	r3, r2, r3
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f2:	f7ff fbb5 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80028f6:	0003      	movs	r3, r0
 80028f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028fa:	e036      	b.n	800296a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028fc:	f7ff fbc6 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 8002900:	0003      	movs	r3, r0
 8002902:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002904:	e031      	b.n	800296a <UART_SetConfig+0x3ae>
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	efff69f3 	.word	0xefff69f3
 800290c:	ffffcfff 	.word	0xffffcfff
 8002910:	40004800 	.word	0x40004800
 8002914:	fffff4ff 	.word	0xfffff4ff
 8002918:	40013800 	.word	0x40013800
 800291c:	40021000 	.word	0x40021000
 8002920:	40004400 	.word	0x40004400
 8002924:	003d0900 	.word	0x003d0900
 8002928:	00f42400 	.word	0x00f42400
 800292c:	08003e24 	.word	0x08003e24
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002930:	4b60      	ldr	r3, [pc, #384]	@ (8002ab4 <UART_SetConfig+0x4f8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2210      	movs	r2, #16
 8002936:	4013      	ands	r3, r2
 8002938:	d002      	beq.n	8002940 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800293a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab8 <UART_SetConfig+0x4fc>)
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800293e:	e014      	b.n	800296a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002940:	4b5e      	ldr	r3, [pc, #376]	@ (8002abc <UART_SetConfig+0x500>)
 8002942:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002944:	e011      	b.n	800296a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002946:	f7ff fadb 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 800294a:	0003      	movs	r3, r0
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800294e:	e00c      	b.n	800296a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002956:	e008      	b.n	800296a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800295c:	231a      	movs	r3, #26
 800295e:	2218      	movs	r2, #24
 8002960:	189b      	adds	r3, r3, r2
 8002962:	19db      	adds	r3, r3, r7
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
        break;
 8002968:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800296a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d100      	bne.n	8002972 <UART_SetConfig+0x3b6>
 8002970:	e090      	b.n	8002a94 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	005a      	lsls	r2, r3, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	18d2      	adds	r2, r2, r3
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	0019      	movs	r1, r3
 8002984:	0010      	movs	r0, r2
 8002986:	f7fd fbc9 	bl	800011c <__udivsi3>
 800298a:	0003      	movs	r3, r0
 800298c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002990:	2b0f      	cmp	r3, #15
 8002992:	d921      	bls.n	80029d8 <UART_SetConfig+0x41c>
 8002994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	025b      	lsls	r3, r3, #9
 800299a:	429a      	cmp	r2, r3
 800299c:	d21c      	bcs.n	80029d8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800299e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	200e      	movs	r0, #14
 80029a4:	2418      	movs	r4, #24
 80029a6:	1903      	adds	r3, r0, r4
 80029a8:	19db      	adds	r3, r3, r7
 80029aa:	210f      	movs	r1, #15
 80029ac:	438a      	bics	r2, r1
 80029ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2207      	movs	r2, #7
 80029b8:	4013      	ands	r3, r2
 80029ba:	b299      	uxth	r1, r3
 80029bc:	1903      	adds	r3, r0, r4
 80029be:	19db      	adds	r3, r3, r7
 80029c0:	1902      	adds	r2, r0, r4
 80029c2:	19d2      	adds	r2, r2, r7
 80029c4:	8812      	ldrh	r2, [r2, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1902      	adds	r2, r0, r4
 80029d0:	19d2      	adds	r2, r2, r7
 80029d2:	8812      	ldrh	r2, [r2, #0]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	e05d      	b.n	8002a94 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80029d8:	231a      	movs	r3, #26
 80029da:	2218      	movs	r2, #24
 80029dc:	189b      	adds	r3, r3, r2
 80029de:	19db      	adds	r3, r3, r7
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e056      	b.n	8002a94 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029e6:	231b      	movs	r3, #27
 80029e8:	2218      	movs	r2, #24
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	19db      	adds	r3, r3, r7
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d822      	bhi.n	8002a3a <UART_SetConfig+0x47e>
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	4b32      	ldr	r3, [pc, #200]	@ (8002ac0 <UART_SetConfig+0x504>)
 80029f8:	18d3      	adds	r3, r2, r3
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029fe:	f7ff fb2f 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8002a02:	0003      	movs	r3, r0
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a06:	e021      	b.n	8002a4c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff fb40 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a10:	e01c      	b.n	8002a4c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a12:	4b28      	ldr	r3, [pc, #160]	@ (8002ab4 <UART_SetConfig+0x4f8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2210      	movs	r2, #16
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d002      	beq.n	8002a22 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a1c:	4b26      	ldr	r3, [pc, #152]	@ (8002ab8 <UART_SetConfig+0x4fc>)
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a20:	e014      	b.n	8002a4c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002a22:	4b26      	ldr	r3, [pc, #152]	@ (8002abc <UART_SetConfig+0x500>)
 8002a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a26:	e011      	b.n	8002a4c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a28:	f7ff fa6a 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a30:	e00c      	b.n	8002a4c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a38:	e008      	b.n	8002a4c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002a3e:	231a      	movs	r3, #26
 8002a40:	2218      	movs	r2, #24
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	19db      	adds	r3, r3, r7
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
        break;
 8002a4a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d020      	beq.n	8002a94 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	085a      	lsrs	r2, r3, #1
 8002a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5a:	18d2      	adds	r2, r2, r3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0019      	movs	r1, r3
 8002a62:	0010      	movs	r0, r2
 8002a64:	f7fd fb5a 	bl	800011c <__udivsi3>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	d90a      	bls.n	8002a88 <UART_SetConfig+0x4cc>
 8002a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	025b      	lsls	r3, r3, #9
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d205      	bcs.n	8002a88 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	e005      	b.n	8002a94 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a88:	231a      	movs	r3, #26
 8002a8a:	2218      	movs	r2, #24
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	19db      	adds	r3, r3, r7
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2200      	movs	r2, #0
 8002a98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002aa0:	231a      	movs	r3, #26
 8002aa2:	2218      	movs	r2, #24
 8002aa4:	189b      	adds	r3, r3, r2
 8002aa6:	19db      	adds	r3, r3, r7
 8002aa8:	781b      	ldrb	r3, [r3, #0]
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b00e      	add	sp, #56	@ 0x38
 8002ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	003d0900 	.word	0x003d0900
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	08003e48 	.word	0x08003e48

08002ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a4a      	ldr	r2, [pc, #296]	@ (8002c08 <UART_AdvFeatureConfig+0x144>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	2202      	movs	r2, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	d00b      	beq.n	8002b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a43      	ldr	r2, [pc, #268]	@ (8002c0c <UART_AdvFeatureConfig+0x148>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	2204      	movs	r2, #4
 8002b16:	4013      	ands	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a3b      	ldr	r2, [pc, #236]	@ (8002c10 <UART_AdvFeatureConfig+0x14c>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	2208      	movs	r2, #8
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d00b      	beq.n	8002b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4a34      	ldr	r2, [pc, #208]	@ (8002c14 <UART_AdvFeatureConfig+0x150>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	2210      	movs	r2, #16
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00b      	beq.n	8002b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a2c      	ldr	r2, [pc, #176]	@ (8002c18 <UART_AdvFeatureConfig+0x154>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4a25      	ldr	r2, [pc, #148]	@ (8002c1c <UART_AdvFeatureConfig+0x158>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	2240      	movs	r2, #64	@ 0x40
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d01d      	beq.n	8002bde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <UART_AdvFeatureConfig+0x15c>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bbe:	2380      	movs	r3, #128	@ 0x80
 8002bc0:	035b      	lsls	r3, r3, #13
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10b      	bne.n	8002bde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <UART_AdvFeatureConfig+0x160>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	2280      	movs	r2, #128	@ 0x80
 8002be4:	4013      	ands	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a0e      	ldr	r2, [pc, #56]	@ (8002c28 <UART_AdvFeatureConfig+0x164>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }
}
 8002c00:	46c0      	nop			@ (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b002      	add	sp, #8
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	fffdffff 	.word	0xfffdffff
 8002c0c:	fffeffff 	.word	0xfffeffff
 8002c10:	fffbffff 	.word	0xfffbffff
 8002c14:	ffff7fff 	.word	0xffff7fff
 8002c18:	ffffefff 	.word	0xffffefff
 8002c1c:	ffffdfff 	.word	0xffffdfff
 8002c20:	ffefffff 	.word	0xffefffff
 8002c24:	ff9fffff 	.word	0xff9fffff
 8002c28:	fff7ffff 	.word	0xfff7ffff

08002c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b092      	sub	sp, #72	@ 0x48
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2284      	movs	r2, #132	@ 0x84
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c3c:	f7fe f9a0 	bl	8000f80 <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d12c      	bne.n	8002cac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c54:	2280      	movs	r2, #128	@ 0x80
 8002c56:	0391      	lsls	r1, r2, #14
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4a46      	ldr	r2, [pc, #280]	@ (8002d74 <UART_CheckIdleState+0x148>)
 8002c5c:	9200      	str	r2, [sp, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f000 f88c 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d021      	beq.n	8002cac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c68:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c72:	2301      	movs	r3, #1
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	f383 8810 	msr	PRIMASK, r3
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2180      	movs	r1, #128	@ 0x80
 8002c8a:	438a      	bics	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c94:	f383 8810 	msr	PRIMASK, r3
}
 8002c98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2278      	movs	r2, #120	@ 0x78
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e05f      	b.n	8002d6c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d146      	bne.n	8002d48 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cbc:	2280      	movs	r2, #128	@ 0x80
 8002cbe:	03d1      	lsls	r1, r2, #15
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d74 <UART_CheckIdleState+0x148>)
 8002cc4:	9200      	str	r2, [sp, #0]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f000 f858 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d03b      	beq.n	8002d48 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cda:	2301      	movs	r3, #1
 8002cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f383 8810 	msr	PRIMASK, r3
}
 8002ce4:	46c0      	nop			@ (mov r8, r8)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4921      	ldr	r1, [pc, #132]	@ (8002d78 <UART_CheckIdleState+0x14c>)
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f383 8810 	msr	PRIMASK, r3
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d02:	f3ef 8310 	mrs	r3, PRIMASK
 8002d06:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d08:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2101      	movs	r1, #1
 8002d24:	438a      	bics	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f383 8810 	msr	PRIMASK, r3
}
 8002d32:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2280      	movs	r2, #128	@ 0x80
 8002d38:	2120      	movs	r1, #32
 8002d3a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2278      	movs	r2, #120	@ 0x78
 8002d40:	2100      	movs	r1, #0
 8002d42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e011      	b.n	8002d6c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2280      	movs	r2, #128	@ 0x80
 8002d52:	2120      	movs	r1, #32
 8002d54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2278      	movs	r2, #120	@ 0x78
 8002d66:	2100      	movs	r1, #0
 8002d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b010      	add	sp, #64	@ 0x40
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	01ffffff 	.word	0x01ffffff
 8002d78:	fffffedf 	.word	0xfffffedf

08002d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8c:	e04b      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	3301      	adds	r3, #1
 8002d92:	d048      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7fe f8f4 	bl	8000f80 <HAL_GetTick>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <UART_WaitOnFlagUntilTimeout+0x2e>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e04b      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2204      	movs	r2, #4
 8002db6:	4013      	ands	r3, r2
 8002db8:	d035      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d111      	bne.n	8002dec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2208      	movs	r2, #8
 8002dce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 f83c 	bl	8002e50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2284      	movs	r2, #132	@ 0x84
 8002ddc:	2108      	movs	r1, #8
 8002dde:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2278      	movs	r2, #120	@ 0x78
 8002de4:	2100      	movs	r1, #0
 8002de6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e02c      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	401a      	ands	r2, r3
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d112      	bne.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2280      	movs	r2, #128	@ 0x80
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 f81f 	bl	8002e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2284      	movs	r2, #132	@ 0x84
 8002e16:	2120      	movs	r1, #32
 8002e18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2278      	movs	r2, #120	@ 0x78
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e00f      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	425a      	negs	r2, r3
 8002e36:	4153      	adcs	r3, r2
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d0a4      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b004      	add	sp, #16
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08e      	sub	sp, #56	@ 0x38
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e58:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e62:	2301      	movs	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f383 8810 	msr	PRIMASK, r3
}
 8002e6c:	46c0      	nop			@ (mov r8, r8)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4926      	ldr	r1, [pc, #152]	@ (8002f14 <UART_EndRxTransfer+0xc4>)
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8e:	623b      	str	r3, [r7, #32]
  return(result);
 8002e90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e92:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e94:	2301      	movs	r3, #1
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	f383 8810 	msr	PRIMASK, r3
}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	438a      	bics	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	f383 8810 	msr	PRIMASK, r3
}
 8002eba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d118      	bne.n	8002ef6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ece:	2301      	movs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2110      	movs	r1, #16
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2280      	movs	r2, #128	@ 0x80
 8002efa:	2120      	movs	r1, #32
 8002efc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b00e      	add	sp, #56	@ 0x38
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	fffffedf 	.word	0xfffffedf

08002f18 <std>:
 8002f18:	2300      	movs	r3, #0
 8002f1a:	b510      	push	{r4, lr}
 8002f1c:	0004      	movs	r4, r0
 8002f1e:	6003      	str	r3, [r0, #0]
 8002f20:	6043      	str	r3, [r0, #4]
 8002f22:	6083      	str	r3, [r0, #8]
 8002f24:	8181      	strh	r1, [r0, #12]
 8002f26:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f28:	81c2      	strh	r2, [r0, #14]
 8002f2a:	6103      	str	r3, [r0, #16]
 8002f2c:	6143      	str	r3, [r0, #20]
 8002f2e:	6183      	str	r3, [r0, #24]
 8002f30:	0019      	movs	r1, r3
 8002f32:	2208      	movs	r2, #8
 8002f34:	305c      	adds	r0, #92	@ 0x5c
 8002f36:	f000 f90f 	bl	8003158 <memset>
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <std+0x50>)
 8002f3c:	6224      	str	r4, [r4, #32]
 8002f3e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f40:	4b0a      	ldr	r3, [pc, #40]	@ (8002f6c <std+0x54>)
 8002f42:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f44:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <std+0x58>)
 8002f46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f48:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <std+0x5c>)
 8002f4a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <std+0x60>)
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d005      	beq.n	8002f5e <std+0x46>
 8002f52:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <std+0x64>)
 8002f54:	429c      	cmp	r4, r3
 8002f56:	d002      	beq.n	8002f5e <std+0x46>
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <std+0x68>)
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	d103      	bne.n	8002f66 <std+0x4e>
 8002f5e:	0020      	movs	r0, r4
 8002f60:	3058      	adds	r0, #88	@ 0x58
 8002f62:	f000 f979 	bl	8003258 <__retarget_lock_init_recursive>
 8002f66:	bd10      	pop	{r4, pc}
 8002f68:	080030c1 	.word	0x080030c1
 8002f6c:	080030e9 	.word	0x080030e9
 8002f70:	08003121 	.word	0x08003121
 8002f74:	0800314d 	.word	0x0800314d
 8002f78:	20000134 	.word	0x20000134
 8002f7c:	2000019c 	.word	0x2000019c
 8002f80:	20000204 	.word	0x20000204

08002f84 <stdio_exit_handler>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4a03      	ldr	r2, [pc, #12]	@ (8002f94 <stdio_exit_handler+0x10>)
 8002f88:	4903      	ldr	r1, [pc, #12]	@ (8002f98 <stdio_exit_handler+0x14>)
 8002f8a:	4804      	ldr	r0, [pc, #16]	@ (8002f9c <stdio_exit_handler+0x18>)
 8002f8c:	f000 f86c 	bl	8003068 <_fwalk_sglue>
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	2000000c 	.word	0x2000000c
 8002f98:	08003ae9 	.word	0x08003ae9
 8002f9c:	2000001c 	.word	0x2000001c

08002fa0 <cleanup_stdio>:
 8002fa0:	6841      	ldr	r1, [r0, #4]
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <cleanup_stdio+0x30>)
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	0004      	movs	r4, r0
 8002fa8:	4299      	cmp	r1, r3
 8002faa:	d001      	beq.n	8002fb0 <cleanup_stdio+0x10>
 8002fac:	f000 fd9c 	bl	8003ae8 <_fflush_r>
 8002fb0:	68a1      	ldr	r1, [r4, #8]
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <cleanup_stdio+0x34>)
 8002fb4:	4299      	cmp	r1, r3
 8002fb6:	d002      	beq.n	8002fbe <cleanup_stdio+0x1e>
 8002fb8:	0020      	movs	r0, r4
 8002fba:	f000 fd95 	bl	8003ae8 <_fflush_r>
 8002fbe:	68e1      	ldr	r1, [r4, #12]
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <cleanup_stdio+0x38>)
 8002fc2:	4299      	cmp	r1, r3
 8002fc4:	d002      	beq.n	8002fcc <cleanup_stdio+0x2c>
 8002fc6:	0020      	movs	r0, r4
 8002fc8:	f000 fd8e 	bl	8003ae8 <_fflush_r>
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	20000134 	.word	0x20000134
 8002fd4:	2000019c 	.word	0x2000019c
 8002fd8:	20000204 	.word	0x20000204

08002fdc <global_stdio_init.part.0>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <global_stdio_init.part.0+0x28>)
 8002fe0:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <global_stdio_init.part.0+0x2c>)
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	4809      	ldr	r0, [pc, #36]	@ (800300c <global_stdio_init.part.0+0x30>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f7ff ff95 	bl	8002f18 <std>
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2109      	movs	r1, #9
 8002ff2:	4807      	ldr	r0, [pc, #28]	@ (8003010 <global_stdio_init.part.0+0x34>)
 8002ff4:	f7ff ff90 	bl	8002f18 <std>
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	2112      	movs	r1, #18
 8002ffc:	4805      	ldr	r0, [pc, #20]	@ (8003014 <global_stdio_init.part.0+0x38>)
 8002ffe:	f7ff ff8b 	bl	8002f18 <std>
 8003002:	bd10      	pop	{r4, pc}
 8003004:	2000026c 	.word	0x2000026c
 8003008:	08002f85 	.word	0x08002f85
 800300c:	20000134 	.word	0x20000134
 8003010:	2000019c 	.word	0x2000019c
 8003014:	20000204 	.word	0x20000204

08003018 <__sfp_lock_acquire>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4802      	ldr	r0, [pc, #8]	@ (8003024 <__sfp_lock_acquire+0xc>)
 800301c:	f000 f91d 	bl	800325a <__retarget_lock_acquire_recursive>
 8003020:	bd10      	pop	{r4, pc}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	20000275 	.word	0x20000275

08003028 <__sfp_lock_release>:
 8003028:	b510      	push	{r4, lr}
 800302a:	4802      	ldr	r0, [pc, #8]	@ (8003034 <__sfp_lock_release+0xc>)
 800302c:	f000 f916 	bl	800325c <__retarget_lock_release_recursive>
 8003030:	bd10      	pop	{r4, pc}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	20000275 	.word	0x20000275

08003038 <__sinit>:
 8003038:	b510      	push	{r4, lr}
 800303a:	0004      	movs	r4, r0
 800303c:	f7ff ffec 	bl	8003018 <__sfp_lock_acquire>
 8003040:	6a23      	ldr	r3, [r4, #32]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <__sinit+0x14>
 8003046:	f7ff ffef 	bl	8003028 <__sfp_lock_release>
 800304a:	bd10      	pop	{r4, pc}
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <__sinit+0x28>)
 800304e:	6223      	str	r3, [r4, #32]
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <__sinit+0x2c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f6      	bne.n	8003046 <__sinit+0xe>
 8003058:	f7ff ffc0 	bl	8002fdc <global_stdio_init.part.0>
 800305c:	e7f3      	b.n	8003046 <__sinit+0xe>
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	08002fa1 	.word	0x08002fa1
 8003064:	2000026c 	.word	0x2000026c

08003068 <_fwalk_sglue>:
 8003068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800306a:	0014      	movs	r4, r2
 800306c:	2600      	movs	r6, #0
 800306e:	9000      	str	r0, [sp, #0]
 8003070:	9101      	str	r1, [sp, #4]
 8003072:	68a5      	ldr	r5, [r4, #8]
 8003074:	6867      	ldr	r7, [r4, #4]
 8003076:	3f01      	subs	r7, #1
 8003078:	d504      	bpl.n	8003084 <_fwalk_sglue+0x1c>
 800307a:	6824      	ldr	r4, [r4, #0]
 800307c:	2c00      	cmp	r4, #0
 800307e:	d1f8      	bne.n	8003072 <_fwalk_sglue+0xa>
 8003080:	0030      	movs	r0, r6
 8003082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003084:	89ab      	ldrh	r3, [r5, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d908      	bls.n	800309c <_fwalk_sglue+0x34>
 800308a:	220e      	movs	r2, #14
 800308c:	5eab      	ldrsh	r3, [r5, r2]
 800308e:	3301      	adds	r3, #1
 8003090:	d004      	beq.n	800309c <_fwalk_sglue+0x34>
 8003092:	0029      	movs	r1, r5
 8003094:	9800      	ldr	r0, [sp, #0]
 8003096:	9b01      	ldr	r3, [sp, #4]
 8003098:	4798      	blx	r3
 800309a:	4306      	orrs	r6, r0
 800309c:	3568      	adds	r5, #104	@ 0x68
 800309e:	e7ea      	b.n	8003076 <_fwalk_sglue+0xe>

080030a0 <iprintf>:
 80030a0:	b40f      	push	{r0, r1, r2, r3}
 80030a2:	b507      	push	{r0, r1, r2, lr}
 80030a4:	4905      	ldr	r1, [pc, #20]	@ (80030bc <iprintf+0x1c>)
 80030a6:	ab04      	add	r3, sp, #16
 80030a8:	6808      	ldr	r0, [r1, #0]
 80030aa:	cb04      	ldmia	r3!, {r2}
 80030ac:	6881      	ldr	r1, [r0, #8]
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	f000 f9fa 	bl	80034a8 <_vfiprintf_r>
 80030b4:	b003      	add	sp, #12
 80030b6:	bc08      	pop	{r3}
 80030b8:	b004      	add	sp, #16
 80030ba:	4718      	bx	r3
 80030bc:	20000018 	.word	0x20000018

080030c0 <__sread>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	000c      	movs	r4, r1
 80030c4:	250e      	movs	r5, #14
 80030c6:	5f49      	ldrsh	r1, [r1, r5]
 80030c8:	f000 f874 	bl	80031b4 <_read_r>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	db03      	blt.n	80030d8 <__sread+0x18>
 80030d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80030d2:	181b      	adds	r3, r3, r0
 80030d4:	6563      	str	r3, [r4, #84]	@ 0x54
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	89a3      	ldrh	r3, [r4, #12]
 80030da:	4a02      	ldr	r2, [pc, #8]	@ (80030e4 <__sread+0x24>)
 80030dc:	4013      	ands	r3, r2
 80030de:	81a3      	strh	r3, [r4, #12]
 80030e0:	e7f9      	b.n	80030d6 <__sread+0x16>
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	ffffefff 	.word	0xffffefff

080030e8 <__swrite>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	001f      	movs	r7, r3
 80030ec:	898b      	ldrh	r3, [r1, #12]
 80030ee:	0005      	movs	r5, r0
 80030f0:	000c      	movs	r4, r1
 80030f2:	0016      	movs	r6, r2
 80030f4:	05db      	lsls	r3, r3, #23
 80030f6:	d505      	bpl.n	8003104 <__swrite+0x1c>
 80030f8:	230e      	movs	r3, #14
 80030fa:	5ec9      	ldrsh	r1, [r1, r3]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2302      	movs	r3, #2
 8003100:	f000 f844 	bl	800318c <_lseek_r>
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	4a05      	ldr	r2, [pc, #20]	@ (800311c <__swrite+0x34>)
 8003108:	0028      	movs	r0, r5
 800310a:	4013      	ands	r3, r2
 800310c:	81a3      	strh	r3, [r4, #12]
 800310e:	0032      	movs	r2, r6
 8003110:	230e      	movs	r3, #14
 8003112:	5ee1      	ldrsh	r1, [r4, r3]
 8003114:	003b      	movs	r3, r7
 8003116:	f000 f861 	bl	80031dc <_write_r>
 800311a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800311c:	ffffefff 	.word	0xffffefff

08003120 <__sseek>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	000c      	movs	r4, r1
 8003124:	250e      	movs	r5, #14
 8003126:	5f49      	ldrsh	r1, [r1, r5]
 8003128:	f000 f830 	bl	800318c <_lseek_r>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	1c42      	adds	r2, r0, #1
 8003130:	d103      	bne.n	800313a <__sseek+0x1a>
 8003132:	4a05      	ldr	r2, [pc, #20]	@ (8003148 <__sseek+0x28>)
 8003134:	4013      	ands	r3, r2
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	bd70      	pop	{r4, r5, r6, pc}
 800313a:	2280      	movs	r2, #128	@ 0x80
 800313c:	0152      	lsls	r2, r2, #5
 800313e:	4313      	orrs	r3, r2
 8003140:	81a3      	strh	r3, [r4, #12]
 8003142:	6560      	str	r0, [r4, #84]	@ 0x54
 8003144:	e7f8      	b.n	8003138 <__sseek+0x18>
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	ffffefff 	.word	0xffffefff

0800314c <__sclose>:
 800314c:	b510      	push	{r4, lr}
 800314e:	230e      	movs	r3, #14
 8003150:	5ec9      	ldrsh	r1, [r1, r3]
 8003152:	f000 f809 	bl	8003168 <_close_r>
 8003156:	bd10      	pop	{r4, pc}

08003158 <memset>:
 8003158:	0003      	movs	r3, r0
 800315a:	1882      	adds	r2, r0, r2
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	7019      	strb	r1, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <_close_r>:
 8003168:	2300      	movs	r3, #0
 800316a:	b570      	push	{r4, r5, r6, lr}
 800316c:	4d06      	ldr	r5, [pc, #24]	@ (8003188 <_close_r+0x20>)
 800316e:	0004      	movs	r4, r0
 8003170:	0008      	movs	r0, r1
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	f7fd fe0c 	bl	8000d90 <_close>
 8003178:	1c43      	adds	r3, r0, #1
 800317a:	d103      	bne.n	8003184 <_close_r+0x1c>
 800317c:	682b      	ldr	r3, [r5, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d000      	beq.n	8003184 <_close_r+0x1c>
 8003182:	6023      	str	r3, [r4, #0]
 8003184:	bd70      	pop	{r4, r5, r6, pc}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	20000270 	.word	0x20000270

0800318c <_lseek_r>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	0004      	movs	r4, r0
 8003190:	0008      	movs	r0, r1
 8003192:	0011      	movs	r1, r2
 8003194:	001a      	movs	r2, r3
 8003196:	2300      	movs	r3, #0
 8003198:	4d05      	ldr	r5, [pc, #20]	@ (80031b0 <_lseek_r+0x24>)
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	f7fd fe19 	bl	8000dd2 <_lseek>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d103      	bne.n	80031ac <_lseek_r+0x20>
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d000      	beq.n	80031ac <_lseek_r+0x20>
 80031aa:	6023      	str	r3, [r4, #0]
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	20000270 	.word	0x20000270

080031b4 <_read_r>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	0004      	movs	r4, r0
 80031b8:	0008      	movs	r0, r1
 80031ba:	0011      	movs	r1, r2
 80031bc:	001a      	movs	r2, r3
 80031be:	2300      	movs	r3, #0
 80031c0:	4d05      	ldr	r5, [pc, #20]	@ (80031d8 <_read_r+0x24>)
 80031c2:	602b      	str	r3, [r5, #0]
 80031c4:	f7fd fdb0 	bl	8000d28 <_read>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d103      	bne.n	80031d4 <_read_r+0x20>
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d000      	beq.n	80031d4 <_read_r+0x20>
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	bd70      	pop	{r4, r5, r6, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	20000270 	.word	0x20000270

080031dc <_write_r>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	0004      	movs	r4, r0
 80031e0:	0008      	movs	r0, r1
 80031e2:	0011      	movs	r1, r2
 80031e4:	001a      	movs	r2, r3
 80031e6:	2300      	movs	r3, #0
 80031e8:	4d05      	ldr	r5, [pc, #20]	@ (8003200 <_write_r+0x24>)
 80031ea:	602b      	str	r3, [r5, #0]
 80031ec:	f7fd fdba 	bl	8000d64 <_write>
 80031f0:	1c43      	adds	r3, r0, #1
 80031f2:	d103      	bne.n	80031fc <_write_r+0x20>
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d000      	beq.n	80031fc <_write_r+0x20>
 80031fa:	6023      	str	r3, [r4, #0]
 80031fc:	bd70      	pop	{r4, r5, r6, pc}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	20000270 	.word	0x20000270

08003204 <__errno>:
 8003204:	4b01      	ldr	r3, [pc, #4]	@ (800320c <__errno+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	4770      	bx	lr
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	20000018 	.word	0x20000018

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2600      	movs	r6, #0
 8003214:	4c0c      	ldr	r4, [pc, #48]	@ (8003248 <__libc_init_array+0x38>)
 8003216:	4d0d      	ldr	r5, [pc, #52]	@ (800324c <__libc_init_array+0x3c>)
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	2600      	movs	r6, #0
 8003222:	f000 fddb 	bl	8003ddc <_init>
 8003226:	4c0a      	ldr	r4, [pc, #40]	@ (8003250 <__libc_init_array+0x40>)
 8003228:	4d0a      	ldr	r5, [pc, #40]	@ (8003254 <__libc_init_array+0x44>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	00b3      	lsls	r3, r6, #2
 8003236:	58eb      	ldr	r3, [r5, r3]
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	00b3      	lsls	r3, r6, #2
 8003240:	58eb      	ldr	r3, [r5, r3]
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003ea8 	.word	0x08003ea8
 800324c:	08003ea8 	.word	0x08003ea8
 8003250:	08003eac 	.word	0x08003eac
 8003254:	08003ea8 	.word	0x08003ea8

08003258 <__retarget_lock_init_recursive>:
 8003258:	4770      	bx	lr

0800325a <__retarget_lock_acquire_recursive>:
 800325a:	4770      	bx	lr

0800325c <__retarget_lock_release_recursive>:
 800325c:	4770      	bx	lr
	...

08003260 <_free_r>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	0005      	movs	r5, r0
 8003264:	1e0c      	subs	r4, r1, #0
 8003266:	d010      	beq.n	800328a <_free_r+0x2a>
 8003268:	3c04      	subs	r4, #4
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da00      	bge.n	8003272 <_free_r+0x12>
 8003270:	18e4      	adds	r4, r4, r3
 8003272:	0028      	movs	r0, r5
 8003274:	f000 f8e0 	bl	8003438 <__malloc_lock>
 8003278:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <_free_r+0x90>)
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <_free_r+0x2c>
 8003280:	6063      	str	r3, [r4, #4]
 8003282:	6014      	str	r4, [r2, #0]
 8003284:	0028      	movs	r0, r5
 8003286:	f000 f8df 	bl	8003448 <__malloc_unlock>
 800328a:	bd70      	pop	{r4, r5, r6, pc}
 800328c:	42a3      	cmp	r3, r4
 800328e:	d908      	bls.n	80032a2 <_free_r+0x42>
 8003290:	6820      	ldr	r0, [r4, #0]
 8003292:	1821      	adds	r1, r4, r0
 8003294:	428b      	cmp	r3, r1
 8003296:	d1f3      	bne.n	8003280 <_free_r+0x20>
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	1809      	adds	r1, r1, r0
 800329e:	6021      	str	r1, [r4, #0]
 80032a0:	e7ee      	b.n	8003280 <_free_r+0x20>
 80032a2:	001a      	movs	r2, r3
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <_free_r+0x4e>
 80032aa:	42a3      	cmp	r3, r4
 80032ac:	d9f9      	bls.n	80032a2 <_free_r+0x42>
 80032ae:	6811      	ldr	r1, [r2, #0]
 80032b0:	1850      	adds	r0, r2, r1
 80032b2:	42a0      	cmp	r0, r4
 80032b4:	d10b      	bne.n	80032ce <_free_r+0x6e>
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	1809      	adds	r1, r1, r0
 80032ba:	1850      	adds	r0, r2, r1
 80032bc:	6011      	str	r1, [r2, #0]
 80032be:	4283      	cmp	r3, r0
 80032c0:	d1e0      	bne.n	8003284 <_free_r+0x24>
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	1841      	adds	r1, r0, r1
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	6053      	str	r3, [r2, #4]
 80032cc:	e7da      	b.n	8003284 <_free_r+0x24>
 80032ce:	42a0      	cmp	r0, r4
 80032d0:	d902      	bls.n	80032d8 <_free_r+0x78>
 80032d2:	230c      	movs	r3, #12
 80032d4:	602b      	str	r3, [r5, #0]
 80032d6:	e7d5      	b.n	8003284 <_free_r+0x24>
 80032d8:	6820      	ldr	r0, [r4, #0]
 80032da:	1821      	adds	r1, r4, r0
 80032dc:	428b      	cmp	r3, r1
 80032de:	d103      	bne.n	80032e8 <_free_r+0x88>
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	1809      	adds	r1, r1, r0
 80032e6:	6021      	str	r1, [r4, #0]
 80032e8:	6063      	str	r3, [r4, #4]
 80032ea:	6054      	str	r4, [r2, #4]
 80032ec:	e7ca      	b.n	8003284 <_free_r+0x24>
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	2000027c 	.word	0x2000027c

080032f4 <sbrk_aligned>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003334 <sbrk_aligned+0x40>)
 80032f8:	000d      	movs	r5, r1
 80032fa:	6831      	ldr	r1, [r6, #0]
 80032fc:	0004      	movs	r4, r0
 80032fe:	2900      	cmp	r1, #0
 8003300:	d102      	bne.n	8003308 <sbrk_aligned+0x14>
 8003302:	f000 fcbd 	bl	8003c80 <_sbrk_r>
 8003306:	6030      	str	r0, [r6, #0]
 8003308:	0029      	movs	r1, r5
 800330a:	0020      	movs	r0, r4
 800330c:	f000 fcb8 	bl	8003c80 <_sbrk_r>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	d103      	bne.n	800331c <sbrk_aligned+0x28>
 8003314:	2501      	movs	r5, #1
 8003316:	426d      	negs	r5, r5
 8003318:	0028      	movs	r0, r5
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	2303      	movs	r3, #3
 800331e:	1cc5      	adds	r5, r0, #3
 8003320:	439d      	bics	r5, r3
 8003322:	42a8      	cmp	r0, r5
 8003324:	d0f8      	beq.n	8003318 <sbrk_aligned+0x24>
 8003326:	1a29      	subs	r1, r5, r0
 8003328:	0020      	movs	r0, r4
 800332a:	f000 fca9 	bl	8003c80 <_sbrk_r>
 800332e:	3001      	adds	r0, #1
 8003330:	d1f2      	bne.n	8003318 <sbrk_aligned+0x24>
 8003332:	e7ef      	b.n	8003314 <sbrk_aligned+0x20>
 8003334:	20000278 	.word	0x20000278

08003338 <_malloc_r>:
 8003338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800333a:	2203      	movs	r2, #3
 800333c:	1ccb      	adds	r3, r1, #3
 800333e:	4393      	bics	r3, r2
 8003340:	3308      	adds	r3, #8
 8003342:	0005      	movs	r5, r0
 8003344:	001f      	movs	r7, r3
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d234      	bcs.n	80033b4 <_malloc_r+0x7c>
 800334a:	270c      	movs	r7, #12
 800334c:	42b9      	cmp	r1, r7
 800334e:	d833      	bhi.n	80033b8 <_malloc_r+0x80>
 8003350:	0028      	movs	r0, r5
 8003352:	f000 f871 	bl	8003438 <__malloc_lock>
 8003356:	4e37      	ldr	r6, [pc, #220]	@ (8003434 <_malloc_r+0xfc>)
 8003358:	6833      	ldr	r3, [r6, #0]
 800335a:	001c      	movs	r4, r3
 800335c:	2c00      	cmp	r4, #0
 800335e:	d12f      	bne.n	80033c0 <_malloc_r+0x88>
 8003360:	0039      	movs	r1, r7
 8003362:	0028      	movs	r0, r5
 8003364:	f7ff ffc6 	bl	80032f4 <sbrk_aligned>
 8003368:	0004      	movs	r4, r0
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d15f      	bne.n	800342e <_malloc_r+0xf6>
 800336e:	6834      	ldr	r4, [r6, #0]
 8003370:	9400      	str	r4, [sp, #0]
 8003372:	9b00      	ldr	r3, [sp, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d14a      	bne.n	800340e <_malloc_r+0xd6>
 8003378:	2c00      	cmp	r4, #0
 800337a:	d052      	beq.n	8003422 <_malloc_r+0xea>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	0028      	movs	r0, r5
 8003380:	18e3      	adds	r3, r4, r3
 8003382:	9900      	ldr	r1, [sp, #0]
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	f000 fc7b 	bl	8003c80 <_sbrk_r>
 800338a:	9b01      	ldr	r3, [sp, #4]
 800338c:	4283      	cmp	r3, r0
 800338e:	d148      	bne.n	8003422 <_malloc_r+0xea>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	0028      	movs	r0, r5
 8003394:	1aff      	subs	r7, r7, r3
 8003396:	0039      	movs	r1, r7
 8003398:	f7ff ffac 	bl	80032f4 <sbrk_aligned>
 800339c:	3001      	adds	r0, #1
 800339e:	d040      	beq.n	8003422 <_malloc_r+0xea>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	19db      	adds	r3, r3, r7
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	6833      	ldr	r3, [r6, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	2a00      	cmp	r2, #0
 80033ac:	d133      	bne.n	8003416 <_malloc_r+0xde>
 80033ae:	9b00      	ldr	r3, [sp, #0]
 80033b0:	6033      	str	r3, [r6, #0]
 80033b2:	e019      	b.n	80033e8 <_malloc_r+0xb0>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	dac9      	bge.n	800334c <_malloc_r+0x14>
 80033b8:	230c      	movs	r3, #12
 80033ba:	602b      	str	r3, [r5, #0]
 80033bc:	2000      	movs	r0, #0
 80033be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033c0:	6821      	ldr	r1, [r4, #0]
 80033c2:	1bc9      	subs	r1, r1, r7
 80033c4:	d420      	bmi.n	8003408 <_malloc_r+0xd0>
 80033c6:	290b      	cmp	r1, #11
 80033c8:	d90a      	bls.n	80033e0 <_malloc_r+0xa8>
 80033ca:	19e2      	adds	r2, r4, r7
 80033cc:	6027      	str	r7, [r4, #0]
 80033ce:	42a3      	cmp	r3, r4
 80033d0:	d104      	bne.n	80033dc <_malloc_r+0xa4>
 80033d2:	6032      	str	r2, [r6, #0]
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	6011      	str	r1, [r2, #0]
 80033d8:	6053      	str	r3, [r2, #4]
 80033da:	e005      	b.n	80033e8 <_malloc_r+0xb0>
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	e7f9      	b.n	80033d4 <_malloc_r+0x9c>
 80033e0:	6862      	ldr	r2, [r4, #4]
 80033e2:	42a3      	cmp	r3, r4
 80033e4:	d10e      	bne.n	8003404 <_malloc_r+0xcc>
 80033e6:	6032      	str	r2, [r6, #0]
 80033e8:	0028      	movs	r0, r5
 80033ea:	f000 f82d 	bl	8003448 <__malloc_unlock>
 80033ee:	0020      	movs	r0, r4
 80033f0:	2207      	movs	r2, #7
 80033f2:	300b      	adds	r0, #11
 80033f4:	1d23      	adds	r3, r4, #4
 80033f6:	4390      	bics	r0, r2
 80033f8:	1ac2      	subs	r2, r0, r3
 80033fa:	4298      	cmp	r0, r3
 80033fc:	d0df      	beq.n	80033be <_malloc_r+0x86>
 80033fe:	1a1b      	subs	r3, r3, r0
 8003400:	50a3      	str	r3, [r4, r2]
 8003402:	e7dc      	b.n	80033be <_malloc_r+0x86>
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	e7ef      	b.n	80033e8 <_malloc_r+0xb0>
 8003408:	0023      	movs	r3, r4
 800340a:	6864      	ldr	r4, [r4, #4]
 800340c:	e7a6      	b.n	800335c <_malloc_r+0x24>
 800340e:	9c00      	ldr	r4, [sp, #0]
 8003410:	6863      	ldr	r3, [r4, #4]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	e7ad      	b.n	8003372 <_malloc_r+0x3a>
 8003416:	001a      	movs	r2, r3
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	42a3      	cmp	r3, r4
 800341c:	d1fb      	bne.n	8003416 <_malloc_r+0xde>
 800341e:	2300      	movs	r3, #0
 8003420:	e7da      	b.n	80033d8 <_malloc_r+0xa0>
 8003422:	230c      	movs	r3, #12
 8003424:	0028      	movs	r0, r5
 8003426:	602b      	str	r3, [r5, #0]
 8003428:	f000 f80e 	bl	8003448 <__malloc_unlock>
 800342c:	e7c6      	b.n	80033bc <_malloc_r+0x84>
 800342e:	6007      	str	r7, [r0, #0]
 8003430:	e7da      	b.n	80033e8 <_malloc_r+0xb0>
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	2000027c 	.word	0x2000027c

08003438 <__malloc_lock>:
 8003438:	b510      	push	{r4, lr}
 800343a:	4802      	ldr	r0, [pc, #8]	@ (8003444 <__malloc_lock+0xc>)
 800343c:	f7ff ff0d 	bl	800325a <__retarget_lock_acquire_recursive>
 8003440:	bd10      	pop	{r4, pc}
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	20000274 	.word	0x20000274

08003448 <__malloc_unlock>:
 8003448:	b510      	push	{r4, lr}
 800344a:	4802      	ldr	r0, [pc, #8]	@ (8003454 <__malloc_unlock+0xc>)
 800344c:	f7ff ff06 	bl	800325c <__retarget_lock_release_recursive>
 8003450:	bd10      	pop	{r4, pc}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	20000274 	.word	0x20000274

08003458 <__sfputc_r>:
 8003458:	6893      	ldr	r3, [r2, #8]
 800345a:	b510      	push	{r4, lr}
 800345c:	3b01      	subs	r3, #1
 800345e:	6093      	str	r3, [r2, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	da04      	bge.n	800346e <__sfputc_r+0x16>
 8003464:	6994      	ldr	r4, [r2, #24]
 8003466:	42a3      	cmp	r3, r4
 8003468:	db07      	blt.n	800347a <__sfputc_r+0x22>
 800346a:	290a      	cmp	r1, #10
 800346c:	d005      	beq.n	800347a <__sfputc_r+0x22>
 800346e:	6813      	ldr	r3, [r2, #0]
 8003470:	1c58      	adds	r0, r3, #1
 8003472:	6010      	str	r0, [r2, #0]
 8003474:	7019      	strb	r1, [r3, #0]
 8003476:	0008      	movs	r0, r1
 8003478:	bd10      	pop	{r4, pc}
 800347a:	f000 fb60 	bl	8003b3e <__swbuf_r>
 800347e:	0001      	movs	r1, r0
 8003480:	e7f9      	b.n	8003476 <__sfputc_r+0x1e>

08003482 <__sfputs_r>:
 8003482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003484:	0006      	movs	r6, r0
 8003486:	000f      	movs	r7, r1
 8003488:	0014      	movs	r4, r2
 800348a:	18d5      	adds	r5, r2, r3
 800348c:	42ac      	cmp	r4, r5
 800348e:	d101      	bne.n	8003494 <__sfputs_r+0x12>
 8003490:	2000      	movs	r0, #0
 8003492:	e007      	b.n	80034a4 <__sfputs_r+0x22>
 8003494:	7821      	ldrb	r1, [r4, #0]
 8003496:	003a      	movs	r2, r7
 8003498:	0030      	movs	r0, r6
 800349a:	f7ff ffdd 	bl	8003458 <__sfputc_r>
 800349e:	3401      	adds	r4, #1
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d1f3      	bne.n	800348c <__sfputs_r+0xa>
 80034a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034a8 <_vfiprintf_r>:
 80034a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034aa:	b0a1      	sub	sp, #132	@ 0x84
 80034ac:	000f      	movs	r7, r1
 80034ae:	0015      	movs	r5, r2
 80034b0:	001e      	movs	r6, r3
 80034b2:	9003      	str	r0, [sp, #12]
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d004      	beq.n	80034c2 <_vfiprintf_r+0x1a>
 80034b8:	6a03      	ldr	r3, [r0, #32]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <_vfiprintf_r+0x1a>
 80034be:	f7ff fdbb 	bl	8003038 <__sinit>
 80034c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034c4:	07db      	lsls	r3, r3, #31
 80034c6:	d405      	bmi.n	80034d4 <_vfiprintf_r+0x2c>
 80034c8:	89bb      	ldrh	r3, [r7, #12]
 80034ca:	059b      	lsls	r3, r3, #22
 80034cc:	d402      	bmi.n	80034d4 <_vfiprintf_r+0x2c>
 80034ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80034d0:	f7ff fec3 	bl	800325a <__retarget_lock_acquire_recursive>
 80034d4:	89bb      	ldrh	r3, [r7, #12]
 80034d6:	071b      	lsls	r3, r3, #28
 80034d8:	d502      	bpl.n	80034e0 <_vfiprintf_r+0x38>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <_vfiprintf_r+0x60>
 80034e0:	0039      	movs	r1, r7
 80034e2:	9803      	ldr	r0, [sp, #12]
 80034e4:	f000 fb6e 	bl	8003bc4 <__swsetup_r>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d00d      	beq.n	8003508 <_vfiprintf_r+0x60>
 80034ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034ee:	07db      	lsls	r3, r3, #31
 80034f0:	d503      	bpl.n	80034fa <_vfiprintf_r+0x52>
 80034f2:	2001      	movs	r0, #1
 80034f4:	4240      	negs	r0, r0
 80034f6:	b021      	add	sp, #132	@ 0x84
 80034f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fa:	89bb      	ldrh	r3, [r7, #12]
 80034fc:	059b      	lsls	r3, r3, #22
 80034fe:	d4f8      	bmi.n	80034f2 <_vfiprintf_r+0x4a>
 8003500:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003502:	f7ff feab 	bl	800325c <__retarget_lock_release_recursive>
 8003506:	e7f4      	b.n	80034f2 <_vfiprintf_r+0x4a>
 8003508:	2300      	movs	r3, #0
 800350a:	ac08      	add	r4, sp, #32
 800350c:	6163      	str	r3, [r4, #20]
 800350e:	3320      	adds	r3, #32
 8003510:	7663      	strb	r3, [r4, #25]
 8003512:	3310      	adds	r3, #16
 8003514:	76a3      	strb	r3, [r4, #26]
 8003516:	9607      	str	r6, [sp, #28]
 8003518:	002e      	movs	r6, r5
 800351a:	7833      	ldrb	r3, [r6, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <_vfiprintf_r+0x7c>
 8003520:	2b25      	cmp	r3, #37	@ 0x25
 8003522:	d148      	bne.n	80035b6 <_vfiprintf_r+0x10e>
 8003524:	1b73      	subs	r3, r6, r5
 8003526:	9305      	str	r3, [sp, #20]
 8003528:	42ae      	cmp	r6, r5
 800352a:	d00b      	beq.n	8003544 <_vfiprintf_r+0x9c>
 800352c:	002a      	movs	r2, r5
 800352e:	0039      	movs	r1, r7
 8003530:	9803      	ldr	r0, [sp, #12]
 8003532:	f7ff ffa6 	bl	8003482 <__sfputs_r>
 8003536:	3001      	adds	r0, #1
 8003538:	d100      	bne.n	800353c <_vfiprintf_r+0x94>
 800353a:	e0ae      	b.n	800369a <_vfiprintf_r+0x1f2>
 800353c:	6963      	ldr	r3, [r4, #20]
 800353e:	9a05      	ldr	r2, [sp, #20]
 8003540:	189b      	adds	r3, r3, r2
 8003542:	6163      	str	r3, [r4, #20]
 8003544:	7833      	ldrb	r3, [r6, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d100      	bne.n	800354c <_vfiprintf_r+0xa4>
 800354a:	e0a6      	b.n	800369a <_vfiprintf_r+0x1f2>
 800354c:	2201      	movs	r2, #1
 800354e:	2300      	movs	r3, #0
 8003550:	4252      	negs	r2, r2
 8003552:	6062      	str	r2, [r4, #4]
 8003554:	a904      	add	r1, sp, #16
 8003556:	3254      	adds	r2, #84	@ 0x54
 8003558:	1852      	adds	r2, r2, r1
 800355a:	1c75      	adds	r5, r6, #1
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	60e3      	str	r3, [r4, #12]
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	7013      	strb	r3, [r2, #0]
 8003564:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003566:	4b59      	ldr	r3, [pc, #356]	@ (80036cc <_vfiprintf_r+0x224>)
 8003568:	2205      	movs	r2, #5
 800356a:	0018      	movs	r0, r3
 800356c:	7829      	ldrb	r1, [r5, #0]
 800356e:	9305      	str	r3, [sp, #20]
 8003570:	f000 fb98 	bl	8003ca4 <memchr>
 8003574:	1c6e      	adds	r6, r5, #1
 8003576:	2800      	cmp	r0, #0
 8003578:	d11f      	bne.n	80035ba <_vfiprintf_r+0x112>
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	06d3      	lsls	r3, r2, #27
 800357e:	d504      	bpl.n	800358a <_vfiprintf_r+0xe2>
 8003580:	2353      	movs	r3, #83	@ 0x53
 8003582:	a904      	add	r1, sp, #16
 8003584:	185b      	adds	r3, r3, r1
 8003586:	2120      	movs	r1, #32
 8003588:	7019      	strb	r1, [r3, #0]
 800358a:	0713      	lsls	r3, r2, #28
 800358c:	d504      	bpl.n	8003598 <_vfiprintf_r+0xf0>
 800358e:	2353      	movs	r3, #83	@ 0x53
 8003590:	a904      	add	r1, sp, #16
 8003592:	185b      	adds	r3, r3, r1
 8003594:	212b      	movs	r1, #43	@ 0x2b
 8003596:	7019      	strb	r1, [r3, #0]
 8003598:	782b      	ldrb	r3, [r5, #0]
 800359a:	2b2a      	cmp	r3, #42	@ 0x2a
 800359c:	d016      	beq.n	80035cc <_vfiprintf_r+0x124>
 800359e:	002e      	movs	r6, r5
 80035a0:	2100      	movs	r1, #0
 80035a2:	200a      	movs	r0, #10
 80035a4:	68e3      	ldr	r3, [r4, #12]
 80035a6:	7832      	ldrb	r2, [r6, #0]
 80035a8:	1c75      	adds	r5, r6, #1
 80035aa:	3a30      	subs	r2, #48	@ 0x30
 80035ac:	2a09      	cmp	r2, #9
 80035ae:	d950      	bls.n	8003652 <_vfiprintf_r+0x1aa>
 80035b0:	2900      	cmp	r1, #0
 80035b2:	d111      	bne.n	80035d8 <_vfiprintf_r+0x130>
 80035b4:	e017      	b.n	80035e6 <_vfiprintf_r+0x13e>
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7af      	b.n	800351a <_vfiprintf_r+0x72>
 80035ba:	9b05      	ldr	r3, [sp, #20]
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	1ac0      	subs	r0, r0, r3
 80035c0:	2301      	movs	r3, #1
 80035c2:	4083      	lsls	r3, r0
 80035c4:	4313      	orrs	r3, r2
 80035c6:	0035      	movs	r5, r6
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	e7cc      	b.n	8003566 <_vfiprintf_r+0xbe>
 80035cc:	9b07      	ldr	r3, [sp, #28]
 80035ce:	1d19      	adds	r1, r3, #4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	9107      	str	r1, [sp, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db01      	blt.n	80035dc <_vfiprintf_r+0x134>
 80035d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80035da:	e004      	b.n	80035e6 <_vfiprintf_r+0x13e>
 80035dc:	425b      	negs	r3, r3
 80035de:	60e3      	str	r3, [r4, #12]
 80035e0:	2302      	movs	r3, #2
 80035e2:	4313      	orrs	r3, r2
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	7833      	ldrb	r3, [r6, #0]
 80035e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80035ea:	d10c      	bne.n	8003606 <_vfiprintf_r+0x15e>
 80035ec:	7873      	ldrb	r3, [r6, #1]
 80035ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80035f0:	d134      	bne.n	800365c <_vfiprintf_r+0x1b4>
 80035f2:	9b07      	ldr	r3, [sp, #28]
 80035f4:	3602      	adds	r6, #2
 80035f6:	1d1a      	adds	r2, r3, #4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	9207      	str	r2, [sp, #28]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	da01      	bge.n	8003604 <_vfiprintf_r+0x15c>
 8003600:	2301      	movs	r3, #1
 8003602:	425b      	negs	r3, r3
 8003604:	9309      	str	r3, [sp, #36]	@ 0x24
 8003606:	4d32      	ldr	r5, [pc, #200]	@ (80036d0 <_vfiprintf_r+0x228>)
 8003608:	2203      	movs	r2, #3
 800360a:	0028      	movs	r0, r5
 800360c:	7831      	ldrb	r1, [r6, #0]
 800360e:	f000 fb49 	bl	8003ca4 <memchr>
 8003612:	2800      	cmp	r0, #0
 8003614:	d006      	beq.n	8003624 <_vfiprintf_r+0x17c>
 8003616:	2340      	movs	r3, #64	@ 0x40
 8003618:	1b40      	subs	r0, r0, r5
 800361a:	4083      	lsls	r3, r0
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	3601      	adds	r6, #1
 8003620:	4313      	orrs	r3, r2
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	7831      	ldrb	r1, [r6, #0]
 8003626:	2206      	movs	r2, #6
 8003628:	482a      	ldr	r0, [pc, #168]	@ (80036d4 <_vfiprintf_r+0x22c>)
 800362a:	1c75      	adds	r5, r6, #1
 800362c:	7621      	strb	r1, [r4, #24]
 800362e:	f000 fb39 	bl	8003ca4 <memchr>
 8003632:	2800      	cmp	r0, #0
 8003634:	d040      	beq.n	80036b8 <_vfiprintf_r+0x210>
 8003636:	4b28      	ldr	r3, [pc, #160]	@ (80036d8 <_vfiprintf_r+0x230>)
 8003638:	2b00      	cmp	r3, #0
 800363a:	d122      	bne.n	8003682 <_vfiprintf_r+0x1da>
 800363c:	2207      	movs	r2, #7
 800363e:	9b07      	ldr	r3, [sp, #28]
 8003640:	3307      	adds	r3, #7
 8003642:	4393      	bics	r3, r2
 8003644:	3308      	adds	r3, #8
 8003646:	9307      	str	r3, [sp, #28]
 8003648:	6963      	ldr	r3, [r4, #20]
 800364a:	9a04      	ldr	r2, [sp, #16]
 800364c:	189b      	adds	r3, r3, r2
 800364e:	6163      	str	r3, [r4, #20]
 8003650:	e762      	b.n	8003518 <_vfiprintf_r+0x70>
 8003652:	4343      	muls	r3, r0
 8003654:	002e      	movs	r6, r5
 8003656:	2101      	movs	r1, #1
 8003658:	189b      	adds	r3, r3, r2
 800365a:	e7a4      	b.n	80035a6 <_vfiprintf_r+0xfe>
 800365c:	2300      	movs	r3, #0
 800365e:	200a      	movs	r0, #10
 8003660:	0019      	movs	r1, r3
 8003662:	3601      	adds	r6, #1
 8003664:	6063      	str	r3, [r4, #4]
 8003666:	7832      	ldrb	r2, [r6, #0]
 8003668:	1c75      	adds	r5, r6, #1
 800366a:	3a30      	subs	r2, #48	@ 0x30
 800366c:	2a09      	cmp	r2, #9
 800366e:	d903      	bls.n	8003678 <_vfiprintf_r+0x1d0>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0c8      	beq.n	8003606 <_vfiprintf_r+0x15e>
 8003674:	9109      	str	r1, [sp, #36]	@ 0x24
 8003676:	e7c6      	b.n	8003606 <_vfiprintf_r+0x15e>
 8003678:	4341      	muls	r1, r0
 800367a:	002e      	movs	r6, r5
 800367c:	2301      	movs	r3, #1
 800367e:	1889      	adds	r1, r1, r2
 8003680:	e7f1      	b.n	8003666 <_vfiprintf_r+0x1be>
 8003682:	aa07      	add	r2, sp, #28
 8003684:	9200      	str	r2, [sp, #0]
 8003686:	0021      	movs	r1, r4
 8003688:	003a      	movs	r2, r7
 800368a:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <_vfiprintf_r+0x234>)
 800368c:	9803      	ldr	r0, [sp, #12]
 800368e:	e000      	b.n	8003692 <_vfiprintf_r+0x1ea>
 8003690:	bf00      	nop
 8003692:	9004      	str	r0, [sp, #16]
 8003694:	9b04      	ldr	r3, [sp, #16]
 8003696:	3301      	adds	r3, #1
 8003698:	d1d6      	bne.n	8003648 <_vfiprintf_r+0x1a0>
 800369a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800369c:	07db      	lsls	r3, r3, #31
 800369e:	d405      	bmi.n	80036ac <_vfiprintf_r+0x204>
 80036a0:	89bb      	ldrh	r3, [r7, #12]
 80036a2:	059b      	lsls	r3, r3, #22
 80036a4:	d402      	bmi.n	80036ac <_vfiprintf_r+0x204>
 80036a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036a8:	f7ff fdd8 	bl	800325c <__retarget_lock_release_recursive>
 80036ac:	89bb      	ldrh	r3, [r7, #12]
 80036ae:	065b      	lsls	r3, r3, #25
 80036b0:	d500      	bpl.n	80036b4 <_vfiprintf_r+0x20c>
 80036b2:	e71e      	b.n	80034f2 <_vfiprintf_r+0x4a>
 80036b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80036b6:	e71e      	b.n	80034f6 <_vfiprintf_r+0x4e>
 80036b8:	aa07      	add	r2, sp, #28
 80036ba:	9200      	str	r2, [sp, #0]
 80036bc:	0021      	movs	r1, r4
 80036be:	003a      	movs	r2, r7
 80036c0:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <_vfiprintf_r+0x234>)
 80036c2:	9803      	ldr	r0, [sp, #12]
 80036c4:	f000 f87c 	bl	80037c0 <_printf_i>
 80036c8:	e7e3      	b.n	8003692 <_vfiprintf_r+0x1ea>
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	08003e6c 	.word	0x08003e6c
 80036d0:	08003e72 	.word	0x08003e72
 80036d4:	08003e76 	.word	0x08003e76
 80036d8:	00000000 	.word	0x00000000
 80036dc:	08003483 	.word	0x08003483

080036e0 <_printf_common>:
 80036e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036e2:	0016      	movs	r6, r2
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	688a      	ldr	r2, [r1, #8]
 80036e8:	690b      	ldr	r3, [r1, #16]
 80036ea:	000c      	movs	r4, r1
 80036ec:	9000      	str	r0, [sp, #0]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	da00      	bge.n	80036f4 <_printf_common+0x14>
 80036f2:	0013      	movs	r3, r2
 80036f4:	0022      	movs	r2, r4
 80036f6:	6033      	str	r3, [r6, #0]
 80036f8:	3243      	adds	r2, #67	@ 0x43
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	2a00      	cmp	r2, #0
 80036fe:	d001      	beq.n	8003704 <_printf_common+0x24>
 8003700:	3301      	adds	r3, #1
 8003702:	6033      	str	r3, [r6, #0]
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	069b      	lsls	r3, r3, #26
 8003708:	d502      	bpl.n	8003710 <_printf_common+0x30>
 800370a:	6833      	ldr	r3, [r6, #0]
 800370c:	3302      	adds	r3, #2
 800370e:	6033      	str	r3, [r6, #0]
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	2306      	movs	r3, #6
 8003714:	0015      	movs	r5, r2
 8003716:	401d      	ands	r5, r3
 8003718:	421a      	tst	r2, r3
 800371a:	d027      	beq.n	800376c <_printf_common+0x8c>
 800371c:	0023      	movs	r3, r4
 800371e:	3343      	adds	r3, #67	@ 0x43
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	1e5a      	subs	r2, r3, #1
 8003724:	4193      	sbcs	r3, r2
 8003726:	6822      	ldr	r2, [r4, #0]
 8003728:	0692      	lsls	r2, r2, #26
 800372a:	d430      	bmi.n	800378e <_printf_common+0xae>
 800372c:	0022      	movs	r2, r4
 800372e:	9901      	ldr	r1, [sp, #4]
 8003730:	9800      	ldr	r0, [sp, #0]
 8003732:	9d08      	ldr	r5, [sp, #32]
 8003734:	3243      	adds	r2, #67	@ 0x43
 8003736:	47a8      	blx	r5
 8003738:	3001      	adds	r0, #1
 800373a:	d025      	beq.n	8003788 <_printf_common+0xa8>
 800373c:	2206      	movs	r2, #6
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	2500      	movs	r5, #0
 8003742:	4013      	ands	r3, r2
 8003744:	2b04      	cmp	r3, #4
 8003746:	d105      	bne.n	8003754 <_printf_common+0x74>
 8003748:	6833      	ldr	r3, [r6, #0]
 800374a:	68e5      	ldr	r5, [r4, #12]
 800374c:	1aed      	subs	r5, r5, r3
 800374e:	43eb      	mvns	r3, r5
 8003750:	17db      	asrs	r3, r3, #31
 8003752:	401d      	ands	r5, r3
 8003754:	68a3      	ldr	r3, [r4, #8]
 8003756:	6922      	ldr	r2, [r4, #16]
 8003758:	4293      	cmp	r3, r2
 800375a:	dd01      	ble.n	8003760 <_printf_common+0x80>
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	18ed      	adds	r5, r5, r3
 8003760:	2600      	movs	r6, #0
 8003762:	42b5      	cmp	r5, r6
 8003764:	d120      	bne.n	80037a8 <_printf_common+0xc8>
 8003766:	2000      	movs	r0, #0
 8003768:	e010      	b.n	800378c <_printf_common+0xac>
 800376a:	3501      	adds	r5, #1
 800376c:	68e3      	ldr	r3, [r4, #12]
 800376e:	6832      	ldr	r2, [r6, #0]
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	42ab      	cmp	r3, r5
 8003774:	ddd2      	ble.n	800371c <_printf_common+0x3c>
 8003776:	0022      	movs	r2, r4
 8003778:	2301      	movs	r3, #1
 800377a:	9901      	ldr	r1, [sp, #4]
 800377c:	9800      	ldr	r0, [sp, #0]
 800377e:	9f08      	ldr	r7, [sp, #32]
 8003780:	3219      	adds	r2, #25
 8003782:	47b8      	blx	r7
 8003784:	3001      	adds	r0, #1
 8003786:	d1f0      	bne.n	800376a <_printf_common+0x8a>
 8003788:	2001      	movs	r0, #1
 800378a:	4240      	negs	r0, r0
 800378c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800378e:	2030      	movs	r0, #48	@ 0x30
 8003790:	18e1      	adds	r1, r4, r3
 8003792:	3143      	adds	r1, #67	@ 0x43
 8003794:	7008      	strb	r0, [r1, #0]
 8003796:	0021      	movs	r1, r4
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	3145      	adds	r1, #69	@ 0x45
 800379c:	7809      	ldrb	r1, [r1, #0]
 800379e:	18a2      	adds	r2, r4, r2
 80037a0:	3243      	adds	r2, #67	@ 0x43
 80037a2:	3302      	adds	r3, #2
 80037a4:	7011      	strb	r1, [r2, #0]
 80037a6:	e7c1      	b.n	800372c <_printf_common+0x4c>
 80037a8:	0022      	movs	r2, r4
 80037aa:	2301      	movs	r3, #1
 80037ac:	9901      	ldr	r1, [sp, #4]
 80037ae:	9800      	ldr	r0, [sp, #0]
 80037b0:	9f08      	ldr	r7, [sp, #32]
 80037b2:	321a      	adds	r2, #26
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	d0e6      	beq.n	8003788 <_printf_common+0xa8>
 80037ba:	3601      	adds	r6, #1
 80037bc:	e7d1      	b.n	8003762 <_printf_common+0x82>
	...

080037c0 <_printf_i>:
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b08b      	sub	sp, #44	@ 0x2c
 80037c4:	9206      	str	r2, [sp, #24]
 80037c6:	000a      	movs	r2, r1
 80037c8:	3243      	adds	r2, #67	@ 0x43
 80037ca:	9307      	str	r3, [sp, #28]
 80037cc:	9005      	str	r0, [sp, #20]
 80037ce:	9203      	str	r2, [sp, #12]
 80037d0:	7e0a      	ldrb	r2, [r1, #24]
 80037d2:	000c      	movs	r4, r1
 80037d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80037d6:	2a78      	cmp	r2, #120	@ 0x78
 80037d8:	d809      	bhi.n	80037ee <_printf_i+0x2e>
 80037da:	2a62      	cmp	r2, #98	@ 0x62
 80037dc:	d80b      	bhi.n	80037f6 <_printf_i+0x36>
 80037de:	2a00      	cmp	r2, #0
 80037e0:	d100      	bne.n	80037e4 <_printf_i+0x24>
 80037e2:	e0bc      	b.n	800395e <_printf_i+0x19e>
 80037e4:	497b      	ldr	r1, [pc, #492]	@ (80039d4 <_printf_i+0x214>)
 80037e6:	9104      	str	r1, [sp, #16]
 80037e8:	2a58      	cmp	r2, #88	@ 0x58
 80037ea:	d100      	bne.n	80037ee <_printf_i+0x2e>
 80037ec:	e090      	b.n	8003910 <_printf_i+0x150>
 80037ee:	0025      	movs	r5, r4
 80037f0:	3542      	adds	r5, #66	@ 0x42
 80037f2:	702a      	strb	r2, [r5, #0]
 80037f4:	e022      	b.n	800383c <_printf_i+0x7c>
 80037f6:	0010      	movs	r0, r2
 80037f8:	3863      	subs	r0, #99	@ 0x63
 80037fa:	2815      	cmp	r0, #21
 80037fc:	d8f7      	bhi.n	80037ee <_printf_i+0x2e>
 80037fe:	f7fc fc83 	bl	8000108 <__gnu_thumb1_case_shi>
 8003802:	0016      	.short	0x0016
 8003804:	fff6001f 	.word	0xfff6001f
 8003808:	fff6fff6 	.word	0xfff6fff6
 800380c:	001ffff6 	.word	0x001ffff6
 8003810:	fff6fff6 	.word	0xfff6fff6
 8003814:	fff6fff6 	.word	0xfff6fff6
 8003818:	003600a1 	.word	0x003600a1
 800381c:	fff60080 	.word	0xfff60080
 8003820:	00b2fff6 	.word	0x00b2fff6
 8003824:	0036fff6 	.word	0x0036fff6
 8003828:	fff6fff6 	.word	0xfff6fff6
 800382c:	0084      	.short	0x0084
 800382e:	0025      	movs	r5, r4
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	3542      	adds	r5, #66	@ 0x42
 8003834:	1d11      	adds	r1, r2, #4
 8003836:	6019      	str	r1, [r3, #0]
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	702b      	strb	r3, [r5, #0]
 800383c:	2301      	movs	r3, #1
 800383e:	e0a0      	b.n	8003982 <_printf_i+0x1c2>
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	6809      	ldr	r1, [r1, #0]
 8003844:	1d02      	adds	r2, r0, #4
 8003846:	060d      	lsls	r5, r1, #24
 8003848:	d50b      	bpl.n	8003862 <_printf_i+0xa2>
 800384a:	6806      	ldr	r6, [r0, #0]
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	2e00      	cmp	r6, #0
 8003850:	da03      	bge.n	800385a <_printf_i+0x9a>
 8003852:	232d      	movs	r3, #45	@ 0x2d
 8003854:	9a03      	ldr	r2, [sp, #12]
 8003856:	4276      	negs	r6, r6
 8003858:	7013      	strb	r3, [r2, #0]
 800385a:	4b5e      	ldr	r3, [pc, #376]	@ (80039d4 <_printf_i+0x214>)
 800385c:	270a      	movs	r7, #10
 800385e:	9304      	str	r3, [sp, #16]
 8003860:	e018      	b.n	8003894 <_printf_i+0xd4>
 8003862:	6806      	ldr	r6, [r0, #0]
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	0649      	lsls	r1, r1, #25
 8003868:	d5f1      	bpl.n	800384e <_printf_i+0x8e>
 800386a:	b236      	sxth	r6, r6
 800386c:	e7ef      	b.n	800384e <_printf_i+0x8e>
 800386e:	6808      	ldr	r0, [r1, #0]
 8003870:	6819      	ldr	r1, [r3, #0]
 8003872:	c940      	ldmia	r1!, {r6}
 8003874:	0605      	lsls	r5, r0, #24
 8003876:	d402      	bmi.n	800387e <_printf_i+0xbe>
 8003878:	0640      	lsls	r0, r0, #25
 800387a:	d500      	bpl.n	800387e <_printf_i+0xbe>
 800387c:	b2b6      	uxth	r6, r6
 800387e:	6019      	str	r1, [r3, #0]
 8003880:	4b54      	ldr	r3, [pc, #336]	@ (80039d4 <_printf_i+0x214>)
 8003882:	270a      	movs	r7, #10
 8003884:	9304      	str	r3, [sp, #16]
 8003886:	2a6f      	cmp	r2, #111	@ 0x6f
 8003888:	d100      	bne.n	800388c <_printf_i+0xcc>
 800388a:	3f02      	subs	r7, #2
 800388c:	0023      	movs	r3, r4
 800388e:	2200      	movs	r2, #0
 8003890:	3343      	adds	r3, #67	@ 0x43
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	6863      	ldr	r3, [r4, #4]
 8003896:	60a3      	str	r3, [r4, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	db03      	blt.n	80038a4 <_printf_i+0xe4>
 800389c:	2104      	movs	r1, #4
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	438a      	bics	r2, r1
 80038a2:	6022      	str	r2, [r4, #0]
 80038a4:	2e00      	cmp	r6, #0
 80038a6:	d102      	bne.n	80038ae <_printf_i+0xee>
 80038a8:	9d03      	ldr	r5, [sp, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00c      	beq.n	80038c8 <_printf_i+0x108>
 80038ae:	9d03      	ldr	r5, [sp, #12]
 80038b0:	0030      	movs	r0, r6
 80038b2:	0039      	movs	r1, r7
 80038b4:	f7fc fcb8 	bl	8000228 <__aeabi_uidivmod>
 80038b8:	9b04      	ldr	r3, [sp, #16]
 80038ba:	3d01      	subs	r5, #1
 80038bc:	5c5b      	ldrb	r3, [r3, r1]
 80038be:	702b      	strb	r3, [r5, #0]
 80038c0:	0033      	movs	r3, r6
 80038c2:	0006      	movs	r6, r0
 80038c4:	429f      	cmp	r7, r3
 80038c6:	d9f3      	bls.n	80038b0 <_printf_i+0xf0>
 80038c8:	2f08      	cmp	r7, #8
 80038ca:	d109      	bne.n	80038e0 <_printf_i+0x120>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	07db      	lsls	r3, r3, #31
 80038d0:	d506      	bpl.n	80038e0 <_printf_i+0x120>
 80038d2:	6862      	ldr	r2, [r4, #4]
 80038d4:	6923      	ldr	r3, [r4, #16]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	dc02      	bgt.n	80038e0 <_printf_i+0x120>
 80038da:	2330      	movs	r3, #48	@ 0x30
 80038dc:	3d01      	subs	r5, #1
 80038de:	702b      	strb	r3, [r5, #0]
 80038e0:	9b03      	ldr	r3, [sp, #12]
 80038e2:	1b5b      	subs	r3, r3, r5
 80038e4:	6123      	str	r3, [r4, #16]
 80038e6:	9b07      	ldr	r3, [sp, #28]
 80038e8:	0021      	movs	r1, r4
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	9805      	ldr	r0, [sp, #20]
 80038ee:	9b06      	ldr	r3, [sp, #24]
 80038f0:	aa09      	add	r2, sp, #36	@ 0x24
 80038f2:	f7ff fef5 	bl	80036e0 <_printf_common>
 80038f6:	3001      	adds	r0, #1
 80038f8:	d148      	bne.n	800398c <_printf_i+0x1cc>
 80038fa:	2001      	movs	r0, #1
 80038fc:	4240      	negs	r0, r0
 80038fe:	b00b      	add	sp, #44	@ 0x2c
 8003900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003902:	2220      	movs	r2, #32
 8003904:	6809      	ldr	r1, [r1, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	6022      	str	r2, [r4, #0]
 800390a:	2278      	movs	r2, #120	@ 0x78
 800390c:	4932      	ldr	r1, [pc, #200]	@ (80039d8 <_printf_i+0x218>)
 800390e:	9104      	str	r1, [sp, #16]
 8003910:	0021      	movs	r1, r4
 8003912:	3145      	adds	r1, #69	@ 0x45
 8003914:	700a      	strb	r2, [r1, #0]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	6822      	ldr	r2, [r4, #0]
 800391a:	c940      	ldmia	r1!, {r6}
 800391c:	0610      	lsls	r0, r2, #24
 800391e:	d402      	bmi.n	8003926 <_printf_i+0x166>
 8003920:	0650      	lsls	r0, r2, #25
 8003922:	d500      	bpl.n	8003926 <_printf_i+0x166>
 8003924:	b2b6      	uxth	r6, r6
 8003926:	6019      	str	r1, [r3, #0]
 8003928:	07d3      	lsls	r3, r2, #31
 800392a:	d502      	bpl.n	8003932 <_printf_i+0x172>
 800392c:	2320      	movs	r3, #32
 800392e:	4313      	orrs	r3, r2
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	2e00      	cmp	r6, #0
 8003934:	d001      	beq.n	800393a <_printf_i+0x17a>
 8003936:	2710      	movs	r7, #16
 8003938:	e7a8      	b.n	800388c <_printf_i+0xcc>
 800393a:	2220      	movs	r2, #32
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	4393      	bics	r3, r2
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	e7f8      	b.n	8003936 <_printf_i+0x176>
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	680d      	ldr	r5, [r1, #0]
 8003948:	1d10      	adds	r0, r2, #4
 800394a:	6949      	ldr	r1, [r1, #20]
 800394c:	6018      	str	r0, [r3, #0]
 800394e:	6813      	ldr	r3, [r2, #0]
 8003950:	062e      	lsls	r6, r5, #24
 8003952:	d501      	bpl.n	8003958 <_printf_i+0x198>
 8003954:	6019      	str	r1, [r3, #0]
 8003956:	e002      	b.n	800395e <_printf_i+0x19e>
 8003958:	066d      	lsls	r5, r5, #25
 800395a:	d5fb      	bpl.n	8003954 <_printf_i+0x194>
 800395c:	8019      	strh	r1, [r3, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	9d03      	ldr	r5, [sp, #12]
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	e7bf      	b.n	80038e6 <_printf_i+0x126>
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	1d11      	adds	r1, r2, #4
 800396a:	6019      	str	r1, [r3, #0]
 800396c:	6815      	ldr	r5, [r2, #0]
 800396e:	2100      	movs	r1, #0
 8003970:	0028      	movs	r0, r5
 8003972:	6862      	ldr	r2, [r4, #4]
 8003974:	f000 f996 	bl	8003ca4 <memchr>
 8003978:	2800      	cmp	r0, #0
 800397a:	d001      	beq.n	8003980 <_printf_i+0x1c0>
 800397c:	1b40      	subs	r0, r0, r5
 800397e:	6060      	str	r0, [r4, #4]
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	6123      	str	r3, [r4, #16]
 8003984:	2300      	movs	r3, #0
 8003986:	9a03      	ldr	r2, [sp, #12]
 8003988:	7013      	strb	r3, [r2, #0]
 800398a:	e7ac      	b.n	80038e6 <_printf_i+0x126>
 800398c:	002a      	movs	r2, r5
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	9906      	ldr	r1, [sp, #24]
 8003992:	9805      	ldr	r0, [sp, #20]
 8003994:	9d07      	ldr	r5, [sp, #28]
 8003996:	47a8      	blx	r5
 8003998:	3001      	adds	r0, #1
 800399a:	d0ae      	beq.n	80038fa <_printf_i+0x13a>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	079b      	lsls	r3, r3, #30
 80039a0:	d415      	bmi.n	80039ce <_printf_i+0x20e>
 80039a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039a4:	68e0      	ldr	r0, [r4, #12]
 80039a6:	4298      	cmp	r0, r3
 80039a8:	daa9      	bge.n	80038fe <_printf_i+0x13e>
 80039aa:	0018      	movs	r0, r3
 80039ac:	e7a7      	b.n	80038fe <_printf_i+0x13e>
 80039ae:	0022      	movs	r2, r4
 80039b0:	2301      	movs	r3, #1
 80039b2:	9906      	ldr	r1, [sp, #24]
 80039b4:	9805      	ldr	r0, [sp, #20]
 80039b6:	9e07      	ldr	r6, [sp, #28]
 80039b8:	3219      	adds	r2, #25
 80039ba:	47b0      	blx	r6
 80039bc:	3001      	adds	r0, #1
 80039be:	d09c      	beq.n	80038fa <_printf_i+0x13a>
 80039c0:	3501      	adds	r5, #1
 80039c2:	68e3      	ldr	r3, [r4, #12]
 80039c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	42ab      	cmp	r3, r5
 80039ca:	dcf0      	bgt.n	80039ae <_printf_i+0x1ee>
 80039cc:	e7e9      	b.n	80039a2 <_printf_i+0x1e2>
 80039ce:	2500      	movs	r5, #0
 80039d0:	e7f7      	b.n	80039c2 <_printf_i+0x202>
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	08003e7d 	.word	0x08003e7d
 80039d8:	08003e8e 	.word	0x08003e8e

080039dc <__sflush_r>:
 80039dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039de:	220c      	movs	r2, #12
 80039e0:	5e8b      	ldrsh	r3, [r1, r2]
 80039e2:	0005      	movs	r5, r0
 80039e4:	000c      	movs	r4, r1
 80039e6:	071a      	lsls	r2, r3, #28
 80039e8:	d456      	bmi.n	8003a98 <__sflush_r+0xbc>
 80039ea:	684a      	ldr	r2, [r1, #4]
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	dc02      	bgt.n	80039f6 <__sflush_r+0x1a>
 80039f0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	dd4e      	ble.n	8003a94 <__sflush_r+0xb8>
 80039f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80039f8:	2f00      	cmp	r7, #0
 80039fa:	d04b      	beq.n	8003a94 <__sflush_r+0xb8>
 80039fc:	2200      	movs	r2, #0
 80039fe:	2080      	movs	r0, #128	@ 0x80
 8003a00:	682e      	ldr	r6, [r5, #0]
 8003a02:	602a      	str	r2, [r5, #0]
 8003a04:	001a      	movs	r2, r3
 8003a06:	0140      	lsls	r0, r0, #5
 8003a08:	6a21      	ldr	r1, [r4, #32]
 8003a0a:	4002      	ands	r2, r0
 8003a0c:	4203      	tst	r3, r0
 8003a0e:	d033      	beq.n	8003a78 <__sflush_r+0x9c>
 8003a10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	075b      	lsls	r3, r3, #29
 8003a16:	d506      	bpl.n	8003a26 <__sflush_r+0x4a>
 8003a18:	6863      	ldr	r3, [r4, #4]
 8003a1a:	1ad2      	subs	r2, r2, r3
 8003a1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <__sflush_r+0x4a>
 8003a22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a24:	1ad2      	subs	r2, r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	0028      	movs	r0, r5
 8003a2a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003a2c:	6a21      	ldr	r1, [r4, #32]
 8003a2e:	47b8      	blx	r7
 8003a30:	89a2      	ldrh	r2, [r4, #12]
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	d106      	bne.n	8003a44 <__sflush_r+0x68>
 8003a36:	6829      	ldr	r1, [r5, #0]
 8003a38:	291d      	cmp	r1, #29
 8003a3a:	d846      	bhi.n	8003aca <__sflush_r+0xee>
 8003a3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ae4 <__sflush_r+0x108>)
 8003a3e:	410b      	asrs	r3, r1
 8003a40:	07db      	lsls	r3, r3, #31
 8003a42:	d442      	bmi.n	8003aca <__sflush_r+0xee>
 8003a44:	2300      	movs	r3, #0
 8003a46:	6063      	str	r3, [r4, #4]
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	04d2      	lsls	r2, r2, #19
 8003a4e:	d505      	bpl.n	8003a5c <__sflush_r+0x80>
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d102      	bne.n	8003a5a <__sflush_r+0x7e>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d100      	bne.n	8003a5c <__sflush_r+0x80>
 8003a5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a5e:	602e      	str	r6, [r5, #0]
 8003a60:	2900      	cmp	r1, #0
 8003a62:	d017      	beq.n	8003a94 <__sflush_r+0xb8>
 8003a64:	0023      	movs	r3, r4
 8003a66:	3344      	adds	r3, #68	@ 0x44
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <__sflush_r+0x96>
 8003a6c:	0028      	movs	r0, r5
 8003a6e:	f7ff fbf7 	bl	8003260 <_free_r>
 8003a72:	2300      	movs	r3, #0
 8003a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a76:	e00d      	b.n	8003a94 <__sflush_r+0xb8>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	0028      	movs	r0, r5
 8003a7c:	47b8      	blx	r7
 8003a7e:	0002      	movs	r2, r0
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	d1c6      	bne.n	8003a12 <__sflush_r+0x36>
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0c3      	beq.n	8003a12 <__sflush_r+0x36>
 8003a8a:	2b1d      	cmp	r3, #29
 8003a8c:	d001      	beq.n	8003a92 <__sflush_r+0xb6>
 8003a8e:	2b16      	cmp	r3, #22
 8003a90:	d11a      	bne.n	8003ac8 <__sflush_r+0xec>
 8003a92:	602e      	str	r6, [r5, #0]
 8003a94:	2000      	movs	r0, #0
 8003a96:	e01e      	b.n	8003ad6 <__sflush_r+0xfa>
 8003a98:	690e      	ldr	r6, [r1, #16]
 8003a9a:	2e00      	cmp	r6, #0
 8003a9c:	d0fa      	beq.n	8003a94 <__sflush_r+0xb8>
 8003a9e:	680f      	ldr	r7, [r1, #0]
 8003aa0:	600e      	str	r6, [r1, #0]
 8003aa2:	1bba      	subs	r2, r7, r6
 8003aa4:	9201      	str	r2, [sp, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	079b      	lsls	r3, r3, #30
 8003aaa:	d100      	bne.n	8003aae <__sflush_r+0xd2>
 8003aac:	694a      	ldr	r2, [r1, #20]
 8003aae:	60a2      	str	r2, [r4, #8]
 8003ab0:	9b01      	ldr	r3, [sp, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	ddee      	ble.n	8003a94 <__sflush_r+0xb8>
 8003ab6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003ab8:	0032      	movs	r2, r6
 8003aba:	001f      	movs	r7, r3
 8003abc:	0028      	movs	r0, r5
 8003abe:	9b01      	ldr	r3, [sp, #4]
 8003ac0:	6a21      	ldr	r1, [r4, #32]
 8003ac2:	47b8      	blx	r7
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	dc07      	bgt.n	8003ad8 <__sflush_r+0xfc>
 8003ac8:	89a2      	ldrh	r2, [r4, #12]
 8003aca:	2340      	movs	r3, #64	@ 0x40
 8003acc:	2001      	movs	r0, #1
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	b21b      	sxth	r3, r3
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	4240      	negs	r0, r0
 8003ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ad8:	9b01      	ldr	r3, [sp, #4]
 8003ada:	1836      	adds	r6, r6, r0
 8003adc:	1a1b      	subs	r3, r3, r0
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	e7e6      	b.n	8003ab0 <__sflush_r+0xd4>
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	dfbffffe 	.word	0xdfbffffe

08003ae8 <_fflush_r>:
 8003ae8:	690b      	ldr	r3, [r1, #16]
 8003aea:	b570      	push	{r4, r5, r6, lr}
 8003aec:	0005      	movs	r5, r0
 8003aee:	000c      	movs	r4, r1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <_fflush_r+0x12>
 8003af4:	2500      	movs	r5, #0
 8003af6:	0028      	movs	r0, r5
 8003af8:	bd70      	pop	{r4, r5, r6, pc}
 8003afa:	2800      	cmp	r0, #0
 8003afc:	d004      	beq.n	8003b08 <_fflush_r+0x20>
 8003afe:	6a03      	ldr	r3, [r0, #32]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <_fflush_r+0x20>
 8003b04:	f7ff fa98 	bl	8003038 <__sinit>
 8003b08:	220c      	movs	r2, #12
 8003b0a:	5ea3      	ldrsh	r3, [r4, r2]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f1      	beq.n	8003af4 <_fflush_r+0xc>
 8003b10:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b12:	07d2      	lsls	r2, r2, #31
 8003b14:	d404      	bmi.n	8003b20 <_fflush_r+0x38>
 8003b16:	059b      	lsls	r3, r3, #22
 8003b18:	d402      	bmi.n	8003b20 <_fflush_r+0x38>
 8003b1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b1c:	f7ff fb9d 	bl	800325a <__retarget_lock_acquire_recursive>
 8003b20:	0028      	movs	r0, r5
 8003b22:	0021      	movs	r1, r4
 8003b24:	f7ff ff5a 	bl	80039dc <__sflush_r>
 8003b28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b2a:	0005      	movs	r5, r0
 8003b2c:	07db      	lsls	r3, r3, #31
 8003b2e:	d4e2      	bmi.n	8003af6 <_fflush_r+0xe>
 8003b30:	89a3      	ldrh	r3, [r4, #12]
 8003b32:	059b      	lsls	r3, r3, #22
 8003b34:	d4df      	bmi.n	8003af6 <_fflush_r+0xe>
 8003b36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b38:	f7ff fb90 	bl	800325c <__retarget_lock_release_recursive>
 8003b3c:	e7db      	b.n	8003af6 <_fflush_r+0xe>

08003b3e <__swbuf_r>:
 8003b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b40:	0006      	movs	r6, r0
 8003b42:	000d      	movs	r5, r1
 8003b44:	0014      	movs	r4, r2
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d004      	beq.n	8003b54 <__swbuf_r+0x16>
 8003b4a:	6a03      	ldr	r3, [r0, #32]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <__swbuf_r+0x16>
 8003b50:	f7ff fa72 	bl	8003038 <__sinit>
 8003b54:	69a3      	ldr	r3, [r4, #24]
 8003b56:	60a3      	str	r3, [r4, #8]
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	071b      	lsls	r3, r3, #28
 8003b5c:	d502      	bpl.n	8003b64 <__swbuf_r+0x26>
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <__swbuf_r+0x3a>
 8003b64:	0021      	movs	r1, r4
 8003b66:	0030      	movs	r0, r6
 8003b68:	f000 f82c 	bl	8003bc4 <__swsetup_r>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d003      	beq.n	8003b78 <__swbuf_r+0x3a>
 8003b70:	2501      	movs	r5, #1
 8003b72:	426d      	negs	r5, r5
 8003b74:	0028      	movs	r0, r5
 8003b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b78:	6923      	ldr	r3, [r4, #16]
 8003b7a:	6820      	ldr	r0, [r4, #0]
 8003b7c:	b2ef      	uxtb	r7, r5
 8003b7e:	1ac0      	subs	r0, r0, r3
 8003b80:	6963      	ldr	r3, [r4, #20]
 8003b82:	b2ed      	uxtb	r5, r5
 8003b84:	4283      	cmp	r3, r0
 8003b86:	dc05      	bgt.n	8003b94 <__swbuf_r+0x56>
 8003b88:	0021      	movs	r1, r4
 8003b8a:	0030      	movs	r0, r6
 8003b8c:	f7ff ffac 	bl	8003ae8 <_fflush_r>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d1ed      	bne.n	8003b70 <__swbuf_r+0x32>
 8003b94:	68a3      	ldr	r3, [r4, #8]
 8003b96:	3001      	adds	r0, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	60a3      	str	r3, [r4, #8]
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	6022      	str	r2, [r4, #0]
 8003ba2:	701f      	strb	r7, [r3, #0]
 8003ba4:	6963      	ldr	r3, [r4, #20]
 8003ba6:	4283      	cmp	r3, r0
 8003ba8:	d004      	beq.n	8003bb4 <__swbuf_r+0x76>
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	07db      	lsls	r3, r3, #31
 8003bae:	d5e1      	bpl.n	8003b74 <__swbuf_r+0x36>
 8003bb0:	2d0a      	cmp	r5, #10
 8003bb2:	d1df      	bne.n	8003b74 <__swbuf_r+0x36>
 8003bb4:	0021      	movs	r1, r4
 8003bb6:	0030      	movs	r0, r6
 8003bb8:	f7ff ff96 	bl	8003ae8 <_fflush_r>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d0d9      	beq.n	8003b74 <__swbuf_r+0x36>
 8003bc0:	e7d6      	b.n	8003b70 <__swbuf_r+0x32>
	...

08003bc4 <__swsetup_r>:
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c7c <__swsetup_r+0xb8>)
 8003bc6:	b570      	push	{r4, r5, r6, lr}
 8003bc8:	0005      	movs	r5, r0
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	000c      	movs	r4, r1
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d004      	beq.n	8003bdc <__swsetup_r+0x18>
 8003bd2:	6a03      	ldr	r3, [r0, #32]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <__swsetup_r+0x18>
 8003bd8:	f7ff fa2e 	bl	8003038 <__sinit>
 8003bdc:	230c      	movs	r3, #12
 8003bde:	5ee2      	ldrsh	r2, [r4, r3]
 8003be0:	0713      	lsls	r3, r2, #28
 8003be2:	d423      	bmi.n	8003c2c <__swsetup_r+0x68>
 8003be4:	06d3      	lsls	r3, r2, #27
 8003be6:	d407      	bmi.n	8003bf8 <__swsetup_r+0x34>
 8003be8:	2309      	movs	r3, #9
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	2340      	movs	r3, #64	@ 0x40
 8003bee:	2001      	movs	r0, #1
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	81a3      	strh	r3, [r4, #12]
 8003bf4:	4240      	negs	r0, r0
 8003bf6:	e03a      	b.n	8003c6e <__swsetup_r+0xaa>
 8003bf8:	0752      	lsls	r2, r2, #29
 8003bfa:	d513      	bpl.n	8003c24 <__swsetup_r+0x60>
 8003bfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bfe:	2900      	cmp	r1, #0
 8003c00:	d008      	beq.n	8003c14 <__swsetup_r+0x50>
 8003c02:	0023      	movs	r3, r4
 8003c04:	3344      	adds	r3, #68	@ 0x44
 8003c06:	4299      	cmp	r1, r3
 8003c08:	d002      	beq.n	8003c10 <__swsetup_r+0x4c>
 8003c0a:	0028      	movs	r0, r5
 8003c0c:	f7ff fb28 	bl	8003260 <_free_r>
 8003c10:	2300      	movs	r3, #0
 8003c12:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c14:	2224      	movs	r2, #36	@ 0x24
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	4393      	bics	r3, r2
 8003c1a:	81a3      	strh	r3, [r4, #12]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	6063      	str	r3, [r4, #4]
 8003c20:	6923      	ldr	r3, [r4, #16]
 8003c22:	6023      	str	r3, [r4, #0]
 8003c24:	2308      	movs	r3, #8
 8003c26:	89a2      	ldrh	r2, [r4, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	6923      	ldr	r3, [r4, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <__swsetup_r+0x86>
 8003c32:	21a0      	movs	r1, #160	@ 0xa0
 8003c34:	2280      	movs	r2, #128	@ 0x80
 8003c36:	89a3      	ldrh	r3, [r4, #12]
 8003c38:	0089      	lsls	r1, r1, #2
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	400b      	ands	r3, r1
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <__swsetup_r+0x86>
 8003c42:	0021      	movs	r1, r4
 8003c44:	0028      	movs	r0, r5
 8003c46:	f000 f863 	bl	8003d10 <__smakebuf_r>
 8003c4a:	230c      	movs	r3, #12
 8003c4c:	5ee2      	ldrsh	r2, [r4, r3]
 8003c4e:	2101      	movs	r1, #1
 8003c50:	0013      	movs	r3, r2
 8003c52:	400b      	ands	r3, r1
 8003c54:	420a      	tst	r2, r1
 8003c56:	d00b      	beq.n	8003c70 <__swsetup_r+0xac>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60a3      	str	r3, [r4, #8]
 8003c5c:	6963      	ldr	r3, [r4, #20]
 8003c5e:	425b      	negs	r3, r3
 8003c60:	61a3      	str	r3, [r4, #24]
 8003c62:	2000      	movs	r0, #0
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	4283      	cmp	r3, r0
 8003c68:	d101      	bne.n	8003c6e <__swsetup_r+0xaa>
 8003c6a:	0613      	lsls	r3, r2, #24
 8003c6c:	d4be      	bmi.n	8003bec <__swsetup_r+0x28>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	0791      	lsls	r1, r2, #30
 8003c72:	d400      	bmi.n	8003c76 <__swsetup_r+0xb2>
 8003c74:	6963      	ldr	r3, [r4, #20]
 8003c76:	60a3      	str	r3, [r4, #8]
 8003c78:	e7f3      	b.n	8003c62 <__swsetup_r+0x9e>
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	20000018 	.word	0x20000018

08003c80 <_sbrk_r>:
 8003c80:	2300      	movs	r3, #0
 8003c82:	b570      	push	{r4, r5, r6, lr}
 8003c84:	4d06      	ldr	r5, [pc, #24]	@ (8003ca0 <_sbrk_r+0x20>)
 8003c86:	0004      	movs	r4, r0
 8003c88:	0008      	movs	r0, r1
 8003c8a:	602b      	str	r3, [r5, #0]
 8003c8c:	f7fd f8ac 	bl	8000de8 <_sbrk>
 8003c90:	1c43      	adds	r3, r0, #1
 8003c92:	d103      	bne.n	8003c9c <_sbrk_r+0x1c>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d000      	beq.n	8003c9c <_sbrk_r+0x1c>
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	20000270 	.word	0x20000270

08003ca4 <memchr>:
 8003ca4:	b2c9      	uxtb	r1, r1
 8003ca6:	1882      	adds	r2, r0, r2
 8003ca8:	4290      	cmp	r0, r2
 8003caa:	d101      	bne.n	8003cb0 <memchr+0xc>
 8003cac:	2000      	movs	r0, #0
 8003cae:	4770      	bx	lr
 8003cb0:	7803      	ldrb	r3, [r0, #0]
 8003cb2:	428b      	cmp	r3, r1
 8003cb4:	d0fb      	beq.n	8003cae <memchr+0xa>
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	e7f6      	b.n	8003ca8 <memchr+0x4>
	...

08003cbc <__swhatbuf_r>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	000e      	movs	r6, r1
 8003cc0:	001d      	movs	r5, r3
 8003cc2:	230e      	movs	r3, #14
 8003cc4:	5ec9      	ldrsh	r1, [r1, r3]
 8003cc6:	0014      	movs	r4, r2
 8003cc8:	b096      	sub	sp, #88	@ 0x58
 8003cca:	2900      	cmp	r1, #0
 8003ccc:	da0c      	bge.n	8003ce8 <__swhatbuf_r+0x2c>
 8003cce:	89b2      	ldrh	r2, [r6, #12]
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	0011      	movs	r1, r2
 8003cd4:	4019      	ands	r1, r3
 8003cd6:	421a      	tst	r2, r3
 8003cd8:	d114      	bne.n	8003d04 <__swhatbuf_r+0x48>
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	2000      	movs	r0, #0
 8003ce0:	6029      	str	r1, [r5, #0]
 8003ce2:	6023      	str	r3, [r4, #0]
 8003ce4:	b016      	add	sp, #88	@ 0x58
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	466a      	mov	r2, sp
 8003cea:	f000 f853 	bl	8003d94 <_fstat_r>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	dbed      	blt.n	8003cce <__swhatbuf_r+0x12>
 8003cf2:	23f0      	movs	r3, #240	@ 0xf0
 8003cf4:	9901      	ldr	r1, [sp, #4]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	4019      	ands	r1, r3
 8003cfa:	4b04      	ldr	r3, [pc, #16]	@ (8003d0c <__swhatbuf_r+0x50>)
 8003cfc:	18c9      	adds	r1, r1, r3
 8003cfe:	424b      	negs	r3, r1
 8003d00:	4159      	adcs	r1, r3
 8003d02:	e7ea      	b.n	8003cda <__swhatbuf_r+0x1e>
 8003d04:	2100      	movs	r1, #0
 8003d06:	2340      	movs	r3, #64	@ 0x40
 8003d08:	e7e9      	b.n	8003cde <__swhatbuf_r+0x22>
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	ffffe000 	.word	0xffffe000

08003d10 <__smakebuf_r>:
 8003d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d12:	2602      	movs	r6, #2
 8003d14:	898b      	ldrh	r3, [r1, #12]
 8003d16:	0005      	movs	r5, r0
 8003d18:	000c      	movs	r4, r1
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	4233      	tst	r3, r6
 8003d1e:	d007      	beq.n	8003d30 <__smakebuf_r+0x20>
 8003d20:	0023      	movs	r3, r4
 8003d22:	3347      	adds	r3, #71	@ 0x47
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	6123      	str	r3, [r4, #16]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	6163      	str	r3, [r4, #20]
 8003d2c:	b005      	add	sp, #20
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d30:	ab03      	add	r3, sp, #12
 8003d32:	aa02      	add	r2, sp, #8
 8003d34:	f7ff ffc2 	bl	8003cbc <__swhatbuf_r>
 8003d38:	9f02      	ldr	r7, [sp, #8]
 8003d3a:	9001      	str	r0, [sp, #4]
 8003d3c:	0039      	movs	r1, r7
 8003d3e:	0028      	movs	r0, r5
 8003d40:	f7ff fafa 	bl	8003338 <_malloc_r>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d108      	bne.n	8003d5a <__smakebuf_r+0x4a>
 8003d48:	220c      	movs	r2, #12
 8003d4a:	5ea3      	ldrsh	r3, [r4, r2]
 8003d4c:	059a      	lsls	r2, r3, #22
 8003d4e:	d4ed      	bmi.n	8003d2c <__smakebuf_r+0x1c>
 8003d50:	2203      	movs	r2, #3
 8003d52:	4393      	bics	r3, r2
 8003d54:	431e      	orrs	r6, r3
 8003d56:	81a6      	strh	r6, [r4, #12]
 8003d58:	e7e2      	b.n	8003d20 <__smakebuf_r+0x10>
 8003d5a:	2380      	movs	r3, #128	@ 0x80
 8003d5c:	89a2      	ldrh	r2, [r4, #12]
 8003d5e:	6020      	str	r0, [r4, #0]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	6120      	str	r0, [r4, #16]
 8003d68:	6167      	str	r7, [r4, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <__smakebuf_r+0x78>
 8003d6e:	0028      	movs	r0, r5
 8003d70:	230e      	movs	r3, #14
 8003d72:	5ee1      	ldrsh	r1, [r4, r3]
 8003d74:	f000 f820 	bl	8003db8 <_isatty_r>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d005      	beq.n	8003d88 <__smakebuf_r+0x78>
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	89a2      	ldrh	r2, [r4, #12]
 8003d80:	439a      	bics	r2, r3
 8003d82:	3b02      	subs	r3, #2
 8003d84:	4313      	orrs	r3, r2
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	9a01      	ldr	r2, [sp, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	e7cc      	b.n	8003d2c <__smakebuf_r+0x1c>
	...

08003d94 <_fstat_r>:
 8003d94:	2300      	movs	r3, #0
 8003d96:	b570      	push	{r4, r5, r6, lr}
 8003d98:	4d06      	ldr	r5, [pc, #24]	@ (8003db4 <_fstat_r+0x20>)
 8003d9a:	0004      	movs	r4, r0
 8003d9c:	0008      	movs	r0, r1
 8003d9e:	0011      	movs	r1, r2
 8003da0:	602b      	str	r3, [r5, #0]
 8003da2:	f7fc ffff 	bl	8000da4 <_fstat>
 8003da6:	1c43      	adds	r3, r0, #1
 8003da8:	d103      	bne.n	8003db2 <_fstat_r+0x1e>
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d000      	beq.n	8003db2 <_fstat_r+0x1e>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	20000270 	.word	0x20000270

08003db8 <_isatty_r>:
 8003db8:	2300      	movs	r3, #0
 8003dba:	b570      	push	{r4, r5, r6, lr}
 8003dbc:	4d06      	ldr	r5, [pc, #24]	@ (8003dd8 <_isatty_r+0x20>)
 8003dbe:	0004      	movs	r4, r0
 8003dc0:	0008      	movs	r0, r1
 8003dc2:	602b      	str	r3, [r5, #0]
 8003dc4:	f7fc fffc 	bl	8000dc0 <_isatty>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d103      	bne.n	8003dd4 <_isatty_r+0x1c>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d000      	beq.n	8003dd4 <_isatty_r+0x1c>
 8003dd2:	6023      	str	r3, [r4, #0]
 8003dd4:	bd70      	pop	{r4, r5, r6, pc}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	20000270 	.word	0x20000270

08003ddc <_init>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr

08003de8 <_fini>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr

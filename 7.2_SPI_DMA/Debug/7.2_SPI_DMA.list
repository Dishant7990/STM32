
7.2_SPI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000299c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00003b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b68  08002b68  00003b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002b6c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000018  08002b84  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002b84  00004138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b21  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176b  00000000  00000000  0000bb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0000d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061e  00000000  00000000  0000db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002486e  00000000  00000000  0000e126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dbe  00000000  00000000  00032994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0801  00000000  00000000  0003b752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bf53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff0  00000000  00000000  0011bf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0011df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b0c 	.word	0x08002b0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002b0c 	.word	0x08002b0c

080001c8 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	flag = 1;
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	701a      	strb	r2, [r3, #0]

}
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000132 	.word	0x20000132

080001e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ec:	f000 fa9c 	bl	8000728 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001f0:	f000 f82e 	bl	8000250 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001f4:	f000 f8e2 	bl	80003bc <MX_GPIO_Init>
	MX_DMA_Init();
 80001f8:	f000 f8ba 	bl	8000370 <MX_DMA_Init>
	MX_SPI1_Init();
 80001fc:	f000 f87a 	bl	80002f4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_SPI_TransmitReceive_DMA(&hspi1, buffer_tx, buffer_rx, 10);
 8000200:	230a      	movs	r3, #10
 8000202:	4a0f      	ldr	r2, [pc, #60]	@ (8000240 <main+0x58>)
 8000204:	490f      	ldr	r1, [pc, #60]	@ (8000244 <main+0x5c>)
 8000206:	4810      	ldr	r0, [pc, #64]	@ (8000248 <main+0x60>)
 8000208:	f001 ff0a 	bl	8002020 <HAL_SPI_TransmitReceive_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (flag == 1) {
 800020c:	4b0f      	ldr	r3, [pc, #60]	@ (800024c <main+0x64>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d10d      	bne.n	8000230 <main+0x48>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2120      	movs	r1, #32
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f001 f818 	bl	8001250 <HAL_GPIO_WritePin>
			HAL_Delay(5000);
 8000220:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000224:	f000 fafc 	bl	8000820 <HAL_Delay>
			flag = 0;
 8000228:	4b08      	ldr	r3, [pc, #32]	@ (800024c <main+0x64>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	e7ed      	b.n	800020c <main+0x24>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2120      	movs	r1, #32
 8000234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000238:	f001 f80a 	bl	8001250 <HAL_GPIO_WritePin>
		if (flag == 1) {
 800023c:	e7e6      	b.n	800020c <main+0x24>
 800023e:	bf00      	nop
 8000240:	20000128 	.word	0x20000128
 8000244:	20000000 	.word	0x20000000
 8000248:	20000034 	.word	0x20000034
 800024c:	20000132 	.word	0x20000132

08000250 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b096      	sub	sp, #88	@ 0x58
 8000254:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2244      	movs	r2, #68	@ 0x44
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fc28 	bl	8002ab4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000272:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000276:	f001 f811 	bl	800129c <HAL_PWREx_ControlVoltageScaling>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000280:	f000 f8da 	bl	8000438 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	2302      	movs	r3, #2
 8000286:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800028c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2310      	movs	r3, #16
 8000290:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	2302      	movs	r3, #2
 8000294:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800029a:	2301      	movs	r3, #1
 800029c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800029e:	230a      	movs	r3, #10
 80002a0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002a2:	2307      	movs	r3, #7
 80002a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 f848 	bl	8001348 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x72>
		Error_Handler();
 80002be:	f000 f8bb 	bl	8000438 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	2303      	movs	r3, #3
 80002c8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80002d6:	463b      	mov	r3, r7
 80002d8:	2104      	movs	r1, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fc10 	bl	8001b00 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x9a>
		Error_Handler();
 80002e6:	f000 f8a7 	bl	8000438 <Error_Handler>
	}
}
 80002ea:	bf00      	nop
 80002ec:	3758      	adds	r7, #88	@ 0x58
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000368 <MX_SPI1_Init+0x74>)
 80002fa:	4a1c      	ldr	r2, [pc, #112]	@ (800036c <MX_SPI1_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000300:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000304:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000306:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800030c:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <MX_SPI1_Init+0x74>)
 800030e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000312:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000314:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800031a:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <MX_SPI1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000326:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000328:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <MX_SPI1_Init+0x74>)
 800032a:	2238      	movs	r2, #56	@ 0x38
 800032c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <MX_SPI1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000340:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000342:	2207      	movs	r2, #7
 8000344:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <MX_SPI1_Init+0x74>)
 800034e:	2208      	movs	r2, #8
 8000350:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000352:	4805      	ldr	r0, [pc, #20]	@ (8000368 <MX_SPI1_Init+0x74>)
 8000354:	f001 fdc0 	bl	8001ed8 <HAL_SPI_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800035e:	f000 f86b 	bl	8000438 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000034 	.word	0x20000034
 800036c:	40013000 	.word	0x40013000

08000370 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000376:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <MX_DMA_Init+0x48>)
 8000378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800037a:	4a0f      	ldr	r2, [pc, #60]	@ (80003b8 <MX_DMA_Init+0x48>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6493      	str	r3, [r2, #72]	@ 0x48
 8000382:	4b0d      	ldr	r3, [pc, #52]	@ (80003b8 <MX_DMA_Init+0x48>)
 8000384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2100      	movs	r1, #0
 8000392:	200c      	movs	r0, #12
 8000394:	f000 fb43 	bl	8000a1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000398:	200c      	movs	r0, #12
 800039a:	f000 fb5c 	bl	8000a56 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	200d      	movs	r0, #13
 80003a4:	f000 fb3b 	bl	8000a1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003a8:	200d      	movs	r0, #13
 80003aa:	f000 fb54 	bl	8000a56 <HAL_NVIC_EnableIRQ>

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b18      	ldr	r3, [pc, #96]	@ (8000434 <MX_GPIO_Init+0x78>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d6:	4a17      	ldr	r2, [pc, #92]	@ (8000434 <MX_GPIO_Init+0x78>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003de:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <MX_GPIO_Init+0x78>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003ea:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <MX_GPIO_Init+0x78>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	4a11      	ldr	r2, [pc, #68]	@ (8000434 <MX_GPIO_Init+0x78>)
 80003f0:	f043 0302 	orr.w	r3, r3, #2
 80003f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_GPIO_Init+0x78>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	f003 0302 	and.w	r3, r3, #2
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2120      	movs	r1, #32
 8000406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040a:	f000 ff21 	bl	8001250 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800040e:	2320      	movs	r3, #32
 8000410:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	4619      	mov	r1, r3
 8000424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000428:	f000 fd68 	bl	8000efc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000

08000438 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <Error_Handler+0x8>

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <HAL_MspInit+0x44>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6613      	str	r3, [r2, #96]	@ 0x60
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000466:	4a08      	ldr	r2, [pc, #32]	@ (8000488 <HAL_MspInit+0x44>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800046c:	6593      	str	r3, [r2, #88]	@ 0x58
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	@ 0x28
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
 80004a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a53      	ldr	r2, [pc, #332]	@ (80005f8 <HAL_SPI_MspInit+0x16c>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	f040 809f 	bne.w	80005ee <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004b0:	4b52      	ldr	r3, [pc, #328]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004b4:	4a51      	ldr	r2, [pc, #324]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80004bc:	4b4f      	ldr	r3, [pc, #316]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004c4:	613b      	str	r3, [r7, #16]
 80004c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b4c      	ldr	r3, [pc, #304]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004cc:	4a4b      	ldr	r2, [pc, #300]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004d4:	4b49      	ldr	r3, [pc, #292]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b46      	ldr	r3, [pc, #280]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e4:	4a45      	ldr	r2, [pc, #276]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004e6:	f043 0302 	orr.w	r3, r3, #2
 80004ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ec:	4b43      	ldr	r3, [pc, #268]	@ (80005fc <HAL_SPI_MspInit+0x170>)
 80004ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004f8:	23c0      	movs	r3, #192	@ 0xc0
 80004fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000508:	2305      	movs	r3, #5
 800050a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4619      	mov	r1, r3
 8000512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000516:	f000 fcf1 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800051a:	2308      	movs	r3, #8
 800051c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051e:	2302      	movs	r3, #2
 8000520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000526:	2303      	movs	r3, #3
 8000528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800052a:	2305      	movs	r3, #5
 800052c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	4832      	ldr	r0, [pc, #200]	@ (8000600 <HAL_SPI_MspInit+0x174>)
 8000536:	f000 fce1 	bl	8000efc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800053a:	4b32      	ldr	r3, [pc, #200]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 800053c:	4a32      	ldr	r2, [pc, #200]	@ (8000608 <HAL_SPI_MspInit+0x17c>)
 800053e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000540:	4b30      	ldr	r3, [pc, #192]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 8000542:	2201      	movs	r2, #1
 8000544:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000546:	4b2f      	ldr	r3, [pc, #188]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 8000548:	2210      	movs	r2, #16
 800054a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800054c:	4b2d      	ldr	r3, [pc, #180]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000552:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 8000554:	2280      	movs	r2, #128	@ 0x80
 8000556:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000558:	4b2a      	ldr	r3, [pc, #168]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 800055a:	2200      	movs	r2, #0
 800055c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800055e:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800056a:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000570:	4824      	ldr	r0, [pc, #144]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 8000572:	f000 fa8b 	bl	8000a8c <HAL_DMA_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 800057c:	f7ff ff5c 	bl	8000438 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a20      	ldr	r2, [pc, #128]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 8000584:	655a      	str	r2, [r3, #84]	@ 0x54
 8000586:	4a1f      	ldr	r2, [pc, #124]	@ (8000604 <HAL_SPI_MspInit+0x178>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <HAL_SPI_MspInit+0x180>)
 800058e:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <HAL_SPI_MspInit+0x184>)
 8000590:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000592:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <HAL_SPI_MspInit+0x180>)
 8000594:	2201      	movs	r2, #1
 8000596:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000598:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <HAL_SPI_MspInit+0x180>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800059e:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005a4:	4b19      	ldr	r3, [pc, #100]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005a6:	2280      	movs	r2, #128	@ 0x80
 80005a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005aa:	4b18      	ldr	r3, [pc, #96]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005b0:	4b16      	ldr	r3, [pc, #88]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80005b6:	4b15      	ldr	r3, [pc, #84]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005bc:	4b13      	ldr	r3, [pc, #76]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005be:	2200      	movs	r2, #0
 80005c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80005c2:	4812      	ldr	r0, [pc, #72]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005c4:	f000 fa62 	bl	8000a8c <HAL_DMA_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 80005ce:	f7ff ff33 	bl	8000438 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80005d8:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <HAL_SPI_MspInit+0x180>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2023      	movs	r0, #35	@ 0x23
 80005e4:	f000 fa1b 	bl	8000a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80005e8:	2023      	movs	r0, #35	@ 0x23
 80005ea:	f000 fa34 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	@ 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40013000 	.word	0x40013000
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400
 8000604:	20000098 	.word	0x20000098
 8000608:	40020030 	.word	0x40020030
 800060c:	200000e0 	.word	0x200000e0
 8000610:	4002001c 	.word	0x4002001c

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <NMI_Handler+0x4>

0800061c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <MemManage_Handler+0x4>

0800062c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066a:	f000 f8b9 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000678:	4802      	ldr	r0, [pc, #8]	@ (8000684 <DMA1_Channel2_IRQHandler+0x10>)
 800067a:	f000 fb60 	bl	8000d3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000e0 	.word	0x200000e0

08000688 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800068c:	4802      	ldr	r0, [pc, #8]	@ (8000698 <DMA1_Channel3_IRQHandler+0x10>)
 800068e:	f000 fb56 	bl	8000d3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000098 	.word	0x20000098

0800069c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80006a0:	4802      	ldr	r0, [pc, #8]	@ (80006ac <SPI1_IRQHandler+0x10>)
 80006a2:	f001 fe41 	bl	8002328 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000034 	.word	0x20000034

080006b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <SystemInit+0x20>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ba:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <SystemInit+0x20>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800070c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d8:	f7ff ffea 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480c      	ldr	r0, [pc, #48]	@ (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490d      	ldr	r1, [pc, #52]	@ (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0a      	ldr	r2, [pc, #40]	@ (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000702:	f002 f9df 	bl	8002ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000706:	f7ff fd6f 	bl	80001e8 <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800070c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000718:	08002b6c 	.word	0x08002b6c
  ldr r2, =_sbss
 800071c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000720:	20000138 	.word	0x20000138

08000724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_2_IRQHandler>
	...

08000728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <HAL_Init+0x3c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a0b      	ldr	r2, [pc, #44]	@ (8000764 <HAL_Init+0x3c>)
 8000738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800073c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073e:	2003      	movs	r0, #3
 8000740:	f000 f962 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000744:	2000      	movs	r0, #0
 8000746:	f000 f80f 	bl	8000768 <HAL_InitTick>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000750:	2301      	movs	r3, #1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	e001      	b.n	800075a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000756:	f7ff fe75 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800075a:	79fb      	ldrb	r3, [r7, #7]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <HAL_InitTick+0x6c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d023      	beq.n	80007c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <HAL_InitTick+0x70>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <HAL_InitTick+0x6c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f96d 	bl	8000a72 <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10f      	bne.n	80007be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d809      	bhi.n	80007b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f937 	bl	8000a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b0:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <HAL_InitTick+0x74>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	e007      	b.n	80007c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	e004      	b.n	80007c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e001      	b.n	80007c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000014 	.word	0x20000014
 80007d8:	2000000c 	.word	0x2000000c
 80007dc:	20000010 	.word	0x20000010

080007e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_IncTick+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_IncTick+0x24>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <HAL_IncTick+0x24>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000014 	.word	0x20000014
 8000804:	20000134 	.word	0x20000134

08000808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;
 800080c:	4b03      	ldr	r3, [pc, #12]	@ (800081c <HAL_GetTick+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000134 	.word	0x20000134

08000820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000828:	f7ff ffee 	bl	8000808 <HAL_GetTick>
 800082c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000838:	d005      	beq.n	8000846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <HAL_Delay+0x44>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000846:	bf00      	nop
 8000848:	f7ff ffde 	bl	8000808 <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	429a      	cmp	r2, r3
 8000856:	d8f7      	bhi.n	8000848 <HAL_Delay+0x28>
  {
  }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000014 	.word	0x20000014

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db0b      	blt.n	80008f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	4907      	ldr	r1, [pc, #28]	@ (8000904 <__NVIC_EnableIRQ+0x38>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	@ (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	@ (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	@ 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	@ 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f7ff ff8e 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff29 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff3e 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff8e 	bl	800095c <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5d 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff31 	bl	80008cc <__NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffa2 	bl	80009c4 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e098      	b.n	8000bd0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8000bdc <HAL_DMA_Init+0x150>)
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d80f      	bhi.n	8000aca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8000be0 <HAL_DMA_Init+0x154>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	@ (8000be4 <HAL_DMA_Init+0x158>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	091b      	lsrs	r3, r3, #4
 8000abc:	009a      	lsls	r2, r3, #2
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a48      	ldr	r2, [pc, #288]	@ (8000be8 <HAL_DMA_Init+0x15c>)
 8000ac6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ac8:	e00e      	b.n	8000ae8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b46      	ldr	r3, [pc, #280]	@ (8000bec <HAL_DMA_Init+0x160>)
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a43      	ldr	r2, [pc, #268]	@ (8000be4 <HAL_DMA_Init+0x158>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	009a      	lsls	r2, r3, #2
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a42      	ldr	r2, [pc, #264]	@ (8000bf0 <HAL_DMA_Init+0x164>)
 8000ae6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2202      	movs	r2, #2
 8000aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b42:	d039      	beq.n	8000bb8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	4a27      	ldr	r2, [pc, #156]	@ (8000be8 <HAL_DMA_Init+0x15c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d11a      	bne.n	8000b84 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b4e:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <HAL_DMA_Init+0x168>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f003 031c 	and.w	r3, r3, #28
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	4924      	ldr	r1, [pc, #144]	@ (8000bf4 <HAL_DMA_Init+0x168>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b68:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <HAL_DMA_Init+0x168>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6859      	ldr	r1, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b74:	f003 031c 	and.w	r3, r3, #28
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	491d      	ldr	r1, [pc, #116]	@ (8000bf4 <HAL_DMA_Init+0x168>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]
 8000b82:	e019      	b.n	8000bb8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <HAL_DMA_Init+0x16c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8c:	f003 031c 	and.w	r3, r3, #28
 8000b90:	210f      	movs	r1, #15
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	4917      	ldr	r1, [pc, #92]	@ (8000bf8 <HAL_DMA_Init+0x16c>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <HAL_DMA_Init+0x16c>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6859      	ldr	r1, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f003 031c 	and.w	r3, r3, #28
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	4911      	ldr	r1, [pc, #68]	@ (8000bf8 <HAL_DMA_Init+0x16c>)
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40020407 	.word	0x40020407
 8000be0:	bffdfff8 	.word	0xbffdfff8
 8000be4:	cccccccd 	.word	0xcccccccd
 8000be8:	40020000 	.word	0x40020000
 8000bec:	bffdfbf8 	.word	0xbffdfbf8
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	400200a8 	.word	0x400200a8
 8000bf8:	400204a8 	.word	0x400204a8

08000bfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d101      	bne.n	8000c1c <HAL_DMA_Start_IT+0x20>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e04b      	b.n	8000cb4 <HAL_DMA_Start_IT+0xb8>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d13a      	bne.n	8000ca6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2202      	movs	r2, #2
 8000c34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0201 	bic.w	r2, r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f000 f921 	bl	8000e9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f042 020e 	orr.w	r2, r2, #14
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e00f      	b.n	8000c94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 0204 	bic.w	r2, r2, #4
 8000c82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 020a 	orr.w	r2, r2, #10
 8000c92:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0201 	orr.w	r2, r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e005      	b.n	8000cb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d005      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e029      	b.n	8000d34 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 020e 	bic.w	r2, r2, #14
 8000cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d04:	f003 021c 	and.w	r2, r3, #28
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	4798      	blx	r3
    }
  }
  return status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f003 031c 	and.w	r3, r3, #28
 8000d5e:	2204      	movs	r2, #4
 8000d60:	409a      	lsls	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d026      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x7a>
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d021      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d107      	bne.n	8000d92 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0204 	bic.w	r2, r2, #4
 8000d90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f003 021c 	and.w	r2, r3, #28
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	2104      	movs	r1, #4
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d071      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000db6:	e06c      	b.n	8000e92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbc:	f003 031c 	and.w	r3, r3, #28
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d02e      	beq.n	8000e2a <HAL_DMA_IRQHandler+0xec>
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d029      	beq.n	8000e2a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10b      	bne.n	8000dfc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 020a 	bic.w	r2, r2, #10
 8000df2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2201      	movs	r2, #1
 8000df8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e00:	f003 021c 	and.w	r2, r3, #28
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	2102      	movs	r1, #2
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d038      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000e28:	e033      	b.n	8000e92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f003 031c 	and.w	r3, r3, #28
 8000e32:	2208      	movs	r2, #8
 8000e34:	409a      	lsls	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d02a      	beq.n	8000e94 <HAL_DMA_IRQHandler+0x156>
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d025      	beq.n	8000e94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 020e 	bic.w	r2, r2, #14
 8000e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5c:	f003 021c 	and.w	r2, r3, #28
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
}
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f003 021c 	and.w	r2, r3, #28
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b10      	cmp	r3, #16
 8000ecc:	d108      	bne.n	8000ee0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ede:	e007      	b.n	8000ef0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	60da      	str	r2, [r3, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e17f      	b.n	800120c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8171 	beq.w	8001206 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d005      	beq.n	8000f3c <HAL_GPIO_Init+0x40>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 0201 	and.w	r2, r3, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d118      	bne.n	8000fdc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	f003 0201 	and.w	r2, r3, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d017      	beq.n	8001018 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d123      	bne.n	800106c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	6939      	ldr	r1, [r7, #16]
 8001068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80ac 	beq.w	8001206 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b5f      	ldr	r3, [pc, #380]	@ (800122c <HAL_GPIO_Init+0x330>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	4a5e      	ldr	r2, [pc, #376]	@ (800122c <HAL_GPIO_Init+0x330>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ba:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <HAL_GPIO_Init+0x330>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001230 <HAL_GPIO_Init+0x334>)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x242>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001234 <HAL_GPIO_Init+0x338>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x23e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001238 <HAL_GPIO_Init+0x33c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x23a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4d      	ldr	r2, [pc, #308]	@ (800123c <HAL_GPIO_Init+0x340>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x236>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4c      	ldr	r2, [pc, #304]	@ (8001240 <HAL_GPIO_Init+0x344>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x232>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4b      	ldr	r2, [pc, #300]	@ (8001244 <HAL_GPIO_Init+0x348>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x22e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4a      	ldr	r2, [pc, #296]	@ (8001248 <HAL_GPIO_Init+0x34c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x22a>
 8001122:	2306      	movs	r3, #6
 8001124:	e00c      	b.n	8001140 <HAL_GPIO_Init+0x244>
 8001126:	2307      	movs	r3, #7
 8001128:	e00a      	b.n	8001140 <HAL_GPIO_Init+0x244>
 800112a:	2305      	movs	r3, #5
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x244>
 800112e:	2304      	movs	r3, #4
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x244>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x244>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x244>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x244>
 800113e:	2300      	movs	r3, #0
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001150:	4937      	ldr	r1, [pc, #220]	@ (8001230 <HAL_GPIO_Init+0x334>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800115e:	4b3b      	ldr	r3, [pc, #236]	@ (800124c <HAL_GPIO_Init+0x350>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001182:	4a32      	ldr	r2, [pc, #200]	@ (800124c <HAL_GPIO_Init+0x350>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001188:	4b30      	ldr	r3, [pc, #192]	@ (800124c <HAL_GPIO_Init+0x350>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ac:	4a27      	ldr	r2, [pc, #156]	@ (800124c <HAL_GPIO_Init+0x350>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011b2:	4b26      	ldr	r3, [pc, #152]	@ (800124c <HAL_GPIO_Init+0x350>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d6:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <HAL_GPIO_Init+0x350>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <HAL_GPIO_Init+0x350>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001200:	4a12      	ldr	r2, [pc, #72]	@ (800124c <HAL_GPIO_Init+0x350>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa22 f303 	lsr.w	r3, r2, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	f47f ae78 	bne.w	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800
 800123c:	48000c00 	.word	0x48000c00
 8001240:	48001000 	.word	0x48001000
 8001244:	48001400 	.word	0x48001400
 8001248:	48001800 	.word	0x48001800
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800126c:	e002      	b.n	8001274 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <HAL_PWREx_GetVoltageRange+0x18>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007000 	.word	0x40007000

0800129c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012aa:	d130      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ac:	4b23      	ldr	r3, [pc, #140]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012b8:	d038      	beq.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c2:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2232      	movs	r2, #50	@ 0x32
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0c9b      	lsrs	r3, r3, #18
 80012dc:	3301      	adds	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e0:	e002      	b.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f4:	d102      	bne.n	80012fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f2      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001308:	d110      	bne.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e00f      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131a:	d007      	beq.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001324:	4a05      	ldr	r2, [pc, #20]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800132a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007000 	.word	0x40007000
 8001340:	2000000c 	.word	0x2000000c
 8001344:	431bde83 	.word	0x431bde83

08001348 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e3ca      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135a:	4b97      	ldr	r3, [pc, #604]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001364:	4b94      	ldr	r3, [pc, #592]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80e4 	beq.w	8001544 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <HAL_RCC_OscConfig+0x4a>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	f040 808b 	bne.w	80014a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	f040 8087 	bne.w	80014a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001392:	4b89      	ldr	r3, [pc, #548]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x62>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e3a2      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1a      	ldr	r2, [r3, #32]
 80013ae:	4b82      	ldr	r3, [pc, #520]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_RCC_OscConfig+0x7c>
 80013ba:	4b7f      	ldr	r3, [pc, #508]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013c2:	e005      	b.n	80013d0 <HAL_RCC_OscConfig+0x88>
 80013c4:	4b7c      	ldr	r3, [pc, #496]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d223      	bcs.n	800141c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fd1d 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e383      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e8:	4b73      	ldr	r3, [pc, #460]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a72      	ldr	r2, [pc, #456]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b70      	ldr	r3, [pc, #448]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	496d      	ldr	r1, [pc, #436]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001406:	4b6c      	ldr	r3, [pc, #432]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	4968      	ldr	r1, [pc, #416]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
 800141a:	e025      	b.n	8001468 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141c:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a65      	ldr	r2, [pc, #404]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b63      	ldr	r3, [pc, #396]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4960      	ldr	r1, [pc, #384]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143a:	4b5f      	ldr	r3, [pc, #380]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	495b      	ldr	r1, [pc, #364]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fcdd 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e343      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001468:	f000 fc4a 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800146c:	4602      	mov	r2, r0
 800146e:	4b52      	ldr	r3, [pc, #328]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	4950      	ldr	r1, [pc, #320]	@ (80015bc <HAL_RCC_OscConfig+0x274>)
 800147a:	5ccb      	ldrb	r3, [r1, r3]
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	4a4e      	ldr	r2, [pc, #312]	@ (80015c0 <HAL_RCC_OscConfig+0x278>)
 8001486:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001488:	4b4e      	ldr	r3, [pc, #312]	@ (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f96b 	bl	8000768 <HAL_InitTick>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d052      	beq.n	8001542 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	e327      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d032      	beq.n	800150e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014a8:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a42      	ldr	r2, [pc, #264]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b4:	f7ff f9a8 	bl	8000808 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014bc:	f7ff f9a4 	bl	8000808 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e310      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ce:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a36      	ldr	r2, [pc, #216]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4931      	ldr	r1, [pc, #196]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f8:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	492c      	ldr	r1, [pc, #176]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
 800150c:	e01a      	b.n	8001544 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151a:	f7ff f975 	bl	8000808 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001522:	f7ff f971 	bl	8000808 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e2dd      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x1da>
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001542:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d074      	beq.n	800163a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d005      	beq.n	8001562 <HAL_RCC_OscConfig+0x21a>
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b0c      	cmp	r3, #12
 800155a:	d10e      	bne.n	800157a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d10b      	bne.n	800157a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d064      	beq.n	8001638 <HAL_RCC_OscConfig+0x2f0>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d160      	bne.n	8001638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e2ba      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x24a>
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e026      	b.n	80015e0 <HAL_RCC_OscConfig+0x298>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800159a:	d115      	bne.n	80015c8 <HAL_RCC_OscConfig+0x280>
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a02      	ldr	r2, [pc, #8]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x298>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08002b24 	.word	0x08002b24
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000010 	.word	0x20000010
 80015c8:	4ba0      	ldr	r3, [pc, #640]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a9f      	ldr	r2, [pc, #636]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b9d      	ldr	r3, [pc, #628]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a9c      	ldr	r2, [pc, #624]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff f90e 	bl	8000808 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff f90a 	bl	8000808 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	@ 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e276      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	4b92      	ldr	r3, [pc, #584]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2a8>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff f8fa 	bl	8000808 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff f8f6 	bl	8000808 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	@ 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e262      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162a:	4b88      	ldr	r3, [pc, #544]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x2d0>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d060      	beq.n	8001708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b04      	cmp	r3, #4
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x310>
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d119      	bne.n	8001686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d116      	bne.n	8001686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	4b7c      	ldr	r3, [pc, #496]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x328>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e23f      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b76      	ldr	r3, [pc, #472]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	4973      	ldr	r1, [pc, #460]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	e040      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d023      	beq.n	80016d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168e:	4b6f      	ldr	r3, [pc, #444]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff f8b5 	bl	8000808 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff f8b1 	bl	8000808 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e21d      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	4b65      	ldr	r3, [pc, #404]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b62      	ldr	r3, [pc, #392]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	495f      	ldr	r1, [pc, #380]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
 80016d4:	e018      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b5d      	ldr	r3, [pc, #372]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5c      	ldr	r2, [pc, #368]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff f891 	bl	8000808 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff f88d 	bl	8000808 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1f9      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fc:	4b53      	ldr	r3, [pc, #332]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d03c      	beq.n	800178e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01c      	beq.n	8001756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171c:	4b4b      	ldr	r3, [pc, #300]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	4a4a      	ldr	r2, [pc, #296]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff f86c 	bl	8000808 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff f868 	bl	8000808 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1d4      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ef      	beq.n	8001734 <HAL_RCC_OscConfig+0x3ec>
 8001754:	e01b      	b.n	800178e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800175c:	4a3b      	ldr	r2, [pc, #236]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff f84f 	bl	8000808 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff f84b 	bl	8000808 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1b7      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001780:	4b32      	ldr	r3, [pc, #200]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ef      	bne.n	800176e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80a6 	beq.w	80018e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017a0:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10d      	bne.n	80017c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b0:	4a26      	ldr	r2, [pc, #152]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b8:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d118      	bne.n	8001806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e0:	f7ff f812 	bl	8000808 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e8:	f7ff f80e 	bl	8000808 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e17a      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_RCC_OscConfig+0x508>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d108      	bne.n	8001820 <HAL_RCC_OscConfig+0x4d8>
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001814:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800181e:	e029      	b.n	8001874 <HAL_RCC_OscConfig+0x52c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d115      	bne.n	8001854 <HAL_RCC_OscConfig+0x50c>
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182e:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	4a03      	ldr	r2, [pc, #12]	@ (800184c <HAL_RCC_OscConfig+0x504>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x52c>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	4b9c      	ldr	r3, [pc, #624]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001864:	4b98      	ldr	r3, [pc, #608]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	4a97      	ldr	r2, [pc, #604]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d016      	beq.n	80018aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7fe ffc4 	bl	8000808 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	e00a      	b.n	800189a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7fe ffc0 	bl	8000808 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e12a      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ed      	beq.n	8001884 <HAL_RCC_OscConfig+0x53c>
 80018a8:	e015      	b.n	80018d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7fe ffad 	bl	8000808 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7fe ffa9 	bl	8000808 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e113      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ed      	bne.n	80018b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	4a79      	ldr	r2, [pc, #484]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80018e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80fe 	beq.w	8001aee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	f040 80d0 	bne.w	8001a9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018fc:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	429a      	cmp	r2, r3
 800190e:	d130      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	3b01      	subs	r3, #1
 800191c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d127      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d11f      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800193c:	2a07      	cmp	r2, #7
 800193e:	bf14      	ite	ne
 8001940:	2201      	movne	r2, #1
 8001942:	2200      	moveq	r2, #0
 8001944:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001946:	4293      	cmp	r3, r2
 8001948:	d113      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	085b      	lsrs	r3, r3, #1
 8001956:	3b01      	subs	r3, #1
 8001958:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d109      	bne.n	8001972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d06e      	beq.n	8001a50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d069      	beq.n	8001a4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001984:	4b50      	ldr	r3, [pc, #320]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0ad      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001994:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 800199a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a0:	f7fe ff32 	bl	8000808 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a8:	f7fe ff2e 	bl	8000808 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e09a      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ba:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c6:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	4b40      	ldr	r3, [pc, #256]	@ (8001acc <HAL_RCC_OscConfig+0x784>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019d6:	3a01      	subs	r2, #1
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019e0:	0212      	lsls	r2, r2, #8
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019e8:	0852      	lsrs	r2, r2, #1
 80019ea:	3a01      	subs	r2, #1
 80019ec:	0552      	lsls	r2, r2, #21
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019f4:	0852      	lsrs	r2, r2, #1
 80019f6:	3a01      	subs	r2, #1
 80019f8:	0652      	lsls	r2, r2, #25
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a00:	0912      	lsrs	r2, r2, #4
 8001a02:	0452      	lsls	r2, r2, #17
 8001a04:	430a      	orrs	r2, r1
 8001a06:	4930      	ldr	r1, [pc, #192]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a24:	f7fe fef0 	bl	8000808 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7fe feec 	bl	8000808 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e058      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4a:	e050      	b.n	8001aee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e04f      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d148      	bne.n	8001aee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a68:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a74:	f7fe fec8 	bl	8000808 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7fe fec4 	bl	8000808 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e030      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x734>
 8001a9a:	e028      	b.n	8001aee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d023      	beq.n	8001aea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7fe feab 	bl	8000808 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	e00c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7fe fea7 	bl	8000808 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d905      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e013      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_RCC_OscConfig+0x7b0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ec      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_RCC_OscConfig+0x7b0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4905      	ldr	r1, [pc, #20]	@ (8001af8 <HAL_RCC_OscConfig+0x7b0>)
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_OscConfig+0x7b4>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e001      	b.n	8001aee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	feeefffc 	.word	0xfeeefffc

08001b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0e7      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b14:	4b75      	ldr	r3, [pc, #468]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d910      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b72      	ldr	r3, [pc, #456]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 0207 	bic.w	r2, r3, #7
 8001b2a:	4970      	ldr	r1, [pc, #448]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b6e      	ldr	r3, [pc, #440]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0cf      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d010      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4b66      	ldr	r3, [pc, #408]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d908      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b63      	ldr	r3, [pc, #396]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4960      	ldr	r1, [pc, #384]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d04c      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d121      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0a6      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	4b54      	ldr	r3, [pc, #336]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d115      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e09a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e08e      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e086      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd6:	4b46      	ldr	r3, [pc, #280]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f023 0203 	bic.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4943      	ldr	r1, [pc, #268]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be8:	f7fe fe0e 	bl	8000808 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7fe fe0a 	bl	8000808 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e06e      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 020c 	and.w	r2, r3, #12
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1eb      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d208      	bcs.n	8001c46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	492b      	ldr	r1, [pc, #172]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c46:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d210      	bcs.n	8001c76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c54:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 0207 	bic.w	r2, r3, #7
 8001c5c:	4923      	ldr	r1, [pc, #140]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c64:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_RCC_ClockConfig+0x1ec>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e036      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	4918      	ldr	r1, [pc, #96]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4910      	ldr	r1, [pc, #64]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb4:	f000 f824 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	490b      	ldr	r1, [pc, #44]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_ClockConfig+0x1fc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fd45 	bl	8000768 <HAL_InitTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08002b24 	.word	0x08002b24
 8001cf8:	2000000c 	.word	0x2000000c
 8001cfc:	20000010 	.word	0x20000010

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d121      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d11e      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d34:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d40:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	e004      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d134      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d003      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0xac>
 8001da4:	e005      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001da8:	617b      	str	r3, [r7, #20]
      break;
 8001daa:	e005      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dae:	617b      	str	r3, [r7, #20]
      break;
 8001db0:	e002      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	617b      	str	r3, [r7, #20]
      break;
 8001db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0e5b      	lsrs	r3, r3, #25
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	3301      	adds	r3, #1
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001df8:	69bb      	ldr	r3, [r7, #24]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08002b34 	.word	0x08002b34
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	007a1200 	.word	0x007a1200

08001e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff fa26 	bl	8001280 <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
 8001e36:	e014      	b.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b25      	ldr	r3, [pc, #148]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	4a24      	ldr	r2, [pc, #144]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e50:	f7ff fa16 	bl	8001280 <HAL_PWREx_GetVoltageRange>
 8001e54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e68:	d10b      	bne.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b80      	cmp	r3, #128	@ 0x80
 8001e6e:	d919      	bls.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e74:	d902      	bls.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e013      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e010      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	@ 0x80
 8001e86:	d902      	bls.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e88:	2303      	movs	r3, #3
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e00a      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b80      	cmp	r3, #128	@ 0x80
 8001e92:	d102      	bne.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e94:	2302      	movs	r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	e004      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b70      	cmp	r3, #112	@ 0x70
 8001e9e:	d101      	bne.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 0207 	bic.w	r2, r3, #7
 8001eac:	4909      	ldr	r1, [pc, #36]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e095      	b.n	8002016 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001efa:	d009      	beq.n	8001f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
 8001f02:	e005      	b.n	8001f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe faae 	bl	800048c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f50:	d902      	bls.n	8001f58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e002      	b.n	8001f5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001f66:	d007      	beq.n	8001f78 <HAL_SPI_Init+0xa0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f70:	d002      	beq.n	8001f78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fba:	ea42 0103 	orr.w	r1, r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	f003 0204 	and.w	r2, r3, #4
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001ff4:	ea42 0103 	orr.w	r1, r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_SPI_TransmitReceive_DMA+0x20>
 800203c:	2302      	movs	r3, #2
 800203e:	e164      	b.n	800230a <HAL_SPI_TransmitReceive_DMA+0x2ea>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800204e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002056:	7dbb      	ldrb	r3, [r7, #22]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d00d      	beq.n	8002078 <HAL_SPI_TransmitReceive_DMA+0x58>
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002062:	d106      	bne.n	8002072 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <HAL_SPI_TransmitReceive_DMA+0x52>
 800206c:	7dbb      	ldrb	r3, [r7, #22]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d002      	beq.n	8002078 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002072:	2302      	movs	r3, #2
 8002074:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002076:	e143      	b.n	8002300 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002084:	887b      	ldrh	r3, [r7, #2]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800208e:	e137      	b.n	8002300 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b04      	cmp	r3, #4
 800209a:	d003      	beq.n	80020a4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2205      	movs	r2, #5
 80020a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	887a      	ldrh	r2, [r7, #2]
 80020ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	887a      	ldrh	r2, [r7, #2]
 80020c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	887a      	ldrh	r2, [r7, #2]
 80020ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80020ec:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020f6:	d908      	bls.n	800210a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	e06f      	b.n	80021ea <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002118:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002124:	d126      	bne.n	8002174 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002140:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002146:	b29b      	uxth	r3, r3
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002150:	e010      	b.n	8002174 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002160:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002166:	b29b      	uxth	r3, r3
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	b29b      	uxth	r3, r3
 800216c:	3301      	adds	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217e:	d134      	bne.n	80021ea <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800218e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002196:	b29b      	uxth	r3, r3
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021ae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80021c2:	e012      	b.n	80021ea <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021da:	b29b      	uxth	r3, r3
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d108      	bne.n	8002208 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	4a46      	ldr	r2, [pc, #280]	@ (8002314 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 80021fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	4a45      	ldr	r2, [pc, #276]	@ (8002318 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002206:	e007      	b.n	8002218 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	4a43      	ldr	r2, [pc, #268]	@ (800231c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002214:	4a42      	ldr	r2, [pc, #264]	@ (8002320 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	4a41      	ldr	r2, [pc, #260]	@ (8002324 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800221e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002224:	2200      	movs	r2, #0
 8002226:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	330c      	adds	r3, #12
 8002232:	4619      	mov	r1, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002240:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002242:	f7fe fcdb 	bl	8000bfc <HAL_DMA_Start_IT>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002250:	f043 0210 	orr.w	r2, r3, #16
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800225c:	e050      	b.n	8002300 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	2200      	movs	r2, #0
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002282:	2200      	movs	r2, #0
 8002284:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	2200      	movs	r2, #0
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002296:	4619      	mov	r1, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80022a6:	f7fe fca9 	bl	8000bfc <HAL_DMA_Start_IT>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	75fb      	strb	r3, [r7, #23]

    goto error;
 80022c0:	e01e      	b.n	8002300 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022cc:	2b40      	cmp	r3, #64	@ 0x40
 80022ce:	d007      	beq.n	80022e0 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022de:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0220 	orr.w	r2, r2, #32
 80022ee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0202 	orr.w	r2, r2, #2
 80022fe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002308:	7dfb      	ldrb	r3, [r7, #23]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	08002699 	.word	0x08002699
 8002318:	08002561 	.word	0x08002561
 800231c:	080026b5 	.word	0x080026b5
 8002320:	08002609 	.word	0x08002609
 8002324:	080026d1 	.word	0x080026d1

08002328 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10e      	bne.n	8002368 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002350:	2b00      	cmp	r3, #0
 8002352:	d009      	beq.n	8002368 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
    return;
 8002366:	e0ce      	b.n	8002506 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_SPI_IRQHandler+0x5e>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
    return;
 8002384:	e0bf      	b.n	8002506 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <HAL_SPI_IRQHandler+0x7e>
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80b0 	beq.w	8002506 <HAL_SPI_IRQHandler+0x1de>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80aa 	beq.w	8002506 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d023      	beq.n	8002404 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d011      	beq.n	80023ec <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	e00b      	b.n	8002404 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
        return;
 8002402:	e080      	b.n	8002506 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d014      	beq.n	8002438 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00c      	beq.n	800245c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002446:	f043 0208 	orr.w	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002460:	2b00      	cmp	r3, #0
 8002462:	d04f      	beq.n	8002504 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002472:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d104      	bne.n	8002490 <HAL_SPI_IRQHandler+0x168>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d034      	beq.n	80024fa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0203 	bic.w	r2, r2, #3
 800249e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d011      	beq.n	80024cc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_SPI_IRQHandler+0x1e4>)
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fc01 	bl	8000cbc <HAL_DMA_Abort_IT>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d016      	beq.n	8002502 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d8:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <HAL_SPI_IRQHandler+0x1e4>)
 80024da:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fbeb 	bl	8000cbc <HAL_DMA_Abort_IT>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80024f8:	e003      	b.n	8002502 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f826 	bl	800254c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002500:	e000      	b.n	8002504 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002502:	bf00      	nop
    return;
 8002504:	bf00      	nop
  }
}
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	08002711 	.word	0x08002711

08002510 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800256e:	f7fe f94b 	bl	8000808 <HAL_GetTick>
 8002572:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b20      	cmp	r3, #32
 8002580:	d03c      	beq.n	80025fc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0220 	bic.w	r2, r2, #32
 8002590:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <SPI_DMAReceiveCplt+0x56>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a2:	d108      	bne.n	80025b6 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0203 	bic.w	r2, r2, #3
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	e007      	b.n	80025c6 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	2164      	movs	r1, #100	@ 0x64
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f9d4 	bl	8002978 <SPI_EndRxTransaction>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff ffa9 	bl	800254c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80025fa:	e002      	b.n	8002602 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ff87 	bl	8002510 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002616:	f7fe f8f7 	bl	8000808 <HAL_GetTick>
 800261a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d030      	beq.n	800268c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0220 	bic.w	r2, r2, #32
 8002638:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	2164      	movs	r1, #100	@ 0x64
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f9f2 	bl	8002a28 <SPI_EndRxTxTransaction>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264e:	f043 0220 	orr.w	r2, r3, #32
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0203 	bic.w	r2, r2, #3
 8002664:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff ff61 	bl	800254c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800268a:	e002      	b.n	8002692 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7fd fd9b 	bl	80001c8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f7ff ff3c 	bl	8002524 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff ff38 	bl	8002538 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0203 	bic.w	r2, r2, #3
 80026ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7ff ff22 	bl	800254c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff ff0d 	bl	800254c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800274c:	f7fe f85c 	bl	8000808 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	4413      	add	r3, r2
 800275a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800275c:	f7fe f854 	bl	8000808 <HAL_GetTick>
 8002760:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002762:	4b39      	ldr	r3, [pc, #228]	@ (8002848 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	015b      	lsls	r3, r3, #5
 8002768:	0d1b      	lsrs	r3, r3, #20
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002772:	e054      	b.n	800281e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d050      	beq.n	800281e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800277c:	f7fe f844 	bl	8000808 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	429a      	cmp	r2, r3
 800278a:	d902      	bls.n	8002792 <SPI_WaitFlagStateUntilTimeout+0x56>
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d13d      	bne.n	800280e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027aa:	d111      	bne.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027b4:	d004      	beq.n	80027c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027be:	d107      	bne.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027d8:	d10f      	bne.n	80027fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e017      	b.n	800283e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3b01      	subs	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	429a      	cmp	r2, r3
 800283a:	d19b      	bne.n	8002774 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000000c 	.word	0x2000000c

0800284c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800285e:	f7fd ffd3 	bl	8000808 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	4413      	add	r3, r2
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800286e:	f7fd ffcb 	bl	8000808 <HAL_GetTick>
 8002872:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	330c      	adds	r3, #12
 800287a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800287c:	4b3d      	ldr	r3, [pc, #244]	@ (8002974 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00da      	lsls	r2, r3, #3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	0d1b      	lsrs	r3, r3, #20
 800288c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002894:	e060      	b.n	8002958 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800289c:	d107      	bne.n	80028ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d104      	bne.n	80028ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d050      	beq.n	8002958 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028b6:	f7fd ffa7 	bl	8000808 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d902      	bls.n	80028cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d13d      	bne.n	8002948 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028e4:	d111      	bne.n	800290a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ee:	d004      	beq.n	80028fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f8:	d107      	bne.n	800290a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002908:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002912:	d10f      	bne.n	8002934 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002932:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e010      	b.n	800296a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	3b01      	subs	r3, #1
 8002956:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d196      	bne.n	8002896 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3728      	adds	r7, #40	@ 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000000c 	.word	0x2000000c

08002978 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800298c:	d111      	bne.n	80029b2 <SPI_EndRxTransaction+0x3a>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002996:	d004      	beq.n	80029a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a0:	d107      	bne.n	80029b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	@ 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff febd 	bl	800273c <SPI_WaitFlagStateUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e023      	b.n	8002a20 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029e0:	d11d      	bne.n	8002a1e <SPI_EndRxTransaction+0xa6>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ea:	d004      	beq.n	80029f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f4:	d113      	bne.n	8002a1e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ff22 	bl	800284c <SPI_WaitFifoStateUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e000      	b.n	8002a20 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff ff03 	bl	800284c <SPI_WaitFifoStateUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e027      	b.n	8002aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff fe68 	bl	800273c <SPI_WaitFlagStateUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e014      	b.n	8002aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff fedc 	bl	800284c <SPI_WaitFifoStateUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e000      	b.n	8002aac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <memset>:
 8002ab4:	4402      	add	r2, r0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d100      	bne.n	8002abe <memset+0xa>
 8002abc:	4770      	bx	lr
 8002abe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac2:	e7f9      	b.n	8002ab8 <memset+0x4>

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8002afc <__libc_init_array+0x38>)
 8002ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8002b00 <__libc_init_array+0x3c>)
 8002aca:	1b64      	subs	r4, r4, r5
 8002acc:	10a4      	asrs	r4, r4, #2
 8002ace:	2600      	movs	r6, #0
 8002ad0:	42a6      	cmp	r6, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8002b04 <__libc_init_array+0x40>)
 8002ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8002b08 <__libc_init_array+0x44>)
 8002ad8:	f000 f818 	bl	8002b0c <_init>
 8002adc:	1b64      	subs	r4, r4, r5
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	2600      	movs	r6, #0
 8002ae2:	42a6      	cmp	r6, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aec:	4798      	blx	r3
 8002aee:	3601      	adds	r6, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af6:	4798      	blx	r3
 8002af8:	3601      	adds	r6, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	08002b64 	.word	0x08002b64
 8002b00:	08002b64 	.word	0x08002b64
 8002b04:	08002b64 	.word	0x08002b64
 8002b08:	08002b68 	.word	0x08002b68

08002b0c <_init>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr

08002b18 <_fini>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr

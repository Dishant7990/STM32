
11.1_USB_HID_MOUSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007984  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007a44  08007a44  00008a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b08  08007b08  00009164  2**0
                  CONTENTS
  4 .ARM          00000008  08007b08  08007b08  00008b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b10  08007b10  00009164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b10  08007b10  00008b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b14  08007b14  00008b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08007b18  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000164  08007c7c  00009164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  08007c7c  00009958  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b697  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  00014823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00017068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000779  00000000  00000000  00017aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154eb  00000000  00000000  00018219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e769  00000000  00000000  0002d704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007707a  00000000  00000000  0003be6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a0  00000000  00000000  000b2f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000b51cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a2c 	.word	0x08007a2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	08007a2c 	.word	0x08007a2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f944 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f820 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f894 	bl	80005e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004b8:	f006 fe1a 	bl	80070f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  buffer[0] = 0x10;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <main+0x44>)
 80004be:	2210      	movs	r2, #16
 80004c0:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x00;
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <main+0x44>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	705a      	strb	r2, [r3, #1]
  buffer[2] = 0x00;
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <main+0x44>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	709a      	strb	r2, [r3, #2]
  buffer[3] = 0x00;
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <main+0x44>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	70da      	strb	r2, [r3, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
		USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 80004d4:	4905      	ldr	r1, [pc, #20]	@ (80004ec <main+0x44>)
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <main+0x48>)
 80004d8:	2204      	movs	r2, #4
 80004da:	0018      	movs	r0, r3
 80004dc:	f005 fbb0 	bl	8005c40 <USBD_HID_SendReport>
		HAL_Delay(50);
 80004e0:	2032      	movs	r0, #50	@ 0x32
 80004e2:	f000 f999 	bl	8000818 <HAL_Delay>
		USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	e7f4      	b.n	80004d4 <main+0x2c>
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	20000180 	.word	0x20000180
 80004f0:	2000018c 	.word	0x2000018c

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b09d      	sub	sp, #116	@ 0x74
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	2438      	movs	r4, #56	@ 0x38
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2338      	movs	r3, #56	@ 0x38
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f007 fa65 	bl	80079d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	2324      	movs	r3, #36	@ 0x24
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	0018      	movs	r0, r3
 8000510:	2314      	movs	r3, #20
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f007 fa5d 	bl	80079d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051a:	003b      	movs	r3, r7
 800051c:	0018      	movs	r0, r3
 800051e:	2324      	movs	r3, #36	@ 0x24
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f007 fa56 	bl	80079d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	4b2b      	ldr	r3, [pc, #172]	@ (80005d8 <SystemClock_Config+0xe4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a2b      	ldr	r2, [pc, #172]	@ (80005dc <SystemClock_Config+0xe8>)
 800052e:	401a      	ands	r2, r3
 8000530:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <SystemClock_Config+0xe4>)
 8000532:	2180      	movs	r1, #128	@ 0x80
 8000534:	0109      	lsls	r1, r1, #4
 8000536:	430a      	orrs	r2, r1
 8000538:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800053a:	0021      	movs	r1, r4
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2222      	movs	r2, #34	@ 0x22
 8000540:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2210      	movs	r2, #16
 800054c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2201      	movs	r2, #1
 8000552:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2202      	movs	r2, #2
 8000558:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2280      	movs	r2, #128	@ 0x80
 8000564:	02d2      	lsls	r2, r2, #11
 8000566:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	03d2      	lsls	r2, r2, #15
 800056e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	187b      	adds	r3, r7, r1
 8000572:	0018      	movs	r0, r3
 8000574:	f002 fa00 	bl	8002978 <HAL_RCC_OscConfig>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800057c:	f000 f86c 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	2124      	movs	r1, #36	@ 0x24
 8000582:	187b      	adds	r3, r7, r1
 8000584:	220f      	movs	r2, #15
 8000586:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2203      	movs	r2, #3
 800058c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2101      	movs	r1, #1
 80005a4:	0018      	movs	r0, r3
 80005a6:	f002 fdab 	bl	8003100 <HAL_RCC_ClockConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005ae:	f000 f853 	bl	8000658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2240      	movs	r2, #64	@ 0x40
 80005b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	04d2      	lsls	r2, r2, #19
 80005be:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c0:	003b      	movs	r3, r7
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 ff8a 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005cc:	f000 f844 	bl	8000658 <Error_Handler>
  }
}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b01d      	add	sp, #116	@ 0x74
 80005d6:	bd90      	pop	{r4, r7, pc}
 80005d8:	40007000 	.word	0x40007000
 80005dc:	ffffe7ff 	.word	0xffffe7ff

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b089      	sub	sp, #36	@ 0x24
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	240c      	movs	r4, #12
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f007 f9ef 	bl	80079d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <MX_GPIO_Init+0x70>)
 80005f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <MX_GPIO_Init+0x70>)
 80005fc:	2104      	movs	r1, #4
 80005fe:	430a      	orrs	r2, r1
 8000600:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000602:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <MX_GPIO_Init+0x70>)
 8000604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000606:	2204      	movs	r2, #4
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <MX_GPIO_Init+0x70>)
 8000610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_GPIO_Init+0x70>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	62da      	str	r2, [r3, #44]	@ 0x2c
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <MX_GPIO_Init+0x70>)
 800061c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BSP_BUTTON_Pin */
  GPIO_InitStruct.Pin = BSP_BUTTON_Pin;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	0192      	lsls	r2, r2, #6
 800062c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BSP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800063a:	193b      	adds	r3, r7, r4
 800063c:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <MX_GPIO_Init+0x74>)
 800063e:	0019      	movs	r1, r3
 8000640:	0010      	movs	r0, r2
 8000642:	f000 f9eb 	bl	8000a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b009      	add	sp, #36	@ 0x24
 800064c:	bd90      	pop	{r4, r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	40021000 	.word	0x40021000
 8000654:	50000800 	.word	0x50000800

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	e7fd      	b.n	8000660 <Error_Handler+0x8>

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <HAL_MspInit+0x24>)
 800066a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_MspInit+0x24>)
 800066e:	2101      	movs	r1, #1
 8000670:	430a      	orrs	r2, r1
 8000672:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <HAL_MspInit+0x24>)
 8000676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <HAL_MspInit+0x24>)
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	0549      	lsls	r1, r1, #21
 800067e:	430a      	orrs	r2, r1
 8000680:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	e7fd      	b.n	8000690 <NMI_Handler+0x4>

08000694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	e7fd      	b.n	8000698 <HardFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f894 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <USB_IRQHandler+0x14>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fc44 	bl	8000f54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	20000650 	.word	0x20000650

080006d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e8:	f7ff fff6 	bl	80006d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	@ (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	@ (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000712:	f007 f967 	bl	80079e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000716:	f7ff fec7 	bl	80004a8 <main>

0800071a <LoopForever>:

LoopForever:
    b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   r0, =_estack
 800071c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000728:	08007b18 	.word	0x08007b18
  ldr r2, =_sbss
 800072c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000730:	20000958 	.word	0x20000958

08000734 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_COMP_IRQHandler>
	...

08000738 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <HAL_Init+0x3c>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <HAL_Init+0x3c>)
 800074a:	2140      	movs	r1, #64	@ 0x40
 800074c:	430a      	orrs	r2, r1
 800074e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000750:	2000      	movs	r0, #0
 8000752:	f000 f811 	bl	8000778 <HAL_InitTick>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d003      	beq.n	8000762 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	e001      	b.n	8000766 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000762:	f7ff ff7f 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	781b      	ldrb	r3, [r3, #0]
}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <HAL_InitTick+0x5c>)
 8000782:	681c      	ldr	r4, [r3, #0]
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_InitTick+0x60>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	0019      	movs	r1, r3
 800078a:	23fa      	movs	r3, #250	@ 0xfa
 800078c:	0098      	lsls	r0, r3, #2
 800078e:	f7ff fcbb 	bl	8000108 <__udivsi3>
 8000792:	0003      	movs	r3, r0
 8000794:	0019      	movs	r1, r3
 8000796:	0020      	movs	r0, r4
 8000798:	f7ff fcb6 	bl	8000108 <__udivsi3>
 800079c:	0003      	movs	r3, r0
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 f92f 	bl	8000a02 <HAL_SYSTICK_Config>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e00f      	b.n	80007cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d80b      	bhi.n	80007ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	2301      	movs	r3, #1
 80007b6:	425b      	negs	r3, r3
 80007b8:	2200      	movs	r2, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 f8fc 	bl	80009b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_InitTick+0x64>)
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e000      	b.n	80007cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b003      	add	sp, #12
 80007d2:	bd90      	pop	{r4, r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000004 	.word	0x20000004

080007e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <HAL_IncTick+0x1c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	001a      	movs	r2, r3
 80007ea:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <HAL_IncTick+0x20>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	18d2      	adds	r2, r2, r3
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <HAL_IncTick+0x20>)
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000184 	.word	0x20000184

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b02      	ldr	r3, [pc, #8]	@ (8000814 <HAL_GetTick+0x10>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	20000184 	.word	0x20000184

08000818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff fff0 	bl	8000804 <HAL_GetTick>
 8000824:	0003      	movs	r3, r0
 8000826:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	d005      	beq.n	800083e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <HAL_Delay+0x44>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	001a      	movs	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	189b      	adds	r3, r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	f7ff ffe0 	bl	8000804 <HAL_GetTick>
 8000844:	0002      	movs	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f7      	bhi.n	8000840 <HAL_Delay+0x28>
  {
  }
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	20000008 	.word	0x20000008

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	0002      	movs	r2, r0
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b7f      	cmp	r3, #127	@ 0x7f
 8000872:	d809      	bhi.n	8000888 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	231f      	movs	r3, #31
 800087c:	401a      	ands	r2, r3
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <__NVIC_EnableIRQ+0x30>)
 8000880:	2101      	movs	r1, #1
 8000882:	4091      	lsls	r1, r2
 8000884:	000a      	movs	r2, r1
 8000886:	601a      	str	r2, [r3, #0]
  }
}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}
 8000890:	e000e100 	.word	0xe000e100

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80008a8:	d828      	bhi.n	80008fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000968 <__NVIC_SetPriority+0xd4>)
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	33c0      	adds	r3, #192	@ 0xc0
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	589b      	ldr	r3, [r3, r2]
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	2203      	movs	r2, #3
 80008c2:	400a      	ands	r2, r1
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	21ff      	movs	r1, #255	@ 0xff
 80008c8:	4091      	lsls	r1, r2
 80008ca:	000a      	movs	r2, r1
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	401a      	ands	r2, r3
 80008d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	22ff      	movs	r2, #255	@ 0xff
 80008d8:	401a      	ands	r2, r3
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	2303      	movs	r3, #3
 80008e2:	4003      	ands	r3, r0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	481f      	ldr	r0, [pc, #124]	@ (8000968 <__NVIC_SetPriority+0xd4>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	089b      	lsrs	r3, r3, #2
 80008f2:	430a      	orrs	r2, r1
 80008f4:	33c0      	adds	r3, #192	@ 0xc0
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008fa:	e031      	b.n	8000960 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <__NVIC_SetPriority+0xd8>)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	0019      	movs	r1, r3
 8000904:	230f      	movs	r3, #15
 8000906:	400b      	ands	r3, r1
 8000908:	3b08      	subs	r3, #8
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	3306      	adds	r3, #6
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	18d3      	adds	r3, r2, r3
 8000912:	3304      	adds	r3, #4
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1dfa      	adds	r2, r7, #7
 8000918:	7812      	ldrb	r2, [r2, #0]
 800091a:	0011      	movs	r1, r2
 800091c:	2203      	movs	r2, #3
 800091e:	400a      	ands	r2, r1
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	21ff      	movs	r1, #255	@ 0xff
 8000924:	4091      	lsls	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	43d2      	mvns	r2, r2
 800092a:	401a      	ands	r2, r3
 800092c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	22ff      	movs	r2, #255	@ 0xff
 8000934:	401a      	ands	r2, r3
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0018      	movs	r0, r3
 800093c:	2303      	movs	r3, #3
 800093e:	4003      	ands	r3, r0
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000944:	4809      	ldr	r0, [pc, #36]	@ (800096c <__NVIC_SetPriority+0xd8>)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	001c      	movs	r4, r3
 800094c:	230f      	movs	r3, #15
 800094e:	4023      	ands	r3, r4
 8000950:	3b08      	subs	r3, #8
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	430a      	orrs	r2, r1
 8000956:	3306      	adds	r3, #6
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	18c3      	adds	r3, r0, r3
 800095c:	3304      	adds	r3, #4
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b003      	add	sp, #12
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	045b      	lsls	r3, r3, #17
 8000980:	429a      	cmp	r2, r3
 8000982:	d301      	bcc.n	8000988 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000984:	2301      	movs	r3, #1
 8000986:	e010      	b.n	80009aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <SysTick_Config+0x44>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	3a01      	subs	r2, #1
 800098e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000990:	2301      	movs	r3, #1
 8000992:	425b      	negs	r3, r3
 8000994:	2103      	movs	r1, #3
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff ff7c 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <SysTick_Config+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a2:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <SysTick_Config+0x44>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	0018      	movs	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b002      	add	sp, #8
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	210f      	movs	r1, #15
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	1c02      	adds	r2, r0, #0
 80009c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ff5d 	bl	8000894 <__NVIC_SetPriority>
}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	0002      	movs	r2, r0
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ff33 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ffaf 	bl	8000970 <SysTick_Config>
 8000a12:	0003      	movs	r3, r0
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a32:	e14f      	b.n	8000cd4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d100      	bne.n	8000a4c <HAL_GPIO_Init+0x30>
 8000a4a:	e140      	b.n	8000cce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2203      	movs	r2, #3
 8000a52:	4013      	ands	r3, r2
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d005      	beq.n	8000a64 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	409a      	lsls	r2, r3
 8000a72:	0013      	movs	r3, r2
 8000a74:	43da      	mvns	r2, r3
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	409a      	lsls	r2, r3
 8000a86:	0013      	movs	r3, r2
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2203      	movs	r2, #3
 8000acc:	4013      	ands	r3, r2
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d017      	beq.n	8000b02 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2203      	movs	r2, #3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d123      	bne.n	8000b56 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	58d3      	ldr	r3, [r2, r3]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2207      	movs	r2, #7
 8000b20:	4013      	ands	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	220f      	movs	r2, #15
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2107      	movs	r1, #7
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	08da      	lsrs	r2, r3, #3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	6939      	ldr	r1, [r7, #16]
 8000b54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	43da      	mvns	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2203      	movs	r2, #3
 8000b74:	401a      	ands	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	23c0      	movs	r3, #192	@ 0xc0
 8000b90:	029b      	lsls	r3, r3, #10
 8000b92:	4013      	ands	r3, r2
 8000b94:	d100      	bne.n	8000b98 <HAL_GPIO_Init+0x17c>
 8000b96:	e09a      	b.n	8000cce <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	4b54      	ldr	r3, [pc, #336]	@ (8000cec <HAL_GPIO_Init+0x2d0>)
 8000b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b9c:	4b53      	ldr	r3, [pc, #332]	@ (8000cec <HAL_GPIO_Init+0x2d0>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ba4:	4a52      	ldr	r2, [pc, #328]	@ (8000cf0 <HAL_GPIO_Init+0x2d4>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	589b      	ldr	r3, [r3, r2]
 8000bb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	23a0      	movs	r3, #160	@ 0xa0
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d019      	beq.n	8000c06 <HAL_GPIO_Init+0x1ea>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a47      	ldr	r2, [pc, #284]	@ (8000cf4 <HAL_GPIO_Init+0x2d8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_Init+0x1e6>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a46      	ldr	r2, [pc, #280]	@ (8000cf8 <HAL_GPIO_Init+0x2dc>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d00d      	beq.n	8000bfe <HAL_GPIO_Init+0x1e2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a45      	ldr	r2, [pc, #276]	@ (8000cfc <HAL_GPIO_Init+0x2e0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d007      	beq.n	8000bfa <HAL_GPIO_Init+0x1de>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a44      	ldr	r2, [pc, #272]	@ (8000d00 <HAL_GPIO_Init+0x2e4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_GPIO_Init+0x1da>
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	e008      	b.n	8000c08 <HAL_GPIO_Init+0x1ec>
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x1ec>
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e004      	b.n	8000c08 <HAL_GPIO_Init+0x1ec>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e002      	b.n	8000c08 <HAL_GPIO_Init+0x1ec>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x1ec>
 8000c06:	2300      	movs	r3, #0
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4093      	lsls	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c18:	4935      	ldr	r1, [pc, #212]	@ (8000cf0 <HAL_GPIO_Init+0x2d4>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c26:	4b37      	ldr	r3, [pc, #220]	@ (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	035b      	lsls	r3, r3, #13
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c50:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	039b      	lsls	r3, r3, #14
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c74:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000c7a:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43da      	mvns	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	029b      	lsls	r3, r3, #10
 8000c92:	4013      	ands	r3, r2
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	025b      	lsls	r3, r3, #9
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	40da      	lsrs	r2, r3
 8000cdc:	1e13      	subs	r3, r2, #0
 8000cde:	d000      	beq.n	8000ce2 <HAL_GPIO_Init+0x2c6>
 8000ce0:	e6a8      	b.n	8000a34 <HAL_GPIO_Init+0x18>
  }
}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b006      	add	sp, #24
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	50000400 	.word	0x50000400
 8000cf8:	50000800 	.word	0x50000800
 8000cfc:	50000c00 	.word	0x50000c00
 8000d00:	50001c00 	.word	0x50001c00
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	b08b      	sub	sp, #44	@ 0x2c
 8000d0c:	af06      	add	r7, sp, #24
 8000d0e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e0f0      	b.n	8000efc <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a79      	ldr	r2, [pc, #484]	@ (8000f04 <HAL_PCD_Init+0x1fc>)
 8000d1e:	5c9b      	ldrb	r3, [r3, r2]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d108      	bne.n	8000d38 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	23aa      	movs	r3, #170	@ 0xaa
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f006 fb22 	bl	800737c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a72      	ldr	r2, [pc, #456]	@ (8000f04 <HAL_PCD_Init+0x1fc>)
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 fd6d 	bl	8003824 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e049      	b.n	8000de8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d54:	200f      	movs	r0, #15
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	0013      	movs	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	189b      	adds	r3, r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	18cb      	adds	r3, r1, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	0013      	movs	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	183a      	adds	r2, r7, r0
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d84:	183b      	adds	r3, r7, r0
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	189b      	adds	r3, r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	18cb      	adds	r3, r1, r3
 8000d96:	3303      	adds	r3, #3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d9c:	183b      	adds	r3, r7, r0
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	0013      	movs	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	189b      	adds	r3, r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	18cb      	adds	r3, r1, r3
 8000dac:	3338      	adds	r3, #56	@ 0x38
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000db2:	183b      	adds	r3, r7, r0
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	0013      	movs	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	189b      	adds	r3, r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	18cb      	adds	r3, r1, r3
 8000dc2:	333c      	adds	r3, #60	@ 0x3c
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dc8:	183b      	adds	r3, r7, r0
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	0013      	movs	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	189b      	adds	r3, r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	18cb      	adds	r3, r1, r3
 8000dd8:	3340      	adds	r3, #64	@ 0x40
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	183b      	adds	r3, r7, r0
 8000de4:	3201      	adds	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	210f      	movs	r1, #15
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d3ae      	bcc.n	8000d54 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e056      	b.n	8000eac <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dfe:	240f      	movs	r4, #15
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	236a      	movs	r3, #106	@ 0x6a
 8000e08:	33ff      	adds	r3, #255	@ 0xff
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	189b      	adds	r3, r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	18c3      	adds	r3, r0, r3
 8000e16:	185b      	adds	r3, r3, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	23b4      	movs	r3, #180	@ 0xb4
 8000e24:	0059      	lsls	r1, r3, #1
 8000e26:	0013      	movs	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	189b      	adds	r3, r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	18c3      	adds	r3, r0, r3
 8000e30:	185b      	adds	r3, r3, r1
 8000e32:	193a      	adds	r2, r7, r4
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	236c      	movs	r3, #108	@ 0x6c
 8000e40:	33ff      	adds	r3, #255	@ 0xff
 8000e42:	0019      	movs	r1, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	189b      	adds	r3, r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	18c3      	adds	r3, r0, r3
 8000e4e:	185b      	adds	r3, r3, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	23bc      	movs	r3, #188	@ 0xbc
 8000e5c:	0059      	lsls	r1, r3, #1
 8000e5e:	0013      	movs	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	189b      	adds	r3, r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	18c3      	adds	r3, r0, r3
 8000e68:	185b      	adds	r3, r3, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	23be      	movs	r3, #190	@ 0xbe
 8000e76:	0059      	lsls	r1, r3, #1
 8000e78:	0013      	movs	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	189b      	adds	r3, r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	18c3      	adds	r3, r0, r3
 8000e82:	185b      	adds	r3, r3, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	23c0      	movs	r3, #192	@ 0xc0
 8000e90:	0059      	lsls	r1, r3, #1
 8000e92:	0013      	movs	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	18c3      	adds	r3, r0, r3
 8000e9c:	185b      	adds	r3, r3, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	3201      	adds	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	230f      	movs	r3, #15
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d3a1      	bcc.n	8000dfe <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	466a      	mov	r2, sp
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	3210      	adds	r2, #16
 8000ec8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000eca:	c170      	stmia	r1!, {r4, r5, r6}
 8000ecc:	ca30      	ldmia	r2!, {r4, r5}
 8000ece:	c130      	stmia	r1!, {r4, r5}
 8000ed0:	6859      	ldr	r1, [r3, #4]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f002 fcbf 	bl	8003858 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2224      	movs	r2, #36	@ 0x24
 8000ede:	2100      	movs	r1, #0
 8000ee0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_PCD_Init+0x1fc>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d103      	bne.n	8000efa <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 fd09 	bl	800290c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b005      	add	sp, #20
 8000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f04:	000002a9 	.word	0x000002a9

08000f08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	23aa      	movs	r3, #170	@ 0xaa
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	5cd3      	ldrb	r3, [r2, r3]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <HAL_PCD_Start+0x18>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e014      	b.n	8000f4a <HAL_PCD_Start+0x42>
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	23aa      	movs	r3, #170	@ 0xaa
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	2101      	movs	r1, #1
 8000f28:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f002 fc62 	bl	80037f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f004 fc65 	bl	8005808 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	23aa      	movs	r3, #170	@ 0xaa
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	2100      	movs	r1, #0
 8000f46:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0018      	movs	r0, r3
 8000f62:	f004 fc67 	bl	8005834 <USB_ReadInterrupts>
 8000f66:	0003      	movs	r3, r0
 8000f68:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	4013      	ands	r3, r2
 8000f72:	d004      	beq.n	8000f7e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 fb48 	bl	800160c <PCD_EP_ISR_Handler>

    return;
 8000f7c:	e11d      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4013      	ands	r3, r2
 8000f86:	d015      	beq.n	8000fb4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2244      	movs	r2, #68	@ 0x44
 8000f8e:	5a9b      	ldrh	r3, [r3, r2]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	498a      	ldr	r1, [pc, #552]	@ (80011c0 <HAL_PCD_IRQHandler+0x26c>)
 8000f98:	400a      	ands	r2, r1
 8000f9a:	b291      	uxth	r1, r2
 8000f9c:	2244      	movs	r2, #68	@ 0x44
 8000f9e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f006 fa6d 	bl	8007482 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2100      	movs	r1, #0
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 f915 	bl	80011dc <HAL_PCD_SetAddress>

    return;
 8000fb2:	e102      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	01db      	lsls	r3, r3, #7
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d00c      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2244      	movs	r2, #68	@ 0x44
 8000fc4:	5a9b      	ldrh	r3, [r3, r2]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	497d      	ldr	r1, [pc, #500]	@ (80011c4 <HAL_PCD_IRQHandler+0x270>)
 8000fce:	400a      	ands	r2, r1
 8000fd0:	b291      	uxth	r1, r2
 8000fd2:	2244      	movs	r2, #68	@ 0x44
 8000fd4:	5299      	strh	r1, [r3, r2]

    return;
 8000fd6:	e0f0      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	019b      	lsls	r3, r3, #6
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d00c      	beq.n	8000ffc <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2244      	movs	r2, #68	@ 0x44
 8000fe8:	5a9b      	ldrh	r3, [r3, r2]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4975      	ldr	r1, [pc, #468]	@ (80011c8 <HAL_PCD_IRQHandler+0x274>)
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	b291      	uxth	r1, r2
 8000ff6:	2244      	movs	r2, #68	@ 0x44
 8000ff8:	5299      	strh	r1, [r3, r2]

    return;
 8000ffa:	e0de      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	015b      	lsls	r3, r3, #5
 8001002:	4013      	ands	r3, r2
 8001004:	d038      	beq.n	8001078 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2240      	movs	r2, #64	@ 0x40
 800100c:	5a9b      	ldrh	r3, [r3, r2]
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2104      	movs	r1, #4
 8001016:	438a      	bics	r2, r1
 8001018:	b291      	uxth	r1, r2
 800101a:	2240      	movs	r2, #64	@ 0x40
 800101c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2240      	movs	r2, #64	@ 0x40
 8001024:	5a9b      	ldrh	r3, [r3, r2]
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2108      	movs	r1, #8
 800102e:	438a      	bics	r2, r1
 8001030:	b291      	uxth	r1, r2
 8001032:	2240      	movs	r2, #64	@ 0x40
 8001034:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	23b8      	movs	r3, #184	@ 0xb8
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d109      	bne.n	8001056 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	23b8      	movs	r3, #184	@ 0xb8
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	2100      	movs	r1, #0
 800104a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2100      	movs	r1, #0
 8001050:	0018      	movs	r0, r3
 8001052:	f001 fc85 	bl	8002960 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f006 fa53 	bl	8007504 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2244      	movs	r2, #68	@ 0x44
 8001064:	5a9b      	ldrh	r3, [r3, r2]
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4957      	ldr	r1, [pc, #348]	@ (80011cc <HAL_PCD_IRQHandler+0x278>)
 800106e:	400a      	ands	r2, r1
 8001070:	b291      	uxth	r1, r2
 8001072:	2244      	movs	r2, #68	@ 0x44
 8001074:	5299      	strh	r1, [r3, r2]

    return;
 8001076:	e0a0      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4013      	ands	r3, r2
 8001080:	d028      	beq.n	80010d4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2240      	movs	r2, #64	@ 0x40
 8001088:	5a9b      	ldrh	r3, [r3, r2]
 800108a:	b29a      	uxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2108      	movs	r1, #8
 8001092:	430a      	orrs	r2, r1
 8001094:	b291      	uxth	r1, r2
 8001096:	2240      	movs	r2, #64	@ 0x40
 8001098:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2244      	movs	r2, #68	@ 0x44
 80010a0:	5a9b      	ldrh	r3, [r3, r2]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4949      	ldr	r1, [pc, #292]	@ (80011d0 <HAL_PCD_IRQHandler+0x27c>)
 80010aa:	400a      	ands	r2, r1
 80010ac:	b291      	uxth	r1, r2
 80010ae:	2244      	movs	r2, #68	@ 0x44
 80010b0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2240      	movs	r2, #64	@ 0x40
 80010b8:	5a9b      	ldrh	r3, [r3, r2]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2104      	movs	r1, #4
 80010c2:	430a      	orrs	r2, r1
 80010c4:	b291      	uxth	r1, r2
 80010c6:	2240      	movs	r2, #64	@ 0x40
 80010c8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	0018      	movs	r0, r3
 80010ce:	f006 f9fd 	bl	80074cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010d2:	e072      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2280      	movs	r2, #128	@ 0x80
 80010d8:	4013      	ands	r3, r2
 80010da:	d046      	beq.n	800116a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2244      	movs	r2, #68	@ 0x44
 80010e2:	5a9b      	ldrh	r3, [r3, r2]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2180      	movs	r1, #128	@ 0x80
 80010ec:	438a      	bics	r2, r1
 80010ee:	b291      	uxth	r1, r2
 80010f0:	2244      	movs	r2, #68	@ 0x44
 80010f2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	23b8      	movs	r3, #184	@ 0xb8
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d12f      	bne.n	8001160 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2240      	movs	r2, #64	@ 0x40
 8001106:	5a9b      	ldrh	r3, [r3, r2]
 8001108:	b29a      	uxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2104      	movs	r1, #4
 8001110:	430a      	orrs	r2, r1
 8001112:	b291      	uxth	r1, r2
 8001114:	2240      	movs	r2, #64	@ 0x40
 8001116:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2240      	movs	r2, #64	@ 0x40
 800111e:	5a9b      	ldrh	r3, [r3, r2]
 8001120:	b29a      	uxth	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2108      	movs	r1, #8
 8001128:	430a      	orrs	r2, r1
 800112a:	b291      	uxth	r1, r2
 800112c:	2240      	movs	r2, #64	@ 0x40
 800112e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	23b8      	movs	r3, #184	@ 0xb8
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	2101      	movs	r1, #1
 8001138:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2254      	movs	r2, #84	@ 0x54
 8001140:	5a9b      	ldrh	r3, [r3, r2]
 8001142:	b29b      	uxth	r3, r3
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	223c      	movs	r2, #60	@ 0x3c
 8001148:	4013      	ands	r3, r2
 800114a:	0019      	movs	r1, r3
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	23b9      	movs	r3, #185	@ 0xb9
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2101      	movs	r1, #1
 8001158:	0018      	movs	r0, r3
 800115a:	f001 fc01 	bl	8002960 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800115e:	e02c      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	0018      	movs	r0, r3
 8001164:	f006 f9b2 	bl	80074cc <HAL_PCD_SuspendCallback>
    return;
 8001168:	e027      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4013      	ands	r3, r2
 8001172:	d010      	beq.n	8001196 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2244      	movs	r2, #68	@ 0x44
 800117a:	5a9b      	ldrh	r3, [r3, r2]
 800117c:	b29a      	uxth	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4914      	ldr	r1, [pc, #80]	@ (80011d4 <HAL_PCD_IRQHandler+0x280>)
 8001184:	400a      	ands	r2, r1
 8001186:	b291      	uxth	r1, r2
 8001188:	2244      	movs	r2, #68	@ 0x44
 800118a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	f006 f968 	bl	8007464 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001194:	e011      	b.n	80011ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4013      	ands	r3, r2
 800119e:	d00c      	beq.n	80011ba <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2244      	movs	r2, #68	@ 0x44
 80011a6:	5a9b      	ldrh	r3, [r3, r2]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	490a      	ldr	r1, [pc, #40]	@ (80011d8 <HAL_PCD_IRQHandler+0x284>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	b291      	uxth	r1, r2
 80011b4:	2244      	movs	r2, #68	@ 0x44
 80011b6:	5299      	strh	r1, [r3, r2]

    return;
 80011b8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	fffffbff 	.word	0xfffffbff
 80011c4:	ffffbfff 	.word	0xffffbfff
 80011c8:	ffffdfff 	.word	0xffffdfff
 80011cc:	ffffefff 	.word	0xffffefff
 80011d0:	fffff7ff 	.word	0xfffff7ff
 80011d4:	fffffdff 	.word	0xfffffdff
 80011d8:	fffffeff 	.word	0xfffffeff

080011dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	000a      	movs	r2, r1
 80011e6:	1cfb      	adds	r3, r7, #3
 80011e8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	23aa      	movs	r3, #170	@ 0xaa
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_PCD_SetAddress+0x1e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e017      	b.n	800122a <HAL_PCD_SetAddress+0x4e>
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	23aa      	movs	r3, #170	@ 0xaa
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	2101      	movs	r1, #1
 8001202:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	1cfa      	adds	r2, r7, #3
 8001208:	2124      	movs	r1, #36	@ 0x24
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	1cfb      	adds	r3, r7, #3
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	0019      	movs	r1, r3
 8001218:	0010      	movs	r0, r2
 800121a:	f004 fae1 	bl	80057e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	23aa      	movs	r3, #170	@ 0xaa
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	2100      	movs	r1, #0
 8001226:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001232:	b590      	push	{r4, r7, lr}
 8001234:	b085      	sub	sp, #20
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	000c      	movs	r4, r1
 800123c:	0010      	movs	r0, r2
 800123e:	0019      	movs	r1, r3
 8001240:	1cfb      	adds	r3, r7, #3
 8001242:	1c22      	adds	r2, r4, #0
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	003b      	movs	r3, r7
 8001248:	1c02      	adds	r2, r0, #0
 800124a:	801a      	strh	r2, [r3, #0]
 800124c:	1cbb      	adds	r3, r7, #2
 800124e:	1c0a      	adds	r2, r1, #0
 8001250:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001252:	230b      	movs	r3, #11
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800125a:	1cfb      	adds	r3, r7, #3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b25b      	sxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	da0f      	bge.n	8001284 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001264:	1cfb      	adds	r3, r7, #3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2207      	movs	r2, #7
 800126a:	4013      	ands	r3, r2
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	0013      	movs	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	189b      	adds	r3, r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2201      	movs	r2, #1
 8001280:	705a      	strb	r2, [r3, #1]
 8001282:	e00f      	b.n	80012a4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001284:	1cfb      	adds	r3, r7, #3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2207      	movs	r2, #7
 800128a:	401a      	ands	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	189b      	adds	r3, r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	3369      	adds	r3, #105	@ 0x69
 8001296:	33ff      	adds	r3, #255	@ 0xff
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d3      	adds	r3, r2, r3
 800129c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012a4:	1cfb      	adds	r3, r7, #3
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2207      	movs	r2, #7
 80012aa:	4013      	ands	r3, r2
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012b2:	003b      	movs	r3, r7
 80012b4:	881a      	ldrh	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1cba      	adds	r2, r7, #2
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012c2:	1cbb      	adds	r3, r7, #2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d102      	bne.n	80012d0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	23aa      	movs	r3, #170	@ 0xaa
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_PCD_EP_Open+0xae>
 80012dc:	2302      	movs	r3, #2
 80012de:	e013      	b.n	8001308 <HAL_PCD_EP_Open+0xd6>
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	23aa      	movs	r3, #170	@ 0xaa
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	2101      	movs	r1, #1
 80012e8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	0011      	movs	r1, r2
 80012f2:	0018      	movs	r0, r3
 80012f4:	f002 fad8 	bl	80038a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	23aa      	movs	r3, #170	@ 0xaa
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	2100      	movs	r1, #0
 8001300:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001302:	230b      	movs	r3, #11
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781b      	ldrb	r3, [r3, #0]
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b005      	add	sp, #20
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	000a      	movs	r2, r1
 800131a:	1cfb      	adds	r3, r7, #3
 800131c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800131e:	1cfb      	adds	r3, r7, #3
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b25b      	sxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	da0f      	bge.n	8001348 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001328:	1cfb      	adds	r3, r7, #3
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2207      	movs	r2, #7
 800132e:	4013      	ands	r3, r2
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	0013      	movs	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	189b      	adds	r3, r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	705a      	strb	r2, [r3, #1]
 8001346:	e00f      	b.n	8001368 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001348:	1cfb      	adds	r3, r7, #3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2207      	movs	r2, #7
 800134e:	401a      	ands	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	189b      	adds	r3, r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	3369      	adds	r3, #105	@ 0x69
 800135a:	33ff      	adds	r3, #255	@ 0xff
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	18d3      	adds	r3, r2, r3
 8001360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001368:	1cfb      	adds	r3, r7, #3
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2207      	movs	r2, #7
 800136e:	4013      	ands	r3, r2
 8001370:	b2da      	uxtb	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	23aa      	movs	r3, #170	@ 0xaa
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_PCD_EP_Close+0x76>
 8001382:	2302      	movs	r3, #2
 8001384:	e011      	b.n	80013aa <HAL_PCD_EP_Close+0x9a>
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	23aa      	movs	r3, #170	@ 0xaa
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	2101      	movs	r1, #1
 800138e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f002 fe27 	bl	8003fec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	23aa      	movs	r3, #170	@ 0xaa
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	2100      	movs	r1, #0
 80013a6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b004      	add	sp, #16
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	200b      	movs	r0, #11
 80013c0:	183b      	adds	r3, r7, r0
 80013c2:	1c0a      	adds	r2, r1, #0
 80013c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013c6:	0001      	movs	r1, r0
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2207      	movs	r2, #7
 80013ce:	401a      	ands	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	189b      	adds	r3, r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	3369      	adds	r3, #105	@ 0x69
 80013da:	33ff      	adds	r3, #255	@ 0xff
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	18d3      	adds	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2200      	movs	r2, #0
 80013f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2207      	movs	r2, #7
 8001400:	4013      	ands	r3, r2
 8001402:	b2da      	uxtb	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f002 ffab 	bl	800436c <USB_EPStartXfer>

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b006      	add	sp, #24
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	200b      	movs	r0, #11
 800142e:	183b      	adds	r3, r7, r0
 8001430:	1c0a      	adds	r2, r1, #0
 8001432:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001434:	183b      	adds	r3, r7, r0
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2207      	movs	r2, #7
 800143a:	4013      	ands	r3, r2
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	0013      	movs	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	189b      	adds	r3, r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2224      	movs	r2, #36	@ 0x24
 800145c:	2101      	movs	r1, #1
 800145e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2201      	movs	r2, #1
 8001470:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001472:	183b      	adds	r3, r7, r0
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2207      	movs	r2, #7
 8001478:	4013      	ands	r3, r2
 800147a:	b2da      	uxtb	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f002 ff6f 	bl	800436c <USB_EPStartXfer>

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b006      	add	sp, #24
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	000a      	movs	r2, r1
 80014a2:	1cfb      	adds	r3, r7, #3
 80014a4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014a6:	1cfb      	adds	r3, r7, #3
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2207      	movs	r2, #7
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d901      	bls.n	80014ba <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e046      	b.n	8001548 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014ba:	1cfb      	adds	r3, r7, #3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da0f      	bge.n	80014e4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c4:	1cfb      	adds	r3, r7, #3
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2207      	movs	r2, #7
 80014ca:	4013      	ands	r3, r2
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	0013      	movs	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	189b      	adds	r3, r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	705a      	strb	r2, [r3, #1]
 80014e2:	e00d      	b.n	8001500 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014e4:	1cfb      	adds	r3, r7, #3
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	0013      	movs	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	189b      	adds	r3, r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	3369      	adds	r3, #105	@ 0x69
 80014f2:	33ff      	adds	r3, #255	@ 0xff
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	18d3      	adds	r3, r2, r3
 80014f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001506:	1cfb      	adds	r3, r7, #3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2207      	movs	r2, #7
 800150c:	4013      	ands	r3, r2
 800150e:	b2da      	uxtb	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	23aa      	movs	r3, #170	@ 0xaa
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_PCD_EP_SetStall+0x8c>
 8001520:	2302      	movs	r3, #2
 8001522:	e011      	b.n	8001548 <HAL_PCD_EP_SetStall+0xb0>
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	23aa      	movs	r3, #170	@ 0xaa
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	2101      	movs	r1, #1
 800152c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f004 f850 	bl	80055dc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	23aa      	movs	r3, #170	@ 0xaa
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	2100      	movs	r1, #0
 8001544:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	000a      	movs	r2, r1
 800155a:	1cfb      	adds	r3, r7, #3
 800155c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800155e:	1cfb      	adds	r3, r7, #3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	220f      	movs	r2, #15
 8001564:	401a      	ands	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	d901      	bls.n	8001572 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e048      	b.n	8001604 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001572:	1cfb      	adds	r3, r7, #3
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b25b      	sxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	da0f      	bge.n	800159c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800157c:	1cfb      	adds	r3, r7, #3
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2207      	movs	r2, #7
 8001582:	4013      	ands	r3, r2
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	0013      	movs	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	189b      	adds	r3, r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	705a      	strb	r2, [r3, #1]
 800159a:	e00f      	b.n	80015bc <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800159c:	1cfb      	adds	r3, r7, #3
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2207      	movs	r2, #7
 80015a2:	401a      	ands	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	189b      	adds	r3, r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	3369      	adds	r3, #105	@ 0x69
 80015ae:	33ff      	adds	r3, #255	@ 0xff
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	18d3      	adds	r3, r2, r3
 80015b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015c2:	1cfb      	adds	r3, r7, #3
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2207      	movs	r2, #7
 80015c8:	4013      	ands	r3, r2
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	23aa      	movs	r3, #170	@ 0xaa
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_PCD_EP_ClrStall+0x90>
 80015dc:	2302      	movs	r3, #2
 80015de:	e011      	b.n	8001604 <HAL_PCD_EP_ClrStall+0xb4>
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	23aa      	movs	r3, #170	@ 0xaa
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	2101      	movs	r1, #1
 80015e8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	0011      	movs	r1, r2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f004 f842 	bl	800567c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	23aa      	movs	r3, #170	@ 0xaa
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	2100      	movs	r1, #0
 8001600:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b004      	add	sp, #16
 800160a:	bd80      	pop	{r7, pc}

0800160c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800160c:	b5b0      	push	{r4, r5, r7, lr}
 800160e:	b096      	sub	sp, #88	@ 0x58
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001614:	f000 fbec 	bl	8001df0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	204e      	movs	r0, #78	@ 0x4e
 800161e:	183b      	adds	r3, r7, r0
 8001620:	2144      	movs	r1, #68	@ 0x44
 8001622:	5a52      	ldrh	r2, [r2, r1]
 8001624:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001626:	183b      	adds	r3, r7, r0
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	244d      	movs	r4, #77	@ 0x4d
 800162e:	193b      	adds	r3, r7, r4
 8001630:	210f      	movs	r1, #15
 8001632:	400a      	ands	r2, r1
 8001634:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001636:	193b      	adds	r3, r7, r4
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d000      	beq.n	8001640 <PCD_EP_ISR_Handler+0x34>
 800163e:	e18f      	b.n	8001960 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001640:	183b      	adds	r3, r7, r0
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	2210      	movs	r2, #16
 8001646:	4013      	ands	r3, r2
 8001648:	d155      	bne.n	80016f6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b29a      	uxth	r2, r3
 8001652:	200e      	movs	r0, #14
 8001654:	183b      	adds	r3, r7, r0
 8001656:	49bb      	ldr	r1, [pc, #748]	@ (8001944 <PCD_EP_ISR_Handler+0x338>)
 8001658:	400a      	ands	r2, r1
 800165a:	801a      	strh	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	183a      	adds	r2, r7, r0
 8001662:	8812      	ldrh	r2, [r2, #0]
 8001664:	49b8      	ldr	r1, [pc, #736]	@ (8001948 <PCD_EP_ISR_Handler+0x33c>)
 8001666:	430a      	orrs	r2, r1
 8001668:	b292      	uxth	r2, r2
 800166a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3328      	adds	r3, #40	@ 0x28
 8001670:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2250      	movs	r2, #80	@ 0x50
 8001678:	5a9b      	ldrh	r3, [r3, r2]
 800167a:	b29b      	uxth	r3, r3
 800167c:	001a      	movs	r2, r3
 800167e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	18d2      	adds	r2, r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	4aaf      	ldr	r2, [pc, #700]	@ (800194c <PCD_EP_ISR_Handler+0x340>)
 800168e:	4694      	mov	ip, r2
 8001690:	4463      	add	r3, ip
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	059b      	lsls	r3, r3, #22
 8001696:	0d9a      	lsrs	r2, r3, #22
 8001698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800169c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	18d2      	adds	r2, r2, r3
 80016a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2100      	movs	r1, #0
 80016ae:	0018      	movs	r0, r3
 80016b0:	f005 feba 	bl	8007428 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2224      	movs	r2, #36	@ 0x24
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <PCD_EP_ISR_Handler+0xb8>
 80016c0:	f000 fb96 	bl	8001df0 <PCD_EP_ISR_Handler+0x7e4>
 80016c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <PCD_EP_ISR_Handler+0xc4>
 80016cc:	f000 fb90 	bl	8001df0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2224      	movs	r2, #36	@ 0x24
 80016d4:	5c9b      	ldrb	r3, [r3, r2]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2280      	movs	r2, #128	@ 0x80
 80016da:	4252      	negs	r2, r2
 80016dc:	4313      	orrs	r3, r2
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0011      	movs	r1, r2
 80016e6:	224c      	movs	r2, #76	@ 0x4c
 80016e8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2224      	movs	r2, #36	@ 0x24
 80016ee:	2100      	movs	r1, #0
 80016f0:	5499      	strb	r1, [r3, r2]
 80016f2:	f000 fb7d 	bl	8001df0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3369      	adds	r3, #105	@ 0x69
 80016fa:	33ff      	adds	r3, #255	@ 0xff
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	214a      	movs	r1, #74	@ 0x4a
 8001704:	187b      	adds	r3, r7, r1
 8001706:	8812      	ldrh	r2, [r2, #0]
 8001708:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800170a:	187b      	adds	r3, r7, r1
 800170c:	881a      	ldrh	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4013      	ands	r3, r2
 8001714:	d037      	beq.n	8001786 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2250      	movs	r2, #80	@ 0x50
 800171c:	5a9b      	ldrh	r3, [r3, r2]
 800171e:	b29b      	uxth	r3, r3
 8001720:	001a      	movs	r2, r3
 8001722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	18d2      	adds	r2, r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	18d3      	adds	r3, r2, r3
 8001730:	4a87      	ldr	r2, [pc, #540]	@ (8001950 <PCD_EP_ISR_Handler+0x344>)
 8001732:	4694      	mov	ip, r2
 8001734:	4463      	add	r3, ip
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	059b      	lsls	r3, r3, #22
 800173a:	0d9a      	lsrs	r2, r3, #22
 800173c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	22ac      	movs	r2, #172	@ 0xac
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	1899      	adds	r1, r3, r2
 800174c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800174e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001752:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001754:	b29b      	uxth	r3, r3
 8001756:	f004 f8c4 	bl	80058e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29a      	uxth	r2, r3
 8001762:	2010      	movs	r0, #16
 8001764:	183b      	adds	r3, r7, r0
 8001766:	497b      	ldr	r1, [pc, #492]	@ (8001954 <PCD_EP_ISR_Handler+0x348>)
 8001768:	400a      	ands	r2, r1
 800176a:	801a      	strh	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	183a      	adds	r2, r7, r0
 8001772:	8812      	ldrh	r2, [r2, #0]
 8001774:	2180      	movs	r1, #128	@ 0x80
 8001776:	430a      	orrs	r2, r1
 8001778:	b292      	uxth	r2, r2
 800177a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	0018      	movs	r0, r3
 8001780:	f005 fe1c 	bl	80073bc <HAL_PCD_SetupStageCallback>
 8001784:	e334      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001786:	234a      	movs	r3, #74	@ 0x4a
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	2200      	movs	r2, #0
 800178c:	5e9b      	ldrsh	r3, [r3, r2]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db00      	blt.n	8001794 <PCD_EP_ISR_Handler+0x188>
 8001792:	e32d      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b29a      	uxth	r2, r3
 800179c:	201e      	movs	r0, #30
 800179e:	183b      	adds	r3, r7, r0
 80017a0:	496c      	ldr	r1, [pc, #432]	@ (8001954 <PCD_EP_ISR_Handler+0x348>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	183a      	adds	r2, r7, r0
 80017ac:	8812      	ldrh	r2, [r2, #0]
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	430a      	orrs	r2, r1
 80017b2:	b292      	uxth	r2, r2
 80017b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2250      	movs	r2, #80	@ 0x50
 80017bc:	5a9b      	ldrh	r3, [r3, r2]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	001a      	movs	r2, r3
 80017c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	18d2      	adds	r2, r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	4a5f      	ldr	r2, [pc, #380]	@ (8001950 <PCD_EP_ISR_Handler+0x344>)
 80017d2:	4694      	mov	ip, r2
 80017d4:	4463      	add	r3, ip
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	059b      	lsls	r3, r3, #22
 80017da:	0d9a      	lsrs	r2, r3, #22
 80017dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01a      	beq.n	800181e <PCD_EP_ISR_Handler+0x212>
 80017e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d016      	beq.n	800181e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f6:	6959      	ldr	r1, [r3, #20]
 80017f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001800:	b29b      	uxth	r3, r3
 8001802:	f004 f86e 	bl	80058e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	18d2      	adds	r2, r2, r3
 8001810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001812:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2100      	movs	r1, #0
 8001818:	0018      	movs	r0, r3
 800181a:	f005 fde4 	bl	80073e6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	214a      	movs	r1, #74	@ 0x4a
 8001824:	187b      	adds	r3, r7, r1
 8001826:	8812      	ldrh	r2, [r2, #0]
 8001828:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800182a:	187b      	adds	r3, r7, r1
 800182c:	881a      	ldrh	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4013      	ands	r3, r2
 8001834:	d000      	beq.n	8001838 <PCD_EP_ISR_Handler+0x22c>
 8001836:	e2db      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
 8001838:	187b      	adds	r3, r7, r1
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	23c0      	movs	r3, #192	@ 0xc0
 800183e:	019b      	lsls	r3, r3, #6
 8001840:	401a      	ands	r2, r3
 8001842:	23c0      	movs	r3, #192	@ 0xc0
 8001844:	019b      	lsls	r3, r3, #6
 8001846:	429a      	cmp	r2, r3
 8001848:	d100      	bne.n	800184c <PCD_EP_ISR_Handler+0x240>
 800184a:	e2d1      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2250      	movs	r2, #80	@ 0x50
 8001858:	5a9b      	ldrh	r3, [r3, r2]
 800185a:	b29b      	uxth	r3, r3
 800185c:	001a      	movs	r2, r3
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	189b      	adds	r3, r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	4a3a      	ldr	r2, [pc, #232]	@ (8001950 <PCD_EP_ISR_Handler+0x344>)
 8001868:	4694      	mov	ip, r2
 800186a:	4463      	add	r3, ip
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	059b      	lsls	r3, r3, #22
 8001876:	0d9b      	lsrs	r3, r3, #22
 8001878:	b29a      	uxth	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	801a      	strh	r2, [r3, #0]
 800187e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b3e      	cmp	r3, #62	@ 0x3e
 8001884:	d91a      	bls.n	80018bc <PCD_EP_ISR_Handler+0x2b0>
 8001886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	647b      	str	r3, [r7, #68]	@ 0x44
 800188e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	221f      	movs	r2, #31
 8001894:	4013      	ands	r3, r2
 8001896:	d102      	bne.n	800189e <PCD_EP_ISR_Handler+0x292>
 8001898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800189a:	3b01      	subs	r3, #1
 800189c:	647b      	str	r3, [r7, #68]	@ 0x44
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4a25      	ldr	r2, [pc, #148]	@ (8001948 <PCD_EP_ISR_Handler+0x33c>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	e023      	b.n	8001904 <PCD_EP_ISR_Handler+0x2f8>
 80018bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d108      	bne.n	80018d6 <PCD_EP_ISR_Handler+0x2ca>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <PCD_EP_ISR_Handler+0x33c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	801a      	strh	r2, [r3, #0]
 80018d4:	e016      	b.n	8001904 <PCD_EP_ISR_Handler+0x2f8>
 80018d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80018de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	d002      	beq.n	80018ee <PCD_EP_ISR_Handler+0x2e2>
 80018e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ea:	3301      	adds	r3, #1
 80018ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	029b      	lsls	r3, r3, #10
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b29a      	uxth	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	b29a      	uxth	r2, r3
 800190c:	2012      	movs	r0, #18
 800190e:	183b      	adds	r3, r7, r0
 8001910:	4911      	ldr	r1, [pc, #68]	@ (8001958 <PCD_EP_ISR_Handler+0x34c>)
 8001912:	400a      	ands	r2, r1
 8001914:	801a      	strh	r2, [r3, #0]
 8001916:	183b      	adds	r3, r7, r0
 8001918:	183a      	adds	r2, r7, r0
 800191a:	8812      	ldrh	r2, [r2, #0]
 800191c:	2180      	movs	r1, #128	@ 0x80
 800191e:	0149      	lsls	r1, r1, #5
 8001920:	404a      	eors	r2, r1
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	183b      	adds	r3, r7, r0
 8001926:	183a      	adds	r2, r7, r0
 8001928:	8812      	ldrh	r2, [r2, #0]
 800192a:	2180      	movs	r1, #128	@ 0x80
 800192c:	0189      	lsls	r1, r1, #6
 800192e:	404a      	eors	r2, r1
 8001930:	801a      	strh	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	183a      	adds	r2, r7, r0
 8001938:	8812      	ldrh	r2, [r2, #0]
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <PCD_EP_ISR_Handler+0x350>)
 800193c:	430a      	orrs	r2, r1
 800193e:	b292      	uxth	r2, r2
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	e255      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
 8001944:	ffff8f0f 	.word	0xffff8f0f
 8001948:	ffff8000 	.word	0xffff8000
 800194c:	00000402 	.word	0x00000402
 8001950:	00000406 	.word	0x00000406
 8001954:	00000f8f 	.word	0x00000f8f
 8001958:	ffffbf8f 	.word	0xffffbf8f
 800195c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	001a      	movs	r2, r3
 8001966:	204d      	movs	r0, #77	@ 0x4d
 8001968:	183b      	adds	r3, r7, r0
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	18d2      	adds	r2, r2, r3
 8001970:	214a      	movs	r1, #74	@ 0x4a
 8001972:	187b      	adds	r3, r7, r1
 8001974:	8812      	ldrh	r2, [r2, #0]
 8001976:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2200      	movs	r2, #0
 800197c:	5e9b      	ldrsh	r3, [r3, r2]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db00      	blt.n	8001984 <PCD_EP_ISR_Handler+0x378>
 8001982:	e0fa      	b.n	8001b7a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	001a      	movs	r2, r3
 800198a:	183b      	adds	r3, r7, r0
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29a      	uxth	r2, r3
 8001996:	2448      	movs	r4, #72	@ 0x48
 8001998:	193b      	adds	r3, r7, r4
 800199a:	49d1      	ldr	r1, [pc, #836]	@ (8001ce0 <PCD_EP_ISR_Handler+0x6d4>)
 800199c:	400a      	ands	r2, r1
 800199e:	801a      	strh	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	001a      	movs	r2, r3
 80019a6:	183b      	adds	r3, r7, r0
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	18d3      	adds	r3, r2, r3
 80019ae:	193a      	adds	r2, r7, r4
 80019b0:	8812      	ldrh	r2, [r2, #0]
 80019b2:	2180      	movs	r1, #128	@ 0x80
 80019b4:	430a      	orrs	r2, r1
 80019b6:	b292      	uxth	r2, r2
 80019b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019ba:	183b      	adds	r3, r7, r0
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	0013      	movs	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	189b      	adds	r3, r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	3369      	adds	r3, #105	@ 0x69
 80019c8:	33ff      	adds	r3, #255	@ 0xff
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d125      	bne.n	8001a24 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2250      	movs	r2, #80	@ 0x50
 80019de:	5a9b      	ldrh	r3, [r3, r2]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	001a      	movs	r2, r3
 80019e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	18d2      	adds	r2, r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	4abc      	ldr	r2, [pc, #752]	@ (8001ce4 <PCD_EP_ISR_Handler+0x6d8>)
 80019f4:	4694      	mov	ip, r2
 80019f6:	4463      	add	r3, ip
 80019f8:	881a      	ldrh	r2, [r3, #0]
 80019fa:	2450      	movs	r4, #80	@ 0x50
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	0592      	lsls	r2, r2, #22
 8001a00:	0d92      	lsrs	r2, r2, #22
 8001a02:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d100      	bne.n	8001a0e <PCD_EP_ISR_Handler+0x402>
 8001a0c:	e08d      	b.n	8001b2a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a14:	6959      	ldr	r1, [r3, #20]
 8001a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a18:	88da      	ldrh	r2, [r3, #6]
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	f003 ff60 	bl	80058e2 <USB_ReadPMA>
 8001a22:	e082      	b.n	8001b2a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a26:	78db      	ldrb	r3, [r3, #3]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d10c      	bne.n	8001a46 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a2c:	2350      	movs	r3, #80	@ 0x50
 8001a2e:	18fc      	adds	r4, r7, r3
 8001a30:	234a      	movs	r3, #74	@ 0x4a
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f9ec 	bl	8001e18 <HAL_PCD_EP_DB_Receive>
 8001a40:	0003      	movs	r3, r0
 8001a42:	8023      	strh	r3, [r4, #0]
 8001a44:	e071      	b.n	8001b2a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	18d3      	adds	r3, r2, r3
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	2052      	movs	r0, #82	@ 0x52
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	49a2      	ldr	r1, [pc, #648]	@ (8001ce8 <PCD_EP_ISR_Handler+0x6dc>)
 8001a5e:	400a      	ands	r2, r1
 8001a60:	801a      	strh	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	18d3      	adds	r3, r2, r3
 8001a70:	183a      	adds	r2, r7, r0
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	499d      	ldr	r1, [pc, #628]	@ (8001cec <PCD_EP_ISR_Handler+0x6e0>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	001a      	movs	r2, r3
 8001a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	18d3      	adds	r3, r2, r3
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	001a      	movs	r2, r3
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	4013      	ands	r3, r2
 8001a96:	d024      	beq.n	8001ae2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2250      	movs	r2, #80	@ 0x50
 8001a9e:	5a9b      	ldrh	r3, [r3, r2]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	18d2      	adds	r2, r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	18d3      	adds	r3, r2, r3
 8001ab2:	4a8f      	ldr	r2, [pc, #572]	@ (8001cf0 <PCD_EP_ISR_Handler+0x6e4>)
 8001ab4:	4694      	mov	ip, r2
 8001ab6:	4463      	add	r3, ip
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	2450      	movs	r4, #80	@ 0x50
 8001abc:	193b      	adds	r3, r7, r4
 8001abe:	0592      	lsls	r2, r2, #22
 8001ac0:	0d92      	lsrs	r2, r2, #22
 8001ac2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d02e      	beq.n	8001b2a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad2:	6959      	ldr	r1, [r3, #20]
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad6:	891a      	ldrh	r2, [r3, #8]
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	f003 ff01 	bl	80058e2 <USB_ReadPMA>
 8001ae0:	e023      	b.n	8001b2a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2250      	movs	r2, #80	@ 0x50
 8001ae8:	5a9b      	ldrh	r3, [r3, r2]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	001a      	movs	r2, r3
 8001aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	18d2      	adds	r2, r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	18d3      	adds	r3, r2, r3
 8001afc:	4a79      	ldr	r2, [pc, #484]	@ (8001ce4 <PCD_EP_ISR_Handler+0x6d8>)
 8001afe:	4694      	mov	ip, r2
 8001b00:	4463      	add	r3, ip
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	2450      	movs	r4, #80	@ 0x50
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	0592      	lsls	r2, r2, #22
 8001b0a:	0d92      	lsrs	r2, r2, #22
 8001b0c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001b0e:	193b      	adds	r3, r7, r4
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1c:	6959      	ldr	r1, [r3, #20]
 8001b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b20:	895a      	ldrh	r2, [r3, #10]
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	f003 fedc 	bl	80058e2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	2150      	movs	r1, #80	@ 0x50
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	18d2      	adds	r2, r2, r3
 8001b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	18d2      	adds	r2, r2, r3
 8001b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b46:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <PCD_EP_ISR_Handler+0x550>
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	0011      	movs	r1, r2
 8001b64:	0018      	movs	r0, r3
 8001b66:	f005 fc3e 	bl	80073e6 <HAL_PCD_DataOutStageCallback>
 8001b6a:	e006      	b.n	8001b7a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f002 fbf9 	bl	800436c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b7a:	244a      	movs	r4, #74	@ 0x4a
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	2280      	movs	r2, #128	@ 0x80
 8001b82:	4013      	ands	r3, r2
 8001b84:	d100      	bne.n	8001b88 <PCD_EP_ISR_Handler+0x57c>
 8001b86:	e133      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b88:	204d      	movs	r0, #77	@ 0x4d
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	0013      	movs	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	189b      	adds	r3, r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	18d3      	adds	r3, r2, r3
 8001b9c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	183b      	adds	r3, r7, r0
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	2542      	movs	r5, #66	@ 0x42
 8001bb2:	197b      	adds	r3, r7, r5
 8001bb4:	494f      	ldr	r1, [pc, #316]	@ (8001cf4 <PCD_EP_ISR_Handler+0x6e8>)
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	183b      	adds	r3, r7, r0
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	18d3      	adds	r3, r2, r3
 8001bc8:	197a      	adds	r2, r7, r5
 8001bca:	8812      	ldrh	r2, [r2, #0]
 8001bcc:	494a      	ldr	r1, [pc, #296]	@ (8001cf8 <PCD_EP_ISR_Handler+0x6ec>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd6:	78db      	ldrb	r3, [r3, #3]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d000      	beq.n	8001bde <PCD_EP_ISR_Handler+0x5d2>
 8001bdc:	e0af      	b.n	8001d3e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be6:	7b1b      	ldrb	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <PCD_EP_ISR_Handler+0x5e2>
 8001bec:	e09f      	b.n	8001d2e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2240      	movs	r2, #64	@ 0x40
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d046      	beq.n	8001c86 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d125      	bne.n	8001c4c <PCD_EP_ISR_Handler+0x640>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2250      	movs	r2, #80	@ 0x50
 8001c0c:	5a9b      	ldrh	r3, [r3, r2]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	001a      	movs	r2, r3
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	189b      	adds	r3, r3, r2
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	00da      	lsls	r2, r3, #3
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	18d3      	adds	r3, r2, r3
 8001c22:	4a33      	ldr	r2, [pc, #204]	@ (8001cf0 <PCD_EP_ISR_Handler+0x6e4>)
 8001c24:	4694      	mov	ip, r2
 8001c26:	4463      	add	r3, ip
 8001c28:	623b      	str	r3, [r7, #32]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	059b      	lsls	r3, r3, #22
 8001c32:	0d9b      	lsrs	r3, r3, #22
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf8 <PCD_EP_ISR_Handler+0x6ec>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	801a      	strh	r2, [r3, #0]
 8001c4a:	e070      	b.n	8001d2e <PCD_EP_ISR_Handler+0x722>
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4e:	785b      	ldrb	r3, [r3, #1]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d16c      	bne.n	8001d2e <PCD_EP_ISR_Handler+0x722>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2250      	movs	r2, #80	@ 0x50
 8001c60:	5a9b      	ldrh	r3, [r3, r2]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	001a      	movs	r2, r3
 8001c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c68:	189b      	adds	r3, r3, r2
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	00da      	lsls	r2, r3, #3
 8001c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c74:	18d3      	adds	r3, r2, r3
 8001c76:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf0 <PCD_EP_ISR_Handler+0x6e4>)
 8001c78:	4694      	mov	ip, r2
 8001c7a:	4463      	add	r3, ip
 8001c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c80:	2200      	movs	r2, #0
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	e053      	b.n	8001d2e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8e:	785b      	ldrb	r3, [r3, #1]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d133      	bne.n	8001cfc <PCD_EP_ISR_Handler+0x6f0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2250      	movs	r2, #80	@ 0x50
 8001ca0:	5a9b      	ldrh	r3, [r3, r2]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca8:	189b      	adds	r3, r3, r2
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	00da      	lsls	r2, r3, #3
 8001cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb4:	18d3      	adds	r3, r2, r3
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce4 <PCD_EP_ISR_Handler+0x6d8>)
 8001cb8:	4694      	mov	ip, r2
 8001cba:	4463      	add	r3, ip
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	059b      	lsls	r3, r3, #22
 8001cc6:	0d9b      	lsrs	r3, r3, #22
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <PCD_EP_ISR_Handler+0x6ec>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cdc:	801a      	strh	r2, [r3, #0]
 8001cde:	e026      	b.n	8001d2e <PCD_EP_ISR_Handler+0x722>
 8001ce0:	00000f8f 	.word	0x00000f8f
 8001ce4:	00000406 	.word	0x00000406
 8001ce8:	ffff8f8f 	.word	0xffff8f8f
 8001cec:	ffff80c0 	.word	0xffff80c0
 8001cf0:	00000402 	.word	0x00000402
 8001cf4:	ffff8f0f 	.word	0xffff8f0f
 8001cf8:	ffff8000 	.word	0xffff8000
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d114      	bne.n	8001d2e <PCD_EP_ISR_Handler+0x722>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2250      	movs	r2, #80	@ 0x50
 8001d0a:	5a9b      	ldrh	r3, [r3, r2]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	001a      	movs	r2, r3
 8001d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d12:	189b      	adds	r3, r3, r2
 8001d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	00da      	lsls	r2, r3, #3
 8001d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d1e:	18d3      	adds	r3, r2, r3
 8001d20:	4a3b      	ldr	r2, [pc, #236]	@ (8001e10 <PCD_EP_ISR_Handler+0x804>)
 8001d22:	4694      	mov	ip, r2
 8001d24:	4463      	add	r3, ip
 8001d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	0011      	movs	r1, r2
 8001d36:	0018      	movs	r0, r3
 8001d38:	f005 fb76 	bl	8007428 <HAL_PCD_DataInStageCallback>
 8001d3c:	e058      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d3e:	234a      	movs	r3, #74	@ 0x4a
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	881a      	ldrh	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d149      	bne.n	8001de0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2250      	movs	r2, #80	@ 0x50
 8001d52:	5a9b      	ldrh	r3, [r3, r2]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	001a      	movs	r2, r3
 8001d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	18d2      	adds	r2, r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	18d3      	adds	r3, r2, r3
 8001d66:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <PCD_EP_ISR_Handler+0x808>)
 8001d68:	4694      	mov	ip, r2
 8001d6a:	4463      	add	r3, ip
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	2140      	movs	r1, #64	@ 0x40
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	0592      	lsls	r2, r2, #22
 8001d74:	0d92      	lsrs	r2, r2, #22
 8001d76:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d907      	bls.n	8001d94 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	1ad2      	subs	r2, r2, r3
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d90:	619a      	str	r2, [r3, #24]
 8001d92:	e002      	b.n	8001d9a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d107      	bne.n	8001db2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0011      	movs	r1, r2
 8001daa:	0018      	movs	r0, r3
 8001dac:	f005 fb3c 	bl	8007428 <HAL_PCD_DataInStageCallback>
 8001db0:	e01e      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	2140      	movs	r1, #64	@ 0x40
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	18d2      	adds	r2, r2, r3
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	18d2      	adds	r2, r2, r3
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001dd6:	0011      	movs	r1, r2
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f002 fac7 	bl	800436c <USB_EPStartXfer>
 8001dde:	e007      	b.n	8001df0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001de0:	234a      	movs	r3, #74	@ 0x4a
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f930 	bl	8002050 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2244      	movs	r2, #68	@ 0x44
 8001df6:	5a9b      	ldrh	r3, [r3, r2]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	da01      	bge.n	8001e04 <PCD_EP_ISR_Handler+0x7f8>
 8001e00:	f7ff fc0a 	bl	8001618 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b016      	add	sp, #88	@ 0x58
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	00000406 	.word	0x00000406
 8001e14:	00000402 	.word	0x00000402

08001e18 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	1dbb      	adds	r3, r7, #6
 8001e24:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e26:	1dbb      	adds	r3, r7, #6
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	01db      	lsls	r3, r3, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d100      	bne.n	8001e34 <HAL_PCD_EP_DB_Receive+0x1c>
 8001e32:	e07d      	b.n	8001f30 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2250      	movs	r2, #80	@ 0x50
 8001e3a:	5a9b      	ldrh	r3, [r3, r2]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	001a      	movs	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	18d2      	adds	r2, r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	18d3      	adds	r3, r2, r3
 8001e4e:	4a7a      	ldr	r2, [pc, #488]	@ (8002038 <HAL_PCD_EP_DB_Receive+0x220>)
 8001e50:	4694      	mov	ip, r2
 8001e52:	4463      	add	r3, ip
 8001e54:	881a      	ldrh	r2, [r3, #0]
 8001e56:	211a      	movs	r1, #26
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	0592      	lsls	r2, r2, #22
 8001e5c:	0d92      	lsrs	r2, r2, #22
 8001e5e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d307      	bcc.n	8001e7c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	1ad2      	subs	r2, r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	e002      	b.n	8001e82 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d121      	bne.n	8001ece <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	001a      	movs	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	18d3      	adds	r3, r2, r3
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	2018      	movs	r0, #24
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	4966      	ldr	r1, [pc, #408]	@ (800203c <HAL_PCD_EP_DB_Receive+0x224>)
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	183b      	adds	r3, r7, r0
 8001ea8:	183a      	adds	r2, r7, r0
 8001eaa:	8812      	ldrh	r2, [r2, #0]
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	0189      	lsls	r1, r1, #6
 8001eb0:	404a      	eors	r2, r1
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	001a      	movs	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	183a      	adds	r2, r7, r0
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	495e      	ldr	r1, [pc, #376]	@ (8002040 <HAL_PCD_EP_DB_Receive+0x228>)
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ece:	1dbb      	adds	r3, r7, #6
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	2240      	movs	r2, #64	@ 0x40
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d01a      	beq.n	8001f0e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	001a      	movs	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	18d3      	adds	r3, r2, r3
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	2016      	movs	r0, #22
 8001eec:	183b      	adds	r3, r7, r0
 8001eee:	4955      	ldr	r1, [pc, #340]	@ (8002044 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	001a      	movs	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	18d3      	adds	r3, r2, r3
 8001f02:	183a      	adds	r2, r7, r0
 8001f04:	8812      	ldrh	r2, [r2, #0]
 8001f06:	4950      	ldr	r1, [pc, #320]	@ (8002048 <HAL_PCD_EP_DB_Receive+0x230>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	b292      	uxth	r2, r2
 8001f0c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001f0e:	241a      	movs	r4, #26
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <HAL_PCD_EP_DB_Receive+0x102>
 8001f18:	e086      	b.n	8002028 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6959      	ldr	r1, [r3, #20]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	891a      	ldrh	r2, [r3, #8]
 8001f26:	193b      	adds	r3, r7, r4
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f003 fcda 	bl	80058e2 <USB_ReadPMA>
 8001f2e:	e07b      	b.n	8002028 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2250      	movs	r2, #80	@ 0x50
 8001f36:	5a9b      	ldrh	r3, [r3, r2]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	18d2      	adds	r2, r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	4a40      	ldr	r2, [pc, #256]	@ (800204c <HAL_PCD_EP_DB_Receive+0x234>)
 8001f4c:	4694      	mov	ip, r2
 8001f4e:	4463      	add	r3, ip
 8001f50:	881a      	ldrh	r2, [r3, #0]
 8001f52:	211a      	movs	r1, #26
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	0592      	lsls	r2, r2, #22
 8001f58:	0d92      	lsrs	r2, r2, #22
 8001f5a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d307      	bcc.n	8001f78 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	1ad2      	subs	r2, r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	619a      	str	r2, [r3, #24]
 8001f76:	e002      	b.n	8001f7e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d121      	bne.n	8001fca <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	18d3      	adds	r3, r2, r3
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	201e      	movs	r0, #30
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	4927      	ldr	r1, [pc, #156]	@ (800203c <HAL_PCD_EP_DB_Receive+0x224>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	183b      	adds	r3, r7, r0
 8001fa4:	183a      	adds	r2, r7, r0
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	0189      	lsls	r1, r1, #6
 8001fac:	404a      	eors	r2, r1
 8001fae:	801a      	strh	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	18d3      	adds	r3, r2, r3
 8001fbe:	183a      	adds	r2, r7, r0
 8001fc0:	8812      	ldrh	r2, [r2, #0]
 8001fc2:	491f      	ldr	r1, [pc, #124]	@ (8002040 <HAL_PCD_EP_DB_Receive+0x228>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fca:	1dbb      	adds	r3, r7, #6
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	2240      	movs	r2, #64	@ 0x40
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d11a      	bne.n	800200a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	001a      	movs	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	18d3      	adds	r3, r2, r3
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	201c      	movs	r0, #28
 8001fe8:	183b      	adds	r3, r7, r0
 8001fea:	4916      	ldr	r1, [pc, #88]	@ (8002044 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001fec:	400a      	ands	r2, r1
 8001fee:	801a      	strh	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	183a      	adds	r2, r7, r0
 8002000:	8812      	ldrh	r2, [r2, #0]
 8002002:	4911      	ldr	r1, [pc, #68]	@ (8002048 <HAL_PCD_EP_DB_Receive+0x230>)
 8002004:	430a      	orrs	r2, r1
 8002006:	b292      	uxth	r2, r2
 8002008:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800200a:	241a      	movs	r4, #26
 800200c:	193b      	adds	r3, r7, r4
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	6959      	ldr	r1, [r3, #20]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	895a      	ldrh	r2, [r3, #10]
 8002020:	193b      	adds	r3, r7, r4
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	f003 fc5d 	bl	80058e2 <USB_ReadPMA>
    }
  }

  return count;
 8002028:	231a      	movs	r3, #26
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	881b      	ldrh	r3, [r3, #0]
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b009      	add	sp, #36	@ 0x24
 8002034:	bd90      	pop	{r4, r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	00000402 	.word	0x00000402
 800203c:	ffffbf8f 	.word	0xffffbf8f
 8002040:	ffff8080 	.word	0xffff8080
 8002044:	ffff8f8f 	.word	0xffff8f8f
 8002048:	ffff80c0 	.word	0xffff80c0
 800204c:	00000406 	.word	0x00000406

08002050 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0a4      	sub	sp, #144	@ 0x90
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	1dbb      	adds	r3, r7, #6
 800205c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800205e:	1dbb      	adds	r3, r7, #6
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	2240      	movs	r2, #64	@ 0x40
 8002064:	4013      	ands	r3, r2
 8002066:	d100      	bne.n	800206a <HAL_PCD_EP_DB_Transmit+0x1a>
 8002068:	e1e4      	b.n	8002434 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2250      	movs	r2, #80	@ 0x50
 8002070:	5a9b      	ldrh	r3, [r3, r2]
 8002072:	b29b      	uxth	r3, r3
 8002074:	001a      	movs	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	18d2      	adds	r2, r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	18d3      	adds	r3, r2, r3
 8002084:	4ad0      	ldr	r2, [pc, #832]	@ (80023c8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002086:	4694      	mov	ip, r2
 8002088:	4463      	add	r3, ip
 800208a:	881a      	ldrh	r2, [r3, #0]
 800208c:	2186      	movs	r1, #134	@ 0x86
 800208e:	187b      	adds	r3, r7, r1
 8002090:	0592      	lsls	r2, r2, #22
 8002092:	0d92      	lsrs	r2, r2, #22
 8002094:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	187b      	adds	r3, r7, r1
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d907      	bls.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	1ad2      	subs	r2, r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	619a      	str	r2, [r3, #24]
 80020b0:	e002      	b.n	80020b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d000      	beq.n	80020c2 <HAL_PCD_EP_DB_Transmit+0x72>
 80020c0:	e0b5      	b.n	800222e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	785b      	ldrb	r3, [r3, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d125      	bne.n	8002116 <HAL_PCD_EP_DB_Transmit+0xc6>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2250      	movs	r2, #80	@ 0x50
 80020d6:	5a9b      	ldrh	r3, [r3, r2]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	001a      	movs	r2, r3
 80020dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020de:	189b      	adds	r3, r3, r2
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	00da      	lsls	r2, r3, #3
 80020e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ea:	18d3      	adds	r3, r2, r3
 80020ec:	4ab6      	ldr	r2, [pc, #728]	@ (80023c8 <HAL_PCD_EP_DB_Transmit+0x378>)
 80020ee:	4694      	mov	ip, r2
 80020f0:	4463      	add	r3, ip
 80020f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	059b      	lsls	r3, r3, #22
 80020fc:	0d9b      	lsrs	r3, r3, #22
 80020fe:	b29a      	uxth	r2, r3
 8002100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	4ab0      	ldr	r2, [pc, #704]	@ (80023cc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	b29a      	uxth	r2, r3
 8002110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002112:	801a      	strh	r2, [r3, #0]
 8002114:	e01b      	b.n	800214e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d117      	bne.n	800214e <HAL_PCD_EP_DB_Transmit+0xfe>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	637b      	str	r3, [r7, #52]	@ 0x34
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2250      	movs	r2, #80	@ 0x50
 800212a:	5a9b      	ldrh	r3, [r3, r2]
 800212c:	b29b      	uxth	r3, r3
 800212e:	001a      	movs	r2, r3
 8002130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002132:	189b      	adds	r3, r3, r2
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	00da      	lsls	r2, r3, #3
 800213c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213e:	18d3      	adds	r3, r2, r3
 8002140:	4aa1      	ldr	r2, [pc, #644]	@ (80023c8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002142:	4694      	mov	ip, r2
 8002144:	4463      	add	r3, ip
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30
 8002148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214a:	2200      	movs	r2, #0
 800214c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d125      	bne.n	80021a8 <HAL_PCD_EP_DB_Transmit+0x158>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2250      	movs	r2, #80	@ 0x50
 8002168:	5a9b      	ldrh	r3, [r3, r2]
 800216a:	b29b      	uxth	r3, r3
 800216c:	001a      	movs	r2, r3
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	189b      	adds	r3, r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	00da      	lsls	r2, r3, #3
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	18d3      	adds	r3, r2, r3
 800217e:	4a94      	ldr	r2, [pc, #592]	@ (80023d0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002180:	4694      	mov	ip, r2
 8002182:	4463      	add	r3, ip
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	059b      	lsls	r3, r3, #22
 800218e:	0d9b      	lsrs	r3, r3, #22
 8002190:	b29a      	uxth	r2, r3
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	801a      	strh	r2, [r3, #0]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4a8b      	ldr	r2, [pc, #556]	@ (80023cc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	e018      	b.n	80021da <HAL_PCD_EP_DB_Transmit+0x18a>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d114      	bne.n	80021da <HAL_PCD_EP_DB_Transmit+0x18a>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2250      	movs	r2, #80	@ 0x50
 80021b6:	5a9b      	ldrh	r3, [r3, r2]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	001a      	movs	r2, r3
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	00da      	lsls	r2, r3, #3
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	18d3      	adds	r3, r2, r3
 80021cc:	4a80      	ldr	r2, [pc, #512]	@ (80023d0 <HAL_PCD_EP_DB_Transmit+0x380>)
 80021ce:	4694      	mov	ip, r2
 80021d0:	4463      	add	r3, ip
 80021d2:	623b      	str	r3, [r7, #32]
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	2200      	movs	r2, #0
 80021d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	0011      	movs	r1, r2
 80021e2:	0018      	movs	r0, r3
 80021e4:	f005 f920 	bl	8007428 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	@ 0x80
 80021ee:	01db      	lsls	r3, r3, #7
 80021f0:	4013      	ands	r3, r2
 80021f2:	d100      	bne.n	80021f6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80021f4:	e309      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	001a      	movs	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	18d3      	adds	r3, r2, r3
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29a      	uxth	r2, r3
 8002208:	2016      	movs	r0, #22
 800220a:	183b      	adds	r3, r7, r0
 800220c:	4971      	ldr	r1, [pc, #452]	@ (80023d4 <HAL_PCD_EP_DB_Transmit+0x384>)
 800220e:	400a      	ands	r2, r1
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	001a      	movs	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	18d3      	adds	r3, r2, r3
 8002220:	183a      	adds	r2, r7, r0
 8002222:	8812      	ldrh	r2, [r2, #0]
 8002224:	496c      	ldr	r1, [pc, #432]	@ (80023d8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002226:	430a      	orrs	r2, r1
 8002228:	b292      	uxth	r2, r2
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	e2ed      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800222e:	1dbb      	adds	r3, r7, #6
 8002230:	881a      	ldrh	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	01db      	lsls	r3, r3, #7
 8002236:	4013      	ands	r3, r2
 8002238:	d01a      	beq.n	8002270 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	001a      	movs	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	18d3      	adds	r3, r2, r3
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29a      	uxth	r2, r3
 800224c:	208a      	movs	r0, #138	@ 0x8a
 800224e:	183b      	adds	r3, r7, r0
 8002250:	4960      	ldr	r1, [pc, #384]	@ (80023d4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002252:	400a      	ands	r2, r1
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	001a      	movs	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	18d3      	adds	r3, r2, r3
 8002264:	183a      	adds	r2, r7, r0
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	495b      	ldr	r1, [pc, #364]	@ (80023d8 <HAL_PCD_EP_DB_Transmit+0x388>)
 800226a:	430a      	orrs	r2, r1
 800226c:	b292      	uxth	r2, r2
 800226e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2224      	movs	r2, #36	@ 0x24
 8002274:	5c9b      	ldrb	r3, [r3, r2]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d000      	beq.n	800227c <HAL_PCD_EP_DB_Transmit+0x22c>
 800227a:	e2c6      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	2186      	movs	r1, #134	@ 0x86
 8002282:	187b      	adds	r3, r7, r1
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	18d2      	adds	r2, r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	187b      	adds	r3, r7, r1
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	18d2      	adds	r2, r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d30c      	bcc.n	80022c0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	218c      	movs	r1, #140	@ 0x8c
 80022ac:	187a      	adds	r2, r7, r1
 80022ae:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	187b      	adds	r3, r7, r1
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	1ad2      	subs	r2, r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	621a      	str	r2, [r3, #32]
 80022be:	e01a      	b.n	80022f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80022c8:	2386      	movs	r3, #134	@ 0x86
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	228c      	movs	r2, #140	@ 0x8c
 80022d0:	18ba      	adds	r2, r7, r2
 80022d2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2224      	movs	r2, #36	@ 0x24
 80022d8:	2100      	movs	r1, #0
 80022da:	5499      	strb	r1, [r3, r2]
 80022dc:	e00b      	b.n	80022f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2224      	movs	r2, #36	@ 0x24
 80022e2:	2100      	movs	r1, #0
 80022e4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	228c      	movs	r2, #140	@ 0x8c
 80022ec:	18ba      	adds	r2, r7, r2
 80022ee:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2200      	movs	r2, #0
 80022f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	785b      	ldrb	r3, [r3, #1]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d000      	beq.n	8002300 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80022fe:	e06d      	b.n	80023dc <HAL_PCD_EP_DB_Transmit+0x38c>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2250      	movs	r2, #80	@ 0x50
 800230c:	5a9b      	ldrh	r3, [r3, r2]
 800230e:	b29b      	uxth	r3, r3
 8002310:	001a      	movs	r2, r3
 8002312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002314:	189b      	adds	r3, r3, r2
 8002316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	00da      	lsls	r2, r3, #3
 800231e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002320:	18d3      	adds	r3, r2, r3
 8002322:	4a29      	ldr	r2, [pc, #164]	@ (80023c8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002324:	4694      	mov	ip, r2
 8002326:	4463      	add	r3, ip
 8002328:	63bb      	str	r3, [r7, #56]	@ 0x38
 800232a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	059b      	lsls	r3, r3, #22
 8002332:	0d9b      	lsrs	r3, r3, #22
 8002334:	b29a      	uxth	r2, r3
 8002336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	228c      	movs	r2, #140	@ 0x8c
 800233c:	18bb      	adds	r3, r7, r2
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b3e      	cmp	r3, #62	@ 0x3e
 8002342:	d91a      	bls.n	800237a <HAL_PCD_EP_DB_Transmit+0x32a>
 8002344:	18bb      	adds	r3, r7, r2
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800234c:	18bb      	adds	r3, r7, r2
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	221f      	movs	r2, #31
 8002352:	4013      	ands	r3, r2
 8002354:	d102      	bne.n	800235c <HAL_PCD_EP_DB_Transmit+0x30c>
 8002356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002358:	3b01      	subs	r3, #1
 800235a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800235c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29a      	uxth	r2, r3
 8002362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002364:	b29b      	uxth	r3, r3
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	b29b      	uxth	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	b29a      	uxth	r2, r3
 8002374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002376:	801a      	strh	r2, [r3, #0]
 8002378:	e04f      	b.n	800241a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800237a:	238c      	movs	r3, #140	@ 0x8c
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d108      	bne.n	8002396 <HAL_PCD_EP_DB_Transmit+0x346>
 8002384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	b29a      	uxth	r2, r3
 8002390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002392:	801a      	strh	r2, [r3, #0]
 8002394:	e041      	b.n	800241a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002396:	228c      	movs	r2, #140	@ 0x8c
 8002398:	18bb      	adds	r3, r7, r2
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023a0:	18bb      	adds	r3, r7, r2
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	d002      	beq.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x360>
 80023aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ac:	3301      	adds	r3, #1
 80023ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c4:	801a      	strh	r2, [r3, #0]
 80023c6:	e028      	b.n	800241a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80023c8:	00000402 	.word	0x00000402
 80023cc:	ffff8000 	.word	0xffff8000
 80023d0:	00000406 	.word	0x00000406
 80023d4:	ffff8f8f 	.word	0xffff8f8f
 80023d8:	ffffc080 	.word	0xffffc080
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d11a      	bne.n	800241a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2250      	movs	r2, #80	@ 0x50
 80023f0:	5a9b      	ldrh	r3, [r3, r2]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	001a      	movs	r2, r3
 80023f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f8:	189b      	adds	r3, r3, r2
 80023fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	00da      	lsls	r2, r3, #3
 8002402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002404:	18d3      	adds	r3, r2, r3
 8002406:	4adb      	ldr	r2, [pc, #876]	@ (8002774 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002408:	4694      	mov	ip, r2
 800240a:	4463      	add	r3, ip
 800240c:	643b      	str	r3, [r7, #64]	@ 0x40
 800240e:	238c      	movs	r3, #140	@ 0x8c
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002418:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6959      	ldr	r1, [r3, #20]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	891a      	ldrh	r2, [r3, #8]
 8002426:	238c      	movs	r3, #140	@ 0x8c
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	f003 fa0f 	bl	8005850 <USB_WritePMA>
 8002432:	e1ea      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2250      	movs	r2, #80	@ 0x50
 800243a:	5a9b      	ldrh	r3, [r3, r2]
 800243c:	b29b      	uxth	r3, r3
 800243e:	001a      	movs	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	18d2      	adds	r2, r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	18d3      	adds	r3, r2, r3
 800244e:	4aca      	ldr	r2, [pc, #808]	@ (8002778 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002450:	4694      	mov	ip, r2
 8002452:	4463      	add	r3, ip
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	2186      	movs	r1, #134	@ 0x86
 8002458:	187b      	adds	r3, r7, r1
 800245a:	0592      	lsls	r2, r2, #22
 800245c:	0d92      	lsrs	r2, r2, #22
 800245e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	187b      	adds	r3, r7, r1
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d307      	bcc.n	800247c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	187b      	adds	r3, r7, r1
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	1ad2      	subs	r2, r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	619a      	str	r2, [r3, #24]
 800247a:	e002      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d000      	beq.n	800248c <HAL_PCD_EP_DB_Transmit+0x43c>
 800248a:	e0bb      	b.n	8002604 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d125      	bne.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x490>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2250      	movs	r2, #80	@ 0x50
 80024a0:	5a9b      	ldrh	r3, [r3, r2]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	001a      	movs	r2, r3
 80024a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024a8:	189b      	adds	r3, r3, r2
 80024aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	00da      	lsls	r2, r3, #3
 80024b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	4aaf      	ldr	r2, [pc, #700]	@ (8002774 <HAL_PCD_EP_DB_Transmit+0x724>)
 80024b8:	4694      	mov	ip, r2
 80024ba:	4463      	add	r3, ip
 80024bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	059b      	lsls	r3, r3, #22
 80024c6:	0d9b      	lsrs	r3, r3, #22
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4aa9      	ldr	r2, [pc, #676]	@ (800277c <HAL_PCD_EP_DB_Transmit+0x72c>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b29a      	uxth	r2, r3
 80024da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	e01b      	b.n	8002518 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d117      	bne.n	8002518 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2250      	movs	r2, #80	@ 0x50
 80024f4:	5a9b      	ldrh	r3, [r3, r2]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	001a      	movs	r2, r3
 80024fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024fc:	189b      	adds	r3, r3, r2
 80024fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	00da      	lsls	r2, r3, #3
 8002506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002508:	18d3      	adds	r3, r2, r3
 800250a:	4a9a      	ldr	r2, [pc, #616]	@ (8002774 <HAL_PCD_EP_DB_Transmit+0x724>)
 800250c:	4694      	mov	ip, r2
 800250e:	4463      	add	r3, ip
 8002510:	663b      	str	r3, [r7, #96]	@ 0x60
 8002512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	677b      	str	r3, [r7, #116]	@ 0x74
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d12b      	bne.n	800257e <HAL_PCD_EP_DB_Transmit+0x52e>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2250      	movs	r2, #80	@ 0x50
 8002532:	5a9b      	ldrh	r3, [r3, r2]
 8002534:	b29b      	uxth	r3, r3
 8002536:	001a      	movs	r2, r3
 8002538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253a:	189b      	adds	r3, r3, r2
 800253c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	00da      	lsls	r2, r3, #3
 8002544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	4a8b      	ldr	r2, [pc, #556]	@ (8002778 <HAL_PCD_EP_DB_Transmit+0x728>)
 800254a:	4694      	mov	ip, r2
 800254c:	4463      	add	r3, ip
 800254e:	2180      	movs	r1, #128	@ 0x80
 8002550:	187a      	adds	r2, r7, r1
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	187b      	adds	r3, r7, r1
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	059b      	lsls	r3, r3, #22
 800255e:	0d9b      	lsrs	r3, r3, #22
 8002560:	b29a      	uxth	r2, r3
 8002562:	187b      	adds	r3, r7, r1
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	801a      	strh	r2, [r3, #0]
 8002568:	187b      	adds	r3, r7, r1
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	4a82      	ldr	r2, [pc, #520]	@ (800277c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	b29a      	uxth	r2, r3
 8002576:	187b      	adds	r3, r7, r1
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	e018      	b.n	80025b0 <HAL_PCD_EP_DB_Transmit+0x560>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d114      	bne.n	80025b0 <HAL_PCD_EP_DB_Transmit+0x560>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2250      	movs	r2, #80	@ 0x50
 800258c:	5a9b      	ldrh	r3, [r3, r2]
 800258e:	b29b      	uxth	r3, r3
 8002590:	001a      	movs	r2, r3
 8002592:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002594:	189b      	adds	r3, r3, r2
 8002596:	677b      	str	r3, [r7, #116]	@ 0x74
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	00da      	lsls	r2, r3, #3
 800259e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	4a75      	ldr	r2, [pc, #468]	@ (8002778 <HAL_PCD_EP_DB_Transmit+0x728>)
 80025a4:	4694      	mov	ip, r2
 80025a6:	4463      	add	r3, ip
 80025a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80025aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ac:	2200      	movs	r2, #0
 80025ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	0011      	movs	r1, r2
 80025b8:	0018      	movs	r0, r3
 80025ba:	f004 ff35 	bl	8007428 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025be:	1dbb      	adds	r3, r7, #6
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	01db      	lsls	r3, r3, #7
 80025c6:	4013      	ands	r3, r2
 80025c8:	d000      	beq.n	80025cc <HAL_PCD_EP_DB_Transmit+0x57c>
 80025ca:	e11e      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	001a      	movs	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	18d3      	adds	r3, r2, r3
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	2088      	movs	r0, #136	@ 0x88
 80025e0:	183b      	adds	r3, r7, r0
 80025e2:	4967      	ldr	r1, [pc, #412]	@ (8002780 <HAL_PCD_EP_DB_Transmit+0x730>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	001a      	movs	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	18d3      	adds	r3, r2, r3
 80025f6:	183a      	adds	r2, r7, r0
 80025f8:	8812      	ldrh	r2, [r2, #0]
 80025fa:	4962      	ldr	r1, [pc, #392]	@ (8002784 <HAL_PCD_EP_DB_Transmit+0x734>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	b292      	uxth	r2, r2
 8002600:	801a      	strh	r2, [r3, #0]
 8002602:	e102      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002604:	1dbb      	adds	r3, r7, #6
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	01db      	lsls	r3, r3, #7
 800260c:	4013      	ands	r3, r2
 800260e:	d11a      	bne.n	8002646 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	001a      	movs	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29a      	uxth	r2, r3
 8002622:	204e      	movs	r0, #78	@ 0x4e
 8002624:	183b      	adds	r3, r7, r0
 8002626:	4956      	ldr	r1, [pc, #344]	@ (8002780 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002628:	400a      	ands	r2, r1
 800262a:	801a      	strh	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	001a      	movs	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	18d3      	adds	r3, r2, r3
 800263a:	183a      	adds	r2, r7, r0
 800263c:	8812      	ldrh	r2, [r2, #0]
 800263e:	4951      	ldr	r1, [pc, #324]	@ (8002784 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002640:	430a      	orrs	r2, r1
 8002642:	b292      	uxth	r2, r2
 8002644:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2224      	movs	r2, #36	@ 0x24
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d000      	beq.n	8002652 <HAL_PCD_EP_DB_Transmit+0x602>
 8002650:	e0db      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	2186      	movs	r1, #134	@ 0x86
 8002658:	187b      	adds	r3, r7, r1
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	18d2      	adds	r2, r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	187b      	adds	r3, r7, r1
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	18d2      	adds	r2, r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d30c      	bcc.n	8002696 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	218c      	movs	r1, #140	@ 0x8c
 8002682:	187a      	adds	r2, r7, r1
 8002684:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6a1a      	ldr	r2, [r3, #32]
 800268a:	187b      	adds	r3, r7, r1
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	1ad2      	subs	r2, r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	621a      	str	r2, [r3, #32]
 8002694:	e01a      	b.n	80026cc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800269e:	2386      	movs	r3, #134	@ 0x86
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	228c      	movs	r2, #140	@ 0x8c
 80026a6:	18ba      	adds	r2, r7, r2
 80026a8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2224      	movs	r2, #36	@ 0x24
 80026ae:	2100      	movs	r1, #0
 80026b0:	5499      	strb	r1, [r3, r2]
 80026b2:	e00b      	b.n	80026cc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	228c      	movs	r2, #140	@ 0x8c
 80026ba:	18ba      	adds	r2, r7, r2
 80026bc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2224      	movs	r2, #36	@ 0x24
 80026c8:	2100      	movs	r1, #0
 80026ca:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	785b      	ldrb	r3, [r3, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d000      	beq.n	80026dc <HAL_PCD_EP_DB_Transmit+0x68c>
 80026da:	e06e      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x76a>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2250      	movs	r2, #80	@ 0x50
 80026e8:	5a9b      	ldrh	r3, [r3, r2]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	001a      	movs	r2, r3
 80026ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f0:	189b      	adds	r3, r3, r2
 80026f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	00da      	lsls	r2, r3, #3
 80026fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002778 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002700:	4694      	mov	ip, r2
 8002702:	4463      	add	r3, ip
 8002704:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	059b      	lsls	r3, r3, #22
 800270e:	0d9b      	lsrs	r3, r3, #22
 8002710:	b29a      	uxth	r2, r3
 8002712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002714:	801a      	strh	r2, [r3, #0]
 8002716:	228c      	movs	r2, #140	@ 0x8c
 8002718:	18bb      	adds	r3, r7, r2
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b3e      	cmp	r3, #62	@ 0x3e
 800271e:	d91a      	bls.n	8002756 <HAL_PCD_EP_DB_Transmit+0x706>
 8002720:	18bb      	adds	r3, r7, r2
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002728:	18bb      	adds	r3, r7, r2
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	221f      	movs	r2, #31
 800272e:	4013      	ands	r3, r2
 8002730:	d102      	bne.n	8002738 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8002732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002734:	3b01      	subs	r3, #1
 8002736:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002738:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	b29a      	uxth	r2, r3
 800273e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002740:	b29b      	uxth	r3, r3
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	b29b      	uxth	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	b29b      	uxth	r3, r3
 800274a:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800274c:	4313      	orrs	r3, r2
 800274e:	b29a      	uxth	r2, r3
 8002750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e04d      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002756:	238c      	movs	r3, #140	@ 0x8c
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d113      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x738>
 8002760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	4a05      	ldr	r2, [pc, #20]	@ (800277c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002768:	4313      	orrs	r3, r2
 800276a:	b29a      	uxth	r2, r3
 800276c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e03f      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	00000402 	.word	0x00000402
 8002778:	00000406 	.word	0x00000406
 800277c:	ffff8000 	.word	0xffff8000
 8002780:	ffff8f8f 	.word	0xffff8f8f
 8002784:	ffffc080 	.word	0xffffc080
 8002788:	228c      	movs	r2, #140	@ 0x8c
 800278a:	18bb      	adds	r3, r7, r2
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002792:	18bb      	adds	r3, r7, r2
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	4013      	ands	r3, r2
 800279a:	d002      	beq.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x752>
 800279c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800279e:	3301      	adds	r3, #1
 80027a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4313      	orrs	r3, r2
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027b6:	801a      	strh	r2, [r3, #0]
 80027b8:	e01b      	b.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d117      	bne.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2250      	movs	r2, #80	@ 0x50
 80027c8:	5a9b      	ldrh	r3, [r3, r2]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	001a      	movs	r2, r3
 80027ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d0:	189b      	adds	r3, r3, r2
 80027d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	00da      	lsls	r2, r3, #3
 80027da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027dc:	18d3      	adds	r3, r2, r3
 80027de:	4a21      	ldr	r2, [pc, #132]	@ (8002864 <HAL_PCD_EP_DB_Transmit+0x814>)
 80027e0:	4694      	mov	ip, r2
 80027e2:	4463      	add	r3, ip
 80027e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80027e6:	238c      	movs	r3, #140	@ 0x8c
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6959      	ldr	r1, [r3, #20]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	895a      	ldrh	r2, [r3, #10]
 80027fe:	238c      	movs	r3, #140	@ 0x8c
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f003 f823 	bl	8005850 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	001a      	movs	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	18d3      	adds	r3, r2, r3
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29a      	uxth	r2, r3
 800281c:	2014      	movs	r0, #20
 800281e:	183b      	adds	r3, r7, r0
 8002820:	4911      	ldr	r1, [pc, #68]	@ (8002868 <HAL_PCD_EP_DB_Transmit+0x818>)
 8002822:	400a      	ands	r2, r1
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	183b      	adds	r3, r7, r0
 8002828:	183a      	adds	r2, r7, r0
 800282a:	8812      	ldrh	r2, [r2, #0]
 800282c:	2110      	movs	r1, #16
 800282e:	404a      	eors	r2, r1
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	183b      	adds	r3, r7, r0
 8002834:	183a      	adds	r2, r7, r0
 8002836:	8812      	ldrh	r2, [r2, #0]
 8002838:	2120      	movs	r1, #32
 800283a:	404a      	eors	r2, r1
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	001a      	movs	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	18d3      	adds	r3, r2, r3
 800284c:	183a      	adds	r2, r7, r0
 800284e:	8812      	ldrh	r2, [r2, #0]
 8002850:	4906      	ldr	r1, [pc, #24]	@ (800286c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002852:	430a      	orrs	r2, r1
 8002854:	b292      	uxth	r2, r2
 8002856:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b024      	add	sp, #144	@ 0x90
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	00000406 	.word	0x00000406
 8002868:	ffff8fbf 	.word	0xffff8fbf
 800286c:	ffff8080 	.word	0xffff8080

08002870 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	0008      	movs	r0, r1
 800287a:	0011      	movs	r1, r2
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	240a      	movs	r4, #10
 8002880:	193b      	adds	r3, r7, r4
 8002882:	1c02      	adds	r2, r0, #0
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	2308      	movs	r3, #8
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	1c0a      	adds	r2, r1, #0
 800288c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800288e:	0021      	movs	r1, r4
 8002890:	187b      	adds	r3, r7, r1
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	2280      	movs	r2, #128	@ 0x80
 8002896:	4013      	ands	r3, r2
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2207      	movs	r2, #7
 80028a4:	4013      	ands	r3, r2
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	0013      	movs	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	189b      	adds	r3, r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	18d3      	adds	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e00b      	b.n	80028d0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028b8:	230a      	movs	r3, #10
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	881a      	ldrh	r2, [r3, #0]
 80028be:	0013      	movs	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	189b      	adds	r3, r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	3369      	adds	r3, #105	@ 0x69
 80028c8:	33ff      	adds	r3, #255	@ 0xff
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	18d3      	adds	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028d0:	2308      	movs	r3, #8
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	80da      	strh	r2, [r3, #6]
 80028e8:	e00b      	b.n	8002902 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2201      	movs	r2, #1
 80028ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0c1b      	lsrs	r3, r3, #16
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b007      	add	sp, #28
 800290a:	bd90      	pop	{r4, r7, pc}

0800290c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	23ba      	movs	r3, #186	@ 0xba
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	2101      	movs	r1, #1
 8002922:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	23b8      	movs	r3, #184	@ 0xb8
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	2100      	movs	r1, #0
 800292c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2254      	movs	r2, #84	@ 0x54
 8002932:	5a9b      	ldrh	r3, [r3, r2]
 8002934:	b29b      	uxth	r3, r3
 8002936:	2201      	movs	r2, #1
 8002938:	4313      	orrs	r3, r2
 800293a:	b299      	uxth	r1, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2254      	movs	r2, #84	@ 0x54
 8002940:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2254      	movs	r2, #84	@ 0x54
 8002946:	5a9b      	ldrh	r3, [r3, r2]
 8002948:	b29b      	uxth	r3, r3
 800294a:	2202      	movs	r2, #2
 800294c:	4313      	orrs	r3, r2
 800294e:	b299      	uxth	r1, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2254      	movs	r2, #84	@ 0x54
 8002954:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	000a      	movs	r2, r1
 800296a:	1cfb      	adds	r3, r7, #3
 800296c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b08a      	sub	sp, #40	@ 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f000 fbaf 	bl	80030ea <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298c:	4bcf      	ldr	r3, [pc, #828]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	220c      	movs	r2, #12
 8002992:	4013      	ands	r3, r2
 8002994:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002996:	4bcd      	ldr	r3, [pc, #820]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	025b      	lsls	r3, r3, #9
 800299e:	4013      	ands	r3, r2
 80029a0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2201      	movs	r2, #1
 80029a8:	4013      	ands	r3, r2
 80029aa:	d100      	bne.n	80029ae <HAL_RCC_OscConfig+0x36>
 80029ac:	e07e      	b.n	8002aac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d007      	beq.n	80029c4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d112      	bne.n	80029e0 <HAL_RCC_OscConfig+0x68>
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	025b      	lsls	r3, r3, #9
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d10d      	bne.n	80029e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	4bc1      	ldr	r3, [pc, #772]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	029b      	lsls	r3, r3, #10
 80029cc:	4013      	ands	r3, r2
 80029ce:	d100      	bne.n	80029d2 <HAL_RCC_OscConfig+0x5a>
 80029d0:	e06b      	b.n	8002aaa <HAL_RCC_OscConfig+0x132>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d167      	bne.n	8002aaa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f000 fb85 	bl	80030ea <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	025b      	lsls	r3, r3, #9
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x84>
 80029ec:	4bb7      	ldr	r3, [pc, #732]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4bb6      	ldr	r3, [pc, #728]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 80029f2:	2180      	movs	r1, #128	@ 0x80
 80029f4:	0249      	lsls	r1, r1, #9
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e027      	b.n	8002a4c <HAL_RCC_OscConfig+0xd4>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	23a0      	movs	r3, #160	@ 0xa0
 8002a02:	02db      	lsls	r3, r3, #11
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d10e      	bne.n	8002a26 <HAL_RCC_OscConfig+0xae>
 8002a08:	4bb0      	ldr	r3, [pc, #704]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4baf      	ldr	r3, [pc, #700]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a0e:	2180      	movs	r1, #128	@ 0x80
 8002a10:	02c9      	lsls	r1, r1, #11
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	4bad      	ldr	r3, [pc, #692]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4bac      	ldr	r3, [pc, #688]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a1c:	2180      	movs	r1, #128	@ 0x80
 8002a1e:	0249      	lsls	r1, r1, #9
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e012      	b.n	8002a4c <HAL_RCC_OscConfig+0xd4>
 8002a26:	4ba9      	ldr	r3, [pc, #676]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4ba8      	ldr	r3, [pc, #672]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a2c:	49a8      	ldr	r1, [pc, #672]	@ (8002cd0 <HAL_RCC_OscConfig+0x358>)
 8002a2e:	400a      	ands	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	4ba6      	ldr	r3, [pc, #664]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	025b      	lsls	r3, r3, #9
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4ba2      	ldr	r3, [pc, #648]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4ba1      	ldr	r3, [pc, #644]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a46:	49a3      	ldr	r1, [pc, #652]	@ (8002cd4 <HAL_RCC_OscConfig+0x35c>)
 8002a48:	400a      	ands	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fd fed6 	bl	8000804 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a5c:	e009      	b.n	8002a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5e:	f7fd fed1 	bl	8000804 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	@ 0x64
 8002a6a:	d902      	bls.n	8002a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	f000 fb3c 	bl	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a72:	4b96      	ldr	r3, [pc, #600]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	029b      	lsls	r3, r3, #10
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d0ef      	beq.n	8002a5e <HAL_RCC_OscConfig+0xe6>
 8002a7e:	e015      	b.n	8002aac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fd fec0 	bl	8000804 <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8a:	f7fd febb 	bl	8000804 <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	@ 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e326      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x112>
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aaa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d100      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x140>
 8002ab6:	e08b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d13e      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1d0>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d13b      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x16c>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e302      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b79      	ldr	r3, [pc, #484]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd8 <HAL_RCC_OscConfig+0x360>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	021a      	lsls	r2, r3, #8
 8002af4:	4b75      	ldr	r3, [pc, #468]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002afa:	4b74      	ldr	r3, [pc, #464]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2209      	movs	r2, #9
 8002b00:	4393      	bics	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	4b71      	ldr	r3, [pc, #452]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0c:	f000 fc40 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8002b10:	0001      	movs	r1, r0
 8002b12:	4b6e      	ldr	r3, [pc, #440]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	220f      	movs	r2, #15
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	4a6f      	ldr	r2, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x364>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	000a      	movs	r2, r1
 8002b22:	40da      	lsrs	r2, r3
 8002b24:	4b6e      	ldr	r3, [pc, #440]	@ (8002ce0 <HAL_RCC_OscConfig+0x368>)
 8002b26:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002b28:	4b6e      	ldr	r3, [pc, #440]	@ (8002ce4 <HAL_RCC_OscConfig+0x36c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2513      	movs	r5, #19
 8002b2e:	197c      	adds	r4, r7, r5
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7fd fe21 	bl	8000778 <HAL_InitTick>
 8002b36:	0003      	movs	r3, r0
 8002b38:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002b3a:	197b      	adds	r3, r7, r5
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d046      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002b42:	197b      	adds	r3, r7, r5
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	e2d0      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d027      	beq.n	8002b9e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2209      	movs	r2, #9
 8002b54:	4393      	bics	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	4b5c      	ldr	r3, [pc, #368]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fd fe50 	bl	8000804 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7fd fe4b 	bl	8000804 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e2b6      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2204      	movs	r2, #4
 8002b82:	4013      	ands	r3, r2
 8002b84:	d0f1      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b51      	ldr	r3, [pc, #324]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4a53      	ldr	r2, [pc, #332]	@ (8002cd8 <HAL_RCC_OscConfig+0x360>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	021a      	lsls	r2, r3, #8
 8002b96:	4b4d      	ldr	r3, [pc, #308]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	e018      	b.n	8002bd0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	438a      	bics	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fd fe2b 	bl	8000804 <HAL_GetTick>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fd fe26 	bl	8000804 <HAL_GetTick>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e291      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d1f1      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d100      	bne.n	8002bdc <HAL_RCC_OscConfig+0x264>
 8002bda:	e0a1      	b.n	8002d20 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d140      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x282>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e277      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce8 <HAL_RCC_OscConfig+0x370>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c08:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	0a19      	lsrs	r1, r3, #8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	061a      	lsls	r2, r3, #24
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	0b5b      	lsrs	r3, r3, #13
 8002c28:	3301      	adds	r3, #1
 8002c2a:	2280      	movs	r2, #128	@ 0x80
 8002c2c:	0212      	lsls	r2, r2, #8
 8002c2e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c30:	4b26      	ldr	r3, [pc, #152]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	210f      	movs	r1, #15
 8002c38:	400b      	ands	r3, r1
 8002c3a:	4928      	ldr	r1, [pc, #160]	@ (8002cdc <HAL_RCC_OscConfig+0x364>)
 8002c3c:	5ccb      	ldrb	r3, [r1, r3]
 8002c3e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c40:	4b27      	ldr	r3, [pc, #156]	@ (8002ce0 <HAL_RCC_OscConfig+0x368>)
 8002c42:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002c44:	4b27      	ldr	r3, [pc, #156]	@ (8002ce4 <HAL_RCC_OscConfig+0x36c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2513      	movs	r5, #19
 8002c4a:	197c      	adds	r4, r7, r5
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fd fd93 	bl	8000778 <HAL_InitTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002c56:	197b      	adds	r3, r7, r5
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d060      	beq.n	8002d20 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002c5e:	197b      	adds	r3, r7, r5
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	e242      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03f      	beq.n	8002cec <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002c72:	2180      	movs	r1, #128	@ 0x80
 8002c74:	0049      	lsls	r1, r1, #1
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fd fdc3 	bl	8000804 <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c84:	f7fd fdbe 	bl	8000804 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e229      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	2380      	movs	r3, #128	@ 0x80
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a10      	ldr	r2, [pc, #64]	@ (8002ce8 <HAL_RCC_OscConfig+0x370>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	0a19      	lsrs	r1, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	061a      	lsls	r2, r3, #24
 8002cc4:	4b01      	ldr	r3, [pc, #4]	@ (8002ccc <HAL_RCC_OscConfig+0x354>)
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e029      	b.n	8002d20 <HAL_RCC_OscConfig+0x3a8>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	fffeffff 	.word	0xfffeffff
 8002cd4:	fffbffff 	.word	0xfffbffff
 8002cd8:	ffffe0ff 	.word	0xffffe0ff
 8002cdc:	08007a8c 	.word	0x08007a8c
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004
 8002ce8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cec:	4bbd      	ldr	r3, [pc, #756]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4bbc      	ldr	r3, [pc, #752]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002cf2:	49bd      	ldr	r1, [pc, #756]	@ (8002fe8 <HAL_RCC_OscConfig+0x670>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fd fd84 	bl	8000804 <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d02:	f7fd fd7f 	bl	8000804 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1ea      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d14:	4bb3      	ldr	r3, [pc, #716]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2208      	movs	r2, #8
 8002d26:	4013      	ands	r3, r2
 8002d28:	d036      	beq.n	8002d98 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d019      	beq.n	8002d66 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d32:	4bac      	ldr	r3, [pc, #688]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002d34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d36:	4bab      	ldr	r3, [pc, #684]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fd fd61 	bl	8000804 <HAL_GetTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fd fd5c 	bl	8000804 <HAL_GetTick>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1c7      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5a:	4ba2      	ldr	r3, [pc, #648]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5e:	2202      	movs	r2, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	d0f1      	beq.n	8002d48 <HAL_RCC_OscConfig+0x3d0>
 8002d64:	e018      	b.n	8002d98 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d66:	4b9f      	ldr	r3, [pc, #636]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002d68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d6a:	4b9e      	ldr	r3, [pc, #632]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	438a      	bics	r2, r1
 8002d70:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d72:	f7fd fd47 	bl	8000804 <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fd fd42 	bl	8000804 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1ad      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d8e:	4b95      	ldr	r3, [pc, #596]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d92:	2202      	movs	r2, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	d1f1      	bne.n	8002d7c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d100      	bne.n	8002da4 <HAL_RCC_OscConfig+0x42c>
 8002da2:	e0ae      	b.n	8002f02 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da4:	2027      	movs	r0, #39	@ 0x27
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dac:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	055b      	lsls	r3, r3, #21
 8002db4:	4013      	ands	r3, r2
 8002db6:	d109      	bne.n	8002dcc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db8:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dbc:	4b89      	ldr	r3, [pc, #548]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002dbe:	2180      	movs	r1, #128	@ 0x80
 8002dc0:	0549      	lsls	r1, r1, #21
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002dc6:	183b      	adds	r3, r7, r0
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b87      	ldr	r3, [pc, #540]	@ (8002fec <HAL_RCC_OscConfig+0x674>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d11a      	bne.n	8002e0e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd8:	4b84      	ldr	r3, [pc, #528]	@ (8002fec <HAL_RCC_OscConfig+0x674>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b83      	ldr	r3, [pc, #524]	@ (8002fec <HAL_RCC_OscConfig+0x674>)
 8002dde:	2180      	movs	r1, #128	@ 0x80
 8002de0:	0049      	lsls	r1, r1, #1
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7fd fd0d 	bl	8000804 <HAL_GetTick>
 8002dea:	0003      	movs	r3, r0
 8002dec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df0:	f7fd fd08 	bl	8000804 <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	@ 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e173      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b7a      	ldr	r3, [pc, #488]	@ (8002fec <HAL_RCC_OscConfig+0x674>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_OscConfig+0x4b2>
 8002e1a:	4b72      	ldr	r3, [pc, #456]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e1e:	4b71      	ldr	r3, [pc, #452]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	0049      	lsls	r1, r1, #1
 8002e24:	430a      	orrs	r2, r1
 8002e26:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e28:	e031      	b.n	8002e8e <HAL_RCC_OscConfig+0x516>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4d4>
 8002e32:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e36:	4b6b      	ldr	r3, [pc, #428]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e38:	496b      	ldr	r1, [pc, #428]	@ (8002fe8 <HAL_RCC_OscConfig+0x670>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e3e:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e42:	4b68      	ldr	r3, [pc, #416]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e44:	496a      	ldr	r1, [pc, #424]	@ (8002ff0 <HAL_RCC_OscConfig+0x678>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e4a:	e020      	b.n	8002e8e <HAL_RCC_OscConfig+0x516>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	23a0      	movs	r3, #160	@ 0xa0
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d10e      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4fe>
 8002e58:	4b62      	ldr	r3, [pc, #392]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e5c:	4b61      	ldr	r3, [pc, #388]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e5e:	2180      	movs	r1, #128	@ 0x80
 8002e60:	00c9      	lsls	r1, r1, #3
 8002e62:	430a      	orrs	r2, r1
 8002e64:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e66:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e6c:	2180      	movs	r1, #128	@ 0x80
 8002e6e:	0049      	lsls	r1, r1, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e74:	e00b      	b.n	8002e8e <HAL_RCC_OscConfig+0x516>
 8002e76:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e7c:	495a      	ldr	r1, [pc, #360]	@ (8002fe8 <HAL_RCC_OscConfig+0x670>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e82:	4b58      	ldr	r3, [pc, #352]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e86:	4b57      	ldr	r3, [pc, #348]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002e88:	4959      	ldr	r1, [pc, #356]	@ (8002ff0 <HAL_RCC_OscConfig+0x678>)
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d015      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fd fcb5 	bl	8000804 <HAL_GetTick>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fd fcb0 	bl	8000804 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	4a52      	ldr	r2, [pc, #328]	@ (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e11a      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d0ef      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x528>
 8002ec0:	e014      	b.n	8002eec <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fd fc9f 	bl	8000804 <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eca:	e009      	b.n	8002ee0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fd fc9a 	bl	8000804 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	4a47      	ldr	r2, [pc, #284]	@ (8002ff4 <HAL_RCC_OscConfig+0x67c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e104      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ee0:	4b40      	ldr	r3, [pc, #256]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002ee2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ee4:	2380      	movs	r3, #128	@ 0x80
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d1ef      	bne.n	8002ecc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eec:	2327      	movs	r3, #39	@ 0x27
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002efa:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002efc:	493e      	ldr	r1, [pc, #248]	@ (8002ff8 <HAL_RCC_OscConfig+0x680>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2220      	movs	r2, #32
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d049      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d026      	beq.n	8002f62 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f14:	4b33      	ldr	r3, [pc, #204]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b32      	ldr	r3, [pc, #200]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	4b30      	ldr	r3, [pc, #192]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f24:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002f26:	2101      	movs	r1, #1
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f2c:	4b33      	ldr	r3, [pc, #204]	@ (8002ffc <HAL_RCC_OscConfig+0x684>)
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	4b32      	ldr	r3, [pc, #200]	@ (8002ffc <HAL_RCC_OscConfig+0x684>)
 8002f32:	2180      	movs	r1, #128	@ 0x80
 8002f34:	0189      	lsls	r1, r1, #6
 8002f36:	430a      	orrs	r2, r1
 8002f38:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fc63 	bl	8000804 <HAL_GetTick>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f44:	f7fd fc5e 	bl	8000804 <HAL_GetTick>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0c9      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f56:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d0f1      	beq.n	8002f44 <HAL_RCC_OscConfig+0x5cc>
 8002f60:	e01e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f62:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002f68:	2101      	movs	r1, #1
 8002f6a:	438a      	bics	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	4b23      	ldr	r3, [pc, #140]	@ (8002ffc <HAL_RCC_OscConfig+0x684>)
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	4b22      	ldr	r3, [pc, #136]	@ (8002ffc <HAL_RCC_OscConfig+0x684>)
 8002f74:	4922      	ldr	r1, [pc, #136]	@ (8003000 <HAL_RCC_OscConfig+0x688>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fc43 	bl	8000804 <HAL_GetTick>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f84:	f7fd fc3e 	bl	8000804 <HAL_GetTick>
 8002f88:	0002      	movs	r2, r0
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0a9      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f96:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d1f1      	bne.n	8002f84 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d100      	bne.n	8002faa <HAL_RCC_OscConfig+0x632>
 8002fa8:	e09e      	b.n	80030e8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d100      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x63a>
 8002fb0:	e077      	b.n	80030a2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d158      	bne.n	800306c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <HAL_RCC_OscConfig+0x66c>)
 8002fc0:	4910      	ldr	r1, [pc, #64]	@ (8003004 <HAL_RCC_OscConfig+0x68c>)
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fd fc1d 	bl	8000804 <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fce:	e01b      	b.n	8003008 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fd fc18 	bl	8000804 <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d914      	bls.n	8003008 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e083      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	fffffeff 	.word	0xfffffeff
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	fffffbff 	.word	0xfffffbff
 8002ff4:	00001388 	.word	0x00001388
 8002ff8:	efffffff 	.word	0xefffffff
 8002ffc:	40010000 	.word	0x40010000
 8003000:	ffffdfff 	.word	0xffffdfff
 8003004:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003008:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	049b      	lsls	r3, r3, #18
 8003010:	4013      	ands	r3, r2
 8003012:	d1dd      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003014:	4b37      	ldr	r3, [pc, #220]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a37      	ldr	r2, [pc, #220]	@ (80030f8 <HAL_RCC_OscConfig+0x780>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302c:	431a      	orrs	r2, r3
 800302e:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 8003030:	430a      	orrs	r2, r1
 8003032:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b2e      	ldr	r3, [pc, #184]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 800303a:	2180      	movs	r1, #128	@ 0x80
 800303c:	0449      	lsls	r1, r1, #17
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fd fbdf 	bl	8000804 <HAL_GetTick>
 8003046:	0003      	movs	r3, r0
 8003048:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fd fbda 	bl	8000804 <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e045      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800305e:	4b25      	ldr	r3, [pc, #148]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	049b      	lsls	r3, r3, #18
 8003066:	4013      	ands	r3, r2
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x6d4>
 800306a:	e03d      	b.n	80030e8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306c:	4b21      	ldr	r3, [pc, #132]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 8003072:	4922      	ldr	r1, [pc, #136]	@ (80030fc <HAL_RCC_OscConfig+0x784>)
 8003074:	400a      	ands	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fd fbc4 	bl	8000804 <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fd fbbf 	bl	8000804 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e02a      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003094:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	049b      	lsls	r3, r3, #18
 800309c:	4013      	ands	r3, r2
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x70a>
 80030a0:	e022      	b.n	80030e8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e01d      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ae:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <HAL_RCC_OscConfig+0x77c>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	025b      	lsls	r3, r3, #9
 80030ba:	401a      	ands	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d10f      	bne.n	80030e4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	23f0      	movs	r3, #240	@ 0xf0
 80030c8:	039b      	lsls	r3, r3, #14
 80030ca:	401a      	ands	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	23c0      	movs	r3, #192	@ 0xc0
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	401a      	ands	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b00a      	add	sp, #40	@ 0x28
 80030f0:	bdb0      	pop	{r4, r5, r7, pc}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	40021000 	.word	0x40021000
 80030f8:	ff02ffff 	.word	0xff02ffff
 80030fc:	feffffff 	.word	0xfeffffff

08003100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e128      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b96      	ldr	r3, [pc, #600]	@ (8003370 <HAL_RCC_ClockConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d91e      	bls.n	8003160 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b93      	ldr	r3, [pc, #588]	@ (8003370 <HAL_RCC_ClockConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	4393      	bics	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	4b90      	ldr	r3, [pc, #576]	@ (8003370 <HAL_RCC_ClockConfig+0x270>)
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003134:	f7fd fb66 	bl	8000804 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313c:	e009      	b.n	8003152 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313e:	f7fd fb61 	bl	8000804 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	4a8a      	ldr	r2, [pc, #552]	@ (8003374 <HAL_RCC_ClockConfig+0x274>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e109      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b87      	ldr	r3, [pc, #540]	@ (8003370 <HAL_RCC_ClockConfig+0x270>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	4013      	ands	r3, r2
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d1ee      	bne.n	800313e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316a:	4b83      	ldr	r3, [pc, #524]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	22f0      	movs	r2, #240	@ 0xf0
 8003170:	4393      	bics	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	4b7f      	ldr	r3, [pc, #508]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 800317a:	430a      	orrs	r2, r1
 800317c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
 8003186:	d100      	bne.n	800318a <HAL_RCC_ClockConfig+0x8a>
 8003188:	e089      	b.n	800329e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003192:	4b79      	ldr	r3, [pc, #484]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	029b      	lsls	r3, r3, #10
 800319a:	4013      	ands	r3, r2
 800319c:	d120      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0e1      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031aa:	4b73      	ldr	r3, [pc, #460]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	049b      	lsls	r3, r3, #18
 80031b2:	4013      	ands	r3, r2
 80031b4:	d114      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0d5      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2204      	movs	r2, #4
 80031c8:	4013      	ands	r3, r2
 80031ca:	d109      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0ca      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031d0:	4b69      	ldr	r3, [pc, #420]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4013      	ands	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0c2      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e0:	4b65      	ldr	r3, [pc, #404]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2203      	movs	r2, #3
 80031e6:	4393      	bics	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4b62      	ldr	r3, [pc, #392]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 80031f0:	430a      	orrs	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fd fb06 	bl	8000804 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d111      	bne.n	8003228 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003204:	e009      	b.n	800321a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003206:	f7fd fafd 	bl	8000804 <HAL_GetTick>
 800320a:	0002      	movs	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	4a58      	ldr	r2, [pc, #352]	@ (8003374 <HAL_RCC_ClockConfig+0x274>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0a5      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800321a:	4b57      	ldr	r3, [pc, #348]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	220c      	movs	r2, #12
 8003220:	4013      	ands	r3, r2
 8003222:	2b08      	cmp	r3, #8
 8003224:	d1ef      	bne.n	8003206 <HAL_RCC_ClockConfig+0x106>
 8003226:	e03a      	b.n	800329e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d111      	bne.n	8003254 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003230:	e009      	b.n	8003246 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003232:	f7fd fae7 	bl	8000804 <HAL_GetTick>
 8003236:	0002      	movs	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	4a4d      	ldr	r2, [pc, #308]	@ (8003374 <HAL_RCC_ClockConfig+0x274>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e08f      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003246:	4b4c      	ldr	r3, [pc, #304]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	220c      	movs	r2, #12
 800324c:	4013      	ands	r3, r2
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d1ef      	bne.n	8003232 <HAL_RCC_ClockConfig+0x132>
 8003252:	e024      	b.n	800329e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d11b      	bne.n	8003294 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800325c:	e009      	b.n	8003272 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325e:	f7fd fad1 	bl	8000804 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	4a42      	ldr	r2, [pc, #264]	@ (8003374 <HAL_RCC_ClockConfig+0x274>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e079      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003272:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	220c      	movs	r2, #12
 8003278:	4013      	ands	r3, r2
 800327a:	2b04      	cmp	r3, #4
 800327c:	d1ef      	bne.n	800325e <HAL_RCC_ClockConfig+0x15e>
 800327e:	e00e      	b.n	800329e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fd fac0 	bl	8000804 <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	4a3a      	ldr	r2, [pc, #232]	@ (8003374 <HAL_RCC_ClockConfig+0x274>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e068      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003294:	4b38      	ldr	r3, [pc, #224]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	220c      	movs	r2, #12
 800329a:	4013      	ands	r3, r2
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329e:	4b34      	ldr	r3, [pc, #208]	@ (8003370 <HAL_RCC_ClockConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2201      	movs	r2, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d21e      	bcs.n	80032ea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ac:	4b30      	ldr	r3, [pc, #192]	@ (8003370 <HAL_RCC_ClockConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	4393      	bics	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003370 <HAL_RCC_ClockConfig+0x270>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032be:	f7fd faa1 	bl	8000804 <HAL_GetTick>
 80032c2:	0003      	movs	r3, r0
 80032c4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	e009      	b.n	80032dc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fd fa9c 	bl	8000804 <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	4a28      	ldr	r2, [pc, #160]	@ (8003374 <HAL_RCC_ClockConfig+0x274>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e044      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032dc:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <HAL_RCC_ClockConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d1ee      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2204      	movs	r2, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f4:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a20      	ldr	r2, [pc, #128]	@ (800337c <HAL_RCC_ClockConfig+0x27c>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2208      	movs	r2, #8
 800330e:	4013      	ands	r3, r2
 8003310:	d00a      	beq.n	8003328 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003312:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4a1a      	ldr	r2, [pc, #104]	@ (8003380 <HAL_RCC_ClockConfig+0x280>)
 8003318:	4013      	ands	r3, r2
 800331a:	0019      	movs	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	00da      	lsls	r2, r3, #3
 8003322:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 8003324:	430a      	orrs	r2, r1
 8003326:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003328:	f000 f832 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800332c:	0001      	movs	r1, r0
 800332e:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <HAL_RCC_ClockConfig+0x278>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	220f      	movs	r2, #15
 8003336:	4013      	ands	r3, r2
 8003338:	4a12      	ldr	r2, [pc, #72]	@ (8003384 <HAL_RCC_ClockConfig+0x284>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	000a      	movs	r2, r1
 800333e:	40da      	lsrs	r2, r3
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003342:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_RCC_ClockConfig+0x28c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	250b      	movs	r5, #11
 800334a:	197c      	adds	r4, r7, r5
 800334c:	0018      	movs	r0, r3
 800334e:	f7fd fa13 	bl	8000778 <HAL_InitTick>
 8003352:	0003      	movs	r3, r0
 8003354:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003356:	197b      	adds	r3, r7, r5
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800335e:	197b      	adds	r3, r7, r5
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	e000      	b.n	8003366 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b004      	add	sp, #16
 800336c:	bdb0      	pop	{r4, r5, r7, pc}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	40022000 	.word	0x40022000
 8003374:	00001388 	.word	0x00001388
 8003378:	40021000 	.word	0x40021000
 800337c:	fffff8ff 	.word	0xfffff8ff
 8003380:	ffffc7ff 	.word	0xffffc7ff
 8003384:	08007a8c 	.word	0x08007a8c
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004

08003390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b08e      	sub	sp, #56	@ 0x38
 8003394:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003396:	4b4c      	ldr	r3, [pc, #304]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800339c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800339e:	230c      	movs	r3, #12
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d014      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x40>
 80033a6:	d900      	bls.n	80033aa <HAL_RCC_GetSysClockFreq+0x1a>
 80033a8:	e07b      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x112>
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d002      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x24>
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d00b      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x3a>
 80033b2:	e076      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033b4:	4b44      	ldr	r3, [pc, #272]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2210      	movs	r2, #16
 80033ba:	4013      	ands	r3, r2
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80033be:	4b43      	ldr	r3, [pc, #268]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x13c>)
 80033c0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80033c2:	e07c      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80033c4:	4b42      	ldr	r3, [pc, #264]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x140>)
 80033c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80033c8:	e079      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033ca:	4b42      	ldr	r3, [pc, #264]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x144>)
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80033ce:	e076      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80033d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d2:	0c9a      	lsrs	r2, r3, #18
 80033d4:	230f      	movs	r3, #15
 80033d6:	401a      	ands	r2, r3
 80033d8:	4b3f      	ldr	r3, [pc, #252]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x148>)
 80033da:	5c9b      	ldrb	r3, [r3, r2]
 80033dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80033de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e0:	0d9a      	lsrs	r2, r3, #22
 80033e2:	2303      	movs	r3, #3
 80033e4:	4013      	ands	r3, r2
 80033e6:	3301      	adds	r3, #1
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ea:	4b37      	ldr	r3, [pc, #220]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	2380      	movs	r3, #128	@ 0x80
 80033f0:	025b      	lsls	r3, r3, #9
 80033f2:	4013      	ands	r3, r2
 80033f4:	d01a      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80033f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	4a35      	ldr	r2, [pc, #212]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003400:	2300      	movs	r3, #0
 8003402:	69b8      	ldr	r0, [r7, #24]
 8003404:	69f9      	ldr	r1, [r7, #28]
 8003406:	f7fc ff2b 	bl	8000260 <__aeabi_lmul>
 800340a:	0002      	movs	r2, r0
 800340c:	000b      	movs	r3, r1
 800340e:	0010      	movs	r0, r2
 8003410:	0019      	movs	r1, r3
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f7fc feff 	bl	8000220 <__aeabi_uldivmod>
 8003422:	0002      	movs	r2, r0
 8003424:	000b      	movs	r3, r1
 8003426:	0013      	movs	r3, r2
 8003428:	637b      	str	r3, [r7, #52]	@ 0x34
 800342a:	e037      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800342c:	4b26      	ldr	r3, [pc, #152]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x138>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2210      	movs	r2, #16
 8003432:	4013      	ands	r3, r2
 8003434:	d01a      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	4a23      	ldr	r2, [pc, #140]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003440:	2300      	movs	r3, #0
 8003442:	68b8      	ldr	r0, [r7, #8]
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	f7fc ff0b 	bl	8000260 <__aeabi_lmul>
 800344a:	0002      	movs	r2, r0
 800344c:	000b      	movs	r3, r1
 800344e:	0010      	movs	r0, r2
 8003450:	0019      	movs	r1, r3
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f7fc fedf 	bl	8000220 <__aeabi_uldivmod>
 8003462:	0002      	movs	r2, r0
 8003464:	000b      	movs	r3, r1
 8003466:	0013      	movs	r3, r2
 8003468:	637b      	str	r3, [r7, #52]	@ 0x34
 800346a:	e017      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	0018      	movs	r0, r3
 8003470:	2300      	movs	r3, #0
 8003472:	0019      	movs	r1, r3
 8003474:	4a16      	ldr	r2, [pc, #88]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003476:	2300      	movs	r3, #0
 8003478:	f7fc fef2 	bl	8000260 <__aeabi_lmul>
 800347c:	0002      	movs	r2, r0
 800347e:	000b      	movs	r3, r1
 8003480:	0010      	movs	r0, r2
 8003482:	0019      	movs	r1, r3
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	001c      	movs	r4, r3
 8003488:	2300      	movs	r3, #0
 800348a:	001d      	movs	r5, r3
 800348c:	0022      	movs	r2, r4
 800348e:	002b      	movs	r3, r5
 8003490:	f7fc fec6 	bl	8000220 <__aeabi_uldivmod>
 8003494:	0002      	movs	r2, r0
 8003496:	000b      	movs	r3, r1
 8003498:	0013      	movs	r3, r2
 800349a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80034a0:	e00d      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034a2:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	0b5b      	lsrs	r3, r3, #13
 80034a8:	2207      	movs	r2, #7
 80034aa:	4013      	ands	r3, r2
 80034ac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	3301      	adds	r3, #1
 80034b2:	2280      	movs	r2, #128	@ 0x80
 80034b4:	0212      	lsls	r2, r2, #8
 80034b6:	409a      	lsls	r2, r3
 80034b8:	0013      	movs	r3, r2
 80034ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80034bc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b00e      	add	sp, #56	@ 0x38
 80034c6:	bdb0      	pop	{r4, r5, r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	003d0900 	.word	0x003d0900
 80034d0:	00f42400 	.word	0x00f42400
 80034d4:	007a1200 	.word	0x007a1200
 80034d8:	08007a9c 	.word	0x08007a9c

080034dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80034e4:	2317      	movs	r3, #23
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2220      	movs	r2, #32
 80034f2:	4013      	ands	r3, r2
 80034f4:	d106      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	2380      	movs	r3, #128	@ 0x80
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4013      	ands	r3, r2
 8003500:	d100      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003502:	e104      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003504:	4bb1      	ldr	r3, [pc, #708]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	055b      	lsls	r3, r3, #21
 800350c:	4013      	ands	r3, r2
 800350e:	d10a      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4bae      	ldr	r3, [pc, #696]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003514:	4bad      	ldr	r3, [pc, #692]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003516:	2180      	movs	r1, #128	@ 0x80
 8003518:	0549      	lsls	r1, r1, #21
 800351a:	430a      	orrs	r2, r1
 800351c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800351e:	2317      	movs	r3, #23
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4baa      	ldr	r3, [pc, #680]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4013      	ands	r3, r2
 8003530:	d11a      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4ba7      	ldr	r3, [pc, #668]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4ba6      	ldr	r3, [pc, #664]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003538:	2180      	movs	r1, #128	@ 0x80
 800353a:	0049      	lsls	r1, r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003540:	f7fd f960 	bl	8000804 <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	e008      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354a:	f7fd f95b 	bl	8000804 <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	@ 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e133      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b9c      	ldr	r3, [pc, #624]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4013      	ands	r3, r2
 8003566:	d0f0      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003568:	4b98      	ldr	r3, [pc, #608]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	23c0      	movs	r3, #192	@ 0xc0
 800356e:	039b      	lsls	r3, r3, #14
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	23c0      	movs	r3, #192	@ 0xc0
 800357a:	039b      	lsls	r3, r3, #14
 800357c:	4013      	ands	r3, r2
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	429a      	cmp	r2, r3
 8003582:	d107      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	23c0      	movs	r3, #192	@ 0xc0
 800358a:	039b      	lsls	r3, r3, #14
 800358c:	4013      	ands	r3, r2
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	429a      	cmp	r2, r3
 8003592:	d013      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	23c0      	movs	r3, #192	@ 0xc0
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	401a      	ands	r2, r3
 800359e:	23c0      	movs	r3, #192	@ 0xc0
 80035a0:	029b      	lsls	r3, r3, #10
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d10a      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035a6:	4b89      	ldr	r3, [pc, #548]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	029b      	lsls	r3, r3, #10
 80035ae:	401a      	ands	r2, r3
 80035b0:	2380      	movs	r3, #128	@ 0x80
 80035b2:	029b      	lsls	r3, r3, #10
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d101      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e103      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035bc:	4b83      	ldr	r3, [pc, #524]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035c0:	23c0      	movs	r3, #192	@ 0xc0
 80035c2:	029b      	lsls	r3, r3, #10
 80035c4:	4013      	ands	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d049      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	23c0      	movs	r3, #192	@ 0xc0
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	4013      	ands	r3, r2
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d004      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2220      	movs	r2, #32
 80035e4:	4013      	ands	r3, r2
 80035e6:	d10d      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	23c0      	movs	r3, #192	@ 0xc0
 80035ee:	029b      	lsls	r3, r3, #10
 80035f0:	4013      	ands	r3, r2
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d034      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2380      	movs	r3, #128	@ 0x80
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	4013      	ands	r3, r2
 8003602:	d02e      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003604:	4b71      	ldr	r3, [pc, #452]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003608:	4a72      	ldr	r2, [pc, #456]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800360a:	4013      	ands	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800360e:	4b6f      	ldr	r3, [pc, #444]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003612:	4b6e      	ldr	r3, [pc, #440]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003614:	2180      	movs	r1, #128	@ 0x80
 8003616:	0309      	lsls	r1, r1, #12
 8003618:	430a      	orrs	r2, r1
 800361a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800361c:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800361e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003620:	4b6a      	ldr	r3, [pc, #424]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003622:	496d      	ldr	r1, [pc, #436]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003624:	400a      	ands	r2, r1
 8003626:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003628:	4b68      	ldr	r3, [pc, #416]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4013      	ands	r3, r2
 8003636:	d014      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fd f8e4 	bl	8000804 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003640:	e009      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fd f8df 	bl	8000804 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	4a63      	ldr	r2, [pc, #396]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0b6      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003656:	4b5d      	ldr	r3, [pc, #372]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4013      	ands	r3, r2
 8003660:	d0ef      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	2380      	movs	r3, #128	@ 0x80
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	4013      	ands	r3, r2
 800366c:	d01f      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	23c0      	movs	r3, #192	@ 0xc0
 8003674:	029b      	lsls	r3, r3, #10
 8003676:	401a      	ands	r2, r3
 8003678:	23c0      	movs	r3, #192	@ 0xc0
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	429a      	cmp	r2, r3
 800367e:	d10c      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003680:	4b52      	ldr	r3, [pc, #328]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003686:	4013      	ands	r3, r2
 8003688:	0019      	movs	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	23c0      	movs	r3, #192	@ 0xc0
 8003690:	039b      	lsls	r3, r3, #14
 8003692:	401a      	ands	r2, r3
 8003694:	4b4d      	ldr	r3, [pc, #308]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003696:	430a      	orrs	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	4b4c      	ldr	r3, [pc, #304]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800369c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	23c0      	movs	r3, #192	@ 0xc0
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	401a      	ands	r2, r3
 80036a8:	4b48      	ldr	r3, [pc, #288]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036aa:	430a      	orrs	r2, r1
 80036ac:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2220      	movs	r2, #32
 80036b4:	4013      	ands	r3, r2
 80036b6:	d01f      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	23c0      	movs	r3, #192	@ 0xc0
 80036be:	029b      	lsls	r3, r3, #10
 80036c0:	401a      	ands	r2, r3
 80036c2:	23c0      	movs	r3, #192	@ 0xc0
 80036c4:	029b      	lsls	r3, r3, #10
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80036ca:	4b40      	ldr	r3, [pc, #256]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a44      	ldr	r2, [pc, #272]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	23c0      	movs	r3, #192	@ 0xc0
 80036da:	039b      	lsls	r3, r3, #14
 80036dc:	401a      	ands	r2, r3
 80036de:	4b3b      	ldr	r3, [pc, #236]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	4b39      	ldr	r3, [pc, #228]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036e6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	23c0      	movs	r3, #192	@ 0xc0
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	401a      	ands	r2, r3
 80036f2:	4b36      	ldr	r3, [pc, #216]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036f8:	2317      	movs	r3, #23
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b32      	ldr	r3, [pc, #200]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003706:	4b31      	ldr	r3, [pc, #196]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003708:	4936      	ldr	r1, [pc, #216]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800370a:	400a      	ands	r2, r1
 800370c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2201      	movs	r2, #1
 8003714:	4013      	ands	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003718:	4b2c      	ldr	r3, [pc, #176]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800371a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371c:	2203      	movs	r2, #3
 800371e:	4393      	bics	r3, r2
 8003720:	0019      	movs	r1, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003728:	430a      	orrs	r2, r1
 800372a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2202      	movs	r2, #2
 8003732:	4013      	ands	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003736:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	220c      	movs	r2, #12
 800373c:	4393      	bics	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003746:	430a      	orrs	r2, r1
 8003748:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2204      	movs	r2, #4
 8003750:	4013      	ands	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003754:	4b1d      	ldr	r3, [pc, #116]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003758:	4a23      	ldr	r2, [pc, #140]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	4b1a      	ldr	r3, [pc, #104]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003764:	430a      	orrs	r2, r1
 8003766:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2208      	movs	r2, #8
 800376e:	4013      	ands	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003772:	4b16      	ldr	r3, [pc, #88]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003776:	4a1d      	ldr	r2, [pc, #116]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	4b12      	ldr	r3, [pc, #72]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003782:	430a      	orrs	r2, r1
 8003784:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2240      	movs	r2, #64	@ 0x40
 800378c:	4013      	ands	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003790:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003794:	4a16      	ldr	r2, [pc, #88]	@ (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037a0:	430a      	orrs	r2, r1
 80037a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	4013      	ands	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80037ae:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	4a10      	ldr	r2, [pc, #64]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037be:	430a      	orrs	r2, r1
 80037c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b006      	add	sp, #24
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
 80037d4:	fffcffff 	.word	0xfffcffff
 80037d8:	fff7ffff 	.word	0xfff7ffff
 80037dc:	00001388 	.word	0x00001388
 80037e0:	ffcfffff 	.word	0xffcfffff
 80037e4:	efffffff 	.word	0xefffffff
 80037e8:	fffff3ff 	.word	0xfffff3ff
 80037ec:	ffffcfff 	.word	0xffffcfff
 80037f0:	fbffffff 	.word	0xfbffffff
 80037f4:	fff3ffff 	.word	0xfff3ffff

080037f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2244      	movs	r2, #68	@ 0x44
 8003804:	2100      	movs	r1, #0
 8003806:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <USB_EnableGlobalInt+0x28>)
 800380a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	b299      	uxth	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2240      	movs	r2, #64	@ 0x40
 8003814:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b004      	add	sp, #16
 800381e:	bd80      	pop	{r7, pc}
 8003820:	0000bf80 	.word	0x0000bf80

08003824 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <USB_DisableGlobalInt+0x30>)
 800382e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2240      	movs	r2, #64	@ 0x40
 8003834:	5a9b      	ldrh	r3, [r3, r2]
 8003836:	b29b      	uxth	r3, r3
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	b292      	uxth	r2, r2
 800383c:	43d2      	mvns	r2, r2
 800383e:	b292      	uxth	r2, r2
 8003840:	4013      	ands	r3, r2
 8003842:	b299      	uxth	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2240      	movs	r2, #64	@ 0x40
 8003848:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b004      	add	sp, #16
 8003852:	bd80      	pop	{r7, pc}
 8003854:	0000bf80 	.word	0x0000bf80

08003858 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003858:	b084      	sub	sp, #16
 800385a:	b590      	push	{r4, r7, lr}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	2004      	movs	r0, #4
 8003864:	2410      	movs	r4, #16
 8003866:	1900      	adds	r0, r0, r4
 8003868:	2408      	movs	r4, #8
 800386a:	46a4      	mov	ip, r4
 800386c:	44bc      	add	ip, r7
 800386e:	4460      	add	r0, ip
 8003870:	6001      	str	r1, [r0, #0]
 8003872:	6042      	str	r2, [r0, #4]
 8003874:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2240      	movs	r2, #64	@ 0x40
 800387a:	2101      	movs	r1, #1
 800387c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2240      	movs	r2, #64	@ 0x40
 8003882:	2100      	movs	r1, #0
 8003884:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2244      	movs	r2, #68	@ 0x44
 800388a:	2100      	movs	r1, #0
 800388c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2250      	movs	r2, #80	@ 0x50
 8003892:	2100      	movs	r1, #0
 8003894:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b003      	add	sp, #12
 800389e:	bc90      	pop	{r4, r7}
 80038a0:	bc08      	pop	{r3}
 80038a2:	b004      	add	sp, #16
 80038a4:	4718      	bx	r3
	...

080038a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b09c      	sub	sp, #112	@ 0x70
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80038b2:	236f      	movs	r3, #111	@ 0x6f
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	18d3      	adds	r3, r2, r3
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	236c      	movs	r3, #108	@ 0x6c
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	49a3      	ldr	r1, [pc, #652]	@ (8003b5c <USB_ActivateEndpoint+0x2b4>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	78db      	ldrb	r3, [r3, #3]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d017      	beq.n	800390a <USB_ActivateEndpoint+0x62>
 80038da:	dc28      	bgt.n	800392e <USB_ActivateEndpoint+0x86>
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d00e      	beq.n	80038fe <USB_ActivateEndpoint+0x56>
 80038e0:	dc25      	bgt.n	800392e <USB_ActivateEndpoint+0x86>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <USB_ActivateEndpoint+0x44>
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d018      	beq.n	800391c <USB_ActivateEndpoint+0x74>
 80038ea:	e020      	b.n	800392e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80038ec:	226c      	movs	r2, #108	@ 0x6c
 80038ee:	18bb      	adds	r3, r7, r2
 80038f0:	18ba      	adds	r2, r7, r2
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	2180      	movs	r1, #128	@ 0x80
 80038f6:	0089      	lsls	r1, r1, #2
 80038f8:	430a      	orrs	r2, r1
 80038fa:	801a      	strh	r2, [r3, #0]
      break;
 80038fc:	e01c      	b.n	8003938 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80038fe:	226c      	movs	r2, #108	@ 0x6c
 8003900:	18bb      	adds	r3, r7, r2
 8003902:	18ba      	adds	r2, r7, r2
 8003904:	8812      	ldrh	r2, [r2, #0]
 8003906:	801a      	strh	r2, [r3, #0]
      break;
 8003908:	e016      	b.n	8003938 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800390a:	226c      	movs	r2, #108	@ 0x6c
 800390c:	18bb      	adds	r3, r7, r2
 800390e:	18ba      	adds	r2, r7, r2
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	21c0      	movs	r1, #192	@ 0xc0
 8003914:	00c9      	lsls	r1, r1, #3
 8003916:	430a      	orrs	r2, r1
 8003918:	801a      	strh	r2, [r3, #0]
      break;
 800391a:	e00d      	b.n	8003938 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800391c:	226c      	movs	r2, #108	@ 0x6c
 800391e:	18bb      	adds	r3, r7, r2
 8003920:	18ba      	adds	r2, r7, r2
 8003922:	8812      	ldrh	r2, [r2, #0]
 8003924:	2180      	movs	r1, #128	@ 0x80
 8003926:	00c9      	lsls	r1, r1, #3
 8003928:	430a      	orrs	r2, r1
 800392a:	801a      	strh	r2, [r3, #0]
      break;
 800392c:	e004      	b.n	8003938 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800392e:	236f      	movs	r3, #111	@ 0x6f
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
      break;
 8003936:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	18d3      	adds	r3, r2, r3
 8003942:	226c      	movs	r2, #108	@ 0x6c
 8003944:	18ba      	adds	r2, r7, r2
 8003946:	8812      	ldrh	r2, [r2, #0]
 8003948:	4985      	ldr	r1, [pc, #532]	@ (8003b60 <USB_ActivateEndpoint+0x2b8>)
 800394a:	430a      	orrs	r2, r1
 800394c:	b292      	uxth	r2, r2
 800394e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	18d3      	adds	r3, r2, r3
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	b21b      	sxth	r3, r3
 8003960:	4a80      	ldr	r2, [pc, #512]	@ (8003b64 <USB_ActivateEndpoint+0x2bc>)
 8003962:	4013      	ands	r3, r2
 8003964:	b21a      	sxth	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b21b      	sxth	r3, r3
 800396c:	4313      	orrs	r3, r2
 800396e:	b21a      	sxth	r2, r3
 8003970:	2166      	movs	r1, #102	@ 0x66
 8003972:	187b      	adds	r3, r7, r1
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	18d3      	adds	r3, r2, r3
 8003980:	187a      	adds	r2, r7, r1
 8003982:	8812      	ldrh	r2, [r2, #0]
 8003984:	4976      	ldr	r1, [pc, #472]	@ (8003b60 <USB_ActivateEndpoint+0x2b8>)
 8003986:	430a      	orrs	r2, r1
 8003988:	b292      	uxth	r2, r2
 800398a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	7b1b      	ldrb	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d000      	beq.n	8003996 <USB_ActivateEndpoint+0xee>
 8003994:	e178      	b.n	8003c88 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	785b      	ldrb	r3, [r3, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d100      	bne.n	80039a0 <USB_ActivateEndpoint+0xf8>
 800399e:	e07a      	b.n	8003a96 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2250      	movs	r2, #80	@ 0x50
 80039a8:	5a9b      	ldrh	r3, [r3, r2]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	001a      	movs	r2, r3
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	189b      	adds	r3, r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00da      	lsls	r2, r3, #3
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	4694      	mov	ip, r2
 80039c4:	4463      	add	r3, ip
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	88db      	ldrh	r3, [r3, #6]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	18db      	adds	r3, r3, r3
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	18d2      	adds	r2, r2, r3
 80039e2:	2112      	movs	r1, #18
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	8812      	ldrh	r2, [r2, #0]
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	2240      	movs	r2, #64	@ 0x40
 80039f0:	4013      	ands	r3, r2
 80039f2:	d016      	beq.n	8003a22 <USB_ActivateEndpoint+0x17a>
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	2010      	movs	r0, #16
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	4957      	ldr	r1, [pc, #348]	@ (8003b64 <USB_ActivateEndpoint+0x2bc>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	18d3      	adds	r3, r2, r3
 8003a16:	183a      	adds	r2, r7, r0
 8003a18:	8812      	ldrh	r2, [r2, #0]
 8003a1a:	4953      	ldr	r1, [pc, #332]	@ (8003b68 <USB_ActivateEndpoint+0x2c0>)
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	78db      	ldrb	r3, [r3, #3]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d01d      	beq.n	8003a66 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	18d3      	adds	r3, r2, r3
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	200c      	movs	r0, #12
 8003a3a:	183b      	adds	r3, r7, r0
 8003a3c:	494b      	ldr	r1, [pc, #300]	@ (8003b6c <USB_ActivateEndpoint+0x2c4>)
 8003a3e:	400a      	ands	r2, r1
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	183b      	adds	r3, r7, r0
 8003a44:	183a      	adds	r2, r7, r0
 8003a46:	8812      	ldrh	r2, [r2, #0]
 8003a48:	2120      	movs	r1, #32
 8003a4a:	404a      	eors	r2, r1
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	18d3      	adds	r3, r2, r3
 8003a58:	183a      	adds	r2, r7, r0
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	4940      	ldr	r1, [pc, #256]	@ (8003b60 <USB_ActivateEndpoint+0x2b8>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	b292      	uxth	r2, r2
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	e2b4      	b.n	8003fd0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	18d3      	adds	r3, r2, r3
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	200e      	movs	r0, #14
 8003a76:	183b      	adds	r3, r7, r0
 8003a78:	493c      	ldr	r1, [pc, #240]	@ (8003b6c <USB_ActivateEndpoint+0x2c4>)
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	18d3      	adds	r3, r2, r3
 8003a88:	183a      	adds	r2, r7, r0
 8003a8a:	8812      	ldrh	r2, [r2, #0]
 8003a8c:	4934      	ldr	r1, [pc, #208]	@ (8003b60 <USB_ActivateEndpoint+0x2b8>)
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	b292      	uxth	r2, r2
 8003a92:	801a      	strh	r2, [r3, #0]
 8003a94:	e29c      	b.n	8003fd0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2250      	movs	r2, #80	@ 0x50
 8003a9e:	5a9b      	ldrh	r3, [r3, r2]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	00da      	lsls	r2, r3, #3
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab2:	18d3      	adds	r3, r2, r3
 8003ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b70 <USB_ActivateEndpoint+0x2c8>)
 8003ab6:	4694      	mov	ip, r2
 8003ab8:	4463      	add	r3, ip
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	88db      	ldrh	r3, [r3, #6]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	18db      	adds	r3, r3, r3
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2250      	movs	r2, #80	@ 0x50
 8003ad4:	5a9b      	ldrh	r3, [r3, r2]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	001a      	movs	r2, r3
 8003ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	00da      	lsls	r2, r3, #3
 8003ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	4a22      	ldr	r2, [pc, #136]	@ (8003b74 <USB_ActivateEndpoint+0x2cc>)
 8003aec:	4694      	mov	ip, r2
 8003aee:	4463      	add	r3, ip
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	059b      	lsls	r3, r3, #22
 8003afa:	0d9b      	lsrs	r3, r3, #22
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b08:	d91a      	bls.n	8003b40 <USB_ActivateEndpoint+0x298>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	221f      	movs	r2, #31
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d102      	bne.n	8003b22 <USB_ActivateEndpoint+0x27a>
 8003b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	029b      	lsls	r3, r3, #10
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4313      	orrs	r3, r2
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <USB_ActivateEndpoint+0x2d0>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	801a      	strh	r2, [r3, #0]
 8003b3e:	e034      	b.n	8003baa <USB_ActivateEndpoint+0x302>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d119      	bne.n	8003b7c <USB_ActivateEndpoint+0x2d4>
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <USB_ActivateEndpoint+0x2d0>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	e027      	b.n	8003baa <USB_ActivateEndpoint+0x302>
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	ffff898f 	.word	0xffff898f
 8003b60:	ffff8080 	.word	0xffff8080
 8003b64:	ffff8f8f 	.word	0xffff8f8f
 8003b68:	ffff80c0 	.word	0xffff80c0
 8003b6c:	ffff8fbf 	.word	0xffff8fbf
 8003b70:	00000404 	.word	0x00000404
 8003b74:	00000406 	.word	0x00000406
 8003b78:	ffff8000 	.word	0xffff8000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d002      	beq.n	8003b94 <USB_ActivateEndpoint+0x2ec>
 8003b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b90:	3301      	adds	r3, #1
 8003b92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	029b      	lsls	r3, r3, #10
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	18d2      	adds	r2, r2, r3
 8003bb4:	2122      	movs	r1, #34	@ 0x22
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	8812      	ldrh	r2, [r2, #0]
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	2380      	movs	r3, #128	@ 0x80
 8003bc2:	01db      	lsls	r3, r3, #7
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d016      	beq.n	8003bf6 <USB_ActivateEndpoint+0x34e>
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	18d3      	adds	r3, r2, r3
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	2020      	movs	r0, #32
 8003bd8:	183b      	adds	r3, r7, r0
 8003bda:	49dd      	ldr	r1, [pc, #884]	@ (8003f50 <USB_ActivateEndpoint+0x6a8>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	801a      	strh	r2, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	18d3      	adds	r3, r2, r3
 8003bea:	183a      	adds	r2, r7, r0
 8003bec:	8812      	ldrh	r2, [r2, #0]
 8003bee:	49d9      	ldr	r1, [pc, #868]	@ (8003f54 <USB_ActivateEndpoint+0x6ac>)
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d125      	bne.n	8003c4a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	18d3      	adds	r3, r2, r3
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	201c      	movs	r0, #28
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	49d1      	ldr	r1, [pc, #836]	@ (8003f58 <USB_ActivateEndpoint+0x6b0>)
 8003c12:	400a      	ands	r2, r1
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	183a      	adds	r2, r7, r0
 8003c1a:	8812      	ldrh	r2, [r2, #0]
 8003c1c:	2180      	movs	r1, #128	@ 0x80
 8003c1e:	0149      	lsls	r1, r1, #5
 8003c20:	404a      	eors	r2, r1
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	183b      	adds	r3, r7, r0
 8003c26:	183a      	adds	r2, r7, r0
 8003c28:	8812      	ldrh	r2, [r2, #0]
 8003c2a:	2180      	movs	r1, #128	@ 0x80
 8003c2c:	0189      	lsls	r1, r1, #6
 8003c2e:	404a      	eors	r2, r1
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	18d3      	adds	r3, r2, r3
 8003c3c:	183a      	adds	r2, r7, r0
 8003c3e:	8812      	ldrh	r2, [r2, #0]
 8003c40:	49c6      	ldr	r1, [pc, #792]	@ (8003f5c <USB_ActivateEndpoint+0x6b4>)
 8003c42:	430a      	orrs	r2, r1
 8003c44:	b292      	uxth	r2, r2
 8003c46:	801a      	strh	r2, [r3, #0]
 8003c48:	e1c2      	b.n	8003fd0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	18d3      	adds	r3, r2, r3
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	201e      	movs	r0, #30
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	49be      	ldr	r1, [pc, #760]	@ (8003f58 <USB_ActivateEndpoint+0x6b0>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	801a      	strh	r2, [r3, #0]
 8003c62:	183b      	adds	r3, r7, r0
 8003c64:	183a      	adds	r2, r7, r0
 8003c66:	8812      	ldrh	r2, [r2, #0]
 8003c68:	2180      	movs	r1, #128	@ 0x80
 8003c6a:	0189      	lsls	r1, r1, #6
 8003c6c:	404a      	eors	r2, r1
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	183a      	adds	r2, r7, r0
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	49b7      	ldr	r1, [pc, #732]	@ (8003f5c <USB_ActivateEndpoint+0x6b4>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e1a3      	b.n	8003fd0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	78db      	ldrb	r3, [r3, #3]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d117      	bne.n	8003cc0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	18d3      	adds	r3, r2, r3
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	2062      	movs	r0, #98	@ 0x62
 8003ca0:	183b      	adds	r3, r7, r0
 8003ca2:	49ab      	ldr	r1, [pc, #684]	@ (8003f50 <USB_ActivateEndpoint+0x6a8>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	183a      	adds	r2, r7, r0
 8003cb4:	8812      	ldrh	r2, [r2, #0]
 8003cb6:	49aa      	ldr	r1, [pc, #680]	@ (8003f60 <USB_ActivateEndpoint+0x6b8>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	801a      	strh	r2, [r3, #0]
 8003cbe:	e016      	b.n	8003cee <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	18d3      	adds	r3, r2, r3
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	2064      	movs	r0, #100	@ 0x64
 8003cd0:	183b      	adds	r3, r7, r0
 8003cd2:	49a4      	ldr	r1, [pc, #656]	@ (8003f64 <USB_ActivateEndpoint+0x6bc>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	18d3      	adds	r3, r2, r3
 8003ce2:	183a      	adds	r2, r7, r0
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	499d      	ldr	r1, [pc, #628]	@ (8003f5c <USB_ActivateEndpoint+0x6b4>)
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	b292      	uxth	r2, r2
 8003cec:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2250      	movs	r2, #80	@ 0x50
 8003cf6:	5a9b      	ldrh	r3, [r3, r2]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00da      	lsls	r2, r3, #3
 8003d08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	2280      	movs	r2, #128	@ 0x80
 8003d0e:	00d2      	lsls	r2, r2, #3
 8003d10:	4694      	mov	ip, r2
 8003d12:	4463      	add	r3, ip
 8003d14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	891b      	ldrh	r3, [r3, #8]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	18db      	adds	r3, r3, r3
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2250      	movs	r2, #80	@ 0x50
 8003d2e:	5a9b      	ldrh	r3, [r3, r2]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	001a      	movs	r2, r3
 8003d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	00da      	lsls	r2, r3, #3
 8003d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d42:	18d3      	adds	r3, r2, r3
 8003d44:	4a88      	ldr	r2, [pc, #544]	@ (8003f68 <USB_ActivateEndpoint+0x6c0>)
 8003d46:	4694      	mov	ip, r2
 8003d48:	4463      	add	r3, ip
 8003d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	895b      	ldrh	r3, [r3, #10]
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	18db      	adds	r3, r3, r3
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d000      	beq.n	8003d66 <USB_ActivateEndpoint+0x4be>
 8003d64:	e087      	b.n	8003e76 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	18d2      	adds	r2, r2, r3
 8003d70:	2140      	movs	r1, #64	@ 0x40
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	8812      	ldrh	r2, [r2, #0]
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	2380      	movs	r3, #128	@ 0x80
 8003d7e:	01db      	lsls	r3, r3, #7
 8003d80:	4013      	ands	r3, r2
 8003d82:	d016      	beq.n	8003db2 <USB_ActivateEndpoint+0x50a>
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	18d3      	adds	r3, r2, r3
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	203e      	movs	r0, #62	@ 0x3e
 8003d94:	183b      	adds	r3, r7, r0
 8003d96:	496e      	ldr	r1, [pc, #440]	@ (8003f50 <USB_ActivateEndpoint+0x6a8>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	801a      	strh	r2, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	183a      	adds	r2, r7, r0
 8003da8:	8812      	ldrh	r2, [r2, #0]
 8003daa:	496a      	ldr	r1, [pc, #424]	@ (8003f54 <USB_ActivateEndpoint+0x6ac>)
 8003dac:	430a      	orrs	r2, r1
 8003dae:	b292      	uxth	r2, r2
 8003db0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	18d2      	adds	r2, r2, r3
 8003dbc:	213c      	movs	r1, #60	@ 0x3c
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	8812      	ldrh	r2, [r2, #0]
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	2240      	movs	r2, #64	@ 0x40
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d016      	beq.n	8003dfc <USB_ActivateEndpoint+0x554>
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	18d3      	adds	r3, r2, r3
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	203a      	movs	r0, #58	@ 0x3a
 8003dde:	183b      	adds	r3, r7, r0
 8003de0:	495b      	ldr	r1, [pc, #364]	@ (8003f50 <USB_ActivateEndpoint+0x6a8>)
 8003de2:	400a      	ands	r2, r1
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	18d3      	adds	r3, r2, r3
 8003df0:	183a      	adds	r2, r7, r0
 8003df2:	8812      	ldrh	r2, [r2, #0]
 8003df4:	495d      	ldr	r1, [pc, #372]	@ (8003f6c <USB_ActivateEndpoint+0x6c4>)
 8003df6:	430a      	orrs	r2, r1
 8003df8:	b292      	uxth	r2, r2
 8003dfa:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	18d3      	adds	r3, r2, r3
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	2038      	movs	r0, #56	@ 0x38
 8003e0c:	183b      	adds	r3, r7, r0
 8003e0e:	4952      	ldr	r1, [pc, #328]	@ (8003f58 <USB_ActivateEndpoint+0x6b0>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	183b      	adds	r3, r7, r0
 8003e16:	183a      	adds	r2, r7, r0
 8003e18:	8812      	ldrh	r2, [r2, #0]
 8003e1a:	2180      	movs	r1, #128	@ 0x80
 8003e1c:	0149      	lsls	r1, r1, #5
 8003e1e:	404a      	eors	r2, r1
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	183b      	adds	r3, r7, r0
 8003e24:	183a      	adds	r2, r7, r0
 8003e26:	8812      	ldrh	r2, [r2, #0]
 8003e28:	2180      	movs	r1, #128	@ 0x80
 8003e2a:	0189      	lsls	r1, r1, #6
 8003e2c:	404a      	eors	r2, r1
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	18d3      	adds	r3, r2, r3
 8003e3a:	183a      	adds	r2, r7, r0
 8003e3c:	8812      	ldrh	r2, [r2, #0]
 8003e3e:	4947      	ldr	r1, [pc, #284]	@ (8003f5c <USB_ActivateEndpoint+0x6b4>)
 8003e40:	430a      	orrs	r2, r1
 8003e42:	b292      	uxth	r2, r2
 8003e44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	18d3      	adds	r3, r2, r3
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	2036      	movs	r0, #54	@ 0x36
 8003e56:	183b      	adds	r3, r7, r0
 8003e58:	4945      	ldr	r1, [pc, #276]	@ (8003f70 <USB_ActivateEndpoint+0x6c8>)
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	18d3      	adds	r3, r2, r3
 8003e68:	183a      	adds	r2, r7, r0
 8003e6a:	8812      	ldrh	r2, [r2, #0]
 8003e6c:	493b      	ldr	r1, [pc, #236]	@ (8003f5c <USB_ActivateEndpoint+0x6b4>)
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	b292      	uxth	r2, r2
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	e0ac      	b.n	8003fd0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	18d2      	adds	r2, r2, r3
 8003e80:	214e      	movs	r1, #78	@ 0x4e
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	01db      	lsls	r3, r3, #7
 8003e90:	4013      	ands	r3, r2
 8003e92:	d016      	beq.n	8003ec2 <USB_ActivateEndpoint+0x61a>
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	204c      	movs	r0, #76	@ 0x4c
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	492a      	ldr	r1, [pc, #168]	@ (8003f50 <USB_ActivateEndpoint+0x6a8>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	801a      	strh	r2, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	183a      	adds	r2, r7, r0
 8003eb8:	8812      	ldrh	r2, [r2, #0]
 8003eba:	4926      	ldr	r1, [pc, #152]	@ (8003f54 <USB_ActivateEndpoint+0x6ac>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	18d2      	adds	r2, r2, r3
 8003ecc:	214a      	movs	r1, #74	@ 0x4a
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	8812      	ldrh	r2, [r2, #0]
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	2240      	movs	r2, #64	@ 0x40
 8003eda:	4013      	ands	r3, r2
 8003edc:	d016      	beq.n	8003f0c <USB_ActivateEndpoint+0x664>
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	18d3      	adds	r3, r2, r3
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	2048      	movs	r0, #72	@ 0x48
 8003eee:	183b      	adds	r3, r7, r0
 8003ef0:	4917      	ldr	r1, [pc, #92]	@ (8003f50 <USB_ActivateEndpoint+0x6a8>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	801a      	strh	r2, [r3, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	183a      	adds	r2, r7, r0
 8003f02:	8812      	ldrh	r2, [r2, #0]
 8003f04:	4919      	ldr	r1, [pc, #100]	@ (8003f6c <USB_ActivateEndpoint+0x6c4>)
 8003f06:	430a      	orrs	r2, r1
 8003f08:	b292      	uxth	r2, r2
 8003f0a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	78db      	ldrb	r3, [r3, #3]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d02f      	beq.n	8003f74 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	18d3      	adds	r3, r2, r3
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	2044      	movs	r0, #68	@ 0x44
 8003f24:	183b      	adds	r3, r7, r0
 8003f26:	4912      	ldr	r1, [pc, #72]	@ (8003f70 <USB_ActivateEndpoint+0x6c8>)
 8003f28:	400a      	ands	r2, r1
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	183a      	adds	r2, r7, r0
 8003f30:	8812      	ldrh	r2, [r2, #0]
 8003f32:	2120      	movs	r1, #32
 8003f34:	404a      	eors	r2, r1
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	18d3      	adds	r3, r2, r3
 8003f42:	183a      	adds	r2, r7, r0
 8003f44:	8812      	ldrh	r2, [r2, #0]
 8003f46:	4905      	ldr	r1, [pc, #20]	@ (8003f5c <USB_ActivateEndpoint+0x6b4>)
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]
 8003f4e:	e028      	b.n	8003fa2 <USB_ActivateEndpoint+0x6fa>
 8003f50:	ffff8f8f 	.word	0xffff8f8f
 8003f54:	ffffc080 	.word	0xffffc080
 8003f58:	ffffbf8f 	.word	0xffffbf8f
 8003f5c:	ffff8080 	.word	0xffff8080
 8003f60:	ffff8180 	.word	0xffff8180
 8003f64:	ffff8e8f 	.word	0xffff8e8f
 8003f68:	00000404 	.word	0x00000404
 8003f6c:	ffff80c0 	.word	0xffff80c0
 8003f70:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	2046      	movs	r0, #70	@ 0x46
 8003f84:	183b      	adds	r3, r7, r0
 8003f86:	4916      	ldr	r1, [pc, #88]	@ (8003fe0 <USB_ActivateEndpoint+0x738>)
 8003f88:	400a      	ands	r2, r1
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	18d3      	adds	r3, r2, r3
 8003f96:	183a      	adds	r2, r7, r0
 8003f98:	8812      	ldrh	r2, [r2, #0]
 8003f9a:	4912      	ldr	r1, [pc, #72]	@ (8003fe4 <USB_ActivateEndpoint+0x73c>)
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	18d3      	adds	r3, r2, r3
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	2042      	movs	r0, #66	@ 0x42
 8003fb2:	183b      	adds	r3, r7, r0
 8003fb4:	490c      	ldr	r1, [pc, #48]	@ (8003fe8 <USB_ActivateEndpoint+0x740>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	18d3      	adds	r3, r2, r3
 8003fc4:	183a      	adds	r2, r7, r0
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	4906      	ldr	r1, [pc, #24]	@ (8003fe4 <USB_ActivateEndpoint+0x73c>)
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	b292      	uxth	r2, r2
 8003fce:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003fd0:	236f      	movs	r3, #111	@ 0x6f
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	781b      	ldrb	r3, [r3, #0]
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b01c      	add	sp, #112	@ 0x70
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	ffff8fbf 	.word	0xffff8fbf
 8003fe4:	ffff8080 	.word	0xffff8080
 8003fe8:	ffffbf8f 	.word	0xffffbf8f

08003fec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08c      	sub	sp, #48	@ 0x30
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	7b1b      	ldrb	r3, [r3, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d000      	beq.n	8004000 <USB_DeactivateEndpoint+0x14>
 8003ffe:	e07e      	b.n	80040fe <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d03c      	beq.n	8004082 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	18d2      	adds	r2, r2, r3
 8004012:	210c      	movs	r1, #12
 8004014:	187b      	adds	r3, r7, r1
 8004016:	8812      	ldrh	r2, [r2, #0]
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	187b      	adds	r3, r7, r1
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	2240      	movs	r2, #64	@ 0x40
 8004020:	4013      	ands	r3, r2
 8004022:	d016      	beq.n	8004052 <USB_DeactivateEndpoint+0x66>
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	18d3      	adds	r3, r2, r3
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29a      	uxth	r2, r3
 8004032:	200a      	movs	r0, #10
 8004034:	183b      	adds	r3, r7, r0
 8004036:	49c7      	ldr	r1, [pc, #796]	@ (8004354 <USB_DeactivateEndpoint+0x368>)
 8004038:	400a      	ands	r2, r1
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	183a      	adds	r2, r7, r0
 8004048:	8812      	ldrh	r2, [r2, #0]
 800404a:	49c3      	ldr	r1, [pc, #780]	@ (8004358 <USB_DeactivateEndpoint+0x36c>)
 800404c:	430a      	orrs	r2, r1
 800404e:	b292      	uxth	r2, r2
 8004050:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	18d3      	adds	r3, r2, r3
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29a      	uxth	r2, r3
 8004060:	2008      	movs	r0, #8
 8004062:	183b      	adds	r3, r7, r0
 8004064:	49bd      	ldr	r1, [pc, #756]	@ (800435c <USB_DeactivateEndpoint+0x370>)
 8004066:	400a      	ands	r2, r1
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	18d3      	adds	r3, r2, r3
 8004074:	183a      	adds	r2, r7, r0
 8004076:	8812      	ldrh	r2, [r2, #0]
 8004078:	49b9      	ldr	r1, [pc, #740]	@ (8004360 <USB_DeactivateEndpoint+0x374>)
 800407a:	430a      	orrs	r2, r1
 800407c:	b292      	uxth	r2, r2
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	e163      	b.n	800434a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	18d2      	adds	r2, r2, r3
 800408c:	2112      	movs	r1, #18
 800408e:	187b      	adds	r3, r7, r1
 8004090:	8812      	ldrh	r2, [r2, #0]
 8004092:	801a      	strh	r2, [r3, #0]
 8004094:	187b      	adds	r3, r7, r1
 8004096:	881a      	ldrh	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	01db      	lsls	r3, r3, #7
 800409c:	4013      	ands	r3, r2
 800409e:	d016      	beq.n	80040ce <USB_DeactivateEndpoint+0xe2>
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	2010      	movs	r0, #16
 80040b0:	183b      	adds	r3, r7, r0
 80040b2:	49a8      	ldr	r1, [pc, #672]	@ (8004354 <USB_DeactivateEndpoint+0x368>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	18d3      	adds	r3, r2, r3
 80040c2:	183a      	adds	r2, r7, r0
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	49a7      	ldr	r1, [pc, #668]	@ (8004364 <USB_DeactivateEndpoint+0x378>)
 80040c8:	430a      	orrs	r2, r1
 80040ca:	b292      	uxth	r2, r2
 80040cc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	18d3      	adds	r3, r2, r3
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	200e      	movs	r0, #14
 80040de:	183b      	adds	r3, r7, r0
 80040e0:	49a1      	ldr	r1, [pc, #644]	@ (8004368 <USB_DeactivateEndpoint+0x37c>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	18d3      	adds	r3, r2, r3
 80040f0:	183a      	adds	r2, r7, r0
 80040f2:	8812      	ldrh	r2, [r2, #0]
 80040f4:	499a      	ldr	r1, [pc, #616]	@ (8004360 <USB_DeactivateEndpoint+0x374>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	b292      	uxth	r2, r2
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e125      	b.n	800434a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d000      	beq.n	8004108 <USB_DeactivateEndpoint+0x11c>
 8004106:	e090      	b.n	800422a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	18d2      	adds	r2, r2, r3
 8004112:	2120      	movs	r1, #32
 8004114:	187b      	adds	r3, r7, r1
 8004116:	8812      	ldrh	r2, [r2, #0]
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	187b      	adds	r3, r7, r1
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	2380      	movs	r3, #128	@ 0x80
 8004120:	01db      	lsls	r3, r3, #7
 8004122:	4013      	ands	r3, r2
 8004124:	d016      	beq.n	8004154 <USB_DeactivateEndpoint+0x168>
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	18d3      	adds	r3, r2, r3
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29a      	uxth	r2, r3
 8004134:	201e      	movs	r0, #30
 8004136:	183b      	adds	r3, r7, r0
 8004138:	4986      	ldr	r1, [pc, #536]	@ (8004354 <USB_DeactivateEndpoint+0x368>)
 800413a:	400a      	ands	r2, r1
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	183a      	adds	r2, r7, r0
 800414a:	8812      	ldrh	r2, [r2, #0]
 800414c:	4985      	ldr	r1, [pc, #532]	@ (8004364 <USB_DeactivateEndpoint+0x378>)
 800414e:	430a      	orrs	r2, r1
 8004150:	b292      	uxth	r2, r2
 8004152:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	18d2      	adds	r2, r2, r3
 800415e:	211c      	movs	r1, #28
 8004160:	187b      	adds	r3, r7, r1
 8004162:	8812      	ldrh	r2, [r2, #0]
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	187b      	adds	r3, r7, r1
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	2240      	movs	r2, #64	@ 0x40
 800416c:	4013      	ands	r3, r2
 800416e:	d016      	beq.n	800419e <USB_DeactivateEndpoint+0x1b2>
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29a      	uxth	r2, r3
 800417e:	201a      	movs	r0, #26
 8004180:	183b      	adds	r3, r7, r0
 8004182:	4974      	ldr	r1, [pc, #464]	@ (8004354 <USB_DeactivateEndpoint+0x368>)
 8004184:	400a      	ands	r2, r1
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	18d3      	adds	r3, r2, r3
 8004192:	183a      	adds	r2, r7, r0
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	4970      	ldr	r1, [pc, #448]	@ (8004358 <USB_DeactivateEndpoint+0x36c>)
 8004198:	430a      	orrs	r2, r1
 800419a:	b292      	uxth	r2, r2
 800419c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	18d3      	adds	r3, r2, r3
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	2018      	movs	r0, #24
 80041ae:	183b      	adds	r3, r7, r0
 80041b0:	4968      	ldr	r1, [pc, #416]	@ (8004354 <USB_DeactivateEndpoint+0x368>)
 80041b2:	400a      	ands	r2, r1
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	18d3      	adds	r3, r2, r3
 80041c0:	183a      	adds	r2, r7, r0
 80041c2:	8812      	ldrh	r2, [r2, #0]
 80041c4:	4964      	ldr	r1, [pc, #400]	@ (8004358 <USB_DeactivateEndpoint+0x36c>)
 80041c6:	430a      	orrs	r2, r1
 80041c8:	b292      	uxth	r2, r2
 80041ca:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	18d3      	adds	r3, r2, r3
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29a      	uxth	r2, r3
 80041da:	2016      	movs	r0, #22
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	4962      	ldr	r1, [pc, #392]	@ (8004368 <USB_DeactivateEndpoint+0x37c>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	18d3      	adds	r3, r2, r3
 80041ee:	183a      	adds	r2, r7, r0
 80041f0:	8812      	ldrh	r2, [r2, #0]
 80041f2:	495b      	ldr	r1, [pc, #364]	@ (8004360 <USB_DeactivateEndpoint+0x374>)
 80041f4:	430a      	orrs	r2, r1
 80041f6:	b292      	uxth	r2, r2
 80041f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	18d3      	adds	r3, r2, r3
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29a      	uxth	r2, r3
 8004208:	2014      	movs	r0, #20
 800420a:	183b      	adds	r3, r7, r0
 800420c:	4953      	ldr	r1, [pc, #332]	@ (800435c <USB_DeactivateEndpoint+0x370>)
 800420e:	400a      	ands	r2, r1
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	18d3      	adds	r3, r2, r3
 800421c:	183a      	adds	r2, r7, r0
 800421e:	8812      	ldrh	r2, [r2, #0]
 8004220:	494f      	ldr	r1, [pc, #316]	@ (8004360 <USB_DeactivateEndpoint+0x374>)
 8004222:	430a      	orrs	r2, r1
 8004224:	b292      	uxth	r2, r2
 8004226:	801a      	strh	r2, [r3, #0]
 8004228:	e08f      	b.n	800434a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	18d2      	adds	r2, r2, r3
 8004234:	212e      	movs	r1, #46	@ 0x2e
 8004236:	187b      	adds	r3, r7, r1
 8004238:	8812      	ldrh	r2, [r2, #0]
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	187b      	adds	r3, r7, r1
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	2380      	movs	r3, #128	@ 0x80
 8004242:	01db      	lsls	r3, r3, #7
 8004244:	4013      	ands	r3, r2
 8004246:	d016      	beq.n	8004276 <USB_DeactivateEndpoint+0x28a>
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	18d3      	adds	r3, r2, r3
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29a      	uxth	r2, r3
 8004256:	202c      	movs	r0, #44	@ 0x2c
 8004258:	183b      	adds	r3, r7, r0
 800425a:	493e      	ldr	r1, [pc, #248]	@ (8004354 <USB_DeactivateEndpoint+0x368>)
 800425c:	400a      	ands	r2, r1
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	18d3      	adds	r3, r2, r3
 800426a:	183a      	adds	r2, r7, r0
 800426c:	8812      	ldrh	r2, [r2, #0]
 800426e:	493d      	ldr	r1, [pc, #244]	@ (8004364 <USB_DeactivateEndpoint+0x378>)
 8004270:	430a      	orrs	r2, r1
 8004272:	b292      	uxth	r2, r2
 8004274:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	18d2      	adds	r2, r2, r3
 8004280:	212a      	movs	r1, #42	@ 0x2a
 8004282:	187b      	adds	r3, r7, r1
 8004284:	8812      	ldrh	r2, [r2, #0]
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	187b      	adds	r3, r7, r1
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	2240      	movs	r2, #64	@ 0x40
 800428e:	4013      	ands	r3, r2
 8004290:	d016      	beq.n	80042c0 <USB_DeactivateEndpoint+0x2d4>
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	18d3      	adds	r3, r2, r3
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29a      	uxth	r2, r3
 80042a0:	2028      	movs	r0, #40	@ 0x28
 80042a2:	183b      	adds	r3, r7, r0
 80042a4:	492b      	ldr	r1, [pc, #172]	@ (8004354 <USB_DeactivateEndpoint+0x368>)
 80042a6:	400a      	ands	r2, r1
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	18d3      	adds	r3, r2, r3
 80042b4:	183a      	adds	r2, r7, r0
 80042b6:	8812      	ldrh	r2, [r2, #0]
 80042b8:	4927      	ldr	r1, [pc, #156]	@ (8004358 <USB_DeactivateEndpoint+0x36c>)
 80042ba:	430a      	orrs	r2, r1
 80042bc:	b292      	uxth	r2, r2
 80042be:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	18d3      	adds	r3, r2, r3
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	2026      	movs	r0, #38	@ 0x26
 80042d0:	183b      	adds	r3, r7, r0
 80042d2:	4920      	ldr	r1, [pc, #128]	@ (8004354 <USB_DeactivateEndpoint+0x368>)
 80042d4:	400a      	ands	r2, r1
 80042d6:	801a      	strh	r2, [r3, #0]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	18d3      	adds	r3, r2, r3
 80042e2:	183a      	adds	r2, r7, r0
 80042e4:	8812      	ldrh	r2, [r2, #0]
 80042e6:	491f      	ldr	r1, [pc, #124]	@ (8004364 <USB_DeactivateEndpoint+0x378>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	b292      	uxth	r2, r2
 80042ec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	18d3      	adds	r3, r2, r3
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	2024      	movs	r0, #36	@ 0x24
 80042fe:	183b      	adds	r3, r7, r0
 8004300:	4916      	ldr	r1, [pc, #88]	@ (800435c <USB_DeactivateEndpoint+0x370>)
 8004302:	400a      	ands	r2, r1
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	18d3      	adds	r3, r2, r3
 8004310:	183a      	adds	r2, r7, r0
 8004312:	8812      	ldrh	r2, [r2, #0]
 8004314:	4912      	ldr	r1, [pc, #72]	@ (8004360 <USB_DeactivateEndpoint+0x374>)
 8004316:	430a      	orrs	r2, r1
 8004318:	b292      	uxth	r2, r2
 800431a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	18d3      	adds	r3, r2, r3
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29a      	uxth	r2, r3
 800432a:	2022      	movs	r0, #34	@ 0x22
 800432c:	183b      	adds	r3, r7, r0
 800432e:	490e      	ldr	r1, [pc, #56]	@ (8004368 <USB_DeactivateEndpoint+0x37c>)
 8004330:	400a      	ands	r2, r1
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	18d3      	adds	r3, r2, r3
 800433e:	183a      	adds	r2, r7, r0
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	4907      	ldr	r1, [pc, #28]	@ (8004360 <USB_DeactivateEndpoint+0x374>)
 8004344:	430a      	orrs	r2, r1
 8004346:	b292      	uxth	r2, r2
 8004348:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b00c      	add	sp, #48	@ 0x30
 8004352:	bd80      	pop	{r7, pc}
 8004354:	ffff8f8f 	.word	0xffff8f8f
 8004358:	ffff80c0 	.word	0xffff80c0
 800435c:	ffff8fbf 	.word	0xffff8fbf
 8004360:	ffff8080 	.word	0xffff8080
 8004364:	ffffc080 	.word	0xffffc080
 8004368:	ffffbf8f 	.word	0xffffbf8f

0800436c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b0c3      	sub	sp, #268	@ 0x10c
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <USB_EPStartXfer+0x16>
 800437e:	f000 fd2d 	bl	8004ddc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	429a      	cmp	r2, r3
 800438c:	d905      	bls.n	800439a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	1d7a      	adds	r2, r7, #5
 8004394:	32ff      	adds	r2, #255	@ 0xff
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e004      	b.n	80043a4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	1d7a      	adds	r2, r7, #5
 80043a0:	32ff      	adds	r2, #255	@ 0xff
 80043a2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	7b1b      	ldrb	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d125      	bne.n	80043f8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6959      	ldr	r1, [r3, #20]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	88da      	ldrh	r2, [r3, #6]
 80043b4:	1d7b      	adds	r3, r7, #5
 80043b6:	33ff      	adds	r3, #255	@ 0xff
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f001 fa47 	bl	8005850 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2250      	movs	r2, #80	@ 0x50
 80043ca:	5a9b      	ldrh	r3, [r3, r2]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	001a      	movs	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	00da      	lsls	r2, r3, #3
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	18d3      	adds	r3, r2, r3
 80043e0:	4ad7      	ldr	r2, [pc, #860]	@ (8004740 <USB_EPStartXfer+0x3d4>)
 80043e2:	4694      	mov	ip, r2
 80043e4:	4463      	add	r3, ip
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	1d7b      	adds	r3, r7, #5
 80043ea:	33ff      	adds	r3, #255	@ 0xff
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	f000 fccd 	bl	8004d92 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	78db      	ldrb	r3, [r3, #3]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d000      	beq.n	8004402 <USB_EPStartXfer+0x96>
 8004400:	e362      	b.n	8004ac8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6a1a      	ldr	r2, [r3, #32]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d800      	bhi.n	8004410 <USB_EPStartXfer+0xa4>
 800440e:	e309      	b.n	8004a24 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	18d3      	adds	r3, r2, r3
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29a      	uxth	r2, r3
 800441e:	2056      	movs	r0, #86	@ 0x56
 8004420:	183b      	adds	r3, r7, r0
 8004422:	49c8      	ldr	r1, [pc, #800]	@ (8004744 <USB_EPStartXfer+0x3d8>)
 8004424:	400a      	ands	r2, r1
 8004426:	801a      	strh	r2, [r3, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	18d3      	adds	r3, r2, r3
 8004432:	183a      	adds	r2, r7, r0
 8004434:	8812      	ldrh	r2, [r2, #0]
 8004436:	49c4      	ldr	r1, [pc, #784]	@ (8004748 <USB_EPStartXfer+0x3dc>)
 8004438:	430a      	orrs	r2, r1
 800443a:	b292      	uxth	r2, r2
 800443c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	1d7b      	adds	r3, r7, #5
 8004444:	33ff      	adds	r3, #255	@ 0xff
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1ad2      	subs	r2, r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	18d3      	adds	r3, r2, r3
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	001a      	movs	r2, r3
 800445e:	2340      	movs	r3, #64	@ 0x40
 8004460:	4013      	ands	r3, r2
 8004462:	d100      	bne.n	8004466 <USB_EPStartXfer+0xfa>
 8004464:	e176      	b.n	8004754 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	633b      	str	r3, [r7, #48]	@ 0x30
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d000      	beq.n	8004474 <USB_EPStartXfer+0x108>
 8004472:	e074      	b.n	800455e <USB_EPStartXfer+0x1f2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2250      	movs	r2, #80	@ 0x50
 800447c:	5a9b      	ldrh	r3, [r3, r2]
 800447e:	b29b      	uxth	r3, r3
 8004480:	001a      	movs	r2, r3
 8004482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004484:	189b      	adds	r3, r3, r2
 8004486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	00da      	lsls	r2, r3, #3
 800448e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004490:	18d3      	adds	r3, r2, r3
 8004492:	4aae      	ldr	r2, [pc, #696]	@ (800474c <USB_EPStartXfer+0x3e0>)
 8004494:	4694      	mov	ip, r2
 8004496:	4463      	add	r3, ip
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	059b      	lsls	r3, r3, #22
 80044a2:	0d9b      	lsrs	r3, r3, #22
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	1d7b      	adds	r3, r7, #5
 80044ac:	33ff      	adds	r3, #255	@ 0xff
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80044b2:	d924      	bls.n	80044fe <USB_EPStartXfer+0x192>
 80044b4:	1d7b      	adds	r3, r7, #5
 80044b6:	33ff      	adds	r3, #255	@ 0xff
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	1c7a      	adds	r2, r7, #1
 80044be:	32ff      	adds	r2, #255	@ 0xff
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	1d7b      	adds	r3, r7, #5
 80044c4:	33ff      	adds	r3, #255	@ 0xff
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	221f      	movs	r2, #31
 80044ca:	4013      	ands	r3, r2
 80044cc:	d106      	bne.n	80044dc <USB_EPStartXfer+0x170>
 80044ce:	1c7b      	adds	r3, r7, #1
 80044d0:	33ff      	adds	r3, #255	@ 0xff
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	1c7a      	adds	r2, r7, #1
 80044d8:	32ff      	adds	r2, #255	@ 0xff
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	1c7b      	adds	r3, r7, #1
 80044e4:	33ff      	adds	r3, #255	@ 0xff
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	029b      	lsls	r3, r3, #10
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	4313      	orrs	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4a97      	ldr	r2, [pc, #604]	@ (8004750 <USB_EPStartXfer+0x3e4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	e04a      	b.n	8004594 <USB_EPStartXfer+0x228>
 80044fe:	1d7b      	adds	r3, r7, #5
 8004500:	33ff      	adds	r3, #255	@ 0xff
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d108      	bne.n	800451a <USB_EPStartXfer+0x1ae>
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	4a90      	ldr	r2, [pc, #576]	@ (8004750 <USB_EPStartXfer+0x3e4>)
 8004510:	4313      	orrs	r3, r2
 8004512:	b29a      	uxth	r2, r3
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	e03c      	b.n	8004594 <USB_EPStartXfer+0x228>
 800451a:	1d7b      	adds	r3, r7, #5
 800451c:	33ff      	adds	r3, #255	@ 0xff
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	1c7a      	adds	r2, r7, #1
 8004524:	32ff      	adds	r2, #255	@ 0xff
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	1d7b      	adds	r3, r7, #5
 800452a:	33ff      	adds	r3, #255	@ 0xff
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2201      	movs	r2, #1
 8004530:	4013      	ands	r3, r2
 8004532:	d006      	beq.n	8004542 <USB_EPStartXfer+0x1d6>
 8004534:	1c7b      	adds	r3, r7, #1
 8004536:	33ff      	adds	r3, #255	@ 0xff
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	1c7a      	adds	r2, r7, #1
 800453e:	32ff      	adds	r2, #255	@ 0xff
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29a      	uxth	r2, r3
 8004548:	1c7b      	adds	r3, r7, #1
 800454a:	33ff      	adds	r3, #255	@ 0xff
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	029b      	lsls	r3, r3, #10
 8004552:	b29b      	uxth	r3, r3
 8004554:	4313      	orrs	r3, r2
 8004556:	b29a      	uxth	r2, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e01a      	b.n	8004594 <USB_EPStartXfer+0x228>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	785b      	ldrb	r3, [r3, #1]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d116      	bne.n	8004594 <USB_EPStartXfer+0x228>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2250      	movs	r2, #80	@ 0x50
 800456a:	5a9b      	ldrh	r3, [r3, r2]
 800456c:	b29b      	uxth	r3, r3
 800456e:	001a      	movs	r2, r3
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	189b      	adds	r3, r3, r2
 8004574:	633b      	str	r3, [r7, #48]	@ 0x30
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	00da      	lsls	r2, r3, #3
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	18d3      	adds	r3, r2, r3
 8004580:	4a72      	ldr	r2, [pc, #456]	@ (800474c <USB_EPStartXfer+0x3e0>)
 8004582:	4694      	mov	ip, r2
 8004584:	4463      	add	r3, ip
 8004586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004588:	1d7b      	adds	r3, r7, #5
 800458a:	33ff      	adds	r3, #255	@ 0xff
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	b29a      	uxth	r2, r3
 8004590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004592:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004594:	2076      	movs	r0, #118	@ 0x76
 8004596:	183b      	adds	r3, r7, r0
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	8952      	ldrh	r2, [r2, #10]
 800459c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6959      	ldr	r1, [r3, #20]
 80045a2:	1d7b      	adds	r3, r7, #5
 80045a4:	33ff      	adds	r3, #255	@ 0xff
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	b29c      	uxth	r4, r3
 80045aa:	183b      	adds	r3, r7, r0
 80045ac:	881a      	ldrh	r2, [r3, #0]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	0023      	movs	r3, r4
 80045b2:	f001 f94d 	bl	8005850 <USB_WritePMA>
            ep->xfer_buff += len;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	1d7b      	adds	r3, r7, #5
 80045bc:	33ff      	adds	r3, #255	@ 0xff
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	18d2      	adds	r2, r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6a1a      	ldr	r2, [r3, #32]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d908      	bls.n	80045e4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6a1a      	ldr	r2, [r3, #32]
 80045d6:	1d7b      	adds	r3, r7, #5
 80045d8:	33ff      	adds	r3, #255	@ 0xff
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	1ad2      	subs	r2, r2, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	621a      	str	r2, [r3, #32]
 80045e2:	e007      	b.n	80045f4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	1d7a      	adds	r2, r7, #5
 80045ea:	32ff      	adds	r2, #255	@ 0xff
 80045ec:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d000      	beq.n	80045fe <USB_EPStartXfer+0x292>
 80045fc:	e070      	b.n	80046e0 <USB_EPStartXfer+0x374>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2250      	movs	r2, #80	@ 0x50
 8004606:	5a9b      	ldrh	r3, [r3, r2]
 8004608:	b29b      	uxth	r3, r3
 800460a:	001a      	movs	r2, r3
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	189b      	adds	r3, r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	00da      	lsls	r2, r3, #3
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	18d3      	adds	r3, r2, r3
 800461c:	4a48      	ldr	r2, [pc, #288]	@ (8004740 <USB_EPStartXfer+0x3d4>)
 800461e:	4694      	mov	ip, r2
 8004620:	4463      	add	r3, ip
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	059b      	lsls	r3, r3, #22
 800462c:	0d9b      	lsrs	r3, r3, #22
 800462e:	b29a      	uxth	r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	801a      	strh	r2, [r3, #0]
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	33ff      	adds	r3, #255	@ 0xff
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b3e      	cmp	r3, #62	@ 0x3e
 800463c:	d922      	bls.n	8004684 <USB_EPStartXfer+0x318>
 800463e:	1d7b      	adds	r3, r7, #5
 8004640:	33ff      	adds	r3, #255	@ 0xff
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	21fc      	movs	r1, #252	@ 0xfc
 8004648:	187a      	adds	r2, r7, r1
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	1d7b      	adds	r3, r7, #5
 800464e:	33ff      	adds	r3, #255	@ 0xff
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	221f      	movs	r2, #31
 8004654:	4013      	ands	r3, r2
 8004656:	d104      	bne.n	8004662 <USB_EPStartXfer+0x2f6>
 8004658:	187b      	adds	r3, r7, r1
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	187a      	adds	r2, r7, r1
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29a      	uxth	r2, r3
 8004668:	23fc      	movs	r3, #252	@ 0xfc
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	029b      	lsls	r3, r3, #10
 8004672:	b29b      	uxth	r3, r3
 8004674:	4313      	orrs	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	4a35      	ldr	r2, [pc, #212]	@ (8004750 <USB_EPStartXfer+0x3e4>)
 800467a:	4313      	orrs	r3, r2
 800467c:	b29a      	uxth	r2, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	801a      	strh	r2, [r3, #0]
 8004682:	e04a      	b.n	800471a <USB_EPStartXfer+0x3ae>
 8004684:	1d7b      	adds	r3, r7, #5
 8004686:	33ff      	adds	r3, #255	@ 0xff
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <USB_EPStartXfer+0x334>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	4a2e      	ldr	r2, [pc, #184]	@ (8004750 <USB_EPStartXfer+0x3e4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	b29a      	uxth	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e03c      	b.n	800471a <USB_EPStartXfer+0x3ae>
 80046a0:	1d7b      	adds	r3, r7, #5
 80046a2:	33ff      	adds	r3, #255	@ 0xff
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	21fc      	movs	r1, #252	@ 0xfc
 80046aa:	187a      	adds	r2, r7, r1
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	1d7b      	adds	r3, r7, #5
 80046b0:	33ff      	adds	r3, #255	@ 0xff
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2201      	movs	r2, #1
 80046b6:	4013      	ands	r3, r2
 80046b8:	d004      	beq.n	80046c4 <USB_EPStartXfer+0x358>
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	187a      	adds	r2, r7, r1
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	23fc      	movs	r3, #252	@ 0xfc
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	029b      	lsls	r3, r3, #10
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4313      	orrs	r3, r2
 80046d8:	b29a      	uxth	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	801a      	strh	r2, [r3, #0]
 80046de:	e01c      	b.n	800471a <USB_EPStartXfer+0x3ae>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d118      	bne.n	800471a <USB_EPStartXfer+0x3ae>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	623b      	str	r3, [r7, #32]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2250      	movs	r2, #80	@ 0x50
 80046f0:	5a9b      	ldrh	r3, [r3, r2]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	001a      	movs	r2, r3
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	623b      	str	r3, [r7, #32]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	00da      	lsls	r2, r3, #3
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	18d3      	adds	r3, r2, r3
 8004706:	4a0e      	ldr	r2, [pc, #56]	@ (8004740 <USB_EPStartXfer+0x3d4>)
 8004708:	4694      	mov	ip, r2
 800470a:	4463      	add	r3, ip
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	1d7b      	adds	r3, r7, #5
 8004710:	33ff      	adds	r3, #255	@ 0xff
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b29a      	uxth	r2, r3
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800471a:	2076      	movs	r0, #118	@ 0x76
 800471c:	183b      	adds	r3, r7, r0
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	8912      	ldrh	r2, [r2, #8]
 8004722:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6959      	ldr	r1, [r3, #20]
 8004728:	1d7b      	adds	r3, r7, #5
 800472a:	33ff      	adds	r3, #255	@ 0xff
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	b29c      	uxth	r4, r3
 8004730:	183b      	adds	r3, r7, r0
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	0023      	movs	r3, r4
 8004738:	f001 f88a 	bl	8005850 <USB_WritePMA>
 800473c:	e329      	b.n	8004d92 <USB_EPStartXfer+0xa26>
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	00000402 	.word	0x00000402
 8004744:	ffff8f8f 	.word	0xffff8f8f
 8004748:	ffff8180 	.word	0xffff8180
 800474c:	00000406 	.word	0x00000406
 8004750:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d000      	beq.n	800475e <USB_EPStartXfer+0x3f2>
 800475c:	e070      	b.n	8004840 <USB_EPStartXfer+0x4d4>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2250      	movs	r2, #80	@ 0x50
 8004766:	5a9b      	ldrh	r3, [r3, r2]
 8004768:	b29b      	uxth	r3, r3
 800476a:	001a      	movs	r2, r3
 800476c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800476e:	189b      	adds	r3, r3, r2
 8004770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	00da      	lsls	r2, r3, #3
 8004778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800477a:	18d3      	adds	r3, r2, r3
 800477c:	4acd      	ldr	r2, [pc, #820]	@ (8004ab4 <USB_EPStartXfer+0x748>)
 800477e:	4694      	mov	ip, r2
 8004780:	4463      	add	r3, ip
 8004782:	647b      	str	r3, [r7, #68]	@ 0x44
 8004784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	059b      	lsls	r3, r3, #22
 800478c:	0d9b      	lsrs	r3, r3, #22
 800478e:	b29a      	uxth	r2, r3
 8004790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004792:	801a      	strh	r2, [r3, #0]
 8004794:	1d7b      	adds	r3, r7, #5
 8004796:	33ff      	adds	r3, #255	@ 0xff
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b3e      	cmp	r3, #62	@ 0x3e
 800479c:	d922      	bls.n	80047e4 <USB_EPStartXfer+0x478>
 800479e:	1d7b      	adds	r3, r7, #5
 80047a0:	33ff      	adds	r3, #255	@ 0xff
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	21f8      	movs	r1, #248	@ 0xf8
 80047a8:	187a      	adds	r2, r7, r1
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	1d7b      	adds	r3, r7, #5
 80047ae:	33ff      	adds	r3, #255	@ 0xff
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	221f      	movs	r2, #31
 80047b4:	4013      	ands	r3, r2
 80047b6:	d104      	bne.n	80047c2 <USB_EPStartXfer+0x456>
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3b01      	subs	r3, #1
 80047be:	187a      	adds	r2, r7, r1
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	23f8      	movs	r3, #248	@ 0xf8
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	029b      	lsls	r3, r3, #10
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4ab7      	ldr	r2, [pc, #732]	@ (8004ab8 <USB_EPStartXfer+0x74c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	b29a      	uxth	r2, r3
 80047de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	e04a      	b.n	800487a <USB_EPStartXfer+0x50e>
 80047e4:	1d7b      	adds	r3, r7, #5
 80047e6:	33ff      	adds	r3, #255	@ 0xff
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d108      	bne.n	8004800 <USB_EPStartXfer+0x494>
 80047ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	4ab0      	ldr	r2, [pc, #704]	@ (8004ab8 <USB_EPStartXfer+0x74c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	e03c      	b.n	800487a <USB_EPStartXfer+0x50e>
 8004800:	1d7b      	adds	r3, r7, #5
 8004802:	33ff      	adds	r3, #255	@ 0xff
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	21f8      	movs	r1, #248	@ 0xf8
 800480a:	187a      	adds	r2, r7, r1
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	1d7b      	adds	r3, r7, #5
 8004810:	33ff      	adds	r3, #255	@ 0xff
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2201      	movs	r2, #1
 8004816:	4013      	ands	r3, r2
 8004818:	d004      	beq.n	8004824 <USB_EPStartXfer+0x4b8>
 800481a:	187b      	adds	r3, r7, r1
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3301      	adds	r3, #1
 8004820:	187a      	adds	r2, r7, r1
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29a      	uxth	r2, r3
 800482a:	23f8      	movs	r3, #248	@ 0xf8
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	029b      	lsls	r3, r3, #10
 8004834:	b29b      	uxth	r3, r3
 8004836:	4313      	orrs	r3, r2
 8004838:	b29a      	uxth	r2, r3
 800483a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	e01c      	b.n	800487a <USB_EPStartXfer+0x50e>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d118      	bne.n	800487a <USB_EPStartXfer+0x50e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	653b      	str	r3, [r7, #80]	@ 0x50
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2250      	movs	r2, #80	@ 0x50
 8004850:	5a9b      	ldrh	r3, [r3, r2]
 8004852:	b29b      	uxth	r3, r3
 8004854:	001a      	movs	r2, r3
 8004856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004858:	189b      	adds	r3, r3, r2
 800485a:	653b      	str	r3, [r7, #80]	@ 0x50
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	00da      	lsls	r2, r3, #3
 8004862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004864:	18d3      	adds	r3, r2, r3
 8004866:	4a93      	ldr	r2, [pc, #588]	@ (8004ab4 <USB_EPStartXfer+0x748>)
 8004868:	4694      	mov	ip, r2
 800486a:	4463      	add	r3, ip
 800486c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800486e:	1d7b      	adds	r3, r7, #5
 8004870:	33ff      	adds	r3, #255	@ 0xff
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	b29a      	uxth	r2, r3
 8004876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004878:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800487a:	2076      	movs	r0, #118	@ 0x76
 800487c:	183b      	adds	r3, r7, r0
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	8912      	ldrh	r2, [r2, #8]
 8004882:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6959      	ldr	r1, [r3, #20]
 8004888:	1d7b      	adds	r3, r7, #5
 800488a:	33ff      	adds	r3, #255	@ 0xff
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	b29c      	uxth	r4, r3
 8004890:	183b      	adds	r3, r7, r0
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	0023      	movs	r3, r4
 8004898:	f000 ffda 	bl	8005850 <USB_WritePMA>
            ep->xfer_buff += len;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	1d7b      	adds	r3, r7, #5
 80048a2:	33ff      	adds	r3, #255	@ 0xff
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	18d2      	adds	r2, r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d908      	bls.n	80048ca <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	1d7b      	adds	r3, r7, #5
 80048be:	33ff      	adds	r3, #255	@ 0xff
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	621a      	str	r2, [r3, #32]
 80048c8:	e007      	b.n	80048da <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	1d7a      	adds	r2, r7, #5
 80048d0:	32ff      	adds	r2, #255	@ 0xff
 80048d2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d000      	beq.n	80048e8 <USB_EPStartXfer+0x57c>
 80048e6:	e070      	b.n	80049ca <USB_EPStartXfer+0x65e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2250      	movs	r2, #80	@ 0x50
 80048f0:	5a9b      	ldrh	r3, [r3, r2]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	001a      	movs	r2, r3
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	00da      	lsls	r2, r3, #3
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	18d3      	adds	r3, r2, r3
 8004906:	4a6d      	ldr	r2, [pc, #436]	@ (8004abc <USB_EPStartXfer+0x750>)
 8004908:	4694      	mov	ip, r2
 800490a:	4463      	add	r3, ip
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	059b      	lsls	r3, r3, #22
 8004916:	0d9b      	lsrs	r3, r3, #22
 8004918:	b29a      	uxth	r2, r3
 800491a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491c:	801a      	strh	r2, [r3, #0]
 800491e:	1d7b      	adds	r3, r7, #5
 8004920:	33ff      	adds	r3, #255	@ 0xff
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b3e      	cmp	r3, #62	@ 0x3e
 8004926:	d922      	bls.n	800496e <USB_EPStartXfer+0x602>
 8004928:	1d7b      	adds	r3, r7, #5
 800492a:	33ff      	adds	r3, #255	@ 0xff
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	21f4      	movs	r1, #244	@ 0xf4
 8004932:	187a      	adds	r2, r7, r1
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	1d7b      	adds	r3, r7, #5
 8004938:	33ff      	adds	r3, #255	@ 0xff
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	221f      	movs	r2, #31
 800493e:	4013      	ands	r3, r2
 8004940:	d104      	bne.n	800494c <USB_EPStartXfer+0x5e0>
 8004942:	187b      	adds	r3, r7, r1
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	187a      	adds	r2, r7, r1
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29a      	uxth	r2, r3
 8004952:	23f4      	movs	r3, #244	@ 0xf4
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	029b      	lsls	r3, r3, #10
 800495c:	b29b      	uxth	r3, r3
 800495e:	4313      	orrs	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	4a55      	ldr	r2, [pc, #340]	@ (8004ab8 <USB_EPStartXfer+0x74c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	b29a      	uxth	r2, r3
 8004968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	e048      	b.n	8004a00 <USB_EPStartXfer+0x694>
 800496e:	1d7b      	adds	r3, r7, #5
 8004970:	33ff      	adds	r3, #255	@ 0xff
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d108      	bne.n	800498a <USB_EPStartXfer+0x61e>
 8004978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ab8 <USB_EPStartXfer+0x74c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	b29a      	uxth	r2, r3
 8004984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e03a      	b.n	8004a00 <USB_EPStartXfer+0x694>
 800498a:	1d7b      	adds	r3, r7, #5
 800498c:	33ff      	adds	r3, #255	@ 0xff
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	21f4      	movs	r1, #244	@ 0xf4
 8004994:	187a      	adds	r2, r7, r1
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	1d7b      	adds	r3, r7, #5
 800499a:	33ff      	adds	r3, #255	@ 0xff
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	4013      	ands	r3, r2
 80049a2:	d004      	beq.n	80049ae <USB_EPStartXfer+0x642>
 80049a4:	187b      	adds	r3, r7, r1
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	187a      	adds	r2, r7, r1
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	23f4      	movs	r3, #244	@ 0xf4
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	029b      	lsls	r3, r3, #10
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e01a      	b.n	8004a00 <USB_EPStartXfer+0x694>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d116      	bne.n	8004a00 <USB_EPStartXfer+0x694>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2250      	movs	r2, #80	@ 0x50
 80049d6:	5a9b      	ldrh	r3, [r3, r2]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	001a      	movs	r2, r3
 80049dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049de:	189b      	adds	r3, r3, r2
 80049e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	00da      	lsls	r2, r3, #3
 80049e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ea:	18d3      	adds	r3, r2, r3
 80049ec:	4a33      	ldr	r2, [pc, #204]	@ (8004abc <USB_EPStartXfer+0x750>)
 80049ee:	4694      	mov	ip, r2
 80049f0:	4463      	add	r3, ip
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f4:	1d7b      	adds	r3, r7, #5
 80049f6:	33ff      	adds	r3, #255	@ 0xff
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a00:	2076      	movs	r0, #118	@ 0x76
 8004a02:	183b      	adds	r3, r7, r0
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	8952      	ldrh	r2, [r2, #10]
 8004a08:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6959      	ldr	r1, [r3, #20]
 8004a0e:	1d7b      	adds	r3, r7, #5
 8004a10:	33ff      	adds	r3, #255	@ 0xff
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	b29c      	uxth	r4, r3
 8004a16:	183b      	adds	r3, r7, r0
 8004a18:	881a      	ldrh	r2, [r3, #0]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	0023      	movs	r3, r4
 8004a1e:	f000 ff17 	bl	8005850 <USB_WritePMA>
 8004a22:	e1b6      	b.n	8004d92 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	1d7a      	adds	r2, r7, #5
 8004a2a:	32ff      	adds	r2, #255	@ 0xff
 8004a2c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	18d3      	adds	r3, r2, r3
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	2062      	movs	r0, #98	@ 0x62
 8004a3e:	183b      	adds	r3, r7, r0
 8004a40:	491f      	ldr	r1, [pc, #124]	@ (8004ac0 <USB_EPStartXfer+0x754>)
 8004a42:	400a      	ands	r2, r1
 8004a44:	801a      	strh	r2, [r3, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	18d3      	adds	r3, r2, r3
 8004a50:	183a      	adds	r2, r7, r0
 8004a52:	8812      	ldrh	r2, [r2, #0]
 8004a54:	491b      	ldr	r1, [pc, #108]	@ (8004ac4 <USB_EPStartXfer+0x758>)
 8004a56:	430a      	orrs	r2, r1
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2250      	movs	r2, #80	@ 0x50
 8004a64:	5a9b      	ldrh	r3, [r3, r2]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	001a      	movs	r2, r3
 8004a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	00da      	lsls	r2, r3, #3
 8004a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a78:	18d3      	adds	r3, r2, r3
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab4 <USB_EPStartXfer+0x748>)
 8004a7c:	4694      	mov	ip, r2
 8004a7e:	4463      	add	r3, ip
 8004a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a82:	1d7b      	adds	r3, r7, #5
 8004a84:	33ff      	adds	r3, #255	@ 0xff
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a8e:	2076      	movs	r0, #118	@ 0x76
 8004a90:	183b      	adds	r3, r7, r0
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	8912      	ldrh	r2, [r2, #8]
 8004a96:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6959      	ldr	r1, [r3, #20]
 8004a9c:	1d7b      	adds	r3, r7, #5
 8004a9e:	33ff      	adds	r3, #255	@ 0xff
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	b29c      	uxth	r4, r3
 8004aa4:	183b      	adds	r3, r7, r0
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	0023      	movs	r3, r4
 8004aac:	f000 fed0 	bl	8005850 <USB_WritePMA>
 8004ab0:	e16f      	b.n	8004d92 <USB_EPStartXfer+0xa26>
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	00000402 	.word	0x00000402
 8004ab8:	ffff8000 	.word	0xffff8000
 8004abc:	00000406 	.word	0x00000406
 8004ac0:	ffff8e8f 	.word	0xffff8e8f
 8004ac4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	1d7b      	adds	r3, r7, #5
 8004ace:	33ff      	adds	r3, #255	@ 0xff
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	18d3      	adds	r3, r2, r3
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	2340      	movs	r3, #64	@ 0x40
 8004aea:	4013      	ands	r3, r2
 8004aec:	d100      	bne.n	8004af0 <USB_EPStartXfer+0x784>
 8004aee:	e0a4      	b.n	8004c3a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d000      	beq.n	8004afe <USB_EPStartXfer+0x792>
 8004afc:	e070      	b.n	8004be0 <USB_EPStartXfer+0x874>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2250      	movs	r2, #80	@ 0x50
 8004b06:	5a9b      	ldrh	r3, [r3, r2]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	00da      	lsls	r2, r3, #3
 8004b18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b1a:	18d3      	adds	r3, r2, r3
 8004b1c:	4abc      	ldr	r2, [pc, #752]	@ (8004e10 <USB_EPStartXfer+0xaa4>)
 8004b1e:	4694      	mov	ip, r2
 8004b20:	4463      	add	r3, ip
 8004b22:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	059b      	lsls	r3, r3, #22
 8004b2c:	0d9b      	lsrs	r3, r3, #22
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	1d7b      	adds	r3, r7, #5
 8004b36:	33ff      	adds	r3, #255	@ 0xff
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b3c:	d922      	bls.n	8004b84 <USB_EPStartXfer+0x818>
 8004b3e:	1d7b      	adds	r3, r7, #5
 8004b40:	33ff      	adds	r3, #255	@ 0xff
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	21f0      	movs	r1, #240	@ 0xf0
 8004b48:	187a      	adds	r2, r7, r1
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	1d7b      	adds	r3, r7, #5
 8004b4e:	33ff      	adds	r3, #255	@ 0xff
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	221f      	movs	r2, #31
 8004b54:	4013      	ands	r3, r2
 8004b56:	d104      	bne.n	8004b62 <USB_EPStartXfer+0x7f6>
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	187a      	adds	r2, r7, r1
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	23f0      	movs	r3, #240	@ 0xf0
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4313      	orrs	r3, r2
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4aa6      	ldr	r2, [pc, #664]	@ (8004e14 <USB_EPStartXfer+0xaa8>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	e048      	b.n	8004c16 <USB_EPStartXfer+0x8aa>
 8004b84:	1d7b      	adds	r3, r7, #5
 8004b86:	33ff      	adds	r3, #255	@ 0xff
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <USB_EPStartXfer+0x834>
 8004b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	4a9f      	ldr	r2, [pc, #636]	@ (8004e14 <USB_EPStartXfer+0xaa8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	e03a      	b.n	8004c16 <USB_EPStartXfer+0x8aa>
 8004ba0:	1d7b      	adds	r3, r7, #5
 8004ba2:	33ff      	adds	r3, #255	@ 0xff
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	21f0      	movs	r1, #240	@ 0xf0
 8004baa:	187a      	adds	r2, r7, r1
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	1d7b      	adds	r3, r7, #5
 8004bb0:	33ff      	adds	r3, #255	@ 0xff
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <USB_EPStartXfer+0x858>
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	187a      	adds	r2, r7, r1
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	23f0      	movs	r3, #240	@ 0xf0
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	029b      	lsls	r3, r3, #10
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	e01a      	b.n	8004c16 <USB_EPStartXfer+0x8aa>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d116      	bne.n	8004c16 <USB_EPStartXfer+0x8aa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2250      	movs	r2, #80	@ 0x50
 8004bec:	5a9b      	ldrh	r3, [r3, r2]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	001a      	movs	r2, r3
 8004bf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	00da      	lsls	r2, r3, #3
 8004bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c00:	18d3      	adds	r3, r2, r3
 8004c02:	4a83      	ldr	r2, [pc, #524]	@ (8004e10 <USB_EPStartXfer+0xaa4>)
 8004c04:	4694      	mov	ip, r2
 8004c06:	4463      	add	r3, ip
 8004c08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c0a:	1d7b      	adds	r3, r7, #5
 8004c0c:	33ff      	adds	r3, #255	@ 0xff
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c16:	2076      	movs	r0, #118	@ 0x76
 8004c18:	183b      	adds	r3, r7, r0
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	8952      	ldrh	r2, [r2, #10]
 8004c1e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6959      	ldr	r1, [r3, #20]
 8004c24:	1d7b      	adds	r3, r7, #5
 8004c26:	33ff      	adds	r3, #255	@ 0xff
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	b29c      	uxth	r4, r3
 8004c2c:	183b      	adds	r3, r7, r0
 8004c2e:	881a      	ldrh	r2, [r3, #0]
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	0023      	movs	r3, r4
 8004c34:	f000 fe0c 	bl	8005850 <USB_WritePMA>
 8004c38:	e0ab      	b.n	8004d92 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d000      	beq.n	8004c44 <USB_EPStartXfer+0x8d8>
 8004c42:	e070      	b.n	8004d26 <USB_EPStartXfer+0x9ba>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2250      	movs	r2, #80	@ 0x50
 8004c4c:	5a9b      	ldrh	r3, [r3, r2]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	001a      	movs	r2, r3
 8004c52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	00da      	lsls	r2, r3, #3
 8004c5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c60:	18d3      	adds	r3, r2, r3
 8004c62:	4a6d      	ldr	r2, [pc, #436]	@ (8004e18 <USB_EPStartXfer+0xaac>)
 8004c64:	4694      	mov	ip, r2
 8004c66:	4463      	add	r3, ip
 8004c68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	059b      	lsls	r3, r3, #22
 8004c72:	0d9b      	lsrs	r3, r3, #22
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	1d7b      	adds	r3, r7, #5
 8004c7c:	33ff      	adds	r3, #255	@ 0xff
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c82:	d922      	bls.n	8004cca <USB_EPStartXfer+0x95e>
 8004c84:	1d7b      	adds	r3, r7, #5
 8004c86:	33ff      	adds	r3, #255	@ 0xff
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	21ec      	movs	r1, #236	@ 0xec
 8004c8e:	187a      	adds	r2, r7, r1
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	1d7b      	adds	r3, r7, #5
 8004c94:	33ff      	adds	r3, #255	@ 0xff
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	221f      	movs	r2, #31
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d104      	bne.n	8004ca8 <USB_EPStartXfer+0x93c>
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	187a      	adds	r2, r7, r1
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	23ec      	movs	r3, #236	@ 0xec
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	4a55      	ldr	r2, [pc, #340]	@ (8004e14 <USB_EPStartXfer+0xaa8>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cc6:	801a      	strh	r2, [r3, #0]
 8004cc8:	e052      	b.n	8004d70 <USB_EPStartXfer+0xa04>
 8004cca:	1d7b      	adds	r3, r7, #5
 8004ccc:	33ff      	adds	r3, #255	@ 0xff
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <USB_EPStartXfer+0x97a>
 8004cd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	4a4e      	ldr	r2, [pc, #312]	@ (8004e14 <USB_EPStartXfer+0xaa8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	e044      	b.n	8004d70 <USB_EPStartXfer+0xa04>
 8004ce6:	1d7b      	adds	r3, r7, #5
 8004ce8:	33ff      	adds	r3, #255	@ 0xff
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	21ec      	movs	r1, #236	@ 0xec
 8004cf0:	187a      	adds	r2, r7, r1
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	1d7b      	adds	r3, r7, #5
 8004cf6:	33ff      	adds	r3, #255	@ 0xff
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <USB_EPStartXfer+0x99e>
 8004d00:	187b      	adds	r3, r7, r1
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	187a      	adds	r2, r7, r1
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	23ec      	movs	r3, #236	@ 0xec
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	029b      	lsls	r3, r3, #10
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d22:	801a      	strh	r2, [r3, #0]
 8004d24:	e024      	b.n	8004d70 <USB_EPStartXfer+0xa04>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	785b      	ldrb	r3, [r3, #1]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d120      	bne.n	8004d70 <USB_EPStartXfer+0xa04>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2184      	movs	r1, #132	@ 0x84
 8004d32:	187a      	adds	r2, r7, r1
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2250      	movs	r2, #80	@ 0x50
 8004d3a:	5a9b      	ldrh	r3, [r3, r2]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	001a      	movs	r2, r3
 8004d40:	187b      	adds	r3, r7, r1
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	189b      	adds	r3, r3, r2
 8004d46:	187a      	adds	r2, r7, r1
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	00da      	lsls	r2, r3, #3
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	18d3      	adds	r3, r2, r3
 8004d56:	4a30      	ldr	r2, [pc, #192]	@ (8004e18 <USB_EPStartXfer+0xaac>)
 8004d58:	4694      	mov	ip, r2
 8004d5a:	4463      	add	r3, ip
 8004d5c:	2180      	movs	r1, #128	@ 0x80
 8004d5e:	187a      	adds	r2, r7, r1
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	1d7b      	adds	r3, r7, #5
 8004d64:	33ff      	adds	r3, #255	@ 0xff
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	187b      	adds	r3, r7, r1
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d70:	2076      	movs	r0, #118	@ 0x76
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	8912      	ldrh	r2, [r2, #8]
 8004d78:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6959      	ldr	r1, [r3, #20]
 8004d7e:	1d7b      	adds	r3, r7, #5
 8004d80:	33ff      	adds	r3, #255	@ 0xff
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b29c      	uxth	r4, r3
 8004d86:	183b      	adds	r3, r7, r0
 8004d88:	881a      	ldrh	r2, [r3, #0]
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	0023      	movs	r3, r4
 8004d8e:	f000 fd5f 	bl	8005850 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	200a      	movs	r0, #10
 8004da2:	183b      	adds	r3, r7, r0
 8004da4:	491d      	ldr	r1, [pc, #116]	@ (8004e1c <USB_EPStartXfer+0xab0>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	183b      	adds	r3, r7, r0
 8004dac:	183a      	adds	r2, r7, r0
 8004dae:	8812      	ldrh	r2, [r2, #0]
 8004db0:	2110      	movs	r1, #16
 8004db2:	404a      	eors	r2, r1
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	183b      	adds	r3, r7, r0
 8004db8:	183a      	adds	r2, r7, r0
 8004dba:	8812      	ldrh	r2, [r2, #0]
 8004dbc:	2120      	movs	r1, #32
 8004dbe:	404a      	eors	r2, r1
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	18d3      	adds	r3, r2, r3
 8004dcc:	183a      	adds	r2, r7, r0
 8004dce:	8812      	ldrh	r2, [r2, #0]
 8004dd0:	4913      	ldr	r1, [pc, #76]	@ (8004e20 <USB_EPStartXfer+0xab4>)
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	b292      	uxth	r2, r2
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	f000 fbf4 	bl	80055c4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	7b1b      	ldrb	r3, [r3, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d000      	beq.n	8004de6 <USB_EPStartXfer+0xa7a>
 8004de4:	e0a9      	b.n	8004f3a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d918      	bls.n	8004e24 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	1d7a      	adds	r2, r7, #5
 8004df8:	32ff      	adds	r2, #255	@ 0xff
 8004dfa:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	1d7b      	adds	r3, r7, #5
 8004e02:	33ff      	adds	r3, #255	@ 0xff
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	619a      	str	r2, [r3, #24]
 8004e0c:	e012      	b.n	8004e34 <USB_EPStartXfer+0xac8>
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	00000406 	.word	0x00000406
 8004e14:	ffff8000 	.word	0xffff8000
 8004e18:	00000402 	.word	0x00000402
 8004e1c:	ffff8fbf 	.word	0xffff8fbf
 8004e20:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	1d7a      	adds	r2, r7, #5
 8004e2a:	32ff      	adds	r2, #255	@ 0xff
 8004e2c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2190      	movs	r1, #144	@ 0x90
 8004e38:	187a      	adds	r2, r7, r1
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2250      	movs	r2, #80	@ 0x50
 8004e40:	5a9b      	ldrh	r3, [r3, r2]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	001a      	movs	r2, r3
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	187a      	adds	r2, r7, r1
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	00da      	lsls	r2, r3, #3
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	18d3      	adds	r3, r2, r3
 8004e5c:	4acf      	ldr	r2, [pc, #828]	@ (800519c <USB_EPStartXfer+0xe30>)
 8004e5e:	4694      	mov	ip, r2
 8004e60:	4463      	add	r3, ip
 8004e62:	218c      	movs	r1, #140	@ 0x8c
 8004e64:	187a      	adds	r2, r7, r1
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	187b      	adds	r3, r7, r1
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	059b      	lsls	r3, r3, #22
 8004e72:	0d9b      	lsrs	r3, r3, #22
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	187b      	adds	r3, r7, r1
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	1d7b      	adds	r3, r7, #5
 8004e7e:	33ff      	adds	r3, #255	@ 0xff
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e84:	d925      	bls.n	8004ed2 <USB_EPStartXfer+0xb66>
 8004e86:	1d7b      	adds	r3, r7, #5
 8004e88:	33ff      	adds	r3, #255	@ 0xff
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	21e8      	movs	r1, #232	@ 0xe8
 8004e90:	187a      	adds	r2, r7, r1
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	1d7b      	adds	r3, r7, #5
 8004e96:	33ff      	adds	r3, #255	@ 0xff
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	221f      	movs	r2, #31
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d104      	bne.n	8004eaa <USB_EPStartXfer+0xb3e>
 8004ea0:	187b      	adds	r3, r7, r1
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	187a      	adds	r2, r7, r1
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	218c      	movs	r1, #140	@ 0x8c
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	23e8      	movs	r3, #232	@ 0xe8
 8004eb6:	18fb      	adds	r3, r7, r3
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	029b      	lsls	r3, r3, #10
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4ab6      	ldr	r2, [pc, #728]	@ (80051a0 <USB_EPStartXfer+0xe34>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	187b      	adds	r3, r7, r1
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	e353      	b.n	800557a <USB_EPStartXfer+0x120e>
 8004ed2:	1d7b      	adds	r3, r7, #5
 8004ed4:	33ff      	adds	r3, #255	@ 0xff
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <USB_EPStartXfer+0xb88>
 8004edc:	218c      	movs	r1, #140	@ 0x8c
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	4aae      	ldr	r2, [pc, #696]	@ (80051a0 <USB_EPStartXfer+0xe34>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	e342      	b.n	800557a <USB_EPStartXfer+0x120e>
 8004ef4:	1d7b      	adds	r3, r7, #5
 8004ef6:	33ff      	adds	r3, #255	@ 0xff
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	21e8      	movs	r1, #232	@ 0xe8
 8004efe:	187a      	adds	r2, r7, r1
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	1d7b      	adds	r3, r7, #5
 8004f04:	33ff      	adds	r3, #255	@ 0xff
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <USB_EPStartXfer+0xbac>
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	187a      	adds	r2, r7, r1
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	218c      	movs	r1, #140	@ 0x8c
 8004f1a:	187b      	adds	r3, r7, r1
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	23e8      	movs	r3, #232	@ 0xe8
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	029b      	lsls	r3, r3, #10
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	187b      	adds	r3, r7, r1
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e31f      	b.n	800557a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	78db      	ldrb	r3, [r3, #3]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d000      	beq.n	8004f44 <USB_EPStartXfer+0xbd8>
 8004f42:	e191      	b.n	8005268 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d000      	beq.n	8004f4e <USB_EPStartXfer+0xbe2>
 8004f4c:	e07c      	b.n	8005048 <USB_EPStartXfer+0xcdc>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	21ac      	movs	r1, #172	@ 0xac
 8004f52:	187a      	adds	r2, r7, r1
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2250      	movs	r2, #80	@ 0x50
 8004f5a:	5a9b      	ldrh	r3, [r3, r2]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	001a      	movs	r2, r3
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	189b      	adds	r3, r3, r2
 8004f66:	187a      	adds	r2, r7, r1
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	00da      	lsls	r2, r3, #3
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	18d3      	adds	r3, r2, r3
 8004f76:	4a8b      	ldr	r2, [pc, #556]	@ (80051a4 <USB_EPStartXfer+0xe38>)
 8004f78:	4694      	mov	ip, r2
 8004f7a:	4463      	add	r3, ip
 8004f7c:	21a8      	movs	r1, #168	@ 0xa8
 8004f7e:	187a      	adds	r2, r7, r1
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	187b      	adds	r3, r7, r1
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	059b      	lsls	r3, r3, #22
 8004f8c:	0d9b      	lsrs	r3, r3, #22
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f9c:	d923      	bls.n	8004fe6 <USB_EPStartXfer+0xc7a>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	21e4      	movs	r1, #228	@ 0xe4
 8004fa6:	187a      	adds	r2, r7, r1
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	221f      	movs	r2, #31
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d104      	bne.n	8004fbe <USB_EPStartXfer+0xc52>
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	187a      	adds	r2, r7, r1
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	21a8      	movs	r1, #168	@ 0xa8
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	23e4      	movs	r3, #228	@ 0xe4
 8004fca:	18fb      	adds	r3, r7, r3
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	029b      	lsls	r3, r3, #10
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4a71      	ldr	r2, [pc, #452]	@ (80051a0 <USB_EPStartXfer+0xe34>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	187b      	adds	r3, r7, r1
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	e054      	b.n	8005090 <USB_EPStartXfer+0xd24>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10b      	bne.n	8005006 <USB_EPStartXfer+0xc9a>
 8004fee:	21a8      	movs	r1, #168	@ 0xa8
 8004ff0:	187b      	adds	r3, r7, r1
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	4a69      	ldr	r2, [pc, #420]	@ (80051a0 <USB_EPStartXfer+0xe34>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	e044      	b.n	8005090 <USB_EPStartXfer+0xd24>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	21e4      	movs	r1, #228	@ 0xe4
 800500e:	187a      	adds	r2, r7, r1
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2201      	movs	r2, #1
 8005018:	4013      	ands	r3, r2
 800501a:	d004      	beq.n	8005026 <USB_EPStartXfer+0xcba>
 800501c:	187b      	adds	r3, r7, r1
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	187a      	adds	r2, r7, r1
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	21a8      	movs	r1, #168	@ 0xa8
 8005028:	187b      	adds	r3, r7, r1
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29a      	uxth	r2, r3
 8005030:	23e4      	movs	r3, #228	@ 0xe4
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	029b      	lsls	r3, r3, #10
 800503a:	b29b      	uxth	r3, r3
 800503c:	4313      	orrs	r3, r2
 800503e:	b29a      	uxth	r2, r3
 8005040:	187b      	adds	r3, r7, r1
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e023      	b.n	8005090 <USB_EPStartXfer+0xd24>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d11f      	bne.n	8005090 <USB_EPStartXfer+0xd24>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	21b4      	movs	r1, #180	@ 0xb4
 8005054:	187a      	adds	r2, r7, r1
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2250      	movs	r2, #80	@ 0x50
 800505c:	5a9b      	ldrh	r3, [r3, r2]
 800505e:	b29b      	uxth	r3, r3
 8005060:	001a      	movs	r2, r3
 8005062:	187b      	adds	r3, r7, r1
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	189b      	adds	r3, r3, r2
 8005068:	187a      	adds	r2, r7, r1
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	00da      	lsls	r2, r3, #3
 8005072:	187b      	adds	r3, r7, r1
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	18d3      	adds	r3, r2, r3
 8005078:	4a4a      	ldr	r2, [pc, #296]	@ (80051a4 <USB_EPStartXfer+0xe38>)
 800507a:	4694      	mov	ip, r2
 800507c:	4463      	add	r3, ip
 800507e:	21b0      	movs	r1, #176	@ 0xb0
 8005080:	187a      	adds	r2, r7, r1
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	b29a      	uxth	r2, r3
 800508a:	187b      	adds	r3, r7, r1
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	22a4      	movs	r2, #164	@ 0xa4
 8005094:	18ba      	adds	r2, r7, r2
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d000      	beq.n	80050a2 <USB_EPStartXfer+0xd36>
 80050a0:	e082      	b.n	80051a8 <USB_EPStartXfer+0xe3c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	219c      	movs	r1, #156	@ 0x9c
 80050a6:	187a      	adds	r2, r7, r1
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2250      	movs	r2, #80	@ 0x50
 80050ae:	5a9b      	ldrh	r3, [r3, r2]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	001a      	movs	r2, r3
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	189b      	adds	r3, r3, r2
 80050ba:	187a      	adds	r2, r7, r1
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	00da      	lsls	r2, r3, #3
 80050c4:	187b      	adds	r3, r7, r1
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	18d3      	adds	r3, r2, r3
 80050ca:	4a34      	ldr	r2, [pc, #208]	@ (800519c <USB_EPStartXfer+0xe30>)
 80050cc:	4694      	mov	ip, r2
 80050ce:	4463      	add	r3, ip
 80050d0:	2198      	movs	r1, #152	@ 0x98
 80050d2:	187a      	adds	r2, r7, r1
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	187b      	adds	r3, r7, r1
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	059b      	lsls	r3, r3, #22
 80050e0:	0d9b      	lsrs	r3, r3, #22
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	187b      	adds	r3, r7, r1
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	801a      	strh	r2, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80050f0:	d923      	bls.n	800513a <USB_EPStartXfer+0xdce>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	21e0      	movs	r1, #224	@ 0xe0
 80050fa:	187a      	adds	r2, r7, r1
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	221f      	movs	r2, #31
 8005104:	4013      	ands	r3, r2
 8005106:	d104      	bne.n	8005112 <USB_EPStartXfer+0xda6>
 8005108:	187b      	adds	r3, r7, r1
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3b01      	subs	r3, #1
 800510e:	187a      	adds	r2, r7, r1
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	2198      	movs	r1, #152	@ 0x98
 8005114:	187b      	adds	r3, r7, r1
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29a      	uxth	r2, r3
 800511c:	23e0      	movs	r3, #224	@ 0xe0
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	b29b      	uxth	r3, r3
 8005128:	4313      	orrs	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <USB_EPStartXfer+0xe34>)
 800512e:	4313      	orrs	r3, r2
 8005130:	b29a      	uxth	r2, r3
 8005132:	187b      	adds	r3, r7, r1
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	e057      	b.n	80051ea <USB_EPStartXfer+0xe7e>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <USB_EPStartXfer+0xdee>
 8005142:	2198      	movs	r1, #152	@ 0x98
 8005144:	187b      	adds	r3, r7, r1
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	4a14      	ldr	r2, [pc, #80]	@ (80051a0 <USB_EPStartXfer+0xe34>)
 800514e:	4313      	orrs	r3, r2
 8005150:	b29a      	uxth	r2, r3
 8005152:	187b      	adds	r3, r7, r1
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e047      	b.n	80051ea <USB_EPStartXfer+0xe7e>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	21e0      	movs	r1, #224	@ 0xe0
 8005162:	187a      	adds	r2, r7, r1
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2201      	movs	r2, #1
 800516c:	4013      	ands	r3, r2
 800516e:	d004      	beq.n	800517a <USB_EPStartXfer+0xe0e>
 8005170:	187b      	adds	r3, r7, r1
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	187a      	adds	r2, r7, r1
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	2198      	movs	r1, #152	@ 0x98
 800517c:	187b      	adds	r3, r7, r1
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29a      	uxth	r2, r3
 8005184:	23e0      	movs	r3, #224	@ 0xe0
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	029b      	lsls	r3, r3, #10
 800518e:	b29b      	uxth	r3, r3
 8005190:	4313      	orrs	r3, r2
 8005192:	b29a      	uxth	r2, r3
 8005194:	187b      	adds	r3, r7, r1
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	801a      	strh	r2, [r3, #0]
 800519a:	e026      	b.n	80051ea <USB_EPStartXfer+0xe7e>
 800519c:	00000406 	.word	0x00000406
 80051a0:	ffff8000 	.word	0xffff8000
 80051a4:	00000402 	.word	0x00000402
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d11c      	bne.n	80051ea <USB_EPStartXfer+0xe7e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2250      	movs	r2, #80	@ 0x50
 80051b4:	5a9b      	ldrh	r3, [r3, r2]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	001a      	movs	r2, r3
 80051ba:	21a4      	movs	r1, #164	@ 0xa4
 80051bc:	187b      	adds	r3, r7, r1
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	189b      	adds	r3, r3, r2
 80051c2:	187a      	adds	r2, r7, r1
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	00da      	lsls	r2, r3, #3
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	18d3      	adds	r3, r2, r3
 80051d2:	4ad2      	ldr	r2, [pc, #840]	@ (800551c <USB_EPStartXfer+0x11b0>)
 80051d4:	4694      	mov	ip, r2
 80051d6:	4463      	add	r3, ip
 80051d8:	21a0      	movs	r1, #160	@ 0xa0
 80051da:	187a      	adds	r2, r7, r1
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d100      	bne.n	80051f4 <USB_EPStartXfer+0xe88>
 80051f2:	e1c2      	b.n	800557a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	18d2      	adds	r2, r2, r3
 80051fe:	2196      	movs	r1, #150	@ 0x96
 8005200:	187b      	adds	r3, r7, r1
 8005202:	8812      	ldrh	r2, [r2, #0]
 8005204:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005206:	187b      	adds	r3, r7, r1
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	2380      	movs	r3, #128	@ 0x80
 800520c:	01db      	lsls	r3, r3, #7
 800520e:	4013      	ands	r3, r2
 8005210:	d004      	beq.n	800521c <USB_EPStartXfer+0xeb0>
 8005212:	187b      	adds	r3, r7, r1
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	2240      	movs	r2, #64	@ 0x40
 8005218:	4013      	ands	r3, r2
 800521a:	d10d      	bne.n	8005238 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800521c:	2196      	movs	r1, #150	@ 0x96
 800521e:	187b      	adds	r3, r7, r1
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	2380      	movs	r3, #128	@ 0x80
 8005224:	01db      	lsls	r3, r3, #7
 8005226:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005228:	d000      	beq.n	800522c <USB_EPStartXfer+0xec0>
 800522a:	e1a6      	b.n	800557a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800522c:	187b      	adds	r3, r7, r1
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	2240      	movs	r2, #64	@ 0x40
 8005232:	4013      	ands	r3, r2
 8005234:	d000      	beq.n	8005238 <USB_EPStartXfer+0xecc>
 8005236:	e1a0      	b.n	800557a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	18d3      	adds	r3, r2, r3
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29a      	uxth	r2, r3
 8005246:	2094      	movs	r0, #148	@ 0x94
 8005248:	183b      	adds	r3, r7, r0
 800524a:	49b5      	ldr	r1, [pc, #724]	@ (8005520 <USB_EPStartXfer+0x11b4>)
 800524c:	400a      	ands	r2, r1
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	18d3      	adds	r3, r2, r3
 800525a:	183a      	adds	r2, r7, r0
 800525c:	8812      	ldrh	r2, [r2, #0]
 800525e:	49b1      	ldr	r1, [pc, #708]	@ (8005524 <USB_EPStartXfer+0x11b8>)
 8005260:	430a      	orrs	r2, r1
 8005262:	b292      	uxth	r2, r2
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	e188      	b.n	800557a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	78db      	ldrb	r3, [r3, #3]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d000      	beq.n	8005272 <USB_EPStartXfer+0xf06>
 8005270:	e181      	b.n	8005576 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	429a      	cmp	r2, r3
 800527c:	d90d      	bls.n	800529a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	1d7a      	adds	r2, r7, #5
 8005284:	32ff      	adds	r2, #255	@ 0xff
 8005286:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	1d7b      	adds	r3, r7, #5
 800528e:	33ff      	adds	r3, #255	@ 0xff
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1ad2      	subs	r2, r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	619a      	str	r2, [r3, #24]
 8005298:	e007      	b.n	80052aa <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	1d7a      	adds	r2, r7, #5
 80052a0:	32ff      	adds	r2, #255	@ 0xff
 80052a2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d000      	beq.n	80052b4 <USB_EPStartXfer+0xf48>
 80052b2:	e082      	b.n	80053ba <USB_EPStartXfer+0x104e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	21cc      	movs	r1, #204	@ 0xcc
 80052b8:	187a      	adds	r2, r7, r1
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2250      	movs	r2, #80	@ 0x50
 80052c0:	5a9b      	ldrh	r3, [r3, r2]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	001a      	movs	r2, r3
 80052c6:	187b      	adds	r3, r7, r1
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	187a      	adds	r2, r7, r1
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	00da      	lsls	r2, r3, #3
 80052d6:	187b      	adds	r3, r7, r1
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	18d3      	adds	r3, r2, r3
 80052dc:	4a92      	ldr	r2, [pc, #584]	@ (8005528 <USB_EPStartXfer+0x11bc>)
 80052de:	4694      	mov	ip, r2
 80052e0:	4463      	add	r3, ip
 80052e2:	21c8      	movs	r1, #200	@ 0xc8
 80052e4:	187a      	adds	r2, r7, r1
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	059b      	lsls	r3, r3, #22
 80052f2:	0d9b      	lsrs	r3, r3, #22
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	187b      	adds	r3, r7, r1
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	1d7b      	adds	r3, r7, #5
 80052fe:	33ff      	adds	r3, #255	@ 0xff
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b3e      	cmp	r3, #62	@ 0x3e
 8005304:	d925      	bls.n	8005352 <USB_EPStartXfer+0xfe6>
 8005306:	1d7b      	adds	r3, r7, #5
 8005308:	33ff      	adds	r3, #255	@ 0xff
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	21dc      	movs	r1, #220	@ 0xdc
 8005310:	187a      	adds	r2, r7, r1
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	1d7b      	adds	r3, r7, #5
 8005316:	33ff      	adds	r3, #255	@ 0xff
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	221f      	movs	r2, #31
 800531c:	4013      	ands	r3, r2
 800531e:	d104      	bne.n	800532a <USB_EPStartXfer+0xfbe>
 8005320:	187b      	adds	r3, r7, r1
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3b01      	subs	r3, #1
 8005326:	187a      	adds	r2, r7, r1
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	21c8      	movs	r1, #200	@ 0xc8
 800532c:	187b      	adds	r3, r7, r1
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29a      	uxth	r2, r3
 8005334:	23dc      	movs	r3, #220	@ 0xdc
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	b29b      	uxth	r3, r3
 8005340:	4313      	orrs	r3, r2
 8005342:	b29b      	uxth	r3, r3
 8005344:	4a79      	ldr	r2, [pc, #484]	@ (800552c <USB_EPStartXfer+0x11c0>)
 8005346:	4313      	orrs	r3, r2
 8005348:	b29a      	uxth	r2, r3
 800534a:	187b      	adds	r3, r7, r1
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	801a      	strh	r2, [r3, #0]
 8005350:	e058      	b.n	8005404 <USB_EPStartXfer+0x1098>
 8005352:	1d7b      	adds	r3, r7, #5
 8005354:	33ff      	adds	r3, #255	@ 0xff
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <USB_EPStartXfer+0x1008>
 800535c:	21c8      	movs	r1, #200	@ 0xc8
 800535e:	187b      	adds	r3, r7, r1
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	4a71      	ldr	r2, [pc, #452]	@ (800552c <USB_EPStartXfer+0x11c0>)
 8005368:	4313      	orrs	r3, r2
 800536a:	b29a      	uxth	r2, r3
 800536c:	187b      	adds	r3, r7, r1
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	e047      	b.n	8005404 <USB_EPStartXfer+0x1098>
 8005374:	1d7b      	adds	r3, r7, #5
 8005376:	33ff      	adds	r3, #255	@ 0xff
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	21dc      	movs	r1, #220	@ 0xdc
 800537e:	187a      	adds	r2, r7, r1
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	1d7b      	adds	r3, r7, #5
 8005384:	33ff      	adds	r3, #255	@ 0xff
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	4013      	ands	r3, r2
 800538c:	d004      	beq.n	8005398 <USB_EPStartXfer+0x102c>
 800538e:	187b      	adds	r3, r7, r1
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3301      	adds	r3, #1
 8005394:	187a      	adds	r2, r7, r1
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	21c8      	movs	r1, #200	@ 0xc8
 800539a:	187b      	adds	r3, r7, r1
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	23dc      	movs	r3, #220	@ 0xdc
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	029b      	lsls	r3, r3, #10
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	4313      	orrs	r3, r2
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e024      	b.n	8005404 <USB_EPStartXfer+0x1098>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d120      	bne.n	8005404 <USB_EPStartXfer+0x1098>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	21d4      	movs	r1, #212	@ 0xd4
 80053c6:	187a      	adds	r2, r7, r1
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2250      	movs	r2, #80	@ 0x50
 80053ce:	5a9b      	ldrh	r3, [r3, r2]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	001a      	movs	r2, r3
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	187a      	adds	r2, r7, r1
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	00da      	lsls	r2, r3, #3
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	18d3      	adds	r3, r2, r3
 80053ea:	4a4f      	ldr	r2, [pc, #316]	@ (8005528 <USB_EPStartXfer+0x11bc>)
 80053ec:	4694      	mov	ip, r2
 80053ee:	4463      	add	r3, ip
 80053f0:	21d0      	movs	r1, #208	@ 0xd0
 80053f2:	187a      	adds	r2, r7, r1
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	1d7b      	adds	r3, r7, #5
 80053f8:	33ff      	adds	r3, #255	@ 0xff
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	22c4      	movs	r2, #196	@ 0xc4
 8005408:	18ba      	adds	r2, r7, r2
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d000      	beq.n	8005416 <USB_EPStartXfer+0x10aa>
 8005414:	e08c      	b.n	8005530 <USB_EPStartXfer+0x11c4>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	21bc      	movs	r1, #188	@ 0xbc
 800541a:	187a      	adds	r2, r7, r1
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2250      	movs	r2, #80	@ 0x50
 8005422:	5a9b      	ldrh	r3, [r3, r2]
 8005424:	b29b      	uxth	r3, r3
 8005426:	001a      	movs	r2, r3
 8005428:	187b      	adds	r3, r7, r1
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	189b      	adds	r3, r3, r2
 800542e:	187a      	adds	r2, r7, r1
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	00da      	lsls	r2, r3, #3
 8005438:	187b      	adds	r3, r7, r1
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	18d3      	adds	r3, r2, r3
 800543e:	4a37      	ldr	r2, [pc, #220]	@ (800551c <USB_EPStartXfer+0x11b0>)
 8005440:	4694      	mov	ip, r2
 8005442:	4463      	add	r3, ip
 8005444:	21b8      	movs	r1, #184	@ 0xb8
 8005446:	187a      	adds	r2, r7, r1
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	187b      	adds	r3, r7, r1
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	059b      	lsls	r3, r3, #22
 8005454:	0d9b      	lsrs	r3, r3, #22
 8005456:	b29a      	uxth	r2, r3
 8005458:	187b      	adds	r3, r7, r1
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	801a      	strh	r2, [r3, #0]
 800545e:	1d7b      	adds	r3, r7, #5
 8005460:	33ff      	adds	r3, #255	@ 0xff
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b3e      	cmp	r3, #62	@ 0x3e
 8005466:	d925      	bls.n	80054b4 <USB_EPStartXfer+0x1148>
 8005468:	1d7b      	adds	r3, r7, #5
 800546a:	33ff      	adds	r3, #255	@ 0xff
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	21d8      	movs	r1, #216	@ 0xd8
 8005472:	187a      	adds	r2, r7, r1
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	1d7b      	adds	r3, r7, #5
 8005478:	33ff      	adds	r3, #255	@ 0xff
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	221f      	movs	r2, #31
 800547e:	4013      	ands	r3, r2
 8005480:	d104      	bne.n	800548c <USB_EPStartXfer+0x1120>
 8005482:	187b      	adds	r3, r7, r1
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3b01      	subs	r3, #1
 8005488:	187a      	adds	r2, r7, r1
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	21b8      	movs	r1, #184	@ 0xb8
 800548e:	187b      	adds	r3, r7, r1
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29a      	uxth	r2, r3
 8005496:	23d8      	movs	r3, #216	@ 0xd8
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	4a21      	ldr	r2, [pc, #132]	@ (800552c <USB_EPStartXfer+0x11c0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	e062      	b.n	800557a <USB_EPStartXfer+0x120e>
 80054b4:	1d7b      	adds	r3, r7, #5
 80054b6:	33ff      	adds	r3, #255	@ 0xff
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <USB_EPStartXfer+0x116a>
 80054be:	21b8      	movs	r1, #184	@ 0xb8
 80054c0:	187b      	adds	r3, r7, r1
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	4a18      	ldr	r2, [pc, #96]	@ (800552c <USB_EPStartXfer+0x11c0>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	e051      	b.n	800557a <USB_EPStartXfer+0x120e>
 80054d6:	1d7b      	adds	r3, r7, #5
 80054d8:	33ff      	adds	r3, #255	@ 0xff
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	21d8      	movs	r1, #216	@ 0xd8
 80054e0:	187a      	adds	r2, r7, r1
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	1d7b      	adds	r3, r7, #5
 80054e6:	33ff      	adds	r3, #255	@ 0xff
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2201      	movs	r2, #1
 80054ec:	4013      	ands	r3, r2
 80054ee:	d004      	beq.n	80054fa <USB_EPStartXfer+0x118e>
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	187a      	adds	r2, r7, r1
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	21b8      	movs	r1, #184	@ 0xb8
 80054fc:	187b      	adds	r3, r7, r1
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29a      	uxth	r2, r3
 8005504:	23d8      	movs	r3, #216	@ 0xd8
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	029b      	lsls	r3, r3, #10
 800550e:	b29b      	uxth	r3, r3
 8005510:	4313      	orrs	r3, r2
 8005512:	b29a      	uxth	r2, r3
 8005514:	187b      	adds	r3, r7, r1
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	e02e      	b.n	800557a <USB_EPStartXfer+0x120e>
 800551c:	00000406 	.word	0x00000406
 8005520:	ffff8f8f 	.word	0xffff8f8f
 8005524:	ffff80c0 	.word	0xffff80c0
 8005528:	00000402 	.word	0x00000402
 800552c:	ffff8000 	.word	0xffff8000
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d120      	bne.n	800557a <USB_EPStartXfer+0x120e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2250      	movs	r2, #80	@ 0x50
 800553c:	5a9b      	ldrh	r3, [r3, r2]
 800553e:	b29b      	uxth	r3, r3
 8005540:	001a      	movs	r2, r3
 8005542:	21c4      	movs	r1, #196	@ 0xc4
 8005544:	187b      	adds	r3, r7, r1
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	189b      	adds	r3, r3, r2
 800554a:	187a      	adds	r2, r7, r1
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	00da      	lsls	r2, r3, #3
 8005554:	187b      	adds	r3, r7, r1
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	4a1d      	ldr	r2, [pc, #116]	@ (80055d0 <USB_EPStartXfer+0x1264>)
 800555c:	4694      	mov	ip, r2
 800555e:	4463      	add	r3, ip
 8005560:	21c0      	movs	r1, #192	@ 0xc0
 8005562:	187a      	adds	r2, r7, r1
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	1d7b      	adds	r3, r7, #5
 8005568:	33ff      	adds	r3, #255	@ 0xff
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	b29a      	uxth	r2, r3
 800556e:	187b      	adds	r3, r7, r1
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	e001      	b.n	800557a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e025      	b.n	80055c6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	18d3      	adds	r3, r2, r3
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29a      	uxth	r2, r3
 8005588:	208a      	movs	r0, #138	@ 0x8a
 800558a:	183b      	adds	r3, r7, r0
 800558c:	4911      	ldr	r1, [pc, #68]	@ (80055d4 <USB_EPStartXfer+0x1268>)
 800558e:	400a      	ands	r2, r1
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	183b      	adds	r3, r7, r0
 8005594:	183a      	adds	r2, r7, r0
 8005596:	8812      	ldrh	r2, [r2, #0]
 8005598:	2180      	movs	r1, #128	@ 0x80
 800559a:	0149      	lsls	r1, r1, #5
 800559c:	404a      	eors	r2, r1
 800559e:	801a      	strh	r2, [r3, #0]
 80055a0:	183b      	adds	r3, r7, r0
 80055a2:	183a      	adds	r2, r7, r0
 80055a4:	8812      	ldrh	r2, [r2, #0]
 80055a6:	2180      	movs	r1, #128	@ 0x80
 80055a8:	0189      	lsls	r1, r1, #6
 80055aa:	404a      	eors	r2, r1
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	18d3      	adds	r3, r2, r3
 80055b8:	183a      	adds	r2, r7, r0
 80055ba:	8812      	ldrh	r2, [r2, #0]
 80055bc:	4906      	ldr	r1, [pc, #24]	@ (80055d8 <USB_EPStartXfer+0x126c>)
 80055be:	430a      	orrs	r2, r1
 80055c0:	b292      	uxth	r2, r2
 80055c2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b043      	add	sp, #268	@ 0x10c
 80055cc:	bd90      	pop	{r4, r7, pc}
 80055ce:	46c0      	nop			@ (mov r8, r8)
 80055d0:	00000406 	.word	0x00000406
 80055d4:	ffffbf8f 	.word	0xffffbf8f
 80055d8:	ffff8080 	.word	0xffff8080

080055dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01d      	beq.n	800562a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	18d3      	adds	r3, r2, r3
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	200c      	movs	r0, #12
 80055fe:	183b      	adds	r3, r7, r0
 8005600:	491b      	ldr	r1, [pc, #108]	@ (8005670 <USB_EPSetStall+0x94>)
 8005602:	400a      	ands	r2, r1
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	183b      	adds	r3, r7, r0
 8005608:	183a      	adds	r2, r7, r0
 800560a:	8812      	ldrh	r2, [r2, #0]
 800560c:	2110      	movs	r1, #16
 800560e:	404a      	eors	r2, r1
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	18d3      	adds	r3, r2, r3
 800561c:	183a      	adds	r2, r7, r0
 800561e:	8812      	ldrh	r2, [r2, #0]
 8005620:	4914      	ldr	r1, [pc, #80]	@ (8005674 <USB_EPSetStall+0x98>)
 8005622:	430a      	orrs	r2, r1
 8005624:	b292      	uxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e01d      	b.n	8005666 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	18d3      	adds	r3, r2, r3
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29a      	uxth	r2, r3
 8005638:	200e      	movs	r0, #14
 800563a:	183b      	adds	r3, r7, r0
 800563c:	490e      	ldr	r1, [pc, #56]	@ (8005678 <USB_EPSetStall+0x9c>)
 800563e:	400a      	ands	r2, r1
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	183b      	adds	r3, r7, r0
 8005644:	183a      	adds	r2, r7, r0
 8005646:	8812      	ldrh	r2, [r2, #0]
 8005648:	2180      	movs	r1, #128	@ 0x80
 800564a:	0149      	lsls	r1, r1, #5
 800564c:	404a      	eors	r2, r1
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	18d3      	adds	r3, r2, r3
 800565a:	183a      	adds	r2, r7, r0
 800565c:	8812      	ldrh	r2, [r2, #0]
 800565e:	4905      	ldr	r1, [pc, #20]	@ (8005674 <USB_EPSetStall+0x98>)
 8005660:	430a      	orrs	r2, r1
 8005662:	b292      	uxth	r2, r2
 8005664:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	0018      	movs	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	b004      	add	sp, #16
 800566e:	bd80      	pop	{r7, pc}
 8005670:	ffff8fbf 	.word	0xffff8fbf
 8005674:	ffff8080 	.word	0xffff8080
 8005678:	ffffbf8f 	.word	0xffffbf8f

0800567c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	7b1b      	ldrb	r3, [r3, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d000      	beq.n	8005690 <USB_EPClearStall+0x14>
 800568e:	e095      	b.n	80057bc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d046      	beq.n	8005726 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	18d2      	adds	r2, r2, r3
 80056a2:	2110      	movs	r1, #16
 80056a4:	187b      	adds	r3, r7, r1
 80056a6:	8812      	ldrh	r2, [r2, #0]
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	187b      	adds	r3, r7, r1
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	2240      	movs	r2, #64	@ 0x40
 80056b0:	4013      	ands	r3, r2
 80056b2:	d016      	beq.n	80056e2 <USB_EPClearStall+0x66>
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	18d3      	adds	r3, r2, r3
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	200e      	movs	r0, #14
 80056c4:	183b      	adds	r3, r7, r0
 80056c6:	4940      	ldr	r1, [pc, #256]	@ (80057c8 <USB_EPClearStall+0x14c>)
 80056c8:	400a      	ands	r2, r1
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	18d3      	adds	r3, r2, r3
 80056d6:	183a      	adds	r2, r7, r0
 80056d8:	8812      	ldrh	r2, [r2, #0]
 80056da:	493c      	ldr	r1, [pc, #240]	@ (80057cc <USB_EPClearStall+0x150>)
 80056dc:	430a      	orrs	r2, r1
 80056de:	b292      	uxth	r2, r2
 80056e0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	78db      	ldrb	r3, [r3, #3]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d068      	beq.n	80057bc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	18d3      	adds	r3, r2, r3
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	200c      	movs	r0, #12
 80056fa:	183b      	adds	r3, r7, r0
 80056fc:	4934      	ldr	r1, [pc, #208]	@ (80057d0 <USB_EPClearStall+0x154>)
 80056fe:	400a      	ands	r2, r1
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	183b      	adds	r3, r7, r0
 8005704:	183a      	adds	r2, r7, r0
 8005706:	8812      	ldrh	r2, [r2, #0]
 8005708:	2120      	movs	r1, #32
 800570a:	404a      	eors	r2, r1
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	18d3      	adds	r3, r2, r3
 8005718:	183a      	adds	r2, r7, r0
 800571a:	8812      	ldrh	r2, [r2, #0]
 800571c:	492d      	ldr	r1, [pc, #180]	@ (80057d4 <USB_EPClearStall+0x158>)
 800571e:	430a      	orrs	r2, r1
 8005720:	b292      	uxth	r2, r2
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	e04a      	b.n	80057bc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	18d2      	adds	r2, r2, r3
 8005730:	2116      	movs	r1, #22
 8005732:	187b      	adds	r3, r7, r1
 8005734:	8812      	ldrh	r2, [r2, #0]
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	187b      	adds	r3, r7, r1
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	2380      	movs	r3, #128	@ 0x80
 800573e:	01db      	lsls	r3, r3, #7
 8005740:	4013      	ands	r3, r2
 8005742:	d016      	beq.n	8005772 <USB_EPClearStall+0xf6>
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	18d3      	adds	r3, r2, r3
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29a      	uxth	r2, r3
 8005752:	2014      	movs	r0, #20
 8005754:	183b      	adds	r3, r7, r0
 8005756:	491c      	ldr	r1, [pc, #112]	@ (80057c8 <USB_EPClearStall+0x14c>)
 8005758:	400a      	ands	r2, r1
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	18d3      	adds	r3, r2, r3
 8005766:	183a      	adds	r2, r7, r0
 8005768:	8812      	ldrh	r2, [r2, #0]
 800576a:	491b      	ldr	r1, [pc, #108]	@ (80057d8 <USB_EPClearStall+0x15c>)
 800576c:	430a      	orrs	r2, r1
 800576e:	b292      	uxth	r2, r2
 8005770:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	18d3      	adds	r3, r2, r3
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29a      	uxth	r2, r3
 8005780:	2012      	movs	r0, #18
 8005782:	183b      	adds	r3, r7, r0
 8005784:	4915      	ldr	r1, [pc, #84]	@ (80057dc <USB_EPClearStall+0x160>)
 8005786:	400a      	ands	r2, r1
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	183b      	adds	r3, r7, r0
 800578c:	183a      	adds	r2, r7, r0
 800578e:	8812      	ldrh	r2, [r2, #0]
 8005790:	2180      	movs	r1, #128	@ 0x80
 8005792:	0149      	lsls	r1, r1, #5
 8005794:	404a      	eors	r2, r1
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	183b      	adds	r3, r7, r0
 800579a:	183a      	adds	r2, r7, r0
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	2180      	movs	r1, #128	@ 0x80
 80057a0:	0189      	lsls	r1, r1, #6
 80057a2:	404a      	eors	r2, r1
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	18d3      	adds	r3, r2, r3
 80057b0:	183a      	adds	r2, r7, r0
 80057b2:	8812      	ldrh	r2, [r2, #0]
 80057b4:	4907      	ldr	r1, [pc, #28]	@ (80057d4 <USB_EPClearStall+0x158>)
 80057b6:	430a      	orrs	r2, r1
 80057b8:	b292      	uxth	r2, r2
 80057ba:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	0018      	movs	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b006      	add	sp, #24
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	ffff8f8f 	.word	0xffff8f8f
 80057cc:	ffff80c0 	.word	0xffff80c0
 80057d0:	ffff8fbf 	.word	0xffff8fbf
 80057d4:	ffff8080 	.word	0xffff8080
 80057d8:	ffffc080 	.word	0xffffc080
 80057dc:	ffffbf8f 	.word	0xffffbf8f

080057e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	000a      	movs	r2, r1
 80057ea:	1cfb      	adds	r3, r7, #3
 80057ec:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80057ee:	1cfb      	adds	r3, r7, #3
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	224c      	movs	r2, #76	@ 0x4c
 80057fa:	2180      	movs	r1, #128	@ 0x80
 80057fc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b002      	add	sp, #8
 8005806:	bd80      	pop	{r7, pc}

08005808 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2258      	movs	r2, #88	@ 0x58
 8005814:	5a9b      	ldrh	r3, [r3, r2]
 8005816:	b29b      	uxth	r3, r3
 8005818:	4a05      	ldr	r2, [pc, #20]	@ (8005830 <USB_DevConnect+0x28>)
 800581a:	4313      	orrs	r3, r2
 800581c:	b299      	uxth	r1, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2258      	movs	r2, #88	@ 0x58
 8005822:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	0018      	movs	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	b002      	add	sp, #8
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	ffff8000 	.word	0xffff8000

08005834 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2244      	movs	r2, #68	@ 0x44
 8005840:	5a9b      	ldrh	r3, [r3, r2]
 8005842:	b29b      	uxth	r3, r3
 8005844:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005846:	68fb      	ldr	r3, [r7, #12]
}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b004      	add	sp, #16
 800584e:	bd80      	pop	{r7, pc}

08005850 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	@ 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	0019      	movs	r1, r3
 800585c:	1dbb      	adds	r3, r7, #6
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	1c0a      	adds	r2, r1, #0
 8005864:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005878:	1dbb      	adds	r3, r7, #6
 800587a:	881a      	ldrh	r2, [r3, #0]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	18d3      	adds	r3, r2, r3
 8005880:	2280      	movs	r2, #128	@ 0x80
 8005882:	00d2      	lsls	r2, r2, #3
 8005884:	4694      	mov	ip, r2
 8005886:	4463      	add	r3, ip
 8005888:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
 800588e:	e020      	b.n	80058d2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	2112      	movs	r1, #18
 8005896:	187b      	adds	r3, r7, r1
 8005898:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	3301      	adds	r3, #1
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	b21a      	sxth	r2, r3
 80058a4:	187b      	adds	r3, r7, r1
 80058a6:	2000      	movs	r0, #0
 80058a8:	5e1b      	ldrsh	r3, [r3, r0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	b21a      	sxth	r2, r3
 80058ae:	187b      	adds	r3, r7, r1
 80058b0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	187a      	adds	r2, r7, r1
 80058b6:	8812      	ldrh	r2, [r2, #0]
 80058b8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	3302      	adds	r3, #2
 80058be:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	3b01      	subs	r3, #1
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1db      	bne.n	8005890 <USB_WritePMA+0x40>
  }
}
 80058d8:	46c0      	nop			@ (mov r8, r8)
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	46bd      	mov	sp, r7
 80058de:	b00a      	add	sp, #40	@ 0x28
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b08a      	sub	sp, #40	@ 0x28
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	0019      	movs	r1, r3
 80058ee:	1dbb      	adds	r3, r7, #6
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	1d3b      	adds	r3, r7, #4
 80058f4:	1c0a      	adds	r2, r1, #0
 80058f6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	b29b      	uxth	r3, r3
 8005900:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800590a:	1dbb      	adds	r3, r7, #6
 800590c:	881a      	ldrh	r2, [r3, #0]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	18d3      	adds	r3, r2, r3
 8005912:	2280      	movs	r2, #128	@ 0x80
 8005914:	00d2      	lsls	r2, r2, #3
 8005916:	4694      	mov	ip, r2
 8005918:	4463      	add	r3, ip
 800591a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005920:	e018      	b.n	8005954 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	3302      	adds	r3, #2
 800592e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	b2da      	uxtb	r2, r3
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3301      	adds	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	b2da      	uxtb	r2, r3
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	3b01      	subs	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e3      	bne.n	8005922 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800595a:	1d3b      	adds	r3, r7, #4
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	2201      	movs	r2, #1
 8005960:	4013      	ands	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	701a      	strb	r2, [r3, #0]
  }
}
 8005978:	46c0      	nop			@ (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	b00a      	add	sp, #40	@ 0x28
 800597e:	bd80      	pop	{r7, pc}

08005980 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	000a      	movs	r2, r1
 800598a:	1cfb      	adds	r3, r7, #3
 800598c:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	2304      	movs	r3, #4
 8005992:	2203      	movs	r2, #3
 8005994:	2181      	movs	r1, #129	@ 0x81
 8005996:	f001 fe48 	bl	800762a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80059a0:	2010      	movs	r0, #16
 80059a2:	f001 ffc5 	bl	8007930 <USBD_static_malloc>
 80059a6:	0001      	movs	r1, r0
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	23ae      	movs	r3, #174	@ 0xae
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	23ae      	movs	r3, #174	@ 0xae
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	58d3      	ldr	r3, [r2, r3]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80059bc:	2302      	movs	r3, #2
 80059be:	e006      	b.n	80059ce <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	23ae      	movs	r3, #174	@ 0xae
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	58d3      	ldr	r3, [r2, r3]
 80059c8:	2200      	movs	r2, #0
 80059ca:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	0018      	movs	r0, r3
 80059d0:	46bd      	mov	sp, r7
 80059d2:	b002      	add	sp, #8
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	000a      	movs	r2, r1
 80059e0:	1cfb      	adds	r3, r7, #3
 80059e2:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2181      	movs	r1, #129	@ 0x81
 80059e8:	0018      	movs	r0, r3
 80059ea:	f001 fe55 	bl	8007698 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	23ae      	movs	r3, #174	@ 0xae
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	58d3      	ldr	r3, [r2, r3]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	23ae      	movs	r3, #174	@ 0xae
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	58d3      	ldr	r3, [r2, r3]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f001 ff9d 	bl	8007948 <USBD_static_free>
    pdev->pClassData = NULL;
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	23ae      	movs	r3, #174	@ 0xae
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	2100      	movs	r1, #0
 8005a16:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b002      	add	sp, #8
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	23ae      	movs	r3, #174	@ 0xae
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	58d3      	ldr	r3, [r2, r3]
 8005a36:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a38:	231e      	movs	r3, #30
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a44:	230e      	movs	r3, #14
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	2200      	movs	r2, #0
 8005a4a:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a4c:	2317      	movs	r3, #23
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	001a      	movs	r2, r3
 8005a5a:	2360      	movs	r3, #96	@ 0x60
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d03a      	beq.n	8005ad6 <USBD_HID_Setup+0xb2>
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d000      	beq.n	8005a66 <USBD_HID_Setup+0x42>
 8005a64:	e0d6      	b.n	8005c14 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b0b      	cmp	r3, #11
 8005a6c:	d008      	beq.n	8005a80 <USBD_HID_Setup+0x5c>
 8005a6e:	dc26      	bgt.n	8005abe <USBD_HID_Setup+0x9a>
 8005a70:	2b0a      	cmp	r3, #10
 8005a72:	d013      	beq.n	8005a9c <USBD_HID_Setup+0x78>
 8005a74:	dc23      	bgt.n	8005abe <USBD_HID_Setup+0x9a>
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d019      	beq.n	8005aae <USBD_HID_Setup+0x8a>
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d007      	beq.n	8005a8e <USBD_HID_Setup+0x6a>
 8005a7e:	e01e      	b.n	8005abe <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	885b      	ldrh	r3, [r3, #2]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	001a      	movs	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	601a      	str	r2, [r3, #0]
          break;
 8005a8c:	e022      	b.n	8005ad4 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005a8e:	6939      	ldr	r1, [r7, #16]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	0018      	movs	r0, r3
 8005a96:	f001 fabc 	bl	8007012 <USBD_CtlSendData>
          break;
 8005a9a:	e01b      	b.n	8005ad4 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	885b      	ldrh	r3, [r3, #2]
 8005aa0:	0a1b      	lsrs	r3, r3, #8
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	001a      	movs	r2, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	605a      	str	r2, [r3, #4]
          break;
 8005aac:	e012      	b.n	8005ad4 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1d19      	adds	r1, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f001 faab 	bl	8007012 <USBD_CtlSendData>
          break;
 8005abc:	e00a      	b.n	8005ad4 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	0011      	movs	r1, r2
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f001 fa26 	bl	8006f16 <USBD_CtlError>
          ret = USBD_FAIL;
 8005aca:	2317      	movs	r3, #23
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	2202      	movs	r2, #2
 8005ad0:	701a      	strb	r2, [r3, #0]
          break;
 8005ad2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005ad4:	e0a9      	b.n	8005c2a <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b0b      	cmp	r3, #11
 8005adc:	d100      	bne.n	8005ae0 <USBD_HID_Setup+0xbc>
 8005ade:	e075      	b.n	8005bcc <USBD_HID_Setup+0x1a8>
 8005ae0:	dd00      	ble.n	8005ae4 <USBD_HID_Setup+0xc0>
 8005ae2:	e08b      	b.n	8005bfc <USBD_HID_Setup+0x1d8>
 8005ae4:	2b0a      	cmp	r3, #10
 8005ae6:	d057      	beq.n	8005b98 <USBD_HID_Setup+0x174>
 8005ae8:	dd00      	ble.n	8005aec <USBD_HID_Setup+0xc8>
 8005aea:	e087      	b.n	8005bfc <USBD_HID_Setup+0x1d8>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <USBD_HID_Setup+0xd2>
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d019      	beq.n	8005b28 <USBD_HID_Setup+0x104>
 8005af4:	e082      	b.n	8005bfc <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	23a7      	movs	r3, #167	@ 0xa7
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	5cd3      	ldrb	r3, [r2, r3]
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d107      	bne.n	8005b12 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b02:	230e      	movs	r3, #14
 8005b04:	18f9      	adds	r1, r7, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f001 fa81 	bl	8007012 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b10:	e07f      	b.n	8005c12 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	0011      	movs	r1, r2
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f001 f9fc 	bl	8006f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b1e:	2317      	movs	r3, #23
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	2202      	movs	r2, #2
 8005b24:	701a      	strb	r2, [r3, #0]
          break;
 8005b26:	e074      	b.n	8005c12 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	885b      	ldrh	r3, [r3, #2]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b22      	cmp	r3, #34	@ 0x22
 8005b32:	d10b      	bne.n	8005b4c <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	88db      	ldrh	r3, [r3, #6]
 8005b38:	221e      	movs	r2, #30
 8005b3a:	18ba      	adds	r2, r7, r2
 8005b3c:	b299      	uxth	r1, r3
 8005b3e:	294a      	cmp	r1, #74	@ 0x4a
 8005b40:	d900      	bls.n	8005b44 <USBD_HID_Setup+0x120>
 8005b42:	234a      	movs	r3, #74	@ 0x4a
 8005b44:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8005b46:	4b3c      	ldr	r3, [pc, #240]	@ (8005c38 <USBD_HID_Setup+0x214>)
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e01c      	b.n	8005b86 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	885b      	ldrh	r3, [r3, #2]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b21      	cmp	r3, #33	@ 0x21
 8005b56:	d10b      	bne.n	8005b70 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8005b58:	4b38      	ldr	r3, [pc, #224]	@ (8005c3c <USBD_HID_Setup+0x218>)
 8005b5a:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	221e      	movs	r2, #30
 8005b62:	18ba      	adds	r2, r7, r2
 8005b64:	b299      	uxth	r1, r3
 8005b66:	2909      	cmp	r1, #9
 8005b68:	d900      	bls.n	8005b6c <USBD_HID_Setup+0x148>
 8005b6a:	2309      	movs	r3, #9
 8005b6c:	8013      	strh	r3, [r2, #0]
 8005b6e:	e00a      	b.n	8005b86 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0011      	movs	r1, r2
 8005b76:	0018      	movs	r0, r3
 8005b78:	f001 f9cd 	bl	8006f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b7c:	2317      	movs	r3, #23
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	2202      	movs	r2, #2
 8005b82:	701a      	strb	r2, [r3, #0]
            break;
 8005b84:	e045      	b.n	8005c12 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005b86:	231e      	movs	r3, #30
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	881a      	ldrh	r2, [r3, #0]
 8005b8c:	69b9      	ldr	r1, [r7, #24]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f001 fa3e 	bl	8007012 <USBD_CtlSendData>
          break;
 8005b96:	e03c      	b.n	8005c12 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	23a7      	movs	r3, #167	@ 0xa7
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d108      	bne.n	8005bb6 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	0019      	movs	r1, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f001 fa2f 	bl	8007012 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bb4:	e02d      	b.n	8005c12 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0011      	movs	r1, r2
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f001 f9aa 	bl	8006f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bc2:	2317      	movs	r3, #23
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	701a      	strb	r2, [r3, #0]
          break;
 8005bca:	e022      	b.n	8005c12 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	23a7      	movs	r3, #167	@ 0xa7
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	5cd3      	ldrb	r3, [r2, r3]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d106      	bne.n	8005be6 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	885b      	ldrh	r3, [r3, #2]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	001a      	movs	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005be4:	e015      	b.n	8005c12 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	0011      	movs	r1, r2
 8005bec:	0018      	movs	r0, r3
 8005bee:	f001 f992 	bl	8006f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf2:	2317      	movs	r3, #23
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	701a      	strb	r2, [r3, #0]
          break;
 8005bfa:	e00a      	b.n	8005c12 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	0011      	movs	r1, r2
 8005c02:	0018      	movs	r0, r3
 8005c04:	f001 f987 	bl	8006f16 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c08:	2317      	movs	r3, #23
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	701a      	strb	r2, [r3, #0]
          break;
 8005c10:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005c12:	e00a      	b.n	8005c2a <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0011      	movs	r1, r2
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f001 f97b 	bl	8006f16 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c20:	2317      	movs	r3, #23
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	2202      	movs	r2, #2
 8005c26:	701a      	strb	r2, [r3, #0]
      break;
 8005c28:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005c2a:	2317      	movs	r3, #23
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	781b      	ldrb	r3, [r3, #0]
}
 8005c30:	0018      	movs	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b008      	add	sp, #32
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200000c8 	.word	0x200000c8
 8005c3c:	200000b0 	.word	0x200000b0

08005c40 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	1dbb      	adds	r3, r7, #6
 8005c4c:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	23ae      	movs	r3, #174	@ 0xae
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	58d3      	ldr	r3, [r2, r3]
 8005c56:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	23a7      	movs	r3, #167	@ 0xa7
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	5cd3      	ldrb	r3, [r2, r3]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d10d      	bne.n	8005c80 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	7b1b      	ldrb	r3, [r3, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005c72:	1dbb      	adds	r3, r7, #6
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	2181      	movs	r1, #129	@ 0x81
 8005c7c:	f001 fde9 	bl	8007852 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	0018      	movs	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b006      	add	sp, #24
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2222      	movs	r2, #34	@ 0x22
 8005c98:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005c9a:	4b02      	ldr	r3, [pc, #8]	@ (8005ca4 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b002      	add	sp, #8
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000044 	.word	0x20000044

08005ca8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2222      	movs	r2, #34	@ 0x22
 8005cb4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005cb6:	4b02      	ldr	r3, [pc, #8]	@ (8005cc0 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005cb8:	0018      	movs	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20000068 	.word	0x20000068

08005cc4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2222      	movs	r2, #34	@ 0x22
 8005cd0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005cd2:	4b02      	ldr	r3, [pc, #8]	@ (8005cdc <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b002      	add	sp, #8
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	2000008c 	.word	0x2000008c

08005ce0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	000a      	movs	r2, r1
 8005cea:	1cfb      	adds	r3, r7, #3
 8005cec:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	23ae      	movs	r3, #174	@ 0xae
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	58d3      	ldr	r3, [r2, r3]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b002      	add	sp, #8
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	220a      	movs	r2, #10
 8005d10:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005d12:	4b02      	ldr	r3, [pc, #8]	@ (8005d1c <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005d14:	0018      	movs	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	200000bc 	.word	0x200000bc

08005d20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	1dfb      	adds	r3, r7, #7
 8005d2c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d34:	2302      	movs	r3, #2
 8005d36:	e020      	b.n	8005d7a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	23ad      	movs	r3, #173	@ 0xad
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	58d3      	ldr	r3, [r2, r3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	23ad      	movs	r3, #173	@ 0xad
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	23ac      	movs	r3, #172	@ 0xac
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	23a7      	movs	r3, #167	@ 0xa7
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	2101      	movs	r1, #1
 8005d66:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1dfa      	adds	r2, r7, #7
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	0018      	movs	r0, r3
 8005d74:	f001 fbe4 	bl	8007540 <USBD_LL_Init>

  return USBD_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b004      	add	sp, #16
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d8c:	200f      	movs	r0, #15
 8005d8e:	183b      	adds	r3, r7, r0
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	23ad      	movs	r3, #173	@ 0xad
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005da4:	183b      	adds	r3, r7, r0
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	e003      	b.n	8005db4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005dac:	230f      	movs	r3, #15
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	2202      	movs	r2, #2
 8005db2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005db4:	230f      	movs	r3, #15
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	781b      	ldrb	r3, [r3, #0]
}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b004      	add	sp, #16
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f001 fc07 	bl	80075e0 <USBD_LL_Start>

  return USBD_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b002      	add	sp, #8
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	0018      	movs	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b002      	add	sp, #8
 8005dec:	bd80      	pop	{r7, pc}

08005dee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dee:	b590      	push	{r4, r7, lr}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	000a      	movs	r2, r1
 8005df8:	1cfb      	adds	r3, r7, #3
 8005dfa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dfc:	240f      	movs	r4, #15
 8005dfe:	193b      	adds	r3, r7, r4
 8005e00:	2202      	movs	r2, #2
 8005e02:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	23ad      	movs	r3, #173	@ 0xad
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	58d3      	ldr	r3, [r2, r3]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	23ad      	movs	r3, #173	@ 0xad
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	58d3      	ldr	r3, [r2, r3]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	1cfa      	adds	r2, r7, #3
 8005e1c:	7811      	ldrb	r1, [r2, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	0010      	movs	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	1e03      	subs	r3, r0, #0
 8005e26:	d102      	bne.n	8005e2e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005e28:	193b      	adds	r3, r7, r4
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005e2e:	230f      	movs	r3, #15
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	781b      	ldrb	r3, [r3, #0]
}
 8005e34:	0018      	movs	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b005      	add	sp, #20
 8005e3a:	bd90      	pop	{r4, r7, pc}

08005e3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	000a      	movs	r2, r1
 8005e46:	1cfb      	adds	r3, r7, #3
 8005e48:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	23ad      	movs	r3, #173	@ 0xad
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	58d3      	ldr	r3, [r2, r3]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	1cfa      	adds	r2, r7, #3
 8005e56:	7811      	ldrb	r1, [r2, #0]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	0010      	movs	r0, r2
 8005e5c:	4798      	blx	r3

  return USBD_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	0018      	movs	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b002      	add	sp, #8
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	22aa      	movs	r2, #170	@ 0xaa
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	4694      	mov	ip, r2
 8005e7a:	4463      	add	r3, ip
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	0011      	movs	r1, r2
 8005e80:	0018      	movs	r0, r3
 8005e82:	f001 f810 	bl	8006ea6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	23a5      	movs	r3, #165	@ 0xa5
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a23      	ldr	r2, [pc, #140]	@ (8005f20 <USBD_LL_SetupStage+0xb8>)
 8005e94:	5a9b      	ldrh	r3, [r3, r2]
 8005e96:	0019      	movs	r1, r3
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	23a6      	movs	r3, #166	@ 0xa6
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	23aa      	movs	r3, #170	@ 0xaa
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	5cd3      	ldrb	r3, [r2, r3]
 8005ea8:	001a      	movs	r2, r3
 8005eaa:	231f      	movs	r3, #31
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d019      	beq.n	8005ee6 <USBD_LL_SetupStage+0x7e>
 8005eb2:	d822      	bhi.n	8005efa <USBD_LL_SetupStage+0x92>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <USBD_LL_SetupStage+0x56>
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d00a      	beq.n	8005ed2 <USBD_LL_SetupStage+0x6a>
 8005ebc:	e01d      	b.n	8005efa <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	22aa      	movs	r2, #170	@ 0xaa
 8005ec2:	0092      	lsls	r2, r2, #2
 8005ec4:	189a      	adds	r2, r3, r2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0011      	movs	r1, r2
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f000 fa10 	bl	80062f0 <USBD_StdDevReq>
      break;
 8005ed0:	e020      	b.n	8005f14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	22aa      	movs	r2, #170	@ 0xaa
 8005ed6:	0092      	lsls	r2, r2, #2
 8005ed8:	189a      	adds	r2, r3, r2
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	0011      	movs	r1, r2
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 fa78 	bl	80063d4 <USBD_StdItfReq>
      break;
 8005ee4:	e016      	b.n	8005f14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	22aa      	movs	r2, #170	@ 0xaa
 8005eea:	0092      	lsls	r2, r2, #2
 8005eec:	189a      	adds	r2, r3, r2
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 fac5 	bl	8006482 <USBD_StdEPReq>
      break;
 8005ef8:	e00c      	b.n	8005f14 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	23aa      	movs	r3, #170	@ 0xaa
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	5cd3      	ldrb	r3, [r2, r3]
 8005f02:	227f      	movs	r2, #127	@ 0x7f
 8005f04:	4393      	bics	r3, r2
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0011      	movs	r1, r2
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f001 fbee 	bl	80076ee <USBD_LL_StallEP>
      break;
 8005f12:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	0018      	movs	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b002      	add	sp, #8
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	000002ae 	.word	0x000002ae

08005f24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	607a      	str	r2, [r7, #4]
 8005f2e:	200b      	movs	r0, #11
 8005f30:	183b      	adds	r3, r7, r0
 8005f32:	1c0a      	adds	r2, r1, #0
 8005f34:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f36:	183b      	adds	r3, r7, r0
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d154      	bne.n	8005fe8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3355      	adds	r3, #85	@ 0x55
 8005f42:	33ff      	adds	r3, #255	@ 0xff
 8005f44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	23a5      	movs	r3, #165	@ 0xa5
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	58d3      	ldr	r3, [r2, r3]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d139      	bne.n	8005fc6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d919      	bls.n	8005f92 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d203      	bcs.n	8005f80 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	e002      	b.n	8005f86 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	001a      	movs	r2, r3
 8005f8c:	f001 f874 	bl	8007078 <USBD_CtlContinueRx>
 8005f90:	e045      	b.n	800601e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	23ad      	movs	r3, #173	@ 0xad
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	58d3      	ldr	r3, [r2, r3]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	23a7      	movs	r3, #167	@ 0xa7
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d107      	bne.n	8005fbc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	23ad      	movs	r3, #173	@ 0xad
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	58d3      	ldr	r3, [r2, r3]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	0010      	movs	r0, r2
 8005fba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f001 f86d 	bl	800709e <USBD_CtlSendStatus>
 8005fc4:	e02b      	b.n	800601e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	23a5      	movs	r3, #165	@ 0xa5
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	58d3      	ldr	r3, [r2, r3]
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d125      	bne.n	800601e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	23a5      	movs	r3, #165	@ 0xa5
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	2100      	movs	r1, #0
 8005fda:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2100      	movs	r1, #0
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f001 fb84 	bl	80076ee <USBD_LL_StallEP>
 8005fe6:	e01a      	b.n	800601e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	23ad      	movs	r3, #173	@ 0xad
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	58d3      	ldr	r3, [r2, r3]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d011      	beq.n	800601a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	23a7      	movs	r3, #167	@ 0xa7
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d10b      	bne.n	800601a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	23ad      	movs	r3, #173	@ 0xad
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	58d3      	ldr	r3, [r2, r3]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	220b      	movs	r2, #11
 800600e:	18ba      	adds	r2, r7, r2
 8006010:	7811      	ldrb	r1, [r2, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	0010      	movs	r0, r2
 8006016:	4798      	blx	r3
 8006018:	e001      	b.n	800601e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800601a:	2302      	movs	r3, #2
 800601c:	e000      	b.n	8006020 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	0018      	movs	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	b006      	add	sp, #24
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	607a      	str	r2, [r7, #4]
 8006032:	200b      	movs	r0, #11
 8006034:	183b      	adds	r3, r7, r0
 8006036:	1c0a      	adds	r2, r1, #0
 8006038:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800603a:	183b      	adds	r3, r7, r0
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d000      	beq.n	8006044 <USBD_LL_DataInStage+0x1c>
 8006042:	e08e      	b.n	8006162 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3314      	adds	r3, #20
 8006048:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	23a5      	movs	r3, #165	@ 0xa5
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	58d3      	ldr	r3, [r2, r3]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d164      	bne.n	8006120 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	429a      	cmp	r2, r3
 8006060:	d915      	bls.n	800608e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	b29a      	uxth	r2, r3
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	0018      	movs	r0, r3
 800607c:	f000 ffe9 	bl	8007052 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	2300      	movs	r3, #0
 8006084:	2200      	movs	r2, #0
 8006086:	2100      	movs	r1, #0
 8006088:	f001 fc1a 	bl	80078c0 <USBD_LL_PrepareReceive>
 800608c:	e059      	b.n	8006142 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	0019      	movs	r1, r3
 8006098:	0010      	movs	r0, r2
 800609a:	f7fa f8bb 	bl	8000214 <__aeabi_uidivmod>
 800609e:	1e0b      	subs	r3, r1, #0
 80060a0:	d11f      	bne.n	80060e2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d319      	bcc.n	80060e2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	23a6      	movs	r3, #166	@ 0xa6
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d211      	bcs.n	80060e2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2100      	movs	r1, #0
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 ffc4 	bl	8007052 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	23a6      	movs	r3, #166	@ 0xa6
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	2100      	movs	r1, #0
 80060d2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	2300      	movs	r3, #0
 80060d8:	2200      	movs	r2, #0
 80060da:	2100      	movs	r1, #0
 80060dc:	f001 fbf0 	bl	80078c0 <USBD_LL_PrepareReceive>
 80060e0:	e02f      	b.n	8006142 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	23ad      	movs	r3, #173	@ 0xad
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	58d3      	ldr	r3, [r2, r3]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	23a7      	movs	r3, #167	@ 0xa7
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d107      	bne.n	800610c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	23ad      	movs	r3, #173	@ 0xad
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	58d3      	ldr	r3, [r2, r3]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	0010      	movs	r0, r2
 800610a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2180      	movs	r1, #128	@ 0x80
 8006110:	0018      	movs	r0, r3
 8006112:	f001 faec 	bl	80076ee <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	0018      	movs	r0, r3
 800611a:	f000 ffd4 	bl	80070c6 <USBD_CtlReceiveStatus>
 800611e:	e010      	b.n	8006142 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	23a5      	movs	r3, #165	@ 0xa5
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	58d3      	ldr	r3, [r2, r3]
 8006128:	2b04      	cmp	r3, #4
 800612a:	d005      	beq.n	8006138 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	23a5      	movs	r3, #165	@ 0xa5
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2180      	movs	r1, #128	@ 0x80
 800613c:	0018      	movs	r0, r3
 800613e:	f001 fad6 	bl	80076ee <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	23a8      	movs	r3, #168	@ 0xa8
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	5cd3      	ldrb	r3, [r2, r3]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d124      	bne.n	8006198 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	0018      	movs	r0, r3
 8006152:	f7ff fe43 	bl	8005ddc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	23a8      	movs	r3, #168	@ 0xa8
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	2100      	movs	r1, #0
 800615e:	54d1      	strb	r1, [r2, r3]
 8006160:	e01a      	b.n	8006198 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	23ad      	movs	r3, #173	@ 0xad
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	58d3      	ldr	r3, [r2, r3]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d011      	beq.n	8006194 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	23a7      	movs	r3, #167	@ 0xa7
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006178:	2b03      	cmp	r3, #3
 800617a:	d10b      	bne.n	8006194 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	23ad      	movs	r3, #173	@ 0xad
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	58d3      	ldr	r3, [r2, r3]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	220b      	movs	r2, #11
 8006188:	18ba      	adds	r2, r7, r2
 800618a:	7811      	ldrb	r1, [r2, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	0010      	movs	r0, r2
 8006190:	4798      	blx	r3
 8006192:	e001      	b.n	8006198 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006194:	2302      	movs	r3, #2
 8006196:	e000      	b.n	800619a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	0018      	movs	r0, r3
 800619c:	46bd      	mov	sp, r7
 800619e:	b006      	add	sp, #24
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	2340      	movs	r3, #64	@ 0x40
 80061ae:	2200      	movs	r2, #0
 80061b0:	2100      	movs	r1, #0
 80061b2:	f001 fa3a 	bl	800762a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	23ac      	movs	r3, #172	@ 0xac
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	2101      	movs	r1, #1
 80061be:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	23b2      	movs	r3, #178	@ 0xb2
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	2140      	movs	r1, #64	@ 0x40
 80061c8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	2340      	movs	r3, #64	@ 0x40
 80061ce:	2200      	movs	r2, #0
 80061d0:	2180      	movs	r1, #128	@ 0x80
 80061d2:	f001 fa2a 	bl	800762a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2240      	movs	r2, #64	@ 0x40
 80061e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	23a7      	movs	r3, #167	@ 0xa7
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	2101      	movs	r1, #1
 80061ea:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	23a5      	movs	r3, #165	@ 0xa5
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	2100      	movs	r1, #0
 80061f4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	23a9      	movs	r3, #169	@ 0xa9
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	2100      	movs	r1, #0
 8006204:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	23ae      	movs	r3, #174	@ 0xae
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	58d3      	ldr	r3, [r2, r3]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	23ad      	movs	r3, #173	@ 0xad
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	58d3      	ldr	r3, [r2, r3]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	b2d9      	uxtb	r1, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	0018      	movs	r0, r3
 8006226:	4790      	blx	r2
  }

  return USBD_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	0018      	movs	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	b002      	add	sp, #8
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	000a      	movs	r2, r1
 800623c:	1cfb      	adds	r3, r7, #3
 800623e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	1cfa      	adds	r2, r7, #3
 8006244:	7812      	ldrb	r2, [r2, #0]
 8006246:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	0018      	movs	r0, r3
 800624c:	46bd      	mov	sp, r7
 800624e:	b002      	add	sp, #8
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	23a7      	movs	r3, #167	@ 0xa7
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	5cd1      	ldrb	r1, [r2, r3]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a06      	ldr	r2, [pc, #24]	@ (8006280 <USBD_LL_Suspend+0x2c>)
 8006268:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	23a7      	movs	r3, #167	@ 0xa7
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	2104      	movs	r1, #4
 8006272:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	0018      	movs	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	b002      	add	sp, #8
 800627c:	bd80      	pop	{r7, pc}
 800627e:	46c0      	nop			@ (mov r8, r8)
 8006280:	0000029d 	.word	0x0000029d

08006284 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	23a7      	movs	r3, #167	@ 0xa7
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	5cd3      	ldrb	r3, [r2, r3]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d106      	bne.n	80062a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a05      	ldr	r2, [pc, #20]	@ (80062b0 <USBD_LL_Resume+0x2c>)
 800629c:	5c99      	ldrb	r1, [r3, r2]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	23a7      	movs	r3, #167	@ 0xa7
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	0018      	movs	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b002      	add	sp, #8
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	0000029d 	.word	0x0000029d

080062b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	23a7      	movs	r3, #167	@ 0xa7
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	5cd3      	ldrb	r3, [r2, r3]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d10e      	bne.n	80062e6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	23ad      	movs	r3, #173	@ 0xad
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	58d3      	ldr	r3, [r2, r3]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	23ad      	movs	r3, #173	@ 0xad
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	58d3      	ldr	r3, [r2, r3]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	0010      	movs	r0, r2
 80062e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	0018      	movs	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	b002      	add	sp, #8
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062fa:	230f      	movs	r3, #15
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	001a      	movs	r2, r3
 8006308:	2360      	movs	r3, #96	@ 0x60
 800630a:	4013      	ands	r3, r2
 800630c:	2b40      	cmp	r3, #64	@ 0x40
 800630e:	d004      	beq.n	800631a <USBD_StdDevReq+0x2a>
 8006310:	d84f      	bhi.n	80063b2 <USBD_StdDevReq+0xc2>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <USBD_StdDevReq+0x3e>
 8006316:	2b20      	cmp	r3, #32
 8006318:	d14b      	bne.n	80063b2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	23ad      	movs	r3, #173	@ 0xad
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	58d3      	ldr	r3, [r2, r3]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	0010      	movs	r0, r2
 800632a:	4798      	blx	r3
      break;
 800632c:	e048      	b.n	80063c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	2b09      	cmp	r3, #9
 8006334:	d835      	bhi.n	80063a2 <USBD_StdDevReq+0xb2>
 8006336:	009a      	lsls	r2, r3, #2
 8006338:	4b25      	ldr	r3, [pc, #148]	@ (80063d0 <USBD_StdDevReq+0xe0>)
 800633a:	18d3      	adds	r3, r2, r3
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	0011      	movs	r1, r2
 8006346:	0018      	movs	r0, r3
 8006348:	f000 fa52 	bl	80067f0 <USBD_GetDescriptor>
          break;
 800634c:	e030      	b.n	80063b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	0011      	movs	r1, r2
 8006354:	0018      	movs	r0, r3
 8006356:	f000 fbfd 	bl	8006b54 <USBD_SetAddress>
          break;
 800635a:	e029      	b.n	80063b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	0011      	movs	r1, r2
 8006362:	0018      	movs	r0, r3
 8006364:	f000 fc4a 	bl	8006bfc <USBD_SetConfig>
          break;
 8006368:	e022      	b.n	80063b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	0011      	movs	r1, r2
 8006370:	0018      	movs	r0, r3
 8006372:	f000 fce7 	bl	8006d44 <USBD_GetConfig>
          break;
 8006376:	e01b      	b.n	80063b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0011      	movs	r1, r2
 800637e:	0018      	movs	r0, r3
 8006380:	f000 fd1b 	bl	8006dba <USBD_GetStatus>
          break;
 8006384:	e014      	b.n	80063b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	0011      	movs	r1, r2
 800638c:	0018      	movs	r0, r3
 800638e:	f000 fd4e 	bl	8006e2e <USBD_SetFeature>
          break;
 8006392:	e00d      	b.n	80063b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0011      	movs	r1, r2
 800639a:	0018      	movs	r0, r3
 800639c:	f000 fd5d 	bl	8006e5a <USBD_ClrFeature>
          break;
 80063a0:	e006      	b.n	80063b0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	0011      	movs	r1, r2
 80063a8:	0018      	movs	r0, r3
 80063aa:	f000 fdb4 	bl	8006f16 <USBD_CtlError>
          break;
 80063ae:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80063b0:	e006      	b.n	80063c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	0011      	movs	r1, r2
 80063b8:	0018      	movs	r0, r3
 80063ba:	f000 fdac 	bl	8006f16 <USBD_CtlError>
      break;
 80063be:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80063c0:	230f      	movs	r3, #15
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	781b      	ldrb	r3, [r3, #0]
}
 80063c6:	0018      	movs	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	b004      	add	sp, #16
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	46c0      	nop			@ (mov r8, r8)
 80063d0:	08007aa8 	.word	0x08007aa8

080063d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80063d4:	b5b0      	push	{r4, r5, r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063de:	230f      	movs	r3, #15
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	001a      	movs	r2, r3
 80063ec:	2360      	movs	r3, #96	@ 0x60
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b40      	cmp	r3, #64	@ 0x40
 80063f2:	d004      	beq.n	80063fe <USBD_StdItfReq+0x2a>
 80063f4:	d839      	bhi.n	800646a <USBD_StdItfReq+0x96>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <USBD_StdItfReq+0x2a>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d135      	bne.n	800646a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	23a7      	movs	r3, #167	@ 0xa7
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	5cd3      	ldrb	r3, [r2, r3]
 8006406:	3b01      	subs	r3, #1
 8006408:	2b02      	cmp	r3, #2
 800640a:	d825      	bhi.n	8006458 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	889b      	ldrh	r3, [r3, #4]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b01      	cmp	r3, #1
 8006414:	d819      	bhi.n	800644a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	23ad      	movs	r3, #173	@ 0xad
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	58d3      	ldr	r3, [r2, r3]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	250f      	movs	r5, #15
 8006422:	197c      	adds	r4, r7, r5
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	0010      	movs	r0, r2
 800642a:	4798      	blx	r3
 800642c:	0003      	movs	r3, r0
 800642e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	88db      	ldrh	r3, [r3, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d116      	bne.n	8006466 <USBD_StdItfReq+0x92>
 8006438:	197b      	adds	r3, r7, r5
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d112      	bne.n	8006466 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f000 fe2b 	bl	800709e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006448:	e00d      	b.n	8006466 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	0011      	movs	r1, r2
 8006450:	0018      	movs	r0, r3
 8006452:	f000 fd60 	bl	8006f16 <USBD_CtlError>
          break;
 8006456:	e006      	b.n	8006466 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	0011      	movs	r1, r2
 800645e:	0018      	movs	r0, r3
 8006460:	f000 fd59 	bl	8006f16 <USBD_CtlError>
          break;
 8006464:	e000      	b.n	8006468 <USBD_StdItfReq+0x94>
          break;
 8006466:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006468:	e006      	b.n	8006478 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	0011      	movs	r1, r2
 8006470:	0018      	movs	r0, r3
 8006472:	f000 fd50 	bl	8006f16 <USBD_CtlError>
      break;
 8006476:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	0018      	movs	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	b004      	add	sp, #16
 8006480:	bdb0      	pop	{r4, r5, r7, pc}

08006482 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006482:	b5b0      	push	{r4, r5, r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800648c:	230f      	movs	r3, #15
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	2200      	movs	r2, #0
 8006492:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	889a      	ldrh	r2, [r3, #4]
 8006498:	230e      	movs	r3, #14
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	001a      	movs	r2, r3
 80064a4:	2360      	movs	r3, #96	@ 0x60
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b40      	cmp	r3, #64	@ 0x40
 80064aa:	d006      	beq.n	80064ba <USBD_StdEPReq+0x38>
 80064ac:	d900      	bls.n	80064b0 <USBD_StdEPReq+0x2e>
 80064ae:	e190      	b.n	80067d2 <USBD_StdEPReq+0x350>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <USBD_StdEPReq+0x4c>
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d000      	beq.n	80064ba <USBD_StdEPReq+0x38>
 80064b8:	e18b      	b.n	80067d2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	23ad      	movs	r3, #173	@ 0xad
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	58d3      	ldr	r3, [r2, r3]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	0010      	movs	r0, r2
 80064ca:	4798      	blx	r3
      break;
 80064cc:	e188      	b.n	80067e0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	001a      	movs	r2, r3
 80064d4:	2360      	movs	r3, #96	@ 0x60
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d10f      	bne.n	80064fc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	23ad      	movs	r3, #173	@ 0xad
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	58d3      	ldr	r3, [r2, r3]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	250f      	movs	r5, #15
 80064e8:	197c      	adds	r4, r7, r5
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	0010      	movs	r0, r2
 80064f0:	4798      	blx	r3
 80064f2:	0003      	movs	r3, r0
 80064f4:	7023      	strb	r3, [r4, #0]

        return ret;
 80064f6:	197b      	adds	r3, r7, r5
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	e174      	b.n	80067e6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d007      	beq.n	8006514 <USBD_StdEPReq+0x92>
 8006504:	dd00      	ble.n	8006508 <USBD_StdEPReq+0x86>
 8006506:	e15c      	b.n	80067c2 <USBD_StdEPReq+0x340>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d100      	bne.n	800650e <USBD_StdEPReq+0x8c>
 800650c:	e092      	b.n	8006634 <USBD_StdEPReq+0x1b2>
 800650e:	2b01      	cmp	r3, #1
 8006510:	d04b      	beq.n	80065aa <USBD_StdEPReq+0x128>
 8006512:	e156      	b.n	80067c2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	23a7      	movs	r3, #167	@ 0xa7
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	5cd3      	ldrb	r3, [r2, r3]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d002      	beq.n	8006526 <USBD_StdEPReq+0xa4>
 8006520:	2b03      	cmp	r3, #3
 8006522:	d01d      	beq.n	8006560 <USBD_StdEPReq+0xde>
 8006524:	e039      	b.n	800659a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006526:	220e      	movs	r2, #14
 8006528:	18bb      	adds	r3, r7, r2
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d010      	beq.n	8006552 <USBD_StdEPReq+0xd0>
 8006530:	18bb      	adds	r3, r7, r2
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b80      	cmp	r3, #128	@ 0x80
 8006536:	d00c      	beq.n	8006552 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006538:	18bb      	adds	r3, r7, r2
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	0011      	movs	r1, r2
 8006540:	0018      	movs	r0, r3
 8006542:	f001 f8d4 	bl	80076ee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2180      	movs	r1, #128	@ 0x80
 800654a:	0018      	movs	r0, r3
 800654c:	f001 f8cf 	bl	80076ee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006550:	e02a      	b.n	80065a8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	0011      	movs	r1, r2
 8006558:	0018      	movs	r0, r3
 800655a:	f000 fcdc 	bl	8006f16 <USBD_CtlError>
              break;
 800655e:	e023      	b.n	80065a8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	885b      	ldrh	r3, [r3, #2]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d113      	bne.n	8006590 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006568:	220e      	movs	r2, #14
 800656a:	18bb      	adds	r3, r7, r2
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <USBD_StdEPReq+0x10e>
 8006572:	18bb      	adds	r3, r7, r2
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b80      	cmp	r3, #128	@ 0x80
 8006578:	d00a      	beq.n	8006590 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	88db      	ldrh	r3, [r3, #6]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006582:	18bb      	adds	r3, r7, r2
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	0011      	movs	r1, r2
 800658a:	0018      	movs	r0, r3
 800658c:	f001 f8af 	bl	80076ee <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	0018      	movs	r0, r3
 8006594:	f000 fd83 	bl	800709e <USBD_CtlSendStatus>

              break;
 8006598:	e006      	b.n	80065a8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 fcb8 	bl	8006f16 <USBD_CtlError>
              break;
 80065a6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80065a8:	e112      	b.n	80067d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	23a7      	movs	r3, #167	@ 0xa7
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	5cd3      	ldrb	r3, [r2, r3]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d002      	beq.n	80065bc <USBD_StdEPReq+0x13a>
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d01d      	beq.n	80065f6 <USBD_StdEPReq+0x174>
 80065ba:	e032      	b.n	8006622 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065bc:	220e      	movs	r2, #14
 80065be:	18bb      	adds	r3, r7, r2
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d010      	beq.n	80065e8 <USBD_StdEPReq+0x166>
 80065c6:	18bb      	adds	r3, r7, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b80      	cmp	r3, #128	@ 0x80
 80065cc:	d00c      	beq.n	80065e8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065ce:	18bb      	adds	r3, r7, r2
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0011      	movs	r1, r2
 80065d6:	0018      	movs	r0, r3
 80065d8:	f001 f889 	bl	80076ee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2180      	movs	r1, #128	@ 0x80
 80065e0:	0018      	movs	r0, r3
 80065e2:	f001 f884 	bl	80076ee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065e6:	e024      	b.n	8006632 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0011      	movs	r1, r2
 80065ee:	0018      	movs	r0, r3
 80065f0:	f000 fc91 	bl	8006f16 <USBD_CtlError>
              break;
 80065f4:	e01d      	b.n	8006632 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	885b      	ldrh	r3, [r3, #2]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d118      	bne.n	8006630 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065fe:	210e      	movs	r1, #14
 8006600:	187b      	adds	r3, r7, r1
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	227f      	movs	r2, #127	@ 0x7f
 8006606:	4013      	ands	r3, r2
 8006608:	d006      	beq.n	8006618 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800660a:	187b      	adds	r3, r7, r1
 800660c:	781a      	ldrb	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	0011      	movs	r1, r2
 8006612:	0018      	movs	r0, r3
 8006614:	f001 f896 	bl	8007744 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	0018      	movs	r0, r3
 800661c:	f000 fd3f 	bl	800709e <USBD_CtlSendStatus>
              }
              break;
 8006620:	e006      	b.n	8006630 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	0011      	movs	r1, r2
 8006628:	0018      	movs	r0, r3
 800662a:	f000 fc74 	bl	8006f16 <USBD_CtlError>
              break;
 800662e:	e000      	b.n	8006632 <USBD_StdEPReq+0x1b0>
              break;
 8006630:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006632:	e0cd      	b.n	80067d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	23a7      	movs	r3, #167	@ 0xa7
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	5cd3      	ldrb	r3, [r2, r3]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d002      	beq.n	8006646 <USBD_StdEPReq+0x1c4>
 8006640:	2b03      	cmp	r3, #3
 8006642:	d03c      	beq.n	80066be <USBD_StdEPReq+0x23c>
 8006644:	e0b5      	b.n	80067b2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006646:	220e      	movs	r2, #14
 8006648:	18bb      	adds	r3, r7, r2
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <USBD_StdEPReq+0x1e4>
 8006650:	18bb      	adds	r3, r7, r2
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b80      	cmp	r3, #128	@ 0x80
 8006656:	d006      	beq.n	8006666 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0011      	movs	r1, r2
 800665e:	0018      	movs	r0, r3
 8006660:	f000 fc59 	bl	8006f16 <USBD_CtlError>
                break;
 8006664:	e0ac      	b.n	80067c0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006666:	220e      	movs	r2, #14
 8006668:	18bb      	adds	r3, r7, r2
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b25b      	sxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	da0c      	bge.n	800668c <USBD_StdEPReq+0x20a>
 8006672:	18bb      	adds	r3, r7, r2
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	227f      	movs	r2, #127	@ 0x7f
 8006678:	401a      	ands	r2, r3
 800667a:	0013      	movs	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	189b      	adds	r3, r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	3310      	adds	r3, #16
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	18d3      	adds	r3, r2, r3
 8006688:	3304      	adds	r3, #4
 800668a:	e00d      	b.n	80066a8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800668c:	230e      	movs	r3, #14
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	227f      	movs	r2, #127	@ 0x7f
 8006694:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006696:	0013      	movs	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	189b      	adds	r3, r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	3351      	adds	r3, #81	@ 0x51
 80066a0:	33ff      	adds	r3, #255	@ 0xff
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	18d3      	adds	r3, r2, r3
 80066a6:	3304      	adds	r3, #4
 80066a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	0018      	movs	r0, r3
 80066b8:	f000 fcab 	bl	8007012 <USBD_CtlSendData>
              break;
 80066bc:	e080      	b.n	80067c0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066be:	220e      	movs	r2, #14
 80066c0:	18bb      	adds	r3, r7, r2
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	b25b      	sxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	da14      	bge.n	80066f4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066ca:	18bb      	adds	r3, r7, r2
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	220f      	movs	r2, #15
 80066d0:	401a      	ands	r2, r3
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	0013      	movs	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	18cb      	adds	r3, r1, r3
 80066de:	3318      	adds	r3, #24
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d11e      	bne.n	8006724 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	0011      	movs	r1, r2
 80066ec:	0018      	movs	r0, r3
 80066ee:	f000 fc12 	bl	8006f16 <USBD_CtlError>
                  break;
 80066f2:	e065      	b.n	80067c0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066f4:	230e      	movs	r3, #14
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	220f      	movs	r2, #15
 80066fc:	401a      	ands	r2, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	23ac      	movs	r3, #172	@ 0xac
 8006702:	0059      	lsls	r1, r3, #1
 8006704:	0013      	movs	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	189b      	adds	r3, r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	18c3      	adds	r3, r0, r3
 800670e:	185b      	adds	r3, r3, r1
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	0011      	movs	r1, r2
 800671c:	0018      	movs	r0, r3
 800671e:	f000 fbfa 	bl	8006f16 <USBD_CtlError>
                  break;
 8006722:	e04d      	b.n	80067c0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006724:	220e      	movs	r2, #14
 8006726:	18bb      	adds	r3, r7, r2
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	b25b      	sxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	da0c      	bge.n	800674a <USBD_StdEPReq+0x2c8>
 8006730:	18bb      	adds	r3, r7, r2
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	227f      	movs	r2, #127	@ 0x7f
 8006736:	401a      	ands	r2, r3
 8006738:	0013      	movs	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	189b      	adds	r3, r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	3310      	adds	r3, #16
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	18d3      	adds	r3, r2, r3
 8006746:	3304      	adds	r3, #4
 8006748:	e00d      	b.n	8006766 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800674a:	230e      	movs	r3, #14
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	227f      	movs	r2, #127	@ 0x7f
 8006752:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006754:	0013      	movs	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	189b      	adds	r3, r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	3351      	adds	r3, #81	@ 0x51
 800675e:	33ff      	adds	r3, #255	@ 0xff
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	18d3      	adds	r3, r2, r3
 8006764:	3304      	adds	r3, #4
 8006766:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006768:	220e      	movs	r2, #14
 800676a:	18bb      	adds	r3, r7, r2
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <USBD_StdEPReq+0x2f8>
 8006772:	18bb      	adds	r3, r7, r2
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b80      	cmp	r3, #128	@ 0x80
 8006778:	d103      	bne.n	8006782 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	e010      	b.n	80067a4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006782:	230e      	movs	r3, #14
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	0011      	movs	r1, r2
 800678c:	0018      	movs	r0, r3
 800678e:	f001 f804 	bl	800779a <USBD_LL_IsStallEP>
 8006792:	1e03      	subs	r3, r0, #0
 8006794:	d003      	beq.n	800679e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2201      	movs	r2, #1
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	e002      	b.n	80067a4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	0018      	movs	r0, r3
 80067ac:	f000 fc31 	bl	8007012 <USBD_CtlSendData>
              break;
 80067b0:	e006      	b.n	80067c0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	0011      	movs	r1, r2
 80067b8:	0018      	movs	r0, r3
 80067ba:	f000 fbac 	bl	8006f16 <USBD_CtlError>
              break;
 80067be:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80067c0:	e006      	b.n	80067d0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	0011      	movs	r1, r2
 80067c8:	0018      	movs	r0, r3
 80067ca:	f000 fba4 	bl	8006f16 <USBD_CtlError>
          break;
 80067ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80067d0:	e006      	b.n	80067e0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	0011      	movs	r1, r2
 80067d8:	0018      	movs	r0, r3
 80067da:	f000 fb9c 	bl	8006f16 <USBD_CtlError>
      break;
 80067de:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80067e0:	230f      	movs	r3, #15
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	781b      	ldrb	r3, [r3, #0]
}
 80067e6:	0018      	movs	r0, r3
 80067e8:	46bd      	mov	sp, r7
 80067ea:	b004      	add	sp, #16
 80067ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080067f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067fa:	2308      	movs	r3, #8
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	2200      	movs	r2, #0
 8006800:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006806:	230b      	movs	r3, #11
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	885b      	ldrh	r3, [r3, #2]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b07      	cmp	r3, #7
 8006818:	d900      	bls.n	800681c <USBD_GetDescriptor+0x2c>
 800681a:	e159      	b.n	8006ad0 <USBD_GetDescriptor+0x2e0>
 800681c:	009a      	lsls	r2, r3, #2
 800681e:	4bcb      	ldr	r3, [pc, #812]	@ (8006b4c <USBD_GetDescriptor+0x35c>)
 8006820:	18d3      	adds	r3, r2, r3
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	23ac      	movs	r3, #172	@ 0xac
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	58d3      	ldr	r3, [r2, r3]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	2108      	movs	r1, #8
 8006836:	1879      	adds	r1, r7, r1
 8006838:	0010      	movs	r0, r2
 800683a:	4798      	blx	r3
 800683c:	0003      	movs	r3, r0
 800683e:	60fb      	str	r3, [r7, #12]
      break;
 8006840:	e153      	b.n	8006aea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	7c1b      	ldrb	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10f      	bne.n	800686a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	23ad      	movs	r3, #173	@ 0xad
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	58d3      	ldr	r3, [r2, r3]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	2208      	movs	r2, #8
 8006856:	18ba      	adds	r2, r7, r2
 8006858:	0010      	movs	r0, r2
 800685a:	4798      	blx	r3
 800685c:	0003      	movs	r3, r0
 800685e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	2202      	movs	r2, #2
 8006866:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006868:	e13f      	b.n	8006aea <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	23ad      	movs	r3, #173	@ 0xad
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	58d3      	ldr	r3, [r2, r3]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	2208      	movs	r2, #8
 8006876:	18ba      	adds	r2, r7, r2
 8006878:	0010      	movs	r0, r2
 800687a:	4798      	blx	r3
 800687c:	0003      	movs	r3, r0
 800687e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	2202      	movs	r2, #2
 8006886:	701a      	strb	r2, [r3, #0]
      break;
 8006888:	e12f      	b.n	8006aea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	885b      	ldrh	r3, [r3, #2]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b05      	cmp	r3, #5
 8006892:	d900      	bls.n	8006896 <USBD_GetDescriptor+0xa6>
 8006894:	e0d0      	b.n	8006a38 <USBD_GetDescriptor+0x248>
 8006896:	009a      	lsls	r2, r3, #2
 8006898:	4bad      	ldr	r3, [pc, #692]	@ (8006b50 <USBD_GetDescriptor+0x360>)
 800689a:	18d3      	adds	r3, r2, r3
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	23ac      	movs	r3, #172	@ 0xac
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	58d3      	ldr	r3, [r2, r3]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00d      	beq.n	80068ca <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	23ac      	movs	r3, #172	@ 0xac
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	58d3      	ldr	r3, [r2, r3]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7c12      	ldrb	r2, [r2, #16]
 80068bc:	2108      	movs	r1, #8
 80068be:	1879      	adds	r1, r7, r1
 80068c0:	0010      	movs	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	0003      	movs	r3, r0
 80068c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068c8:	e0c3      	b.n	8006a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 fb20 	bl	8006f16 <USBD_CtlError>
            err++;
 80068d6:	210b      	movs	r1, #11
 80068d8:	187b      	adds	r3, r7, r1
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	3201      	adds	r2, #1
 80068e0:	701a      	strb	r2, [r3, #0]
          break;
 80068e2:	e0b6      	b.n	8006a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	23ac      	movs	r3, #172	@ 0xac
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	58d3      	ldr	r3, [r2, r3]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00d      	beq.n	800690e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	23ac      	movs	r3, #172	@ 0xac
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	58d3      	ldr	r3, [r2, r3]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	7c12      	ldrb	r2, [r2, #16]
 8006900:	2108      	movs	r1, #8
 8006902:	1879      	adds	r1, r7, r1
 8006904:	0010      	movs	r0, r2
 8006906:	4798      	blx	r3
 8006908:	0003      	movs	r3, r0
 800690a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800690c:	e0a1      	b.n	8006a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	0011      	movs	r1, r2
 8006914:	0018      	movs	r0, r3
 8006916:	f000 fafe 	bl	8006f16 <USBD_CtlError>
            err++;
 800691a:	210b      	movs	r1, #11
 800691c:	187b      	adds	r3, r7, r1
 800691e:	781a      	ldrb	r2, [r3, #0]
 8006920:	187b      	adds	r3, r7, r1
 8006922:	3201      	adds	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
          break;
 8006926:	e094      	b.n	8006a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	23ac      	movs	r3, #172	@ 0xac
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	58d3      	ldr	r3, [r2, r3]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	23ac      	movs	r3, #172	@ 0xac
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	58d3      	ldr	r3, [r2, r3]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	7c12      	ldrb	r2, [r2, #16]
 8006944:	2108      	movs	r1, #8
 8006946:	1879      	adds	r1, r7, r1
 8006948:	0010      	movs	r0, r2
 800694a:	4798      	blx	r3
 800694c:	0003      	movs	r3, r0
 800694e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006950:	e07f      	b.n	8006a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	0011      	movs	r1, r2
 8006958:	0018      	movs	r0, r3
 800695a:	f000 fadc 	bl	8006f16 <USBD_CtlError>
            err++;
 800695e:	210b      	movs	r1, #11
 8006960:	187b      	adds	r3, r7, r1
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	187b      	adds	r3, r7, r1
 8006966:	3201      	adds	r2, #1
 8006968:	701a      	strb	r2, [r3, #0]
          break;
 800696a:	e072      	b.n	8006a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	23ac      	movs	r3, #172	@ 0xac
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	58d3      	ldr	r3, [r2, r3]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	23ac      	movs	r3, #172	@ 0xac
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	58d3      	ldr	r3, [r2, r3]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	7c12      	ldrb	r2, [r2, #16]
 8006988:	2108      	movs	r1, #8
 800698a:	1879      	adds	r1, r7, r1
 800698c:	0010      	movs	r0, r2
 800698e:	4798      	blx	r3
 8006990:	0003      	movs	r3, r0
 8006992:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006994:	e05d      	b.n	8006a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	0011      	movs	r1, r2
 800699c:	0018      	movs	r0, r3
 800699e:	f000 faba 	bl	8006f16 <USBD_CtlError>
            err++;
 80069a2:	210b      	movs	r1, #11
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	3201      	adds	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
          break;
 80069ae:	e050      	b.n	8006a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	23ac      	movs	r3, #172	@ 0xac
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	58d3      	ldr	r3, [r2, r3]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00d      	beq.n	80069da <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	23ac      	movs	r3, #172	@ 0xac
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	58d3      	ldr	r3, [r2, r3]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	7c12      	ldrb	r2, [r2, #16]
 80069cc:	2108      	movs	r1, #8
 80069ce:	1879      	adds	r1, r7, r1
 80069d0:	0010      	movs	r0, r2
 80069d2:	4798      	blx	r3
 80069d4:	0003      	movs	r3, r0
 80069d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069d8:	e03b      	b.n	8006a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	0011      	movs	r1, r2
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 fa98 	bl	8006f16 <USBD_CtlError>
            err++;
 80069e6:	210b      	movs	r1, #11
 80069e8:	187b      	adds	r3, r7, r1
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	187b      	adds	r3, r7, r1
 80069ee:	3201      	adds	r2, #1
 80069f0:	701a      	strb	r2, [r3, #0]
          break;
 80069f2:	e02e      	b.n	8006a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	23ac      	movs	r3, #172	@ 0xac
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	58d3      	ldr	r3, [r2, r3]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00d      	beq.n	8006a1e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	23ac      	movs	r3, #172	@ 0xac
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	58d3      	ldr	r3, [r2, r3]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	7c12      	ldrb	r2, [r2, #16]
 8006a10:	2108      	movs	r1, #8
 8006a12:	1879      	adds	r1, r7, r1
 8006a14:	0010      	movs	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	0003      	movs	r3, r0
 8006a1a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1c:	e019      	b.n	8006a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0011      	movs	r1, r2
 8006a24:	0018      	movs	r0, r3
 8006a26:	f000 fa76 	bl	8006f16 <USBD_CtlError>
            err++;
 8006a2a:	210b      	movs	r1, #11
 8006a2c:	187b      	adds	r3, r7, r1
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	3201      	adds	r2, #1
 8006a34:	701a      	strb	r2, [r3, #0]
          break;
 8006a36:	e00c      	b.n	8006a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f000 fa69 	bl	8006f16 <USBD_CtlError>
          err++;
 8006a44:	210b      	movs	r1, #11
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	3201      	adds	r2, #1
 8006a4e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006a50:	e04b      	b.n	8006aea <USBD_GetDescriptor+0x2fa>
 8006a52:	e04a      	b.n	8006aea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7c1b      	ldrb	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	23ad      	movs	r3, #173	@ 0xad
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	58d3      	ldr	r3, [r2, r3]
 8006a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a66:	2208      	movs	r2, #8
 8006a68:	18ba      	adds	r2, r7, r2
 8006a6a:	0010      	movs	r0, r2
 8006a6c:	4798      	blx	r3
 8006a6e:	0003      	movs	r3, r0
 8006a70:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a72:	e03a      	b.n	8006aea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	0011      	movs	r1, r2
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 fa4b 	bl	8006f16 <USBD_CtlError>
        err++;
 8006a80:	210b      	movs	r1, #11
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	187b      	adds	r3, r7, r1
 8006a88:	3201      	adds	r2, #1
 8006a8a:	701a      	strb	r2, [r3, #0]
      break;
 8006a8c:	e02d      	b.n	8006aea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7c1b      	ldrb	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10f      	bne.n	8006ab6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	23ad      	movs	r3, #173	@ 0xad
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	58d3      	ldr	r3, [r2, r3]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	18ba      	adds	r2, r7, r2
 8006aa4:	0010      	movs	r0, r2
 8006aa6:	4798      	blx	r3
 8006aa8:	0003      	movs	r3, r0
 8006aaa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ab4:	e019      	b.n	8006aea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	0011      	movs	r1, r2
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 fa2a 	bl	8006f16 <USBD_CtlError>
        err++;
 8006ac2:	210b      	movs	r1, #11
 8006ac4:	187b      	adds	r3, r7, r1
 8006ac6:	781a      	ldrb	r2, [r3, #0]
 8006ac8:	187b      	adds	r3, r7, r1
 8006aca:	3201      	adds	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
      break;
 8006ace:	e00c      	b.n	8006aea <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0011      	movs	r1, r2
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 fa1d 	bl	8006f16 <USBD_CtlError>
      err++;
 8006adc:	210b      	movs	r1, #11
 8006ade:	187b      	adds	r3, r7, r1
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	187b      	adds	r3, r7, r1
 8006ae4:	3201      	adds	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]
      break;
 8006ae8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8006aea:	230b      	movs	r3, #11
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d127      	bne.n	8006b44 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006af4:	2108      	movs	r1, #8
 8006af6:	187b      	adds	r3, r7, r1
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d019      	beq.n	8006b32 <USBD_GetDescriptor+0x342>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d015      	beq.n	8006b32 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	88da      	ldrh	r2, [r3, #6]
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	1c18      	adds	r0, r3, #0
 8006b10:	1c11      	adds	r1, r2, #0
 8006b12:	b28a      	uxth	r2, r1
 8006b14:	b283      	uxth	r3, r0
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d900      	bls.n	8006b1c <USBD_GetDescriptor+0x32c>
 8006b1a:	1c01      	adds	r1, r0, #0
 8006b1c:	b28a      	uxth	r2, r1
 8006b1e:	2108      	movs	r1, #8
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b24:	187b      	adds	r3, r7, r1
 8006b26:	881a      	ldrh	r2, [r3, #0]
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 fa70 	bl	8007012 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	88db      	ldrh	r3, [r3, #6]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d105      	bne.n	8006b46 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f000 faae 	bl	800709e <USBD_CtlSendStatus>
 8006b42:	e000      	b.n	8006b46 <USBD_GetDescriptor+0x356>
    return;
 8006b44:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b004      	add	sp, #16
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	08007ad0 	.word	0x08007ad0
 8006b50:	08007af0 	.word	0x08007af0

08006b54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b54:	b590      	push	{r4, r7, lr}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	889b      	ldrh	r3, [r3, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d13d      	bne.n	8006be2 <USBD_SetAddress+0x8e>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	88db      	ldrh	r3, [r3, #6]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d139      	bne.n	8006be2 <USBD_SetAddress+0x8e>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	885b      	ldrh	r3, [r3, #2]
 8006b72:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b74:	d835      	bhi.n	8006be2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	885b      	ldrh	r3, [r3, #2]
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	230f      	movs	r3, #15
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	217f      	movs	r1, #127	@ 0x7f
 8006b82:	400a      	ands	r2, r1
 8006b84:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	23a7      	movs	r3, #167	@ 0xa7
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	5cd3      	ldrb	r3, [r2, r3]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d106      	bne.n	8006ba0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	0011      	movs	r1, r2
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f000 f9bc 	bl	8006f16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9e:	e027      	b.n	8006bf0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	240f      	movs	r4, #15
 8006ba4:	193a      	adds	r2, r7, r4
 8006ba6:	4914      	ldr	r1, [pc, #80]	@ (8006bf8 <USBD_SetAddress+0xa4>)
 8006ba8:	7812      	ldrb	r2, [r2, #0]
 8006baa:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bac:	193b      	adds	r3, r7, r4
 8006bae:	781a      	ldrb	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	0011      	movs	r1, r2
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 fe21 	bl	80077fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f000 fa6e 	bl	800709e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bc2:	193b      	adds	r3, r7, r4
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	23a7      	movs	r3, #167	@ 0xa7
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd4:	e00c      	b.n	8006bf0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	23a7      	movs	r3, #167	@ 0xa7
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	2101      	movs	r1, #1
 8006bde:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be0:	e006      	b.n	8006bf0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	0011      	movs	r1, r2
 8006be8:	0018      	movs	r0, r3
 8006bea:	f000 f994 	bl	8006f16 <USBD_CtlError>
  }
}
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	46c0      	nop			@ (mov r8, r8)
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b005      	add	sp, #20
 8006bf6:	bd90      	pop	{r4, r7, pc}
 8006bf8:	0000029e 	.word	0x0000029e

08006bfc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006c0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c10:	4b4b      	ldr	r3, [pc, #300]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d906      	bls.n	8006c26 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0011      	movs	r1, r2
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f000 f979 	bl	8006f16 <USBD_CtlError>
 8006c24:	e088      	b.n	8006d38 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	23a7      	movs	r3, #167	@ 0xa7
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	5cd3      	ldrb	r3, [r2, r3]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d002      	beq.n	8006c38 <USBD_SetConfig+0x3c>
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d029      	beq.n	8006c8a <USBD_SetConfig+0x8e>
 8006c36:	e071      	b.n	8006d1c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c38:	4b41      	ldr	r3, [pc, #260]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01f      	beq.n	8006c80 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006c40:	4b3f      	ldr	r3, [pc, #252]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	001a      	movs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	23a7      	movs	r3, #167	@ 0xa7
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	2103      	movs	r1, #3
 8006c52:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c54:	4b3a      	ldr	r3, [pc, #232]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7ff f8c6 	bl	8005dee <USBD_SetClassConfig>
 8006c62:	0003      	movs	r3, r0
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d106      	bne.n	8006c76 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	0011      	movs	r1, r2
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f000 f951 	bl	8006f16 <USBD_CtlError>
            return;
 8006c74:	e060      	b.n	8006d38 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f000 fa10 	bl	800709e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c7e:	e05b      	b.n	8006d38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	0018      	movs	r0, r3
 8006c84:	f000 fa0b 	bl	800709e <USBD_CtlSendStatus>
        break;
 8006c88:	e056      	b.n	8006d38 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d115      	bne.n	8006cbe <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	23a7      	movs	r3, #167	@ 0xa7
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	2102      	movs	r1, #2
 8006c9a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006c9c:	4b28      	ldr	r3, [pc, #160]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	001a      	movs	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006ca6:	4b26      	ldr	r3, [pc, #152]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006ca8:	781a      	ldrb	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	0011      	movs	r1, r2
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f7ff f8c4 	bl	8005e3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 f9f1 	bl	800709e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006cbc:	e03c      	b.n	8006d38 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006cbe:	4b20      	ldr	r3, [pc, #128]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d022      	beq.n	8006d12 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	0011      	movs	r1, r2
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f7ff f8b0 	bl	8005e3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006cdc:	4b18      	ldr	r3, [pc, #96]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	001a      	movs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ce6:	4b16      	ldr	r3, [pc, #88]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	0011      	movs	r1, r2
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7ff f87d 	bl	8005dee <USBD_SetClassConfig>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d106      	bne.n	8006d08 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0011      	movs	r1, r2
 8006d00:	0018      	movs	r0, r3
 8006d02:	f000 f908 	bl	8006f16 <USBD_CtlError>
            return;
 8006d06:	e017      	b.n	8006d38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f000 f9c7 	bl	800709e <USBD_CtlSendStatus>
        break;
 8006d10:	e012      	b.n	8006d38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f000 f9c2 	bl	800709e <USBD_CtlSendStatus>
        break;
 8006d1a:	e00d      	b.n	8006d38 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	0011      	movs	r1, r2
 8006d22:	0018      	movs	r0, r3
 8006d24:	f000 f8f7 	bl	8006f16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006d28:	4b05      	ldr	r3, [pc, #20]	@ (8006d40 <USBD_SetConfig+0x144>)
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	0011      	movs	r1, r2
 8006d30:	0018      	movs	r0, r3
 8006d32:	f7ff f883 	bl	8005e3c <USBD_ClrClassConfig>
        break;
 8006d36:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	20000188 	.word	0x20000188

08006d44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d006      	beq.n	8006d64 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	0011      	movs	r1, r2
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f000 f8da 	bl	8006f16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d62:	e026      	b.n	8006db2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	23a7      	movs	r3, #167	@ 0xa7
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	5cd3      	ldrb	r3, [r2, r3]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	dc02      	bgt.n	8006d76 <USBD_GetConfig+0x32>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dc03      	bgt.n	8006d7c <USBD_GetConfig+0x38>
 8006d74:	e016      	b.n	8006da4 <USBD_GetConfig+0x60>
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d00c      	beq.n	8006d94 <USBD_GetConfig+0x50>
 8006d7a:	e013      	b.n	8006da4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3308      	adds	r3, #8
 8006d86:	0019      	movs	r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 f940 	bl	8007012 <USBD_CtlSendData>
        break;
 8006d92:	e00e      	b.n	8006db2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	1d19      	adds	r1, r3, #4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f000 f938 	bl	8007012 <USBD_CtlSendData>
        break;
 8006da2:	e006      	b.n	8006db2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	0011      	movs	r1, r2
 8006daa:	0018      	movs	r0, r3
 8006dac:	f000 f8b3 	bl	8006f16 <USBD_CtlError>
        break;
 8006db0:	46c0      	nop			@ (mov r8, r8)
}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b002      	add	sp, #8
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	23a7      	movs	r3, #167	@ 0xa7
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	5cd3      	ldrb	r3, [r2, r3]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d822      	bhi.n	8006e18 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d006      	beq.n	8006de8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0011      	movs	r1, r2
 8006de0:	0018      	movs	r0, r3
 8006de2:	f000 f898 	bl	8006f16 <USBD_CtlError>
        break;
 8006de6:	e01e      	b.n	8006e26 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	23a9      	movs	r3, #169	@ 0xa9
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	58d3      	ldr	r3, [r2, r3]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	0019      	movs	r1, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	0018      	movs	r0, r3
 8006e12:	f000 f8fe 	bl	8007012 <USBD_CtlSendData>
      break;
 8006e16:	e006      	b.n	8006e26 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	0011      	movs	r1, r2
 8006e1e:	0018      	movs	r0, r3
 8006e20:	f000 f879 	bl	8006f16 <USBD_CtlError>
      break;
 8006e24:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b002      	add	sp, #8
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	885b      	ldrh	r3, [r3, #2]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d108      	bne.n	8006e52 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	23a9      	movs	r3, #169	@ 0xa9
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	2101      	movs	r1, #1
 8006e48:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f000 f926 	bl	800709e <USBD_CtlSendStatus>
  }
}
 8006e52:	46c0      	nop			@ (mov r8, r8)
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b002      	add	sp, #8
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	23a7      	movs	r3, #167	@ 0xa7
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	5cd3      	ldrb	r3, [r2, r3]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d80d      	bhi.n	8006e8e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	885b      	ldrh	r3, [r3, #2]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d110      	bne.n	8006e9c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	23a9      	movs	r3, #169	@ 0xa9
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	2100      	movs	r1, #0
 8006e82:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	0018      	movs	r0, r3
 8006e88:	f000 f909 	bl	800709e <USBD_CtlSendStatus>
      }
      break;
 8006e8c:	e006      	b.n	8006e9c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	0011      	movs	r1, r2
 8006e94:	0018      	movs	r0, r3
 8006e96:	f000 f83e 	bl	8006f16 <USBD_CtlError>
      break;
 8006e9a:	e000      	b.n	8006e9e <USBD_ClrFeature+0x44>
      break;
 8006e9c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006e9e:	46c0      	nop			@ (mov r8, r8)
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b002      	add	sp, #8
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	785a      	ldrb	r2, [r3, #1]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	001a      	movs	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	3303      	adds	r3, #3
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	18d3      	adds	r3, r2, r3
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	3304      	adds	r3, #4
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	001a      	movs	r2, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	3305      	adds	r3, #5
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	18d3      	adds	r3, r2, r3
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	3306      	adds	r3, #6
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	001a      	movs	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	3307      	adds	r3, #7
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	18d3      	adds	r3, r2, r3
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	80da      	strh	r2, [r3, #6]

}
 8006f0e:	46c0      	nop			@ (mov r8, r8)
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b002      	add	sp, #8
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2180      	movs	r1, #128	@ 0x80
 8006f24:	0018      	movs	r0, r3
 8006f26:	f000 fbe2 	bl	80076ee <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f000 fbdd 	bl	80076ee <USBD_LL_StallEP>
}
 8006f34:	46c0      	nop			@ (mov r8, r8)
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b002      	add	sp, #8
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f3c:	b590      	push	{r4, r7, lr}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f48:	2417      	movs	r4, #23
 8006f4a:	193b      	adds	r3, r7, r4
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d03c      	beq.n	8006fd0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f000 f83d 	bl	8006fd8 <USBD_GetLen>
 8006f5e:	0003      	movs	r3, r0
 8006f60:	3301      	adds	r3, #1
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	18db      	adds	r3, r3, r3
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006f6c:	193b      	adds	r3, r7, r4
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	193a      	adds	r2, r7, r4
 8006f72:	1c59      	adds	r1, r3, #1
 8006f74:	7011      	strb	r1, [r2, #0]
 8006f76:	001a      	movs	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	189b      	adds	r3, r3, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006f82:	193b      	adds	r3, r7, r4
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	193a      	adds	r2, r7, r4
 8006f88:	1c59      	adds	r1, r3, #1
 8006f8a:	7011      	strb	r1, [r2, #0]
 8006f8c:	001a      	movs	r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	189b      	adds	r3, r3, r2
 8006f92:	2203      	movs	r2, #3
 8006f94:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f96:	e017      	b.n	8006fc8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	60fa      	str	r2, [r7, #12]
 8006f9e:	2417      	movs	r4, #23
 8006fa0:	193a      	adds	r2, r7, r4
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	1939      	adds	r1, r7, r4
 8006fa6:	1c50      	adds	r0, r2, #1
 8006fa8:	7008      	strb	r0, [r1, #0]
 8006faa:	0011      	movs	r1, r2
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	1852      	adds	r2, r2, r1
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006fb4:	193b      	adds	r3, r7, r4
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	193a      	adds	r2, r7, r4
 8006fba:	1c59      	adds	r1, r3, #1
 8006fbc:	7011      	strb	r1, [r2, #0]
 8006fbe:	001a      	movs	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e3      	bne.n	8006f98 <USBD_GetString+0x5c>
    }
  }
}
 8006fd0:	46c0      	nop			@ (mov r8, r8)
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	b007      	add	sp, #28
 8006fd6:	bd90      	pop	{r4, r7, pc}

08006fd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fe0:	230f      	movs	r3, #15
 8006fe2:	18fb      	adds	r3, r7, r3
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006fe8:	e008      	b.n	8006ffc <USBD_GetLen+0x24>
  {
    len++;
 8006fea:	210f      	movs	r1, #15
 8006fec:	187b      	adds	r3, r7, r1
 8006fee:	781a      	ldrb	r2, [r3, #0]
 8006ff0:	187b      	adds	r3, r7, r1
 8006ff2:	3201      	adds	r2, #1
 8006ff4:	701a      	strb	r2, [r3, #0]
    buf++;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f2      	bne.n	8006fea <USBD_GetLen+0x12>
  }

  return len;
 8007004:	230f      	movs	r3, #15
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	781b      	ldrb	r3, [r3, #0]
}
 800700a:	0018      	movs	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	b004      	add	sp, #16
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	1dbb      	adds	r3, r7, #6
 800701e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	23a5      	movs	r3, #165	@ 0xa5
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	2102      	movs	r1, #2
 8007028:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800702a:	1dbb      	adds	r3, r7, #6
 800702c:	881a      	ldrh	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007032:	1dbb      	adds	r3, r7, #6
 8007034:	881a      	ldrh	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800703a:	1dbb      	adds	r3, r7, #6
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	2100      	movs	r1, #0
 8007044:	f000 fc05 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	0018      	movs	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	b004      	add	sp, #16
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	1dbb      	adds	r3, r7, #6
 800705e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007060:	1dbb      	adds	r3, r7, #6
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	2100      	movs	r1, #0
 800706a:	f000 fbf2 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	0018      	movs	r0, r3
 8007072:	46bd      	mov	sp, r7
 8007074:	b004      	add	sp, #16
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	1dbb      	adds	r3, r7, #6
 8007084:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007086:	1dbb      	adds	r3, r7, #6
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	2100      	movs	r1, #0
 8007090:	f000 fc16 	bl	80078c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	0018      	movs	r0, r3
 8007098:	46bd      	mov	sp, r7
 800709a:	b004      	add	sp, #16
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	23a5      	movs	r3, #165	@ 0xa5
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	2104      	movs	r1, #4
 80070ae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	2300      	movs	r3, #0
 80070b4:	2200      	movs	r2, #0
 80070b6:	2100      	movs	r1, #0
 80070b8:	f000 fbcb 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b002      	add	sp, #8
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	23a5      	movs	r3, #165	@ 0xa5
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	2105      	movs	r1, #5
 80070d6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	2300      	movs	r3, #0
 80070dc:	2200      	movs	r2, #0
 80070de:	2100      	movs	r1, #0
 80070e0:	f000 fbee 	bl	80078c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	0018      	movs	r0, r3
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b002      	add	sp, #8
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070f4:	490f      	ldr	r1, [pc, #60]	@ (8007134 <MX_USB_DEVICE_Init+0x44>)
 80070f6:	4b10      	ldr	r3, [pc, #64]	@ (8007138 <MX_USB_DEVICE_Init+0x48>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	0018      	movs	r0, r3
 80070fc:	f7fe fe10 	bl	8005d20 <USBD_Init>
 8007100:	1e03      	subs	r3, r0, #0
 8007102:	d001      	beq.n	8007108 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007104:	f7f9 faa8 	bl	8000658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007108:	4a0c      	ldr	r2, [pc, #48]	@ (800713c <MX_USB_DEVICE_Init+0x4c>)
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <MX_USB_DEVICE_Init+0x48>)
 800710c:	0011      	movs	r1, r2
 800710e:	0018      	movs	r0, r3
 8007110:	f7fe fe37 	bl	8005d82 <USBD_RegisterClass>
 8007114:	1e03      	subs	r3, r0, #0
 8007116:	d001      	beq.n	800711c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007118:	f7f9 fa9e 	bl	8000658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800711c:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <MX_USB_DEVICE_Init+0x48>)
 800711e:	0018      	movs	r0, r3
 8007120:	f7fe fe4f 	bl	8005dc2 <USBD_Start>
 8007124:	1e03      	subs	r3, r0, #0
 8007126:	d001      	beq.n	800712c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007128:	f7f9 fa96 	bl	8000658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800712c:	46c0      	nop			@ (mov r8, r8)
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	46c0      	nop			@ (mov r8, r8)
 8007134:	20000114 	.word	0x20000114
 8007138:	2000018c 	.word	0x2000018c
 800713c:	2000000c 	.word	0x2000000c

08007140 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	0002      	movs	r2, r0
 8007148:	6039      	str	r1, [r7, #0]
 800714a:	1dfb      	adds	r3, r7, #7
 800714c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2212      	movs	r2, #18
 8007152:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007154:	4b02      	ldr	r3, [pc, #8]	@ (8007160 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007156:	0018      	movs	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	b002      	add	sp, #8
 800715c:	bd80      	pop	{r7, pc}
 800715e:	46c0      	nop			@ (mov r8, r8)
 8007160:	20000130 	.word	0x20000130

08007164 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	0002      	movs	r2, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	1dfb      	adds	r3, r7, #7
 8007170:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2204      	movs	r2, #4
 8007176:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007178:	4b02      	ldr	r3, [pc, #8]	@ (8007184 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800717a:	0018      	movs	r0, r3
 800717c:	46bd      	mov	sp, r7
 800717e:	b002      	add	sp, #8
 8007180:	bd80      	pop	{r7, pc}
 8007182:	46c0      	nop			@ (mov r8, r8)
 8007184:	20000144 	.word	0x20000144

08007188 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	0002      	movs	r2, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	1dfb      	adds	r3, r7, #7
 8007194:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007196:	1dfb      	adds	r3, r7, #7
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4908      	ldr	r1, [pc, #32]	@ (80071c4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80071a2:	4b09      	ldr	r3, [pc, #36]	@ (80071c8 <USBD_FS_ProductStrDescriptor+0x40>)
 80071a4:	0018      	movs	r0, r3
 80071a6:	f7ff fec9 	bl	8006f3c <USBD_GetString>
 80071aa:	e005      	b.n	80071b8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	4905      	ldr	r1, [pc, #20]	@ (80071c4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80071b0:	4b05      	ldr	r3, [pc, #20]	@ (80071c8 <USBD_FS_ProductStrDescriptor+0x40>)
 80071b2:	0018      	movs	r0, r3
 80071b4:	f7ff fec2 	bl	8006f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b8:	4b02      	ldr	r3, [pc, #8]	@ (80071c4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80071ba:	0018      	movs	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	b002      	add	sp, #8
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	46c0      	nop			@ (mov r8, r8)
 80071c4:	20000450 	.word	0x20000450
 80071c8:	08007a44 	.word	0x08007a44

080071cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	0002      	movs	r2, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	1dfb      	adds	r3, r7, #7
 80071d8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4904      	ldr	r1, [pc, #16]	@ (80071f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071de:	4b05      	ldr	r3, [pc, #20]	@ (80071f4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80071e0:	0018      	movs	r0, r3
 80071e2:	f7ff feab 	bl	8006f3c <USBD_GetString>
  return USBD_StrDesc;
 80071e6:	4b02      	ldr	r3, [pc, #8]	@ (80071f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80071e8:	0018      	movs	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b002      	add	sp, #8
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20000450 	.word	0x20000450
 80071f4:	08007a5c 	.word	0x08007a5c

080071f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	0002      	movs	r2, r0
 8007200:	6039      	str	r1, [r7, #0]
 8007202:	1dfb      	adds	r3, r7, #7
 8007204:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	221a      	movs	r2, #26
 800720a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800720c:	f000 f84c 	bl	80072a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007210:	4b02      	ldr	r3, [pc, #8]	@ (800721c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007212:	0018      	movs	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	b002      	add	sp, #8
 8007218:	bd80      	pop	{r7, pc}
 800721a:	46c0      	nop			@ (mov r8, r8)
 800721c:	20000148 	.word	0x20000148

08007220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	0002      	movs	r2, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	1dfb      	adds	r3, r7, #7
 800722c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800722e:	1dfb      	adds	r3, r7, #7
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4908      	ldr	r1, [pc, #32]	@ (800725c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800723a:	4b09      	ldr	r3, [pc, #36]	@ (8007260 <USBD_FS_ConfigStrDescriptor+0x40>)
 800723c:	0018      	movs	r0, r3
 800723e:	f7ff fe7d 	bl	8006f3c <USBD_GetString>
 8007242:	e005      	b.n	8007250 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	4905      	ldr	r1, [pc, #20]	@ (800725c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007248:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <USBD_FS_ConfigStrDescriptor+0x40>)
 800724a:	0018      	movs	r0, r3
 800724c:	f7ff fe76 	bl	8006f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007250:	4b02      	ldr	r3, [pc, #8]	@ (800725c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b002      	add	sp, #8
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	20000450 	.word	0x20000450
 8007260:	08007a70 	.word	0x08007a70

08007264 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	0002      	movs	r2, r0
 800726c:	6039      	str	r1, [r7, #0]
 800726e:	1dfb      	adds	r3, r7, #7
 8007270:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007272:	1dfb      	adds	r3, r7, #7
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4908      	ldr	r1, [pc, #32]	@ (80072a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800727e:	4b09      	ldr	r3, [pc, #36]	@ (80072a4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007280:	0018      	movs	r0, r3
 8007282:	f7ff fe5b 	bl	8006f3c <USBD_GetString>
 8007286:	e005      	b.n	8007294 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	4905      	ldr	r1, [pc, #20]	@ (80072a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800728c:	4b05      	ldr	r3, [pc, #20]	@ (80072a4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800728e:	0018      	movs	r0, r3
 8007290:	f7ff fe54 	bl	8006f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007294:	4b02      	ldr	r3, [pc, #8]	@ (80072a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007296:	0018      	movs	r0, r3
 8007298:	46bd      	mov	sp, r7
 800729a:	b002      	add	sp, #8
 800729c:	bd80      	pop	{r7, pc}
 800729e:	46c0      	nop			@ (mov r8, r8)
 80072a0:	20000450 	.word	0x20000450
 80072a4:	08007a7c 	.word	0x08007a7c

080072a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	18d3      	adds	r3, r2, r3
 80072b4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <Get_SerialNum+0x2c>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072bc:	4907      	ldr	r1, [pc, #28]	@ (80072dc <Get_SerialNum+0x34>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2208      	movs	r2, #8
 80072c2:	0018      	movs	r0, r3
 80072c4:	f000 f80e 	bl	80072e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072c8:	4905      	ldr	r1, [pc, #20]	@ (80072e0 <Get_SerialNum+0x38>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2204      	movs	r2, #4
 80072ce:	0018      	movs	r0, r3
 80072d0:	f000 f808 	bl	80072e4 <IntToUnicode>
  }
}
 80072d4:	46c0      	nop			@ (mov r8, r8)
 80072d6:	46bd      	mov	sp, r7
 80072d8:	b004      	add	sp, #16
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	2000014a 	.word	0x2000014a
 80072e0:	2000015a 	.word	0x2000015a

080072e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	1dfb      	adds	r3, r7, #7
 80072f0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80072f2:	2117      	movs	r1, #23
 80072f4:	187b      	adds	r3, r7, r1
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80072fa:	187b      	adds	r3, r7, r1
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	e02f      	b.n	8007362 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	0f1b      	lsrs	r3, r3, #28
 8007306:	2b09      	cmp	r3, #9
 8007308:	d80d      	bhi.n	8007326 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	0f1b      	lsrs	r3, r3, #28
 800730e:	b2da      	uxtb	r2, r3
 8007310:	2317      	movs	r3, #23
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	0019      	movs	r1, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	185b      	adds	r3, r3, r1
 800731e:	3230      	adds	r2, #48	@ 0x30
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	701a      	strb	r2, [r3, #0]
 8007324:	e00c      	b.n	8007340 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	0f1b      	lsrs	r3, r3, #28
 800732a:	b2da      	uxtb	r2, r3
 800732c:	2317      	movs	r3, #23
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	0019      	movs	r1, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	185b      	adds	r3, r3, r1
 800733a:	3237      	adds	r2, #55	@ 0x37
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007346:	2117      	movs	r1, #23
 8007348:	187b      	adds	r3, r7, r1
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	3301      	adds	r3, #1
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	18d3      	adds	r3, r2, r3
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007358:	187b      	adds	r3, r7, r1
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	187b      	adds	r3, r7, r1
 800735e:	3201      	adds	r2, #1
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	2317      	movs	r3, #23
 8007364:	18fa      	adds	r2, r7, r3
 8007366:	1dfb      	adds	r3, r7, #7
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d3c8      	bcc.n	8007302 <IntToUnicode+0x1e>
  }
}
 8007370:	46c0      	nop			@ (mov r8, r8)
 8007372:	46c0      	nop			@ (mov r8, r8)
 8007374:	46bd      	mov	sp, r7
 8007376:	b006      	add	sp, #24
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a0a      	ldr	r2, [pc, #40]	@ (80073b4 <HAL_PCD_MspInit+0x38>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d10e      	bne.n	80073ac <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800738e:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <HAL_PCD_MspInit+0x3c>)
 8007390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007392:	4b09      	ldr	r3, [pc, #36]	@ (80073b8 <HAL_PCD_MspInit+0x3c>)
 8007394:	2180      	movs	r1, #128	@ 0x80
 8007396:	0409      	lsls	r1, r1, #16
 8007398:	430a      	orrs	r2, r1
 800739a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	201f      	movs	r0, #31
 80073a2:	f7f9 fb09 	bl	80009b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80073a6:	201f      	movs	r0, #31
 80073a8:	f7f9 fb1b 	bl	80009e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80073ac:	46c0      	nop			@ (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b002      	add	sp, #8
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	40005c00 	.word	0x40005c00
 80073b8:	40021000 	.word	0x40021000

080073bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	23bc      	movs	r3, #188	@ 0xbc
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	58d2      	ldr	r2, [r2, r3]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	21ac      	movs	r1, #172	@ 0xac
 80073d0:	0089      	lsls	r1, r1, #2
 80073d2:	468c      	mov	ip, r1
 80073d4:	4463      	add	r3, ip
 80073d6:	0019      	movs	r1, r3
 80073d8:	0010      	movs	r0, r2
 80073da:	f7fe fd45 	bl	8005e68 <USBD_LL_SetupStage>
}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b002      	add	sp, #8
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e6:	b590      	push	{r4, r7, lr}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	000a      	movs	r2, r1
 80073f0:	1cfb      	adds	r3, r7, #3
 80073f2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	23bc      	movs	r3, #188	@ 0xbc
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	58d4      	ldr	r4, [r2, r3]
 80073fc:	1cfb      	adds	r3, r7, #3
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	23be      	movs	r3, #190	@ 0xbe
 8007404:	0059      	lsls	r1, r3, #1
 8007406:	0013      	movs	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	189b      	adds	r3, r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	18c3      	adds	r3, r0, r3
 8007410:	185b      	adds	r3, r3, r1
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	1cfb      	adds	r3, r7, #3
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	0019      	movs	r1, r3
 800741a:	0020      	movs	r0, r4
 800741c:	f7fe fd82 	bl	8005f24 <USBD_LL_DataOutStage>
}
 8007420:	46c0      	nop			@ (mov r8, r8)
 8007422:	46bd      	mov	sp, r7
 8007424:	b003      	add	sp, #12
 8007426:	bd90      	pop	{r4, r7, pc}

08007428 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	000a      	movs	r2, r1
 8007432:	1cfb      	adds	r3, r7, #3
 8007434:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	23bc      	movs	r3, #188	@ 0xbc
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	58d0      	ldr	r0, [r2, r3]
 800743e:	1cfb      	adds	r3, r7, #3
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	0013      	movs	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	189b      	adds	r3, r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	18cb      	adds	r3, r1, r3
 800744e:	333c      	adds	r3, #60	@ 0x3c
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	1cfb      	adds	r3, r7, #3
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	0019      	movs	r1, r3
 8007458:	f7fe fde6 	bl	8006028 <USBD_LL_DataInStage>
}
 800745c:	46c0      	nop			@ (mov r8, r8)
 800745e:	46bd      	mov	sp, r7
 8007460:	b002      	add	sp, #8
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	23bc      	movs	r3, #188	@ 0xbc
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	58d3      	ldr	r3, [r2, r3]
 8007474:	0018      	movs	r0, r3
 8007476:	f7fe ff1d 	bl	80062b4 <USBD_LL_SOF>
}
 800747a:	46c0      	nop			@ (mov r8, r8)
 800747c:	46bd      	mov	sp, r7
 800747e:	b002      	add	sp, #8
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800748a:	230f      	movs	r3, #15
 800748c:	18fb      	adds	r3, r7, r3
 800748e:	2201      	movs	r2, #1
 8007490:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d001      	beq.n	800749e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800749a:	f7f9 f8dd 	bl	8000658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	23bc      	movs	r3, #188	@ 0xbc
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	58d2      	ldr	r2, [r2, r3]
 80074a6:	230f      	movs	r3, #15
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	0019      	movs	r1, r3
 80074ae:	0010      	movs	r0, r2
 80074b0:	f7fe febf 	bl	8006232 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	23bc      	movs	r3, #188	@ 0xbc
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	58d3      	ldr	r3, [r2, r3]
 80074bc:	0018      	movs	r0, r3
 80074be:	f7fe fe70 	bl	80061a2 <USBD_LL_Reset>
}
 80074c2:	46c0      	nop			@ (mov r8, r8)
 80074c4:	46bd      	mov	sp, r7
 80074c6:	b004      	add	sp, #16
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	23bc      	movs	r3, #188	@ 0xbc
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	58d3      	ldr	r3, [r2, r3]
 80074dc:	0018      	movs	r0, r3
 80074de:	f7fe feb9 	bl	8006254 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074ea:	4b05      	ldr	r3, [pc, #20]	@ (8007500 <HAL_PCD_SuspendCallback+0x34>)
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	4b04      	ldr	r3, [pc, #16]	@ (8007500 <HAL_PCD_SuspendCallback+0x34>)
 80074f0:	2106      	movs	r1, #6
 80074f2:	430a      	orrs	r2, r1
 80074f4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80074f6:	46c0      	nop			@ (mov r8, r8)
 80074f8:	46bd      	mov	sp, r7
 80074fa:	b002      	add	sp, #8
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	e000ed00 	.word	0xe000ed00

08007504 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007514:	4b09      	ldr	r3, [pc, #36]	@ (800753c <HAL_PCD_ResumeCallback+0x38>)
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	4b08      	ldr	r3, [pc, #32]	@ (800753c <HAL_PCD_ResumeCallback+0x38>)
 800751a:	2106      	movs	r1, #6
 800751c:	438a      	bics	r2, r1
 800751e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007520:	f000 fa1a 	bl	8007958 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	23bc      	movs	r3, #188	@ 0xbc
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	58d3      	ldr	r3, [r2, r3]
 800752c:	0018      	movs	r0, r3
 800752e:	f7fe fea9 	bl	8006284 <USBD_LL_Resume>
}
 8007532:	46c0      	nop			@ (mov r8, r8)
 8007534:	46bd      	mov	sp, r7
 8007536:	b002      	add	sp, #8
 8007538:	bd80      	pop	{r7, pc}
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	e000ed00 	.word	0xe000ed00

08007540 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007548:	4a23      	ldr	r2, [pc, #140]	@ (80075d8 <USBD_LL_Init+0x98>)
 800754a:	23bc      	movs	r3, #188	@ 0xbc
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	23b0      	movs	r3, #176	@ 0xb0
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	491f      	ldr	r1, [pc, #124]	@ (80075d8 <USBD_LL_Init+0x98>)
 800755a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800755c:	4b1e      	ldr	r3, [pc, #120]	@ (80075d8 <USBD_LL_Init+0x98>)
 800755e:	4a1f      	ldr	r2, [pc, #124]	@ (80075dc <USBD_LL_Init+0x9c>)
 8007560:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007562:	4b1d      	ldr	r3, [pc, #116]	@ (80075d8 <USBD_LL_Init+0x98>)
 8007564:	2208      	movs	r2, #8
 8007566:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007568:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <USBD_LL_Init+0x98>)
 800756a:	2202      	movs	r2, #2
 800756c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800756e:	4b1a      	ldr	r3, [pc, #104]	@ (80075d8 <USBD_LL_Init+0x98>)
 8007570:	2202      	movs	r2, #2
 8007572:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007574:	4b18      	ldr	r3, [pc, #96]	@ (80075d8 <USBD_LL_Init+0x98>)
 8007576:	2200      	movs	r2, #0
 8007578:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800757a:	4b17      	ldr	r3, [pc, #92]	@ (80075d8 <USBD_LL_Init+0x98>)
 800757c:	2200      	movs	r2, #0
 800757e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007580:	4b15      	ldr	r3, [pc, #84]	@ (80075d8 <USBD_LL_Init+0x98>)
 8007582:	2200      	movs	r2, #0
 8007584:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007586:	4b14      	ldr	r3, [pc, #80]	@ (80075d8 <USBD_LL_Init+0x98>)
 8007588:	0018      	movs	r0, r3
 800758a:	f7f9 fbbd 	bl	8000d08 <HAL_PCD_Init>
 800758e:	1e03      	subs	r3, r0, #0
 8007590:	d001      	beq.n	8007596 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007592:	f7f9 f861 	bl	8000658 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	23b0      	movs	r3, #176	@ 0xb0
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	58d0      	ldr	r0, [r2, r3]
 800759e:	2318      	movs	r3, #24
 80075a0:	2200      	movs	r2, #0
 80075a2:	2100      	movs	r1, #0
 80075a4:	f7fb f964 	bl	8002870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	23b0      	movs	r3, #176	@ 0xb0
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	58d0      	ldr	r0, [r2, r3]
 80075b0:	2358      	movs	r3, #88	@ 0x58
 80075b2:	2200      	movs	r2, #0
 80075b4:	2180      	movs	r1, #128	@ 0x80
 80075b6:	f7fb f95b 	bl	8002870 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	23b0      	movs	r3, #176	@ 0xb0
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	58d0      	ldr	r0, [r2, r3]
 80075c2:	2380      	movs	r3, #128	@ 0x80
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	2200      	movs	r2, #0
 80075c8:	2181      	movs	r1, #129	@ 0x81
 80075ca:	f7fb f951 	bl	8002870 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	0018      	movs	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	b002      	add	sp, #8
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000650 	.word	0x20000650
 80075dc:	40005c00 	.word	0x40005c00

080075e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e8:	210f      	movs	r1, #15
 80075ea:	187b      	adds	r3, r7, r1
 80075ec:	2200      	movs	r2, #0
 80075ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f0:	260e      	movs	r6, #14
 80075f2:	19bb      	adds	r3, r7, r6
 80075f4:	2200      	movs	r2, #0
 80075f6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	23b0      	movs	r3, #176	@ 0xb0
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	58d3      	ldr	r3, [r2, r3]
 8007600:	000d      	movs	r5, r1
 8007602:	187c      	adds	r4, r7, r1
 8007604:	0018      	movs	r0, r3
 8007606:	f7f9 fc7f 	bl	8000f08 <HAL_PCD_Start>
 800760a:	0003      	movs	r3, r0
 800760c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800760e:	19bc      	adds	r4, r7, r6
 8007610:	197b      	adds	r3, r7, r5
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	0018      	movs	r0, r3
 8007616:	f000 f9a6 	bl	8007966 <USBD_Get_USB_Status>
 800761a:	0003      	movs	r3, r0
 800761c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800761e:	19bb      	adds	r3, r7, r6
 8007620:	781b      	ldrb	r3, [r3, #0]
}
 8007622:	0018      	movs	r0, r3
 8007624:	46bd      	mov	sp, r7
 8007626:	b005      	add	sp, #20
 8007628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800762a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800762a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	000c      	movs	r4, r1
 8007634:	0010      	movs	r0, r2
 8007636:	0019      	movs	r1, r3
 8007638:	1cfb      	adds	r3, r7, #3
 800763a:	1c22      	adds	r2, r4, #0
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	1cbb      	adds	r3, r7, #2
 8007640:	1c02      	adds	r2, r0, #0
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	003b      	movs	r3, r7
 8007646:	1c0a      	adds	r2, r1, #0
 8007648:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800764a:	260f      	movs	r6, #15
 800764c:	19bb      	adds	r3, r7, r6
 800764e:	2200      	movs	r2, #0
 8007650:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007652:	250e      	movs	r5, #14
 8007654:	197b      	adds	r3, r7, r5
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	23b0      	movs	r3, #176	@ 0xb0
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	58d0      	ldr	r0, [r2, r3]
 8007662:	19bc      	adds	r4, r7, r6
 8007664:	1cbb      	adds	r3, r7, #2
 8007666:	781d      	ldrb	r5, [r3, #0]
 8007668:	003b      	movs	r3, r7
 800766a:	881a      	ldrh	r2, [r3, #0]
 800766c:	1cfb      	adds	r3, r7, #3
 800766e:	7819      	ldrb	r1, [r3, #0]
 8007670:	002b      	movs	r3, r5
 8007672:	f7f9 fdde 	bl	8001232 <HAL_PCD_EP_Open>
 8007676:	0003      	movs	r3, r0
 8007678:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800767a:	250e      	movs	r5, #14
 800767c:	197c      	adds	r4, r7, r5
 800767e:	19bb      	adds	r3, r7, r6
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	0018      	movs	r0, r3
 8007684:	f000 f96f 	bl	8007966 <USBD_Get_USB_Status>
 8007688:	0003      	movs	r3, r0
 800768a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800768c:	197b      	adds	r3, r7, r5
 800768e:	781b      	ldrb	r3, [r3, #0]
}
 8007690:	0018      	movs	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	b005      	add	sp, #20
 8007696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007698 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	000a      	movs	r2, r1
 80076a2:	1cfb      	adds	r3, r7, #3
 80076a4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a6:	210f      	movs	r1, #15
 80076a8:	187b      	adds	r3, r7, r1
 80076aa:	2200      	movs	r2, #0
 80076ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ae:	260e      	movs	r6, #14
 80076b0:	19bb      	adds	r3, r7, r6
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	23b0      	movs	r3, #176	@ 0xb0
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	58d2      	ldr	r2, [r2, r3]
 80076be:	000d      	movs	r5, r1
 80076c0:	187c      	adds	r4, r7, r1
 80076c2:	1cfb      	adds	r3, r7, #3
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	0019      	movs	r1, r3
 80076c8:	0010      	movs	r0, r2
 80076ca:	f7f9 fe21 	bl	8001310 <HAL_PCD_EP_Close>
 80076ce:	0003      	movs	r3, r0
 80076d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d2:	19bc      	adds	r4, r7, r6
 80076d4:	197b      	adds	r3, r7, r5
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	0018      	movs	r0, r3
 80076da:	f000 f944 	bl	8007966 <USBD_Get_USB_Status>
 80076de:	0003      	movs	r3, r0
 80076e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80076e2:	19bb      	adds	r3, r7, r6
 80076e4:	781b      	ldrb	r3, [r3, #0]
}
 80076e6:	0018      	movs	r0, r3
 80076e8:	46bd      	mov	sp, r7
 80076ea:	b005      	add	sp, #20
 80076ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076ee <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	000a      	movs	r2, r1
 80076f8:	1cfb      	adds	r3, r7, #3
 80076fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076fc:	210f      	movs	r1, #15
 80076fe:	187b      	adds	r3, r7, r1
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007704:	260e      	movs	r6, #14
 8007706:	19bb      	adds	r3, r7, r6
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	23b0      	movs	r3, #176	@ 0xb0
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	58d2      	ldr	r2, [r2, r3]
 8007714:	000d      	movs	r5, r1
 8007716:	187c      	adds	r4, r7, r1
 8007718:	1cfb      	adds	r3, r7, #3
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	0019      	movs	r1, r3
 800771e:	0010      	movs	r0, r2
 8007720:	f7f9 feba 	bl	8001498 <HAL_PCD_EP_SetStall>
 8007724:	0003      	movs	r3, r0
 8007726:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007728:	19bc      	adds	r4, r7, r6
 800772a:	197b      	adds	r3, r7, r5
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	0018      	movs	r0, r3
 8007730:	f000 f919 	bl	8007966 <USBD_Get_USB_Status>
 8007734:	0003      	movs	r3, r0
 8007736:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007738:	19bb      	adds	r3, r7, r6
 800773a:	781b      	ldrb	r3, [r3, #0]
}
 800773c:	0018      	movs	r0, r3
 800773e:	46bd      	mov	sp, r7
 8007740:	b005      	add	sp, #20
 8007742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007744 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	000a      	movs	r2, r1
 800774e:	1cfb      	adds	r3, r7, #3
 8007750:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007752:	210f      	movs	r1, #15
 8007754:	187b      	adds	r3, r7, r1
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800775a:	260e      	movs	r6, #14
 800775c:	19bb      	adds	r3, r7, r6
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	23b0      	movs	r3, #176	@ 0xb0
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	58d2      	ldr	r2, [r2, r3]
 800776a:	000d      	movs	r5, r1
 800776c:	187c      	adds	r4, r7, r1
 800776e:	1cfb      	adds	r3, r7, #3
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	0019      	movs	r1, r3
 8007774:	0010      	movs	r0, r2
 8007776:	f7f9 feeb 	bl	8001550 <HAL_PCD_EP_ClrStall>
 800777a:	0003      	movs	r3, r0
 800777c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800777e:	19bc      	adds	r4, r7, r6
 8007780:	197b      	adds	r3, r7, r5
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	0018      	movs	r0, r3
 8007786:	f000 f8ee 	bl	8007966 <USBD_Get_USB_Status>
 800778a:	0003      	movs	r3, r0
 800778c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800778e:	19bb      	adds	r3, r7, r6
 8007790:	781b      	ldrb	r3, [r3, #0]
}
 8007792:	0018      	movs	r0, r3
 8007794:	46bd      	mov	sp, r7
 8007796:	b005      	add	sp, #20
 8007798:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800779a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	000a      	movs	r2, r1
 80077a4:	1cfb      	adds	r3, r7, #3
 80077a6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	23b0      	movs	r3, #176	@ 0xb0
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	58d3      	ldr	r3, [r2, r3]
 80077b0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077b2:	1cfb      	adds	r3, r7, #3
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b25b      	sxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da0d      	bge.n	80077d8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077bc:	1cfb      	adds	r3, r7, #3
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	227f      	movs	r2, #127	@ 0x7f
 80077c2:	4013      	ands	r3, r2
 80077c4:	68f9      	ldr	r1, [r7, #12]
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	0013      	movs	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	189b      	adds	r3, r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	18cb      	adds	r3, r1, r3
 80077d2:	3302      	adds	r3, #2
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	e00d      	b.n	80077f4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077d8:	1cfb      	adds	r3, r7, #3
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	227f      	movs	r2, #127	@ 0x7f
 80077de:	401a      	ands	r2, r3
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	23b5      	movs	r3, #181	@ 0xb5
 80077e4:	0059      	lsls	r1, r3, #1
 80077e6:	0013      	movs	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	18c3      	adds	r3, r0, r3
 80077f0:	185b      	adds	r3, r3, r1
 80077f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077f4:	0018      	movs	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	b004      	add	sp, #16
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	000a      	movs	r2, r1
 8007806:	1cfb      	adds	r3, r7, #3
 8007808:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800780a:	210f      	movs	r1, #15
 800780c:	187b      	adds	r3, r7, r1
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007812:	260e      	movs	r6, #14
 8007814:	19bb      	adds	r3, r7, r6
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	23b0      	movs	r3, #176	@ 0xb0
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	58d2      	ldr	r2, [r2, r3]
 8007822:	000d      	movs	r5, r1
 8007824:	187c      	adds	r4, r7, r1
 8007826:	1cfb      	adds	r3, r7, #3
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	0019      	movs	r1, r3
 800782c:	0010      	movs	r0, r2
 800782e:	f7f9 fcd5 	bl	80011dc <HAL_PCD_SetAddress>
 8007832:	0003      	movs	r3, r0
 8007834:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007836:	19bc      	adds	r4, r7, r6
 8007838:	197b      	adds	r3, r7, r5
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	0018      	movs	r0, r3
 800783e:	f000 f892 	bl	8007966 <USBD_Get_USB_Status>
 8007842:	0003      	movs	r3, r0
 8007844:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007846:	19bb      	adds	r3, r7, r6
 8007848:	781b      	ldrb	r3, [r3, #0]
}
 800784a:	0018      	movs	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	b005      	add	sp, #20
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007852 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007854:	b087      	sub	sp, #28
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	0008      	movs	r0, r1
 800785c:	607a      	str	r2, [r7, #4]
 800785e:	0019      	movs	r1, r3
 8007860:	230b      	movs	r3, #11
 8007862:	18fb      	adds	r3, r7, r3
 8007864:	1c02      	adds	r2, r0, #0
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	2408      	movs	r4, #8
 800786a:	193b      	adds	r3, r7, r4
 800786c:	1c0a      	adds	r2, r1, #0
 800786e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007870:	2117      	movs	r1, #23
 8007872:	187b      	adds	r3, r7, r1
 8007874:	2200      	movs	r2, #0
 8007876:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007878:	2516      	movs	r5, #22
 800787a:	197b      	adds	r3, r7, r5
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	23b0      	movs	r3, #176	@ 0xb0
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	58d0      	ldr	r0, [r2, r3]
 8007888:	193b      	adds	r3, r7, r4
 800788a:	881d      	ldrh	r5, [r3, #0]
 800788c:	000e      	movs	r6, r1
 800788e:	187c      	adds	r4, r7, r1
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	230b      	movs	r3, #11
 8007894:	18fb      	adds	r3, r7, r3
 8007896:	7819      	ldrb	r1, [r3, #0]
 8007898:	002b      	movs	r3, r5
 800789a:	f7f9 fdc1 	bl	8001420 <HAL_PCD_EP_Transmit>
 800789e:	0003      	movs	r3, r0
 80078a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078a2:	2516      	movs	r5, #22
 80078a4:	197c      	adds	r4, r7, r5
 80078a6:	19bb      	adds	r3, r7, r6
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	0018      	movs	r0, r3
 80078ac:	f000 f85b 	bl	8007966 <USBD_Get_USB_Status>
 80078b0:	0003      	movs	r3, r0
 80078b2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078b4:	197b      	adds	r3, r7, r5
 80078b6:	781b      	ldrb	r3, [r3, #0]
}
 80078b8:	0018      	movs	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b007      	add	sp, #28
 80078be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	0008      	movs	r0, r1
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	0019      	movs	r1, r3
 80078ce:	230b      	movs	r3, #11
 80078d0:	18fb      	adds	r3, r7, r3
 80078d2:	1c02      	adds	r2, r0, #0
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	2408      	movs	r4, #8
 80078d8:	193b      	adds	r3, r7, r4
 80078da:	1c0a      	adds	r2, r1, #0
 80078dc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078de:	2117      	movs	r1, #23
 80078e0:	187b      	adds	r3, r7, r1
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e6:	2516      	movs	r5, #22
 80078e8:	197b      	adds	r3, r7, r5
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	23b0      	movs	r3, #176	@ 0xb0
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	58d0      	ldr	r0, [r2, r3]
 80078f6:	193b      	adds	r3, r7, r4
 80078f8:	881d      	ldrh	r5, [r3, #0]
 80078fa:	000e      	movs	r6, r1
 80078fc:	187c      	adds	r4, r7, r1
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	230b      	movs	r3, #11
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	7819      	ldrb	r1, [r3, #0]
 8007906:	002b      	movs	r3, r5
 8007908:	f7f9 fd53 	bl	80013b2 <HAL_PCD_EP_Receive>
 800790c:	0003      	movs	r3, r0
 800790e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007910:	2516      	movs	r5, #22
 8007912:	197c      	adds	r4, r7, r5
 8007914:	19bb      	adds	r3, r7, r6
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	0018      	movs	r0, r3
 800791a:	f000 f824 	bl	8007966 <USBD_Get_USB_Status>
 800791e:	0003      	movs	r3, r0
 8007920:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007922:	197b      	adds	r3, r7, r5
 8007924:	781b      	ldrb	r3, [r3, #0]
}
 8007926:	0018      	movs	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	b007      	add	sp, #28
 800792c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007930 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007938:	4b02      	ldr	r3, [pc, #8]	@ (8007944 <USBD_static_malloc+0x14>)
}
 800793a:	0018      	movs	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	b002      	add	sp, #8
 8007940:	bd80      	pop	{r7, pc}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	20000944 	.word	0x20000944

08007948 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]

}
 8007950:	46c0      	nop			@ (mov r8, r8)
 8007952:	46bd      	mov	sp, r7
 8007954:	b002      	add	sp, #8
 8007956:	bd80      	pop	{r7, pc}

08007958 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800795c:	f7f8 fdca 	bl	80004f4 <SystemClock_Config>
}
 8007960:	46c0      	nop			@ (mov r8, r8)
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	0002      	movs	r2, r0
 800796e:	1dfb      	adds	r3, r7, #7
 8007970:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007972:	230f      	movs	r3, #15
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800797a:	1dfb      	adds	r3, r7, #7
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b03      	cmp	r3, #3
 8007980:	d017      	beq.n	80079b2 <USBD_Get_USB_Status+0x4c>
 8007982:	dc1b      	bgt.n	80079bc <USBD_Get_USB_Status+0x56>
 8007984:	2b02      	cmp	r3, #2
 8007986:	d00f      	beq.n	80079a8 <USBD_Get_USB_Status+0x42>
 8007988:	dc18      	bgt.n	80079bc <USBD_Get_USB_Status+0x56>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <USBD_Get_USB_Status+0x2e>
 800798e:	2b01      	cmp	r3, #1
 8007990:	d005      	beq.n	800799e <USBD_Get_USB_Status+0x38>
 8007992:	e013      	b.n	80079bc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007994:	230f      	movs	r3, #15
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
    break;
 800799c:	e013      	b.n	80079c6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800799e:	230f      	movs	r3, #15
 80079a0:	18fb      	adds	r3, r7, r3
 80079a2:	2202      	movs	r2, #2
 80079a4:	701a      	strb	r2, [r3, #0]
    break;
 80079a6:	e00e      	b.n	80079c6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079a8:	230f      	movs	r3, #15
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	2201      	movs	r2, #1
 80079ae:	701a      	strb	r2, [r3, #0]
    break;
 80079b0:	e009      	b.n	80079c6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079b2:	230f      	movs	r3, #15
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	2202      	movs	r2, #2
 80079b8:	701a      	strb	r2, [r3, #0]
    break;
 80079ba:	e004      	b.n	80079c6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80079bc:	230f      	movs	r3, #15
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	2202      	movs	r2, #2
 80079c2:	701a      	strb	r2, [r3, #0]
    break;
 80079c4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80079c6:	230f      	movs	r3, #15
 80079c8:	18fb      	adds	r3, r7, r3
 80079ca:	781b      	ldrb	r3, [r3, #0]
}
 80079cc:	0018      	movs	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b004      	add	sp, #16
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <memset>:
 80079d4:	0003      	movs	r3, r0
 80079d6:	1882      	adds	r2, r0, r2
 80079d8:	4293      	cmp	r3, r2
 80079da:	d100      	bne.n	80079de <memset+0xa>
 80079dc:	4770      	bx	lr
 80079de:	7019      	strb	r1, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	e7f9      	b.n	80079d8 <memset+0x4>

080079e4 <__libc_init_array>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	2600      	movs	r6, #0
 80079e8:	4c0c      	ldr	r4, [pc, #48]	@ (8007a1c <__libc_init_array+0x38>)
 80079ea:	4d0d      	ldr	r5, [pc, #52]	@ (8007a20 <__libc_init_array+0x3c>)
 80079ec:	1b64      	subs	r4, r4, r5
 80079ee:	10a4      	asrs	r4, r4, #2
 80079f0:	42a6      	cmp	r6, r4
 80079f2:	d109      	bne.n	8007a08 <__libc_init_array+0x24>
 80079f4:	2600      	movs	r6, #0
 80079f6:	f000 f819 	bl	8007a2c <_init>
 80079fa:	4c0a      	ldr	r4, [pc, #40]	@ (8007a24 <__libc_init_array+0x40>)
 80079fc:	4d0a      	ldr	r5, [pc, #40]	@ (8007a28 <__libc_init_array+0x44>)
 80079fe:	1b64      	subs	r4, r4, r5
 8007a00:	10a4      	asrs	r4, r4, #2
 8007a02:	42a6      	cmp	r6, r4
 8007a04:	d105      	bne.n	8007a12 <__libc_init_array+0x2e>
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	00b3      	lsls	r3, r6, #2
 8007a0a:	58eb      	ldr	r3, [r5, r3]
 8007a0c:	4798      	blx	r3
 8007a0e:	3601      	adds	r6, #1
 8007a10:	e7ee      	b.n	80079f0 <__libc_init_array+0xc>
 8007a12:	00b3      	lsls	r3, r6, #2
 8007a14:	58eb      	ldr	r3, [r5, r3]
 8007a16:	4798      	blx	r3
 8007a18:	3601      	adds	r6, #1
 8007a1a:	e7f2      	b.n	8007a02 <__libc_init_array+0x1e>
 8007a1c:	08007b10 	.word	0x08007b10
 8007a20:	08007b10 	.word	0x08007b10
 8007a24:	08007b14 	.word	0x08007b14
 8007a28:	08007b10 	.word	0x08007b10

08007a2c <_init>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	46c0      	nop			@ (mov r8, r8)
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr

08007a38 <_fini>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	46c0      	nop			@ (mov r8, r8)
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

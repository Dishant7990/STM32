
6.2_I2C_BME680.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08009098  08009098  0000a098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009590  08009590  0000b200  2**0
                  CONTENTS
  4 .ARM          00000008  08009590  08009590  0000a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009598  08009598  0000b200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009598  08009598  0000a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800959c  0800959c  0000a59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  080095a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000200  080097a0  0000b200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  080097a0  0000b4b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6be  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213c  00000000  00000000  0001a8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a64  00000000  00000000  0001d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275b2  00000000  00000000  0001e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001113b  00000000  00000000  000457ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edc27  00000000  00000000  000568e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144510  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d4  00000000  00000000  00144554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00148f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800907c 	.word	0x0800907c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800907c 	.word	0x0800907c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9b5 	b.w	8000f34 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f3c:	b0a2      	sub	sp, #136	@ 0x88
 8000f3e:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */

    struct bme680_dev gas_sensor;

    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 8000f40:	2376      	movs	r3, #118	@ 0x76
 8000f42:	777b      	strb	r3, [r7, #29]
    gas_sensor.intf = BME680_I2C_INTF;
 8000f44:	2301      	movs	r3, #1
 8000f46:	77bb      	strb	r3, [r7, #30]
    gas_sensor.read = user_i2c_read;
 8000f48:	4b5f      	ldr	r3, [pc, #380]	@ (80010c8 <main+0x190>)
 8000f4a:	667b      	str	r3, [r7, #100]	@ 0x64
    gas_sensor.write = user_i2c_write;
 8000f4c:	4b5f      	ldr	r3, [pc, #380]	@ (80010cc <main+0x194>)
 8000f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
    gas_sensor.delay_ms = user_delay_ms;
 8000f50:	4b5f      	ldr	r3, [pc, #380]	@ (80010d0 <main+0x198>)
 8000f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    /* amb_temp can be set to 25 prior to configuring the gas sensor
     * or by performing a few temperature readings without operating the gas sensor.
     */
    gas_sensor.amb_temp = 25;
 8000f54:	2319      	movs	r3, #25
 8000f56:	f887 3020 	strb.w	r3, [r7, #32]


    uint8_t rslt = BME680_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    rslt = bme680_init(&gas_sensor);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fc50 	bl	800180a <bme680_init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
//    }

    uint8_t set_required_settings;

    /* Set the temperature, pressure and humidity settings */
    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8000f76:	2303      	movs	r3, #3
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    /* Set the remaining gas sensor settings and link the heating profile */
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
    /* Create a ramp heat waveform in 3 steps */
    gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 8000f8e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f92:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */
 8000f96:	2396      	movs	r3, #150	@ 0x96
 8000f98:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

    /* Select the power mode */
    /* Must be set before writing the sensor configuration */
    gas_sensor.power_mode = BME680_FORCED_MODE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60

    /* Set the required sensor settings needed */
    set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL
 8000fa2:	23df      	movs	r3, #223	@ 0xdf
 8000fa4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        | BME680_GAS_SENSOR_SEL;

    /* Set the desired sensor configuration */
    rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
 8000fa8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	f107 021c 	add.w	r2, r7, #28
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fd65 	bl	8001a84 <bme680_set_sensor_settings>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    /* Set the power mode */
    rslt = bme680_set_sensor_mode(&gas_sensor);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 ff25 	bl	8001e14 <bme680_set_sensor_mode>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f001 fecc 	bl	8002d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f88a 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f94a 	bl	8001270 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fdc:	f000 f918 	bl	8001210 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fe0:	f000 f8d6 	bl	8001190 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  I2C_Scan();
 8000fe4:	f000 f968 	bl	80012b8 <I2C_Scan>

  printf("Hello_Dishant!!!\r\n");
 8000fe8:	483a      	ldr	r0, [pc, #232]	@ (80010d4 <main+0x19c>)
 8000fea:	f005 ff11 	bl	8006e10 <puts>

  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8000fee:	f107 021c 	add.w	r2, r7, #28
 8000ff2:	f107 031a 	add.w	r3, r7, #26
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 ff6f 	bl	8001edc <bme680_get_profile_dur>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Who_am_i();
 8000ffe:	f000 f9b7 	bl	8001370 <Who_am_i>

	  user_delay_ms(meas_period); /* Delay till the measurement is ready */
 8001002:	8b7b      	ldrh	r3, [r7, #26]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f9a9 	bl	800135c <user_delay_ms>

	         rslt = bme680_get_sensor_data(&data, &gas_sensor);
 800100a:	f107 021c 	add.w	r2, r7, #28
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 ffc4 	bl	8001fa0 <bme680_get_sensor_data>
 8001018:	4603      	mov	r3, r0
 800101a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	         printf("T: %.2f degC, P: %.2f hPa, H %.2f %%rH ", data.temperature / 100.0f,
 800101e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80010d8 <main+0x1a0>
 800102e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001032:	ee16 0a90 	vmov	r0, s13
 8001036:	f7ff fa87 	bl	8000548 <__aeabi_f2d>
 800103a:	4680      	mov	r8, r0
 800103c:	4689      	mov	r9, r1
	             data.pressure / 100.0f, data.humidity/1000.0f );
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001048:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80010d8 <main+0x1a0>
 800104c:	eec7 6a87 	vdiv.f32	s13, s15, s14
	         printf("T: %.2f degC, P: %.2f hPa, H %.2f %%rH ", data.temperature / 100.0f,
 8001050:	ee16 0a90 	vmov	r0, s13
 8001054:	f7ff fa78 	bl	8000548 <__aeabi_f2d>
 8001058:	4604      	mov	r4, r0
 800105a:	460d      	mov	r5, r1
	             data.pressure / 100.0f, data.humidity/1000.0f );
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001066:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80010dc <main+0x1a4>
 800106a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	         printf("T: %.2f degC, P: %.2f hPa, H %.2f %%rH ", data.temperature / 100.0f,
 800106e:	ee16 0a90 	vmov	r0, s13
 8001072:	f7ff fa69 	bl	8000548 <__aeabi_f2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800107e:	e9cd 4500 	strd	r4, r5, [sp]
 8001082:	4642      	mov	r2, r8
 8001084:	464b      	mov	r3, r9
 8001086:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <main+0x1a8>)
 8001088:	f005 fe5a 	bl	8006d40 <iprintf>
	         /* Avoid using measurements from an unstable heating setup */
	         if(data.status & BME680_GASM_VALID_MSK)
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <main+0x168>
	             printf(", G: %ld ohms",(uint32_t) data.gas_resistance);
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	4619      	mov	r1, r3
 800109a:	4812      	ldr	r0, [pc, #72]	@ (80010e4 <main+0x1ac>)
 800109c:	f005 fe50 	bl	8006d40 <iprintf>

	         printf("\r\n");
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <main+0x1b0>)
 80010a2:	f005 feb5 	bl	8006e10 <puts>

	         /* Trigger the next measurement if you would like to read data out continuously */
	         if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 80010a6:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <main+0x186>
	             rslt = bme680_set_sensor_mode(&gas_sensor);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 feae 	bl	8001e14 <bme680_set_sensor_mode>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	         }
	 HAL_Delay(1000);
 80010be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010c2:	f001 fecf 	bl	8002e64 <HAL_Delay>
	  Who_am_i();
 80010c6:	e79a      	b.n	8000ffe <main+0xc6>
 80010c8:	08002d19 	.word	0x08002d19
 80010cc:	08002d43 	.word	0x08002d43
 80010d0:	0800135d 	.word	0x0800135d
 80010d4:	08009098 	.word	0x08009098
 80010d8:	42c80000 	.word	0x42c80000
 80010dc:	447a0000 	.word	0x447a0000
 80010e0:	080090ac 	.word	0x080090ac
 80010e4:	080090d4 	.word	0x080090d4
 80010e8:	080090e4 	.word	0x080090e4

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b096      	sub	sp, #88	@ 0x58
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2244      	movs	r2, #68	@ 0x44
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 ff88 	bl	8007010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800110e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001112:	f003 f845 	bl	80041a0 <HAL_PWREx_ControlVoltageScaling>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800111c:	f000 f966 	bl	80013ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001128:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112a:	2310      	movs	r3, #16
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	2302      	movs	r3, #2
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001132:	2302      	movs	r3, #2
 8001134:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800113a:	230a      	movs	r3, #10
 800113c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800113e:	2307      	movs	r3, #7
 8001140:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001146:	2302      	movs	r3, #2
 8001148:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f87c 	bl	800424c <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800115a:	f000 f947 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2303      	movs	r3, #3
 8001164:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	2104      	movs	r1, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fc44 	bl	8004a04 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001182:	f000 f933 	bl	80013ec <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3758      	adds	r7, #88	@ 0x58
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_I2C1_Init+0x74>)
 8001196:	4a1c      	ldr	r2, [pc, #112]	@ (8001208 <MX_I2C1_Init+0x78>)
 8001198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800119a:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <MX_I2C1_Init+0x74>)
 800119c:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <MX_I2C1_Init+0x7c>)
 800119e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011cc:	f002 f8fe 	bl	80033cc <HAL_I2C_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011d6:	f000 f909 	bl	80013ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	4809      	ldr	r0, [pc, #36]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011de:	f002 ff39 	bl	8004054 <HAL_I2CEx_ConfigAnalogFilter>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011e8:	f000 f900 	bl	80013ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011f0:	f002 ff7b 	bl	80040ea <HAL_I2CEx_ConfigDigitalFilter>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f000 f8f7 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000021c 	.word	0x2000021c
 8001208:	40005400 	.word	0x40005400
 800120c:	10909cec 	.word	0x10909cec

08001210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 8001216:	4a15      	ldr	r2, [pc, #84]	@ (800126c <MX_USART2_UART_Init+0x5c>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_USART2_UART_Init+0x58>)
 8001254:	f004 fab6 	bl	80057c4 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800125e:	f000 f8c5 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000270 	.word	0x20000270
 800126c:	40004400 	.word	0x40004400

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_GPIO_Init+0x44>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <MX_GPIO_Init+0x44>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_GPIO_Init+0x44>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_GPIO_Init+0x44>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <MX_GPIO_Init+0x44>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_GPIO_Init+0x44>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <I2C_Scan>:

/* USER CODE BEGIN 4 */

void I2C_Scan(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
    uint8_t ret;
    HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 80012be:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012c2:	221a      	movs	r2, #26
 80012c4:	491e      	ldr	r1, [pc, #120]	@ (8001340 <I2C_Scan+0x88>)
 80012c6:	481f      	ldr	r0, [pc, #124]	@ (8001344 <I2C_Scan+0x8c>)
 80012c8:	f004 faca 	bl	8005860 <HAL_UART_Transmit>

    for (int i = 0; i < 128; i++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	e028      	b.n	8001324 <I2C_Scan+0x6c>
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 3, 5);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	b299      	uxth	r1, r3
 80012da:	2305      	movs	r3, #5
 80012dc:	2203      	movs	r2, #3
 80012de:	481a      	ldr	r0, [pc, #104]	@ (8001348 <I2C_Scan+0x90>)
 80012e0:	f002 fb1e 	bl	8003920 <HAL_I2C_IsDeviceReady>
 80012e4:	4603      	mov	r3, r0
 80012e6:	70fb      	strb	r3, [r7, #3]
        if (ret != HAL_OK) { /* No ACK Received At That Address */
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <I2C_Scan+0x46>
            HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 80012ee:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012f2:	2204      	movs	r2, #4
 80012f4:	4915      	ldr	r1, [pc, #84]	@ (800134c <I2C_Scan+0x94>)
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <I2C_Scan+0x8c>)
 80012f8:	f004 fab2 	bl	8005860 <HAL_UART_Transmit>
 80012fc:	e00f      	b.n	800131e <I2C_Scan+0x66>
        } else {
        	sprintf((char*)Buffer, "0x%X", i);
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4913      	ldr	r1, [pc, #76]	@ (8001350 <I2C_Scan+0x98>)
 8001302:	4814      	ldr	r0, [pc, #80]	@ (8001354 <I2C_Scan+0x9c>)
 8001304:	f005 fd8c 	bl	8006e20 <siprintf>

            HAL_UART_Transmit(&huart2, (uint8_t *)Buffer, strlen((char*)Buffer), 10000);
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <I2C_Scan+0x9c>)
 800130a:	f7fe ffb1 	bl	8000270 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001316:	490f      	ldr	r1, [pc, #60]	@ (8001354 <I2C_Scan+0x9c>)
 8001318:	480a      	ldr	r0, [pc, #40]	@ (8001344 <I2C_Scan+0x8c>)
 800131a:	f004 faa1 	bl	8005860 <HAL_UART_Transmit>
    for (int i = 0; i < 128; i++) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3301      	adds	r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b7f      	cmp	r3, #127	@ 0x7f
 8001328:	ddd3      	ble.n	80012d2 <I2C_Scan+0x1a>
        }
    }

    HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 800132a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800132e:	220b      	movs	r2, #11
 8001330:	4909      	ldr	r1, [pc, #36]	@ (8001358 <I2C_Scan+0xa0>)
 8001332:	4804      	ldr	r0, [pc, #16]	@ (8001344 <I2C_Scan+0x8c>)
 8001334:	f004 fa94 	bl	8005860 <HAL_UART_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000004 	.word	0x20000004
 8001344:	20000270 	.word	0x20000270
 8001348:	2000021c 	.word	0x2000021c
 800134c:	20000000 	.word	0x20000000
 8001350:	080090e8 	.word	0x080090e8
 8001354:	200002f8 	.word	0x200002f8
 8001358:	20000020 	.word	0x20000020

0800135c <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
    /*
     * Return control or wait,
     * for a period amount of milliseconds
     */
	//HAL_Delay(500);
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <Who_am_i>:

uint8_t Who_am_i(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8
    uint8_t chip_id;
    HAL_StatusTypeDef status;

    // Send command to read the chip ID register
    uint8_t chip_id_reg = 0xD0; // Assuming the chip ID register address is 0xD0
 8001376:	23d0      	movs	r3, #208	@ 0xd0
 8001378:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, BME680_ADDRESS, &chip_id_reg, 1, 1000);
 800137a:	1d7a      	adds	r2, r7, #5
 800137c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	21ec      	movs	r1, #236	@ 0xec
 8001386:	4815      	ldr	r0, [pc, #84]	@ (80013dc <Who_am_i+0x6c>)
 8001388:	f002 f8bc 	bl	8003504 <HAL_I2C_Master_Transmit>
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]

    if (status != HAL_OK) {
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <Who_am_i+0x30>
        // Handle transmission error
        printf("Error transmitting chip ID register address.\n");
 8001396:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <Who_am_i+0x70>)
 8001398:	f005 fd3a 	bl	8006e10 <puts>
        return 0xFF; // Return an error value
 800139c:	23ff      	movs	r3, #255	@ 0xff
 800139e:	e018      	b.n	80013d2 <Who_am_i+0x62>
    }

    // Receive chip ID
    status = HAL_I2C_Master_Receive(&hi2c1, BME680_ADDRESS , &chip_id, 1, 1000);
 80013a0:	1dba      	adds	r2, r7, #6
 80013a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	21ec      	movs	r1, #236	@ 0xec
 80013ac:	480b      	ldr	r0, [pc, #44]	@ (80013dc <Who_am_i+0x6c>)
 80013ae:	f002 f9c1 	bl	8003734 <HAL_I2C_Master_Receive>
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]

    if (status != HAL_OK) {
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <Who_am_i+0x56>
        // Handle receiving error
        printf("Error receiving chip ID.\n");
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <Who_am_i+0x74>)
 80013be:	f005 fd27 	bl	8006e10 <puts>
        return 0xFF; // Return an error value
 80013c2:	23ff      	movs	r3, #255	@ 0xff
 80013c4:	e005      	b.n	80013d2 <Who_am_i+0x62>
    }

    // Print chip ID
    printf("Chip ID: 0x%02X\n", chip_id);
 80013c6:	79bb      	ldrb	r3, [r7, #6]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <Who_am_i+0x78>)
 80013cc:	f005 fcb8 	bl	8006d40 <iprintf>

    return chip_id;
 80013d0:	79bb      	ldrb	r3, [r7, #6]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000021c 	.word	0x2000021c
 80013e0:	080090f0 	.word	0x080090f0
 80013e4:	08009120 	.word	0x08009120
 80013e8:	0800913c 	.word	0x0800913c

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <Error_Handler+0x8>

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <HAL_MspInit+0x44>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6613      	str	r3, [r2, #96]	@ 0x60
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_MspInit+0x44>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	4a08      	ldr	r2, [pc, #32]	@ (800143c <HAL_MspInit+0x44>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001420:	6593      	str	r3, [r2, #88]	@ 0x58
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_MspInit+0x44>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0ac      	sub	sp, #176	@ 0xb0
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2288      	movs	r2, #136	@ 0x88
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f005 fdd5 	bl	8007010 <memset>
  if(hi2c->Instance==I2C1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a21      	ldr	r2, [pc, #132]	@ (80014f0 <HAL_I2C_MspInit+0xb0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d13b      	bne.n	80014e8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001470:	2340      	movs	r3, #64	@ 0x40
 8001472:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fce5 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001488:	f7ff ffb0 	bl	80013ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_I2C_MspInit+0xb4>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001490:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <HAL_I2C_MspInit+0xb4>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_I2C_MspInit+0xb4>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BSP_I2C_SCL_Pin|BSP_I2C_SDA_Pin;
 80014a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014be:	2304      	movs	r3, #4
 80014c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014c8:	4619      	mov	r1, r3
 80014ca:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <HAL_I2C_MspInit+0xb8>)
 80014cc:	f001 fdd4 	bl	8003078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_I2C_MspInit+0xb4>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <HAL_I2C_MspInit+0xb4>)
 80014d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014da:	6593      	str	r3, [r2, #88]	@ 0x58
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_I2C_MspInit+0xb4>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	37b0      	adds	r7, #176	@ 0xb0
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40005400 	.word	0x40005400
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000400 	.word	0x48000400

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2288      	movs	r2, #136	@ 0x88
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f005 fd77 	bl	8007010 <memset>
  if(huart->Instance==USART2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <HAL_UART_MspInit+0xb0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d13b      	bne.n	80015a4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800152c:	2302      	movs	r3, #2
 800152e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001530:	2300      	movs	r3, #0
 8001532:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fc87 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001544:	f7ff ff52 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001552:	6593      	str	r3, [r2, #88]	@ 0x58
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 8001578:	230c      	movs	r3, #12
 800157a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001590:	2307      	movs	r3, #7
 8001592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800159a:	4619      	mov	r1, r3
 800159c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a0:	f001 fd6a 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a4:	bf00      	nop
 80015a6:	37b0      	adds	r7, #176	@ 0xb0
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40021000 	.word	0x40021000

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <NMI_Handler+0x4>

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <MemManage_Handler+0x4>

080015cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <UsageFault_Handler+0x4>

080015dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f001 fc0b 	bl	8002e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  return 1;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_kill>:

int _kill(int pid, int sig)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800162c:	f005 fd42 	bl	80070b4 <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	2216      	movs	r2, #22
 8001634:	601a      	str	r2, [r3, #0]
  return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_exit>:

void _exit (int status)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800164a:	f04f 31ff 	mov.w	r1, #4294967295
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffe7 	bl	8001622 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <_exit+0x12>

08001658 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00a      	b.n	8001680 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166a:	f3af 8000 	nop.w
 800166e:	4601      	mov	r1, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf0      	blt.n	800166a <_read+0x12>
  }

  return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (const unsigned char *)ptr, len, 1000);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	4804      	ldr	r0, [pc, #16]	@ (80016bc <_write+0x28>)
 80016ac:	f004 f8d8 	bl	8005860 <HAL_UART_Transmit>
  return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000270 	.word	0x20000270

080016c0 <_close>:

int _close(int file)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e8:	605a      	str	r2, [r3, #4]
  return 0;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_isatty>:

int _isatty(int file)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f005 fcac 	bl	80070b4 <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20018000 	.word	0x20018000
 8001788:	00000400 	.word	0x00000400
 800178c:	2000035c 	.word	0x2000035c
 8001790:	200004b0 	.word	0x200004b0

08001794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff ffea 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	@ (80017f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <LoopForever+0xe>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001804 <LoopForever+0x16>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f005 fc6b 	bl	80070c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ea:	f7ff fba5 	bl	8000f38 <main>

080017ee <LoopForever>:

LoopForever:
    b LoopForever
 80017ee:	e7fe      	b.n	80017ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80017fc:	080095a0 	.word	0x080095a0
  ldr r2, =_sbss
 8001800:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001804:	200004b0 	.word	0x200004b0

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>

0800180a <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f001 fa60 	bl	8002cd8 <null_ptr_check>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d120      	bne.n	8001866 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f8ee 	bl	8001a06 <bme680_soft_reset>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d117      	bne.n	8001866 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	20d0      	movs	r0, #208	@ 0xd0
 800183e:	f000 f818 	bl	8001872 <bme680_get_regs>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10b      	bne.n	8001866 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b61      	cmp	r3, #97	@ 0x61
 8001854:	d105      	bne.n	8001862 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fbce 	bl	8001ff8 <get_calib_data>
 800185c:	4603      	mov	r3, r0
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8001862:	23fd      	movs	r3, #253	@ 0xfd
 8001864:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8001872:	b590      	push	{r4, r7, lr}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	4613      	mov	r3, r2
 8001882:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f001 fa27 	bl	8002cd8 <null_ptr_check>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 800188e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d126      	bne.n	80018e4 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	789b      	ldrb	r3, [r3, #2]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10e      	bne.n	80018bc <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 f949 	bl	8002b3a <set_mem_page>
 80018a8:	4603      	mov	r3, r0
 80018aa:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 80018ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018ba:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7858      	ldrb	r0, [r3, #1]
 80018c4:	89bb      	ldrh	r3, [r7, #12]
 80018c6:	7bf9      	ldrb	r1, [r7, #15]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	47a0      	blx	r4
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		if (dev->com_rslt != 0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 80018e0:	23fe      	movs	r3, #254	@ 0xfe
 80018e2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80018e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b090      	sub	sp, #64	@ 0x40
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	2224      	movs	r2, #36	@ 0x24
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f005 fb7f 	bl	8007010 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001912:	6838      	ldr	r0, [r7, #0]
 8001914:	f001 f9e0 	bl	8002cd8 <null_ptr_check>
 8001918:	4603      	mov	r3, r0
 800191a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (rslt == BME680_OK) {
 800191e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001922:	2b00      	cmp	r3, #0
 8001924:	d169      	bne.n	80019fa <bme680_set_regs+0x10a>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d061      	beq.n	80019f0 <bme680_set_regs+0x100>
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b13      	cmp	r3, #19
 8001930:	d85e      	bhi.n	80019f0 <bme680_set_regs+0x100>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8001932:	2300      	movs	r3, #0
 8001934:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001936:	e034      	b.n	80019a2 <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	789b      	ldrb	r3, [r3, #2]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d118      	bne.n	8001972 <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8001940:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f001 f8f5 	bl	8002b3a <set_mem_page>
 8001950:	4603      	mov	r3, r0
 8001952:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8001956:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	3340      	adds	r3, #64	@ 0x40
 800196a:	443b      	add	r3, r7
 800196c:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8001970:	e009      	b.n	8001986 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8001972:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	441a      	add	r2, r3
 8001978:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	3340      	adds	r3, #64	@ 0x40
 8001980:	443b      	add	r3, r7
 8001982:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001986:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	441a      	add	r2, r3
 800198c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	3301      	adds	r3, #1
 8001992:	7812      	ldrb	r2, [r2, #0]
 8001994:	3340      	adds	r3, #64	@ 0x40
 8001996:	443b      	add	r3, r7
 8001998:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 800199c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800199e:	3301      	adds	r3, #1
 80019a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3c5      	bcc.n	8001938 <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 80019ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d121      	bne.n	80019f8 <bme680_set_regs+0x108>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	7858      	ldrb	r0, [r3, #1]
 80019bc:	7d39      	ldrb	r1, [r7, #20]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29d      	uxth	r5, r3
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	462b      	mov	r3, r5
 80019d2:	47a0      	blx	r4
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
				if (dev->com_rslt != 0)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d007      	beq.n	80019f8 <bme680_set_regs+0x108>
					rslt = BME680_E_COM_FAIL;
 80019e8:	23fe      	movs	r3, #254	@ 0xfe
 80019ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			if (rslt == BME680_OK) {
 80019ee:	e003      	b.n	80019f8 <bme680_set_regs+0x108>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 80019f0:	23fc      	movs	r3, #252	@ 0xfc
 80019f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80019f6:	e000      	b.n	80019fa <bme680_set_regs+0x10a>
			if (rslt == BME680_OK) {
 80019f8:	bf00      	nop
		}
	}

	return rslt;
 80019fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3740      	adds	r7, #64	@ 0x40
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdb0      	pop	{r4, r5, r7, pc}

08001a06 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8001a0e:	23e0      	movs	r3, #224	@ 0xe0
 8001a10:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8001a12:	23b6      	movs	r3, #182	@ 0xb6
 8001a14:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f001 f95e 	bl	8002cd8 <null_ptr_check>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d127      	bne.n	8001a78 <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	789b      	ldrb	r3, [r3, #2]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d104      	bne.n	8001a3a <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f001 f8e7 	bl	8002c04 <get_mem_page>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d11a      	bne.n	8001a78 <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001a42:	f107 010d 	add.w	r1, r7, #13
 8001a46:	f107 000e 	add.w	r0, r7, #14
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f7ff ff4f 	bl	80018f0 <bme680_set_regs>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	789b      	ldrb	r3, [r3, #2]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d104      	bne.n	8001a78 <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f001 f8c8 	bl	8002c04 <get_mem_page>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001aae:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f001 f911 	bl	8002cd8 <null_ptr_check>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 8001aba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 81a2 	bne.w	8001e08 <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f000 fbbe 	bl	8002250 <set_gas_config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		if (rslt == BME680_OK)
 8001ae0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d104      	bne.n	8001af2 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 8001ae8:	6838      	ldr	r0, [r7, #0]
 8001aea:	f000 f993 	bl	8001e14 <bme680_set_sensor_mode>
 8001aee:	4603      	mov	r3, r0
 8001af0:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03d      	beq.n	8001b78 <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f103 003b 	add.w	r0, r3, #59	@ 0x3b
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2207      	movs	r2, #7
 8001b06:	2100      	movs	r1, #0
 8001b08:	f001 f8ab 	bl	8002c62 <boundary_check>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 8001b10:	2375      	movs	r3, #117	@ 0x75
 8001b12:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001b14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d108      	bne.n	8001b2e <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001b1c:	f107 011b 	add.w	r1, r7, #27
 8001b20:	7f38      	ldrb	r0, [r7, #28]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f7ff fea4 	bl	8001872 <bme680_get_regs>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d010      	beq.n	8001b5a <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8001b38:	7efb      	ldrb	r3, [r7, #27]
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	f023 031c 	bic.w	r3, r3, #28
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	f003 031c 	and.w	r3, r3, #28
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001b5a:	7fbb      	ldrb	r3, [r7, #30]
 8001b5c:	3320      	adds	r3, #32
 8001b5e:	443b      	add	r3, r7
 8001b60:	7f3a      	ldrb	r2, [r7, #28]
 8001b62:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001b66:	7fbb      	ldrb	r3, [r7, #30]
 8001b68:	7efa      	ldrb	r2, [r7, #27]
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	443b      	add	r3, r7
 8001b6e:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001b72:	7fbb      	ldrb	r3, [r7, #30]
 8001b74:	3301      	adds	r3, #1
 8001b76:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d037      	beq.n	8001bf2 <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f103 003d 	add.w	r0, r3, #61	@ 0x3d
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f001 f868 	bl	8002c62 <boundary_check>
 8001b92:	4603      	mov	r3, r0
 8001b94:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8001b96:	2370      	movs	r3, #112	@ 0x70
 8001b98:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001b9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001ba2:	f107 011b 	add.w	r1, r7, #27
 8001ba6:	7f38      	ldrb	r0, [r7, #28]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f7ff fe61 	bl	8001872 <bme680_get_regs>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8001bb4:	7efb      	ldrb	r3, [r7, #27]
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	f023 0308 	bic.w	r3, r3, #8
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001bd4:	7fbb      	ldrb	r3, [r7, #30]
 8001bd6:	3320      	adds	r3, #32
 8001bd8:	443b      	add	r3, r7
 8001bda:	7f3a      	ldrb	r2, [r7, #28]
 8001bdc:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001be0:	7fbb      	ldrb	r3, [r7, #30]
 8001be2:	7efa      	ldrb	r2, [r7, #27]
 8001be4:	3320      	adds	r3, #32
 8001be6:	443b      	add	r3, r7
 8001be8:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001bec:	7fbb      	ldrb	r3, [r7, #30]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d050      	beq.n	8001c9e <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f103 0039 	add.w	r0, r3, #57	@ 0x39
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2205      	movs	r2, #5
 8001c06:	2100      	movs	r1, #0
 8001c08:	f001 f82b 	bl	8002c62 <boundary_check>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8001c10:	2374      	movs	r3, #116	@ 0x74
 8001c12:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001c14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d108      	bne.n	8001c2e <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001c1c:	f107 011b 	add.w	r1, r7, #27
 8001c20:	7f38      	ldrb	r0, [r7, #28]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f7ff fe24 	bl	8001872 <bme680_get_regs>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00d      	beq.n	8001c54 <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8001c38:	7efb      	ldrb	r3, [r7, #27]
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8001c5e:	7efb      	ldrb	r3, [r7, #27]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	f023 031c 	bic.w	r3, r3, #28
 8001c66:	b25a      	sxtb	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	f003 031c 	and.w	r3, r3, #28
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8001c80:	7fbb      	ldrb	r3, [r7, #30]
 8001c82:	3320      	adds	r3, #32
 8001c84:	443b      	add	r3, r7
 8001c86:	7f3a      	ldrb	r2, [r7, #28]
 8001c88:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001c8c:	7fbb      	ldrb	r3, [r7, #30]
 8001c8e:	7efa      	ldrb	r2, [r7, #27]
 8001c90:	3320      	adds	r3, #32
 8001c92:	443b      	add	r3, r7
 8001c94:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001c98:	7fbb      	ldrb	r3, [r7, #30]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d037      	beq.n	8001d18 <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	f000 ffd5 	bl	8002c62 <boundary_check>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8001cbc:	2372      	movs	r3, #114	@ 0x72
 8001cbe:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001cc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d108      	bne.n	8001cda <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001cc8:	f107 011b 	add.w	r1, r7, #27
 8001ccc:	7f38      	ldrb	r0, [r7, #28]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f7ff fdce 	bl	8001872 <bme680_get_regs>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8001cda:	7efb      	ldrb	r3, [r7, #27]
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	f023 0307 	bic.w	r3, r3, #7
 8001ce2:	b25a      	sxtb	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001cfa:	7fbb      	ldrb	r3, [r7, #30]
 8001cfc:	3320      	adds	r3, #32
 8001cfe:	443b      	add	r3, r7
 8001d00:	7f3a      	ldrb	r2, [r7, #28]
 8001d02:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001d06:	7fbb      	ldrb	r3, [r7, #30]
 8001d08:	7efa      	ldrb	r2, [r7, #27]
 8001d0a:	3320      	adds	r3, #32
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001d12:	7fbb      	ldrb	r3, [r7, #30]
 8001d14:	3301      	adds	r3, #1
 8001d16:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d060      	beq.n	8001de4 <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f103 003e 	add.w	r0, r3, #62	@ 0x3e
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	f000 ff98 	bl	8002c62 <boundary_check>
 8001d32:	4603      	mov	r3, r0
 8001d34:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8001d36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	220a      	movs	r2, #10
 8001d48:	2100      	movs	r1, #0
 8001d4a:	f000 ff8a 	bl	8002c62 <boundary_check>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8001d52:	2371      	movs	r3, #113	@ 0x71
 8001d54:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001d56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d108      	bne.n	8001d70 <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001d5e:	f107 011b 	add.w	r1, r7, #27
 8001d62:	7f38      	ldrb	r0, [r7, #28]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f7ff fd83 	bl	8001872 <bme680_get_regs>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d010      	beq.n	8001d9c <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8001d7a:	7efb      	ldrb	r3, [r7, #27]
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	f023 0310 	bic.w	r3, r3, #16
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00f      	beq.n	8001dc6 <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8001da6:	7efb      	ldrb	r3, [r7, #27]
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	f023 030f 	bic.w	r3, r3, #15
 8001dae:	b25a      	sxtb	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001dc6:	7fbb      	ldrb	r3, [r7, #30]
 8001dc8:	3320      	adds	r3, #32
 8001dca:	443b      	add	r3, r7
 8001dcc:	7f3a      	ldrb	r2, [r7, #28]
 8001dce:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001dd2:	7fbb      	ldrb	r3, [r7, #30]
 8001dd4:	7efa      	ldrb	r2, [r7, #27]
 8001dd6:	3320      	adds	r3, #32
 8001dd8:	443b      	add	r3, r7
 8001dda:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001dde:	7fbb      	ldrb	r3, [r7, #30]
 8001de0:	3301      	adds	r3, #1
 8001de2:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8001de4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8001dec:	7fba      	ldrb	r2, [r7, #30]
 8001dee:	f107 010c 	add.w	r1, r7, #12
 8001df2:	f107 0014 	add.w	r0, r7, #20
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f7ff fd7a 	bl	80018f0 <bme680_set_regs>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7f7a      	ldrb	r2, [r7, #29]
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}

	return rslt;
 8001e08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8001e20:	2374      	movs	r3, #116	@ 0x74
 8001e22:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 ff57 	bl	8002cd8 <null_ptr_check>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d14c      	bne.n	8001ed0 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8001e36:	f107 010d 	add.w	r1, r7, #13
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2074      	movs	r0, #116	@ 0x74
 8001e40:	f7ff fd17 	bl	8001872 <bme680_get_regs>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8001e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d119      	bne.n	8001e84 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8001e5e:	7b7b      	ldrb	r3, [r7, #13]
 8001e60:	f023 0303 	bic.w	r3, r3, #3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001e68:	f107 010d 	add.w	r1, r7, #13
 8001e6c:	f107 000c 	add.w	r0, r7, #12
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f7ff fd3c 	bl	80018f0 <bme680_set_regs>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e80:	200a      	movs	r0, #10
 8001e82:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1d5      	bne.n	8001e36 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01d      	beq.n	8001ed0 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8001e94:	7b7b      	ldrb	r3, [r7, #13]
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	f023 0303 	bic.w	r3, r3, #3
 8001e9c:	b25a      	sxtb	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001ebc:	f107 010d 	add.w	r1, r7, #13
 8001ec0:	f107 000c 	add.w	r0, r7, #12
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f7ff fd12 	bl	80018f0 <bme680_set_regs>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f98 <bme680_get_profile_dur+0xbc>)
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef0:	6018      	str	r0, [r3, #0]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001efc:	3318      	adds	r3, #24
 8001efe:	443b      	add	r3, r7
 8001f00:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f04:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	443b      	add	r3, r7
 8001f10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f14:	461a      	mov	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	4413      	add	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f22:	3318      	adds	r3, #24
 8001f24:	443b      	add	r3, r7
 8001f26:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4413      	add	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8001f44:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 8001f4c:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f54:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4a10      	ldr	r2, [pc, #64]	@ (8001f9c <bme680_get_profile_dur+0xc0>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	099b      	lsrs	r3, r3, #6
 8001f60:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	3301      	adds	r3, #1
 8001f66:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	881a      	ldrh	r2, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001f84:	4413      	add	r3, r2
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	801a      	strh	r2, [r3, #0]
	}
}
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	08009150 	.word	0x08009150
 8001f9c:	10624dd3 	.word	0x10624dd3

08001fa0 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001faa:	6838      	ldr	r0, [r7, #0]
 8001fac:	f000 fe94 	bl	8002cd8 <null_ptr_check>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d117      	bne.n	8001fec <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fd05 	bl	80029ce <read_field_data>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8001fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10d      	bne.n	8001fec <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da04      	bge.n	8001fe4 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fe2:	e003      	b.n	8001fec <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
		}
	}

	return rslt;
 8001fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	@ 0x38
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	2225      	movs	r2, #37	@ 0x25
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f004 ffff 	bl	8007010 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8002012:	2300      	movs	r3, #0
 8002014:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fe5e 	bl	8002cd8 <null_ptr_check>
 800201c:	4603      	mov	r3, r0
 800201e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (rslt == BME680_OK) {
 8002022:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 810c 	bne.w	8002244 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 800202c:	f107 010c 	add.w	r1, r7, #12
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2219      	movs	r2, #25
 8002034:	2089      	movs	r0, #137	@ 0x89
 8002036:	f7ff fc1c 	bl	8001872 <bme680_get_regs>
 800203a:	4603      	mov	r3, r0
 800203c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8002040:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	f103 0119 	add.w	r1, r3, #25
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2210      	movs	r2, #16
 8002054:	20e1      	movs	r0, #225	@ 0xe1
 8002056:	f7ff fc0c 	bl	8001872 <bme680_get_regs>
 800205a:	4603      	mov	r3, r0
 800205c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8002060:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800206c:	b21b      	sxth	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b21b      	sxth	r3, r3
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b21a      	sxth	r2, r3
 800207e:	7b7b      	ldrb	r3, [r7, #13]
 8002080:	b21b      	sxth	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	b21a      	sxth	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	b25a      	sxtb	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8002092:	7cbb      	ldrb	r3, [r7, #18]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	b21a      	sxth	r2, r3
 8002098:	7c7b      	ldrb	r3, [r7, #17]
 800209a:	b21b      	sxth	r3, r3
 800209c:	4313      	orrs	r3, r2
 800209e:	b21b      	sxth	r3, r3
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80020a6:	7d3b      	ldrb	r3, [r7, #20]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80020b8:	7d7b      	ldrb	r3, [r7, #21]
 80020ba:	b25a      	sxtb	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80020c2:	7e3b      	ldrb	r3, [r7, #24]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	845a      	strh	r2, [r3, #34]	@ 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80020d4:	7ebb      	ldrb	r3, [r7, #26]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21a      	sxth	r2, r3
 80020da:	7e7b      	ldrb	r3, [r7, #25]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	849a      	strh	r2, [r3, #36]	@ 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80020e6:	7f3b      	ldrb	r3, [r7, #28]
 80020e8:	b25a      	sxtb	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80020f0:	7efb      	ldrb	r3, [r7, #27]
 80020f2:	b25a      	sxtb	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80020fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	b21a      	sxth	r2, r3
 8002102:	7ffb      	ldrb	r3, [r7, #31]
 8002104:	b21b      	sxth	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b21a      	sxth	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	851a      	strh	r2, [r3, #40]	@ 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 800210e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21a      	sxth	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	855a      	strh	r2, [r3, #42]	@ 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8002124:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800212e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002132:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8002134:	b21a      	sxth	r2, r3
 8002136:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800213a:	b21b      	sxth	r3, r3
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	b21b      	sxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800214c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002150:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8002152:	b21a      	sxth	r2, r3
 8002154:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	b2db      	uxtb	r3, r3
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8002162:	b29a      	uxth	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8002168:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800216c:	b25a      	sxtb	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8002172:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002176:	b25a      	sxtb	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 800217c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002180:	b25a      	sxtb	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8002186:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 800218e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002192:	b25a      	sxtb	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8002198:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800219c:	b25a      	sxtb	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80021a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b21a      	sxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80021b8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80021bc:	b25a      	sxtb	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 80021c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d135      	bne.n	8002236 <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 80021ca:	f107 010b 	add.w	r1, r7, #11
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	2002      	movs	r0, #2
 80021d4:	f7ff fb4d 	bl	8001872 <bme680_get_regs>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da00      	bge.n	80021ea <get_calib_data+0x1f2>
 80021e8:	330f      	adds	r3, #15
 80021ea:	111b      	asrs	r3, r3, #4
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if (rslt == BME680_OK) {
 80021f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d11c      	bne.n	8002236 <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80021fc:	f107 010b 	add.w	r1, r7, #11
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff fb34 	bl	8001872 <bme680_get_regs>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	b25a      	sxtb	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				if (rslt == BME680_OK)
 800221a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8002222:	f107 010b 	add.w	r1, r7, #11
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	2004      	movs	r0, #4
 800222c:	f7ff fb21 	bl	8001872 <bme680_get_regs>
 8002230:	4603      	mov	r3, r0
 8002232:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	b25b      	sxtb	r3, r3
 800223a:	111b      	asrs	r3, r3, #4
 800223c:	b25a      	sxtb	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	}

	return rslt;
 8002244:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002248:	4618      	mov	r0, r3
 800224a:	3738      	adds	r7, #56	@ 0x38
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fd3d 	bl	8002cd8 <null_ptr_check>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d132      	bne.n	80022d0 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 800226a:	2300      	movs	r3, #0
 800226c:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 800226e:	2300      	movs	r3, #0
 8002270:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002278:	2b01      	cmp	r3, #1
 800227a:	d119      	bne.n	80022b0 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 800227c:	235a      	movs	r3, #90	@ 0x5a
 800227e:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 faff 	bl	800288c <calc_heater_res>
 800228e:	4603      	mov	r3, r0
 8002290:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8002292:	2364      	movs	r3, #100	@ 0x64
 8002294:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fb71 	bl	8002984 <calc_heater_dur>
 80022a2:	4603      	mov	r3, r0
 80022a4:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80022ae:	e001      	b.n	80022b4 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 80022b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80022bc:	f107 0108 	add.w	r1, r7, #8
 80022c0:	f107 000c 	add.w	r0, r7, #12
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f7ff fb12 	bl	80018f0 <bme680_set_regs>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80022d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 80022dc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022e0:	b091      	sub	sp, #68	@ 0x44
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	61f8      	str	r0, [r7, #28]
 80022e6:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	10da      	asrs	r2, r3, #3
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	8adb      	ldrh	r3, [r3, #22]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	17da      	asrs	r2, r3, #31
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002308:	b21b      	sxth	r3, r3
 800230a:	17da      	asrs	r2, r3, #31
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	617a      	str	r2, [r7, #20]
 8002310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002312:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002316:	460a      	mov	r2, r1
 8002318:	fb02 f203 	mul.w	r2, r2, r3
 800231c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002322:	4601      	mov	r1, r0
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800232c:	6939      	ldr	r1, [r7, #16]
 800232e:	fba2 4501 	umull	r4, r5, r2, r1
 8002332:	442b      	add	r3, r5
 8002334:	461d      	mov	r5, r3
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	0ae2      	lsrs	r2, r4, #11
 8002340:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8002344:	12eb      	asrs	r3, r5, #11
 8002346:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 800234a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0850      	lsrs	r0, r2, #1
 8002358:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800235c:	1059      	asrs	r1, r3, #1
 800235e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	0862      	lsrs	r2, r4, #1
 800236c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8002370:	106b      	asrs	r3, r5, #1
 8002372:	fb02 f501 	mul.w	r5, r2, r1
 8002376:	fb00 f403 	mul.w	r4, r0, r3
 800237a:	442c      	add	r4, r5
 800237c:	fba0 ab02 	umull	sl, fp, r0, r2
 8002380:	eb04 030b 	add.w	r3, r4, fp
 8002384:	469b      	mov	fp, r3
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	ea4f 321a 	mov.w	r2, sl, lsr #12
 8002392:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 8002396:	ea4f 332b 	mov.w	r3, fp, asr #12
 800239a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	17da      	asrs	r2, r3, #31
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023b2:	462a      	mov	r2, r5
 80023b4:	fb02 f203 	mul.w	r2, r2, r3
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ba:	4621      	mov	r1, r4
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023c4:	4621      	mov	r1, r4
 80023c6:	fba2 8901 	umull	r8, r9, r2, r1
 80023ca:	444b      	add	r3, r9
 80023cc:	4699      	mov	r9, r3
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	ea4f 3298 	mov.w	r2, r8, lsr #14
 80023da:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 80023de:	ea4f 33a9 	mov.w	r3, r9, asr #14
 80023e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80023e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ea:	4413      	add	r3, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3380      	adds	r3, #128	@ 0x80
 80023fe:	121b      	asrs	r3, r3, #8
 8002400:	84fb      	strh	r3, [r7, #38]	@ 0x26

	return calc_temp;
 8002402:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8002406:	4618      	mov	r0, r3
 8002408:	3744      	adds	r7, #68	@ 0x44
 800240a:	46bd      	mov	sp, r7
 800240c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002410:	4770      	bx	lr

08002412 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8002412:	b480      	push	{r7}
 8002414:	b087      	sub	sp, #28
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	105b      	asrs	r3, r3, #1
 8002422:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8002426:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	109b      	asrs	r3, r3, #2
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	1092      	asrs	r2, r2, #2
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	f992 2026 	ldrsb.w	r2, [r2, #38]	@ 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	109b      	asrs	r3, r3, #2
 8002442:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800244a:	461a      	mov	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	109a      	asrs	r2, r3, #2
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	109b      	asrs	r3, r3, #2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	1092      	asrs	r2, r2, #2
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	f992 2020 	ldrsb.w	r2, [r2, #32]
 800247e:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002480:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8002484:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800248c:	4619      	mov	r1, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002496:	4413      	add	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	149b      	asrs	r3, r3, #18
 800249e:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	8b92      	ldrh	r2, [r2, #28]
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	13db      	asrs	r3, r3, #15
 80024b0:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80024b8:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	131b      	asrs	r3, r3, #12
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	f640 4335 	movw	r3, #3125	@ 0xc35
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d4:	db06      	blt.n	80024e4 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	fb92 f3f3 	sdiv	r3, r2, r3
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e005      	b.n	80024f0 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005a      	lsls	r2, r3, #1
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80024f6:	4619      	mov	r1, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8002500:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8002504:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	131b      	asrs	r3, r3, #12
 800250c:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	@ 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	135b      	asrs	r3, r3, #13
 800251e:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	121b      	asrs	r3, r3, #8
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	1212      	asrs	r2, r2, #8
 8002528:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8002530:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
		(int32_t)(pressure_comp >> 8) *
 800253a:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 800253e:	145b      	asrs	r3, r3, #17
 8002540:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	441a      	add	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 8002552:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002554:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8002556:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4413      	add	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 800255e:	697b      	ldr	r3, [r7, #20]

}
 8002560:	4618      	mov	r0, r3
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 800256c:	b490      	push	{r4, r7}
 800256e:	b08a      	sub	sp, #40	@ 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3380      	adds	r3, #128	@ 0x80
 8002584:	121b      	asrs	r3, r3, #8
 8002586:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8002588:	88fa      	ldrh	r2, [r7, #6]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	891b      	ldrh	r3, [r3, #8]
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002598:	4619      	mov	r1, r3
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	493d      	ldr	r1, [pc, #244]	@ (8002698 <calc_humidity+0x12c>)
 80025a2:	fb81 0103 	smull	r0, r1, r1, r3
 80025a6:	1149      	asrs	r1, r1, #5
 80025a8:	17db      	asrs	r3, r3, #31
 80025aa:	1acb      	subs	r3, r1, r3
 80025ac:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	895b      	ldrh	r3, [r3, #10]
 80025b6:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80025be:	461a      	mov	r2, r3
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a34      	ldr	r2, [pc, #208]	@ (8002698 <calc_humidity+0x12c>)
 80025c8:	fb82 1203 	smull	r1, r2, r2, r3
 80025cc:	1152      	asrs	r2, r2, #5
 80025ce:	17db      	asrs	r3, r3, #31
 80025d0:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80025d8:	4619      	mov	r1, r3
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	492d      	ldr	r1, [pc, #180]	@ (8002698 <calc_humidity+0x12c>)
 80025e2:	fb81 4103 	smull	r4, r1, r1, r3
 80025e6:	1149      	asrs	r1, r1, #5
 80025e8:	17db      	asrs	r3, r3, #31
 80025ea:	1acb      	subs	r3, r1, r3
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80025f4:	4928      	ldr	r1, [pc, #160]	@ (8002698 <calc_humidity+0x12c>)
 80025f6:	fb81 4103 	smull	r4, r1, r1, r3
 80025fa:	1149      	asrs	r1, r1, #5
 80025fc:	17db      	asrs	r3, r3, #31
 80025fe:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8002600:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8002602:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8002606:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 800260a:	129b      	asrs	r3, r3, #10
 800260c:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7bdb      	ldrb	r3, [r3, #15]
 800261c:	01db      	lsls	r3, r3, #7
 800261e:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002626:	461a      	mov	r2, r3
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	4a1a      	ldr	r2, [pc, #104]	@ (8002698 <calc_humidity+0x12c>)
 8002630:	fb82 1203 	smull	r1, r2, r2, r3
 8002634:	1152      	asrs	r2, r2, #5
 8002636:	17db      	asrs	r3, r3, #31
 8002638:	1ad2      	subs	r2, r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	111b      	asrs	r3, r3, #4
 8002640:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	139b      	asrs	r3, r3, #14
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	1392      	asrs	r2, r2, #14
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	129b      	asrs	r3, r3, #10
 8002650:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	105b      	asrs	r3, r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4413      	add	r3, r2
 8002664:	129b      	asrs	r3, r3, #10
 8002666:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	131b      	asrs	r3, r3, #12
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	4a09      	ldr	r2, [pc, #36]	@ (800269c <calc_humidity+0x130>)
 8002676:	4293      	cmp	r3, r2
 8002678:	dd02      	ble.n	8002680 <calc_humidity+0x114>
		calc_hum = 100000;
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <calc_humidity+0x130>)
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
 800267e:	e004      	b.n	800268a <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	da01      	bge.n	800268a <calc_humidity+0x11e>
		calc_hum = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24

	return (uint32_t) calc_hum;
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800268c:	4618      	mov	r0, r3
 800268e:	3728      	adds	r7, #40	@ 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bc90      	pop	{r4, r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	51eb851f 	.word	0x51eb851f
 800269c:	000186a0 	.word	0x000186a0

080026a0 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 80026a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a4:	b0bc      	sub	sp, #240	@ 0xf0
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80026ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80026b0:	460b      	mov	r3, r1
 80026b2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 80026b6:	4b73      	ldr	r3, [pc, #460]	@ (8002884 <calc_gas_resistance+0x1e4>)
 80026b8:	f107 0594 	add.w	r5, r7, #148	@ 0x94
 80026bc:	461c      	mov	r4, r3
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 80026d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002888 <calc_gas_resistance+0x1e8>)
 80026d4:	f107 0554 	add.w	r5, r7, #84	@ 0x54
 80026d8:	461c      	mov	r4, r3
 80026da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80026ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f0:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	17da      	asrs	r2, r3, #31
 80026f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80026fc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002700:	4622      	mov	r2, r4
 8002702:	462b      	mov	r3, r5
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	0099      	lsls	r1, r3, #2
 800270e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002712:	0090      	lsls	r0, r2, #2
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4621      	mov	r1, r4
 800271a:	1851      	adds	r1, r2, r1
 800271c:	6339      	str	r1, [r7, #48]	@ 0x30
 800271e:	4629      	mov	r1, r5
 8002720:	eb43 0101 	adc.w	r1, r3, r1
 8002724:	6379      	str	r1, [r7, #52]	@ 0x34
 8002726:	f240 533c 	movw	r3, #1340	@ 0x53c
 800272a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800272e:	4602      	mov	r2, r0
 8002730:	18d3      	adds	r3, r2, r3
 8002732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002734:	460b      	mov	r3, r1
 8002736:	f143 0300 	adc.w	r3, r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		((int64_t) lookupTable1[gas_range])) >> 16;
 800273c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	33a8      	adds	r3, #168	@ 0xa8
 8002744:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002748:	4413      	add	r3, r2
 800274a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800274e:	2200      	movs	r2, #0
 8002750:	643b      	str	r3, [r7, #64]	@ 0x40
 8002752:	647a      	str	r2, [r7, #68]	@ 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8002754:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002758:	460b      	mov	r3, r1
 800275a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800275e:	4622      	mov	r2, r4
 8002760:	fb02 f203 	mul.w	r2, r2, r3
 8002764:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8002768:	462b      	mov	r3, r5
 800276a:	4604      	mov	r4, r0
 800276c:	460d      	mov	r5, r1
 800276e:	4621      	mov	r1, r4
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	4622      	mov	r2, r4
 8002778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800277a:	fba2 8901 	umull	r8, r9, r2, r1
 800277e:	444b      	add	r3, r9
 8002780:	4699      	mov	r9, r3
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 4218 	mov.w	r2, r8, lsr #16
 800278e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8002792:	ea4f 4329 	mov.w	r3, r9, asr #16
 8002796:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 800279a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800279e:	2200      	movs	r2, #0
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027b0:	4629      	mov	r1, r5
 80027b2:	03cb      	lsls	r3, r1, #15
 80027b4:	4621      	mov	r1, r4
 80027b6:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 80027ba:	4621      	mov	r1, r4
 80027bc:	03ca      	lsls	r2, r1, #15
 80027be:	f112 417f 	adds.w	r1, r2, #4278190080	@ 0xff000000
 80027c2:	61b9      	str	r1, [r7, #24]
 80027c4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80027ce:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80027d2:	4621      	mov	r1, r4
 80027d4:	1889      	adds	r1, r1, r2
 80027d6:	6139      	str	r1, [r7, #16]
 80027d8:	4629      	mov	r1, r5
 80027da:	eb43 0101 	adc.w	r1, r3, r1
 80027de:	6179      	str	r1, [r7, #20]
 80027e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027e4:	e9c7 3438 	strd	r3, r4, [r7, #224]	@ 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80027e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	33a8      	adds	r3, #168	@ 0xa8
 80027f0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80027f4:	4413      	add	r3, r2
 80027f6:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80027fa:	2200      	movs	r2, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	60fa      	str	r2, [r7, #12]
 8002800:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002804:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002808:	462a      	mov	r2, r5
 800280a:	fb02 f203 	mul.w	r2, r2, r3
 800280e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002812:	4621      	mov	r1, r4
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800281e:	4621      	mov	r1, r4
 8002820:	fba2 ab01 	umull	sl, fp, r2, r1
 8002824:	445b      	add	r3, fp
 8002826:	469b      	mov	fp, r3
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	ea4f 225a 	mov.w	r2, sl, lsr #9
 8002834:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 8002838:	ea4f 236b 	mov.w	r3, fp, asr #9
 800283c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8002840:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	0842      	lsrs	r2, r0, #1
 800284e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002852:	104b      	asrs	r3, r1, #1
 8002854:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8002858:	1814      	adds	r4, r2, r0
 800285a:	603c      	str	r4, [r7, #0]
 800285c:	414b      	adcs	r3, r1
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8002864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002868:	f7fe f99e 	bl	8000ba8 <__aeabi_ldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	return calc_gas_res;
 8002876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
}
 800287a:	4618      	mov	r0, r3
 800287c:	37f0      	adds	r7, #240	@ 0xf0
 800287e:	46bd      	mov	sp, r7
 8002880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002884:	08009158 	.word	0x08009158
 8002888:	08009198 	.word	0x08009198

0800288c <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 800288c:	b480      	push	{r7}
 800288e:	b08b      	sub	sp, #44	@ 0x2c
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800289e:	d902      	bls.n	80028a6 <calc_heater_res+0x1a>
		temp = 400;
 80028a0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80028a4:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80028ac:	461a      	mov	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002978 <calc_heater_res+0xec>)
 80028ba:	fb82 1203 	smull	r1, r2, r2, r3
 80028be:	1192      	asrs	r2, r2, #6
 80028c0:	17db      	asrs	r3, r3, #31
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80028ce:	f503 7244 	add.w	r2, r3, #784	@ 0x310
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80028d8:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80028dc:	f203 1399 	addw	r3, r3, #409	@ 0x199
 80028e0:	88f9      	ldrh	r1, [r7, #6]
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4925      	ldr	r1, [pc, #148]	@ (800297c <calc_heater_res+0xf0>)
 80028e8:	fb81 0103 	smull	r0, r1, r1, r3
 80028ec:	10c9      	asrs	r1, r1, #3
 80028ee:	17db      	asrs	r3, r3, #31
 80028f0:	1acb      	subs	r3, r1, r3
 80028f2:	f503 1348 	add.w	r3, r3, #3276800	@ 0x320000
 80028f6:	4921      	ldr	r1, [pc, #132]	@ (800297c <calc_heater_res+0xf0>)
 80028f8:	fb81 0103 	smull	r0, r1, r1, r3
 80028fc:	1089      	asrs	r1, r1, #2
 80028fe:	17db      	asrs	r3, r3, #31
 8002900:	1acb      	subs	r3, r1, r3
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	0fda      	lsrs	r2, r3, #31
 800290c:	4413      	add	r3, r2
 800290e:	105b      	asrs	r3, r3, #1
 8002910:	461a      	mov	r2, r3
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	4413      	add	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800291e:	3304      	adds	r3, #4
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	fb92 f3f3 	sdiv	r3, r2, r3
 8002926:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 800292e:	461a      	mov	r2, r3
 8002930:	4613      	mov	r3, r2
 8002932:	019b      	lsls	r3, r3, #6
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800293e:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fb92 f3f3 	sdiv	r3, r2, r3
 8002948:	f1a3 02fa 	sub.w	r2, r3, #250	@ 0xfa
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4413      	add	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	3332      	adds	r3, #50	@ 0x32
 800295a:	4a09      	ldr	r2, [pc, #36]	@ (8002980 <calc_heater_res+0xf4>)
 800295c:	fb82 1203 	smull	r1, r2, r2, r3
 8002960:	1152      	asrs	r2, r2, #5
 8002962:	17db      	asrs	r3, r3, #31
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	372c      	adds	r7, #44	@ 0x2c
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	10624dd3 	.word	0x10624dd3
 800297c:	66666667 	.word	0x66666667
 8002980:	51eb851f 	.word	0x51eb851f

08002984 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002998:	d308      	bcc.n	80029ac <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 800299a:	23ff      	movs	r3, #255	@ 0xff
 800299c:	73bb      	strb	r3, [r7, #14]
 800299e:	e00f      	b.n	80029c0 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3301      	adds	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80029b0:	d8f6      	bhi.n	80029a0 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4413      	add	r3, r2
 80029be:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 80029c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08a      	sub	sp, #40	@ 0x28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 80029ea:	230a      	movs	r3, #10
 80029ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	f000 f971 	bl	8002cd8 <null_ptr_check>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	do {
		if (rslt == BME680_OK) {
 80029fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 8083 	bne.w	8002b0c <read_field_data+0x13e>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8002a06:	f107 0108 	add.w	r1, r7, #8
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	201d      	movs	r0, #29
 8002a10:	f7fe ff2f 	bl	8001872 <bme680_get_regs>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8002a1a:	7a3b      	ldrb	r3, [r7, #8]
 8002a1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8002a26:	7a3b      	ldrb	r3, [r7, #8]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 8002a32:	7a7a      	ldrb	r2, [r7, #9]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8002a38:	7abb      	ldrb	r3, [r7, #10]
 8002a3a:	031a      	lsls	r2, r3, #12
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8002a42:	7b3a      	ldrb	r2, [r7, #12]
 8002a44:	0912      	lsrs	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8002a4c:	7b7b      	ldrb	r3, [r7, #13]
 8002a4e:	031a      	lsls	r2, r3, #12
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	0912      	lsrs	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002a60:	7c3b      	ldrb	r3, [r7, #16]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	7c7a      	ldrb	r2, [r7, #17]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8002a6c:	7d7b      	ldrb	r3, [r7, #21]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	7dba      	ldrb	r2, [r7, #22]
 8002a74:	0992      	lsrs	r2, r2, #6
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8002a7c:	7dbb      	ldrb	r3, [r7, #22]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b25a      	sxtb	r2, r3
 8002a8a:	7dbb      	ldrb	r3, [r7, #22]
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b25a      	sxtb	r2, r3
 8002aa4:	7dbb      	ldrb	r3, [r7, #22]
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da20      	bge.n	8002b04 <read_field_data+0x136>
				data->temperature = calc_temperature(adc_temp, dev);
 8002ac2:	6839      	ldr	r1, [r7, #0]
 8002ac4:	69f8      	ldr	r0, [r7, #28]
 8002ac6:	f7ff fc09 	bl	80022dc <calc_temperature>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	6a38      	ldr	r0, [r7, #32]
 8002ad6:	f7ff fc9c 	bl	8002412 <calc_pressure>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8002ae0:	8b7b      	ldrh	r3, [r7, #26]
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fd41 	bl	800256c <calc_humidity>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8002af0:	7df9      	ldrb	r1, [r7, #23]
 8002af2:	8b3b      	ldrh	r3, [r7, #24]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fdd2 	bl	80026a0 <calc_gas_resistance>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]
				break;
 8002b02:	e00d      	b.n	8002b20 <read_field_data+0x152>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b08:	200a      	movs	r0, #10
 8002b0a:	4798      	blx	r3
		}
		tries--;
 8002b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002b10:	3b01      	subs	r3, #1
 8002b12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	} while (tries);
 8002b16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f47f af6e 	bne.w	80029fc <read_field_data+0x2e>

	if (!tries)
 8002b20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <read_field_data+0x160>
		rslt = BME680_W_NO_NEW_DATA;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	return rslt;
 8002b2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3728      	adds	r7, #40	@ 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8002b3a:	b590      	push	{r4, r7, lr}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	6039      	str	r1, [r7, #0]
 8002b44:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8002b46:	6838      	ldr	r0, [r7, #0]
 8002b48:	f000 f8c6 	bl	8002cd8 <null_ptr_check>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d14f      	bne.n	8002bf8 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da02      	bge.n	8002b66 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73bb      	strb	r3, [r7, #14]
 8002b64:	e001      	b.n	8002b6a <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8002b66:	2310      	movs	r3, #16
 8002b68:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	78db      	ldrb	r3, [r3, #3]
 8002b6e:	7bba      	ldrb	r2, [r7, #14]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d041      	beq.n	8002bf8 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	7bba      	ldrb	r2, [r7, #14]
 8002b78:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	7858      	ldrb	r0, [r3, #1]
 8002b82:	f107 020d 	add.w	r2, r7, #13
 8002b86:	2301      	movs	r3, #1
 8002b88:	21f3      	movs	r1, #243	@ 0xf3
 8002b8a:	47a0      	blx	r4
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			if (dev->com_rslt != 0)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 8002ba0:	23fe      	movs	r3, #254	@ 0xfe
 8002ba2:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 8002ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d125      	bne.n	8002bf8 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8002bac:	7b7b      	ldrb	r3, [r7, #13]
 8002bae:	f023 0310 	bic.w	r3, r3, #16
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	78db      	ldrb	r3, [r3, #3]
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	b25a      	sxtb	r2, r3
 8002bc2:	7b7b      	ldrb	r3, [r7, #13]
 8002bc4:	b25b      	sxtb	r3, r3
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	7858      	ldrb	r0, [r3, #1]
 8002bd6:	f107 020d 	add.w	r2, r7, #13
 8002bda:	2301      	movs	r3, #1
 8002bdc:	2173      	movs	r1, #115	@ 0x73
 8002bde:	47a0      	blx	r4
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 8002bf4:	23fe      	movs	r3, #254	@ 0xfe
 8002bf6:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8002bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd90      	pop	{r4, r7, pc}

08002c04 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f863 	bl	8002cd8 <null_ptr_check>
 8002c12:	4603      	mov	r3, r0
 8002c14:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11b      	bne.n	8002c56 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7858      	ldrb	r0, [r3, #1]
 8002c26:	f107 020e 	add.w	r2, r7, #14
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	21f3      	movs	r1, #243	@ 0xf3
 8002c2e:	47a0      	blx	r4
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		if (dev->com_rslt != 0)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8002c44:	23fe      	movs	r3, #254	@ 0xfe
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e005      	b.n	8002c56 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8002c4a:	7bbb      	ldrb	r3, [r7, #14]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}

08002c62 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b087      	sub	sp, #28
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	72fb      	strb	r3, [r7, #11]
 8002c70:	4613      	mov	r3, r2
 8002c72:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d022      	beq.n	8002cc4 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	7afa      	ldrb	r2, [r7, #11]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d90b      	bls.n	8002ca0 <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	7afa      	ldrb	r2, [r7, #11]
 8002c8c:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	7aba      	ldrb	r2, [r7, #10]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20e      	bcs.n	8002cc8 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	7aba      	ldrb	r2, [r7, #10]
 8002cae:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002cc2:	e001      	b.n	8002cc8 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8002cc4:	23ff      	movs	r3, #255	@ 0xff
 8002cc6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <null_ptr_check+0x26>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <null_ptr_check+0x26>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <null_ptr_check+0x26>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8002cfe:	23ff      	movs	r3, #255	@ 0xff
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	e001      	b.n	8002d08 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <user_i2c_read>:



int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	603a      	str	r2, [r7, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
 8002d26:	460b      	mov	r3, r1
 8002d28:	71bb      	strb	r3, [r7, #6]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
     * | Read       | (reg_data[len - 1]) |
     * | Stop       | -                   |
     * |------------+---------------------|
     */

    return rslt;
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	603a      	str	r2, [r7, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	460b      	mov	r3, r1
 8002d52:	71bb      	strb	r3, [r7, #6]
 8002d54:	4613      	mov	r3, r2
 8002d56:	80bb      	strh	r3, [r7, #4]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
     * | Write      | (reg_data[len - 1]) |
     * | Stop       | -                   |
     * |------------+---------------------|
     */

    return rslt;
 8002d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d76:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <HAL_Init+0x3c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8002da8 <HAL_Init+0x3c>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d82:	2003      	movs	r0, #3
 8002d84:	f000 f944 	bl	8003010 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f000 f80f 	bl	8002dac <HAL_InitTick>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	e001      	b.n	8002d9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d9a:	f7fe fb2d 	bl	80013f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40022000 	.word	0x40022000

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002db8:	4b17      	ldr	r3, [pc, #92]	@ (8002e18 <HAL_InitTick+0x6c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d023      	beq.n	8002e08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dc0:	4b16      	ldr	r3, [pc, #88]	@ (8002e1c <HAL_InitTick+0x70>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_InitTick+0x6c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f941 	bl	800305e <HAL_SYSTICK_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d809      	bhi.n	8002dfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de8:	2200      	movs	r2, #0
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f000 f919 	bl	8003026 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002df4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <HAL_InitTick+0x74>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e007      	b.n	8002e0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e004      	b.n	8002e0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	e001      	b.n	8002e0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000034 	.word	0x20000034
 8002e1c:	2000002c 	.word	0x2000002c
 8002e20:	20000030 	.word	0x20000030

08002e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x20>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_IncTick+0x24>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <HAL_IncTick+0x24>)
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000034 	.word	0x20000034
 8002e48:	20000360 	.word	0x20000360

08002e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e50:	4b03      	ldr	r3, [pc, #12]	@ (8002e60 <HAL_GetTick+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000360 	.word	0x20000360

08002e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff ffee 	bl	8002e4c <HAL_GetTick>
 8002e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d005      	beq.n	8002e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <HAL_Delay+0x44>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e8a:	bf00      	nop
 8002e8c:	f7ff ffde 	bl	8002e4c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d8f7      	bhi.n	8002e8c <HAL_Delay+0x28>
  {
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000034 	.word	0x20000034

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	db0a      	blt.n	8002f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	490c      	ldr	r1, [pc, #48]	@ (8002f5c <__NVIC_SetPriority+0x4c>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	440b      	add	r3, r1
 8002f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f38:	e00a      	b.n	8002f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4908      	ldr	r1, [pc, #32]	@ (8002f60 <__NVIC_SetPriority+0x50>)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3b04      	subs	r3, #4
 8002f48:	0112      	lsls	r2, r2, #4
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	761a      	strb	r2, [r3, #24]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e100 	.word	0xe000e100
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	@ 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f1c3 0307 	rsb	r3, r3, #7
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	bf28      	it	cs
 8002f82:	2304      	movcs	r3, #4
 8002f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d902      	bls.n	8002f94 <NVIC_EncodePriority+0x30>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3b03      	subs	r3, #3
 8002f92:	e000      	b.n	8002f96 <NVIC_EncodePriority+0x32>
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fac:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	43d9      	mvns	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	4313      	orrs	r3, r2
         );
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	@ 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fdc:	d301      	bcc.n	8002fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <SysTick_Config+0x40>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fea:	210f      	movs	r1, #15
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f7ff ff8e 	bl	8002f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff4:	4b05      	ldr	r3, [pc, #20]	@ (800300c <SysTick_Config+0x40>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffa:	4b04      	ldr	r3, [pc, #16]	@ (800300c <SysTick_Config+0x40>)
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	e000e010 	.word	0xe000e010

08003010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff47 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003038:	f7ff ff5c 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 800303c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7ff ff8e 	bl	8002f64 <NVIC_EncodePriority>
 8003048:	4602      	mov	r2, r0
 800304a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff5d 	bl	8002f10 <__NVIC_SetPriority>
}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ffb0 	bl	8002fcc <SysTick_Config>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003086:	e17f      	b.n	8003388 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	4013      	ands	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8171 	beq.w	8003382 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d005      	beq.n	80030b8 <HAL_GPIO_Init+0x40>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d130      	bne.n	800311a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ee:	2201      	movs	r2, #1
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	f003 0201 	and.w	r2, r3, #1
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b03      	cmp	r3, #3
 8003124:	d118      	bne.n	8003158 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800312c:	2201      	movs	r2, #1
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f003 0201 	and.w	r2, r3, #1
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b03      	cmp	r3, #3
 8003162:	d017      	beq.n	8003194 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d123      	bne.n	80031e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	6939      	ldr	r1, [r7, #16]
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0203 	and.w	r2, r3, #3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80ac 	beq.w	8003382 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	4b5f      	ldr	r3, [pc, #380]	@ (80033a8 <HAL_GPIO_Init+0x330>)
 800322c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322e:	4a5e      	ldr	r2, [pc, #376]	@ (80033a8 <HAL_GPIO_Init+0x330>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6613      	str	r3, [r2, #96]	@ 0x60
 8003236:	4b5c      	ldr	r3, [pc, #368]	@ (80033a8 <HAL_GPIO_Init+0x330>)
 8003238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003242:	4a5a      	ldr	r2, [pc, #360]	@ (80033ac <HAL_GPIO_Init+0x334>)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	3302      	adds	r3, #2
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	220f      	movs	r2, #15
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800326c:	d025      	beq.n	80032ba <HAL_GPIO_Init+0x242>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4f      	ldr	r2, [pc, #316]	@ (80033b0 <HAL_GPIO_Init+0x338>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <HAL_GPIO_Init+0x23e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4e      	ldr	r2, [pc, #312]	@ (80033b4 <HAL_GPIO_Init+0x33c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_Init+0x23a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4d      	ldr	r2, [pc, #308]	@ (80033b8 <HAL_GPIO_Init+0x340>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x236>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4c      	ldr	r2, [pc, #304]	@ (80033bc <HAL_GPIO_Init+0x344>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x232>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4b      	ldr	r2, [pc, #300]	@ (80033c0 <HAL_GPIO_Init+0x348>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x22e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4a      	ldr	r2, [pc, #296]	@ (80033c4 <HAL_GPIO_Init+0x34c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x22a>
 800329e:	2306      	movs	r3, #6
 80032a0:	e00c      	b.n	80032bc <HAL_GPIO_Init+0x244>
 80032a2:	2307      	movs	r3, #7
 80032a4:	e00a      	b.n	80032bc <HAL_GPIO_Init+0x244>
 80032a6:	2305      	movs	r3, #5
 80032a8:	e008      	b.n	80032bc <HAL_GPIO_Init+0x244>
 80032aa:	2304      	movs	r3, #4
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x244>
 80032ae:	2303      	movs	r3, #3
 80032b0:	e004      	b.n	80032bc <HAL_GPIO_Init+0x244>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e002      	b.n	80032bc <HAL_GPIO_Init+0x244>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_GPIO_Init+0x244>
 80032ba:	2300      	movs	r3, #0
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	f002 0203 	and.w	r2, r2, #3
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	4093      	lsls	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032cc:	4937      	ldr	r1, [pc, #220]	@ (80033ac <HAL_GPIO_Init+0x334>)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032da:	4b3b      	ldr	r3, [pc, #236]	@ (80033c8 <HAL_GPIO_Init+0x350>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032fe:	4a32      	ldr	r2, [pc, #200]	@ (80033c8 <HAL_GPIO_Init+0x350>)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003304:	4b30      	ldr	r3, [pc, #192]	@ (80033c8 <HAL_GPIO_Init+0x350>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003328:	4a27      	ldr	r2, [pc, #156]	@ (80033c8 <HAL_GPIO_Init+0x350>)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800332e:	4b26      	ldr	r3, [pc, #152]	@ (80033c8 <HAL_GPIO_Init+0x350>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	43db      	mvns	r3, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003352:	4a1d      	ldr	r2, [pc, #116]	@ (80033c8 <HAL_GPIO_Init+0x350>)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003358:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <HAL_GPIO_Init+0x350>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43db      	mvns	r3, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800337c:	4a12      	ldr	r2, [pc, #72]	@ (80033c8 <HAL_GPIO_Init+0x350>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3301      	adds	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f47f ae78 	bne.w	8003088 <HAL_GPIO_Init+0x10>
  }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40010000 	.word	0x40010000
 80033b0:	48000400 	.word	0x48000400
 80033b4:	48000800 	.word	0x48000800
 80033b8:	48000c00 	.word	0x48000c00
 80033bc:	48001000 	.word	0x48001000
 80033c0:	48001400 	.word	0x48001400
 80033c4:	48001800 	.word	0x48001800
 80033c8:	40010400 	.word	0x40010400

080033cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e08d      	b.n	80034fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe f824 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	@ 0x24
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800341c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800342c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e006      	b.n	8003454 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003452:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d108      	bne.n	800346e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	e007      	b.n	800347e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800347c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800348c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003490:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	461a      	mov	r2, r3
 8003510:	460b      	mov	r3, r1
 8003512:	817b      	strh	r3, [r7, #10]
 8003514:	4613      	mov	r3, r2
 8003516:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b20      	cmp	r3, #32
 8003522:	f040 80fd 	bne.w	8003720 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_I2C_Master_Transmit+0x30>
 8003530:	2302      	movs	r3, #2
 8003532:	e0f6      	b.n	8003722 <HAL_I2C_Master_Transmit+0x21e>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800353c:	f7ff fc86 	bl	8002e4c <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2319      	movs	r3, #25
 8003548:	2201      	movs	r2, #1
 800354a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fb13 	bl	8003b7a <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0e1      	b.n	8003722 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2221      	movs	r2, #33	@ 0x21
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2210      	movs	r2, #16
 800356a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	893a      	ldrh	r2, [r7, #8]
 800357e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	2bff      	cmp	r3, #255	@ 0xff
 800358e:	d906      	bls.n	800359e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	22ff      	movs	r2, #255	@ 0xff
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003596:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e007      	b.n	80035ae <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80035a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d024      	beq.n	8003600 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	781a      	ldrb	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	8979      	ldrh	r1, [r7, #10]
 80035f2:	4b4e      	ldr	r3, [pc, #312]	@ (800372c <HAL_I2C_Master_Transmit+0x228>)
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fcf9 	bl	8003ff0 <I2C_TransferConfig>
 80035fe:	e066      	b.n	80036ce <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003604:	b2da      	uxtb	r2, r3
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	4b48      	ldr	r3, [pc, #288]	@ (800372c <HAL_I2C_Master_Transmit+0x228>)
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fcee 	bl	8003ff0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003614:	e05b      	b.n	80036ce <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	6a39      	ldr	r1, [r7, #32]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fafc 	bl	8003c18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e07b      	b.n	8003722 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d034      	beq.n	80036ce <HAL_I2C_Master_Transmit+0x1ca>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d130      	bne.n	80036ce <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	2200      	movs	r2, #0
 8003674:	2180      	movs	r1, #128	@ 0x80
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fa7f 	bl	8003b7a <I2C_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e04d      	b.n	8003722 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	2bff      	cmp	r3, #255	@ 0xff
 800368e:	d90e      	bls.n	80036ae <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	22ff      	movs	r2, #255	@ 0xff
 8003694:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369a:	b2da      	uxtb	r2, r3
 800369c:	8979      	ldrh	r1, [r7, #10]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fca2 	bl	8003ff0 <I2C_TransferConfig>
 80036ac:	e00f      	b.n	80036ce <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	2300      	movs	r3, #0
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fc91 	bl	8003ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d19e      	bne.n	8003616 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	6a39      	ldr	r1, [r7, #32]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fae2 	bl	8003ca6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e01a      	b.n	8003722 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2220      	movs	r2, #32
 80036f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <HAL_I2C_Master_Transmit+0x22c>)
 8003700:	400b      	ands	r3, r1
 8003702:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	80002000 	.word	0x80002000
 8003730:	fe00e800 	.word	0xfe00e800

08003734 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	461a      	mov	r2, r3
 8003740:	460b      	mov	r3, r1
 8003742:	817b      	strh	r3, [r7, #10]
 8003744:	4613      	mov	r3, r2
 8003746:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b20      	cmp	r3, #32
 8003752:	f040 80db 	bne.w	800390c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_I2C_Master_Receive+0x30>
 8003760:	2302      	movs	r3, #2
 8003762:	e0d4      	b.n	800390e <HAL_I2C_Master_Receive+0x1da>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800376c:	f7ff fb6e 	bl	8002e4c <HAL_GetTick>
 8003770:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	2319      	movs	r3, #25
 8003778:	2201      	movs	r2, #1
 800377a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f9fb 	bl	8003b7a <I2C_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0bf      	b.n	800390e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2222      	movs	r2, #34	@ 0x22
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2210      	movs	r2, #16
 800379a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	893a      	ldrh	r2, [r7, #8]
 80037ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2bff      	cmp	r3, #255	@ 0xff
 80037be:	d90e      	bls.n	80037de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	22ff      	movs	r2, #255	@ 0xff
 80037c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	8979      	ldrh	r1, [r7, #10]
 80037ce:	4b52      	ldr	r3, [pc, #328]	@ (8003918 <HAL_I2C_Master_Receive+0x1e4>)
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fc0a 	bl	8003ff0 <I2C_TransferConfig>
 80037dc:	e06d      	b.n	80038ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	4b49      	ldr	r3, [pc, #292]	@ (8003918 <HAL_I2C_Master_Receive+0x1e4>)
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fbf9 	bl	8003ff0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037fe:	e05c      	b.n	80038ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	6a39      	ldr	r1, [r7, #32]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fa91 	bl	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e07c      	b.n	800390e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d034      	beq.n	80038ba <HAL_I2C_Master_Receive+0x186>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	d130      	bne.n	80038ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	2200      	movs	r2, #0
 8003860:	2180      	movs	r1, #128	@ 0x80
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f989 	bl	8003b7a <I2C_WaitOnFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e04d      	b.n	800390e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	2bff      	cmp	r3, #255	@ 0xff
 800387a:	d90e      	bls.n	800389a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	22ff      	movs	r2, #255	@ 0xff
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003886:	b2da      	uxtb	r2, r3
 8003888:	8979      	ldrh	r1, [r7, #10]
 800388a:	2300      	movs	r3, #0
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fbac 	bl	8003ff0 <I2C_TransferConfig>
 8003898:	e00f      	b.n	80038ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	8979      	ldrh	r1, [r7, #10]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fb9b 	bl	8003ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d19d      	bne.n	8003800 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	6a39      	ldr	r1, [r7, #32]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f9ec 	bl	8003ca6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e01a      	b.n	800390e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2220      	movs	r2, #32
 80038de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <HAL_I2C_Master_Receive+0x1e8>)
 80038ec:	400b      	ands	r3, r1
 80038ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	80002400 	.word	0x80002400
 800391c:	fe00e800 	.word	0xfe00e800

08003920 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	@ 0x28
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	460b      	mov	r3, r1
 800392e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b20      	cmp	r3, #32
 800393e:	f040 80f3 	bne.w	8003b28 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800394c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003950:	d101      	bne.n	8003956 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
 8003954:	e0e9      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_I2C_IsDeviceReady+0x44>
 8003960:	2302      	movs	r3, #2
 8003962:	e0e2      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x20a>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2224      	movs	r2, #36	@ 0x24
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_I2C_IsDeviceReady+0x72>
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003988:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800398c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003990:	e006      	b.n	80039a0 <HAL_I2C_IsDeviceReady+0x80>
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003998:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800399c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80039a6:	f7ff fa51 	bl	8002e4c <HAL_GetTick>
 80039aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80039d8:	e034      	b.n	8003a44 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d01a      	beq.n	8003a18 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7ff fa33 	bl	8002e4c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <HAL_I2C_IsDeviceReady+0xd8>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10f      	bne.n	8003a18 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e088      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <HAL_I2C_IsDeviceReady+0x130>
 8003a4a:	7fbb      	ldrb	r3, [r7, #30]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0c4      	beq.n	80039da <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d01a      	beq.n	8003a94 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2120      	movs	r1, #32
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f886 	bl	8003b7a <I2C_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e058      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e04a      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f86b 	bl	8003b7a <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e03d      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2220      	movs	r2, #32
 8003abc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d118      	bne.n	8003af8 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2120      	movs	r1, #32
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f84a 	bl	8003b7a <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e01c      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2220      	movs	r2, #32
 8003af6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3301      	adds	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	f63f af39 	bhi.w	800397a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d103      	bne.n	8003b50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d007      	beq.n	8003b6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	619a      	str	r2, [r3, #24]
  }
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8a:	e031      	b.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d02d      	beq.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7ff f95a 	bl	8002e4c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d122      	bne.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d113      	bne.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e00f      	b.n	8003c10 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d0be      	beq.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c24:	e033      	b.n	8003c8e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f900 	bl	8003e30 <I2C_IsErrorOccurred>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e031      	b.n	8003c9e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d025      	beq.n	8003c8e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7ff f903 	bl	8002e4c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d11a      	bne.n	8003c8e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d013      	beq.n	8003c8e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e007      	b.n	8003c9e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d1c4      	bne.n	8003c26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cb2:	e02f      	b.n	8003d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f8b9 	bl	8003e30 <I2C_IsErrorOccurred>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e02d      	b.n	8003d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc8:	f7ff f8c0 	bl	8002e4c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11a      	bne.n	8003d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d013      	beq.n	8003d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e007      	b.n	8003d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d1c8      	bne.n	8003cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d38:	e06b      	b.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f876 	bl	8003e30 <I2C_IsErrorOccurred>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e069      	b.n	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d138      	bne.n	8003dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d105      	bne.n	8003d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e055      	b.n	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d107      	bne.n	8003d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2210      	movs	r2, #16
 8003d8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d92:	e002      	b.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b1f      	ldr	r3, [pc, #124]	@ (8003e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003dae:	400b      	ands	r3, r1
 8003db0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e029      	b.n	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7ff f83d 	bl	8002e4c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d116      	bne.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d00f      	beq.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e007      	b.n	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d18c      	bne.n	8003d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	fe00e800 	.word	0xfe00e800

08003e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	@ 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d068      	beq.n	8003f2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2210      	movs	r2, #16
 8003e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e64:	e049      	b.n	8003efa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d045      	beq.n	8003efa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7fe ffed 	bl	8002e4c <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <I2C_IsErrorOccurred+0x54>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d13a      	bne.n	8003efa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea6:	d121      	bne.n	8003eec <I2C_IsErrorOccurred+0xbc>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eae:	d01d      	beq.n	8003eec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d01a      	beq.n	8003eec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ec6:	f7fe ffc1 	bl	8002e4c <HAL_GetTick>
 8003eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ecc:	e00e      	b.n	8003eec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ece:	f7fe ffbd 	bl	8002e4c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b19      	cmp	r3, #25
 8003eda:	d907      	bls.n	8003eec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f043 0320 	orr.w	r3, r3, #32
 8003ee2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003eea:	e006      	b.n	8003efa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d1e9      	bne.n	8003ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d003      	beq.n	8003f10 <I2C_IsErrorOccurred+0xe0>
 8003f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0aa      	beq.n	8003e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d103      	bne.n	8003f20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00b      	beq.n	8003f58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f043 0308 	orr.w	r3, r3, #8
 8003f68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00b      	beq.n	8003f9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01c      	beq.n	8003fde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff fdc4 	bl	8003b32 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6859      	ldr	r1, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <I2C_IsErrorOccurred+0x1bc>)
 8003fb6:	400b      	ands	r3, r1
 8003fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3728      	adds	r7, #40	@ 0x28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	fe00e800 	.word	0xfe00e800

08003ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	817b      	strh	r3, [r7, #10]
 8003ffe:	4613      	mov	r3, r2
 8004000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004002:	897b      	ldrh	r3, [r7, #10]
 8004004:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004008:	7a7b      	ldrb	r3, [r7, #9]
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004010:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	4313      	orrs	r3, r2
 800401a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800401e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	0d5b      	lsrs	r3, r3, #21
 800402a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800402e:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <I2C_TransferConfig+0x60>)
 8004030:	430b      	orrs	r3, r1
 8004032:	43db      	mvns	r3, r3
 8004034:	ea02 0103 	and.w	r1, r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	03ff63ff 	.word	0x03ff63ff

08004054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b20      	cmp	r3, #32
 8004068:	d138      	bne.n	80040dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004074:	2302      	movs	r3, #2
 8004076:	e032      	b.n	80040de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	@ 0x24
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d139      	bne.n	8004174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800410a:	2302      	movs	r3, #2
 800410c:	e033      	b.n	8004176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2224      	movs	r2, #36	@ 0x24
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800413c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <HAL_PWREx_GetVoltageRange+0x18>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40007000 	.word	0x40007000

080041a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ae:	d130      	bne.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b0:	4b23      	ldr	r3, [pc, #140]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041bc:	d038      	beq.n	8004230 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041be:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2232      	movs	r2, #50	@ 0x32
 80041d4:	fb02 f303 	mul.w	r3, r2, r3
 80041d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0c9b      	lsrs	r3, r3, #18
 80041e0:	3301      	adds	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041e4:	e002      	b.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ec:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f8:	d102      	bne.n	8004200 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f2      	bne.n	80041e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004200:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420c:	d110      	bne.n	8004230 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e00f      	b.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004212:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421e:	d007      	beq.n	8004230 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004228:	4a05      	ldr	r2, [pc, #20]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800422e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40007000 	.word	0x40007000
 8004244:	2000002c 	.word	0x2000002c
 8004248:	431bde83 	.word	0x431bde83

0800424c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e3ca      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425e:	4b97      	ldr	r3, [pc, #604]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004268:	4b94      	ldr	r3, [pc, #592]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80e4 	beq.w	8004448 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_RCC_OscConfig+0x4a>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b0c      	cmp	r3, #12
 800428a:	f040 808b 	bne.w	80043a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 8087 	bne.w	80043a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004296:	4b89      	ldr	r3, [pc, #548]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_RCC_OscConfig+0x62>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e3a2      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	4b82      	ldr	r3, [pc, #520]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_RCC_OscConfig+0x7c>
 80042be:	4b7f      	ldr	r3, [pc, #508]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c6:	e005      	b.n	80042d4 <HAL_RCC_OscConfig+0x88>
 80042c8:	4b7c      	ldr	r3, [pc, #496]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80042ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d223      	bcs.n	8004320 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fd55 	bl	8004d8c <RCC_SetFlashLatencyFromMSIRange>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e383      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ec:	4b73      	ldr	r3, [pc, #460]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a72      	ldr	r2, [pc, #456]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80042f2:	f043 0308 	orr.w	r3, r3, #8
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b70      	ldr	r3, [pc, #448]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	496d      	ldr	r1, [pc, #436]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800430a:	4b6c      	ldr	r3, [pc, #432]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	4968      	ldr	r1, [pc, #416]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
 800431e:	e025      	b.n	800436c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004320:	4b66      	ldr	r3, [pc, #408]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a65      	ldr	r2, [pc, #404]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004326:	f043 0308 	orr.w	r3, r3, #8
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b63      	ldr	r3, [pc, #396]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4960      	ldr	r1, [pc, #384]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800433e:	4b5f      	ldr	r3, [pc, #380]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	495b      	ldr	r1, [pc, #364]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fd15 	bl	8004d8c <RCC_SetFlashLatencyFromMSIRange>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e343      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800436c:	f000 fc4a 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b52      	ldr	r3, [pc, #328]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	4950      	ldr	r1, [pc, #320]	@ (80044c0 <HAL_RCC_OscConfig+0x274>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	4a4e      	ldr	r2, [pc, #312]	@ (80044c4 <HAL_RCC_OscConfig+0x278>)
 800438a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800438c:	4b4e      	ldr	r3, [pc, #312]	@ (80044c8 <HAL_RCC_OscConfig+0x27c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe fd0b 	bl	8002dac <HAL_InitTick>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d052      	beq.n	8004446 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	e327      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d032      	beq.n	8004412 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043ac:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a42      	ldr	r2, [pc, #264]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043b8:	f7fe fd48 	bl	8002e4c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043c0:	f7fe fd44 	bl	8002e4c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e310      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043d2:	4b3a      	ldr	r3, [pc, #232]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043de:	4b37      	ldr	r3, [pc, #220]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a36      	ldr	r2, [pc, #216]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b34      	ldr	r3, [pc, #208]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	4931      	ldr	r1, [pc, #196]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043fc:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	492c      	ldr	r1, [pc, #176]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]
 8004410:	e01a      	b.n	8004448 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004412:	4b2a      	ldr	r3, [pc, #168]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a29      	ldr	r2, [pc, #164]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800441e:	f7fe fd15 	bl	8002e4c <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004426:	f7fe fd11 	bl	8002e4c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e2dd      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004438:	4b20      	ldr	r3, [pc, #128]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCC_OscConfig+0x1da>
 8004444:	e000      	b.n	8004448 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004446:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d074      	beq.n	800453e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b08      	cmp	r3, #8
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x21a>
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d10e      	bne.n	800447e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d10b      	bne.n	800447e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004466:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d064      	beq.n	800453c <HAL_RCC_OscConfig+0x2f0>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d160      	bne.n	800453c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e2ba      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x24a>
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0b      	ldr	r2, [pc, #44]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e026      	b.n	80044e4 <HAL_RCC_OscConfig+0x298>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800449e:	d115      	bne.n	80044cc <HAL_RCC_OscConfig+0x280>
 80044a0:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a05      	ldr	r2, [pc, #20]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80044a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	4b03      	ldr	r3, [pc, #12]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a02      	ldr	r2, [pc, #8]	@ (80044bc <HAL_RCC_OscConfig+0x270>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e014      	b.n	80044e4 <HAL_RCC_OscConfig+0x298>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	080091d8 	.word	0x080091d8
 80044c4:	2000002c 	.word	0x2000002c
 80044c8:	20000030 	.word	0x20000030
 80044cc:	4ba0      	ldr	r3, [pc, #640]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b9d      	ldr	r3, [pc, #628]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a9c      	ldr	r2, [pc, #624]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fe fcae 	bl	8002e4c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fe fcaa 	bl	8002e4c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	@ 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e276      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004506:	4b92      	ldr	r3, [pc, #584]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x2a8>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fe fc9a 	bl	8002e4c <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fe fc96 	bl	8002e4c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	@ 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e262      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800452e:	4b88      	ldr	r3, [pc, #544]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x2d0>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d060      	beq.n	800460c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d005      	beq.n	800455c <HAL_RCC_OscConfig+0x310>
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b0c      	cmp	r3, #12
 8004554:	d119      	bne.n	800458a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d116      	bne.n	800458a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800455c:	4b7c      	ldr	r3, [pc, #496]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_OscConfig+0x328>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e23f      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004574:	4b76      	ldr	r3, [pc, #472]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	4973      	ldr	r1, [pc, #460]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004588:	e040      	b.n	800460c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d023      	beq.n	80045da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004592:	4b6f      	ldr	r3, [pc, #444]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6e      	ldr	r2, [pc, #440]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fe fc55 	bl	8002e4c <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a6:	f7fe fc51 	bl	8002e4c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e21d      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b8:	4b65      	ldr	r3, [pc, #404]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c4:	4b62      	ldr	r3, [pc, #392]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	495f      	ldr	r1, [pc, #380]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
 80045d8:	e018      	b.n	800460c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045da:	4b5d      	ldr	r3, [pc, #372]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a5c      	ldr	r2, [pc, #368]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80045e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fe fc31 	bl	8002e4c <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fe fc2d 	bl	8002e4c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1f9      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004600:	4b53      	ldr	r3, [pc, #332]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d03c      	beq.n	8004692 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01c      	beq.n	800465a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004620:	4b4b      	ldr	r3, [pc, #300]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004626:	4a4a      	ldr	r2, [pc, #296]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fe fc0c 	bl	8002e4c <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004638:	f7fe fc08 	bl	8002e4c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e1d4      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800464a:	4b41      	ldr	r3, [pc, #260]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 800464c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <HAL_RCC_OscConfig+0x3ec>
 8004658:	e01b      	b.n	8004692 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465a:	4b3d      	ldr	r3, [pc, #244]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 800465c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004660:	4a3b      	ldr	r2, [pc, #236]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466a:	f7fe fbef 	bl	8002e4c <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004672:	f7fe fbeb 	bl	8002e4c <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e1b7      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004684:	4b32      	ldr	r3, [pc, #200]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1ef      	bne.n	8004672 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80a6 	beq.w	80047ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a0:	2300      	movs	r3, #0
 80046a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10d      	bne.n	80046cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b0:	4b27      	ldr	r3, [pc, #156]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	4a26      	ldr	r2, [pc, #152]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80046b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80046bc:	4b24      	ldr	r3, [pc, #144]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c8:	2301      	movs	r3, #1
 80046ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046cc:	4b21      	ldr	r3, [pc, #132]	@ (8004754 <HAL_RCC_OscConfig+0x508>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d118      	bne.n	800470a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <HAL_RCC_OscConfig+0x508>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004754 <HAL_RCC_OscConfig+0x508>)
 80046de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e4:	f7fe fbb2 	bl	8002e4c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ec:	f7fe fbae 	bl	8002e4c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e17a      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fe:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <HAL_RCC_OscConfig+0x508>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d108      	bne.n	8004724 <HAL_RCC_OscConfig+0x4d8>
 8004712:	4b0f      	ldr	r3, [pc, #60]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004718:	4a0d      	ldr	r2, [pc, #52]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004722:	e029      	b.n	8004778 <HAL_RCC_OscConfig+0x52c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b05      	cmp	r3, #5
 800472a:	d115      	bne.n	8004758 <HAL_RCC_OscConfig+0x50c>
 800472c:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	4a07      	ldr	r2, [pc, #28]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004734:	f043 0304 	orr.w	r3, r3, #4
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800473c:	4b04      	ldr	r3, [pc, #16]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	4a03      	ldr	r2, [pc, #12]	@ (8004750 <HAL_RCC_OscConfig+0x504>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800474c:	e014      	b.n	8004778 <HAL_RCC_OscConfig+0x52c>
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
 8004754:	40007000 	.word	0x40007000
 8004758:	4b9c      	ldr	r3, [pc, #624]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	4a9b      	ldr	r2, [pc, #620]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004768:	4b98      	ldr	r3, [pc, #608]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476e:	4a97      	ldr	r2, [pc, #604]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d016      	beq.n	80047ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fe fb64 	bl	8002e4c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004786:	e00a      	b.n	800479e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004788:	f7fe fb60 	bl	8002e4c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e12a      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479e:	4b8b      	ldr	r3, [pc, #556]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ed      	beq.n	8004788 <HAL_RCC_OscConfig+0x53c>
 80047ac:	e015      	b.n	80047da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fe fb4d 	bl	8002e4c <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe fb49 	bl	8002e4c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e113      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047cc:	4b7f      	ldr	r3, [pc, #508]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ed      	bne.n	80047b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047da:	7ffb      	ldrb	r3, [r7, #31]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d105      	bne.n	80047ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e0:	4b7a      	ldr	r3, [pc, #488]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	4a79      	ldr	r2, [pc, #484]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 80047e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80fe 	beq.w	80049f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	f040 80d0 	bne.w	80049a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004800:	4b72      	ldr	r3, [pc, #456]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 0203 	and.w	r2, r3, #3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	429a      	cmp	r2, r3
 8004812:	d130      	bne.n	8004876 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481e:	3b01      	subs	r3, #1
 8004820:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d127      	bne.n	8004876 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004830:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d11f      	bne.n	8004876 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004840:	2a07      	cmp	r2, #7
 8004842:	bf14      	ite	ne
 8004844:	2201      	movne	r2, #1
 8004846:	2200      	moveq	r2, #0
 8004848:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800484a:	4293      	cmp	r3, r2
 800484c:	d113      	bne.n	8004876 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	3b01      	subs	r3, #1
 800485c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d109      	bne.n	8004876 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	3b01      	subs	r3, #1
 8004870:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d06e      	beq.n	8004954 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d069      	beq.n	8004950 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800487c:	4b53      	ldr	r3, [pc, #332]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004888:	4b50      	ldr	r3, [pc, #320]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0ad      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004898:	4b4c      	ldr	r3, [pc, #304]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a4b      	ldr	r2, [pc, #300]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800489e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048a4:	f7fe fad2 	bl	8002e4c <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ac:	f7fe face 	bl	8002e4c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e09a      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048be:	4b43      	ldr	r3, [pc, #268]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ca:	4b40      	ldr	r3, [pc, #256]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	4b40      	ldr	r3, [pc, #256]	@ (80049d0 <HAL_RCC_OscConfig+0x784>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048da:	3a01      	subs	r2, #1
 80048dc:	0112      	lsls	r2, r2, #4
 80048de:	4311      	orrs	r1, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048e4:	0212      	lsls	r2, r2, #8
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048ec:	0852      	lsrs	r2, r2, #1
 80048ee:	3a01      	subs	r2, #1
 80048f0:	0552      	lsls	r2, r2, #21
 80048f2:	4311      	orrs	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048f8:	0852      	lsrs	r2, r2, #1
 80048fa:	3a01      	subs	r2, #1
 80048fc:	0652      	lsls	r2, r2, #25
 80048fe:	4311      	orrs	r1, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004904:	0912      	lsrs	r2, r2, #4
 8004906:	0452      	lsls	r2, r2, #17
 8004908:	430a      	orrs	r2, r1
 800490a:	4930      	ldr	r1, [pc, #192]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800490c:	4313      	orrs	r3, r2
 800490e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004910:	4b2e      	ldr	r3, [pc, #184]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2d      	ldr	r2, [pc, #180]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800491a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800491c:	4b2b      	ldr	r3, [pc, #172]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4a2a      	ldr	r2, [pc, #168]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004926:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004928:	f7fe fa90 	bl	8002e4c <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004930:	f7fe fa8c 	bl	8002e4c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e058      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800494e:	e050      	b.n	80049f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e04f      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004954:	4b1d      	ldr	r3, [pc, #116]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d148      	bne.n	80049f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004960:	4b1a      	ldr	r3, [pc, #104]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800496c:	4b17      	ldr	r3, [pc, #92]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004976:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004978:	f7fe fa68 	bl	8002e4c <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004980:	f7fe fa64 	bl	8002e4c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e030      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004992:	4b0e      	ldr	r3, [pc, #56]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x734>
 800499e:	e028      	b.n	80049f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d023      	beq.n	80049ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a08      	ldr	r2, [pc, #32]	@ (80049cc <HAL_RCC_OscConfig+0x780>)
 80049ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fe fa4b 	bl	8002e4c <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b8:	e00c      	b.n	80049d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fe fa47 	bl	8002e4c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d905      	bls.n	80049d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e013      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
 80049cc:	40021000 	.word	0x40021000
 80049d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d4:	4b09      	ldr	r3, [pc, #36]	@ (80049fc <HAL_RCC_OscConfig+0x7b0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ec      	bne.n	80049ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049e0:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_RCC_OscConfig+0x7b0>)
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	4905      	ldr	r1, [pc, #20]	@ (80049fc <HAL_RCC_OscConfig+0x7b0>)
 80049e6:	4b06      	ldr	r3, [pc, #24]	@ (8004a00 <HAL_RCC_OscConfig+0x7b4>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	60cb      	str	r3, [r1, #12]
 80049ec:	e001      	b.n	80049f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	feeefffc 	.word	0xfeeefffc

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0e7      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b75      	ldr	r3, [pc, #468]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d910      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b72      	ldr	r3, [pc, #456]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 0207 	bic.w	r2, r3, #7
 8004a2e:	4970      	ldr	r1, [pc, #448]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b6e      	ldr	r3, [pc, #440]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0cf      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d010      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	4b66      	ldr	r3, [pc, #408]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d908      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a64:	4b63      	ldr	r3, [pc, #396]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4960      	ldr	r1, [pc, #384]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04c      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d121      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0a6      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa2:	4b54      	ldr	r3, [pc, #336]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d115      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e09a      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aba:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e08e      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aca:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e086      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ada:	4b46      	ldr	r3, [pc, #280]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 0203 	bic.w	r2, r3, #3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4943      	ldr	r1, [pc, #268]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aec:	f7fe f9ae 	bl	8002e4c <HAL_GetTick>
 8004af0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af4:	f7fe f9aa 	bl	8002e4c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e06e      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 020c 	and.w	r2, r3, #12
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d1eb      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4b31      	ldr	r3, [pc, #196]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d208      	bcs.n	8004b4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	492b      	ldr	r1, [pc, #172]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4a:	4b29      	ldr	r3, [pc, #164]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d210      	bcs.n	8004b7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b58:	4b25      	ldr	r3, [pc, #148]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f023 0207 	bic.w	r2, r3, #7
 8004b60:	4923      	ldr	r1, [pc, #140]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b68:	4b21      	ldr	r3, [pc, #132]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d001      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e036      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b86:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4918      	ldr	r1, [pc, #96]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba4:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4910      	ldr	r1, [pc, #64]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bb8:	f000 f824 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	490b      	ldr	r1, [pc, #44]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	4a09      	ldr	r2, [pc, #36]	@ (8004bfc <HAL_RCC_ClockConfig+0x1f8>)
 8004bd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bd8:	4b09      	ldr	r3, [pc, #36]	@ (8004c00 <HAL_RCC_ClockConfig+0x1fc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe f8e5 	bl	8002dac <HAL_InitTick>
 8004be2:	4603      	mov	r3, r0
 8004be4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004be6:	7afb      	ldrb	r3, [r7, #11]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40022000 	.word	0x40022000
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	080091d8 	.word	0x080091d8
 8004bfc:	2000002c 	.word	0x2000002c
 8004c00:	20000030 	.word	0x20000030

08004c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b089      	sub	sp, #36	@ 0x24
 8004c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c12:	4b3e      	ldr	r3, [pc, #248]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d121      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d11e      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c38:	4b34      	ldr	r3, [pc, #208]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c44:	4b31      	ldr	r3, [pc, #196]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e005      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c54:	4b2d      	ldr	r3, [pc, #180]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c60:	4a2b      	ldr	r2, [pc, #172]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d102      	bne.n	8004c82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c7c:	4b25      	ldr	r3, [pc, #148]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	e004      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d101      	bne.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c88:	4b23      	ldr	r3, [pc, #140]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d134      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c92:	4b1e      	ldr	r3, [pc, #120]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d003      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0xa6>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d003      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xac>
 8004ca8:	e005      	b.n	8004cb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004caa:	4b1a      	ldr	r3, [pc, #104]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cac:	617b      	str	r3, [r7, #20]
      break;
 8004cae:	e005      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cb0:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cb2:	617b      	str	r3, [r7, #20]
      break;
 8004cb4:	e002      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	617b      	str	r3, [r7, #20]
      break;
 8004cba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cbc:	4b13      	ldr	r3, [pc, #76]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cca:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	fb03 f202 	mul.w	r2, r3, r2
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	0e5b      	lsrs	r3, r3, #25
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	3301      	adds	r3, #1
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cfc:	69bb      	ldr	r3, [r7, #24]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3724      	adds	r7, #36	@ 0x24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	080091f0 	.word	0x080091f0
 8004d14:	00f42400 	.word	0x00f42400
 8004d18:	007a1200 	.word	0x007a1200

08004d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d20:	4b03      	ldr	r3, [pc, #12]	@ (8004d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	2000002c 	.word	0x2000002c

08004d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d38:	f7ff fff0 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4904      	ldr	r1, [pc, #16]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	080091e8 	.word	0x080091e8

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d64:	f7ff ffda 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0adb      	lsrs	r3, r3, #11
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4904      	ldr	r1, [pc, #16]	@ (8004d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40021000 	.word	0x40021000
 8004d88:	080091e8 	.word	0x080091e8

08004d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d98:	4b2a      	ldr	r3, [pc, #168]	@ (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004da4:	f7ff f9ee 	bl	8004184 <HAL_PWREx_GetVoltageRange>
 8004da8:	6178      	str	r0, [r7, #20]
 8004daa:	e014      	b.n	8004dd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dac:	4b25      	ldr	r3, [pc, #148]	@ (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db0:	4a24      	ldr	r2, [pc, #144]	@ (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004db8:	4b22      	ldr	r3, [pc, #136]	@ (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dc4:	f7ff f9de 	bl	8004184 <HAL_PWREx_GetVoltageRange>
 8004dc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dca:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dce:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ddc:	d10b      	bne.n	8004df6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b80      	cmp	r3, #128	@ 0x80
 8004de2:	d919      	bls.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2ba0      	cmp	r3, #160	@ 0xa0
 8004de8:	d902      	bls.n	8004df0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dea:	2302      	movs	r3, #2
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e013      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df0:	2301      	movs	r3, #1
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	e010      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b80      	cmp	r3, #128	@ 0x80
 8004dfa:	d902      	bls.n	8004e02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	e00a      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b80      	cmp	r3, #128	@ 0x80
 8004e06:	d102      	bne.n	8004e0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e08:	2302      	movs	r3, #2
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	e004      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b70      	cmp	r3, #112	@ 0x70
 8004e12:	d101      	bne.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e14:	2301      	movs	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e18:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 0207 	bic.w	r2, r3, #7
 8004e20:	4909      	ldr	r1, [pc, #36]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e28:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d001      	beq.n	8004e3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40022000 	.word	0x40022000

08004e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e54:	2300      	movs	r3, #0
 8004e56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d041      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e70:	d02a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e76:	d824      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e7c:	d008      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e82:	d81e      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e8c:	d010      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e8e:	e018      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e90:	4b86      	ldr	r3, [pc, #536]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a85      	ldr	r2, [pc, #532]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e9c:	e015      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fabb 	bl	8005420 <RCCEx_PLLSAI1_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eae:	e00c      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3320      	adds	r3, #32
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fba6 	bl	8005608 <RCCEx_PLLSAI2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ec0:	e003      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed0:	4b76      	ldr	r3, [pc, #472]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ede:	4973      	ldr	r1, [pc, #460]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ee6:	e001      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d041      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004efc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f00:	d02a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f06:	d824      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f0c:	d008      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f12:	d81e      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f1c:	d010      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f1e:	e018      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f20:	4b62      	ldr	r3, [pc, #392]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a61      	ldr	r2, [pc, #388]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f2c:	e015      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fa73 	bl	8005420 <RCCEx_PLLSAI1_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f3e:	e00c      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3320      	adds	r3, #32
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fb5e 	bl	8005608 <RCCEx_PLLSAI2_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f50:	e003      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	74fb      	strb	r3, [r7, #19]
      break;
 8004f56:	e000      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f5a:	7cfb      	ldrb	r3, [r7, #19]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f60:	4b52      	ldr	r3, [pc, #328]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f6e:	494f      	ldr	r1, [pc, #316]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f76:	e001      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80a0 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f8e:	4b47      	ldr	r3, [pc, #284]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b41      	ldr	r3, [pc, #260]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa8:	4a40      	ldr	r2, [pc, #256]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a3a      	ldr	r2, [pc, #232]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fcc:	f7fd ff3e 	bl	8002e4c <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd2:	e009      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd4:	f7fd ff3a 	bl	8002e4c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d902      	bls.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	74fb      	strb	r3, [r7, #19]
        break;
 8004fe6:	e005      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fe8:	4b31      	ldr	r3, [pc, #196]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0ef      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d15c      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005000:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005004:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	429a      	cmp	r2, r3
 8005016:	d019      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005018:	4b24      	ldr	r3, [pc, #144]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005024:	4b21      	ldr	r3, [pc, #132]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502a:	4a20      	ldr	r2, [pc, #128]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005034:	4b1d      	ldr	r3, [pc, #116]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005044:	4a19      	ldr	r2, [pc, #100]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7fd fef9 	bl	8002e4c <HAL_GetTick>
 800505a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505c:	e00b      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fd fef5 	bl	8002e4c <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506c:	4293      	cmp	r3, r2
 800506e:	d902      	bls.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	74fb      	strb	r3, [r7, #19]
            break;
 8005074:	e006      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ec      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10c      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508a:	4b08      	ldr	r3, [pc, #32]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800509a:	4904      	ldr	r1, [pc, #16]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050a2:	e009      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	74bb      	strb	r3, [r7, #18]
 80050a8:	e006      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050b8:	7c7b      	ldrb	r3, [r7, #17]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d105      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050be:	4b9e      	ldr	r3, [pc, #632]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c2:	4a9d      	ldr	r2, [pc, #628]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050d6:	4b98      	ldr	r3, [pc, #608]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050dc:	f023 0203 	bic.w	r2, r3, #3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	4994      	ldr	r1, [pc, #592]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fe:	f023 020c 	bic.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005106:	498c      	ldr	r1, [pc, #560]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800511a:	4b87      	ldr	r3, [pc, #540]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005120:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005128:	4983      	ldr	r1, [pc, #524]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800513c:	4b7e      	ldr	r3, [pc, #504]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005142:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	497b      	ldr	r1, [pc, #492]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800515e:	4b76      	ldr	r3, [pc, #472]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800516c:	4972      	ldr	r1, [pc, #456]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005180:	4b6d      	ldr	r3, [pc, #436]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800518e:	496a      	ldr	r1, [pc, #424]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051a2:	4b65      	ldr	r3, [pc, #404]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b0:	4961      	ldr	r1, [pc, #388]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051c4:	4b5c      	ldr	r3, [pc, #368]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d2:	4959      	ldr	r1, [pc, #356]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051e6:	4b54      	ldr	r3, [pc, #336]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f4:	4950      	ldr	r1, [pc, #320]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005208:	4b4b      	ldr	r3, [pc, #300]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005216:	4948      	ldr	r1, [pc, #288]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800522a:	4b43      	ldr	r3, [pc, #268]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005230:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005238:	493f      	ldr	r1, [pc, #252]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d028      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800524c:	4b3a      	ldr	r3, [pc, #232]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800525a:	4937      	ldr	r1, [pc, #220]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800526a:	d106      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800526c:	4b32      	ldr	r3, [pc, #200]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	4a31      	ldr	r2, [pc, #196]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005276:	60d3      	str	r3, [r2, #12]
 8005278:	e011      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800527e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005282:	d10c      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	2101      	movs	r1, #1
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f8c8 	bl	8005420 <RCCEx_PLLSAI1_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d028      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052aa:	4b23      	ldr	r3, [pc, #140]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b8:	491f      	ldr	r1, [pc, #124]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052c8:	d106      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d4:	60d3      	str	r3, [r2, #12]
 80052d6:	e011      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052e0:	d10c      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	2101      	movs	r1, #1
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 f899 	bl	8005420 <RCCEx_PLLSAI1_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
 80052fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02b      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005308:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005316:	4908      	ldr	r1, [pc, #32]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005326:	d109      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005328:	4b03      	ldr	r3, [pc, #12]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4a02      	ldr	r2, [pc, #8]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005332:	60d3      	str	r3, [r2, #12]
 8005334:	e014      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005344:	d10c      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	2101      	movs	r1, #1
 800534c:	4618      	mov	r0, r3
 800534e:	f000 f867 	bl	8005420 <RCCEx_PLLSAI1_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02f      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800536c:	4b2b      	ldr	r3, [pc, #172]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800537a:	4928      	ldr	r1, [pc, #160]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800538a:	d10d      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	2102      	movs	r1, #2
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f844 	bl	8005420 <RCCEx_PLLSAI1_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d014      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053a2:	7cfb      	ldrb	r3, [r7, #19]
 80053a4:	74bb      	strb	r3, [r7, #18]
 80053a6:	e011      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b0:	d10c      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3320      	adds	r3, #32
 80053b6:	2102      	movs	r1, #2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f925 	bl	8005608 <RCCEx_PLLSAI2_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053d8:	4b10      	ldr	r3, [pc, #64]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053e6:	490d      	ldr	r1, [pc, #52]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053fa:	4b08      	ldr	r3, [pc, #32]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800540a:	4904      	ldr	r1, [pc, #16]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005412:	7cbb      	ldrb	r3, [r7, #18]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40021000 	.word	0x40021000

08005420 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800542e:	4b75      	ldr	r3, [pc, #468]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d018      	beq.n	800546c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800543a:	4b72      	ldr	r3, [pc, #456]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0203 	and.w	r2, r3, #3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d10d      	bne.n	8005466 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
       ||
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005452:	4b6c      	ldr	r3, [pc, #432]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
       ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d047      	beq.n	80054f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
 800546a:	e044      	b.n	80054f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d018      	beq.n	80054a6 <RCCEx_PLLSAI1_Config+0x86>
 8005474:	2b03      	cmp	r3, #3
 8005476:	d825      	bhi.n	80054c4 <RCCEx_PLLSAI1_Config+0xa4>
 8005478:	2b01      	cmp	r3, #1
 800547a:	d002      	beq.n	8005482 <RCCEx_PLLSAI1_Config+0x62>
 800547c:	2b02      	cmp	r3, #2
 800547e:	d009      	beq.n	8005494 <RCCEx_PLLSAI1_Config+0x74>
 8005480:	e020      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005482:	4b60      	ldr	r3, [pc, #384]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d11d      	bne.n	80054ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005492:	e01a      	b.n	80054ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005494:	4b5b      	ldr	r3, [pc, #364]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d116      	bne.n	80054ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a4:	e013      	b.n	80054ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054a6:	4b57      	ldr	r3, [pc, #348]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10f      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054b2:	4b54      	ldr	r3, [pc, #336]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054c2:	e006      	b.n	80054d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      break;
 80054c8:	e004      	b.n	80054d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ca:	bf00      	nop
 80054cc:	e002      	b.n	80054d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ce:	bf00      	nop
 80054d0:	e000      	b.n	80054d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10d      	bne.n	80054f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054da:	4b4a      	ldr	r3, [pc, #296]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6819      	ldr	r1, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	430b      	orrs	r3, r1
 80054f0:	4944      	ldr	r1, [pc, #272]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d17d      	bne.n	80055f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054fc:	4b41      	ldr	r3, [pc, #260]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a40      	ldr	r2, [pc, #256]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005508:	f7fd fca0 	bl	8002e4c <HAL_GetTick>
 800550c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800550e:	e009      	b.n	8005524 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005510:	f7fd fc9c 	bl	8002e4c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d902      	bls.n	8005524 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	73fb      	strb	r3, [r7, #15]
        break;
 8005522:	e005      	b.n	8005530 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005524:	4b37      	ldr	r3, [pc, #220]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1ef      	bne.n	8005510 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d160      	bne.n	80055f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d111      	bne.n	8005560 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800553c:	4b31      	ldr	r3, [pc, #196]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6892      	ldr	r2, [r2, #8]
 800554c:	0211      	lsls	r1, r2, #8
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68d2      	ldr	r2, [r2, #12]
 8005552:	0912      	lsrs	r2, r2, #4
 8005554:	0452      	lsls	r2, r2, #17
 8005556:	430a      	orrs	r2, r1
 8005558:	492a      	ldr	r1, [pc, #168]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	610b      	str	r3, [r1, #16]
 800555e:	e027      	b.n	80055b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d112      	bne.n	800558c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005566:	4b27      	ldr	r3, [pc, #156]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800556e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6892      	ldr	r2, [r2, #8]
 8005576:	0211      	lsls	r1, r2, #8
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6912      	ldr	r2, [r2, #16]
 800557c:	0852      	lsrs	r2, r2, #1
 800557e:	3a01      	subs	r2, #1
 8005580:	0552      	lsls	r2, r2, #21
 8005582:	430a      	orrs	r2, r1
 8005584:	491f      	ldr	r1, [pc, #124]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]
 800558a:	e011      	b.n	80055b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800558c:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005594:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6892      	ldr	r2, [r2, #8]
 800559c:	0211      	lsls	r1, r2, #8
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6952      	ldr	r2, [r2, #20]
 80055a2:	0852      	lsrs	r2, r2, #1
 80055a4:	3a01      	subs	r2, #1
 80055a6:	0652      	lsls	r2, r2, #25
 80055a8:	430a      	orrs	r2, r1
 80055aa:	4916      	ldr	r1, [pc, #88]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055b0:	4b14      	ldr	r3, [pc, #80]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a13      	ldr	r2, [pc, #76]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fd fc46 	bl	8002e4c <HAL_GetTick>
 80055c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055c2:	e009      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055c4:	f7fd fc42 	bl	8002e4c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d902      	bls.n	80055d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	73fb      	strb	r3, [r7, #15]
          break;
 80055d6:	e005      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0ef      	beq.n	80055c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055ea:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	4904      	ldr	r1, [pc, #16]	@ (8005604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40021000 	.word	0x40021000

08005608 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005616:	4b6a      	ldr	r3, [pc, #424]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d018      	beq.n	8005654 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005622:	4b67      	ldr	r3, [pc, #412]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0203 	and.w	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d10d      	bne.n	800564e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
       ||
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800563a:	4b61      	ldr	r3, [pc, #388]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	091b      	lsrs	r3, r3, #4
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
       ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d047      	beq.n	80056de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
 8005652:	e044      	b.n	80056de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d018      	beq.n	800568e <RCCEx_PLLSAI2_Config+0x86>
 800565c:	2b03      	cmp	r3, #3
 800565e:	d825      	bhi.n	80056ac <RCCEx_PLLSAI2_Config+0xa4>
 8005660:	2b01      	cmp	r3, #1
 8005662:	d002      	beq.n	800566a <RCCEx_PLLSAI2_Config+0x62>
 8005664:	2b02      	cmp	r3, #2
 8005666:	d009      	beq.n	800567c <RCCEx_PLLSAI2_Config+0x74>
 8005668:	e020      	b.n	80056ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800566a:	4b55      	ldr	r3, [pc, #340]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d11d      	bne.n	80056b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567a:	e01a      	b.n	80056b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800567c:	4b50      	ldr	r3, [pc, #320]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005684:	2b00      	cmp	r3, #0
 8005686:	d116      	bne.n	80056b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800568c:	e013      	b.n	80056b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800568e:	4b4c      	ldr	r3, [pc, #304]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10f      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800569a:	4b49      	ldr	r3, [pc, #292]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056aa:	e006      	b.n	80056ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      break;
 80056b0:	e004      	b.n	80056bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056b2:	bf00      	nop
 80056b4:	e002      	b.n	80056bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056b6:	bf00      	nop
 80056b8:	e000      	b.n	80056bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10d      	bne.n	80056de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056c2:	4b3f      	ldr	r3, [pc, #252]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6819      	ldr	r1, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	430b      	orrs	r3, r1
 80056d8:	4939      	ldr	r1, [pc, #228]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d167      	bne.n	80057b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056e4:	4b36      	ldr	r3, [pc, #216]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a35      	ldr	r2, [pc, #212]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f0:	f7fd fbac 	bl	8002e4c <HAL_GetTick>
 80056f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056f6:	e009      	b.n	800570c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056f8:	f7fd fba8 	bl	8002e4c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d902      	bls.n	800570c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	73fb      	strb	r3, [r7, #15]
        break;
 800570a:	e005      	b.n	8005718 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800570c:	4b2c      	ldr	r3, [pc, #176]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ef      	bne.n	80056f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d14a      	bne.n	80057b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d111      	bne.n	8005748 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005724:	4b26      	ldr	r3, [pc, #152]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800572c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6892      	ldr	r2, [r2, #8]
 8005734:	0211      	lsls	r1, r2, #8
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68d2      	ldr	r2, [r2, #12]
 800573a:	0912      	lsrs	r2, r2, #4
 800573c:	0452      	lsls	r2, r2, #17
 800573e:	430a      	orrs	r2, r1
 8005740:	491f      	ldr	r1, [pc, #124]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005742:	4313      	orrs	r3, r2
 8005744:	614b      	str	r3, [r1, #20]
 8005746:	e011      	b.n	800576c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005748:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005750:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6892      	ldr	r2, [r2, #8]
 8005758:	0211      	lsls	r1, r2, #8
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6912      	ldr	r2, [r2, #16]
 800575e:	0852      	lsrs	r2, r2, #1
 8005760:	3a01      	subs	r2, #1
 8005762:	0652      	lsls	r2, r2, #25
 8005764:	430a      	orrs	r2, r1
 8005766:	4916      	ldr	r1, [pc, #88]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005768:	4313      	orrs	r3, r2
 800576a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800576c:	4b14      	ldr	r3, [pc, #80]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a13      	ldr	r2, [pc, #76]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005776:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fd fb68 	bl	8002e4c <HAL_GetTick>
 800577c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800577e:	e009      	b.n	8005794 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005780:	f7fd fb64 	bl	8002e4c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d902      	bls.n	8005794 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	73fb      	strb	r3, [r7, #15]
          break;
 8005792:	e005      	b.n	80057a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005794:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ef      	beq.n	8005780 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057a6:	4b06      	ldr	r3, [pc, #24]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	4904      	ldr	r1, [pc, #16]	@ (80057c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000

080057c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e040      	b.n	8005858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb fe88 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	@ 0x24
 80057f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fb6a 	bl	8005ee4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8af 	bl	8005974 <UART_SetConfig>
 8005816:	4603      	mov	r3, r0
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e01b      	b.n	8005858 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800582e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800583e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fbe9 	bl	8006028 <UART_CheckIdleState>
 8005856:	4603      	mov	r3, r0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	@ 0x28
 8005864:	af02      	add	r7, sp, #8
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005874:	2b20      	cmp	r3, #32
 8005876:	d177      	bne.n	8005968 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_UART_Transmit+0x24>
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e070      	b.n	800596a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2221      	movs	r2, #33	@ 0x21
 8005894:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005896:	f7fd fad9 	bl	8002e4c <HAL_GetTick>
 800589a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	88fa      	ldrh	r2, [r7, #6]
 80058a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b4:	d108      	bne.n	80058c8 <HAL_UART_Transmit+0x68>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e003      	b.n	80058d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d0:	e02f      	b.n	8005932 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	@ 0x80
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fc4b 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d004      	beq.n	80058f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e03b      	b.n	800596a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	881a      	ldrh	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005904:	b292      	uxth	r2, r2
 8005906:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	3302      	adds	r3, #2
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	e007      	b.n	8005920 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	3301      	adds	r3, #1
 800591e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1c9      	bne.n	80058d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2140      	movs	r1, #64	@ 0x40
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fc15 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e005      	b.n	800596a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005978:	b08a      	sub	sp, #40	@ 0x28
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	431a      	orrs	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	4313      	orrs	r3, r2
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4ba4      	ldr	r3, [pc, #656]	@ (8005c34 <UART_SetConfig+0x2c0>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a99      	ldr	r2, [pc, #612]	@ (8005c38 <UART_SetConfig+0x2c4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d004      	beq.n	80059e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059dc:	4313      	orrs	r3, r2
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f0:	430a      	orrs	r2, r1
 80059f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a90      	ldr	r2, [pc, #576]	@ (8005c3c <UART_SetConfig+0x2c8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d126      	bne.n	8005a4c <UART_SetConfig+0xd8>
 80059fe:	4b90      	ldr	r3, [pc, #576]	@ (8005c40 <UART_SetConfig+0x2cc>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d81b      	bhi.n	8005a44 <UART_SetConfig+0xd0>
 8005a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <UART_SetConfig+0xa0>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a35 	.word	0x08005a35
 8005a1c:	08005a2d 	.word	0x08005a2d
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a2a:	e116      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a32:	e112      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a3a:	e10e      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a42:	e10a      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4a:	e106      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a7c      	ldr	r2, [pc, #496]	@ (8005c44 <UART_SetConfig+0x2d0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d138      	bne.n	8005ac8 <UART_SetConfig+0x154>
 8005a56:	4b7a      	ldr	r3, [pc, #488]	@ (8005c40 <UART_SetConfig+0x2cc>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5c:	f003 030c 	and.w	r3, r3, #12
 8005a60:	2b0c      	cmp	r3, #12
 8005a62:	d82d      	bhi.n	8005ac0 <UART_SetConfig+0x14c>
 8005a64:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <UART_SetConfig+0xf8>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005aa1 	.word	0x08005aa1
 8005a70:	08005ac1 	.word	0x08005ac1
 8005a74:	08005ac1 	.word	0x08005ac1
 8005a78:	08005ac1 	.word	0x08005ac1
 8005a7c:	08005ab1 	.word	0x08005ab1
 8005a80:	08005ac1 	.word	0x08005ac1
 8005a84:	08005ac1 	.word	0x08005ac1
 8005a88:	08005ac1 	.word	0x08005ac1
 8005a8c:	08005aa9 	.word	0x08005aa9
 8005a90:	08005ac1 	.word	0x08005ac1
 8005a94:	08005ac1 	.word	0x08005ac1
 8005a98:	08005ac1 	.word	0x08005ac1
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aa6:	e0d8      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aae:	e0d4      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab6:	e0d0      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005abe:	e0cc      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ac6:	e0c8      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a5e      	ldr	r2, [pc, #376]	@ (8005c48 <UART_SetConfig+0x2d4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d125      	bne.n	8005b1e <UART_SetConfig+0x1aa>
 8005ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c40 <UART_SetConfig+0x2cc>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005adc:	2b30      	cmp	r3, #48	@ 0x30
 8005ade:	d016      	beq.n	8005b0e <UART_SetConfig+0x19a>
 8005ae0:	2b30      	cmp	r3, #48	@ 0x30
 8005ae2:	d818      	bhi.n	8005b16 <UART_SetConfig+0x1a2>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d00a      	beq.n	8005afe <UART_SetConfig+0x18a>
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d814      	bhi.n	8005b16 <UART_SetConfig+0x1a2>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <UART_SetConfig+0x182>
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d008      	beq.n	8005b06 <UART_SetConfig+0x192>
 8005af4:	e00f      	b.n	8005b16 <UART_SetConfig+0x1a2>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afc:	e0ad      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005afe:	2302      	movs	r3, #2
 8005b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b04:	e0a9      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b06:	2304      	movs	r3, #4
 8005b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b0c:	e0a5      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b14:	e0a1      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b16:	2310      	movs	r3, #16
 8005b18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1c:	e09d      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a4a      	ldr	r2, [pc, #296]	@ (8005c4c <UART_SetConfig+0x2d8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d125      	bne.n	8005b74 <UART_SetConfig+0x200>
 8005b28:	4b45      	ldr	r3, [pc, #276]	@ (8005c40 <UART_SetConfig+0x2cc>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b34:	d016      	beq.n	8005b64 <UART_SetConfig+0x1f0>
 8005b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b38:	d818      	bhi.n	8005b6c <UART_SetConfig+0x1f8>
 8005b3a:	2b80      	cmp	r3, #128	@ 0x80
 8005b3c:	d00a      	beq.n	8005b54 <UART_SetConfig+0x1e0>
 8005b3e:	2b80      	cmp	r3, #128	@ 0x80
 8005b40:	d814      	bhi.n	8005b6c <UART_SetConfig+0x1f8>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <UART_SetConfig+0x1d8>
 8005b46:	2b40      	cmp	r3, #64	@ 0x40
 8005b48:	d008      	beq.n	8005b5c <UART_SetConfig+0x1e8>
 8005b4a:	e00f      	b.n	8005b6c <UART_SetConfig+0x1f8>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b52:	e082      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b54:	2302      	movs	r3, #2
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5a:	e07e      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b62:	e07a      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b64:	2308      	movs	r3, #8
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6a:	e076      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b72:	e072      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a35      	ldr	r2, [pc, #212]	@ (8005c50 <UART_SetConfig+0x2dc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d12a      	bne.n	8005bd4 <UART_SetConfig+0x260>
 8005b7e:	4b30      	ldr	r3, [pc, #192]	@ (8005c40 <UART_SetConfig+0x2cc>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b8c:	d01a      	beq.n	8005bc4 <UART_SetConfig+0x250>
 8005b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b92:	d81b      	bhi.n	8005bcc <UART_SetConfig+0x258>
 8005b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b98:	d00c      	beq.n	8005bb4 <UART_SetConfig+0x240>
 8005b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b9e:	d815      	bhi.n	8005bcc <UART_SetConfig+0x258>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <UART_SetConfig+0x238>
 8005ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba8:	d008      	beq.n	8005bbc <UART_SetConfig+0x248>
 8005baa:	e00f      	b.n	8005bcc <UART_SetConfig+0x258>
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb2:	e052      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bba:	e04e      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e04a      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e046      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd2:	e042      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <UART_SetConfig+0x2c4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d13a      	bne.n	8005c54 <UART_SetConfig+0x2e0>
 8005bde:	4b18      	ldr	r3, [pc, #96]	@ (8005c40 <UART_SetConfig+0x2cc>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005be8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bec:	d01a      	beq.n	8005c24 <UART_SetConfig+0x2b0>
 8005bee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bf2:	d81b      	bhi.n	8005c2c <UART_SetConfig+0x2b8>
 8005bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bf8:	d00c      	beq.n	8005c14 <UART_SetConfig+0x2a0>
 8005bfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bfe:	d815      	bhi.n	8005c2c <UART_SetConfig+0x2b8>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <UART_SetConfig+0x298>
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c08:	d008      	beq.n	8005c1c <UART_SetConfig+0x2a8>
 8005c0a:	e00f      	b.n	8005c2c <UART_SetConfig+0x2b8>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c12:	e022      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005c14:	2302      	movs	r3, #2
 8005c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c1a:	e01e      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c22:	e01a      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005c24:	2308      	movs	r3, #8
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2a:	e016      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c32:	e012      	b.n	8005c5a <UART_SetConfig+0x2e6>
 8005c34:	efff69f3 	.word	0xefff69f3
 8005c38:	40008000 	.word	0x40008000
 8005c3c:	40013800 	.word	0x40013800
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40004400 	.word	0x40004400
 8005c48:	40004800 	.word	0x40004800
 8005c4c:	40004c00 	.word	0x40004c00
 8005c50:	40005000 	.word	0x40005000
 8005c54:	2310      	movs	r3, #16
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a9f      	ldr	r2, [pc, #636]	@ (8005edc <UART_SetConfig+0x568>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d17a      	bne.n	8005d5a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d824      	bhi.n	8005cb6 <UART_SetConfig+0x342>
 8005c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <UART_SetConfig+0x300>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005cb7 	.word	0x08005cb7
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005cb7 	.word	0x08005cb7
 8005c84:	08005ca7 	.word	0x08005ca7
 8005c88:	08005cb7 	.word	0x08005cb7
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cb7 	.word	0x08005cb7
 8005c94:	08005caf 	.word	0x08005caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c98:	f7ff f84c 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8005c9c:	61f8      	str	r0, [r7, #28]
        break;
 8005c9e:	e010      	b.n	8005cc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca0:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee0 <UART_SetConfig+0x56c>)
 8005ca2:	61fb      	str	r3, [r7, #28]
        break;
 8005ca4:	e00d      	b.n	8005cc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca6:	f7fe ffad 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8005caa:	61f8      	str	r0, [r7, #28]
        break;
 8005cac:	e009      	b.n	8005cc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cb2:	61fb      	str	r3, [r7, #28]
        break;
 8005cb4:	e005      	b.n	8005cc2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 80fb 	beq.w	8005ec0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d305      	bcc.n	8005ce6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d903      	bls.n	8005cee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cec:	e0e8      	b.n	8005ec0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	461c      	mov	r4, r3
 8005cf4:	4615      	mov	r5, r2
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	022b      	lsls	r3, r5, #8
 8005d00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d04:	0222      	lsls	r2, r4, #8
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	6849      	ldr	r1, [r1, #4]
 8005d0a:	0849      	lsrs	r1, r1, #1
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	4688      	mov	r8, r1
 8005d10:	4681      	mov	r9, r0
 8005d12:	eb12 0a08 	adds.w	sl, r2, r8
 8005d16:	eb43 0b09 	adc.w	fp, r3, r9
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d28:	4650      	mov	r0, sl
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	f7fa ff8c 	bl	8000c48 <__aeabi_uldivmod>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4613      	mov	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d3e:	d308      	bcc.n	8005d52 <UART_SetConfig+0x3de>
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d46:	d204      	bcs.n	8005d52 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	60da      	str	r2, [r3, #12]
 8005d50:	e0b6      	b.n	8005ec0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d58:	e0b2      	b.n	8005ec0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d62:	d15e      	bne.n	8005e22 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d828      	bhi.n	8005dbe <UART_SetConfig+0x44a>
 8005d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <UART_SetConfig+0x400>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005da1 	.word	0x08005da1
 8005d7c:	08005da9 	.word	0x08005da9
 8005d80:	08005dbf 	.word	0x08005dbf
 8005d84:	08005daf 	.word	0x08005daf
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
 8005d94:	08005db7 	.word	0x08005db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d98:	f7fe ffcc 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	61f8      	str	r0, [r7, #28]
        break;
 8005d9e:	e014      	b.n	8005dca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fe ffde 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 8005da4:	61f8      	str	r0, [r7, #28]
        break;
 8005da6:	e010      	b.n	8005dca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da8:	4b4d      	ldr	r3, [pc, #308]	@ (8005ee0 <UART_SetConfig+0x56c>)
 8005daa:	61fb      	str	r3, [r7, #28]
        break;
 8005dac:	e00d      	b.n	8005dca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fe ff29 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8005db2:	61f8      	str	r0, [r7, #28]
        break;
 8005db4:	e009      	b.n	8005dca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dba:	61fb      	str	r3, [r7, #28]
        break;
 8005dbc:	e005      	b.n	8005dca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005dc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d077      	beq.n	8005ec0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	005a      	lsls	r2, r3, #1
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	085b      	lsrs	r3, r3, #1
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d916      	bls.n	8005e1a <UART_SetConfig+0x4a6>
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df2:	d212      	bcs.n	8005e1a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f023 030f 	bic.w	r3, r3, #15
 8005dfc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	8afb      	ldrh	r3, [r7, #22]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	8afa      	ldrh	r2, [r7, #22]
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	e052      	b.n	8005ec0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e20:	e04e      	b.n	8005ec0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d827      	bhi.n	8005e7a <UART_SetConfig+0x506>
 8005e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <UART_SetConfig+0x4bc>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e65 	.word	0x08005e65
 8005e3c:	08005e7b 	.word	0x08005e7b
 8005e40:	08005e6b 	.word	0x08005e6b
 8005e44:	08005e7b 	.word	0x08005e7b
 8005e48:	08005e7b 	.word	0x08005e7b
 8005e4c:	08005e7b 	.word	0x08005e7b
 8005e50:	08005e73 	.word	0x08005e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e54:	f7fe ff6e 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8005e58:	61f8      	str	r0, [r7, #28]
        break;
 8005e5a:	e014      	b.n	8005e86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e5c:	f7fe ff80 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 8005e60:	61f8      	str	r0, [r7, #28]
        break;
 8005e62:	e010      	b.n	8005e86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e64:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee0 <UART_SetConfig+0x56c>)
 8005e66:	61fb      	str	r3, [r7, #28]
        break;
 8005e68:	e00d      	b.n	8005e86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e6a:	f7fe fecb 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8005e6e:	61f8      	str	r0, [r7, #28]
        break;
 8005e70:	e009      	b.n	8005e86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e76:	61fb      	str	r3, [r7, #28]
        break;
 8005e78:	e005      	b.n	8005e86 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e84:	bf00      	nop
    }

    if (pclk != 0U)
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d019      	beq.n	8005ec0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	085a      	lsrs	r2, r3, #1
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b0f      	cmp	r3, #15
 8005ea4:	d909      	bls.n	8005eba <UART_SetConfig+0x546>
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eac:	d205      	bcs.n	8005eba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60da      	str	r2, [r3, #12]
 8005eb8:	e002      	b.n	8005ec0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ecc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3728      	adds	r7, #40	@ 0x28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eda:	bf00      	nop
 8005edc:	40008000 	.word	0x40008000
 8005ee0:	00f42400 	.word	0x00f42400

08005ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01a      	beq.n	8005ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fe2:	d10a      	bne.n	8005ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	605a      	str	r2, [r3, #4]
  }
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b098      	sub	sp, #96	@ 0x60
 800602c:	af02      	add	r7, sp, #8
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006038:	f7fc ff08 	bl	8002e4c <HAL_GetTick>
 800603c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b08      	cmp	r3, #8
 800604a:	d12e      	bne.n	80060aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800604c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006054:	2200      	movs	r2, #0
 8006056:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f88c 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d021      	beq.n	80060aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607a:	653b      	str	r3, [r7, #80]	@ 0x50
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006084:	647b      	str	r3, [r7, #68]	@ 0x44
 8006086:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800608a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e6      	bne.n	8006066 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e062      	b.n	8006170 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d149      	bne.n	800614c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c0:	2200      	movs	r2, #0
 80060c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f856 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d03c      	beq.n	800614c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	623b      	str	r3, [r7, #32]
   return(result);
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e6      	bne.n	80060d2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	60fb      	str	r3, [r7, #12]
   return(result);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006124:	61fa      	str	r2, [r7, #28]
 8006126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	69b9      	ldr	r1, [r7, #24]
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	617b      	str	r3, [r7, #20]
   return(result);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e011      	b.n	8006170 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3758      	adds	r7, #88	@ 0x58
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006188:	e049      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d045      	beq.n	800621e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006192:	f7fc fe5b 	bl	8002e4c <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e048      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d031      	beq.n	800621e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d110      	bne.n	80061ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2208      	movs	r2, #8
 80061ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f838 	bl	8006246 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2208      	movs	r2, #8
 80061da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e029      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f8:	d111      	bne.n	800621e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f81e 	bl	8006246 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e00f      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4013      	ands	r3, r2
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	bf0c      	ite	eq
 800622e:	2301      	moveq	r3, #1
 8006230:	2300      	movne	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	429a      	cmp	r2, r3
 800623a:	d0a6      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006246:	b480      	push	{r7}
 8006248:	b095      	sub	sp, #84	@ 0x54
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800626c:	643b      	str	r3, [r7, #64]	@ 0x40
 800626e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006272:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800627a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e6      	bne.n	800624e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3308      	adds	r3, #8
 8006286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3308      	adds	r3, #8
 800629e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e5      	bne.n	8006280 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d118      	bne.n	80062ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f023 0310 	bic.w	r3, r3, #16
 80062d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	613b      	str	r3, [r7, #16]
   return(result);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e6      	bne.n	80062bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006302:	bf00      	nop
 8006304:	3754      	adds	r7, #84	@ 0x54
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <__cvt>:
 800630e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006312:	ec57 6b10 	vmov	r6, r7, d0
 8006316:	2f00      	cmp	r7, #0
 8006318:	460c      	mov	r4, r1
 800631a:	4619      	mov	r1, r3
 800631c:	463b      	mov	r3, r7
 800631e:	bfbb      	ittet	lt
 8006320:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006324:	461f      	movlt	r7, r3
 8006326:	2300      	movge	r3, #0
 8006328:	232d      	movlt	r3, #45	@ 0x2d
 800632a:	700b      	strb	r3, [r1, #0]
 800632c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800632e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006332:	4691      	mov	r9, r2
 8006334:	f023 0820 	bic.w	r8, r3, #32
 8006338:	bfbc      	itt	lt
 800633a:	4632      	movlt	r2, r6
 800633c:	4616      	movlt	r6, r2
 800633e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006342:	d005      	beq.n	8006350 <__cvt+0x42>
 8006344:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006348:	d100      	bne.n	800634c <__cvt+0x3e>
 800634a:	3401      	adds	r4, #1
 800634c:	2102      	movs	r1, #2
 800634e:	e000      	b.n	8006352 <__cvt+0x44>
 8006350:	2103      	movs	r1, #3
 8006352:	ab03      	add	r3, sp, #12
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	ab02      	add	r3, sp, #8
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	ec47 6b10 	vmov	d0, r6, r7
 800635e:	4653      	mov	r3, sl
 8006360:	4622      	mov	r2, r4
 8006362:	f000 ff5d 	bl	8007220 <_dtoa_r>
 8006366:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800636a:	4605      	mov	r5, r0
 800636c:	d119      	bne.n	80063a2 <__cvt+0x94>
 800636e:	f019 0f01 	tst.w	r9, #1
 8006372:	d00e      	beq.n	8006392 <__cvt+0x84>
 8006374:	eb00 0904 	add.w	r9, r0, r4
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7fa fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006384:	b108      	cbz	r0, 800638a <__cvt+0x7c>
 8006386:	f8cd 900c 	str.w	r9, [sp, #12]
 800638a:	2230      	movs	r2, #48	@ 0x30
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	454b      	cmp	r3, r9
 8006390:	d31e      	bcc.n	80063d0 <__cvt+0xc2>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006396:	1b5b      	subs	r3, r3, r5
 8006398:	4628      	mov	r0, r5
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	b004      	add	sp, #16
 800639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063a6:	eb00 0904 	add.w	r9, r0, r4
 80063aa:	d1e5      	bne.n	8006378 <__cvt+0x6a>
 80063ac:	7803      	ldrb	r3, [r0, #0]
 80063ae:	2b30      	cmp	r3, #48	@ 0x30
 80063b0:	d10a      	bne.n	80063c8 <__cvt+0xba>
 80063b2:	2200      	movs	r2, #0
 80063b4:	2300      	movs	r3, #0
 80063b6:	4630      	mov	r0, r6
 80063b8:	4639      	mov	r1, r7
 80063ba:	f7fa fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 80063be:	b918      	cbnz	r0, 80063c8 <__cvt+0xba>
 80063c0:	f1c4 0401 	rsb	r4, r4, #1
 80063c4:	f8ca 4000 	str.w	r4, [sl]
 80063c8:	f8da 3000 	ldr.w	r3, [sl]
 80063cc:	4499      	add	r9, r3
 80063ce:	e7d3      	b.n	8006378 <__cvt+0x6a>
 80063d0:	1c59      	adds	r1, r3, #1
 80063d2:	9103      	str	r1, [sp, #12]
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e7d9      	b.n	800638c <__cvt+0x7e>

080063d8 <__exponent>:
 80063d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063da:	2900      	cmp	r1, #0
 80063dc:	bfba      	itte	lt
 80063de:	4249      	neglt	r1, r1
 80063e0:	232d      	movlt	r3, #45	@ 0x2d
 80063e2:	232b      	movge	r3, #43	@ 0x2b
 80063e4:	2909      	cmp	r1, #9
 80063e6:	7002      	strb	r2, [r0, #0]
 80063e8:	7043      	strb	r3, [r0, #1]
 80063ea:	dd29      	ble.n	8006440 <__exponent+0x68>
 80063ec:	f10d 0307 	add.w	r3, sp, #7
 80063f0:	461d      	mov	r5, r3
 80063f2:	270a      	movs	r7, #10
 80063f4:	461a      	mov	r2, r3
 80063f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80063fa:	fb07 1416 	mls	r4, r7, r6, r1
 80063fe:	3430      	adds	r4, #48	@ 0x30
 8006400:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006404:	460c      	mov	r4, r1
 8006406:	2c63      	cmp	r4, #99	@ 0x63
 8006408:	f103 33ff 	add.w	r3, r3, #4294967295
 800640c:	4631      	mov	r1, r6
 800640e:	dcf1      	bgt.n	80063f4 <__exponent+0x1c>
 8006410:	3130      	adds	r1, #48	@ 0x30
 8006412:	1e94      	subs	r4, r2, #2
 8006414:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006418:	1c41      	adds	r1, r0, #1
 800641a:	4623      	mov	r3, r4
 800641c:	42ab      	cmp	r3, r5
 800641e:	d30a      	bcc.n	8006436 <__exponent+0x5e>
 8006420:	f10d 0309 	add.w	r3, sp, #9
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	42ac      	cmp	r4, r5
 8006428:	bf88      	it	hi
 800642a:	2300      	movhi	r3, #0
 800642c:	3302      	adds	r3, #2
 800642e:	4403      	add	r3, r0
 8006430:	1a18      	subs	r0, r3, r0
 8006432:	b003      	add	sp, #12
 8006434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006436:	f813 6b01 	ldrb.w	r6, [r3], #1
 800643a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800643e:	e7ed      	b.n	800641c <__exponent+0x44>
 8006440:	2330      	movs	r3, #48	@ 0x30
 8006442:	3130      	adds	r1, #48	@ 0x30
 8006444:	7083      	strb	r3, [r0, #2]
 8006446:	70c1      	strb	r1, [r0, #3]
 8006448:	1d03      	adds	r3, r0, #4
 800644a:	e7f1      	b.n	8006430 <__exponent+0x58>

0800644c <_printf_float>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	b08d      	sub	sp, #52	@ 0x34
 8006452:	460c      	mov	r4, r1
 8006454:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006458:	4616      	mov	r6, r2
 800645a:	461f      	mov	r7, r3
 800645c:	4605      	mov	r5, r0
 800645e:	f000 fddf 	bl	8007020 <_localeconv_r>
 8006462:	6803      	ldr	r3, [r0, #0]
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	4618      	mov	r0, r3
 8006468:	f7f9 ff02 	bl	8000270 <strlen>
 800646c:	2300      	movs	r3, #0
 800646e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006470:	f8d8 3000 	ldr.w	r3, [r8]
 8006474:	9005      	str	r0, [sp, #20]
 8006476:	3307      	adds	r3, #7
 8006478:	f023 0307 	bic.w	r3, r3, #7
 800647c:	f103 0208 	add.w	r2, r3, #8
 8006480:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006484:	f8d4 b000 	ldr.w	fp, [r4]
 8006488:	f8c8 2000 	str.w	r2, [r8]
 800648c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006490:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006494:	9307      	str	r3, [sp, #28]
 8006496:	f8cd 8018 	str.w	r8, [sp, #24]
 800649a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800649e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006714 <_printf_float+0x2c8>)
 80064a4:	f04f 32ff 	mov.w	r2, #4294967295
 80064a8:	f7fa fb40 	bl	8000b2c <__aeabi_dcmpun>
 80064ac:	bb70      	cbnz	r0, 800650c <_printf_float+0xc0>
 80064ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064b2:	4b98      	ldr	r3, [pc, #608]	@ (8006714 <_printf_float+0x2c8>)
 80064b4:	f04f 32ff 	mov.w	r2, #4294967295
 80064b8:	f7fa fb1a 	bl	8000af0 <__aeabi_dcmple>
 80064bc:	bb30      	cbnz	r0, 800650c <_printf_float+0xc0>
 80064be:	2200      	movs	r2, #0
 80064c0:	2300      	movs	r3, #0
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7fa fb09 	bl	8000adc <__aeabi_dcmplt>
 80064ca:	b110      	cbz	r0, 80064d2 <_printf_float+0x86>
 80064cc:	232d      	movs	r3, #45	@ 0x2d
 80064ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064d2:	4a91      	ldr	r2, [pc, #580]	@ (8006718 <_printf_float+0x2cc>)
 80064d4:	4b91      	ldr	r3, [pc, #580]	@ (800671c <_printf_float+0x2d0>)
 80064d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064da:	bf94      	ite	ls
 80064dc:	4690      	movls	r8, r2
 80064de:	4698      	movhi	r8, r3
 80064e0:	2303      	movs	r3, #3
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	f02b 0304 	bic.w	r3, fp, #4
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	f04f 0900 	mov.w	r9, #0
 80064ee:	9700      	str	r7, [sp, #0]
 80064f0:	4633      	mov	r3, r6
 80064f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064f4:	4621      	mov	r1, r4
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 f9d2 	bl	80068a0 <_printf_common>
 80064fc:	3001      	adds	r0, #1
 80064fe:	f040 808d 	bne.w	800661c <_printf_float+0x1d0>
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	b00d      	add	sp, #52	@ 0x34
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	f7fa fb0a 	bl	8000b2c <__aeabi_dcmpun>
 8006518:	b140      	cbz	r0, 800652c <_printf_float+0xe0>
 800651a:	464b      	mov	r3, r9
 800651c:	2b00      	cmp	r3, #0
 800651e:	bfbc      	itt	lt
 8006520:	232d      	movlt	r3, #45	@ 0x2d
 8006522:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006526:	4a7e      	ldr	r2, [pc, #504]	@ (8006720 <_printf_float+0x2d4>)
 8006528:	4b7e      	ldr	r3, [pc, #504]	@ (8006724 <_printf_float+0x2d8>)
 800652a:	e7d4      	b.n	80064d6 <_printf_float+0x8a>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006532:	9206      	str	r2, [sp, #24]
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	d13b      	bne.n	80065b0 <_printf_float+0x164>
 8006538:	2306      	movs	r3, #6
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006540:	2300      	movs	r3, #0
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	9303      	str	r3, [sp, #12]
 8006546:	ab0a      	add	r3, sp, #40	@ 0x28
 8006548:	e9cd a301 	strd	sl, r3, [sp, #4]
 800654c:	ab09      	add	r3, sp, #36	@ 0x24
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	6861      	ldr	r1, [r4, #4]
 8006552:	ec49 8b10 	vmov	d0, r8, r9
 8006556:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800655a:	4628      	mov	r0, r5
 800655c:	f7ff fed7 	bl	800630e <__cvt>
 8006560:	9b06      	ldr	r3, [sp, #24]
 8006562:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006564:	2b47      	cmp	r3, #71	@ 0x47
 8006566:	4680      	mov	r8, r0
 8006568:	d129      	bne.n	80065be <_printf_float+0x172>
 800656a:	1cc8      	adds	r0, r1, #3
 800656c:	db02      	blt.n	8006574 <_printf_float+0x128>
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	4299      	cmp	r1, r3
 8006572:	dd41      	ble.n	80065f8 <_printf_float+0x1ac>
 8006574:	f1aa 0a02 	sub.w	sl, sl, #2
 8006578:	fa5f fa8a 	uxtb.w	sl, sl
 800657c:	3901      	subs	r1, #1
 800657e:	4652      	mov	r2, sl
 8006580:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006584:	9109      	str	r1, [sp, #36]	@ 0x24
 8006586:	f7ff ff27 	bl	80063d8 <__exponent>
 800658a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800658c:	1813      	adds	r3, r2, r0
 800658e:	2a01      	cmp	r2, #1
 8006590:	4681      	mov	r9, r0
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	dc02      	bgt.n	800659c <_printf_float+0x150>
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	07d2      	lsls	r2, r2, #31
 800659a:	d501      	bpl.n	80065a0 <_printf_float+0x154>
 800659c:	3301      	adds	r3, #1
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0a2      	beq.n	80064ee <_printf_float+0xa2>
 80065a8:	232d      	movs	r3, #45	@ 0x2d
 80065aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ae:	e79e      	b.n	80064ee <_printf_float+0xa2>
 80065b0:	9a06      	ldr	r2, [sp, #24]
 80065b2:	2a47      	cmp	r2, #71	@ 0x47
 80065b4:	d1c2      	bne.n	800653c <_printf_float+0xf0>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1c0      	bne.n	800653c <_printf_float+0xf0>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e7bd      	b.n	800653a <_printf_float+0xee>
 80065be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065c2:	d9db      	bls.n	800657c <_printf_float+0x130>
 80065c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065c8:	d118      	bne.n	80065fc <_printf_float+0x1b0>
 80065ca:	2900      	cmp	r1, #0
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	dd0b      	ble.n	80065e8 <_printf_float+0x19c>
 80065d0:	6121      	str	r1, [r4, #16]
 80065d2:	b913      	cbnz	r3, 80065da <_printf_float+0x18e>
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	07d0      	lsls	r0, r2, #31
 80065d8:	d502      	bpl.n	80065e0 <_printf_float+0x194>
 80065da:	3301      	adds	r3, #1
 80065dc:	440b      	add	r3, r1
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	e7db      	b.n	80065a0 <_printf_float+0x154>
 80065e8:	b913      	cbnz	r3, 80065f0 <_printf_float+0x1a4>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	07d2      	lsls	r2, r2, #31
 80065ee:	d501      	bpl.n	80065f4 <_printf_float+0x1a8>
 80065f0:	3302      	adds	r3, #2
 80065f2:	e7f4      	b.n	80065de <_printf_float+0x192>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7f2      	b.n	80065de <_printf_float+0x192>
 80065f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065fe:	4299      	cmp	r1, r3
 8006600:	db05      	blt.n	800660e <_printf_float+0x1c2>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	6121      	str	r1, [r4, #16]
 8006606:	07d8      	lsls	r0, r3, #31
 8006608:	d5ea      	bpl.n	80065e0 <_printf_float+0x194>
 800660a:	1c4b      	adds	r3, r1, #1
 800660c:	e7e7      	b.n	80065de <_printf_float+0x192>
 800660e:	2900      	cmp	r1, #0
 8006610:	bfd4      	ite	le
 8006612:	f1c1 0202 	rsble	r2, r1, #2
 8006616:	2201      	movgt	r2, #1
 8006618:	4413      	add	r3, r2
 800661a:	e7e0      	b.n	80065de <_printf_float+0x192>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	055a      	lsls	r2, r3, #21
 8006620:	d407      	bmi.n	8006632 <_printf_float+0x1e6>
 8006622:	6923      	ldr	r3, [r4, #16]
 8006624:	4642      	mov	r2, r8
 8006626:	4631      	mov	r1, r6
 8006628:	4628      	mov	r0, r5
 800662a:	47b8      	blx	r7
 800662c:	3001      	adds	r0, #1
 800662e:	d12b      	bne.n	8006688 <_printf_float+0x23c>
 8006630:	e767      	b.n	8006502 <_printf_float+0xb6>
 8006632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006636:	f240 80dd 	bls.w	80067f4 <_printf_float+0x3a8>
 800663a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	f7fa fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8006646:	2800      	cmp	r0, #0
 8006648:	d033      	beq.n	80066b2 <_printf_float+0x266>
 800664a:	4a37      	ldr	r2, [pc, #220]	@ (8006728 <_printf_float+0x2dc>)
 800664c:	2301      	movs	r3, #1
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	f43f af54 	beq.w	8006502 <_printf_float+0xb6>
 800665a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800665e:	4543      	cmp	r3, r8
 8006660:	db02      	blt.n	8006668 <_printf_float+0x21c>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	07d8      	lsls	r0, r3, #31
 8006666:	d50f      	bpl.n	8006688 <_printf_float+0x23c>
 8006668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	f43f af45 	beq.w	8006502 <_printf_float+0xb6>
 8006678:	f04f 0900 	mov.w	r9, #0
 800667c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006680:	f104 0a1a 	add.w	sl, r4, #26
 8006684:	45c8      	cmp	r8, r9
 8006686:	dc09      	bgt.n	800669c <_printf_float+0x250>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	079b      	lsls	r3, r3, #30
 800668c:	f100 8103 	bmi.w	8006896 <_printf_float+0x44a>
 8006690:	68e0      	ldr	r0, [r4, #12]
 8006692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006694:	4298      	cmp	r0, r3
 8006696:	bfb8      	it	lt
 8006698:	4618      	movlt	r0, r3
 800669a:	e734      	b.n	8006506 <_printf_float+0xba>
 800669c:	2301      	movs	r3, #1
 800669e:	4652      	mov	r2, sl
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f af2b 	beq.w	8006502 <_printf_float+0xb6>
 80066ac:	f109 0901 	add.w	r9, r9, #1
 80066b0:	e7e8      	b.n	8006684 <_printf_float+0x238>
 80066b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dc39      	bgt.n	800672c <_printf_float+0x2e0>
 80066b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006728 <_printf_float+0x2dc>)
 80066ba:	2301      	movs	r3, #1
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f af1d 	beq.w	8006502 <_printf_float+0xb6>
 80066c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066cc:	ea59 0303 	orrs.w	r3, r9, r3
 80066d0:	d102      	bne.n	80066d8 <_printf_float+0x28c>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	07d9      	lsls	r1, r3, #31
 80066d6:	d5d7      	bpl.n	8006688 <_printf_float+0x23c>
 80066d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af0d 	beq.w	8006502 <_printf_float+0xb6>
 80066e8:	f04f 0a00 	mov.w	sl, #0
 80066ec:	f104 0b1a 	add.w	fp, r4, #26
 80066f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f2:	425b      	negs	r3, r3
 80066f4:	4553      	cmp	r3, sl
 80066f6:	dc01      	bgt.n	80066fc <_printf_float+0x2b0>
 80066f8:	464b      	mov	r3, r9
 80066fa:	e793      	b.n	8006624 <_printf_float+0x1d8>
 80066fc:	2301      	movs	r3, #1
 80066fe:	465a      	mov	r2, fp
 8006700:	4631      	mov	r1, r6
 8006702:	4628      	mov	r0, r5
 8006704:	47b8      	blx	r7
 8006706:	3001      	adds	r0, #1
 8006708:	f43f aefb 	beq.w	8006502 <_printf_float+0xb6>
 800670c:	f10a 0a01 	add.w	sl, sl, #1
 8006710:	e7ee      	b.n	80066f0 <_printf_float+0x2a4>
 8006712:	bf00      	nop
 8006714:	7fefffff 	.word	0x7fefffff
 8006718:	08009220 	.word	0x08009220
 800671c:	08009224 	.word	0x08009224
 8006720:	08009228 	.word	0x08009228
 8006724:	0800922c 	.word	0x0800922c
 8006728:	08009230 	.word	0x08009230
 800672c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800672e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006732:	4553      	cmp	r3, sl
 8006734:	bfa8      	it	ge
 8006736:	4653      	movge	r3, sl
 8006738:	2b00      	cmp	r3, #0
 800673a:	4699      	mov	r9, r3
 800673c:	dc36      	bgt.n	80067ac <_printf_float+0x360>
 800673e:	f04f 0b00 	mov.w	fp, #0
 8006742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006746:	f104 021a 	add.w	r2, r4, #26
 800674a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800674c:	9306      	str	r3, [sp, #24]
 800674e:	eba3 0309 	sub.w	r3, r3, r9
 8006752:	455b      	cmp	r3, fp
 8006754:	dc31      	bgt.n	80067ba <_printf_float+0x36e>
 8006756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006758:	459a      	cmp	sl, r3
 800675a:	dc3a      	bgt.n	80067d2 <_printf_float+0x386>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	07da      	lsls	r2, r3, #31
 8006760:	d437      	bmi.n	80067d2 <_printf_float+0x386>
 8006762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006764:	ebaa 0903 	sub.w	r9, sl, r3
 8006768:	9b06      	ldr	r3, [sp, #24]
 800676a:	ebaa 0303 	sub.w	r3, sl, r3
 800676e:	4599      	cmp	r9, r3
 8006770:	bfa8      	it	ge
 8006772:	4699      	movge	r9, r3
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	dc33      	bgt.n	80067e2 <_printf_float+0x396>
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006782:	f104 0b1a 	add.w	fp, r4, #26
 8006786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006788:	ebaa 0303 	sub.w	r3, sl, r3
 800678c:	eba3 0309 	sub.w	r3, r3, r9
 8006790:	4543      	cmp	r3, r8
 8006792:	f77f af79 	ble.w	8006688 <_printf_float+0x23c>
 8006796:	2301      	movs	r3, #1
 8006798:	465a      	mov	r2, fp
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f aeae 	beq.w	8006502 <_printf_float+0xb6>
 80067a6:	f108 0801 	add.w	r8, r8, #1
 80067aa:	e7ec      	b.n	8006786 <_printf_float+0x33a>
 80067ac:	4642      	mov	r2, r8
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1c2      	bne.n	800673e <_printf_float+0x2f2>
 80067b8:	e6a3      	b.n	8006502 <_printf_float+0xb6>
 80067ba:	2301      	movs	r3, #1
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	9206      	str	r2, [sp, #24]
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f ae9c 	beq.w	8006502 <_printf_float+0xb6>
 80067ca:	9a06      	ldr	r2, [sp, #24]
 80067cc:	f10b 0b01 	add.w	fp, fp, #1
 80067d0:	e7bb      	b.n	800674a <_printf_float+0x2fe>
 80067d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	d1c0      	bne.n	8006762 <_printf_float+0x316>
 80067e0:	e68f      	b.n	8006502 <_printf_float+0xb6>
 80067e2:	9a06      	ldr	r2, [sp, #24]
 80067e4:	464b      	mov	r3, r9
 80067e6:	4442      	add	r2, r8
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	d1c3      	bne.n	800677a <_printf_float+0x32e>
 80067f2:	e686      	b.n	8006502 <_printf_float+0xb6>
 80067f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067f8:	f1ba 0f01 	cmp.w	sl, #1
 80067fc:	dc01      	bgt.n	8006802 <_printf_float+0x3b6>
 80067fe:	07db      	lsls	r3, r3, #31
 8006800:	d536      	bpl.n	8006870 <_printf_float+0x424>
 8006802:	2301      	movs	r3, #1
 8006804:	4642      	mov	r2, r8
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f ae78 	beq.w	8006502 <_printf_float+0xb6>
 8006812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f ae70 	beq.w	8006502 <_printf_float+0xb6>
 8006822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006826:	2200      	movs	r2, #0
 8006828:	2300      	movs	r3, #0
 800682a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800682e:	f7fa f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006832:	b9c0      	cbnz	r0, 8006866 <_printf_float+0x41a>
 8006834:	4653      	mov	r3, sl
 8006836:	f108 0201 	add.w	r2, r8, #1
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	d10c      	bne.n	800685e <_printf_float+0x412>
 8006844:	e65d      	b.n	8006502 <_printf_float+0xb6>
 8006846:	2301      	movs	r3, #1
 8006848:	465a      	mov	r2, fp
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f ae56 	beq.w	8006502 <_printf_float+0xb6>
 8006856:	f108 0801 	add.w	r8, r8, #1
 800685a:	45d0      	cmp	r8, sl
 800685c:	dbf3      	blt.n	8006846 <_printf_float+0x3fa>
 800685e:	464b      	mov	r3, r9
 8006860:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006864:	e6df      	b.n	8006626 <_printf_float+0x1da>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	f104 0b1a 	add.w	fp, r4, #26
 800686e:	e7f4      	b.n	800685a <_printf_float+0x40e>
 8006870:	2301      	movs	r3, #1
 8006872:	4642      	mov	r2, r8
 8006874:	e7e1      	b.n	800683a <_printf_float+0x3ee>
 8006876:	2301      	movs	r3, #1
 8006878:	464a      	mov	r2, r9
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f ae3e 	beq.w	8006502 <_printf_float+0xb6>
 8006886:	f108 0801 	add.w	r8, r8, #1
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800688e:	1a5b      	subs	r3, r3, r1
 8006890:	4543      	cmp	r3, r8
 8006892:	dcf0      	bgt.n	8006876 <_printf_float+0x42a>
 8006894:	e6fc      	b.n	8006690 <_printf_float+0x244>
 8006896:	f04f 0800 	mov.w	r8, #0
 800689a:	f104 0919 	add.w	r9, r4, #25
 800689e:	e7f4      	b.n	800688a <_printf_float+0x43e>

080068a0 <_printf_common>:
 80068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a4:	4616      	mov	r6, r2
 80068a6:	4698      	mov	r8, r3
 80068a8:	688a      	ldr	r2, [r1, #8]
 80068aa:	690b      	ldr	r3, [r1, #16]
 80068ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	bfb8      	it	lt
 80068b4:	4613      	movlt	r3, r2
 80068b6:	6033      	str	r3, [r6, #0]
 80068b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068bc:	4607      	mov	r7, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	b10a      	cbz	r2, 80068c6 <_printf_common+0x26>
 80068c2:	3301      	adds	r3, #1
 80068c4:	6033      	str	r3, [r6, #0]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	0699      	lsls	r1, r3, #26
 80068ca:	bf42      	ittt	mi
 80068cc:	6833      	ldrmi	r3, [r6, #0]
 80068ce:	3302      	addmi	r3, #2
 80068d0:	6033      	strmi	r3, [r6, #0]
 80068d2:	6825      	ldr	r5, [r4, #0]
 80068d4:	f015 0506 	ands.w	r5, r5, #6
 80068d8:	d106      	bne.n	80068e8 <_printf_common+0x48>
 80068da:	f104 0a19 	add.w	sl, r4, #25
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	6832      	ldr	r2, [r6, #0]
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	42ab      	cmp	r3, r5
 80068e6:	dc26      	bgt.n	8006936 <_printf_common+0x96>
 80068e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	3b00      	subs	r3, #0
 80068f0:	bf18      	it	ne
 80068f2:	2301      	movne	r3, #1
 80068f4:	0692      	lsls	r2, r2, #26
 80068f6:	d42b      	bmi.n	8006950 <_printf_common+0xb0>
 80068f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068fc:	4641      	mov	r1, r8
 80068fe:	4638      	mov	r0, r7
 8006900:	47c8      	blx	r9
 8006902:	3001      	adds	r0, #1
 8006904:	d01e      	beq.n	8006944 <_printf_common+0xa4>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	6922      	ldr	r2, [r4, #16]
 800690a:	f003 0306 	and.w	r3, r3, #6
 800690e:	2b04      	cmp	r3, #4
 8006910:	bf02      	ittt	eq
 8006912:	68e5      	ldreq	r5, [r4, #12]
 8006914:	6833      	ldreq	r3, [r6, #0]
 8006916:	1aed      	subeq	r5, r5, r3
 8006918:	68a3      	ldr	r3, [r4, #8]
 800691a:	bf0c      	ite	eq
 800691c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006920:	2500      	movne	r5, #0
 8006922:	4293      	cmp	r3, r2
 8006924:	bfc4      	itt	gt
 8006926:	1a9b      	subgt	r3, r3, r2
 8006928:	18ed      	addgt	r5, r5, r3
 800692a:	2600      	movs	r6, #0
 800692c:	341a      	adds	r4, #26
 800692e:	42b5      	cmp	r5, r6
 8006930:	d11a      	bne.n	8006968 <_printf_common+0xc8>
 8006932:	2000      	movs	r0, #0
 8006934:	e008      	b.n	8006948 <_printf_common+0xa8>
 8006936:	2301      	movs	r3, #1
 8006938:	4652      	mov	r2, sl
 800693a:	4641      	mov	r1, r8
 800693c:	4638      	mov	r0, r7
 800693e:	47c8      	blx	r9
 8006940:	3001      	adds	r0, #1
 8006942:	d103      	bne.n	800694c <_printf_common+0xac>
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694c:	3501      	adds	r5, #1
 800694e:	e7c6      	b.n	80068de <_printf_common+0x3e>
 8006950:	18e1      	adds	r1, r4, r3
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	2030      	movs	r0, #48	@ 0x30
 8006956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800695a:	4422      	add	r2, r4
 800695c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006964:	3302      	adds	r3, #2
 8006966:	e7c7      	b.n	80068f8 <_printf_common+0x58>
 8006968:	2301      	movs	r3, #1
 800696a:	4622      	mov	r2, r4
 800696c:	4641      	mov	r1, r8
 800696e:	4638      	mov	r0, r7
 8006970:	47c8      	blx	r9
 8006972:	3001      	adds	r0, #1
 8006974:	d0e6      	beq.n	8006944 <_printf_common+0xa4>
 8006976:	3601      	adds	r6, #1
 8006978:	e7d9      	b.n	800692e <_printf_common+0x8e>
	...

0800697c <_printf_i>:
 800697c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	7e0f      	ldrb	r7, [r1, #24]
 8006982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006984:	2f78      	cmp	r7, #120	@ 0x78
 8006986:	4691      	mov	r9, r2
 8006988:	4680      	mov	r8, r0
 800698a:	460c      	mov	r4, r1
 800698c:	469a      	mov	sl, r3
 800698e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006992:	d807      	bhi.n	80069a4 <_printf_i+0x28>
 8006994:	2f62      	cmp	r7, #98	@ 0x62
 8006996:	d80a      	bhi.n	80069ae <_printf_i+0x32>
 8006998:	2f00      	cmp	r7, #0
 800699a:	f000 80d2 	beq.w	8006b42 <_printf_i+0x1c6>
 800699e:	2f58      	cmp	r7, #88	@ 0x58
 80069a0:	f000 80b9 	beq.w	8006b16 <_printf_i+0x19a>
 80069a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069ac:	e03a      	b.n	8006a24 <_printf_i+0xa8>
 80069ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069b2:	2b15      	cmp	r3, #21
 80069b4:	d8f6      	bhi.n	80069a4 <_printf_i+0x28>
 80069b6:	a101      	add	r1, pc, #4	@ (adr r1, 80069bc <_printf_i+0x40>)
 80069b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069bc:	08006a15 	.word	0x08006a15
 80069c0:	08006a29 	.word	0x08006a29
 80069c4:	080069a5 	.word	0x080069a5
 80069c8:	080069a5 	.word	0x080069a5
 80069cc:	080069a5 	.word	0x080069a5
 80069d0:	080069a5 	.word	0x080069a5
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	080069a5 	.word	0x080069a5
 80069dc:	080069a5 	.word	0x080069a5
 80069e0:	080069a5 	.word	0x080069a5
 80069e4:	080069a5 	.word	0x080069a5
 80069e8:	08006b29 	.word	0x08006b29
 80069ec:	08006a53 	.word	0x08006a53
 80069f0:	08006ae3 	.word	0x08006ae3
 80069f4:	080069a5 	.word	0x080069a5
 80069f8:	080069a5 	.word	0x080069a5
 80069fc:	08006b4b 	.word	0x08006b4b
 8006a00:	080069a5 	.word	0x080069a5
 8006a04:	08006a53 	.word	0x08006a53
 8006a08:	080069a5 	.word	0x080069a5
 8006a0c:	080069a5 	.word	0x080069a5
 8006a10:	08006aeb 	.word	0x08006aeb
 8006a14:	6833      	ldr	r3, [r6, #0]
 8006a16:	1d1a      	adds	r2, r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6032      	str	r2, [r6, #0]
 8006a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a24:	2301      	movs	r3, #1
 8006a26:	e09d      	b.n	8006b64 <_printf_i+0x1e8>
 8006a28:	6833      	ldr	r3, [r6, #0]
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	1d19      	adds	r1, r3, #4
 8006a2e:	6031      	str	r1, [r6, #0]
 8006a30:	0606      	lsls	r6, r0, #24
 8006a32:	d501      	bpl.n	8006a38 <_printf_i+0xbc>
 8006a34:	681d      	ldr	r5, [r3, #0]
 8006a36:	e003      	b.n	8006a40 <_printf_i+0xc4>
 8006a38:	0645      	lsls	r5, r0, #25
 8006a3a:	d5fb      	bpl.n	8006a34 <_printf_i+0xb8>
 8006a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	da03      	bge.n	8006a4c <_printf_i+0xd0>
 8006a44:	232d      	movs	r3, #45	@ 0x2d
 8006a46:	426d      	negs	r5, r5
 8006a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a4c:	4859      	ldr	r0, [pc, #356]	@ (8006bb4 <_printf_i+0x238>)
 8006a4e:	230a      	movs	r3, #10
 8006a50:	e011      	b.n	8006a76 <_printf_i+0xfa>
 8006a52:	6821      	ldr	r1, [r4, #0]
 8006a54:	6833      	ldr	r3, [r6, #0]
 8006a56:	0608      	lsls	r0, r1, #24
 8006a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a5c:	d402      	bmi.n	8006a64 <_printf_i+0xe8>
 8006a5e:	0649      	lsls	r1, r1, #25
 8006a60:	bf48      	it	mi
 8006a62:	b2ad      	uxthmi	r5, r5
 8006a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a66:	4853      	ldr	r0, [pc, #332]	@ (8006bb4 <_printf_i+0x238>)
 8006a68:	6033      	str	r3, [r6, #0]
 8006a6a:	bf14      	ite	ne
 8006a6c:	230a      	movne	r3, #10
 8006a6e:	2308      	moveq	r3, #8
 8006a70:	2100      	movs	r1, #0
 8006a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a76:	6866      	ldr	r6, [r4, #4]
 8006a78:	60a6      	str	r6, [r4, #8]
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	bfa2      	ittt	ge
 8006a7e:	6821      	ldrge	r1, [r4, #0]
 8006a80:	f021 0104 	bicge.w	r1, r1, #4
 8006a84:	6021      	strge	r1, [r4, #0]
 8006a86:	b90d      	cbnz	r5, 8006a8c <_printf_i+0x110>
 8006a88:	2e00      	cmp	r6, #0
 8006a8a:	d04b      	beq.n	8006b24 <_printf_i+0x1a8>
 8006a8c:	4616      	mov	r6, r2
 8006a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a92:	fb03 5711 	mls	r7, r3, r1, r5
 8006a96:	5dc7      	ldrb	r7, [r0, r7]
 8006a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a9c:	462f      	mov	r7, r5
 8006a9e:	42bb      	cmp	r3, r7
 8006aa0:	460d      	mov	r5, r1
 8006aa2:	d9f4      	bls.n	8006a8e <_printf_i+0x112>
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d10b      	bne.n	8006ac0 <_printf_i+0x144>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	07df      	lsls	r7, r3, #31
 8006aac:	d508      	bpl.n	8006ac0 <_printf_i+0x144>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	6861      	ldr	r1, [r4, #4]
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	bfde      	ittt	le
 8006ab6:	2330      	movle	r3, #48	@ 0x30
 8006ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ac0:	1b92      	subs	r2, r2, r6
 8006ac2:	6122      	str	r2, [r4, #16]
 8006ac4:	f8cd a000 	str.w	sl, [sp]
 8006ac8:	464b      	mov	r3, r9
 8006aca:	aa03      	add	r2, sp, #12
 8006acc:	4621      	mov	r1, r4
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7ff fee6 	bl	80068a0 <_printf_common>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d14a      	bne.n	8006b6e <_printf_i+0x1f2>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	b004      	add	sp, #16
 8006ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f043 0320 	orr.w	r3, r3, #32
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	4833      	ldr	r0, [pc, #204]	@ (8006bb8 <_printf_i+0x23c>)
 8006aec:	2778      	movs	r7, #120	@ 0x78
 8006aee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	6831      	ldr	r1, [r6, #0]
 8006af6:	061f      	lsls	r7, r3, #24
 8006af8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006afc:	d402      	bmi.n	8006b04 <_printf_i+0x188>
 8006afe:	065f      	lsls	r7, r3, #25
 8006b00:	bf48      	it	mi
 8006b02:	b2ad      	uxthmi	r5, r5
 8006b04:	6031      	str	r1, [r6, #0]
 8006b06:	07d9      	lsls	r1, r3, #31
 8006b08:	bf44      	itt	mi
 8006b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0e:	6023      	strmi	r3, [r4, #0]
 8006b10:	b11d      	cbz	r5, 8006b1a <_printf_i+0x19e>
 8006b12:	2310      	movs	r3, #16
 8006b14:	e7ac      	b.n	8006a70 <_printf_i+0xf4>
 8006b16:	4827      	ldr	r0, [pc, #156]	@ (8006bb4 <_printf_i+0x238>)
 8006b18:	e7e9      	b.n	8006aee <_printf_i+0x172>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	f023 0320 	bic.w	r3, r3, #32
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	e7f6      	b.n	8006b12 <_printf_i+0x196>
 8006b24:	4616      	mov	r6, r2
 8006b26:	e7bd      	b.n	8006aa4 <_printf_i+0x128>
 8006b28:	6833      	ldr	r3, [r6, #0]
 8006b2a:	6825      	ldr	r5, [r4, #0]
 8006b2c:	6961      	ldr	r1, [r4, #20]
 8006b2e:	1d18      	adds	r0, r3, #4
 8006b30:	6030      	str	r0, [r6, #0]
 8006b32:	062e      	lsls	r6, r5, #24
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	d501      	bpl.n	8006b3c <_printf_i+0x1c0>
 8006b38:	6019      	str	r1, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <_printf_i+0x1c6>
 8006b3c:	0668      	lsls	r0, r5, #25
 8006b3e:	d5fb      	bpl.n	8006b38 <_printf_i+0x1bc>
 8006b40:	8019      	strh	r1, [r3, #0]
 8006b42:	2300      	movs	r3, #0
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	4616      	mov	r6, r2
 8006b48:	e7bc      	b.n	8006ac4 <_printf_i+0x148>
 8006b4a:	6833      	ldr	r3, [r6, #0]
 8006b4c:	1d1a      	adds	r2, r3, #4
 8006b4e:	6032      	str	r2, [r6, #0]
 8006b50:	681e      	ldr	r6, [r3, #0]
 8006b52:	6862      	ldr	r2, [r4, #4]
 8006b54:	2100      	movs	r1, #0
 8006b56:	4630      	mov	r0, r6
 8006b58:	f7f9 fb3a 	bl	80001d0 <memchr>
 8006b5c:	b108      	cbz	r0, 8006b62 <_printf_i+0x1e6>
 8006b5e:	1b80      	subs	r0, r0, r6
 8006b60:	6060      	str	r0, [r4, #4]
 8006b62:	6863      	ldr	r3, [r4, #4]
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	2300      	movs	r3, #0
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b6c:	e7aa      	b.n	8006ac4 <_printf_i+0x148>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	4632      	mov	r2, r6
 8006b72:	4649      	mov	r1, r9
 8006b74:	4640      	mov	r0, r8
 8006b76:	47d0      	blx	sl
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d0ad      	beq.n	8006ad8 <_printf_i+0x15c>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	079b      	lsls	r3, r3, #30
 8006b80:	d413      	bmi.n	8006baa <_printf_i+0x22e>
 8006b82:	68e0      	ldr	r0, [r4, #12]
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	4298      	cmp	r0, r3
 8006b88:	bfb8      	it	lt
 8006b8a:	4618      	movlt	r0, r3
 8006b8c:	e7a6      	b.n	8006adc <_printf_i+0x160>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4632      	mov	r2, r6
 8006b92:	4649      	mov	r1, r9
 8006b94:	4640      	mov	r0, r8
 8006b96:	47d0      	blx	sl
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d09d      	beq.n	8006ad8 <_printf_i+0x15c>
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	68e3      	ldr	r3, [r4, #12]
 8006ba0:	9903      	ldr	r1, [sp, #12]
 8006ba2:	1a5b      	subs	r3, r3, r1
 8006ba4:	42ab      	cmp	r3, r5
 8006ba6:	dcf2      	bgt.n	8006b8e <_printf_i+0x212>
 8006ba8:	e7eb      	b.n	8006b82 <_printf_i+0x206>
 8006baa:	2500      	movs	r5, #0
 8006bac:	f104 0619 	add.w	r6, r4, #25
 8006bb0:	e7f5      	b.n	8006b9e <_printf_i+0x222>
 8006bb2:	bf00      	nop
 8006bb4:	08009232 	.word	0x08009232
 8006bb8:	08009243 	.word	0x08009243

08006bbc <std>:
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	b510      	push	{r4, lr}
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8006bc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bca:	6083      	str	r3, [r0, #8]
 8006bcc:	8181      	strh	r1, [r0, #12]
 8006bce:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bd0:	81c2      	strh	r2, [r0, #14]
 8006bd2:	6183      	str	r3, [r0, #24]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	2208      	movs	r2, #8
 8006bd8:	305c      	adds	r0, #92	@ 0x5c
 8006bda:	f000 fa19 	bl	8007010 <memset>
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <std+0x58>)
 8006be0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006be2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <std+0x5c>)
 8006be4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006be6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c1c <std+0x60>)
 8006be8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bea:	4b0d      	ldr	r3, [pc, #52]	@ (8006c20 <std+0x64>)
 8006bec:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bee:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <std+0x68>)
 8006bf0:	6224      	str	r4, [r4, #32]
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d006      	beq.n	8006c04 <std+0x48>
 8006bf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bfa:	4294      	cmp	r4, r2
 8006bfc:	d002      	beq.n	8006c04 <std+0x48>
 8006bfe:	33d0      	adds	r3, #208	@ 0xd0
 8006c00:	429c      	cmp	r4, r3
 8006c02:	d105      	bne.n	8006c10 <std+0x54>
 8006c04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0c:	f000 ba7c 	b.w	8007108 <__retarget_lock_init_recursive>
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	bf00      	nop
 8006c14:	08006e61 	.word	0x08006e61
 8006c18:	08006e83 	.word	0x08006e83
 8006c1c:	08006ebb 	.word	0x08006ebb
 8006c20:	08006edf 	.word	0x08006edf
 8006c24:	20000364 	.word	0x20000364

08006c28 <stdio_exit_handler>:
 8006c28:	4a02      	ldr	r2, [pc, #8]	@ (8006c34 <stdio_exit_handler+0xc>)
 8006c2a:	4903      	ldr	r1, [pc, #12]	@ (8006c38 <stdio_exit_handler+0x10>)
 8006c2c:	4803      	ldr	r0, [pc, #12]	@ (8006c3c <stdio_exit_handler+0x14>)
 8006c2e:	f000 b869 	b.w	8006d04 <_fwalk_sglue>
 8006c32:	bf00      	nop
 8006c34:	20000038 	.word	0x20000038
 8006c38:	08008ce9 	.word	0x08008ce9
 8006c3c:	20000048 	.word	0x20000048

08006c40 <cleanup_stdio>:
 8006c40:	6841      	ldr	r1, [r0, #4]
 8006c42:	4b0c      	ldr	r3, [pc, #48]	@ (8006c74 <cleanup_stdio+0x34>)
 8006c44:	4299      	cmp	r1, r3
 8006c46:	b510      	push	{r4, lr}
 8006c48:	4604      	mov	r4, r0
 8006c4a:	d001      	beq.n	8006c50 <cleanup_stdio+0x10>
 8006c4c:	f002 f84c 	bl	8008ce8 <_fflush_r>
 8006c50:	68a1      	ldr	r1, [r4, #8]
 8006c52:	4b09      	ldr	r3, [pc, #36]	@ (8006c78 <cleanup_stdio+0x38>)
 8006c54:	4299      	cmp	r1, r3
 8006c56:	d002      	beq.n	8006c5e <cleanup_stdio+0x1e>
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f002 f845 	bl	8008ce8 <_fflush_r>
 8006c5e:	68e1      	ldr	r1, [r4, #12]
 8006c60:	4b06      	ldr	r3, [pc, #24]	@ (8006c7c <cleanup_stdio+0x3c>)
 8006c62:	4299      	cmp	r1, r3
 8006c64:	d004      	beq.n	8006c70 <cleanup_stdio+0x30>
 8006c66:	4620      	mov	r0, r4
 8006c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c6c:	f002 b83c 	b.w	8008ce8 <_fflush_r>
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	bf00      	nop
 8006c74:	20000364 	.word	0x20000364
 8006c78:	200003cc 	.word	0x200003cc
 8006c7c:	20000434 	.word	0x20000434

08006c80 <global_stdio_init.part.0>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <global_stdio_init.part.0+0x30>)
 8006c84:	4c0b      	ldr	r4, [pc, #44]	@ (8006cb4 <global_stdio_init.part.0+0x34>)
 8006c86:	4a0c      	ldr	r2, [pc, #48]	@ (8006cb8 <global_stdio_init.part.0+0x38>)
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2104      	movs	r1, #4
 8006c90:	f7ff ff94 	bl	8006bbc <std>
 8006c94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c98:	2201      	movs	r2, #1
 8006c9a:	2109      	movs	r1, #9
 8006c9c:	f7ff ff8e 	bl	8006bbc <std>
 8006ca0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006caa:	2112      	movs	r1, #18
 8006cac:	f7ff bf86 	b.w	8006bbc <std>
 8006cb0:	2000049c 	.word	0x2000049c
 8006cb4:	20000364 	.word	0x20000364
 8006cb8:	08006c29 	.word	0x08006c29

08006cbc <__sfp_lock_acquire>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	@ (8006cc4 <__sfp_lock_acquire+0x8>)
 8006cbe:	f000 ba24 	b.w	800710a <__retarget_lock_acquire_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	200004a5 	.word	0x200004a5

08006cc8 <__sfp_lock_release>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	@ (8006cd0 <__sfp_lock_release+0x8>)
 8006cca:	f000 ba1f 	b.w	800710c <__retarget_lock_release_recursive>
 8006cce:	bf00      	nop
 8006cd0:	200004a5 	.word	0x200004a5

08006cd4 <__sinit>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	f7ff fff0 	bl	8006cbc <__sfp_lock_acquire>
 8006cdc:	6a23      	ldr	r3, [r4, #32]
 8006cde:	b11b      	cbz	r3, 8006ce8 <__sinit+0x14>
 8006ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce4:	f7ff bff0 	b.w	8006cc8 <__sfp_lock_release>
 8006ce8:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <__sinit+0x28>)
 8006cea:	6223      	str	r3, [r4, #32]
 8006cec:	4b04      	ldr	r3, [pc, #16]	@ (8006d00 <__sinit+0x2c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f5      	bne.n	8006ce0 <__sinit+0xc>
 8006cf4:	f7ff ffc4 	bl	8006c80 <global_stdio_init.part.0>
 8006cf8:	e7f2      	b.n	8006ce0 <__sinit+0xc>
 8006cfa:	bf00      	nop
 8006cfc:	08006c41 	.word	0x08006c41
 8006d00:	2000049c 	.word	0x2000049c

08006d04 <_fwalk_sglue>:
 8006d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d08:	4607      	mov	r7, r0
 8006d0a:	4688      	mov	r8, r1
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	2600      	movs	r6, #0
 8006d10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d14:	f1b9 0901 	subs.w	r9, r9, #1
 8006d18:	d505      	bpl.n	8006d26 <_fwalk_sglue+0x22>
 8006d1a:	6824      	ldr	r4, [r4, #0]
 8006d1c:	2c00      	cmp	r4, #0
 8006d1e:	d1f7      	bne.n	8006d10 <_fwalk_sglue+0xc>
 8006d20:	4630      	mov	r0, r6
 8006d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d907      	bls.n	8006d3c <_fwalk_sglue+0x38>
 8006d2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d30:	3301      	adds	r3, #1
 8006d32:	d003      	beq.n	8006d3c <_fwalk_sglue+0x38>
 8006d34:	4629      	mov	r1, r5
 8006d36:	4638      	mov	r0, r7
 8006d38:	47c0      	blx	r8
 8006d3a:	4306      	orrs	r6, r0
 8006d3c:	3568      	adds	r5, #104	@ 0x68
 8006d3e:	e7e9      	b.n	8006d14 <_fwalk_sglue+0x10>

08006d40 <iprintf>:
 8006d40:	b40f      	push	{r0, r1, r2, r3}
 8006d42:	b507      	push	{r0, r1, r2, lr}
 8006d44:	4906      	ldr	r1, [pc, #24]	@ (8006d60 <iprintf+0x20>)
 8006d46:	ab04      	add	r3, sp, #16
 8006d48:	6808      	ldr	r0, [r1, #0]
 8006d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4e:	6881      	ldr	r1, [r0, #8]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	f001 fe2d 	bl	80089b0 <_vfiprintf_r>
 8006d56:	b003      	add	sp, #12
 8006d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d5c:	b004      	add	sp, #16
 8006d5e:	4770      	bx	lr
 8006d60:	20000044 	.word	0x20000044

08006d64 <_puts_r>:
 8006d64:	6a03      	ldr	r3, [r0, #32]
 8006d66:	b570      	push	{r4, r5, r6, lr}
 8006d68:	6884      	ldr	r4, [r0, #8]
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	460e      	mov	r6, r1
 8006d6e:	b90b      	cbnz	r3, 8006d74 <_puts_r+0x10>
 8006d70:	f7ff ffb0 	bl	8006cd4 <__sinit>
 8006d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d76:	07db      	lsls	r3, r3, #31
 8006d78:	d405      	bmi.n	8006d86 <_puts_r+0x22>
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	0598      	lsls	r0, r3, #22
 8006d7e:	d402      	bmi.n	8006d86 <_puts_r+0x22>
 8006d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d82:	f000 f9c2 	bl	800710a <__retarget_lock_acquire_recursive>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	0719      	lsls	r1, r3, #28
 8006d8a:	d502      	bpl.n	8006d92 <_puts_r+0x2e>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d135      	bne.n	8006dfe <_puts_r+0x9a>
 8006d92:	4621      	mov	r1, r4
 8006d94:	4628      	mov	r0, r5
 8006d96:	f000 f8e5 	bl	8006f64 <__swsetup_r>
 8006d9a:	b380      	cbz	r0, 8006dfe <_puts_r+0x9a>
 8006d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8006da0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006da2:	07da      	lsls	r2, r3, #31
 8006da4:	d405      	bmi.n	8006db2 <_puts_r+0x4e>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	059b      	lsls	r3, r3, #22
 8006daa:	d402      	bmi.n	8006db2 <_puts_r+0x4e>
 8006dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dae:	f000 f9ad 	bl	800710c <__retarget_lock_release_recursive>
 8006db2:	4628      	mov	r0, r5
 8006db4:	bd70      	pop	{r4, r5, r6, pc}
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da04      	bge.n	8006dc4 <_puts_r+0x60>
 8006dba:	69a2      	ldr	r2, [r4, #24]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	dc17      	bgt.n	8006df0 <_puts_r+0x8c>
 8006dc0:	290a      	cmp	r1, #10
 8006dc2:	d015      	beq.n	8006df0 <_puts_r+0x8c>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	6022      	str	r2, [r4, #0]
 8006dca:	7019      	strb	r1, [r3, #0]
 8006dcc:	68a3      	ldr	r3, [r4, #8]
 8006dce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	60a3      	str	r3, [r4, #8]
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d1ed      	bne.n	8006db6 <_puts_r+0x52>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da11      	bge.n	8006e02 <_puts_r+0x9e>
 8006dde:	4622      	mov	r2, r4
 8006de0:	210a      	movs	r1, #10
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 f87f 	bl	8006ee6 <__swbuf_r>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d0d7      	beq.n	8006d9c <_puts_r+0x38>
 8006dec:	250a      	movs	r5, #10
 8006dee:	e7d7      	b.n	8006da0 <_puts_r+0x3c>
 8006df0:	4622      	mov	r2, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f877 	bl	8006ee6 <__swbuf_r>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d1e7      	bne.n	8006dcc <_puts_r+0x68>
 8006dfc:	e7ce      	b.n	8006d9c <_puts_r+0x38>
 8006dfe:	3e01      	subs	r6, #1
 8006e00:	e7e4      	b.n	8006dcc <_puts_r+0x68>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	6022      	str	r2, [r4, #0]
 8006e08:	220a      	movs	r2, #10
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e7ee      	b.n	8006dec <_puts_r+0x88>
	...

08006e10 <puts>:
 8006e10:	4b02      	ldr	r3, [pc, #8]	@ (8006e1c <puts+0xc>)
 8006e12:	4601      	mov	r1, r0
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	f7ff bfa5 	b.w	8006d64 <_puts_r>
 8006e1a:	bf00      	nop
 8006e1c:	20000044 	.word	0x20000044

08006e20 <siprintf>:
 8006e20:	b40e      	push	{r1, r2, r3}
 8006e22:	b500      	push	{lr}
 8006e24:	b09c      	sub	sp, #112	@ 0x70
 8006e26:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e28:	9002      	str	r0, [sp, #8]
 8006e2a:	9006      	str	r0, [sp, #24]
 8006e2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e30:	4809      	ldr	r0, [pc, #36]	@ (8006e58 <siprintf+0x38>)
 8006e32:	9107      	str	r1, [sp, #28]
 8006e34:	9104      	str	r1, [sp, #16]
 8006e36:	4909      	ldr	r1, [pc, #36]	@ (8006e5c <siprintf+0x3c>)
 8006e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e3c:	9105      	str	r1, [sp, #20]
 8006e3e:	6800      	ldr	r0, [r0, #0]
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	a902      	add	r1, sp, #8
 8006e44:	f001 fc8e 	bl	8008764 <_svfiprintf_r>
 8006e48:	9b02      	ldr	r3, [sp, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	b01c      	add	sp, #112	@ 0x70
 8006e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e54:	b003      	add	sp, #12
 8006e56:	4770      	bx	lr
 8006e58:	20000044 	.word	0x20000044
 8006e5c:	ffff0208 	.word	0xffff0208

08006e60 <__sread>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	460c      	mov	r4, r1
 8006e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e68:	f000 f900 	bl	800706c <_read_r>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	bfab      	itete	ge
 8006e70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e72:	89a3      	ldrhlt	r3, [r4, #12]
 8006e74:	181b      	addge	r3, r3, r0
 8006e76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e7a:	bfac      	ite	ge
 8006e7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e7e:	81a3      	strhlt	r3, [r4, #12]
 8006e80:	bd10      	pop	{r4, pc}

08006e82 <__swrite>:
 8006e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e86:	461f      	mov	r7, r3
 8006e88:	898b      	ldrh	r3, [r1, #12]
 8006e8a:	05db      	lsls	r3, r3, #23
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	4616      	mov	r6, r2
 8006e92:	d505      	bpl.n	8006ea0 <__swrite+0x1e>
 8006e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e98:	2302      	movs	r3, #2
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f000 f8d4 	bl	8007048 <_lseek_r>
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eaa:	81a3      	strh	r3, [r4, #12]
 8006eac:	4632      	mov	r2, r6
 8006eae:	463b      	mov	r3, r7
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb6:	f000 b8eb 	b.w	8007090 <_write_r>

08006eba <__sseek>:
 8006eba:	b510      	push	{r4, lr}
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec2:	f000 f8c1 	bl	8007048 <_lseek_r>
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	bf15      	itete	ne
 8006ecc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ece:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ed2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ed6:	81a3      	strheq	r3, [r4, #12]
 8006ed8:	bf18      	it	ne
 8006eda:	81a3      	strhne	r3, [r4, #12]
 8006edc:	bd10      	pop	{r4, pc}

08006ede <__sclose>:
 8006ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee2:	f000 b8a1 	b.w	8007028 <_close_r>

08006ee6 <__swbuf_r>:
 8006ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee8:	460e      	mov	r6, r1
 8006eea:	4614      	mov	r4, r2
 8006eec:	4605      	mov	r5, r0
 8006eee:	b118      	cbz	r0, 8006ef8 <__swbuf_r+0x12>
 8006ef0:	6a03      	ldr	r3, [r0, #32]
 8006ef2:	b90b      	cbnz	r3, 8006ef8 <__swbuf_r+0x12>
 8006ef4:	f7ff feee 	bl	8006cd4 <__sinit>
 8006ef8:	69a3      	ldr	r3, [r4, #24]
 8006efa:	60a3      	str	r3, [r4, #8]
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	071a      	lsls	r2, r3, #28
 8006f00:	d501      	bpl.n	8006f06 <__swbuf_r+0x20>
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	b943      	cbnz	r3, 8006f18 <__swbuf_r+0x32>
 8006f06:	4621      	mov	r1, r4
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f000 f82b 	bl	8006f64 <__swsetup_r>
 8006f0e:	b118      	cbz	r0, 8006f18 <__swbuf_r+0x32>
 8006f10:	f04f 37ff 	mov.w	r7, #4294967295
 8006f14:	4638      	mov	r0, r7
 8006f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	6922      	ldr	r2, [r4, #16]
 8006f1c:	1a98      	subs	r0, r3, r2
 8006f1e:	6963      	ldr	r3, [r4, #20]
 8006f20:	b2f6      	uxtb	r6, r6
 8006f22:	4283      	cmp	r3, r0
 8006f24:	4637      	mov	r7, r6
 8006f26:	dc05      	bgt.n	8006f34 <__swbuf_r+0x4e>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f001 fedc 	bl	8008ce8 <_fflush_r>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d1ed      	bne.n	8006f10 <__swbuf_r+0x2a>
 8006f34:	68a3      	ldr	r3, [r4, #8]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	60a3      	str	r3, [r4, #8]
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	701e      	strb	r6, [r3, #0]
 8006f42:	6962      	ldr	r2, [r4, #20]
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d004      	beq.n	8006f54 <__swbuf_r+0x6e>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	07db      	lsls	r3, r3, #31
 8006f4e:	d5e1      	bpl.n	8006f14 <__swbuf_r+0x2e>
 8006f50:	2e0a      	cmp	r6, #10
 8006f52:	d1df      	bne.n	8006f14 <__swbuf_r+0x2e>
 8006f54:	4621      	mov	r1, r4
 8006f56:	4628      	mov	r0, r5
 8006f58:	f001 fec6 	bl	8008ce8 <_fflush_r>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d0d9      	beq.n	8006f14 <__swbuf_r+0x2e>
 8006f60:	e7d6      	b.n	8006f10 <__swbuf_r+0x2a>
	...

08006f64 <__swsetup_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4b29      	ldr	r3, [pc, #164]	@ (800700c <__swsetup_r+0xa8>)
 8006f68:	4605      	mov	r5, r0
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	b118      	cbz	r0, 8006f78 <__swsetup_r+0x14>
 8006f70:	6a03      	ldr	r3, [r0, #32]
 8006f72:	b90b      	cbnz	r3, 8006f78 <__swsetup_r+0x14>
 8006f74:	f7ff feae 	bl	8006cd4 <__sinit>
 8006f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f7c:	0719      	lsls	r1, r3, #28
 8006f7e:	d422      	bmi.n	8006fc6 <__swsetup_r+0x62>
 8006f80:	06da      	lsls	r2, r3, #27
 8006f82:	d407      	bmi.n	8006f94 <__swsetup_r+0x30>
 8006f84:	2209      	movs	r2, #9
 8006f86:	602a      	str	r2, [r5, #0]
 8006f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f92:	e033      	b.n	8006ffc <__swsetup_r+0x98>
 8006f94:	0758      	lsls	r0, r3, #29
 8006f96:	d512      	bpl.n	8006fbe <__swsetup_r+0x5a>
 8006f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f9a:	b141      	cbz	r1, 8006fae <__swsetup_r+0x4a>
 8006f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fa0:	4299      	cmp	r1, r3
 8006fa2:	d002      	beq.n	8006faa <__swsetup_r+0x46>
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 feff 	bl	8007da8 <_free_r>
 8006faa:	2300      	movs	r3, #0
 8006fac:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f043 0308 	orr.w	r3, r3, #8
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	b94b      	cbnz	r3, 8006fde <__swsetup_r+0x7a>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd4:	d003      	beq.n	8006fde <__swsetup_r+0x7a>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f001 fed3 	bl	8008d84 <__smakebuf_r>
 8006fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe2:	f013 0201 	ands.w	r2, r3, #1
 8006fe6:	d00a      	beq.n	8006ffe <__swsetup_r+0x9a>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	60a2      	str	r2, [r4, #8]
 8006fec:	6962      	ldr	r2, [r4, #20]
 8006fee:	4252      	negs	r2, r2
 8006ff0:	61a2      	str	r2, [r4, #24]
 8006ff2:	6922      	ldr	r2, [r4, #16]
 8006ff4:	b942      	cbnz	r2, 8007008 <__swsetup_r+0xa4>
 8006ff6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ffa:	d1c5      	bne.n	8006f88 <__swsetup_r+0x24>
 8006ffc:	bd38      	pop	{r3, r4, r5, pc}
 8006ffe:	0799      	lsls	r1, r3, #30
 8007000:	bf58      	it	pl
 8007002:	6962      	ldrpl	r2, [r4, #20]
 8007004:	60a2      	str	r2, [r4, #8]
 8007006:	e7f4      	b.n	8006ff2 <__swsetup_r+0x8e>
 8007008:	2000      	movs	r0, #0
 800700a:	e7f7      	b.n	8006ffc <__swsetup_r+0x98>
 800700c:	20000044 	.word	0x20000044

08007010 <memset>:
 8007010:	4402      	add	r2, r0
 8007012:	4603      	mov	r3, r0
 8007014:	4293      	cmp	r3, r2
 8007016:	d100      	bne.n	800701a <memset+0xa>
 8007018:	4770      	bx	lr
 800701a:	f803 1b01 	strb.w	r1, [r3], #1
 800701e:	e7f9      	b.n	8007014 <memset+0x4>

08007020 <_localeconv_r>:
 8007020:	4800      	ldr	r0, [pc, #0]	@ (8007024 <_localeconv_r+0x4>)
 8007022:	4770      	bx	lr
 8007024:	20000184 	.word	0x20000184

08007028 <_close_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d06      	ldr	r5, [pc, #24]	@ (8007044 <_close_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f7fa fb44 	bl	80016c0 <_close>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_close_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_close_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	200004a0 	.word	0x200004a0

08007048 <_lseek_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d07      	ldr	r5, [pc, #28]	@ (8007068 <_lseek_r+0x20>)
 800704c:	4604      	mov	r4, r0
 800704e:	4608      	mov	r0, r1
 8007050:	4611      	mov	r1, r2
 8007052:	2200      	movs	r2, #0
 8007054:	602a      	str	r2, [r5, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f7fa fb59 	bl	800170e <_lseek>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_lseek_r+0x1e>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_lseek_r+0x1e>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	200004a0 	.word	0x200004a0

0800706c <_read_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d07      	ldr	r5, [pc, #28]	@ (800708c <_read_r+0x20>)
 8007070:	4604      	mov	r4, r0
 8007072:	4608      	mov	r0, r1
 8007074:	4611      	mov	r1, r2
 8007076:	2200      	movs	r2, #0
 8007078:	602a      	str	r2, [r5, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	f7fa faec 	bl	8001658 <_read>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_read_r+0x1e>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_read_r+0x1e>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	200004a0 	.word	0x200004a0

08007090 <_write_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d07      	ldr	r5, [pc, #28]	@ (80070b0 <_write_r+0x20>)
 8007094:	4604      	mov	r4, r0
 8007096:	4608      	mov	r0, r1
 8007098:	4611      	mov	r1, r2
 800709a:	2200      	movs	r2, #0
 800709c:	602a      	str	r2, [r5, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	f7fa faf8 	bl	8001694 <_write>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_write_r+0x1e>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_write_r+0x1e>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	200004a0 	.word	0x200004a0

080070b4 <__errno>:
 80070b4:	4b01      	ldr	r3, [pc, #4]	@ (80070bc <__errno+0x8>)
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000044 	.word	0x20000044

080070c0 <__libc_init_array>:
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	4d0d      	ldr	r5, [pc, #52]	@ (80070f8 <__libc_init_array+0x38>)
 80070c4:	4c0d      	ldr	r4, [pc, #52]	@ (80070fc <__libc_init_array+0x3c>)
 80070c6:	1b64      	subs	r4, r4, r5
 80070c8:	10a4      	asrs	r4, r4, #2
 80070ca:	2600      	movs	r6, #0
 80070cc:	42a6      	cmp	r6, r4
 80070ce:	d109      	bne.n	80070e4 <__libc_init_array+0x24>
 80070d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007100 <__libc_init_array+0x40>)
 80070d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007104 <__libc_init_array+0x44>)
 80070d4:	f001 ffd2 	bl	800907c <_init>
 80070d8:	1b64      	subs	r4, r4, r5
 80070da:	10a4      	asrs	r4, r4, #2
 80070dc:	2600      	movs	r6, #0
 80070de:	42a6      	cmp	r6, r4
 80070e0:	d105      	bne.n	80070ee <__libc_init_array+0x2e>
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e8:	4798      	blx	r3
 80070ea:	3601      	adds	r6, #1
 80070ec:	e7ee      	b.n	80070cc <__libc_init_array+0xc>
 80070ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f2:	4798      	blx	r3
 80070f4:	3601      	adds	r6, #1
 80070f6:	e7f2      	b.n	80070de <__libc_init_array+0x1e>
 80070f8:	08009598 	.word	0x08009598
 80070fc:	08009598 	.word	0x08009598
 8007100:	08009598 	.word	0x08009598
 8007104:	0800959c 	.word	0x0800959c

08007108 <__retarget_lock_init_recursive>:
 8007108:	4770      	bx	lr

0800710a <__retarget_lock_acquire_recursive>:
 800710a:	4770      	bx	lr

0800710c <__retarget_lock_release_recursive>:
 800710c:	4770      	bx	lr

0800710e <quorem>:
 800710e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007112:	6903      	ldr	r3, [r0, #16]
 8007114:	690c      	ldr	r4, [r1, #16]
 8007116:	42a3      	cmp	r3, r4
 8007118:	4607      	mov	r7, r0
 800711a:	db7e      	blt.n	800721a <quorem+0x10c>
 800711c:	3c01      	subs	r4, #1
 800711e:	f101 0814 	add.w	r8, r1, #20
 8007122:	00a3      	lsls	r3, r4, #2
 8007124:	f100 0514 	add.w	r5, r0, #20
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007138:	3301      	adds	r3, #1
 800713a:	429a      	cmp	r2, r3
 800713c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007140:	fbb2 f6f3 	udiv	r6, r2, r3
 8007144:	d32e      	bcc.n	80071a4 <quorem+0x96>
 8007146:	f04f 0a00 	mov.w	sl, #0
 800714a:	46c4      	mov	ip, r8
 800714c:	46ae      	mov	lr, r5
 800714e:	46d3      	mov	fp, sl
 8007150:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007154:	b298      	uxth	r0, r3
 8007156:	fb06 a000 	mla	r0, r6, r0, sl
 800715a:	0c02      	lsrs	r2, r0, #16
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	fb06 2303 	mla	r3, r6, r3, r2
 8007162:	f8de 2000 	ldr.w	r2, [lr]
 8007166:	b280      	uxth	r0, r0
 8007168:	b292      	uxth	r2, r2
 800716a:	1a12      	subs	r2, r2, r0
 800716c:	445a      	add	r2, fp
 800716e:	f8de 0000 	ldr.w	r0, [lr]
 8007172:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007176:	b29b      	uxth	r3, r3
 8007178:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800717c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007180:	b292      	uxth	r2, r2
 8007182:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007186:	45e1      	cmp	r9, ip
 8007188:	f84e 2b04 	str.w	r2, [lr], #4
 800718c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007190:	d2de      	bcs.n	8007150 <quorem+0x42>
 8007192:	9b00      	ldr	r3, [sp, #0]
 8007194:	58eb      	ldr	r3, [r5, r3]
 8007196:	b92b      	cbnz	r3, 80071a4 <quorem+0x96>
 8007198:	9b01      	ldr	r3, [sp, #4]
 800719a:	3b04      	subs	r3, #4
 800719c:	429d      	cmp	r5, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	d32f      	bcc.n	8007202 <quorem+0xf4>
 80071a2:	613c      	str	r4, [r7, #16]
 80071a4:	4638      	mov	r0, r7
 80071a6:	f001 f979 	bl	800849c <__mcmp>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	db25      	blt.n	80071fa <quorem+0xec>
 80071ae:	4629      	mov	r1, r5
 80071b0:	2000      	movs	r0, #0
 80071b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80071b6:	f8d1 c000 	ldr.w	ip, [r1]
 80071ba:	fa1f fe82 	uxth.w	lr, r2
 80071be:	fa1f f38c 	uxth.w	r3, ip
 80071c2:	eba3 030e 	sub.w	r3, r3, lr
 80071c6:	4403      	add	r3, r0
 80071c8:	0c12      	lsrs	r2, r2, #16
 80071ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071d8:	45c1      	cmp	r9, r8
 80071da:	f841 3b04 	str.w	r3, [r1], #4
 80071de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071e2:	d2e6      	bcs.n	80071b2 <quorem+0xa4>
 80071e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071ec:	b922      	cbnz	r2, 80071f8 <quorem+0xea>
 80071ee:	3b04      	subs	r3, #4
 80071f0:	429d      	cmp	r5, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	d30b      	bcc.n	800720e <quorem+0x100>
 80071f6:	613c      	str	r4, [r7, #16]
 80071f8:	3601      	adds	r6, #1
 80071fa:	4630      	mov	r0, r6
 80071fc:	b003      	add	sp, #12
 80071fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	3b04      	subs	r3, #4
 8007206:	2a00      	cmp	r2, #0
 8007208:	d1cb      	bne.n	80071a2 <quorem+0x94>
 800720a:	3c01      	subs	r4, #1
 800720c:	e7c6      	b.n	800719c <quorem+0x8e>
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	3b04      	subs	r3, #4
 8007212:	2a00      	cmp	r2, #0
 8007214:	d1ef      	bne.n	80071f6 <quorem+0xe8>
 8007216:	3c01      	subs	r4, #1
 8007218:	e7ea      	b.n	80071f0 <quorem+0xe2>
 800721a:	2000      	movs	r0, #0
 800721c:	e7ee      	b.n	80071fc <quorem+0xee>
	...

08007220 <_dtoa_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	69c7      	ldr	r7, [r0, #28]
 8007226:	b099      	sub	sp, #100	@ 0x64
 8007228:	ed8d 0b02 	vstr	d0, [sp, #8]
 800722c:	ec55 4b10 	vmov	r4, r5, d0
 8007230:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007232:	9109      	str	r1, [sp, #36]	@ 0x24
 8007234:	4683      	mov	fp, r0
 8007236:	920e      	str	r2, [sp, #56]	@ 0x38
 8007238:	9313      	str	r3, [sp, #76]	@ 0x4c
 800723a:	b97f      	cbnz	r7, 800725c <_dtoa_r+0x3c>
 800723c:	2010      	movs	r0, #16
 800723e:	f000 fdfd 	bl	8007e3c <malloc>
 8007242:	4602      	mov	r2, r0
 8007244:	f8cb 001c 	str.w	r0, [fp, #28]
 8007248:	b920      	cbnz	r0, 8007254 <_dtoa_r+0x34>
 800724a:	4ba7      	ldr	r3, [pc, #668]	@ (80074e8 <_dtoa_r+0x2c8>)
 800724c:	21ef      	movs	r1, #239	@ 0xef
 800724e:	48a7      	ldr	r0, [pc, #668]	@ (80074ec <_dtoa_r+0x2cc>)
 8007250:	f001 fe2e 	bl	8008eb0 <__assert_func>
 8007254:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007258:	6007      	str	r7, [r0, #0]
 800725a:	60c7      	str	r7, [r0, #12]
 800725c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007260:	6819      	ldr	r1, [r3, #0]
 8007262:	b159      	cbz	r1, 800727c <_dtoa_r+0x5c>
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	604a      	str	r2, [r1, #4]
 8007268:	2301      	movs	r3, #1
 800726a:	4093      	lsls	r3, r2
 800726c:	608b      	str	r3, [r1, #8]
 800726e:	4658      	mov	r0, fp
 8007270:	f000 feda 	bl	8008028 <_Bfree>
 8007274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	1e2b      	subs	r3, r5, #0
 800727e:	bfb9      	ittee	lt
 8007280:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007284:	9303      	strlt	r3, [sp, #12]
 8007286:	2300      	movge	r3, #0
 8007288:	6033      	strge	r3, [r6, #0]
 800728a:	9f03      	ldr	r7, [sp, #12]
 800728c:	4b98      	ldr	r3, [pc, #608]	@ (80074f0 <_dtoa_r+0x2d0>)
 800728e:	bfbc      	itt	lt
 8007290:	2201      	movlt	r2, #1
 8007292:	6032      	strlt	r2, [r6, #0]
 8007294:	43bb      	bics	r3, r7
 8007296:	d112      	bne.n	80072be <_dtoa_r+0x9e>
 8007298:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800729a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072a4:	4323      	orrs	r3, r4
 80072a6:	f000 854d 	beq.w	8007d44 <_dtoa_r+0xb24>
 80072aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007504 <_dtoa_r+0x2e4>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 854f 	beq.w	8007d54 <_dtoa_r+0xb34>
 80072b6:	f10a 0303 	add.w	r3, sl, #3
 80072ba:	f000 bd49 	b.w	8007d50 <_dtoa_r+0xb30>
 80072be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	ec51 0b17 	vmov	r0, r1, d7
 80072c8:	2300      	movs	r3, #0
 80072ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072ce:	f7f9 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80072d2:	4680      	mov	r8, r0
 80072d4:	b158      	cbz	r0, 80072ee <_dtoa_r+0xce>
 80072d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072d8:	2301      	movs	r3, #1
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072de:	b113      	cbz	r3, 80072e6 <_dtoa_r+0xc6>
 80072e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072e2:	4b84      	ldr	r3, [pc, #528]	@ (80074f4 <_dtoa_r+0x2d4>)
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007508 <_dtoa_r+0x2e8>
 80072ea:	f000 bd33 	b.w	8007d54 <_dtoa_r+0xb34>
 80072ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072f2:	aa16      	add	r2, sp, #88	@ 0x58
 80072f4:	a917      	add	r1, sp, #92	@ 0x5c
 80072f6:	4658      	mov	r0, fp
 80072f8:	f001 f980 	bl	80085fc <__d2b>
 80072fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007300:	4681      	mov	r9, r0
 8007302:	2e00      	cmp	r6, #0
 8007304:	d077      	beq.n	80073f6 <_dtoa_r+0x1d6>
 8007306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007308:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800730c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007314:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007318:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800731c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007320:	4619      	mov	r1, r3
 8007322:	2200      	movs	r2, #0
 8007324:	4b74      	ldr	r3, [pc, #464]	@ (80074f8 <_dtoa_r+0x2d8>)
 8007326:	f7f8 ffaf 	bl	8000288 <__aeabi_dsub>
 800732a:	a369      	add	r3, pc, #420	@ (adr r3, 80074d0 <_dtoa_r+0x2b0>)
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f7f9 f962 	bl	80005f8 <__aeabi_dmul>
 8007334:	a368      	add	r3, pc, #416	@ (adr r3, 80074d8 <_dtoa_r+0x2b8>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f7f8 ffa7 	bl	800028c <__adddf3>
 800733e:	4604      	mov	r4, r0
 8007340:	4630      	mov	r0, r6
 8007342:	460d      	mov	r5, r1
 8007344:	f7f9 f8ee 	bl	8000524 <__aeabi_i2d>
 8007348:	a365      	add	r3, pc, #404	@ (adr r3, 80074e0 <_dtoa_r+0x2c0>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f7f9 f953 	bl	80005f8 <__aeabi_dmul>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	f7f8 ff97 	bl	800028c <__adddf3>
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	f7f9 fbf9 	bl	8000b58 <__aeabi_d2iz>
 8007366:	2200      	movs	r2, #0
 8007368:	4607      	mov	r7, r0
 800736a:	2300      	movs	r3, #0
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f9 fbb4 	bl	8000adc <__aeabi_dcmplt>
 8007374:	b140      	cbz	r0, 8007388 <_dtoa_r+0x168>
 8007376:	4638      	mov	r0, r7
 8007378:	f7f9 f8d4 	bl	8000524 <__aeabi_i2d>
 800737c:	4622      	mov	r2, r4
 800737e:	462b      	mov	r3, r5
 8007380:	f7f9 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007384:	b900      	cbnz	r0, 8007388 <_dtoa_r+0x168>
 8007386:	3f01      	subs	r7, #1
 8007388:	2f16      	cmp	r7, #22
 800738a:	d851      	bhi.n	8007430 <_dtoa_r+0x210>
 800738c:	4b5b      	ldr	r3, [pc, #364]	@ (80074fc <_dtoa_r+0x2dc>)
 800738e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800739a:	f7f9 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d048      	beq.n	8007434 <_dtoa_r+0x214>
 80073a2:	3f01      	subs	r7, #1
 80073a4:	2300      	movs	r3, #0
 80073a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80073a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073aa:	1b9b      	subs	r3, r3, r6
 80073ac:	1e5a      	subs	r2, r3, #1
 80073ae:	bf44      	itt	mi
 80073b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80073b4:	2300      	movmi	r3, #0
 80073b6:	9208      	str	r2, [sp, #32]
 80073b8:	bf54      	ite	pl
 80073ba:	f04f 0800 	movpl.w	r8, #0
 80073be:	9308      	strmi	r3, [sp, #32]
 80073c0:	2f00      	cmp	r7, #0
 80073c2:	db39      	blt.n	8007438 <_dtoa_r+0x218>
 80073c4:	9b08      	ldr	r3, [sp, #32]
 80073c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073c8:	443b      	add	r3, r7
 80073ca:	9308      	str	r3, [sp, #32]
 80073cc:	2300      	movs	r3, #0
 80073ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80073d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	d864      	bhi.n	80074a0 <_dtoa_r+0x280>
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	bfc4      	itt	gt
 80073da:	3b04      	subgt	r3, #4
 80073dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e0:	f1a3 0302 	sub.w	r3, r3, #2
 80073e4:	bfcc      	ite	gt
 80073e6:	2400      	movgt	r4, #0
 80073e8:	2401      	movle	r4, #1
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d863      	bhi.n	80074b6 <_dtoa_r+0x296>
 80073ee:	e8df f003 	tbb	[pc, r3]
 80073f2:	372a      	.short	0x372a
 80073f4:	5535      	.short	0x5535
 80073f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073fa:	441e      	add	r6, r3
 80073fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007400:	2b20      	cmp	r3, #32
 8007402:	bfc1      	itttt	gt
 8007404:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007408:	409f      	lslgt	r7, r3
 800740a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800740e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007412:	bfd6      	itet	le
 8007414:	f1c3 0320 	rsble	r3, r3, #32
 8007418:	ea47 0003 	orrgt.w	r0, r7, r3
 800741c:	fa04 f003 	lslle.w	r0, r4, r3
 8007420:	f7f9 f870 	bl	8000504 <__aeabi_ui2d>
 8007424:	2201      	movs	r2, #1
 8007426:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800742a:	3e01      	subs	r6, #1
 800742c:	9214      	str	r2, [sp, #80]	@ 0x50
 800742e:	e777      	b.n	8007320 <_dtoa_r+0x100>
 8007430:	2301      	movs	r3, #1
 8007432:	e7b8      	b.n	80073a6 <_dtoa_r+0x186>
 8007434:	9012      	str	r0, [sp, #72]	@ 0x48
 8007436:	e7b7      	b.n	80073a8 <_dtoa_r+0x188>
 8007438:	427b      	negs	r3, r7
 800743a:	930a      	str	r3, [sp, #40]	@ 0x28
 800743c:	2300      	movs	r3, #0
 800743e:	eba8 0807 	sub.w	r8, r8, r7
 8007442:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007444:	e7c4      	b.n	80073d0 <_dtoa_r+0x1b0>
 8007446:	2300      	movs	r3, #0
 8007448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800744a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800744c:	2b00      	cmp	r3, #0
 800744e:	dc35      	bgt.n	80074bc <_dtoa_r+0x29c>
 8007450:	2301      	movs	r3, #1
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	9307      	str	r3, [sp, #28]
 8007456:	461a      	mov	r2, r3
 8007458:	920e      	str	r2, [sp, #56]	@ 0x38
 800745a:	e00b      	b.n	8007474 <_dtoa_r+0x254>
 800745c:	2301      	movs	r3, #1
 800745e:	e7f3      	b.n	8007448 <_dtoa_r+0x228>
 8007460:	2300      	movs	r3, #0
 8007462:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007466:	18fb      	adds	r3, r7, r3
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	3301      	adds	r3, #1
 800746c:	2b01      	cmp	r3, #1
 800746e:	9307      	str	r3, [sp, #28]
 8007470:	bfb8      	it	lt
 8007472:	2301      	movlt	r3, #1
 8007474:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007478:	2100      	movs	r1, #0
 800747a:	2204      	movs	r2, #4
 800747c:	f102 0514 	add.w	r5, r2, #20
 8007480:	429d      	cmp	r5, r3
 8007482:	d91f      	bls.n	80074c4 <_dtoa_r+0x2a4>
 8007484:	6041      	str	r1, [r0, #4]
 8007486:	4658      	mov	r0, fp
 8007488:	f000 fd8e 	bl	8007fa8 <_Balloc>
 800748c:	4682      	mov	sl, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	d13c      	bne.n	800750c <_dtoa_r+0x2ec>
 8007492:	4b1b      	ldr	r3, [pc, #108]	@ (8007500 <_dtoa_r+0x2e0>)
 8007494:	4602      	mov	r2, r0
 8007496:	f240 11af 	movw	r1, #431	@ 0x1af
 800749a:	e6d8      	b.n	800724e <_dtoa_r+0x2e>
 800749c:	2301      	movs	r3, #1
 800749e:	e7e0      	b.n	8007462 <_dtoa_r+0x242>
 80074a0:	2401      	movs	r4, #1
 80074a2:	2300      	movs	r3, #0
 80074a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074a8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	9307      	str	r3, [sp, #28]
 80074b0:	2200      	movs	r2, #0
 80074b2:	2312      	movs	r3, #18
 80074b4:	e7d0      	b.n	8007458 <_dtoa_r+0x238>
 80074b6:	2301      	movs	r3, #1
 80074b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ba:	e7f5      	b.n	80074a8 <_dtoa_r+0x288>
 80074bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	9307      	str	r3, [sp, #28]
 80074c2:	e7d7      	b.n	8007474 <_dtoa_r+0x254>
 80074c4:	3101      	adds	r1, #1
 80074c6:	0052      	lsls	r2, r2, #1
 80074c8:	e7d8      	b.n	800747c <_dtoa_r+0x25c>
 80074ca:	bf00      	nop
 80074cc:	f3af 8000 	nop.w
 80074d0:	636f4361 	.word	0x636f4361
 80074d4:	3fd287a7 	.word	0x3fd287a7
 80074d8:	8b60c8b3 	.word	0x8b60c8b3
 80074dc:	3fc68a28 	.word	0x3fc68a28
 80074e0:	509f79fb 	.word	0x509f79fb
 80074e4:	3fd34413 	.word	0x3fd34413
 80074e8:	08009261 	.word	0x08009261
 80074ec:	08009278 	.word	0x08009278
 80074f0:	7ff00000 	.word	0x7ff00000
 80074f4:	08009231 	.word	0x08009231
 80074f8:	3ff80000 	.word	0x3ff80000
 80074fc:	08009370 	.word	0x08009370
 8007500:	080092d0 	.word	0x080092d0
 8007504:	0800925d 	.word	0x0800925d
 8007508:	08009230 	.word	0x08009230
 800750c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007510:	6018      	str	r0, [r3, #0]
 8007512:	9b07      	ldr	r3, [sp, #28]
 8007514:	2b0e      	cmp	r3, #14
 8007516:	f200 80a4 	bhi.w	8007662 <_dtoa_r+0x442>
 800751a:	2c00      	cmp	r4, #0
 800751c:	f000 80a1 	beq.w	8007662 <_dtoa_r+0x442>
 8007520:	2f00      	cmp	r7, #0
 8007522:	dd33      	ble.n	800758c <_dtoa_r+0x36c>
 8007524:	4bad      	ldr	r3, [pc, #692]	@ (80077dc <_dtoa_r+0x5bc>)
 8007526:	f007 020f 	and.w	r2, r7, #15
 800752a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800752e:	ed93 7b00 	vldr	d7, [r3]
 8007532:	05f8      	lsls	r0, r7, #23
 8007534:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007538:	ea4f 1427 	mov.w	r4, r7, asr #4
 800753c:	d516      	bpl.n	800756c <_dtoa_r+0x34c>
 800753e:	4ba8      	ldr	r3, [pc, #672]	@ (80077e0 <_dtoa_r+0x5c0>)
 8007540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007548:	f7f9 f980 	bl	800084c <__aeabi_ddiv>
 800754c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007550:	f004 040f 	and.w	r4, r4, #15
 8007554:	2603      	movs	r6, #3
 8007556:	4da2      	ldr	r5, [pc, #648]	@ (80077e0 <_dtoa_r+0x5c0>)
 8007558:	b954      	cbnz	r4, 8007570 <_dtoa_r+0x350>
 800755a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800755e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007562:	f7f9 f973 	bl	800084c <__aeabi_ddiv>
 8007566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800756a:	e028      	b.n	80075be <_dtoa_r+0x39e>
 800756c:	2602      	movs	r6, #2
 800756e:	e7f2      	b.n	8007556 <_dtoa_r+0x336>
 8007570:	07e1      	lsls	r1, r4, #31
 8007572:	d508      	bpl.n	8007586 <_dtoa_r+0x366>
 8007574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007578:	e9d5 2300 	ldrd	r2, r3, [r5]
 800757c:	f7f9 f83c 	bl	80005f8 <__aeabi_dmul>
 8007580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007584:	3601      	adds	r6, #1
 8007586:	1064      	asrs	r4, r4, #1
 8007588:	3508      	adds	r5, #8
 800758a:	e7e5      	b.n	8007558 <_dtoa_r+0x338>
 800758c:	f000 80d2 	beq.w	8007734 <_dtoa_r+0x514>
 8007590:	427c      	negs	r4, r7
 8007592:	4b92      	ldr	r3, [pc, #584]	@ (80077dc <_dtoa_r+0x5bc>)
 8007594:	4d92      	ldr	r5, [pc, #584]	@ (80077e0 <_dtoa_r+0x5c0>)
 8007596:	f004 020f 	and.w	r2, r4, #15
 800759a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075a6:	f7f9 f827 	bl	80005f8 <__aeabi_dmul>
 80075aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ae:	1124      	asrs	r4, r4, #4
 80075b0:	2300      	movs	r3, #0
 80075b2:	2602      	movs	r6, #2
 80075b4:	2c00      	cmp	r4, #0
 80075b6:	f040 80b2 	bne.w	800771e <_dtoa_r+0x4fe>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1d3      	bne.n	8007566 <_dtoa_r+0x346>
 80075be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80b7 	beq.w	8007738 <_dtoa_r+0x518>
 80075ca:	4b86      	ldr	r3, [pc, #536]	@ (80077e4 <_dtoa_r+0x5c4>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f9 fa83 	bl	8000adc <__aeabi_dcmplt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	f000 80ae 	beq.w	8007738 <_dtoa_r+0x518>
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 80aa 	beq.w	8007738 <_dtoa_r+0x518>
 80075e4:	9b00      	ldr	r3, [sp, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dd37      	ble.n	800765a <_dtoa_r+0x43a>
 80075ea:	1e7b      	subs	r3, r7, #1
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	4620      	mov	r0, r4
 80075f0:	4b7d      	ldr	r3, [pc, #500]	@ (80077e8 <_dtoa_r+0x5c8>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	4629      	mov	r1, r5
 80075f6:	f7f8 ffff 	bl	80005f8 <__aeabi_dmul>
 80075fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075fe:	9c00      	ldr	r4, [sp, #0]
 8007600:	3601      	adds	r6, #1
 8007602:	4630      	mov	r0, r6
 8007604:	f7f8 ff8e 	bl	8000524 <__aeabi_i2d>
 8007608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800760c:	f7f8 fff4 	bl	80005f8 <__aeabi_dmul>
 8007610:	4b76      	ldr	r3, [pc, #472]	@ (80077ec <_dtoa_r+0x5cc>)
 8007612:	2200      	movs	r2, #0
 8007614:	f7f8 fe3a 	bl	800028c <__adddf3>
 8007618:	4605      	mov	r5, r0
 800761a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800761e:	2c00      	cmp	r4, #0
 8007620:	f040 808d 	bne.w	800773e <_dtoa_r+0x51e>
 8007624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007628:	4b71      	ldr	r3, [pc, #452]	@ (80077f0 <_dtoa_r+0x5d0>)
 800762a:	2200      	movs	r2, #0
 800762c:	f7f8 fe2c 	bl	8000288 <__aeabi_dsub>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007638:	462a      	mov	r2, r5
 800763a:	4633      	mov	r3, r6
 800763c:	f7f9 fa6c 	bl	8000b18 <__aeabi_dcmpgt>
 8007640:	2800      	cmp	r0, #0
 8007642:	f040 828b 	bne.w	8007b5c <_dtoa_r+0x93c>
 8007646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800764a:	462a      	mov	r2, r5
 800764c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007650:	f7f9 fa44 	bl	8000adc <__aeabi_dcmplt>
 8007654:	2800      	cmp	r0, #0
 8007656:	f040 8128 	bne.w	80078aa <_dtoa_r+0x68a>
 800765a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800765e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007662:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007664:	2b00      	cmp	r3, #0
 8007666:	f2c0 815a 	blt.w	800791e <_dtoa_r+0x6fe>
 800766a:	2f0e      	cmp	r7, #14
 800766c:	f300 8157 	bgt.w	800791e <_dtoa_r+0x6fe>
 8007670:	4b5a      	ldr	r3, [pc, #360]	@ (80077dc <_dtoa_r+0x5bc>)
 8007672:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007676:	ed93 7b00 	vldr	d7, [r3]
 800767a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800767c:	2b00      	cmp	r3, #0
 800767e:	ed8d 7b00 	vstr	d7, [sp]
 8007682:	da03      	bge.n	800768c <_dtoa_r+0x46c>
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f340 8101 	ble.w	800788e <_dtoa_r+0x66e>
 800768c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007690:	4656      	mov	r6, sl
 8007692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f7f9 f8d7 	bl	800084c <__aeabi_ddiv>
 800769e:	f7f9 fa5b 	bl	8000b58 <__aeabi_d2iz>
 80076a2:	4680      	mov	r8, r0
 80076a4:	f7f8 ff3e 	bl	8000524 <__aeabi_i2d>
 80076a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ac:	f7f8 ffa4 	bl	80005f8 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076bc:	f7f8 fde4 	bl	8000288 <__aeabi_dsub>
 80076c0:	f806 4b01 	strb.w	r4, [r6], #1
 80076c4:	9d07      	ldr	r5, [sp, #28]
 80076c6:	eba6 040a 	sub.w	r4, r6, sl
 80076ca:	42a5      	cmp	r5, r4
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	f040 8117 	bne.w	8007902 <_dtoa_r+0x6e2>
 80076d4:	f7f8 fdda 	bl	800028c <__adddf3>
 80076d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076dc:	4604      	mov	r4, r0
 80076de:	460d      	mov	r5, r1
 80076e0:	f7f9 fa1a 	bl	8000b18 <__aeabi_dcmpgt>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f040 80f9 	bne.w	80078dc <_dtoa_r+0x6bc>
 80076ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	f7f9 f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f6:	b118      	cbz	r0, 8007700 <_dtoa_r+0x4e0>
 80076f8:	f018 0f01 	tst.w	r8, #1
 80076fc:	f040 80ee 	bne.w	80078dc <_dtoa_r+0x6bc>
 8007700:	4649      	mov	r1, r9
 8007702:	4658      	mov	r0, fp
 8007704:	f000 fc90 	bl	8008028 <_Bfree>
 8007708:	2300      	movs	r3, #0
 800770a:	7033      	strb	r3, [r6, #0]
 800770c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800770e:	3701      	adds	r7, #1
 8007710:	601f      	str	r7, [r3, #0]
 8007712:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 831d 	beq.w	8007d54 <_dtoa_r+0xb34>
 800771a:	601e      	str	r6, [r3, #0]
 800771c:	e31a      	b.n	8007d54 <_dtoa_r+0xb34>
 800771e:	07e2      	lsls	r2, r4, #31
 8007720:	d505      	bpl.n	800772e <_dtoa_r+0x50e>
 8007722:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007726:	f7f8 ff67 	bl	80005f8 <__aeabi_dmul>
 800772a:	3601      	adds	r6, #1
 800772c:	2301      	movs	r3, #1
 800772e:	1064      	asrs	r4, r4, #1
 8007730:	3508      	adds	r5, #8
 8007732:	e73f      	b.n	80075b4 <_dtoa_r+0x394>
 8007734:	2602      	movs	r6, #2
 8007736:	e742      	b.n	80075be <_dtoa_r+0x39e>
 8007738:	9c07      	ldr	r4, [sp, #28]
 800773a:	9704      	str	r7, [sp, #16]
 800773c:	e761      	b.n	8007602 <_dtoa_r+0x3e2>
 800773e:	4b27      	ldr	r3, [pc, #156]	@ (80077dc <_dtoa_r+0x5bc>)
 8007740:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007742:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007746:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800774a:	4454      	add	r4, sl
 800774c:	2900      	cmp	r1, #0
 800774e:	d053      	beq.n	80077f8 <_dtoa_r+0x5d8>
 8007750:	4928      	ldr	r1, [pc, #160]	@ (80077f4 <_dtoa_r+0x5d4>)
 8007752:	2000      	movs	r0, #0
 8007754:	f7f9 f87a 	bl	800084c <__aeabi_ddiv>
 8007758:	4633      	mov	r3, r6
 800775a:	462a      	mov	r2, r5
 800775c:	f7f8 fd94 	bl	8000288 <__aeabi_dsub>
 8007760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007764:	4656      	mov	r6, sl
 8007766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800776a:	f7f9 f9f5 	bl	8000b58 <__aeabi_d2iz>
 800776e:	4605      	mov	r5, r0
 8007770:	f7f8 fed8 	bl	8000524 <__aeabi_i2d>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777c:	f7f8 fd84 	bl	8000288 <__aeabi_dsub>
 8007780:	3530      	adds	r5, #48	@ 0x30
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800778a:	f806 5b01 	strb.w	r5, [r6], #1
 800778e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007792:	f7f9 f9a3 	bl	8000adc <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	d171      	bne.n	800787e <_dtoa_r+0x65e>
 800779a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800779e:	4911      	ldr	r1, [pc, #68]	@ (80077e4 <_dtoa_r+0x5c4>)
 80077a0:	2000      	movs	r0, #0
 80077a2:	f7f8 fd71 	bl	8000288 <__aeabi_dsub>
 80077a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077aa:	f7f9 f997 	bl	8000adc <__aeabi_dcmplt>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f040 8095 	bne.w	80078de <_dtoa_r+0x6be>
 80077b4:	42a6      	cmp	r6, r4
 80077b6:	f43f af50 	beq.w	800765a <_dtoa_r+0x43a>
 80077ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077be:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <_dtoa_r+0x5c8>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	4b08      	ldr	r3, [pc, #32]	@ (80077e8 <_dtoa_r+0x5c8>)
 80077c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077cc:	2200      	movs	r2, #0
 80077ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d2:	f7f8 ff11 	bl	80005f8 <__aeabi_dmul>
 80077d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077da:	e7c4      	b.n	8007766 <_dtoa_r+0x546>
 80077dc:	08009370 	.word	0x08009370
 80077e0:	08009348 	.word	0x08009348
 80077e4:	3ff00000 	.word	0x3ff00000
 80077e8:	40240000 	.word	0x40240000
 80077ec:	401c0000 	.word	0x401c0000
 80077f0:	40140000 	.word	0x40140000
 80077f4:	3fe00000 	.word	0x3fe00000
 80077f8:	4631      	mov	r1, r6
 80077fa:	4628      	mov	r0, r5
 80077fc:	f7f8 fefc 	bl	80005f8 <__aeabi_dmul>
 8007800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007804:	9415      	str	r4, [sp, #84]	@ 0x54
 8007806:	4656      	mov	r6, sl
 8007808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780c:	f7f9 f9a4 	bl	8000b58 <__aeabi_d2iz>
 8007810:	4605      	mov	r5, r0
 8007812:	f7f8 fe87 	bl	8000524 <__aeabi_i2d>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800781e:	f7f8 fd33 	bl	8000288 <__aeabi_dsub>
 8007822:	3530      	adds	r5, #48	@ 0x30
 8007824:	f806 5b01 	strb.w	r5, [r6], #1
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	42a6      	cmp	r6, r4
 800782e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007832:	f04f 0200 	mov.w	r2, #0
 8007836:	d124      	bne.n	8007882 <_dtoa_r+0x662>
 8007838:	4bac      	ldr	r3, [pc, #688]	@ (8007aec <_dtoa_r+0x8cc>)
 800783a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800783e:	f7f8 fd25 	bl	800028c <__adddf3>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784a:	f7f9 f965 	bl	8000b18 <__aeabi_dcmpgt>
 800784e:	2800      	cmp	r0, #0
 8007850:	d145      	bne.n	80078de <_dtoa_r+0x6be>
 8007852:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007856:	49a5      	ldr	r1, [pc, #660]	@ (8007aec <_dtoa_r+0x8cc>)
 8007858:	2000      	movs	r0, #0
 800785a:	f7f8 fd15 	bl	8000288 <__aeabi_dsub>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007866:	f7f9 f939 	bl	8000adc <__aeabi_dcmplt>
 800786a:	2800      	cmp	r0, #0
 800786c:	f43f aef5 	beq.w	800765a <_dtoa_r+0x43a>
 8007870:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007872:	1e73      	subs	r3, r6, #1
 8007874:	9315      	str	r3, [sp, #84]	@ 0x54
 8007876:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800787a:	2b30      	cmp	r3, #48	@ 0x30
 800787c:	d0f8      	beq.n	8007870 <_dtoa_r+0x650>
 800787e:	9f04      	ldr	r7, [sp, #16]
 8007880:	e73e      	b.n	8007700 <_dtoa_r+0x4e0>
 8007882:	4b9b      	ldr	r3, [pc, #620]	@ (8007af0 <_dtoa_r+0x8d0>)
 8007884:	f7f8 feb8 	bl	80005f8 <__aeabi_dmul>
 8007888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800788c:	e7bc      	b.n	8007808 <_dtoa_r+0x5e8>
 800788e:	d10c      	bne.n	80078aa <_dtoa_r+0x68a>
 8007890:	4b98      	ldr	r3, [pc, #608]	@ (8007af4 <_dtoa_r+0x8d4>)
 8007892:	2200      	movs	r2, #0
 8007894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007898:	f7f8 feae 	bl	80005f8 <__aeabi_dmul>
 800789c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a0:	f7f9 f930 	bl	8000b04 <__aeabi_dcmpge>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f000 8157 	beq.w	8007b58 <_dtoa_r+0x938>
 80078aa:	2400      	movs	r4, #0
 80078ac:	4625      	mov	r5, r4
 80078ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078b0:	43db      	mvns	r3, r3
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	4656      	mov	r6, sl
 80078b6:	2700      	movs	r7, #0
 80078b8:	4621      	mov	r1, r4
 80078ba:	4658      	mov	r0, fp
 80078bc:	f000 fbb4 	bl	8008028 <_Bfree>
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	d0dc      	beq.n	800787e <_dtoa_r+0x65e>
 80078c4:	b12f      	cbz	r7, 80078d2 <_dtoa_r+0x6b2>
 80078c6:	42af      	cmp	r7, r5
 80078c8:	d003      	beq.n	80078d2 <_dtoa_r+0x6b2>
 80078ca:	4639      	mov	r1, r7
 80078cc:	4658      	mov	r0, fp
 80078ce:	f000 fbab 	bl	8008028 <_Bfree>
 80078d2:	4629      	mov	r1, r5
 80078d4:	4658      	mov	r0, fp
 80078d6:	f000 fba7 	bl	8008028 <_Bfree>
 80078da:	e7d0      	b.n	800787e <_dtoa_r+0x65e>
 80078dc:	9704      	str	r7, [sp, #16]
 80078de:	4633      	mov	r3, r6
 80078e0:	461e      	mov	r6, r3
 80078e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078e6:	2a39      	cmp	r2, #57	@ 0x39
 80078e8:	d107      	bne.n	80078fa <_dtoa_r+0x6da>
 80078ea:	459a      	cmp	sl, r3
 80078ec:	d1f8      	bne.n	80078e0 <_dtoa_r+0x6c0>
 80078ee:	9a04      	ldr	r2, [sp, #16]
 80078f0:	3201      	adds	r2, #1
 80078f2:	9204      	str	r2, [sp, #16]
 80078f4:	2230      	movs	r2, #48	@ 0x30
 80078f6:	f88a 2000 	strb.w	r2, [sl]
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	3201      	adds	r2, #1
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	e7bd      	b.n	800787e <_dtoa_r+0x65e>
 8007902:	4b7b      	ldr	r3, [pc, #492]	@ (8007af0 <_dtoa_r+0x8d0>)
 8007904:	2200      	movs	r2, #0
 8007906:	f7f8 fe77 	bl	80005f8 <__aeabi_dmul>
 800790a:	2200      	movs	r2, #0
 800790c:	2300      	movs	r3, #0
 800790e:	4604      	mov	r4, r0
 8007910:	460d      	mov	r5, r1
 8007912:	f7f9 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007916:	2800      	cmp	r0, #0
 8007918:	f43f aebb 	beq.w	8007692 <_dtoa_r+0x472>
 800791c:	e6f0      	b.n	8007700 <_dtoa_r+0x4e0>
 800791e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007920:	2a00      	cmp	r2, #0
 8007922:	f000 80db 	beq.w	8007adc <_dtoa_r+0x8bc>
 8007926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007928:	2a01      	cmp	r2, #1
 800792a:	f300 80bf 	bgt.w	8007aac <_dtoa_r+0x88c>
 800792e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007930:	2a00      	cmp	r2, #0
 8007932:	f000 80b7 	beq.w	8007aa4 <_dtoa_r+0x884>
 8007936:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800793a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800793c:	4646      	mov	r6, r8
 800793e:	9a08      	ldr	r2, [sp, #32]
 8007940:	2101      	movs	r1, #1
 8007942:	441a      	add	r2, r3
 8007944:	4658      	mov	r0, fp
 8007946:	4498      	add	r8, r3
 8007948:	9208      	str	r2, [sp, #32]
 800794a:	f000 fc21 	bl	8008190 <__i2b>
 800794e:	4605      	mov	r5, r0
 8007950:	b15e      	cbz	r6, 800796a <_dtoa_r+0x74a>
 8007952:	9b08      	ldr	r3, [sp, #32]
 8007954:	2b00      	cmp	r3, #0
 8007956:	dd08      	ble.n	800796a <_dtoa_r+0x74a>
 8007958:	42b3      	cmp	r3, r6
 800795a:	9a08      	ldr	r2, [sp, #32]
 800795c:	bfa8      	it	ge
 800795e:	4633      	movge	r3, r6
 8007960:	eba8 0803 	sub.w	r8, r8, r3
 8007964:	1af6      	subs	r6, r6, r3
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	9308      	str	r3, [sp, #32]
 800796a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796c:	b1f3      	cbz	r3, 80079ac <_dtoa_r+0x78c>
 800796e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80b7 	beq.w	8007ae4 <_dtoa_r+0x8c4>
 8007976:	b18c      	cbz	r4, 800799c <_dtoa_r+0x77c>
 8007978:	4629      	mov	r1, r5
 800797a:	4622      	mov	r2, r4
 800797c:	4658      	mov	r0, fp
 800797e:	f000 fcc7 	bl	8008310 <__pow5mult>
 8007982:	464a      	mov	r2, r9
 8007984:	4601      	mov	r1, r0
 8007986:	4605      	mov	r5, r0
 8007988:	4658      	mov	r0, fp
 800798a:	f000 fc17 	bl	80081bc <__multiply>
 800798e:	4649      	mov	r1, r9
 8007990:	9004      	str	r0, [sp, #16]
 8007992:	4658      	mov	r0, fp
 8007994:	f000 fb48 	bl	8008028 <_Bfree>
 8007998:	9b04      	ldr	r3, [sp, #16]
 800799a:	4699      	mov	r9, r3
 800799c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800799e:	1b1a      	subs	r2, r3, r4
 80079a0:	d004      	beq.n	80079ac <_dtoa_r+0x78c>
 80079a2:	4649      	mov	r1, r9
 80079a4:	4658      	mov	r0, fp
 80079a6:	f000 fcb3 	bl	8008310 <__pow5mult>
 80079aa:	4681      	mov	r9, r0
 80079ac:	2101      	movs	r1, #1
 80079ae:	4658      	mov	r0, fp
 80079b0:	f000 fbee 	bl	8008190 <__i2b>
 80079b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b6:	4604      	mov	r4, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 81cf 	beq.w	8007d5c <_dtoa_r+0xb3c>
 80079be:	461a      	mov	r2, r3
 80079c0:	4601      	mov	r1, r0
 80079c2:	4658      	mov	r0, fp
 80079c4:	f000 fca4 	bl	8008310 <__pow5mult>
 80079c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	4604      	mov	r4, r0
 80079ce:	f300 8095 	bgt.w	8007afc <_dtoa_r+0x8dc>
 80079d2:	9b02      	ldr	r3, [sp, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f040 8087 	bne.w	8007ae8 <_dtoa_r+0x8c8>
 80079da:	9b03      	ldr	r3, [sp, #12]
 80079dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f040 8089 	bne.w	8007af8 <_dtoa_r+0x8d8>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	051b      	lsls	r3, r3, #20
 80079f0:	b12b      	cbz	r3, 80079fe <_dtoa_r+0x7de>
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	3301      	adds	r3, #1
 80079f6:	9308      	str	r3, [sp, #32]
 80079f8:	f108 0801 	add.w	r8, r8, #1
 80079fc:	2301      	movs	r3, #1
 80079fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 81b0 	beq.w	8007d68 <_dtoa_r+0xb48>
 8007a08:	6923      	ldr	r3, [r4, #16]
 8007a0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a0e:	6918      	ldr	r0, [r3, #16]
 8007a10:	f000 fb72 	bl	80080f8 <__hi0bits>
 8007a14:	f1c0 0020 	rsb	r0, r0, #32
 8007a18:	9b08      	ldr	r3, [sp, #32]
 8007a1a:	4418      	add	r0, r3
 8007a1c:	f010 001f 	ands.w	r0, r0, #31
 8007a20:	d077      	beq.n	8007b12 <_dtoa_r+0x8f2>
 8007a22:	f1c0 0320 	rsb	r3, r0, #32
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	dd6b      	ble.n	8007b02 <_dtoa_r+0x8e2>
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	f1c0 001c 	rsb	r0, r0, #28
 8007a30:	4403      	add	r3, r0
 8007a32:	4480      	add	r8, r0
 8007a34:	4406      	add	r6, r0
 8007a36:	9308      	str	r3, [sp, #32]
 8007a38:	f1b8 0f00 	cmp.w	r8, #0
 8007a3c:	dd05      	ble.n	8007a4a <_dtoa_r+0x82a>
 8007a3e:	4649      	mov	r1, r9
 8007a40:	4642      	mov	r2, r8
 8007a42:	4658      	mov	r0, fp
 8007a44:	f000 fcbe 	bl	80083c4 <__lshift>
 8007a48:	4681      	mov	r9, r0
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dd05      	ble.n	8007a5c <_dtoa_r+0x83c>
 8007a50:	4621      	mov	r1, r4
 8007a52:	461a      	mov	r2, r3
 8007a54:	4658      	mov	r0, fp
 8007a56:	f000 fcb5 	bl	80083c4 <__lshift>
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d059      	beq.n	8007b16 <_dtoa_r+0x8f6>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4648      	mov	r0, r9
 8007a66:	f000 fd19 	bl	800849c <__mcmp>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	da53      	bge.n	8007b16 <_dtoa_r+0x8f6>
 8007a6e:	1e7b      	subs	r3, r7, #1
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	4649      	mov	r1, r9
 8007a74:	2300      	movs	r3, #0
 8007a76:	220a      	movs	r2, #10
 8007a78:	4658      	mov	r0, fp
 8007a7a:	f000 faf7 	bl	800806c <__multadd>
 8007a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a80:	4681      	mov	r9, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8172 	beq.w	8007d6c <_dtoa_r+0xb4c>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	220a      	movs	r2, #10
 8007a8e:	4658      	mov	r0, fp
 8007a90:	f000 faec 	bl	800806c <__multadd>
 8007a94:	9b00      	ldr	r3, [sp, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	4605      	mov	r5, r0
 8007a9a:	dc67      	bgt.n	8007b6c <_dtoa_r+0x94c>
 8007a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	dc41      	bgt.n	8007b26 <_dtoa_r+0x906>
 8007aa2:	e063      	b.n	8007b6c <_dtoa_r+0x94c>
 8007aa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007aa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007aaa:	e746      	b.n	800793a <_dtoa_r+0x71a>
 8007aac:	9b07      	ldr	r3, [sp, #28]
 8007aae:	1e5c      	subs	r4, r3, #1
 8007ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	bfbf      	itttt	lt
 8007ab6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ab8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007aba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007abc:	1ae3      	sublt	r3, r4, r3
 8007abe:	bfb4      	ite	lt
 8007ac0:	18d2      	addlt	r2, r2, r3
 8007ac2:	1b1c      	subge	r4, r3, r4
 8007ac4:	9b07      	ldr	r3, [sp, #28]
 8007ac6:	bfbc      	itt	lt
 8007ac8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007aca:	2400      	movlt	r4, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bfb5      	itete	lt
 8007ad0:	eba8 0603 	sublt.w	r6, r8, r3
 8007ad4:	9b07      	ldrge	r3, [sp, #28]
 8007ad6:	2300      	movlt	r3, #0
 8007ad8:	4646      	movge	r6, r8
 8007ada:	e730      	b.n	800793e <_dtoa_r+0x71e>
 8007adc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ade:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ae0:	4646      	mov	r6, r8
 8007ae2:	e735      	b.n	8007950 <_dtoa_r+0x730>
 8007ae4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ae6:	e75c      	b.n	80079a2 <_dtoa_r+0x782>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e788      	b.n	80079fe <_dtoa_r+0x7de>
 8007aec:	3fe00000 	.word	0x3fe00000
 8007af0:	40240000 	.word	0x40240000
 8007af4:	40140000 	.word	0x40140000
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	e780      	b.n	80079fe <_dtoa_r+0x7de>
 8007afc:	2300      	movs	r3, #0
 8007afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b00:	e782      	b.n	8007a08 <_dtoa_r+0x7e8>
 8007b02:	d099      	beq.n	8007a38 <_dtoa_r+0x818>
 8007b04:	9a08      	ldr	r2, [sp, #32]
 8007b06:	331c      	adds	r3, #28
 8007b08:	441a      	add	r2, r3
 8007b0a:	4498      	add	r8, r3
 8007b0c:	441e      	add	r6, r3
 8007b0e:	9208      	str	r2, [sp, #32]
 8007b10:	e792      	b.n	8007a38 <_dtoa_r+0x818>
 8007b12:	4603      	mov	r3, r0
 8007b14:	e7f6      	b.n	8007b04 <_dtoa_r+0x8e4>
 8007b16:	9b07      	ldr	r3, [sp, #28]
 8007b18:	9704      	str	r7, [sp, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dc20      	bgt.n	8007b60 <_dtoa_r+0x940>
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	dd1e      	ble.n	8007b64 <_dtoa_r+0x944>
 8007b26:	9b00      	ldr	r3, [sp, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f47f aec0 	bne.w	80078ae <_dtoa_r+0x68e>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	2205      	movs	r2, #5
 8007b32:	4658      	mov	r0, fp
 8007b34:	f000 fa9a 	bl	800806c <__multadd>
 8007b38:	4601      	mov	r1, r0
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4648      	mov	r0, r9
 8007b3e:	f000 fcad 	bl	800849c <__mcmp>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f77f aeb3 	ble.w	80078ae <_dtoa_r+0x68e>
 8007b48:	4656      	mov	r6, sl
 8007b4a:	2331      	movs	r3, #49	@ 0x31
 8007b4c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	3301      	adds	r3, #1
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	e6ae      	b.n	80078b6 <_dtoa_r+0x696>
 8007b58:	9c07      	ldr	r4, [sp, #28]
 8007b5a:	9704      	str	r7, [sp, #16]
 8007b5c:	4625      	mov	r5, r4
 8007b5e:	e7f3      	b.n	8007b48 <_dtoa_r+0x928>
 8007b60:	9b07      	ldr	r3, [sp, #28]
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8104 	beq.w	8007d74 <_dtoa_r+0xb54>
 8007b6c:	2e00      	cmp	r6, #0
 8007b6e:	dd05      	ble.n	8007b7c <_dtoa_r+0x95c>
 8007b70:	4629      	mov	r1, r5
 8007b72:	4632      	mov	r2, r6
 8007b74:	4658      	mov	r0, fp
 8007b76:	f000 fc25 	bl	80083c4 <__lshift>
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d05a      	beq.n	8007c38 <_dtoa_r+0xa18>
 8007b82:	6869      	ldr	r1, [r5, #4]
 8007b84:	4658      	mov	r0, fp
 8007b86:	f000 fa0f 	bl	8007fa8 <_Balloc>
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	b928      	cbnz	r0, 8007b9a <_dtoa_r+0x97a>
 8007b8e:	4b84      	ldr	r3, [pc, #528]	@ (8007da0 <_dtoa_r+0xb80>)
 8007b90:	4602      	mov	r2, r0
 8007b92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b96:	f7ff bb5a 	b.w	800724e <_dtoa_r+0x2e>
 8007b9a:	692a      	ldr	r2, [r5, #16]
 8007b9c:	3202      	adds	r2, #2
 8007b9e:	0092      	lsls	r2, r2, #2
 8007ba0:	f105 010c 	add.w	r1, r5, #12
 8007ba4:	300c      	adds	r0, #12
 8007ba6:	f001 f975 	bl	8008e94 <memcpy>
 8007baa:	2201      	movs	r2, #1
 8007bac:	4631      	mov	r1, r6
 8007bae:	4658      	mov	r0, fp
 8007bb0:	f000 fc08 	bl	80083c4 <__lshift>
 8007bb4:	f10a 0301 	add.w	r3, sl, #1
 8007bb8:	9307      	str	r3, [sp, #28]
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	4453      	add	r3, sl
 8007bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	462f      	mov	r7, r5
 8007bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bca:	4605      	mov	r5, r0
 8007bcc:	9b07      	ldr	r3, [sp, #28]
 8007bce:	4621      	mov	r1, r4
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	4648      	mov	r0, r9
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	f7ff fa9a 	bl	800710e <quorem>
 8007bda:	4639      	mov	r1, r7
 8007bdc:	9002      	str	r0, [sp, #8]
 8007bde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007be2:	4648      	mov	r0, r9
 8007be4:	f000 fc5a 	bl	800849c <__mcmp>
 8007be8:	462a      	mov	r2, r5
 8007bea:	9008      	str	r0, [sp, #32]
 8007bec:	4621      	mov	r1, r4
 8007bee:	4658      	mov	r0, fp
 8007bf0:	f000 fc70 	bl	80084d4 <__mdiff>
 8007bf4:	68c2      	ldr	r2, [r0, #12]
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	bb02      	cbnz	r2, 8007c3c <_dtoa_r+0xa1c>
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	4648      	mov	r0, r9
 8007bfe:	f000 fc4d 	bl	800849c <__mcmp>
 8007c02:	4602      	mov	r2, r0
 8007c04:	4631      	mov	r1, r6
 8007c06:	4658      	mov	r0, fp
 8007c08:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c0a:	f000 fa0d 	bl	8008028 <_Bfree>
 8007c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c12:	9e07      	ldr	r6, [sp, #28]
 8007c14:	ea43 0102 	orr.w	r1, r3, r2
 8007c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c1a:	4319      	orrs	r1, r3
 8007c1c:	d110      	bne.n	8007c40 <_dtoa_r+0xa20>
 8007c1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c22:	d029      	beq.n	8007c78 <_dtoa_r+0xa58>
 8007c24:	9b08      	ldr	r3, [sp, #32]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	dd02      	ble.n	8007c30 <_dtoa_r+0xa10>
 8007c2a:	9b02      	ldr	r3, [sp, #8]
 8007c2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c30:	9b00      	ldr	r3, [sp, #0]
 8007c32:	f883 8000 	strb.w	r8, [r3]
 8007c36:	e63f      	b.n	80078b8 <_dtoa_r+0x698>
 8007c38:	4628      	mov	r0, r5
 8007c3a:	e7bb      	b.n	8007bb4 <_dtoa_r+0x994>
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	e7e1      	b.n	8007c04 <_dtoa_r+0x9e4>
 8007c40:	9b08      	ldr	r3, [sp, #32]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	db04      	blt.n	8007c50 <_dtoa_r+0xa30>
 8007c46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	d120      	bne.n	8007c92 <_dtoa_r+0xa72>
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	dded      	ble.n	8007c30 <_dtoa_r+0xa10>
 8007c54:	4649      	mov	r1, r9
 8007c56:	2201      	movs	r2, #1
 8007c58:	4658      	mov	r0, fp
 8007c5a:	f000 fbb3 	bl	80083c4 <__lshift>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4681      	mov	r9, r0
 8007c62:	f000 fc1b 	bl	800849c <__mcmp>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	dc03      	bgt.n	8007c72 <_dtoa_r+0xa52>
 8007c6a:	d1e1      	bne.n	8007c30 <_dtoa_r+0xa10>
 8007c6c:	f018 0f01 	tst.w	r8, #1
 8007c70:	d0de      	beq.n	8007c30 <_dtoa_r+0xa10>
 8007c72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c76:	d1d8      	bne.n	8007c2a <_dtoa_r+0xa0a>
 8007c78:	9a00      	ldr	r2, [sp, #0]
 8007c7a:	2339      	movs	r3, #57	@ 0x39
 8007c7c:	7013      	strb	r3, [r2, #0]
 8007c7e:	4633      	mov	r3, r6
 8007c80:	461e      	mov	r6, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c88:	2a39      	cmp	r2, #57	@ 0x39
 8007c8a:	d052      	beq.n	8007d32 <_dtoa_r+0xb12>
 8007c8c:	3201      	adds	r2, #1
 8007c8e:	701a      	strb	r2, [r3, #0]
 8007c90:	e612      	b.n	80078b8 <_dtoa_r+0x698>
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	dd07      	ble.n	8007ca6 <_dtoa_r+0xa86>
 8007c96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c9a:	d0ed      	beq.n	8007c78 <_dtoa_r+0xa58>
 8007c9c:	9a00      	ldr	r2, [sp, #0]
 8007c9e:	f108 0301 	add.w	r3, r8, #1
 8007ca2:	7013      	strb	r3, [r2, #0]
 8007ca4:	e608      	b.n	80078b8 <_dtoa_r+0x698>
 8007ca6:	9b07      	ldr	r3, [sp, #28]
 8007ca8:	9a07      	ldr	r2, [sp, #28]
 8007caa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d028      	beq.n	8007d06 <_dtoa_r+0xae6>
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	220a      	movs	r2, #10
 8007cba:	4658      	mov	r0, fp
 8007cbc:	f000 f9d6 	bl	800806c <__multadd>
 8007cc0:	42af      	cmp	r7, r5
 8007cc2:	4681      	mov	r9, r0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	f04f 020a 	mov.w	r2, #10
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4658      	mov	r0, fp
 8007cd0:	d107      	bne.n	8007ce2 <_dtoa_r+0xac2>
 8007cd2:	f000 f9cb 	bl	800806c <__multadd>
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	4605      	mov	r5, r0
 8007cda:	9b07      	ldr	r3, [sp, #28]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	e774      	b.n	8007bcc <_dtoa_r+0x9ac>
 8007ce2:	f000 f9c3 	bl	800806c <__multadd>
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4607      	mov	r7, r0
 8007cea:	2300      	movs	r3, #0
 8007cec:	220a      	movs	r2, #10
 8007cee:	4658      	mov	r0, fp
 8007cf0:	f000 f9bc 	bl	800806c <__multadd>
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	e7f0      	b.n	8007cda <_dtoa_r+0xaba>
 8007cf8:	9b00      	ldr	r3, [sp, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bfcc      	ite	gt
 8007cfe:	461e      	movgt	r6, r3
 8007d00:	2601      	movle	r6, #1
 8007d02:	4456      	add	r6, sl
 8007d04:	2700      	movs	r7, #0
 8007d06:	4649      	mov	r1, r9
 8007d08:	2201      	movs	r2, #1
 8007d0a:	4658      	mov	r0, fp
 8007d0c:	f000 fb5a 	bl	80083c4 <__lshift>
 8007d10:	4621      	mov	r1, r4
 8007d12:	4681      	mov	r9, r0
 8007d14:	f000 fbc2 	bl	800849c <__mcmp>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	dcb0      	bgt.n	8007c7e <_dtoa_r+0xa5e>
 8007d1c:	d102      	bne.n	8007d24 <_dtoa_r+0xb04>
 8007d1e:	f018 0f01 	tst.w	r8, #1
 8007d22:	d1ac      	bne.n	8007c7e <_dtoa_r+0xa5e>
 8007d24:	4633      	mov	r3, r6
 8007d26:	461e      	mov	r6, r3
 8007d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d2c:	2a30      	cmp	r2, #48	@ 0x30
 8007d2e:	d0fa      	beq.n	8007d26 <_dtoa_r+0xb06>
 8007d30:	e5c2      	b.n	80078b8 <_dtoa_r+0x698>
 8007d32:	459a      	cmp	sl, r3
 8007d34:	d1a4      	bne.n	8007c80 <_dtoa_r+0xa60>
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	2331      	movs	r3, #49	@ 0x31
 8007d3e:	f88a 3000 	strb.w	r3, [sl]
 8007d42:	e5b9      	b.n	80078b8 <_dtoa_r+0x698>
 8007d44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007da4 <_dtoa_r+0xb84>
 8007d4a:	b11b      	cbz	r3, 8007d54 <_dtoa_r+0xb34>
 8007d4c:	f10a 0308 	add.w	r3, sl, #8
 8007d50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	4650      	mov	r0, sl
 8007d56:	b019      	add	sp, #100	@ 0x64
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	f77f ae37 	ble.w	80079d2 <_dtoa_r+0x7b2>
 8007d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d68:	2001      	movs	r0, #1
 8007d6a:	e655      	b.n	8007a18 <_dtoa_r+0x7f8>
 8007d6c:	9b00      	ldr	r3, [sp, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f77f aed6 	ble.w	8007b20 <_dtoa_r+0x900>
 8007d74:	4656      	mov	r6, sl
 8007d76:	4621      	mov	r1, r4
 8007d78:	4648      	mov	r0, r9
 8007d7a:	f7ff f9c8 	bl	800710e <quorem>
 8007d7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d82:	f806 8b01 	strb.w	r8, [r6], #1
 8007d86:	9b00      	ldr	r3, [sp, #0]
 8007d88:	eba6 020a 	sub.w	r2, r6, sl
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	ddb3      	ble.n	8007cf8 <_dtoa_r+0xad8>
 8007d90:	4649      	mov	r1, r9
 8007d92:	2300      	movs	r3, #0
 8007d94:	220a      	movs	r2, #10
 8007d96:	4658      	mov	r0, fp
 8007d98:	f000 f968 	bl	800806c <__multadd>
 8007d9c:	4681      	mov	r9, r0
 8007d9e:	e7ea      	b.n	8007d76 <_dtoa_r+0xb56>
 8007da0:	080092d0 	.word	0x080092d0
 8007da4:	08009254 	.word	0x08009254

08007da8 <_free_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4605      	mov	r5, r0
 8007dac:	2900      	cmp	r1, #0
 8007dae:	d041      	beq.n	8007e34 <_free_r+0x8c>
 8007db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db4:	1f0c      	subs	r4, r1, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	bfb8      	it	lt
 8007dba:	18e4      	addlt	r4, r4, r3
 8007dbc:	f000 f8e8 	bl	8007f90 <__malloc_lock>
 8007dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e38 <_free_r+0x90>)
 8007dc2:	6813      	ldr	r3, [r2, #0]
 8007dc4:	b933      	cbnz	r3, 8007dd4 <_free_r+0x2c>
 8007dc6:	6063      	str	r3, [r4, #4]
 8007dc8:	6014      	str	r4, [r2, #0]
 8007dca:	4628      	mov	r0, r5
 8007dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dd0:	f000 b8e4 	b.w	8007f9c <__malloc_unlock>
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d908      	bls.n	8007dea <_free_r+0x42>
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	1821      	adds	r1, r4, r0
 8007ddc:	428b      	cmp	r3, r1
 8007dde:	bf01      	itttt	eq
 8007de0:	6819      	ldreq	r1, [r3, #0]
 8007de2:	685b      	ldreq	r3, [r3, #4]
 8007de4:	1809      	addeq	r1, r1, r0
 8007de6:	6021      	streq	r1, [r4, #0]
 8007de8:	e7ed      	b.n	8007dc6 <_free_r+0x1e>
 8007dea:	461a      	mov	r2, r3
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	b10b      	cbz	r3, 8007df4 <_free_r+0x4c>
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	d9fa      	bls.n	8007dea <_free_r+0x42>
 8007df4:	6811      	ldr	r1, [r2, #0]
 8007df6:	1850      	adds	r0, r2, r1
 8007df8:	42a0      	cmp	r0, r4
 8007dfa:	d10b      	bne.n	8007e14 <_free_r+0x6c>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	4401      	add	r1, r0
 8007e00:	1850      	adds	r0, r2, r1
 8007e02:	4283      	cmp	r3, r0
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	d1e0      	bne.n	8007dca <_free_r+0x22>
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	6053      	str	r3, [r2, #4]
 8007e0e:	4408      	add	r0, r1
 8007e10:	6010      	str	r0, [r2, #0]
 8007e12:	e7da      	b.n	8007dca <_free_r+0x22>
 8007e14:	d902      	bls.n	8007e1c <_free_r+0x74>
 8007e16:	230c      	movs	r3, #12
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	e7d6      	b.n	8007dca <_free_r+0x22>
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	1821      	adds	r1, r4, r0
 8007e20:	428b      	cmp	r3, r1
 8007e22:	bf04      	itt	eq
 8007e24:	6819      	ldreq	r1, [r3, #0]
 8007e26:	685b      	ldreq	r3, [r3, #4]
 8007e28:	6063      	str	r3, [r4, #4]
 8007e2a:	bf04      	itt	eq
 8007e2c:	1809      	addeq	r1, r1, r0
 8007e2e:	6021      	streq	r1, [r4, #0]
 8007e30:	6054      	str	r4, [r2, #4]
 8007e32:	e7ca      	b.n	8007dca <_free_r+0x22>
 8007e34:	bd38      	pop	{r3, r4, r5, pc}
 8007e36:	bf00      	nop
 8007e38:	200004ac 	.word	0x200004ac

08007e3c <malloc>:
 8007e3c:	4b02      	ldr	r3, [pc, #8]	@ (8007e48 <malloc+0xc>)
 8007e3e:	4601      	mov	r1, r0
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	f000 b825 	b.w	8007e90 <_malloc_r>
 8007e46:	bf00      	nop
 8007e48:	20000044 	.word	0x20000044

08007e4c <sbrk_aligned>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8007e8c <sbrk_aligned+0x40>)
 8007e50:	460c      	mov	r4, r1
 8007e52:	6831      	ldr	r1, [r6, #0]
 8007e54:	4605      	mov	r5, r0
 8007e56:	b911      	cbnz	r1, 8007e5e <sbrk_aligned+0x12>
 8007e58:	f001 f80c 	bl	8008e74 <_sbrk_r>
 8007e5c:	6030      	str	r0, [r6, #0]
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f001 f807 	bl	8008e74 <_sbrk_r>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	d103      	bne.n	8007e72 <sbrk_aligned+0x26>
 8007e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e6e:	4620      	mov	r0, r4
 8007e70:	bd70      	pop	{r4, r5, r6, pc}
 8007e72:	1cc4      	adds	r4, r0, #3
 8007e74:	f024 0403 	bic.w	r4, r4, #3
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d0f8      	beq.n	8007e6e <sbrk_aligned+0x22>
 8007e7c:	1a21      	subs	r1, r4, r0
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 fff8 	bl	8008e74 <_sbrk_r>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d1f2      	bne.n	8007e6e <sbrk_aligned+0x22>
 8007e88:	e7ef      	b.n	8007e6a <sbrk_aligned+0x1e>
 8007e8a:	bf00      	nop
 8007e8c:	200004a8 	.word	0x200004a8

08007e90 <_malloc_r>:
 8007e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e94:	1ccd      	adds	r5, r1, #3
 8007e96:	f025 0503 	bic.w	r5, r5, #3
 8007e9a:	3508      	adds	r5, #8
 8007e9c:	2d0c      	cmp	r5, #12
 8007e9e:	bf38      	it	cc
 8007ea0:	250c      	movcc	r5, #12
 8007ea2:	2d00      	cmp	r5, #0
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	db01      	blt.n	8007eac <_malloc_r+0x1c>
 8007ea8:	42a9      	cmp	r1, r5
 8007eaa:	d904      	bls.n	8007eb6 <_malloc_r+0x26>
 8007eac:	230c      	movs	r3, #12
 8007eae:	6033      	str	r3, [r6, #0]
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f8c <_malloc_r+0xfc>
 8007eba:	f000 f869 	bl	8007f90 <__malloc_lock>
 8007ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec2:	461c      	mov	r4, r3
 8007ec4:	bb44      	cbnz	r4, 8007f18 <_malloc_r+0x88>
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7ff ffbf 	bl	8007e4c <sbrk_aligned>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	d158      	bne.n	8007f86 <_malloc_r+0xf6>
 8007ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed8:	4627      	mov	r7, r4
 8007eda:	2f00      	cmp	r7, #0
 8007edc:	d143      	bne.n	8007f66 <_malloc_r+0xd6>
 8007ede:	2c00      	cmp	r4, #0
 8007ee0:	d04b      	beq.n	8007f7a <_malloc_r+0xea>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	eb04 0903 	add.w	r9, r4, r3
 8007eec:	f000 ffc2 	bl	8008e74 <_sbrk_r>
 8007ef0:	4581      	cmp	r9, r0
 8007ef2:	d142      	bne.n	8007f7a <_malloc_r+0xea>
 8007ef4:	6821      	ldr	r1, [r4, #0]
 8007ef6:	1a6d      	subs	r5, r5, r1
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4630      	mov	r0, r6
 8007efc:	f7ff ffa6 	bl	8007e4c <sbrk_aligned>
 8007f00:	3001      	adds	r0, #1
 8007f02:	d03a      	beq.n	8007f7a <_malloc_r+0xea>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	442b      	add	r3, r5
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	bb62      	cbnz	r2, 8007f6c <_malloc_r+0xdc>
 8007f12:	f8c8 7000 	str.w	r7, [r8]
 8007f16:	e00f      	b.n	8007f38 <_malloc_r+0xa8>
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	1b52      	subs	r2, r2, r5
 8007f1c:	d420      	bmi.n	8007f60 <_malloc_r+0xd0>
 8007f1e:	2a0b      	cmp	r2, #11
 8007f20:	d917      	bls.n	8007f52 <_malloc_r+0xc2>
 8007f22:	1961      	adds	r1, r4, r5
 8007f24:	42a3      	cmp	r3, r4
 8007f26:	6025      	str	r5, [r4, #0]
 8007f28:	bf18      	it	ne
 8007f2a:	6059      	strne	r1, [r3, #4]
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	bf08      	it	eq
 8007f30:	f8c8 1000 	streq.w	r1, [r8]
 8007f34:	5162      	str	r2, [r4, r5]
 8007f36:	604b      	str	r3, [r1, #4]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 f82f 	bl	8007f9c <__malloc_unlock>
 8007f3e:	f104 000b 	add.w	r0, r4, #11
 8007f42:	1d23      	adds	r3, r4, #4
 8007f44:	f020 0007 	bic.w	r0, r0, #7
 8007f48:	1ac2      	subs	r2, r0, r3
 8007f4a:	bf1c      	itt	ne
 8007f4c:	1a1b      	subne	r3, r3, r0
 8007f4e:	50a3      	strne	r3, [r4, r2]
 8007f50:	e7af      	b.n	8007eb2 <_malloc_r+0x22>
 8007f52:	6862      	ldr	r2, [r4, #4]
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	bf0c      	ite	eq
 8007f58:	f8c8 2000 	streq.w	r2, [r8]
 8007f5c:	605a      	strne	r2, [r3, #4]
 8007f5e:	e7eb      	b.n	8007f38 <_malloc_r+0xa8>
 8007f60:	4623      	mov	r3, r4
 8007f62:	6864      	ldr	r4, [r4, #4]
 8007f64:	e7ae      	b.n	8007ec4 <_malloc_r+0x34>
 8007f66:	463c      	mov	r4, r7
 8007f68:	687f      	ldr	r7, [r7, #4]
 8007f6a:	e7b6      	b.n	8007eda <_malloc_r+0x4a>
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	d1fb      	bne.n	8007f6c <_malloc_r+0xdc>
 8007f74:	2300      	movs	r3, #0
 8007f76:	6053      	str	r3, [r2, #4]
 8007f78:	e7de      	b.n	8007f38 <_malloc_r+0xa8>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f000 f80c 	bl	8007f9c <__malloc_unlock>
 8007f84:	e794      	b.n	8007eb0 <_malloc_r+0x20>
 8007f86:	6005      	str	r5, [r0, #0]
 8007f88:	e7d6      	b.n	8007f38 <_malloc_r+0xa8>
 8007f8a:	bf00      	nop
 8007f8c:	200004ac 	.word	0x200004ac

08007f90 <__malloc_lock>:
 8007f90:	4801      	ldr	r0, [pc, #4]	@ (8007f98 <__malloc_lock+0x8>)
 8007f92:	f7ff b8ba 	b.w	800710a <__retarget_lock_acquire_recursive>
 8007f96:	bf00      	nop
 8007f98:	200004a4 	.word	0x200004a4

08007f9c <__malloc_unlock>:
 8007f9c:	4801      	ldr	r0, [pc, #4]	@ (8007fa4 <__malloc_unlock+0x8>)
 8007f9e:	f7ff b8b5 	b.w	800710c <__retarget_lock_release_recursive>
 8007fa2:	bf00      	nop
 8007fa4:	200004a4 	.word	0x200004a4

08007fa8 <_Balloc>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	69c6      	ldr	r6, [r0, #28]
 8007fac:	4604      	mov	r4, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	b976      	cbnz	r6, 8007fd0 <_Balloc+0x28>
 8007fb2:	2010      	movs	r0, #16
 8007fb4:	f7ff ff42 	bl	8007e3c <malloc>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	61e0      	str	r0, [r4, #28]
 8007fbc:	b920      	cbnz	r0, 8007fc8 <_Balloc+0x20>
 8007fbe:	4b18      	ldr	r3, [pc, #96]	@ (8008020 <_Balloc+0x78>)
 8007fc0:	4818      	ldr	r0, [pc, #96]	@ (8008024 <_Balloc+0x7c>)
 8007fc2:	216b      	movs	r1, #107	@ 0x6b
 8007fc4:	f000 ff74 	bl	8008eb0 <__assert_func>
 8007fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fcc:	6006      	str	r6, [r0, #0]
 8007fce:	60c6      	str	r6, [r0, #12]
 8007fd0:	69e6      	ldr	r6, [r4, #28]
 8007fd2:	68f3      	ldr	r3, [r6, #12]
 8007fd4:	b183      	cbz	r3, 8007ff8 <_Balloc+0x50>
 8007fd6:	69e3      	ldr	r3, [r4, #28]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fde:	b9b8      	cbnz	r0, 8008010 <_Balloc+0x68>
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8007fe6:	1d72      	adds	r2, r6, #5
 8007fe8:	0092      	lsls	r2, r2, #2
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 ff7e 	bl	8008eec <_calloc_r>
 8007ff0:	b160      	cbz	r0, 800800c <_Balloc+0x64>
 8007ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ff6:	e00e      	b.n	8008016 <_Balloc+0x6e>
 8007ff8:	2221      	movs	r2, #33	@ 0x21
 8007ffa:	2104      	movs	r1, #4
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 ff75 	bl	8008eec <_calloc_r>
 8008002:	69e3      	ldr	r3, [r4, #28]
 8008004:	60f0      	str	r0, [r6, #12]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e4      	bne.n	8007fd6 <_Balloc+0x2e>
 800800c:	2000      	movs	r0, #0
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	6802      	ldr	r2, [r0, #0]
 8008012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008016:	2300      	movs	r3, #0
 8008018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800801c:	e7f7      	b.n	800800e <_Balloc+0x66>
 800801e:	bf00      	nop
 8008020:	08009261 	.word	0x08009261
 8008024:	080092e1 	.word	0x080092e1

08008028 <_Bfree>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	69c6      	ldr	r6, [r0, #28]
 800802c:	4605      	mov	r5, r0
 800802e:	460c      	mov	r4, r1
 8008030:	b976      	cbnz	r6, 8008050 <_Bfree+0x28>
 8008032:	2010      	movs	r0, #16
 8008034:	f7ff ff02 	bl	8007e3c <malloc>
 8008038:	4602      	mov	r2, r0
 800803a:	61e8      	str	r0, [r5, #28]
 800803c:	b920      	cbnz	r0, 8008048 <_Bfree+0x20>
 800803e:	4b09      	ldr	r3, [pc, #36]	@ (8008064 <_Bfree+0x3c>)
 8008040:	4809      	ldr	r0, [pc, #36]	@ (8008068 <_Bfree+0x40>)
 8008042:	218f      	movs	r1, #143	@ 0x8f
 8008044:	f000 ff34 	bl	8008eb0 <__assert_func>
 8008048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800804c:	6006      	str	r6, [r0, #0]
 800804e:	60c6      	str	r6, [r0, #12]
 8008050:	b13c      	cbz	r4, 8008062 <_Bfree+0x3a>
 8008052:	69eb      	ldr	r3, [r5, #28]
 8008054:	6862      	ldr	r2, [r4, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800805c:	6021      	str	r1, [r4, #0]
 800805e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008062:	bd70      	pop	{r4, r5, r6, pc}
 8008064:	08009261 	.word	0x08009261
 8008068:	080092e1 	.word	0x080092e1

0800806c <__multadd>:
 800806c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008070:	690d      	ldr	r5, [r1, #16]
 8008072:	4607      	mov	r7, r0
 8008074:	460c      	mov	r4, r1
 8008076:	461e      	mov	r6, r3
 8008078:	f101 0c14 	add.w	ip, r1, #20
 800807c:	2000      	movs	r0, #0
 800807e:	f8dc 3000 	ldr.w	r3, [ip]
 8008082:	b299      	uxth	r1, r3
 8008084:	fb02 6101 	mla	r1, r2, r1, r6
 8008088:	0c1e      	lsrs	r6, r3, #16
 800808a:	0c0b      	lsrs	r3, r1, #16
 800808c:	fb02 3306 	mla	r3, r2, r6, r3
 8008090:	b289      	uxth	r1, r1
 8008092:	3001      	adds	r0, #1
 8008094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008098:	4285      	cmp	r5, r0
 800809a:	f84c 1b04 	str.w	r1, [ip], #4
 800809e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080a2:	dcec      	bgt.n	800807e <__multadd+0x12>
 80080a4:	b30e      	cbz	r6, 80080ea <__multadd+0x7e>
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	42ab      	cmp	r3, r5
 80080aa:	dc19      	bgt.n	80080e0 <__multadd+0x74>
 80080ac:	6861      	ldr	r1, [r4, #4]
 80080ae:	4638      	mov	r0, r7
 80080b0:	3101      	adds	r1, #1
 80080b2:	f7ff ff79 	bl	8007fa8 <_Balloc>
 80080b6:	4680      	mov	r8, r0
 80080b8:	b928      	cbnz	r0, 80080c6 <__multadd+0x5a>
 80080ba:	4602      	mov	r2, r0
 80080bc:	4b0c      	ldr	r3, [pc, #48]	@ (80080f0 <__multadd+0x84>)
 80080be:	480d      	ldr	r0, [pc, #52]	@ (80080f4 <__multadd+0x88>)
 80080c0:	21ba      	movs	r1, #186	@ 0xba
 80080c2:	f000 fef5 	bl	8008eb0 <__assert_func>
 80080c6:	6922      	ldr	r2, [r4, #16]
 80080c8:	3202      	adds	r2, #2
 80080ca:	f104 010c 	add.w	r1, r4, #12
 80080ce:	0092      	lsls	r2, r2, #2
 80080d0:	300c      	adds	r0, #12
 80080d2:	f000 fedf 	bl	8008e94 <memcpy>
 80080d6:	4621      	mov	r1, r4
 80080d8:	4638      	mov	r0, r7
 80080da:	f7ff ffa5 	bl	8008028 <_Bfree>
 80080de:	4644      	mov	r4, r8
 80080e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e4:	3501      	adds	r5, #1
 80080e6:	615e      	str	r6, [r3, #20]
 80080e8:	6125      	str	r5, [r4, #16]
 80080ea:	4620      	mov	r0, r4
 80080ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f0:	080092d0 	.word	0x080092d0
 80080f4:	080092e1 	.word	0x080092e1

080080f8 <__hi0bits>:
 80080f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080fc:	4603      	mov	r3, r0
 80080fe:	bf36      	itet	cc
 8008100:	0403      	lslcc	r3, r0, #16
 8008102:	2000      	movcs	r0, #0
 8008104:	2010      	movcc	r0, #16
 8008106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800810a:	bf3c      	itt	cc
 800810c:	021b      	lslcc	r3, r3, #8
 800810e:	3008      	addcc	r0, #8
 8008110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008114:	bf3c      	itt	cc
 8008116:	011b      	lslcc	r3, r3, #4
 8008118:	3004      	addcc	r0, #4
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811e:	bf3c      	itt	cc
 8008120:	009b      	lslcc	r3, r3, #2
 8008122:	3002      	addcc	r0, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	db05      	blt.n	8008134 <__hi0bits+0x3c>
 8008128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800812c:	f100 0001 	add.w	r0, r0, #1
 8008130:	bf08      	it	eq
 8008132:	2020      	moveq	r0, #32
 8008134:	4770      	bx	lr

08008136 <__lo0bits>:
 8008136:	6803      	ldr	r3, [r0, #0]
 8008138:	4602      	mov	r2, r0
 800813a:	f013 0007 	ands.w	r0, r3, #7
 800813e:	d00b      	beq.n	8008158 <__lo0bits+0x22>
 8008140:	07d9      	lsls	r1, r3, #31
 8008142:	d421      	bmi.n	8008188 <__lo0bits+0x52>
 8008144:	0798      	lsls	r0, r3, #30
 8008146:	bf49      	itett	mi
 8008148:	085b      	lsrmi	r3, r3, #1
 800814a:	089b      	lsrpl	r3, r3, #2
 800814c:	2001      	movmi	r0, #1
 800814e:	6013      	strmi	r3, [r2, #0]
 8008150:	bf5c      	itt	pl
 8008152:	6013      	strpl	r3, [r2, #0]
 8008154:	2002      	movpl	r0, #2
 8008156:	4770      	bx	lr
 8008158:	b299      	uxth	r1, r3
 800815a:	b909      	cbnz	r1, 8008160 <__lo0bits+0x2a>
 800815c:	0c1b      	lsrs	r3, r3, #16
 800815e:	2010      	movs	r0, #16
 8008160:	b2d9      	uxtb	r1, r3
 8008162:	b909      	cbnz	r1, 8008168 <__lo0bits+0x32>
 8008164:	3008      	adds	r0, #8
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	0719      	lsls	r1, r3, #28
 800816a:	bf04      	itt	eq
 800816c:	091b      	lsreq	r3, r3, #4
 800816e:	3004      	addeq	r0, #4
 8008170:	0799      	lsls	r1, r3, #30
 8008172:	bf04      	itt	eq
 8008174:	089b      	lsreq	r3, r3, #2
 8008176:	3002      	addeq	r0, #2
 8008178:	07d9      	lsls	r1, r3, #31
 800817a:	d403      	bmi.n	8008184 <__lo0bits+0x4e>
 800817c:	085b      	lsrs	r3, r3, #1
 800817e:	f100 0001 	add.w	r0, r0, #1
 8008182:	d003      	beq.n	800818c <__lo0bits+0x56>
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	4770      	bx	lr
 8008188:	2000      	movs	r0, #0
 800818a:	4770      	bx	lr
 800818c:	2020      	movs	r0, #32
 800818e:	4770      	bx	lr

08008190 <__i2b>:
 8008190:	b510      	push	{r4, lr}
 8008192:	460c      	mov	r4, r1
 8008194:	2101      	movs	r1, #1
 8008196:	f7ff ff07 	bl	8007fa8 <_Balloc>
 800819a:	4602      	mov	r2, r0
 800819c:	b928      	cbnz	r0, 80081aa <__i2b+0x1a>
 800819e:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <__i2b+0x24>)
 80081a0:	4805      	ldr	r0, [pc, #20]	@ (80081b8 <__i2b+0x28>)
 80081a2:	f240 1145 	movw	r1, #325	@ 0x145
 80081a6:	f000 fe83 	bl	8008eb0 <__assert_func>
 80081aa:	2301      	movs	r3, #1
 80081ac:	6144      	str	r4, [r0, #20]
 80081ae:	6103      	str	r3, [r0, #16]
 80081b0:	bd10      	pop	{r4, pc}
 80081b2:	bf00      	nop
 80081b4:	080092d0 	.word	0x080092d0
 80081b8:	080092e1 	.word	0x080092e1

080081bc <__multiply>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	4614      	mov	r4, r2
 80081c2:	690a      	ldr	r2, [r1, #16]
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	bfa8      	it	ge
 80081ca:	4623      	movge	r3, r4
 80081cc:	460f      	mov	r7, r1
 80081ce:	bfa4      	itt	ge
 80081d0:	460c      	movge	r4, r1
 80081d2:	461f      	movge	r7, r3
 80081d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80081d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081dc:	68a3      	ldr	r3, [r4, #8]
 80081de:	6861      	ldr	r1, [r4, #4]
 80081e0:	eb0a 0609 	add.w	r6, sl, r9
 80081e4:	42b3      	cmp	r3, r6
 80081e6:	b085      	sub	sp, #20
 80081e8:	bfb8      	it	lt
 80081ea:	3101      	addlt	r1, #1
 80081ec:	f7ff fedc 	bl	8007fa8 <_Balloc>
 80081f0:	b930      	cbnz	r0, 8008200 <__multiply+0x44>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4b44      	ldr	r3, [pc, #272]	@ (8008308 <__multiply+0x14c>)
 80081f6:	4845      	ldr	r0, [pc, #276]	@ (800830c <__multiply+0x150>)
 80081f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081fc:	f000 fe58 	bl	8008eb0 <__assert_func>
 8008200:	f100 0514 	add.w	r5, r0, #20
 8008204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008208:	462b      	mov	r3, r5
 800820a:	2200      	movs	r2, #0
 800820c:	4543      	cmp	r3, r8
 800820e:	d321      	bcc.n	8008254 <__multiply+0x98>
 8008210:	f107 0114 	add.w	r1, r7, #20
 8008214:	f104 0214 	add.w	r2, r4, #20
 8008218:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800821c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	1b13      	subs	r3, r2, r4
 8008224:	3b15      	subs	r3, #21
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	3304      	adds	r3, #4
 800822c:	f104 0715 	add.w	r7, r4, #21
 8008230:	42ba      	cmp	r2, r7
 8008232:	bf38      	it	cc
 8008234:	2304      	movcc	r3, #4
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	9b02      	ldr	r3, [sp, #8]
 800823a:	9103      	str	r1, [sp, #12]
 800823c:	428b      	cmp	r3, r1
 800823e:	d80c      	bhi.n	800825a <__multiply+0x9e>
 8008240:	2e00      	cmp	r6, #0
 8008242:	dd03      	ble.n	800824c <__multiply+0x90>
 8008244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008248:	2b00      	cmp	r3, #0
 800824a:	d05b      	beq.n	8008304 <__multiply+0x148>
 800824c:	6106      	str	r6, [r0, #16]
 800824e:	b005      	add	sp, #20
 8008250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008254:	f843 2b04 	str.w	r2, [r3], #4
 8008258:	e7d8      	b.n	800820c <__multiply+0x50>
 800825a:	f8b1 a000 	ldrh.w	sl, [r1]
 800825e:	f1ba 0f00 	cmp.w	sl, #0
 8008262:	d024      	beq.n	80082ae <__multiply+0xf2>
 8008264:	f104 0e14 	add.w	lr, r4, #20
 8008268:	46a9      	mov	r9, r5
 800826a:	f04f 0c00 	mov.w	ip, #0
 800826e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008272:	f8d9 3000 	ldr.w	r3, [r9]
 8008276:	fa1f fb87 	uxth.w	fp, r7
 800827a:	b29b      	uxth	r3, r3
 800827c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008280:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008284:	f8d9 7000 	ldr.w	r7, [r9]
 8008288:	4463      	add	r3, ip
 800828a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800828e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008292:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008296:	b29b      	uxth	r3, r3
 8008298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800829c:	4572      	cmp	r2, lr
 800829e:	f849 3b04 	str.w	r3, [r9], #4
 80082a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082a6:	d8e2      	bhi.n	800826e <__multiply+0xb2>
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	f845 c003 	str.w	ip, [r5, r3]
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082b4:	3104      	adds	r1, #4
 80082b6:	f1b9 0f00 	cmp.w	r9, #0
 80082ba:	d021      	beq.n	8008300 <__multiply+0x144>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	f104 0c14 	add.w	ip, r4, #20
 80082c2:	46ae      	mov	lr, r5
 80082c4:	f04f 0a00 	mov.w	sl, #0
 80082c8:	f8bc b000 	ldrh.w	fp, [ip]
 80082cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80082d0:	fb09 770b 	mla	r7, r9, fp, r7
 80082d4:	4457      	add	r7, sl
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082dc:	f84e 3b04 	str.w	r3, [lr], #4
 80082e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082e8:	f8be 3000 	ldrh.w	r3, [lr]
 80082ec:	fb09 330a 	mla	r3, r9, sl, r3
 80082f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082f4:	4562      	cmp	r2, ip
 80082f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082fa:	d8e5      	bhi.n	80082c8 <__multiply+0x10c>
 80082fc:	9f01      	ldr	r7, [sp, #4]
 80082fe:	51eb      	str	r3, [r5, r7]
 8008300:	3504      	adds	r5, #4
 8008302:	e799      	b.n	8008238 <__multiply+0x7c>
 8008304:	3e01      	subs	r6, #1
 8008306:	e79b      	b.n	8008240 <__multiply+0x84>
 8008308:	080092d0 	.word	0x080092d0
 800830c:	080092e1 	.word	0x080092e1

08008310 <__pow5mult>:
 8008310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008314:	4615      	mov	r5, r2
 8008316:	f012 0203 	ands.w	r2, r2, #3
 800831a:	4607      	mov	r7, r0
 800831c:	460e      	mov	r6, r1
 800831e:	d007      	beq.n	8008330 <__pow5mult+0x20>
 8008320:	4c25      	ldr	r4, [pc, #148]	@ (80083b8 <__pow5mult+0xa8>)
 8008322:	3a01      	subs	r2, #1
 8008324:	2300      	movs	r3, #0
 8008326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800832a:	f7ff fe9f 	bl	800806c <__multadd>
 800832e:	4606      	mov	r6, r0
 8008330:	10ad      	asrs	r5, r5, #2
 8008332:	d03d      	beq.n	80083b0 <__pow5mult+0xa0>
 8008334:	69fc      	ldr	r4, [r7, #28]
 8008336:	b97c      	cbnz	r4, 8008358 <__pow5mult+0x48>
 8008338:	2010      	movs	r0, #16
 800833a:	f7ff fd7f 	bl	8007e3c <malloc>
 800833e:	4602      	mov	r2, r0
 8008340:	61f8      	str	r0, [r7, #28]
 8008342:	b928      	cbnz	r0, 8008350 <__pow5mult+0x40>
 8008344:	4b1d      	ldr	r3, [pc, #116]	@ (80083bc <__pow5mult+0xac>)
 8008346:	481e      	ldr	r0, [pc, #120]	@ (80083c0 <__pow5mult+0xb0>)
 8008348:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800834c:	f000 fdb0 	bl	8008eb0 <__assert_func>
 8008350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008354:	6004      	str	r4, [r0, #0]
 8008356:	60c4      	str	r4, [r0, #12]
 8008358:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800835c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008360:	b94c      	cbnz	r4, 8008376 <__pow5mult+0x66>
 8008362:	f240 2171 	movw	r1, #625	@ 0x271
 8008366:	4638      	mov	r0, r7
 8008368:	f7ff ff12 	bl	8008190 <__i2b>
 800836c:	2300      	movs	r3, #0
 800836e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008372:	4604      	mov	r4, r0
 8008374:	6003      	str	r3, [r0, #0]
 8008376:	f04f 0900 	mov.w	r9, #0
 800837a:	07eb      	lsls	r3, r5, #31
 800837c:	d50a      	bpl.n	8008394 <__pow5mult+0x84>
 800837e:	4631      	mov	r1, r6
 8008380:	4622      	mov	r2, r4
 8008382:	4638      	mov	r0, r7
 8008384:	f7ff ff1a 	bl	80081bc <__multiply>
 8008388:	4631      	mov	r1, r6
 800838a:	4680      	mov	r8, r0
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff fe4b 	bl	8008028 <_Bfree>
 8008392:	4646      	mov	r6, r8
 8008394:	106d      	asrs	r5, r5, #1
 8008396:	d00b      	beq.n	80083b0 <__pow5mult+0xa0>
 8008398:	6820      	ldr	r0, [r4, #0]
 800839a:	b938      	cbnz	r0, 80083ac <__pow5mult+0x9c>
 800839c:	4622      	mov	r2, r4
 800839e:	4621      	mov	r1, r4
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff ff0b 	bl	80081bc <__multiply>
 80083a6:	6020      	str	r0, [r4, #0]
 80083a8:	f8c0 9000 	str.w	r9, [r0]
 80083ac:	4604      	mov	r4, r0
 80083ae:	e7e4      	b.n	800837a <__pow5mult+0x6a>
 80083b0:	4630      	mov	r0, r6
 80083b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b6:	bf00      	nop
 80083b8:	0800933c 	.word	0x0800933c
 80083bc:	08009261 	.word	0x08009261
 80083c0:	080092e1 	.word	0x080092e1

080083c4 <__lshift>:
 80083c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c8:	460c      	mov	r4, r1
 80083ca:	6849      	ldr	r1, [r1, #4]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	4607      	mov	r7, r0
 80083d6:	4691      	mov	r9, r2
 80083d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083dc:	f108 0601 	add.w	r6, r8, #1
 80083e0:	42b3      	cmp	r3, r6
 80083e2:	db0b      	blt.n	80083fc <__lshift+0x38>
 80083e4:	4638      	mov	r0, r7
 80083e6:	f7ff fddf 	bl	8007fa8 <_Balloc>
 80083ea:	4605      	mov	r5, r0
 80083ec:	b948      	cbnz	r0, 8008402 <__lshift+0x3e>
 80083ee:	4602      	mov	r2, r0
 80083f0:	4b28      	ldr	r3, [pc, #160]	@ (8008494 <__lshift+0xd0>)
 80083f2:	4829      	ldr	r0, [pc, #164]	@ (8008498 <__lshift+0xd4>)
 80083f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083f8:	f000 fd5a 	bl	8008eb0 <__assert_func>
 80083fc:	3101      	adds	r1, #1
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	e7ee      	b.n	80083e0 <__lshift+0x1c>
 8008402:	2300      	movs	r3, #0
 8008404:	f100 0114 	add.w	r1, r0, #20
 8008408:	f100 0210 	add.w	r2, r0, #16
 800840c:	4618      	mov	r0, r3
 800840e:	4553      	cmp	r3, sl
 8008410:	db33      	blt.n	800847a <__lshift+0xb6>
 8008412:	6920      	ldr	r0, [r4, #16]
 8008414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008418:	f104 0314 	add.w	r3, r4, #20
 800841c:	f019 091f 	ands.w	r9, r9, #31
 8008420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008428:	d02b      	beq.n	8008482 <__lshift+0xbe>
 800842a:	f1c9 0e20 	rsb	lr, r9, #32
 800842e:	468a      	mov	sl, r1
 8008430:	2200      	movs	r2, #0
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	fa00 f009 	lsl.w	r0, r0, r9
 8008438:	4310      	orrs	r0, r2
 800843a:	f84a 0b04 	str.w	r0, [sl], #4
 800843e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008442:	459c      	cmp	ip, r3
 8008444:	fa22 f20e 	lsr.w	r2, r2, lr
 8008448:	d8f3      	bhi.n	8008432 <__lshift+0x6e>
 800844a:	ebac 0304 	sub.w	r3, ip, r4
 800844e:	3b15      	subs	r3, #21
 8008450:	f023 0303 	bic.w	r3, r3, #3
 8008454:	3304      	adds	r3, #4
 8008456:	f104 0015 	add.w	r0, r4, #21
 800845a:	4584      	cmp	ip, r0
 800845c:	bf38      	it	cc
 800845e:	2304      	movcc	r3, #4
 8008460:	50ca      	str	r2, [r1, r3]
 8008462:	b10a      	cbz	r2, 8008468 <__lshift+0xa4>
 8008464:	f108 0602 	add.w	r6, r8, #2
 8008468:	3e01      	subs	r6, #1
 800846a:	4638      	mov	r0, r7
 800846c:	612e      	str	r6, [r5, #16]
 800846e:	4621      	mov	r1, r4
 8008470:	f7ff fdda 	bl	8008028 <_Bfree>
 8008474:	4628      	mov	r0, r5
 8008476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847a:	f842 0f04 	str.w	r0, [r2, #4]!
 800847e:	3301      	adds	r3, #1
 8008480:	e7c5      	b.n	800840e <__lshift+0x4a>
 8008482:	3904      	subs	r1, #4
 8008484:	f853 2b04 	ldr.w	r2, [r3], #4
 8008488:	f841 2f04 	str.w	r2, [r1, #4]!
 800848c:	459c      	cmp	ip, r3
 800848e:	d8f9      	bhi.n	8008484 <__lshift+0xc0>
 8008490:	e7ea      	b.n	8008468 <__lshift+0xa4>
 8008492:	bf00      	nop
 8008494:	080092d0 	.word	0x080092d0
 8008498:	080092e1 	.word	0x080092e1

0800849c <__mcmp>:
 800849c:	690a      	ldr	r2, [r1, #16]
 800849e:	4603      	mov	r3, r0
 80084a0:	6900      	ldr	r0, [r0, #16]
 80084a2:	1a80      	subs	r0, r0, r2
 80084a4:	b530      	push	{r4, r5, lr}
 80084a6:	d10e      	bne.n	80084c6 <__mcmp+0x2a>
 80084a8:	3314      	adds	r3, #20
 80084aa:	3114      	adds	r1, #20
 80084ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084bc:	4295      	cmp	r5, r2
 80084be:	d003      	beq.n	80084c8 <__mcmp+0x2c>
 80084c0:	d205      	bcs.n	80084ce <__mcmp+0x32>
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295
 80084c6:	bd30      	pop	{r4, r5, pc}
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d3f3      	bcc.n	80084b4 <__mcmp+0x18>
 80084cc:	e7fb      	b.n	80084c6 <__mcmp+0x2a>
 80084ce:	2001      	movs	r0, #1
 80084d0:	e7f9      	b.n	80084c6 <__mcmp+0x2a>
	...

080084d4 <__mdiff>:
 80084d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4689      	mov	r9, r1
 80084da:	4606      	mov	r6, r0
 80084dc:	4611      	mov	r1, r2
 80084de:	4648      	mov	r0, r9
 80084e0:	4614      	mov	r4, r2
 80084e2:	f7ff ffdb 	bl	800849c <__mcmp>
 80084e6:	1e05      	subs	r5, r0, #0
 80084e8:	d112      	bne.n	8008510 <__mdiff+0x3c>
 80084ea:	4629      	mov	r1, r5
 80084ec:	4630      	mov	r0, r6
 80084ee:	f7ff fd5b 	bl	8007fa8 <_Balloc>
 80084f2:	4602      	mov	r2, r0
 80084f4:	b928      	cbnz	r0, 8008502 <__mdiff+0x2e>
 80084f6:	4b3f      	ldr	r3, [pc, #252]	@ (80085f4 <__mdiff+0x120>)
 80084f8:	f240 2137 	movw	r1, #567	@ 0x237
 80084fc:	483e      	ldr	r0, [pc, #248]	@ (80085f8 <__mdiff+0x124>)
 80084fe:	f000 fcd7 	bl	8008eb0 <__assert_func>
 8008502:	2301      	movs	r3, #1
 8008504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008508:	4610      	mov	r0, r2
 800850a:	b003      	add	sp, #12
 800850c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008510:	bfbc      	itt	lt
 8008512:	464b      	movlt	r3, r9
 8008514:	46a1      	movlt	r9, r4
 8008516:	4630      	mov	r0, r6
 8008518:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800851c:	bfba      	itte	lt
 800851e:	461c      	movlt	r4, r3
 8008520:	2501      	movlt	r5, #1
 8008522:	2500      	movge	r5, #0
 8008524:	f7ff fd40 	bl	8007fa8 <_Balloc>
 8008528:	4602      	mov	r2, r0
 800852a:	b918      	cbnz	r0, 8008534 <__mdiff+0x60>
 800852c:	4b31      	ldr	r3, [pc, #196]	@ (80085f4 <__mdiff+0x120>)
 800852e:	f240 2145 	movw	r1, #581	@ 0x245
 8008532:	e7e3      	b.n	80084fc <__mdiff+0x28>
 8008534:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008538:	6926      	ldr	r6, [r4, #16]
 800853a:	60c5      	str	r5, [r0, #12]
 800853c:	f109 0310 	add.w	r3, r9, #16
 8008540:	f109 0514 	add.w	r5, r9, #20
 8008544:	f104 0e14 	add.w	lr, r4, #20
 8008548:	f100 0b14 	add.w	fp, r0, #20
 800854c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008550:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	46d9      	mov	r9, fp
 8008558:	f04f 0c00 	mov.w	ip, #0
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008562:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	fa1f f38a 	uxth.w	r3, sl
 800856c:	4619      	mov	r1, r3
 800856e:	b283      	uxth	r3, r0
 8008570:	1acb      	subs	r3, r1, r3
 8008572:	0c00      	lsrs	r0, r0, #16
 8008574:	4463      	add	r3, ip
 8008576:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800857a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800857e:	b29b      	uxth	r3, r3
 8008580:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008584:	4576      	cmp	r6, lr
 8008586:	f849 3b04 	str.w	r3, [r9], #4
 800858a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800858e:	d8e5      	bhi.n	800855c <__mdiff+0x88>
 8008590:	1b33      	subs	r3, r6, r4
 8008592:	3b15      	subs	r3, #21
 8008594:	f023 0303 	bic.w	r3, r3, #3
 8008598:	3415      	adds	r4, #21
 800859a:	3304      	adds	r3, #4
 800859c:	42a6      	cmp	r6, r4
 800859e:	bf38      	it	cc
 80085a0:	2304      	movcc	r3, #4
 80085a2:	441d      	add	r5, r3
 80085a4:	445b      	add	r3, fp
 80085a6:	461e      	mov	r6, r3
 80085a8:	462c      	mov	r4, r5
 80085aa:	4544      	cmp	r4, r8
 80085ac:	d30e      	bcc.n	80085cc <__mdiff+0xf8>
 80085ae:	f108 0103 	add.w	r1, r8, #3
 80085b2:	1b49      	subs	r1, r1, r5
 80085b4:	f021 0103 	bic.w	r1, r1, #3
 80085b8:	3d03      	subs	r5, #3
 80085ba:	45a8      	cmp	r8, r5
 80085bc:	bf38      	it	cc
 80085be:	2100      	movcc	r1, #0
 80085c0:	440b      	add	r3, r1
 80085c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085c6:	b191      	cbz	r1, 80085ee <__mdiff+0x11a>
 80085c8:	6117      	str	r7, [r2, #16]
 80085ca:	e79d      	b.n	8008508 <__mdiff+0x34>
 80085cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80085d0:	46e6      	mov	lr, ip
 80085d2:	0c08      	lsrs	r0, r1, #16
 80085d4:	fa1c fc81 	uxtah	ip, ip, r1
 80085d8:	4471      	add	r1, lr
 80085da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085de:	b289      	uxth	r1, r1
 80085e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085e4:	f846 1b04 	str.w	r1, [r6], #4
 80085e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085ec:	e7dd      	b.n	80085aa <__mdiff+0xd6>
 80085ee:	3f01      	subs	r7, #1
 80085f0:	e7e7      	b.n	80085c2 <__mdiff+0xee>
 80085f2:	bf00      	nop
 80085f4:	080092d0 	.word	0x080092d0
 80085f8:	080092e1 	.word	0x080092e1

080085fc <__d2b>:
 80085fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008600:	460f      	mov	r7, r1
 8008602:	2101      	movs	r1, #1
 8008604:	ec59 8b10 	vmov	r8, r9, d0
 8008608:	4616      	mov	r6, r2
 800860a:	f7ff fccd 	bl	8007fa8 <_Balloc>
 800860e:	4604      	mov	r4, r0
 8008610:	b930      	cbnz	r0, 8008620 <__d2b+0x24>
 8008612:	4602      	mov	r2, r0
 8008614:	4b23      	ldr	r3, [pc, #140]	@ (80086a4 <__d2b+0xa8>)
 8008616:	4824      	ldr	r0, [pc, #144]	@ (80086a8 <__d2b+0xac>)
 8008618:	f240 310f 	movw	r1, #783	@ 0x30f
 800861c:	f000 fc48 	bl	8008eb0 <__assert_func>
 8008620:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008624:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008628:	b10d      	cbz	r5, 800862e <__d2b+0x32>
 800862a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	f1b8 0300 	subs.w	r3, r8, #0
 8008634:	d023      	beq.n	800867e <__d2b+0x82>
 8008636:	4668      	mov	r0, sp
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	f7ff fd7c 	bl	8008136 <__lo0bits>
 800863e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008642:	b1d0      	cbz	r0, 800867a <__d2b+0x7e>
 8008644:	f1c0 0320 	rsb	r3, r0, #32
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	430b      	orrs	r3, r1
 800864e:	40c2      	lsrs	r2, r0
 8008650:	6163      	str	r3, [r4, #20]
 8008652:	9201      	str	r2, [sp, #4]
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	61a3      	str	r3, [r4, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	bf0c      	ite	eq
 800865c:	2201      	moveq	r2, #1
 800865e:	2202      	movne	r2, #2
 8008660:	6122      	str	r2, [r4, #16]
 8008662:	b1a5      	cbz	r5, 800868e <__d2b+0x92>
 8008664:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008668:	4405      	add	r5, r0
 800866a:	603d      	str	r5, [r7, #0]
 800866c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008670:	6030      	str	r0, [r6, #0]
 8008672:	4620      	mov	r0, r4
 8008674:	b003      	add	sp, #12
 8008676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800867a:	6161      	str	r1, [r4, #20]
 800867c:	e7ea      	b.n	8008654 <__d2b+0x58>
 800867e:	a801      	add	r0, sp, #4
 8008680:	f7ff fd59 	bl	8008136 <__lo0bits>
 8008684:	9b01      	ldr	r3, [sp, #4]
 8008686:	6163      	str	r3, [r4, #20]
 8008688:	3020      	adds	r0, #32
 800868a:	2201      	movs	r2, #1
 800868c:	e7e8      	b.n	8008660 <__d2b+0x64>
 800868e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008692:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008696:	6038      	str	r0, [r7, #0]
 8008698:	6918      	ldr	r0, [r3, #16]
 800869a:	f7ff fd2d 	bl	80080f8 <__hi0bits>
 800869e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086a2:	e7e5      	b.n	8008670 <__d2b+0x74>
 80086a4:	080092d0 	.word	0x080092d0
 80086a8:	080092e1 	.word	0x080092e1

080086ac <__ssputs_r>:
 80086ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b0:	688e      	ldr	r6, [r1, #8]
 80086b2:	461f      	mov	r7, r3
 80086b4:	42be      	cmp	r6, r7
 80086b6:	680b      	ldr	r3, [r1, #0]
 80086b8:	4682      	mov	sl, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	4690      	mov	r8, r2
 80086be:	d82d      	bhi.n	800871c <__ssputs_r+0x70>
 80086c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086c8:	d026      	beq.n	8008718 <__ssputs_r+0x6c>
 80086ca:	6965      	ldr	r5, [r4, #20]
 80086cc:	6909      	ldr	r1, [r1, #16]
 80086ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086d2:	eba3 0901 	sub.w	r9, r3, r1
 80086d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086da:	1c7b      	adds	r3, r7, #1
 80086dc:	444b      	add	r3, r9
 80086de:	106d      	asrs	r5, r5, #1
 80086e0:	429d      	cmp	r5, r3
 80086e2:	bf38      	it	cc
 80086e4:	461d      	movcc	r5, r3
 80086e6:	0553      	lsls	r3, r2, #21
 80086e8:	d527      	bpl.n	800873a <__ssputs_r+0x8e>
 80086ea:	4629      	mov	r1, r5
 80086ec:	f7ff fbd0 	bl	8007e90 <_malloc_r>
 80086f0:	4606      	mov	r6, r0
 80086f2:	b360      	cbz	r0, 800874e <__ssputs_r+0xa2>
 80086f4:	6921      	ldr	r1, [r4, #16]
 80086f6:	464a      	mov	r2, r9
 80086f8:	f000 fbcc 	bl	8008e94 <memcpy>
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	6126      	str	r6, [r4, #16]
 800870a:	6165      	str	r5, [r4, #20]
 800870c:	444e      	add	r6, r9
 800870e:	eba5 0509 	sub.w	r5, r5, r9
 8008712:	6026      	str	r6, [r4, #0]
 8008714:	60a5      	str	r5, [r4, #8]
 8008716:	463e      	mov	r6, r7
 8008718:	42be      	cmp	r6, r7
 800871a:	d900      	bls.n	800871e <__ssputs_r+0x72>
 800871c:	463e      	mov	r6, r7
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	4632      	mov	r2, r6
 8008722:	4641      	mov	r1, r8
 8008724:	f000 fb6a 	bl	8008dfc <memmove>
 8008728:	68a3      	ldr	r3, [r4, #8]
 800872a:	1b9b      	subs	r3, r3, r6
 800872c:	60a3      	str	r3, [r4, #8]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	4433      	add	r3, r6
 8008732:	6023      	str	r3, [r4, #0]
 8008734:	2000      	movs	r0, #0
 8008736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873a:	462a      	mov	r2, r5
 800873c:	f000 fbfc 	bl	8008f38 <_realloc_r>
 8008740:	4606      	mov	r6, r0
 8008742:	2800      	cmp	r0, #0
 8008744:	d1e0      	bne.n	8008708 <__ssputs_r+0x5c>
 8008746:	6921      	ldr	r1, [r4, #16]
 8008748:	4650      	mov	r0, sl
 800874a:	f7ff fb2d 	bl	8007da8 <_free_r>
 800874e:	230c      	movs	r3, #12
 8008750:	f8ca 3000 	str.w	r3, [sl]
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	e7e9      	b.n	8008736 <__ssputs_r+0x8a>
	...

08008764 <_svfiprintf_r>:
 8008764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	4698      	mov	r8, r3
 800876a:	898b      	ldrh	r3, [r1, #12]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	b09d      	sub	sp, #116	@ 0x74
 8008770:	4607      	mov	r7, r0
 8008772:	460d      	mov	r5, r1
 8008774:	4614      	mov	r4, r2
 8008776:	d510      	bpl.n	800879a <_svfiprintf_r+0x36>
 8008778:	690b      	ldr	r3, [r1, #16]
 800877a:	b973      	cbnz	r3, 800879a <_svfiprintf_r+0x36>
 800877c:	2140      	movs	r1, #64	@ 0x40
 800877e:	f7ff fb87 	bl	8007e90 <_malloc_r>
 8008782:	6028      	str	r0, [r5, #0]
 8008784:	6128      	str	r0, [r5, #16]
 8008786:	b930      	cbnz	r0, 8008796 <_svfiprintf_r+0x32>
 8008788:	230c      	movs	r3, #12
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	b01d      	add	sp, #116	@ 0x74
 8008792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008796:	2340      	movs	r3, #64	@ 0x40
 8008798:	616b      	str	r3, [r5, #20]
 800879a:	2300      	movs	r3, #0
 800879c:	9309      	str	r3, [sp, #36]	@ 0x24
 800879e:	2320      	movs	r3, #32
 80087a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a8:	2330      	movs	r3, #48	@ 0x30
 80087aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008948 <_svfiprintf_r+0x1e4>
 80087ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087b2:	f04f 0901 	mov.w	r9, #1
 80087b6:	4623      	mov	r3, r4
 80087b8:	469a      	mov	sl, r3
 80087ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087be:	b10a      	cbz	r2, 80087c4 <_svfiprintf_r+0x60>
 80087c0:	2a25      	cmp	r2, #37	@ 0x25
 80087c2:	d1f9      	bne.n	80087b8 <_svfiprintf_r+0x54>
 80087c4:	ebba 0b04 	subs.w	fp, sl, r4
 80087c8:	d00b      	beq.n	80087e2 <_svfiprintf_r+0x7e>
 80087ca:	465b      	mov	r3, fp
 80087cc:	4622      	mov	r2, r4
 80087ce:	4629      	mov	r1, r5
 80087d0:	4638      	mov	r0, r7
 80087d2:	f7ff ff6b 	bl	80086ac <__ssputs_r>
 80087d6:	3001      	adds	r0, #1
 80087d8:	f000 80a7 	beq.w	800892a <_svfiprintf_r+0x1c6>
 80087dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087de:	445a      	add	r2, fp
 80087e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80087e2:	f89a 3000 	ldrb.w	r3, [sl]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 809f 	beq.w	800892a <_svfiprintf_r+0x1c6>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295
 80087f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087f6:	f10a 0a01 	add.w	sl, sl, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	9307      	str	r3, [sp, #28]
 80087fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008802:	931a      	str	r3, [sp, #104]	@ 0x68
 8008804:	4654      	mov	r4, sl
 8008806:	2205      	movs	r2, #5
 8008808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800880c:	484e      	ldr	r0, [pc, #312]	@ (8008948 <_svfiprintf_r+0x1e4>)
 800880e:	f7f7 fcdf 	bl	80001d0 <memchr>
 8008812:	9a04      	ldr	r2, [sp, #16]
 8008814:	b9d8      	cbnz	r0, 800884e <_svfiprintf_r+0xea>
 8008816:	06d0      	lsls	r0, r2, #27
 8008818:	bf44      	itt	mi
 800881a:	2320      	movmi	r3, #32
 800881c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008820:	0711      	lsls	r1, r2, #28
 8008822:	bf44      	itt	mi
 8008824:	232b      	movmi	r3, #43	@ 0x2b
 8008826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800882a:	f89a 3000 	ldrb.w	r3, [sl]
 800882e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008830:	d015      	beq.n	800885e <_svfiprintf_r+0xfa>
 8008832:	9a07      	ldr	r2, [sp, #28]
 8008834:	4654      	mov	r4, sl
 8008836:	2000      	movs	r0, #0
 8008838:	f04f 0c0a 	mov.w	ip, #10
 800883c:	4621      	mov	r1, r4
 800883e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008842:	3b30      	subs	r3, #48	@ 0x30
 8008844:	2b09      	cmp	r3, #9
 8008846:	d94b      	bls.n	80088e0 <_svfiprintf_r+0x17c>
 8008848:	b1b0      	cbz	r0, 8008878 <_svfiprintf_r+0x114>
 800884a:	9207      	str	r2, [sp, #28]
 800884c:	e014      	b.n	8008878 <_svfiprintf_r+0x114>
 800884e:	eba0 0308 	sub.w	r3, r0, r8
 8008852:	fa09 f303 	lsl.w	r3, r9, r3
 8008856:	4313      	orrs	r3, r2
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	46a2      	mov	sl, r4
 800885c:	e7d2      	b.n	8008804 <_svfiprintf_r+0xa0>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	1d19      	adds	r1, r3, #4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	9103      	str	r1, [sp, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	bfbb      	ittet	lt
 800886a:	425b      	neglt	r3, r3
 800886c:	f042 0202 	orrlt.w	r2, r2, #2
 8008870:	9307      	strge	r3, [sp, #28]
 8008872:	9307      	strlt	r3, [sp, #28]
 8008874:	bfb8      	it	lt
 8008876:	9204      	strlt	r2, [sp, #16]
 8008878:	7823      	ldrb	r3, [r4, #0]
 800887a:	2b2e      	cmp	r3, #46	@ 0x2e
 800887c:	d10a      	bne.n	8008894 <_svfiprintf_r+0x130>
 800887e:	7863      	ldrb	r3, [r4, #1]
 8008880:	2b2a      	cmp	r3, #42	@ 0x2a
 8008882:	d132      	bne.n	80088ea <_svfiprintf_r+0x186>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	1d1a      	adds	r2, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	9203      	str	r2, [sp, #12]
 800888c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008890:	3402      	adds	r4, #2
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008958 <_svfiprintf_r+0x1f4>
 8008898:	7821      	ldrb	r1, [r4, #0]
 800889a:	2203      	movs	r2, #3
 800889c:	4650      	mov	r0, sl
 800889e:	f7f7 fc97 	bl	80001d0 <memchr>
 80088a2:	b138      	cbz	r0, 80088b4 <_svfiprintf_r+0x150>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	eba0 000a 	sub.w	r0, r0, sl
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	4082      	lsls	r2, r0
 80088ae:	4313      	orrs	r3, r2
 80088b0:	3401      	adds	r4, #1
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b8:	4824      	ldr	r0, [pc, #144]	@ (800894c <_svfiprintf_r+0x1e8>)
 80088ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088be:	2206      	movs	r2, #6
 80088c0:	f7f7 fc86 	bl	80001d0 <memchr>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d036      	beq.n	8008936 <_svfiprintf_r+0x1d2>
 80088c8:	4b21      	ldr	r3, [pc, #132]	@ (8008950 <_svfiprintf_r+0x1ec>)
 80088ca:	bb1b      	cbnz	r3, 8008914 <_svfiprintf_r+0x1b0>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	3307      	adds	r3, #7
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	3308      	adds	r3, #8
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088da:	4433      	add	r3, r6
 80088dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088de:	e76a      	b.n	80087b6 <_svfiprintf_r+0x52>
 80088e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088e4:	460c      	mov	r4, r1
 80088e6:	2001      	movs	r0, #1
 80088e8:	e7a8      	b.n	800883c <_svfiprintf_r+0xd8>
 80088ea:	2300      	movs	r3, #0
 80088ec:	3401      	adds	r4, #1
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	4619      	mov	r1, r3
 80088f2:	f04f 0c0a 	mov.w	ip, #10
 80088f6:	4620      	mov	r0, r4
 80088f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088fc:	3a30      	subs	r2, #48	@ 0x30
 80088fe:	2a09      	cmp	r2, #9
 8008900:	d903      	bls.n	800890a <_svfiprintf_r+0x1a6>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0c6      	beq.n	8008894 <_svfiprintf_r+0x130>
 8008906:	9105      	str	r1, [sp, #20]
 8008908:	e7c4      	b.n	8008894 <_svfiprintf_r+0x130>
 800890a:	fb0c 2101 	mla	r1, ip, r1, r2
 800890e:	4604      	mov	r4, r0
 8008910:	2301      	movs	r3, #1
 8008912:	e7f0      	b.n	80088f6 <_svfiprintf_r+0x192>
 8008914:	ab03      	add	r3, sp, #12
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	462a      	mov	r2, r5
 800891a:	4b0e      	ldr	r3, [pc, #56]	@ (8008954 <_svfiprintf_r+0x1f0>)
 800891c:	a904      	add	r1, sp, #16
 800891e:	4638      	mov	r0, r7
 8008920:	f7fd fd94 	bl	800644c <_printf_float>
 8008924:	1c42      	adds	r2, r0, #1
 8008926:	4606      	mov	r6, r0
 8008928:	d1d6      	bne.n	80088d8 <_svfiprintf_r+0x174>
 800892a:	89ab      	ldrh	r3, [r5, #12]
 800892c:	065b      	lsls	r3, r3, #25
 800892e:	f53f af2d 	bmi.w	800878c <_svfiprintf_r+0x28>
 8008932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008934:	e72c      	b.n	8008790 <_svfiprintf_r+0x2c>
 8008936:	ab03      	add	r3, sp, #12
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	462a      	mov	r2, r5
 800893c:	4b05      	ldr	r3, [pc, #20]	@ (8008954 <_svfiprintf_r+0x1f0>)
 800893e:	a904      	add	r1, sp, #16
 8008940:	4638      	mov	r0, r7
 8008942:	f7fe f81b 	bl	800697c <_printf_i>
 8008946:	e7ed      	b.n	8008924 <_svfiprintf_r+0x1c0>
 8008948:	08009438 	.word	0x08009438
 800894c:	08009442 	.word	0x08009442
 8008950:	0800644d 	.word	0x0800644d
 8008954:	080086ad 	.word	0x080086ad
 8008958:	0800943e 	.word	0x0800943e

0800895c <__sfputc_r>:
 800895c:	6893      	ldr	r3, [r2, #8]
 800895e:	3b01      	subs	r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	b410      	push	{r4}
 8008964:	6093      	str	r3, [r2, #8]
 8008966:	da08      	bge.n	800897a <__sfputc_r+0x1e>
 8008968:	6994      	ldr	r4, [r2, #24]
 800896a:	42a3      	cmp	r3, r4
 800896c:	db01      	blt.n	8008972 <__sfputc_r+0x16>
 800896e:	290a      	cmp	r1, #10
 8008970:	d103      	bne.n	800897a <__sfputc_r+0x1e>
 8008972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008976:	f7fe bab6 	b.w	8006ee6 <__swbuf_r>
 800897a:	6813      	ldr	r3, [r2, #0]
 800897c:	1c58      	adds	r0, r3, #1
 800897e:	6010      	str	r0, [r2, #0]
 8008980:	7019      	strb	r1, [r3, #0]
 8008982:	4608      	mov	r0, r1
 8008984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008988:	4770      	bx	lr

0800898a <__sfputs_r>:
 800898a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898c:	4606      	mov	r6, r0
 800898e:	460f      	mov	r7, r1
 8008990:	4614      	mov	r4, r2
 8008992:	18d5      	adds	r5, r2, r3
 8008994:	42ac      	cmp	r4, r5
 8008996:	d101      	bne.n	800899c <__sfputs_r+0x12>
 8008998:	2000      	movs	r0, #0
 800899a:	e007      	b.n	80089ac <__sfputs_r+0x22>
 800899c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a0:	463a      	mov	r2, r7
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7ff ffda 	bl	800895c <__sfputc_r>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d1f3      	bne.n	8008994 <__sfputs_r+0xa>
 80089ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089b0 <_vfiprintf_r>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	460d      	mov	r5, r1
 80089b6:	b09d      	sub	sp, #116	@ 0x74
 80089b8:	4614      	mov	r4, r2
 80089ba:	4698      	mov	r8, r3
 80089bc:	4606      	mov	r6, r0
 80089be:	b118      	cbz	r0, 80089c8 <_vfiprintf_r+0x18>
 80089c0:	6a03      	ldr	r3, [r0, #32]
 80089c2:	b90b      	cbnz	r3, 80089c8 <_vfiprintf_r+0x18>
 80089c4:	f7fe f986 	bl	8006cd4 <__sinit>
 80089c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089ca:	07d9      	lsls	r1, r3, #31
 80089cc:	d405      	bmi.n	80089da <_vfiprintf_r+0x2a>
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	059a      	lsls	r2, r3, #22
 80089d2:	d402      	bmi.n	80089da <_vfiprintf_r+0x2a>
 80089d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089d6:	f7fe fb98 	bl	800710a <__retarget_lock_acquire_recursive>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	071b      	lsls	r3, r3, #28
 80089de:	d501      	bpl.n	80089e4 <_vfiprintf_r+0x34>
 80089e0:	692b      	ldr	r3, [r5, #16]
 80089e2:	b99b      	cbnz	r3, 8008a0c <_vfiprintf_r+0x5c>
 80089e4:	4629      	mov	r1, r5
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7fe fabc 	bl	8006f64 <__swsetup_r>
 80089ec:	b170      	cbz	r0, 8008a0c <_vfiprintf_r+0x5c>
 80089ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089f0:	07dc      	lsls	r4, r3, #31
 80089f2:	d504      	bpl.n	80089fe <_vfiprintf_r+0x4e>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	b01d      	add	sp, #116	@ 0x74
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fe:	89ab      	ldrh	r3, [r5, #12]
 8008a00:	0598      	lsls	r0, r3, #22
 8008a02:	d4f7      	bmi.n	80089f4 <_vfiprintf_r+0x44>
 8008a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a06:	f7fe fb81 	bl	800710c <__retarget_lock_release_recursive>
 8008a0a:	e7f3      	b.n	80089f4 <_vfiprintf_r+0x44>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a10:	2320      	movs	r3, #32
 8008a12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a1a:	2330      	movs	r3, #48	@ 0x30
 8008a1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bcc <_vfiprintf_r+0x21c>
 8008a20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a24:	f04f 0901 	mov.w	r9, #1
 8008a28:	4623      	mov	r3, r4
 8008a2a:	469a      	mov	sl, r3
 8008a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a30:	b10a      	cbz	r2, 8008a36 <_vfiprintf_r+0x86>
 8008a32:	2a25      	cmp	r2, #37	@ 0x25
 8008a34:	d1f9      	bne.n	8008a2a <_vfiprintf_r+0x7a>
 8008a36:	ebba 0b04 	subs.w	fp, sl, r4
 8008a3a:	d00b      	beq.n	8008a54 <_vfiprintf_r+0xa4>
 8008a3c:	465b      	mov	r3, fp
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7ff ffa1 	bl	800898a <__sfputs_r>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	f000 80a7 	beq.w	8008b9c <_vfiprintf_r+0x1ec>
 8008a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a50:	445a      	add	r2, fp
 8008a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a54:	f89a 3000 	ldrb.w	r3, [sl]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 809f 	beq.w	8008b9c <_vfiprintf_r+0x1ec>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f04f 32ff 	mov.w	r2, #4294967295
 8008a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a68:	f10a 0a01 	add.w	sl, sl, #1
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	9307      	str	r3, [sp, #28]
 8008a70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a76:	4654      	mov	r4, sl
 8008a78:	2205      	movs	r2, #5
 8008a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7e:	4853      	ldr	r0, [pc, #332]	@ (8008bcc <_vfiprintf_r+0x21c>)
 8008a80:	f7f7 fba6 	bl	80001d0 <memchr>
 8008a84:	9a04      	ldr	r2, [sp, #16]
 8008a86:	b9d8      	cbnz	r0, 8008ac0 <_vfiprintf_r+0x110>
 8008a88:	06d1      	lsls	r1, r2, #27
 8008a8a:	bf44      	itt	mi
 8008a8c:	2320      	movmi	r3, #32
 8008a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a92:	0713      	lsls	r3, r2, #28
 8008a94:	bf44      	itt	mi
 8008a96:	232b      	movmi	r3, #43	@ 0x2b
 8008a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa2:	d015      	beq.n	8008ad0 <_vfiprintf_r+0x120>
 8008aa4:	9a07      	ldr	r2, [sp, #28]
 8008aa6:	4654      	mov	r4, sl
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	f04f 0c0a 	mov.w	ip, #10
 8008aae:	4621      	mov	r1, r4
 8008ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab4:	3b30      	subs	r3, #48	@ 0x30
 8008ab6:	2b09      	cmp	r3, #9
 8008ab8:	d94b      	bls.n	8008b52 <_vfiprintf_r+0x1a2>
 8008aba:	b1b0      	cbz	r0, 8008aea <_vfiprintf_r+0x13a>
 8008abc:	9207      	str	r2, [sp, #28]
 8008abe:	e014      	b.n	8008aea <_vfiprintf_r+0x13a>
 8008ac0:	eba0 0308 	sub.w	r3, r0, r8
 8008ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	46a2      	mov	sl, r4
 8008ace:	e7d2      	b.n	8008a76 <_vfiprintf_r+0xc6>
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	1d19      	adds	r1, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	9103      	str	r1, [sp, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bfbb      	ittet	lt
 8008adc:	425b      	neglt	r3, r3
 8008ade:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae2:	9307      	strge	r3, [sp, #28]
 8008ae4:	9307      	strlt	r3, [sp, #28]
 8008ae6:	bfb8      	it	lt
 8008ae8:	9204      	strlt	r2, [sp, #16]
 8008aea:	7823      	ldrb	r3, [r4, #0]
 8008aec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aee:	d10a      	bne.n	8008b06 <_vfiprintf_r+0x156>
 8008af0:	7863      	ldrb	r3, [r4, #1]
 8008af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af4:	d132      	bne.n	8008b5c <_vfiprintf_r+0x1ac>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	1d1a      	adds	r2, r3, #4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	9203      	str	r2, [sp, #12]
 8008afe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b02:	3402      	adds	r4, #2
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008bdc <_vfiprintf_r+0x22c>
 8008b0a:	7821      	ldrb	r1, [r4, #0]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	4650      	mov	r0, sl
 8008b10:	f7f7 fb5e 	bl	80001d0 <memchr>
 8008b14:	b138      	cbz	r0, 8008b26 <_vfiprintf_r+0x176>
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	eba0 000a 	sub.w	r0, r0, sl
 8008b1c:	2240      	movs	r2, #64	@ 0x40
 8008b1e:	4082      	lsls	r2, r0
 8008b20:	4313      	orrs	r3, r2
 8008b22:	3401      	adds	r4, #1
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2a:	4829      	ldr	r0, [pc, #164]	@ (8008bd0 <_vfiprintf_r+0x220>)
 8008b2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b30:	2206      	movs	r2, #6
 8008b32:	f7f7 fb4d 	bl	80001d0 <memchr>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d03f      	beq.n	8008bba <_vfiprintf_r+0x20a>
 8008b3a:	4b26      	ldr	r3, [pc, #152]	@ (8008bd4 <_vfiprintf_r+0x224>)
 8008b3c:	bb1b      	cbnz	r3, 8008b86 <_vfiprintf_r+0x1d6>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	3307      	adds	r3, #7
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	3308      	adds	r3, #8
 8008b48:	9303      	str	r3, [sp, #12]
 8008b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4c:	443b      	add	r3, r7
 8008b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b50:	e76a      	b.n	8008a28 <_vfiprintf_r+0x78>
 8008b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b56:	460c      	mov	r4, r1
 8008b58:	2001      	movs	r0, #1
 8008b5a:	e7a8      	b.n	8008aae <_vfiprintf_r+0xfe>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	3401      	adds	r4, #1
 8008b60:	9305      	str	r3, [sp, #20]
 8008b62:	4619      	mov	r1, r3
 8008b64:	f04f 0c0a 	mov.w	ip, #10
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6e:	3a30      	subs	r2, #48	@ 0x30
 8008b70:	2a09      	cmp	r2, #9
 8008b72:	d903      	bls.n	8008b7c <_vfiprintf_r+0x1cc>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0c6      	beq.n	8008b06 <_vfiprintf_r+0x156>
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	e7c4      	b.n	8008b06 <_vfiprintf_r+0x156>
 8008b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b80:	4604      	mov	r4, r0
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7f0      	b.n	8008b68 <_vfiprintf_r+0x1b8>
 8008b86:	ab03      	add	r3, sp, #12
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	4b12      	ldr	r3, [pc, #72]	@ (8008bd8 <_vfiprintf_r+0x228>)
 8008b8e:	a904      	add	r1, sp, #16
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7fd fc5b 	bl	800644c <_printf_float>
 8008b96:	4607      	mov	r7, r0
 8008b98:	1c78      	adds	r0, r7, #1
 8008b9a:	d1d6      	bne.n	8008b4a <_vfiprintf_r+0x19a>
 8008b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b9e:	07d9      	lsls	r1, r3, #31
 8008ba0:	d405      	bmi.n	8008bae <_vfiprintf_r+0x1fe>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	059a      	lsls	r2, r3, #22
 8008ba6:	d402      	bmi.n	8008bae <_vfiprintf_r+0x1fe>
 8008ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008baa:	f7fe faaf 	bl	800710c <__retarget_lock_release_recursive>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	065b      	lsls	r3, r3, #25
 8008bb2:	f53f af1f 	bmi.w	80089f4 <_vfiprintf_r+0x44>
 8008bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bb8:	e71e      	b.n	80089f8 <_vfiprintf_r+0x48>
 8008bba:	ab03      	add	r3, sp, #12
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	462a      	mov	r2, r5
 8008bc0:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <_vfiprintf_r+0x228>)
 8008bc2:	a904      	add	r1, sp, #16
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7fd fed9 	bl	800697c <_printf_i>
 8008bca:	e7e4      	b.n	8008b96 <_vfiprintf_r+0x1e6>
 8008bcc:	08009438 	.word	0x08009438
 8008bd0:	08009442 	.word	0x08009442
 8008bd4:	0800644d 	.word	0x0800644d
 8008bd8:	0800898b 	.word	0x0800898b
 8008bdc:	0800943e 	.word	0x0800943e

08008be0 <__sflush_r>:
 8008be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	0716      	lsls	r6, r2, #28
 8008bea:	4605      	mov	r5, r0
 8008bec:	460c      	mov	r4, r1
 8008bee:	d454      	bmi.n	8008c9a <__sflush_r+0xba>
 8008bf0:	684b      	ldr	r3, [r1, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dc02      	bgt.n	8008bfc <__sflush_r+0x1c>
 8008bf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	dd48      	ble.n	8008c8e <__sflush_r+0xae>
 8008bfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	d045      	beq.n	8008c8e <__sflush_r+0xae>
 8008c02:	2300      	movs	r3, #0
 8008c04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c08:	682f      	ldr	r7, [r5, #0]
 8008c0a:	6a21      	ldr	r1, [r4, #32]
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	d030      	beq.n	8008c72 <__sflush_r+0x92>
 8008c10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	0759      	lsls	r1, r3, #29
 8008c16:	d505      	bpl.n	8008c24 <__sflush_r+0x44>
 8008c18:	6863      	ldr	r3, [r4, #4]
 8008c1a:	1ad2      	subs	r2, r2, r3
 8008c1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c1e:	b10b      	cbz	r3, 8008c24 <__sflush_r+0x44>
 8008c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c22:	1ad2      	subs	r2, r2, r3
 8008c24:	2300      	movs	r3, #0
 8008c26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c28:	6a21      	ldr	r1, [r4, #32]
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	47b0      	blx	r6
 8008c2e:	1c43      	adds	r3, r0, #1
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	d106      	bne.n	8008c42 <__sflush_r+0x62>
 8008c34:	6829      	ldr	r1, [r5, #0]
 8008c36:	291d      	cmp	r1, #29
 8008c38:	d82b      	bhi.n	8008c92 <__sflush_r+0xb2>
 8008c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce4 <__sflush_r+0x104>)
 8008c3c:	410a      	asrs	r2, r1
 8008c3e:	07d6      	lsls	r6, r2, #31
 8008c40:	d427      	bmi.n	8008c92 <__sflush_r+0xb2>
 8008c42:	2200      	movs	r2, #0
 8008c44:	6062      	str	r2, [r4, #4]
 8008c46:	04d9      	lsls	r1, r3, #19
 8008c48:	6922      	ldr	r2, [r4, #16]
 8008c4a:	6022      	str	r2, [r4, #0]
 8008c4c:	d504      	bpl.n	8008c58 <__sflush_r+0x78>
 8008c4e:	1c42      	adds	r2, r0, #1
 8008c50:	d101      	bne.n	8008c56 <__sflush_r+0x76>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	b903      	cbnz	r3, 8008c58 <__sflush_r+0x78>
 8008c56:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c5a:	602f      	str	r7, [r5, #0]
 8008c5c:	b1b9      	cbz	r1, 8008c8e <__sflush_r+0xae>
 8008c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c62:	4299      	cmp	r1, r3
 8008c64:	d002      	beq.n	8008c6c <__sflush_r+0x8c>
 8008c66:	4628      	mov	r0, r5
 8008c68:	f7ff f89e 	bl	8007da8 <_free_r>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c70:	e00d      	b.n	8008c8e <__sflush_r+0xae>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b0      	blx	r6
 8008c78:	4602      	mov	r2, r0
 8008c7a:	1c50      	adds	r0, r2, #1
 8008c7c:	d1c9      	bne.n	8008c12 <__sflush_r+0x32>
 8008c7e:	682b      	ldr	r3, [r5, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0c6      	beq.n	8008c12 <__sflush_r+0x32>
 8008c84:	2b1d      	cmp	r3, #29
 8008c86:	d001      	beq.n	8008c8c <__sflush_r+0xac>
 8008c88:	2b16      	cmp	r3, #22
 8008c8a:	d11e      	bne.n	8008cca <__sflush_r+0xea>
 8008c8c:	602f      	str	r7, [r5, #0]
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e022      	b.n	8008cd8 <__sflush_r+0xf8>
 8008c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c96:	b21b      	sxth	r3, r3
 8008c98:	e01b      	b.n	8008cd2 <__sflush_r+0xf2>
 8008c9a:	690f      	ldr	r7, [r1, #16]
 8008c9c:	2f00      	cmp	r7, #0
 8008c9e:	d0f6      	beq.n	8008c8e <__sflush_r+0xae>
 8008ca0:	0793      	lsls	r3, r2, #30
 8008ca2:	680e      	ldr	r6, [r1, #0]
 8008ca4:	bf08      	it	eq
 8008ca6:	694b      	ldreq	r3, [r1, #20]
 8008ca8:	600f      	str	r7, [r1, #0]
 8008caa:	bf18      	it	ne
 8008cac:	2300      	movne	r3, #0
 8008cae:	eba6 0807 	sub.w	r8, r6, r7
 8008cb2:	608b      	str	r3, [r1, #8]
 8008cb4:	f1b8 0f00 	cmp.w	r8, #0
 8008cb8:	dde9      	ble.n	8008c8e <__sflush_r+0xae>
 8008cba:	6a21      	ldr	r1, [r4, #32]
 8008cbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cbe:	4643      	mov	r3, r8
 8008cc0:	463a      	mov	r2, r7
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b0      	blx	r6
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	dc08      	bgt.n	8008cdc <__sflush_r+0xfc>
 8008cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cdc:	4407      	add	r7, r0
 8008cde:	eba8 0800 	sub.w	r8, r8, r0
 8008ce2:	e7e7      	b.n	8008cb4 <__sflush_r+0xd4>
 8008ce4:	dfbffffe 	.word	0xdfbffffe

08008ce8 <_fflush_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	690b      	ldr	r3, [r1, #16]
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	b913      	cbnz	r3, 8008cf8 <_fflush_r+0x10>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	b118      	cbz	r0, 8008d02 <_fflush_r+0x1a>
 8008cfa:	6a03      	ldr	r3, [r0, #32]
 8008cfc:	b90b      	cbnz	r3, 8008d02 <_fflush_r+0x1a>
 8008cfe:	f7fd ffe9 	bl	8006cd4 <__sinit>
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0f3      	beq.n	8008cf2 <_fflush_r+0xa>
 8008d0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d404      	bmi.n	8008d1a <_fflush_r+0x32>
 8008d10:	0599      	lsls	r1, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_fflush_r+0x32>
 8008d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d16:	f7fe f9f8 	bl	800710a <__retarget_lock_acquire_recursive>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f7ff ff5f 	bl	8008be0 <__sflush_r>
 8008d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d24:	07da      	lsls	r2, r3, #31
 8008d26:	4605      	mov	r5, r0
 8008d28:	d4e4      	bmi.n	8008cf4 <_fflush_r+0xc>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	059b      	lsls	r3, r3, #22
 8008d2e:	d4e1      	bmi.n	8008cf4 <_fflush_r+0xc>
 8008d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d32:	f7fe f9eb 	bl	800710c <__retarget_lock_release_recursive>
 8008d36:	e7dd      	b.n	8008cf4 <_fflush_r+0xc>

08008d38 <__swhatbuf_r>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	2900      	cmp	r1, #0
 8008d42:	b096      	sub	sp, #88	@ 0x58
 8008d44:	4615      	mov	r5, r2
 8008d46:	461e      	mov	r6, r3
 8008d48:	da0d      	bge.n	8008d66 <__swhatbuf_r+0x2e>
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d50:	f04f 0100 	mov.w	r1, #0
 8008d54:	bf14      	ite	ne
 8008d56:	2340      	movne	r3, #64	@ 0x40
 8008d58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	6031      	str	r1, [r6, #0]
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	b016      	add	sp, #88	@ 0x58
 8008d64:	bd70      	pop	{r4, r5, r6, pc}
 8008d66:	466a      	mov	r2, sp
 8008d68:	f000 f862 	bl	8008e30 <_fstat_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	dbec      	blt.n	8008d4a <__swhatbuf_r+0x12>
 8008d70:	9901      	ldr	r1, [sp, #4]
 8008d72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d7a:	4259      	negs	r1, r3
 8008d7c:	4159      	adcs	r1, r3
 8008d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d82:	e7eb      	b.n	8008d5c <__swhatbuf_r+0x24>

08008d84 <__smakebuf_r>:
 8008d84:	898b      	ldrh	r3, [r1, #12]
 8008d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d88:	079d      	lsls	r5, r3, #30
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	d507      	bpl.n	8008da0 <__smakebuf_r+0x1c>
 8008d90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	6163      	str	r3, [r4, #20]
 8008d9c:	b003      	add	sp, #12
 8008d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da0:	ab01      	add	r3, sp, #4
 8008da2:	466a      	mov	r2, sp
 8008da4:	f7ff ffc8 	bl	8008d38 <__swhatbuf_r>
 8008da8:	9f00      	ldr	r7, [sp, #0]
 8008daa:	4605      	mov	r5, r0
 8008dac:	4639      	mov	r1, r7
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7ff f86e 	bl	8007e90 <_malloc_r>
 8008db4:	b948      	cbnz	r0, 8008dca <__smakebuf_r+0x46>
 8008db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dba:	059a      	lsls	r2, r3, #22
 8008dbc:	d4ee      	bmi.n	8008d9c <__smakebuf_r+0x18>
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	f043 0302 	orr.w	r3, r3, #2
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	e7e2      	b.n	8008d90 <__smakebuf_r+0xc>
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	6020      	str	r0, [r4, #0]
 8008dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	9b01      	ldr	r3, [sp, #4]
 8008dd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dda:	b15b      	cbz	r3, 8008df4 <__smakebuf_r+0x70>
 8008ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 f837 	bl	8008e54 <_isatty_r>
 8008de6:	b128      	cbz	r0, 8008df4 <__smakebuf_r+0x70>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	f043 0301 	orr.w	r3, r3, #1
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	431d      	orrs	r5, r3
 8008df8:	81a5      	strh	r5, [r4, #12]
 8008dfa:	e7cf      	b.n	8008d9c <__smakebuf_r+0x18>

08008dfc <memmove>:
 8008dfc:	4288      	cmp	r0, r1
 8008dfe:	b510      	push	{r4, lr}
 8008e00:	eb01 0402 	add.w	r4, r1, r2
 8008e04:	d902      	bls.n	8008e0c <memmove+0x10>
 8008e06:	4284      	cmp	r4, r0
 8008e08:	4623      	mov	r3, r4
 8008e0a:	d807      	bhi.n	8008e1c <memmove+0x20>
 8008e0c:	1e43      	subs	r3, r0, #1
 8008e0e:	42a1      	cmp	r1, r4
 8008e10:	d008      	beq.n	8008e24 <memmove+0x28>
 8008e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e1a:	e7f8      	b.n	8008e0e <memmove+0x12>
 8008e1c:	4402      	add	r2, r0
 8008e1e:	4601      	mov	r1, r0
 8008e20:	428a      	cmp	r2, r1
 8008e22:	d100      	bne.n	8008e26 <memmove+0x2a>
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e2e:	e7f7      	b.n	8008e20 <memmove+0x24>

08008e30 <_fstat_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d07      	ldr	r5, [pc, #28]	@ (8008e50 <_fstat_r+0x20>)
 8008e34:	2300      	movs	r3, #0
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	f7f8 fc4b 	bl	80016d8 <_fstat>
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	d102      	bne.n	8008e4c <_fstat_r+0x1c>
 8008e46:	682b      	ldr	r3, [r5, #0]
 8008e48:	b103      	cbz	r3, 8008e4c <_fstat_r+0x1c>
 8008e4a:	6023      	str	r3, [r4, #0]
 8008e4c:	bd38      	pop	{r3, r4, r5, pc}
 8008e4e:	bf00      	nop
 8008e50:	200004a0 	.word	0x200004a0

08008e54 <_isatty_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d06      	ldr	r5, [pc, #24]	@ (8008e70 <_isatty_r+0x1c>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7f8 fc4a 	bl	80016f8 <_isatty>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_isatty_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_isatty_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	200004a0 	.word	0x200004a0

08008e74 <_sbrk_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d06      	ldr	r5, [pc, #24]	@ (8008e90 <_sbrk_r+0x1c>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f8 fc52 	bl	8001728 <_sbrk>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_sbrk_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_sbrk_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	200004a0 	.word	0x200004a0

08008e94 <memcpy>:
 8008e94:	440a      	add	r2, r1
 8008e96:	4291      	cmp	r1, r2
 8008e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e9c:	d100      	bne.n	8008ea0 <memcpy+0xc>
 8008e9e:	4770      	bx	lr
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eaa:	4291      	cmp	r1, r2
 8008eac:	d1f9      	bne.n	8008ea2 <memcpy+0xe>
 8008eae:	bd10      	pop	{r4, pc}

08008eb0 <__assert_func>:
 8008eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4b09      	ldr	r3, [pc, #36]	@ (8008edc <__assert_func+0x2c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4605      	mov	r5, r0
 8008ebc:	68d8      	ldr	r0, [r3, #12]
 8008ebe:	b954      	cbnz	r4, 8008ed6 <__assert_func+0x26>
 8008ec0:	4b07      	ldr	r3, [pc, #28]	@ (8008ee0 <__assert_func+0x30>)
 8008ec2:	461c      	mov	r4, r3
 8008ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ec8:	9100      	str	r1, [sp, #0]
 8008eca:	462b      	mov	r3, r5
 8008ecc:	4905      	ldr	r1, [pc, #20]	@ (8008ee4 <__assert_func+0x34>)
 8008ece:	f000 f86f 	bl	8008fb0 <fiprintf>
 8008ed2:	f000 f87f 	bl	8008fd4 <abort>
 8008ed6:	4b04      	ldr	r3, [pc, #16]	@ (8008ee8 <__assert_func+0x38>)
 8008ed8:	e7f4      	b.n	8008ec4 <__assert_func+0x14>
 8008eda:	bf00      	nop
 8008edc:	20000044 	.word	0x20000044
 8008ee0:	0800948e 	.word	0x0800948e
 8008ee4:	08009460 	.word	0x08009460
 8008ee8:	08009453 	.word	0x08009453

08008eec <_calloc_r>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	fba1 5402 	umull	r5, r4, r1, r2
 8008ef2:	b93c      	cbnz	r4, 8008f04 <_calloc_r+0x18>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7fe ffcb 	bl	8007e90 <_malloc_r>
 8008efa:	4606      	mov	r6, r0
 8008efc:	b928      	cbnz	r0, 8008f0a <_calloc_r+0x1e>
 8008efe:	2600      	movs	r6, #0
 8008f00:	4630      	mov	r0, r6
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	220c      	movs	r2, #12
 8008f06:	6002      	str	r2, [r0, #0]
 8008f08:	e7f9      	b.n	8008efe <_calloc_r+0x12>
 8008f0a:	462a      	mov	r2, r5
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	f7fe f87f 	bl	8007010 <memset>
 8008f12:	e7f5      	b.n	8008f00 <_calloc_r+0x14>

08008f14 <__ascii_mbtowc>:
 8008f14:	b082      	sub	sp, #8
 8008f16:	b901      	cbnz	r1, 8008f1a <__ascii_mbtowc+0x6>
 8008f18:	a901      	add	r1, sp, #4
 8008f1a:	b142      	cbz	r2, 8008f2e <__ascii_mbtowc+0x1a>
 8008f1c:	b14b      	cbz	r3, 8008f32 <__ascii_mbtowc+0x1e>
 8008f1e:	7813      	ldrb	r3, [r2, #0]
 8008f20:	600b      	str	r3, [r1, #0]
 8008f22:	7812      	ldrb	r2, [r2, #0]
 8008f24:	1e10      	subs	r0, r2, #0
 8008f26:	bf18      	it	ne
 8008f28:	2001      	movne	r0, #1
 8008f2a:	b002      	add	sp, #8
 8008f2c:	4770      	bx	lr
 8008f2e:	4610      	mov	r0, r2
 8008f30:	e7fb      	b.n	8008f2a <__ascii_mbtowc+0x16>
 8008f32:	f06f 0001 	mvn.w	r0, #1
 8008f36:	e7f8      	b.n	8008f2a <__ascii_mbtowc+0x16>

08008f38 <_realloc_r>:
 8008f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	4615      	mov	r5, r2
 8008f40:	460c      	mov	r4, r1
 8008f42:	b921      	cbnz	r1, 8008f4e <_realloc_r+0x16>
 8008f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	4611      	mov	r1, r2
 8008f4a:	f7fe bfa1 	b.w	8007e90 <_malloc_r>
 8008f4e:	b92a      	cbnz	r2, 8008f5c <_realloc_r+0x24>
 8008f50:	f7fe ff2a 	bl	8007da8 <_free_r>
 8008f54:	2400      	movs	r4, #0
 8008f56:	4620      	mov	r0, r4
 8008f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5c:	f000 f841 	bl	8008fe2 <_malloc_usable_size_r>
 8008f60:	4285      	cmp	r5, r0
 8008f62:	4606      	mov	r6, r0
 8008f64:	d802      	bhi.n	8008f6c <_realloc_r+0x34>
 8008f66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f6a:	d8f4      	bhi.n	8008f56 <_realloc_r+0x1e>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7fe ff8e 	bl	8007e90 <_malloc_r>
 8008f74:	4607      	mov	r7, r0
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0ec      	beq.n	8008f54 <_realloc_r+0x1c>
 8008f7a:	42b5      	cmp	r5, r6
 8008f7c:	462a      	mov	r2, r5
 8008f7e:	4621      	mov	r1, r4
 8008f80:	bf28      	it	cs
 8008f82:	4632      	movcs	r2, r6
 8008f84:	f7ff ff86 	bl	8008e94 <memcpy>
 8008f88:	4621      	mov	r1, r4
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f7fe ff0c 	bl	8007da8 <_free_r>
 8008f90:	463c      	mov	r4, r7
 8008f92:	e7e0      	b.n	8008f56 <_realloc_r+0x1e>

08008f94 <__ascii_wctomb>:
 8008f94:	4603      	mov	r3, r0
 8008f96:	4608      	mov	r0, r1
 8008f98:	b141      	cbz	r1, 8008fac <__ascii_wctomb+0x18>
 8008f9a:	2aff      	cmp	r2, #255	@ 0xff
 8008f9c:	d904      	bls.n	8008fa8 <__ascii_wctomb+0x14>
 8008f9e:	228a      	movs	r2, #138	@ 0x8a
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa6:	4770      	bx	lr
 8008fa8:	700a      	strb	r2, [r1, #0]
 8008faa:	2001      	movs	r0, #1
 8008fac:	4770      	bx	lr
	...

08008fb0 <fiprintf>:
 8008fb0:	b40e      	push	{r1, r2, r3}
 8008fb2:	b503      	push	{r0, r1, lr}
 8008fb4:	4601      	mov	r1, r0
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	4805      	ldr	r0, [pc, #20]	@ (8008fd0 <fiprintf+0x20>)
 8008fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fbe:	6800      	ldr	r0, [r0, #0]
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	f7ff fcf5 	bl	80089b0 <_vfiprintf_r>
 8008fc6:	b002      	add	sp, #8
 8008fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fcc:	b003      	add	sp, #12
 8008fce:	4770      	bx	lr
 8008fd0:	20000044 	.word	0x20000044

08008fd4 <abort>:
 8008fd4:	b508      	push	{r3, lr}
 8008fd6:	2006      	movs	r0, #6
 8008fd8:	f000 f834 	bl	8009044 <raise>
 8008fdc:	2001      	movs	r0, #1
 8008fde:	f7f8 fb30 	bl	8001642 <_exit>

08008fe2 <_malloc_usable_size_r>:
 8008fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe6:	1f18      	subs	r0, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bfbc      	itt	lt
 8008fec:	580b      	ldrlt	r3, [r1, r0]
 8008fee:	18c0      	addlt	r0, r0, r3
 8008ff0:	4770      	bx	lr

08008ff2 <_raise_r>:
 8008ff2:	291f      	cmp	r1, #31
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	d904      	bls.n	8009006 <_raise_r+0x14>
 8008ffc:	2316      	movs	r3, #22
 8008ffe:	6003      	str	r3, [r0, #0]
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	bd38      	pop	{r3, r4, r5, pc}
 8009006:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009008:	b112      	cbz	r2, 8009010 <_raise_r+0x1e>
 800900a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800900e:	b94b      	cbnz	r3, 8009024 <_raise_r+0x32>
 8009010:	4628      	mov	r0, r5
 8009012:	f000 f831 	bl	8009078 <_getpid_r>
 8009016:	4622      	mov	r2, r4
 8009018:	4601      	mov	r1, r0
 800901a:	4628      	mov	r0, r5
 800901c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009020:	f000 b818 	b.w	8009054 <_kill_r>
 8009024:	2b01      	cmp	r3, #1
 8009026:	d00a      	beq.n	800903e <_raise_r+0x4c>
 8009028:	1c59      	adds	r1, r3, #1
 800902a:	d103      	bne.n	8009034 <_raise_r+0x42>
 800902c:	2316      	movs	r3, #22
 800902e:	6003      	str	r3, [r0, #0]
 8009030:	2001      	movs	r0, #1
 8009032:	e7e7      	b.n	8009004 <_raise_r+0x12>
 8009034:	2100      	movs	r1, #0
 8009036:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800903a:	4620      	mov	r0, r4
 800903c:	4798      	blx	r3
 800903e:	2000      	movs	r0, #0
 8009040:	e7e0      	b.n	8009004 <_raise_r+0x12>
	...

08009044 <raise>:
 8009044:	4b02      	ldr	r3, [pc, #8]	@ (8009050 <raise+0xc>)
 8009046:	4601      	mov	r1, r0
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	f7ff bfd2 	b.w	8008ff2 <_raise_r>
 800904e:	bf00      	nop
 8009050:	20000044 	.word	0x20000044

08009054 <_kill_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	@ (8009074 <_kill_r+0x20>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	4611      	mov	r1, r2
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	f7f8 fade 	bl	8001622 <_kill>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d102      	bne.n	8009070 <_kill_r+0x1c>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	b103      	cbz	r3, 8009070 <_kill_r+0x1c>
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	bd38      	pop	{r3, r4, r5, pc}
 8009072:	bf00      	nop
 8009074:	200004a0 	.word	0x200004a0

08009078 <_getpid_r>:
 8009078:	f7f8 bacb 	b.w	8001612 <_getpid>

0800907c <_init>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	bf00      	nop
 8009080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009082:	bc08      	pop	{r3}
 8009084:	469e      	mov	lr, r3
 8009086:	4770      	bx	lr

08009088 <_fini>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	bf00      	nop
 800908c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908e:	bc08      	pop	{r3}
 8009090:	469e      	mov	lr, r3
 8009092:	4770      	bx	lr

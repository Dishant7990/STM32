
5.1_RTC_ALARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe0  08004fe0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004fe0  08004fe0  00005fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe8  08004fe8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe8  08004fe8  00005fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fec  08004fec  00005fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004ff0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08005058  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005058  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e794  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b4  00000000  00000000  0001482c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  000169e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095f  00000000  00000000  00017628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277cf  00000000  00000000  00017f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eccc  00000000  00000000  0003f756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efca3  00000000  00000000  0004e422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e0c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e4  00000000  00000000  0013e108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00141aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004efc 	.word	0x08004efc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004efc 	.word	0x08004efc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fba3 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f84f 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f96f 	bl	8000850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f93d 	bl	80007f0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000576:	f000 f8a9 	bl	80006cc <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800057a:	2200      	movs	r2, #0
 800057c:	491b      	ldr	r1, [pc, #108]	@ (80005ec <main+0x8c>)
 800057e:	481c      	ldr	r0, [pc, #112]	@ (80005f0 <main+0x90>)
 8000580:	f002 fb79 	bl	8002c76 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000584:	2200      	movs	r2, #0
 8000586:	491b      	ldr	r1, [pc, #108]	@ (80005f4 <main+0x94>)
 8000588:	4819      	ldr	r0, [pc, #100]	@ (80005f0 <main+0x90>)
 800058a:	f002 fc57 	bl	8002e3c <HAL_RTC_GetDate>


	  sprintf(date, "Date : %02d.%02d.%02d \t", sDate.Date, sDate.Month, sDate.Year);
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <main+0x94>)
 8000590:	789b      	ldrb	r3, [r3, #2]
 8000592:	461a      	mov	r2, r3
 8000594:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <main+0x94>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	4619      	mov	r1, r3
 800059a:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <main+0x94>)
 800059c:	78db      	ldrb	r3, [r3, #3]
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	460b      	mov	r3, r1
 80005a2:	4915      	ldr	r1, [pc, #84]	@ (80005f8 <main+0x98>)
 80005a4:	4815      	ldr	r0, [pc, #84]	@ (80005fc <main+0x9c>)
 80005a6:	f003 fdb9 	bl	800411c <siprintf>
	  sprintf(time, "Time : %02d.%02d.%02d\r\n",sTime.Hours, sTime.Minutes, sTime.Seconds);
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <main+0x8c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <main+0x8c>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <main+0x8c>)
 80005b8:	789b      	ldrb	r3, [r3, #2]
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	460b      	mov	r3, r1
 80005be:	4910      	ldr	r1, [pc, #64]	@ (8000600 <main+0xa0>)
 80005c0:	4810      	ldr	r0, [pc, #64]	@ (8000604 <main+0xa4>)
 80005c2:	f003 fdab 	bl	800411c <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t *)date, sizeof(date), 200);
 80005c6:	23c8      	movs	r3, #200	@ 0xc8
 80005c8:	221e      	movs	r2, #30
 80005ca:	490c      	ldr	r1, [pc, #48]	@ (80005fc <main+0x9c>)
 80005cc:	480e      	ldr	r0, [pc, #56]	@ (8000608 <main+0xa8>)
 80005ce:	f002 ff2d 	bl	800342c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)time, sizeof(time), 200);
 80005d2:	23c8      	movs	r3, #200	@ 0xc8
 80005d4:	221e      	movs	r2, #30
 80005d6:	490b      	ldr	r1, [pc, #44]	@ (8000604 <main+0xa4>)
 80005d8:	480b      	ldr	r0, [pc, #44]	@ (8000608 <main+0xa8>)
 80005da:	f002 ff27 	bl	800342c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e2:	f000 fbe1 	bl	8000da8 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005e6:	bf00      	nop
 80005e8:	e7c7      	b.n	800057a <main+0x1a>
 80005ea:	bf00      	nop
 80005ec:	20000130 	.word	0x20000130
 80005f0:	20000084 	.word	0x20000084
 80005f4:	20000144 	.word	0x20000144
 80005f8:	08004f14 	.word	0x08004f14
 80005fc:	20000148 	.word	0x20000148
 8000600:	08004f2c 	.word	0x08004f2c
 8000604:	20000168 	.word	0x20000168
 8000608:	200000a8 	.word	0x200000a8

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	@ 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fe76 	bl	800430c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000632:	f000 fee9 	bl	8001408 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f964 	bl	8000908 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f000 fec4 	bl	80013cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000644:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <SystemClock_Config+0xbc>)
 8000646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800064a:	4a1f      	ldr	r2, [pc, #124]	@ (80006c8 <SystemClock_Config+0xbc>)
 800064c:	f023 0318 	bic.w	r3, r3, #24
 8000650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000654:	2306      	movs	r3, #6
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2310      	movs	r3, #16
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000672:	230a      	movs	r3, #10
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ff14 	bl	80014b4 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000692:	f000 f939 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fadc 	bl	8001c6c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ba:	f000 f925 	bl	8000908 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	@ 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b092      	sub	sp, #72	@ 0x48
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	222c      	movs	r2, #44	@ 0x2c
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fe0d 	bl	800430c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006f2:	4b3c      	ldr	r3, [pc, #240]	@ (80007e4 <MX_RTC_Init+0x118>)
 80006f4:	4a3c      	ldr	r2, [pc, #240]	@ (80007e8 <MX_RTC_Init+0x11c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006f8:	4b3a      	ldr	r3, [pc, #232]	@ (80007e4 <MX_RTC_Init+0x118>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006fe:	4b39      	ldr	r3, [pc, #228]	@ (80007e4 <MX_RTC_Init+0x118>)
 8000700:	227f      	movs	r2, #127	@ 0x7f
 8000702:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000704:	4b37      	ldr	r3, [pc, #220]	@ (80007e4 <MX_RTC_Init+0x118>)
 8000706:	22ff      	movs	r2, #255	@ 0xff
 8000708:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800070a:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <MX_RTC_Init+0x118>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000710:	4b34      	ldr	r3, [pc, #208]	@ (80007e4 <MX_RTC_Init+0x118>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000716:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <MX_RTC_Init+0x118>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800071c:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <MX_RTC_Init+0x118>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000722:	4830      	ldr	r0, [pc, #192]	@ (80007e4 <MX_RTC_Init+0x118>)
 8000724:	f002 f982 	bl	8002a2c <HAL_RTC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800072e:	f000 f8eb 	bl	8000908 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 8000732:	2303      	movs	r3, #3
 8000734:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8000738:	2300      	movs	r3, #0
 800073a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800074c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	4823      	ldr	r0, [pc, #140]	@ (80007e4 <MX_RTC_Init+0x118>)
 8000756:	f002 f9f1 	bl	8002b3c <HAL_RTC_SetTime>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000760:	f000 f8d2 	bl	8000908 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000764:	2302      	movs	r3, #2
 8000766:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_APRIL;
 800076a:	2304      	movs	r3, #4
 800076c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x9;
 8000770:	2309      	movs	r3, #9
 8000772:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x24;
 8000776:	2324      	movs	r3, #36	@ 0x24
 8000778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800077c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	4817      	ldr	r0, [pc, #92]	@ (80007e4 <MX_RTC_Init+0x118>)
 8000786:	f002 fad2 	bl	8002d2e <HAL_RTC_SetDate>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000790:	f000 f8ba 	bl	8000908 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8000794:	2303      	movs	r3, #3
 8000796:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000798:	2300      	movs	r3, #0
 800079a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x15;
 800079c:	2315      	movs	r3, #21
 800079e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_RTC_Init+0x120>)
 80007ae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x9;
 80007b8:	2309      	movs	r3, #9
 80007ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80007be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2201      	movs	r2, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	@ (80007e4 <MX_RTC_Init+0x118>)
 80007cc:	f002 fb84 	bl	8002ed8 <HAL_RTC_SetAlarm_IT>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80007d6:	f000 f897 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3748      	adds	r7, #72	@ 0x48
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000084 	.word	0x20000084
 80007e8:	40002800 	.word	0x40002800
 80007ec:	00808000 	.word	0x00808000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	@ (800084c <MX_USART2_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USART2_UART_Init+0x58>)
 8000834:	f002 fdac 	bl	8003390 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f863 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000a8 	.word	0x200000a8
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a1d      	ldr	r2, [pc, #116]	@ (80008e0 <MX_GPIO_Init+0x90>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_GPIO_Init+0x90>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_GPIO_Init+0x90>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <MX_GPIO_Init+0x90>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_GPIO_Init+0x90>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f000 fd57 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d4:	f000 fb9e 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
//  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  printf("Alarm ON & Interrupt Enable\r\n");
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <HAL_RTC_AlarmAEventCallback+0x20>)
 80008ee:	f003 fc0d 	bl	800410c <puts>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008f2:	2120      	movs	r1, #32
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f8:	f000 fd4e 	bl	8001398 <HAL_GPIO_TogglePin>

}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	08004f44 	.word	0x08004f44

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6613      	str	r3, [r2, #96]	@ 0x60
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6593      	str	r3, [r2, #88]	@ 0x58
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0a4      	sub	sp, #144	@ 0x90
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2288      	movs	r2, #136	@ 0x88
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fccd 	bl	800430c <memset>
  if(hrtc->Instance==RTC)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <HAL_RTC_MspInit+0x6c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d120      	bne.n	80009be <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800097c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000982:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fb90 	bl	80020b4 <HAL_RCCEx_PeriphCLKConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800099a:	f7ff ffb5 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <HAL_RTC_MspInit+0x70>)
 80009a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009a4:	4a09      	ldr	r2, [pc, #36]	@ (80009cc <HAL_RTC_MspInit+0x70>)
 80009a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2029      	movs	r0, #41	@ 0x29
 80009b4:	f000 faf7 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009b8:	2029      	movs	r0, #41	@ 0x29
 80009ba:	f000 fb10 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3790      	adds	r7, #144	@ 0x90
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40002800 	.word	0x40002800
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b0ac      	sub	sp, #176	@ 0xb0
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2288      	movs	r2, #136	@ 0x88
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f003 fc8b 	bl	800430c <memset>
  if(huart->Instance==USART2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a21      	ldr	r2, [pc, #132]	@ (8000a80 <HAL_UART_MspInit+0xb0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d13b      	bne.n	8000a78 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fb51 	bl	80020b4 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a18:	f7ff ff76 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1c:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_UART_MspInit+0xb4>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <HAL_UART_MspInit+0xb4>)
 8000a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <HAL_UART_MspInit+0xb4>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <HAL_UART_MspInit+0xb4>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <HAL_UART_MspInit+0xb4>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a40:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_UART_MspInit+0xb4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a64:	2307      	movs	r3, #7
 8000a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a74:	f000 face 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	37b0      	adds	r7, #176	@ 0xb0
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40004400 	.word	0x40004400
 8000a84:	40021000 	.word	0x40021000

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f943 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <RTC_Alarm_IRQHandler+0x10>)
 8000aee:	f002 fb2f 	bl	8003150 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000084 	.word	0x20000084

08000afc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
  }

  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (const unsigned char *)ptr, len, 1000);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <_write+0x28>)
 8000b50:	f002 fc6c 	bl	800342c <HAL_UART_Transmit>
  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000a8 	.word	0x200000a8

08000b64 <_close>:

int _close(int file)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_isatty>:

int _isatty(int file)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba4:	2301      	movs	r3, #1
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f003 fbd4 	bl	80043a8 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20018000 	.word	0x20018000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	20000188 	.word	0x20000188
 8000c34:	200002e0 	.word	0x200002e0

08000c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff ffea 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	@ (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f003 fb93 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8e:	f7ff fc67 	bl	8000560 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca0:	08004ff0 	.word	0x08004ff0
  ldr r2, =_sbss
 8000ca4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca8:	200002dc 	.word	0x200002dc

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_Init+0x3c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <HAL_Init+0x3c>)
 8000cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f000 f962 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f80f 	bl	8000cf0 <HAL_InitTick>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	e001      	b.n	8000ce2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cde:	f7ff fe19 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <HAL_InitTick+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d023      	beq.n	8000d4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d04:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <HAL_InitTick+0x70>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_InitTick+0x6c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f96d 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10f      	bne.n	8000d46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d809      	bhi.n	8000d40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f937 	bl	8000fa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_InitTick+0x74>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e007      	b.n	8000d50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e004      	b.n	8000d50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e001      	b.n	8000d50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	2000018c 	.word	0x2000018c

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	2000018c 	.word	0x2000018c

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	@ (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e17f      	b.n	8001324 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8171 	beq.w	800131e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d005      	beq.n	8001054 <HAL_GPIO_Init+0x40>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d118      	bne.n	80010f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d017      	beq.n	8001130 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80ac 	beq.w	800131e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001344 <HAL_GPIO_Init+0x330>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001344 <HAL_GPIO_Init+0x330>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001344 <HAL_GPIO_Init+0x330>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011de:	4a5a      	ldr	r2, [pc, #360]	@ (8001348 <HAL_GPIO_Init+0x334>)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x242>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4f      	ldr	r2, [pc, #316]	@ (800134c <HAL_GPIO_Init+0x338>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x23e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4e      	ldr	r2, [pc, #312]	@ (8001350 <HAL_GPIO_Init+0x33c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x23a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4d      	ldr	r2, [pc, #308]	@ (8001354 <HAL_GPIO_Init+0x340>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x236>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4c      	ldr	r2, [pc, #304]	@ (8001358 <HAL_GPIO_Init+0x344>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x232>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4b      	ldr	r2, [pc, #300]	@ (800135c <HAL_GPIO_Init+0x348>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x22e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_GPIO_Init+0x34c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x22a>
 800123a:	2306      	movs	r3, #6
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x244>
 800123e:	2307      	movs	r3, #7
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x244>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x244>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x244>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x244>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x244>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x244>
 8001256:	2300      	movs	r3, #0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001268:	4937      	ldr	r1, [pc, #220]	@ (8001348 <HAL_GPIO_Init+0x334>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001276:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <HAL_GPIO_Init+0x350>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800129a:	4a32      	ldr	r2, [pc, #200]	@ (8001364 <HAL_GPIO_Init+0x350>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a0:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <HAL_GPIO_Init+0x350>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c4:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <HAL_GPIO_Init+0x350>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ca:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <HAL_GPIO_Init+0x350>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001364 <HAL_GPIO_Init+0x350>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_GPIO_Init+0x350>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001318:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <HAL_GPIO_Init+0x350>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	f47f ae78 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	371c      	adds	r7, #28
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000
 800134c:	48000400 	.word	0x48000400
 8001350:	48000800 	.word	0x48000800
 8001354:	48000c00 	.word	0x48000c00
 8001358:	48001000 	.word	0x48001000
 800135c:	48001400 	.word	0x48001400
 8001360:	48001800 	.word	0x48001800
 8001364:	40010400 	.word	0x40010400

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001384:	e002      	b.n	800138c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43d9      	mvns	r1, r3
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	400b      	ands	r3, r1
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40007000 	.word	0x40007000

080013ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <HAL_PWREx_GetVoltageRange+0x18>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40007000 	.word	0x40007000

08001408 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001416:	d130      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001424:	d038      	beq.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800142e:	4a1e      	ldr	r2, [pc, #120]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001430:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2232      	movs	r2, #50	@ 0x32
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	4a1b      	ldr	r2, [pc, #108]	@ (80014b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9b      	lsrs	r3, r3, #18
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144c:	e002      	b.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3b01      	subs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001460:	d102      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f2      	bne.n	800144e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001474:	d110      	bne.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e00f      	b.n	800149a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001486:	d007      	beq.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001490:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001496:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40007000 	.word	0x40007000
 80014ac:	20000000 	.word	0x20000000
 80014b0:	431bde83 	.word	0x431bde83

080014b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e3ca      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c6:	4b97      	ldr	r3, [pc, #604]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d0:	4b94      	ldr	r3, [pc, #592]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80e4 	beq.w	80016b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_RCC_OscConfig+0x4a>
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	f040 808b 	bne.w	800160c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	f040 8087 	bne.w	800160c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014fe:	4b89      	ldr	r3, [pc, #548]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x62>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e3a2      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1a      	ldr	r2, [r3, #32]
 800151a:	4b82      	ldr	r3, [pc, #520]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_RCC_OscConfig+0x7c>
 8001526:	4b7f      	ldr	r3, [pc, #508]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800152e:	e005      	b.n	800153c <HAL_RCC_OscConfig+0x88>
 8001530:	4b7c      	ldr	r3, [pc, #496]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800153c:	4293      	cmp	r3, r2
 800153e:	d223      	bcs.n	8001588 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fd55 	bl	8001ff4 <RCC_SetFlashLatencyFromMSIRange>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e383      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001554:	4b73      	ldr	r3, [pc, #460]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a72      	ldr	r2, [pc, #456]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b70      	ldr	r3, [pc, #448]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	496d      	ldr	r1, [pc, #436]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001572:	4b6c      	ldr	r3, [pc, #432]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	4968      	ldr	r1, [pc, #416]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e025      	b.n	80015d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	4b66      	ldr	r3, [pc, #408]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a65      	ldr	r2, [pc, #404]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b63      	ldr	r3, [pc, #396]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4960      	ldr	r1, [pc, #384]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	495b      	ldr	r1, [pc, #364]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fd15 	bl	8001ff4 <RCC_SetFlashLatencyFromMSIRange>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e343      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015d4:	f000 fc4a 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b52      	ldr	r3, [pc, #328]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	4950      	ldr	r1, [pc, #320]	@ (8001728 <HAL_RCC_OscConfig+0x274>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	4a4e      	ldr	r2, [pc, #312]	@ (800172c <HAL_RCC_OscConfig+0x278>)
 80015f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fb79 	bl	8000cf0 <HAL_InitTick>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d052      	beq.n	80016ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	e327      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d032      	beq.n	800167a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001614:	4b43      	ldr	r3, [pc, #268]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a42      	ldr	r2, [pc, #264]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001620:	f7ff fbb6 	bl	8000d90 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001628:	f7ff fbb2 	bl	8000d90 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e310      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163a:	4b3a      	ldr	r3, [pc, #232]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001646:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a36      	ldr	r2, [pc, #216]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4931      	ldr	r1, [pc, #196]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001664:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	492c      	ldr	r1, [pc, #176]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e01a      	b.n	80016b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a29      	ldr	r2, [pc, #164]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001686:	f7ff fb83 	bl	8000d90 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800168e:	f7ff fb7f 	bl	8000d90 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e2dd      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a0:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x1da>
 80016ac:	e000      	b.n	80016b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d074      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x21a>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b0c      	cmp	r3, #12
 80016c6:	d10e      	bne.n	80016e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d10b      	bne.n	80016e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d064      	beq.n	80017a4 <HAL_RCC_OscConfig+0x2f0>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d160      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e2ba      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x24a>
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e026      	b.n	800174c <HAL_RCC_OscConfig+0x298>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001706:	d115      	bne.n	8001734 <HAL_RCC_OscConfig+0x280>
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800170e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a02      	ldr	r2, [pc, #8]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800171a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e014      	b.n	800174c <HAL_RCC_OscConfig+0x298>
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	08004f64 	.word	0x08004f64
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004
 8001734:	4ba0      	ldr	r3, [pc, #640]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a9f      	ldr	r2, [pc, #636]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800173a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b9d      	ldr	r3, [pc, #628]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a9c      	ldr	r2, [pc, #624]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800174a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fb1c 	bl	8000d90 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fb18 	bl	8000d90 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	@ 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e276      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176e:	4b92      	ldr	r3, [pc, #584]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x2a8>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fb08 	bl	8000d90 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fb04 	bl	8000d90 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	@ 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e262      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001796:	4b88      	ldr	r3, [pc, #544]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x2d0>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d060      	beq.n	8001874 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x310>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d116      	bne.n	80017f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c4:	4b7c      	ldr	r3, [pc, #496]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x328>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e23f      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	061b      	lsls	r3, r3, #24
 80017ea:	4973      	ldr	r1, [pc, #460]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f0:	e040      	b.n	8001874 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d023      	beq.n	8001842 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fa:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6e      	ldr	r2, [pc, #440]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fac3 	bl	8000d90 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fabf 	bl	8000d90 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e21d      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001820:	4b65      	ldr	r3, [pc, #404]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b62      	ldr	r3, [pc, #392]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	495f      	ldr	r1, [pc, #380]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	e018      	b.n	8001874 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001842:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a5c      	ldr	r2, [pc, #368]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800184c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fa9f 	bl	8000d90 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fa9b 	bl	8000d90 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1f9      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001868:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d03c      	beq.n	80018fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001888:	4b4b      	ldr	r3, [pc, #300]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188e:	4a4a      	ldr	r2, [pc, #296]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fa7a 	bl	8000d90 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fa76 	bl	8000d90 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1d4      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ef      	beq.n	80018a0 <HAL_RCC_OscConfig+0x3ec>
 80018c0:	e01b      	b.n	80018fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c8:	4a3b      	ldr	r2, [pc, #236]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff fa5d 	bl	8000d90 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff fa59 	bl	8000d90 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1b7      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ef      	bne.n	80018da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80a6 	beq.w	8001a54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800190c:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10d      	bne.n	8001934 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	4a26      	ldr	r2, [pc, #152]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	@ 0x58
 8001924:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001930:	2301      	movs	r3, #1
 8001932:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <HAL_RCC_OscConfig+0x508>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d118      	bne.n	8001972 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001940:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <HAL_RCC_OscConfig+0x508>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <HAL_RCC_OscConfig+0x508>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194c:	f7ff fa20 	bl	8000d90 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001954:	f7ff fa1c 	bl	8000d90 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e17a      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <HAL_RCC_OscConfig+0x508>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d108      	bne.n	800198c <HAL_RCC_OscConfig+0x4d8>
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800198a:	e029      	b.n	80019e0 <HAL_RCC_OscConfig+0x52c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d115      	bne.n	80019c0 <HAL_RCC_OscConfig+0x50c>
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199a:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019aa:	4a03      	ldr	r2, [pc, #12]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b4:	e014      	b.n	80019e0 <HAL_RCC_OscConfig+0x52c>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40007000 	.word	0x40007000
 80019c0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c6:	4a9b      	ldr	r2, [pc, #620]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d0:	4b98      	ldr	r3, [pc, #608]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a97      	ldr	r2, [pc, #604]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d016      	beq.n	8001a16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff f9d2 	bl	8000d90 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff f9ce 	bl	8000d90 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e12a      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	4b8b      	ldr	r3, [pc, #556]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ed      	beq.n	80019f0 <HAL_RCC_OscConfig+0x53c>
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff f9bb 	bl	8000d90 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f9b7 	bl	8000d90 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e113      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a34:	4b7f      	ldr	r3, [pc, #508]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ed      	bne.n	8001a1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a48:	4b7a      	ldr	r3, [pc, #488]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	4a79      	ldr	r2, [pc, #484]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80fe 	beq.w	8001c5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	f040 80d0 	bne.w	8001c08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a68:	4b72      	ldr	r3, [pc, #456]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d130      	bne.n	8001ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	3b01      	subs	r3, #1
 8001a88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d127      	bne.n	8001ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d11f      	bne.n	8001ade <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aa8:	2a07      	cmp	r2, #7
 8001aaa:	bf14      	ite	ne
 8001aac:	2201      	movne	r2, #1
 8001aae:	2200      	moveq	r2, #0
 8001ab0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d113      	bne.n	8001ade <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d06e      	beq.n	8001bbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d069      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ae4:	4b53      	ldr	r3, [pc, #332]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001af0:	4b50      	ldr	r3, [pc, #320]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0ad      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b00:	4b4c      	ldr	r3, [pc, #304]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a4b      	ldr	r2, [pc, #300]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b0c:	f7ff f940 	bl	8000d90 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff f93c 	bl	8000d90 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e09a      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b26:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b32:	4b40      	ldr	r3, [pc, #256]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	4b40      	ldr	r3, [pc, #256]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b42:	3a01      	subs	r2, #1
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b4c:	0212      	lsls	r2, r2, #8
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b54:	0852      	lsrs	r2, r2, #1
 8001b56:	3a01      	subs	r2, #1
 8001b58:	0552      	lsls	r2, r2, #21
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b60:	0852      	lsrs	r2, r2, #1
 8001b62:	3a01      	subs	r2, #1
 8001b64:	0652      	lsls	r2, r2, #25
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b6c:	0912      	lsrs	r2, r2, #4
 8001b6e:	0452      	lsls	r2, r2, #17
 8001b70:	430a      	orrs	r2, r1
 8001b72:	4930      	ldr	r1, [pc, #192]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b78:	4b2e      	ldr	r3, [pc, #184]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b84:	4b2b      	ldr	r3, [pc, #172]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4a2a      	ldr	r2, [pc, #168]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b90:	f7ff f8fe 	bl	8000d90 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f8fa 	bl	8000d90 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e058      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb6:	e050      	b.n	8001c5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e04f      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d148      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd4:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a16      	ldr	r2, [pc, #88]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001be0:	f7ff f8d6 	bl	8000d90 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f8d2 	bl	8000d90 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e030      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x734>
 8001c06:	e028      	b.n	8001c5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d023      	beq.n	8001c56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a08      	ldr	r2, [pc, #32]	@ (8001c34 <HAL_RCC_OscConfig+0x780>)
 8001c14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f8b9 	bl	8000d90 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c20:	e00c      	b.n	8001c3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff f8b5 	bl	8000d90 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d905      	bls.n	8001c3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
 8001c34:	40021000 	.word	0x40021000
 8001c38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_RCC_OscConfig+0x7b0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ec      	bne.n	8001c22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_RCC_OscConfig+0x7b0>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	4905      	ldr	r1, [pc, #20]	@ (8001c64 <HAL_RCC_OscConfig+0x7b0>)
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCC_OscConfig+0x7b4>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
 8001c54:	e001      	b.n	8001c5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	feeefffc 	.word	0xfeeefffc

08001c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0e7      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b75      	ldr	r3, [pc, #468]	@ (8001e58 <HAL_RCC_ClockConfig+0x1ec>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d910      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b72      	ldr	r3, [pc, #456]	@ (8001e58 <HAL_RCC_ClockConfig+0x1ec>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4970      	ldr	r1, [pc, #448]	@ (8001e58 <HAL_RCC_ClockConfig+0x1ec>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0cf      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d010      	beq.n	8001cde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d908      	bls.n	8001cde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b63      	ldr	r3, [pc, #396]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4960      	ldr	r1, [pc, #384]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d04c      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d121      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0a6      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0a:	4b54      	ldr	r3, [pc, #336]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e09a      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d22:	4b4e      	ldr	r3, [pc, #312]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e08e      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d32:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e086      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4b46      	ldr	r3, [pc, #280]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f023 0203 	bic.w	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4943      	ldr	r1, [pc, #268]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d54:	f7ff f81c 	bl	8000d90 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7ff f818 	bl	8000d90 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e06e      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 020c 	and.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1eb      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d010      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d208      	bcs.n	8001db2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	492b      	ldr	r1, [pc, #172]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db2:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <HAL_RCC_ClockConfig+0x1ec>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d210      	bcs.n	8001de2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc0:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 0207 	bic.w	r2, r3, #7
 8001dc8:	4923      	ldr	r1, [pc, #140]	@ (8001e58 <HAL_RCC_ClockConfig+0x1ec>)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd0:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e036      	b.n	8001e50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	4918      	ldr	r1, [pc, #96]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4910      	ldr	r1, [pc, #64]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e20:	f000 f824 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	490b      	ldr	r1, [pc, #44]	@ (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3c:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_RCC_ClockConfig+0x1fc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff53 	bl	8000cf0 <HAL_InitTick>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08004f64 	.word	0x08004f64
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e84:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d121      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d11e      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ea0:	4b34      	ldr	r3, [pc, #208]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eac:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e005      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d102      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	e004      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef0:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ef2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d134      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001efa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d003      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0xac>
 8001f10:	e005      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f14:	617b      	str	r3, [r7, #20]
      break;
 8001f16:	e005      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f1a:	617b      	str	r3, [r7, #20]
      break;
 8001f1c:	e002      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	617b      	str	r3, [r7, #20]
      break;
 8001f22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	3301      	adds	r3, #1
 8001f30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	fb03 f202 	mul.w	r2, r3, r2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	0e5b      	lsrs	r3, r3, #25
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	3301      	adds	r3, #1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f64:	69bb      	ldr	r3, [r7, #24]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	@ 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	08004f7c 	.word	0x08004f7c
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	007a1200 	.word	0x007a1200

08001f84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000000 	.word	0x20000000

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fa0:	f7ff fff0 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4904      	ldr	r1, [pc, #16]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08004f74 	.word	0x08004f74

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fcc:	f7ff ffda 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0adb      	lsrs	r3, r3, #11
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4904      	ldr	r1, [pc, #16]	@ (8001ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08004f74 	.word	0x08004f74

08001ff4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800200c:	f7ff f9ee 	bl	80013ec <HAL_PWREx_GetVoltageRange>
 8002010:	6178      	str	r0, [r7, #20]
 8002012:	e014      	b.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002018:	4a24      	ldr	r2, [pc, #144]	@ (80020ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002020:	4b22      	ldr	r3, [pc, #136]	@ (80020ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800202c:	f7ff f9de 	bl	80013ec <HAL_PWREx_GetVoltageRange>
 8002030:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002032:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800203c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002044:	d10b      	bne.n	800205e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b80      	cmp	r3, #128	@ 0x80
 800204a:	d919      	bls.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002050:	d902      	bls.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002052:	2302      	movs	r3, #2
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	e013      	b.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002058:	2301      	movs	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e010      	b.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b80      	cmp	r3, #128	@ 0x80
 8002062:	d902      	bls.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002064:	2303      	movs	r3, #3
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e00a      	b.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	@ 0x80
 800206e:	d102      	bne.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002070:	2302      	movs	r3, #2
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e004      	b.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b70      	cmp	r3, #112	@ 0x70
 800207a:	d101      	bne.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800207c:	2301      	movs	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002080:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 0207 	bic.w	r2, r3, #7
 8002088:	4909      	ldr	r1, [pc, #36]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40022000 	.word	0x40022000

080020b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020bc:	2300      	movs	r3, #0
 80020be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020c0:	2300      	movs	r3, #0
 80020c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d041      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020d8:	d02a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020de:	d824      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020e4:	d008      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020ea:	d81e      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020f4:	d010      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020f6:	e018      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020f8:	4b86      	ldr	r3, [pc, #536]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a85      	ldr	r2, [pc, #532]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002102:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002104:	e015      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fabb 	bl	8002688 <RCCEx_PLLSAI1_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002116:	e00c      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3320      	adds	r3, #32
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fba6 	bl	8002870 <RCCEx_PLLSAI2_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002128:	e003      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	74fb      	strb	r3, [r7, #19]
      break;
 800212e:	e000      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10b      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002138:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002146:	4973      	ldr	r1, [pc, #460]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800214e:	e001      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d041      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002164:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002168:	d02a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800216a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800216e:	d824      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002170:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002174:	d008      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002176:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800217a:	d81e      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002184:	d010      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002186:	e018      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002188:	4b62      	ldr	r3, [pc, #392]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a61      	ldr	r2, [pc, #388]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002192:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002194:	e015      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fa73 	bl	8002688 <RCCEx_PLLSAI1_Config>
 80021a2:	4603      	mov	r3, r0
 80021a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021a6:	e00c      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3320      	adds	r3, #32
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fb5e 	bl	8002870 <RCCEx_PLLSAI2_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021b8:	e003      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	74fb      	strb	r3, [r7, #19]
      break;
 80021be:	e000      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021c8:	4b52      	ldr	r3, [pc, #328]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021d6:	494f      	ldr	r1, [pc, #316]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021de:	e001      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a0 	beq.w	8002332 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021f6:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002206:	2300      	movs	r3, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00d      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	4a40      	ldr	r2, [pc, #256]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002216:	6593      	str	r3, [r2, #88]	@ 0x58
 8002218:	4b3e      	ldr	r3, [pc, #248]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002224:	2301      	movs	r3, #1
 8002226:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002228:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a3a      	ldr	r2, [pc, #232]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002232:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002234:	f7fe fdac 	bl	8000d90 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800223a:	e009      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223c:	f7fe fda8 	bl	8000d90 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d902      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	74fb      	strb	r3, [r7, #19]
        break;
 800224e:	e005      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002250:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ef      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d15c      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002262:	4b2c      	ldr	r3, [pc, #176]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800226c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01f      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	d019      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002280:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800228a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002292:	4a20      	ldr	r2, [pc, #128]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ac:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7fe fd67 	bl	8000d90 <HAL_GetTick>
 80022c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c4:	e00b      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fd63 	bl	8000d90 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d902      	bls.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	74fb      	strb	r3, [r7, #19]
            break;
 80022dc:	e006      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ec      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002302:	4904      	ldr	r1, [pc, #16]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800230a:	e009      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	74bb      	strb	r3, [r7, #18]
 8002310:	e006      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002320:	7c7b      	ldrb	r3, [r7, #17]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b9e      	ldr	r3, [pc, #632]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	4a9d      	ldr	r2, [pc, #628]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800233e:	4b98      	ldr	r3, [pc, #608]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002344:	f023 0203 	bic.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234c:	4994      	ldr	r1, [pc, #592]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002360:	4b8f      	ldr	r3, [pc, #572]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	f023 020c 	bic.w	r2, r3, #12
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236e:	498c      	ldr	r1, [pc, #560]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002382:	4b87      	ldr	r3, [pc, #540]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002388:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	4983      	ldr	r1, [pc, #524]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a4:	4b7e      	ldr	r3, [pc, #504]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	497b      	ldr	r1, [pc, #492]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023c6:	4b76      	ldr	r3, [pc, #472]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d4:	4972      	ldr	r1, [pc, #456]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e8:	4b6d      	ldr	r3, [pc, #436]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	496a      	ldr	r1, [pc, #424]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800240a:	4b65      	ldr	r3, [pc, #404]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	4961      	ldr	r1, [pc, #388]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800242c:	4b5c      	ldr	r3, [pc, #368]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002432:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243a:	4959      	ldr	r1, [pc, #356]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800244e:	4b54      	ldr	r3, [pc, #336]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002454:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245c:	4950      	ldr	r1, [pc, #320]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002470:	4b4b      	ldr	r3, [pc, #300]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002476:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247e:	4948      	ldr	r1, [pc, #288]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002492:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	493f      	ldr	r1, [pc, #252]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d028      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024b4:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024c2:	4937      	ldr	r1, [pc, #220]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d4:	4b32      	ldr	r3, [pc, #200]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a31      	ldr	r2, [pc, #196]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024de:	60d3      	str	r3, [r2, #12]
 80024e0:	e011      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024ea:	d10c      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f8c8 	bl	8002688 <RCCEx_PLLSAI1_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d028      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002512:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002518:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002520:	491f      	ldr	r1, [pc, #124]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002530:	d106      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002532:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800253c:	60d3      	str	r3, [r2, #12]
 800253e:	e011      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002548:	d10c      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f899 	bl	8002688 <RCCEx_PLLSAI1_Config>
 8002556:	4603      	mov	r3, r0
 8002558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02b      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257e:	4908      	ldr	r1, [pc, #32]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800258e:	d109      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a02      	ldr	r2, [pc, #8]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800259a:	60d3      	str	r3, [r2, #12]
 800259c:	e014      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f867 	bl	8002688 <RCCEx_PLLSAI1_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02f      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025e2:	4928      	ldr	r1, [pc, #160]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025f2:	d10d      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3304      	adds	r3, #4
 80025f8:	2102      	movs	r1, #2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f844 	bl	8002688 <RCCEx_PLLSAI1_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d014      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	74bb      	strb	r3, [r7, #18]
 800260e:	e011      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002618:	d10c      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3320      	adds	r3, #32
 800261e:	2102      	movs	r1, #2
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f925 	bl	8002870 <RCCEx_PLLSAI2_Config>
 8002626:	4603      	mov	r3, r0
 8002628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002640:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002646:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800264e:	490d      	ldr	r1, [pc, #52]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002668:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002672:	4904      	ldr	r1, [pc, #16]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800267a:	7cbb      	ldrb	r3, [r7, #18]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000

08002688 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002696:	4b75      	ldr	r3, [pc, #468]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d018      	beq.n	80026d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026a2:	4b72      	ldr	r3, [pc, #456]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10d      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
       ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ba:	4b6c      	ldr	r3, [pc, #432]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d047      	beq.n	800275e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e044      	b.n	800275e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d018      	beq.n	800270e <RCCEx_PLLSAI1_Config+0x86>
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d825      	bhi.n	800272c <RCCEx_PLLSAI1_Config+0xa4>
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d002      	beq.n	80026ea <RCCEx_PLLSAI1_Config+0x62>
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d009      	beq.n	80026fc <RCCEx_PLLSAI1_Config+0x74>
 80026e8:	e020      	b.n	800272c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ea:	4b60      	ldr	r3, [pc, #384]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11d      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fa:	e01a      	b.n	8002732 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026fc:	4b5b      	ldr	r3, [pc, #364]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e013      	b.n	8002736 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270e:	4b57      	ldr	r3, [pc, #348]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271a:	4b54      	ldr	r3, [pc, #336]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800272a:	e006      	b.n	800273a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e004      	b.n	800273c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e002      	b.n	800273c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800273a:	bf00      	nop
    }

    if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002742:	4b4a      	ldr	r3, [pc, #296]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	430b      	orrs	r3, r1
 8002758:	4944      	ldr	r1, [pc, #272]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d17d      	bne.n	8002860 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002764:	4b41      	ldr	r3, [pc, #260]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a40      	ldr	r2, [pc, #256]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800276e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002770:	f7fe fb0e 	bl	8000d90 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002776:	e009      	b.n	800278c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002778:	f7fe fb0a 	bl	8000d90 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	73fb      	strb	r3, [r7, #15]
        break;
 800278a:	e005      	b.n	8002798 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800278c:	4b37      	ldr	r3, [pc, #220]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ef      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d160      	bne.n	8002860 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027a4:	4b31      	ldr	r3, [pc, #196]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	0211      	lsls	r1, r2, #8
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	0912      	lsrs	r2, r2, #4
 80027bc:	0452      	lsls	r2, r2, #17
 80027be:	430a      	orrs	r2, r1
 80027c0:	492a      	ldr	r1, [pc, #168]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	610b      	str	r3, [r1, #16]
 80027c6:	e027      	b.n	8002818 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d112      	bne.n	80027f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ce:	4b27      	ldr	r3, [pc, #156]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80027d6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6892      	ldr	r2, [r2, #8]
 80027de:	0211      	lsls	r1, r2, #8
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6912      	ldr	r2, [r2, #16]
 80027e4:	0852      	lsrs	r2, r2, #1
 80027e6:	3a01      	subs	r2, #1
 80027e8:	0552      	lsls	r2, r2, #21
 80027ea:	430a      	orrs	r2, r1
 80027ec:	491f      	ldr	r1, [pc, #124]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	610b      	str	r3, [r1, #16]
 80027f2:	e011      	b.n	8002818 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f4:	4b1d      	ldr	r3, [pc, #116]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6892      	ldr	r2, [r2, #8]
 8002804:	0211      	lsls	r1, r2, #8
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6952      	ldr	r2, [r2, #20]
 800280a:	0852      	lsrs	r2, r2, #1
 800280c:	3a01      	subs	r2, #1
 800280e:	0652      	lsls	r2, r2, #25
 8002810:	430a      	orrs	r2, r1
 8002812:	4916      	ldr	r1, [pc, #88]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002818:	4b14      	ldr	r3, [pc, #80]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a13      	ldr	r2, [pc, #76]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 800281e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002822:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fab4 	bl	8000d90 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800282a:	e009      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800282c:	f7fe fab0 	bl	8000d90 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d902      	bls.n	8002840 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	73fb      	strb	r3, [r7, #15]
          break;
 800283e:	e005      	b.n	800284c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002840:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ef      	beq.n	800282c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4904      	ldr	r1, [pc, #16]	@ (800286c <RCCEx_PLLSAI1_Config+0x1e4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800287e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d018      	beq.n	80028bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800288a:	4b67      	ldr	r3, [pc, #412]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d10d      	bne.n	80028b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
       ||
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028a2:	4b61      	ldr	r3, [pc, #388]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
       ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d047      	beq.n	8002946 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	e044      	b.n	8002946 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d018      	beq.n	80028f6 <RCCEx_PLLSAI2_Config+0x86>
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d825      	bhi.n	8002914 <RCCEx_PLLSAI2_Config+0xa4>
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d002      	beq.n	80028d2 <RCCEx_PLLSAI2_Config+0x62>
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d009      	beq.n	80028e4 <RCCEx_PLLSAI2_Config+0x74>
 80028d0:	e020      	b.n	8002914 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028d2:	4b55      	ldr	r3, [pc, #340]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11d      	bne.n	800291a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e2:	e01a      	b.n	800291a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028e4:	4b50      	ldr	r3, [pc, #320]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d116      	bne.n	800291e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f4:	e013      	b.n	800291e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002902:	4b49      	ldr	r3, [pc, #292]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002912:	e006      	b.n	8002922 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e004      	b.n	8002924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800291a:	bf00      	nop
 800291c:	e002      	b.n	8002924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800291e:	bf00      	nop
 8002920:	e000      	b.n	8002924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002922:	bf00      	nop
    }

    if(status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10d      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800292a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	430b      	orrs	r3, r1
 8002940:	4939      	ldr	r1, [pc, #228]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002942:	4313      	orrs	r3, r2
 8002944:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d167      	bne.n	8002a1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800294c:	4b36      	ldr	r3, [pc, #216]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a35      	ldr	r2, [pc, #212]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002958:	f7fe fa1a 	bl	8000d90 <HAL_GetTick>
 800295c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800295e:	e009      	b.n	8002974 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002960:	f7fe fa16 	bl	8000d90 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d902      	bls.n	8002974 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	73fb      	strb	r3, [r7, #15]
        break;
 8002972:	e005      	b.n	8002980 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002974:	4b2c      	ldr	r3, [pc, #176]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ef      	bne.n	8002960 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d14a      	bne.n	8002a1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800298c:	4b26      	ldr	r3, [pc, #152]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6892      	ldr	r2, [r2, #8]
 800299c:	0211      	lsls	r1, r2, #8
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68d2      	ldr	r2, [r2, #12]
 80029a2:	0912      	lsrs	r2, r2, #4
 80029a4:	0452      	lsls	r2, r2, #17
 80029a6:	430a      	orrs	r2, r1
 80029a8:	491f      	ldr	r1, [pc, #124]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	614b      	str	r3, [r1, #20]
 80029ae:	e011      	b.n	80029d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	0211      	lsls	r1, r2, #8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6912      	ldr	r2, [r2, #16]
 80029c6:	0852      	lsrs	r2, r2, #1
 80029c8:	3a01      	subs	r2, #1
 80029ca:	0652      	lsls	r2, r2, #25
 80029cc:	430a      	orrs	r2, r1
 80029ce:	4916      	ldr	r1, [pc, #88]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029d4:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a13      	ldr	r2, [pc, #76]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fe f9d6 	bl	8000d90 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029e6:	e009      	b.n	80029fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029e8:	f7fe f9d2 	bl	8000d90 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d902      	bls.n	80029fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	73fb      	strb	r3, [r7, #15]
          break;
 80029fa:	e005      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ef      	beq.n	80029e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4904      	ldr	r1, [pc, #16]	@ (8002a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d079      	beq.n	8002b32 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fd ff82 	bl	800095c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d058      	beq.n	8002b20 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	22ca      	movs	r2, #202	@ 0xca
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2253      	movs	r2, #83	@ 0x53
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fbd0 	bl	8003224 <RTC_EnterInitMode>
 8002a84:	4603      	mov	r3, r0
 8002a86:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d127      	bne.n	8002ade <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aa0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68d2      	ldr	r2, [r2, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6919      	ldr	r1, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fbd4 	bl	800328c <RTC_ExitInitMode>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d113      	bne.n	8002b16 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0203 	bic.w	r2, r2, #3
 8002afc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	22ff      	movs	r2, #255	@ 0xff
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b1e:	e001      	b.n	8002b24 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_RTC_SetTime+0x1a>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e08b      	b.n	8002c6e <HAL_RTC_SetTime+0x132>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	22ca      	movs	r2, #202	@ 0xca
 8002b6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2253      	movs	r2, #83	@ 0x53
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fb54 	bl	8003224 <RTC_EnterInitMode>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d163      	bne.n	8002c4e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d126      	bne.n	8002bda <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fbaf 	bl	8003308 <RTC_ByteToBcd2>
 8002baa:	4603      	mov	r3, r0
 8002bac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fba8 	bl	8003308 <RTC_ByteToBcd2>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bbc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	789b      	ldrb	r3, [r3, #2]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fba0 	bl	8003308 <RTC_ByteToBcd2>
 8002bc8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	78db      	ldrb	r3, [r3, #3]
 8002bd2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e018      	b.n	8002c0c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	785b      	ldrb	r3, [r3, #1]
 8002bf8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bfa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c00:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	78db      	ldrb	r3, [r3, #3]
 8002c06:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002c16:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002c1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fb21 	bl	800328c <RTC_ExitInitMode>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	22ff      	movs	r2, #255	@ 0xff
 8002c54:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd90      	pop	{r4, r7, pc}

08002c76 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002ca4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	0d9b      	lsrs	r3, r3, #22
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11a      	bne.n	8002d24 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fb28 	bl	8003348 <RTC_Bcd2ToByte>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fb1f 	bl	8003348 <RTC_Bcd2ToByte>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	789b      	ldrb	r3, [r3, #2]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fb16 	bl	8003348 <RTC_Bcd2ToByte>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d2e:	b590      	push	{r4, r7, lr}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_RTC_SetDate+0x1a>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e075      	b.n	8002e34 <HAL_RTC_SetDate+0x106>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10e      	bne.n	8002d7c <HAL_RTC_SetDate+0x4e>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	f023 0310 	bic.w	r3, r3, #16
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	330a      	adds	r3, #10
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11c      	bne.n	8002dbc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	78db      	ldrb	r3, [r3, #3]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fabe 	bl	8003308 <RTC_ByteToBcd2>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fab7 	bl	8003308 <RTC_ByteToBcd2>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d9e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	789b      	ldrb	r3, [r3, #2]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 faaf 	bl	8003308 <RTC_ByteToBcd2>
 8002daa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002dac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e00e      	b.n	8002dda <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	78db      	ldrb	r3, [r3, #3]
 8002dc0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002dc8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002dce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	22ca      	movs	r2, #202	@ 0xca
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2253      	movs	r2, #83	@ 0x53
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fa1a 	bl	8003224 <RTC_EnterInitMode>
 8002df0:	4603      	mov	r3, r0
 8002df2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fa3e 	bl	800328c <RTC_ExitInitMode>
 8002e10:	4603      	mov	r3, r0
 8002e12:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	22ff      	movs	r2, #255	@ 0xff
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}

08002e3c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	0b5b      	lsrs	r3, r3, #13
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11a      	bne.n	8002ecc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	78db      	ldrb	r3, [r3, #3]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fa54 	bl	8003348 <RTC_Bcd2ToByte>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fa4b 	bl	8003348 <RTC_Bcd2ToByte>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	789b      	ldrb	r3, [r3, #2]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fa42 	bl	8003348 <RTC_Bcd2ToByte>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b089      	sub	sp, #36	@ 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_RTC_SetAlarm_IT+0x1a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e127      	b.n	8003142 <HAL_RTC_SetAlarm_IT+0x26a>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d137      	bne.n	8002f78 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f9f1 	bl	8003308 <RTC_ByteToBcd2>
 8002f26:	4603      	mov	r3, r0
 8002f28:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	785b      	ldrb	r3, [r3, #1]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f9ea 	bl	8003308 <RTC_ByteToBcd2>
 8002f34:	4603      	mov	r3, r0
 8002f36:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f38:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	789b      	ldrb	r3, [r3, #2]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f9e2 	bl	8003308 <RTC_ByteToBcd2>
 8002f44:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f46:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	78db      	ldrb	r3, [r3, #3]
 8002f4e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f50:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f9d4 	bl	8003308 <RTC_ByteToBcd2>
 8002f60:	4603      	mov	r3, r0
 8002f62:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002f64:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002f6c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e023      	b.n	8002fc0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	785b      	ldrb	r3, [r3, #1]
 8002f96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f98:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	78db      	ldrb	r3, [r3, #3]
 8002fa4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002fa6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002fb0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002fb6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	22ca      	movs	r2, #202	@ 0xca
 8002fd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2253      	movs	r2, #83	@ 0x53
 8002fda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fe4:	d14a      	bne.n	800307c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ff4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003006:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003008:	f7fd fec2 	bl	8000d90 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800300e:	e015      	b.n	800303c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003010:	f7fd febe 	bl	8000d90 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800301e:	d90d      	bls.n	800303c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	22ff      	movs	r2, #255	@ 0xff
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2203      	movs	r2, #3
 800302c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e082      	b.n	8003142 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0e2      	beq.n	8003010 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003068:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	e049      	b.n	8003110 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800308a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800309c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800309e:	f7fd fe77 	bl	8000d90 <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80030a4:	e015      	b.n	80030d2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030a6:	f7fd fe73 	bl	8000d90 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030b4:	d90d      	bls.n	80030d2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	22ff      	movs	r2, #255	@ 0xff
 80030bc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2203      	movs	r2, #3
 80030c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e037      	b.n	8003142 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0e2      	beq.n	80030a6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030fe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800310e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003110:	4b0e      	ldr	r3, [pc, #56]	@ (800314c <HAL_RTC_SetAlarm_IT+0x274>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <HAL_RTC_SetAlarm_IT+0x274>)
 8003116:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800311a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RTC_SetAlarm_IT+0x274>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <HAL_RTC_SetAlarm_IT+0x274>)
 8003122:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003126:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	22ff      	movs	r2, #255	@ 0xff
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	@ 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	bf00      	nop
 800314c:	40010400 	.word	0x40010400

08003150 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003158:	4b1f      	ldr	r3, [pc, #124]	@ (80031d8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800315a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800315e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800318c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd fba8 	bl	80008e4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80031c0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8da 	bl	800337c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40010400 	.word	0x40010400

080031dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <HAL_RTC_WaitForSynchro+0x44>)
 80031ea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80031ec:	f7fd fdd0 	bl	8000d90 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031f2:	e009      	b.n	8003208 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031f4:	f7fd fdcc 	bl	8000d90 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003202:	d901      	bls.n	8003208 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e007      	b.n	8003218 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0ee      	beq.n	80031f4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	0003ff5f 	.word	0x0003ff5f

08003224 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d120      	bne.n	8003280 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f04f 32ff 	mov.w	r2, #4294967295
 8003246:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003248:	f7fd fda2 	bl	8000d90 <HAL_GetTick>
 800324c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800324e:	e00d      	b.n	800326c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003250:	f7fd fd9e 	bl	8000d90 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800325e:	d905      	bls.n	800326c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2203      	movs	r2, #3
 8003268:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <RTC_EnterInitMode+0x5c>
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d1e7      	bne.n	8003250 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003298:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <RTC_ExitInitMode+0x78>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <RTC_ExitInitMode+0x78>)
 800329e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80032a4:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <RTC_ExitInitMode+0x78>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10c      	bne.n	80032ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff93 	bl	80031dc <HAL_RTC_WaitForSynchro>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01e      	beq.n	80032fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2203      	movs	r2, #3
 80032c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e017      	b.n	80032fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <RTC_ExitInitMode+0x78>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <RTC_ExitInitMode+0x78>)
 80032d0:	f023 0320 	bic.w	r3, r3, #32
 80032d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ff80 	bl	80031dc <HAL_RTC_WaitForSynchro>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2203      	movs	r2, #3
 80032e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032ee:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <RTC_ExitInitMode+0x78>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <RTC_ExitInitMode+0x78>)
 80032f4:	f043 0320 	orr.w	r3, r3, #32
 80032f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40002800 	.word	0x40002800

08003308 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800331a:	e005      	b.n	8003328 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	3b0a      	subs	r3, #10
 8003326:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003328:	7afb      	ldrb	r3, [r7, #11]
 800332a:	2b09      	cmp	r3, #9
 800332c:	d8f6      	bhi.n	800331c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	b2da      	uxtb	r2, r3
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	4313      	orrs	r3, r2
 800333a:	b2db      	uxtb	r3, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	4413      	add	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	b2da      	uxtb	r2, r3
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	4413      	add	r3, r2
 800336e:	b2db      	uxtb	r3, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e040      	b.n	8003424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd fb0c 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	@ 0x24
 80033bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fb6a 	bl	8003ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f8af 	bl	8003540 <UART_SetConfig>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01b      	b.n	8003424 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800340a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fbe9 	bl	8003bf4 <UART_CheckIdleState>
 8003422:	4603      	mov	r3, r0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	@ 0x28
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003440:	2b20      	cmp	r3, #32
 8003442:	d177      	bne.n	8003534 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_UART_Transmit+0x24>
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e070      	b.n	8003536 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2221      	movs	r2, #33	@ 0x21
 8003460:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003462:	f7fd fc95 	bl	8000d90 <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003480:	d108      	bne.n	8003494 <HAL_UART_Transmit+0x68>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	e003      	b.n	800349c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800349c:	e02f      	b.n	80034fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2180      	movs	r1, #128	@ 0x80
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fc4b 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e03b      	b.n	8003536 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d0:	b292      	uxth	r2, r2
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	3302      	adds	r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e007      	b.n	80034ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1c9      	bne.n	800349e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2140      	movs	r1, #64	@ 0x40
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fc15 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e005      	b.n	8003536 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003544:	b08a      	sub	sp, #40	@ 0x28
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4313      	orrs	r3, r2
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4ba4      	ldr	r3, [pc, #656]	@ (8003800 <UART_SetConfig+0x2c0>)
 8003570:	4013      	ands	r3, r2
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003578:	430b      	orrs	r3, r1
 800357a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a99      	ldr	r2, [pc, #612]	@ (8003804 <UART_SetConfig+0x2c4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a8:	4313      	orrs	r3, r2
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a90      	ldr	r2, [pc, #576]	@ (8003808 <UART_SetConfig+0x2c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d126      	bne.n	8003618 <UART_SetConfig+0xd8>
 80035ca:	4b90      	ldr	r3, [pc, #576]	@ (800380c <UART_SetConfig+0x2cc>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d81b      	bhi.n	8003610 <UART_SetConfig+0xd0>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <UART_SetConfig+0xa0>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	08003601 	.word	0x08003601
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003609 	.word	0x08003609
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f6:	e116      	b.n	8003826 <UART_SetConfig+0x2e6>
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fe:	e112      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003600:	2304      	movs	r3, #4
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003606:	e10e      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003608:	2308      	movs	r3, #8
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360e:	e10a      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003616:	e106      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7c      	ldr	r2, [pc, #496]	@ (8003810 <UART_SetConfig+0x2d0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d138      	bne.n	8003694 <UART_SetConfig+0x154>
 8003622:	4b7a      	ldr	r3, [pc, #488]	@ (800380c <UART_SetConfig+0x2cc>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d82d      	bhi.n	800368c <UART_SetConfig+0x14c>
 8003630:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <UART_SetConfig+0xf8>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800366d 	.word	0x0800366d
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800368d 	.word	0x0800368d
 8003644:	0800368d 	.word	0x0800368d
 8003648:	0800367d 	.word	0x0800367d
 800364c:	0800368d 	.word	0x0800368d
 8003650:	0800368d 	.word	0x0800368d
 8003654:	0800368d 	.word	0x0800368d
 8003658:	08003675 	.word	0x08003675
 800365c:	0800368d 	.word	0x0800368d
 8003660:	0800368d 	.word	0x0800368d
 8003664:	0800368d 	.word	0x0800368d
 8003668:	08003685 	.word	0x08003685
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003672:	e0d8      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003674:	2302      	movs	r3, #2
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367a:	e0d4      	b.n	8003826 <UART_SetConfig+0x2e6>
 800367c:	2304      	movs	r3, #4
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003682:	e0d0      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003684:	2308      	movs	r3, #8
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368a:	e0cc      	b.n	8003826 <UART_SetConfig+0x2e6>
 800368c:	2310      	movs	r3, #16
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003692:	e0c8      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5e      	ldr	r2, [pc, #376]	@ (8003814 <UART_SetConfig+0x2d4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d125      	bne.n	80036ea <UART_SetConfig+0x1aa>
 800369e:	4b5b      	ldr	r3, [pc, #364]	@ (800380c <UART_SetConfig+0x2cc>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036a8:	2b30      	cmp	r3, #48	@ 0x30
 80036aa:	d016      	beq.n	80036da <UART_SetConfig+0x19a>
 80036ac:	2b30      	cmp	r3, #48	@ 0x30
 80036ae:	d818      	bhi.n	80036e2 <UART_SetConfig+0x1a2>
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d00a      	beq.n	80036ca <UART_SetConfig+0x18a>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d814      	bhi.n	80036e2 <UART_SetConfig+0x1a2>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <UART_SetConfig+0x182>
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d008      	beq.n	80036d2 <UART_SetConfig+0x192>
 80036c0:	e00f      	b.n	80036e2 <UART_SetConfig+0x1a2>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c8:	e0ad      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036ca:	2302      	movs	r3, #2
 80036cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d0:	e0a9      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036d2:	2304      	movs	r3, #4
 80036d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d8:	e0a5      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036da:	2308      	movs	r3, #8
 80036dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e0:	e0a1      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036e2:	2310      	movs	r3, #16
 80036e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e8:	e09d      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003818 <UART_SetConfig+0x2d8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d125      	bne.n	8003740 <UART_SetConfig+0x200>
 80036f4:	4b45      	ldr	r3, [pc, #276]	@ (800380c <UART_SetConfig+0x2cc>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003700:	d016      	beq.n	8003730 <UART_SetConfig+0x1f0>
 8003702:	2bc0      	cmp	r3, #192	@ 0xc0
 8003704:	d818      	bhi.n	8003738 <UART_SetConfig+0x1f8>
 8003706:	2b80      	cmp	r3, #128	@ 0x80
 8003708:	d00a      	beq.n	8003720 <UART_SetConfig+0x1e0>
 800370a:	2b80      	cmp	r3, #128	@ 0x80
 800370c:	d814      	bhi.n	8003738 <UART_SetConfig+0x1f8>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <UART_SetConfig+0x1d8>
 8003712:	2b40      	cmp	r3, #64	@ 0x40
 8003714:	d008      	beq.n	8003728 <UART_SetConfig+0x1e8>
 8003716:	e00f      	b.n	8003738 <UART_SetConfig+0x1f8>
 8003718:	2300      	movs	r3, #0
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800371e:	e082      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003720:	2302      	movs	r3, #2
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003726:	e07e      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003728:	2304      	movs	r3, #4
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372e:	e07a      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003730:	2308      	movs	r3, #8
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003736:	e076      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003738:	2310      	movs	r3, #16
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373e:	e072      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a35      	ldr	r2, [pc, #212]	@ (800381c <UART_SetConfig+0x2dc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d12a      	bne.n	80037a0 <UART_SetConfig+0x260>
 800374a:	4b30      	ldr	r3, [pc, #192]	@ (800380c <UART_SetConfig+0x2cc>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003754:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003758:	d01a      	beq.n	8003790 <UART_SetConfig+0x250>
 800375a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800375e:	d81b      	bhi.n	8003798 <UART_SetConfig+0x258>
 8003760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003764:	d00c      	beq.n	8003780 <UART_SetConfig+0x240>
 8003766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800376a:	d815      	bhi.n	8003798 <UART_SetConfig+0x258>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <UART_SetConfig+0x238>
 8003770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003774:	d008      	beq.n	8003788 <UART_SetConfig+0x248>
 8003776:	e00f      	b.n	8003798 <UART_SetConfig+0x258>
 8003778:	2300      	movs	r3, #0
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377e:	e052      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003780:	2302      	movs	r3, #2
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003786:	e04e      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003788:	2304      	movs	r3, #4
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800378e:	e04a      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003790:	2308      	movs	r3, #8
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003796:	e046      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003798:	2310      	movs	r3, #16
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379e:	e042      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <UART_SetConfig+0x2c4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d13a      	bne.n	8003820 <UART_SetConfig+0x2e0>
 80037aa:	4b18      	ldr	r3, [pc, #96]	@ (800380c <UART_SetConfig+0x2cc>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037b8:	d01a      	beq.n	80037f0 <UART_SetConfig+0x2b0>
 80037ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037be:	d81b      	bhi.n	80037f8 <UART_SetConfig+0x2b8>
 80037c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c4:	d00c      	beq.n	80037e0 <UART_SetConfig+0x2a0>
 80037c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ca:	d815      	bhi.n	80037f8 <UART_SetConfig+0x2b8>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <UART_SetConfig+0x298>
 80037d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d4:	d008      	beq.n	80037e8 <UART_SetConfig+0x2a8>
 80037d6:	e00f      	b.n	80037f8 <UART_SetConfig+0x2b8>
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037de:	e022      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037e0:	2302      	movs	r3, #2
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e6:	e01e      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ee:	e01a      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f6:	e016      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fe:	e012      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003800:	efff69f3 	.word	0xefff69f3
 8003804:	40008000 	.word	0x40008000
 8003808:	40013800 	.word	0x40013800
 800380c:	40021000 	.word	0x40021000
 8003810:	40004400 	.word	0x40004400
 8003814:	40004800 	.word	0x40004800
 8003818:	40004c00 	.word	0x40004c00
 800381c:	40005000 	.word	0x40005000
 8003820:	2310      	movs	r3, #16
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a9f      	ldr	r2, [pc, #636]	@ (8003aa8 <UART_SetConfig+0x568>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d17a      	bne.n	8003926 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003830:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003834:	2b08      	cmp	r3, #8
 8003836:	d824      	bhi.n	8003882 <UART_SetConfig+0x342>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <UART_SetConfig+0x300>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003865 	.word	0x08003865
 8003844:	08003883 	.word	0x08003883
 8003848:	0800386d 	.word	0x0800386d
 800384c:	08003883 	.word	0x08003883
 8003850:	08003873 	.word	0x08003873
 8003854:	08003883 	.word	0x08003883
 8003858:	08003883 	.word	0x08003883
 800385c:	08003883 	.word	0x08003883
 8003860:	0800387b 	.word	0x0800387b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7fe fb9a 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8003868:	61f8      	str	r0, [r7, #28]
        break;
 800386a:	e010      	b.n	800388e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386c:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <UART_SetConfig+0x56c>)
 800386e:	61fb      	str	r3, [r7, #28]
        break;
 8003870:	e00d      	b.n	800388e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003872:	f7fe fafb 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8003876:	61f8      	str	r0, [r7, #28]
        break;
 8003878:	e009      	b.n	800388e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387e:	61fb      	str	r3, [r7, #28]
        break;
 8003880:	e005      	b.n	800388e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800388c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80fb 	beq.w	8003a8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d305      	bcc.n	80038b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d903      	bls.n	80038ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038b8:	e0e8      	b.n	8003a8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2200      	movs	r2, #0
 80038be:	461c      	mov	r4, r3
 80038c0:	4615      	mov	r5, r2
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	022b      	lsls	r3, r5, #8
 80038cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038d0:	0222      	lsls	r2, r4, #8
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	6849      	ldr	r1, [r1, #4]
 80038d6:	0849      	lsrs	r1, r1, #1
 80038d8:	2000      	movs	r0, #0
 80038da:	4688      	mov	r8, r1
 80038dc:	4681      	mov	r9, r0
 80038de:	eb12 0a08 	adds.w	sl, r2, r8
 80038e2:	eb43 0b09 	adc.w	fp, r3, r9
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f4:	4650      	mov	r0, sl
 80038f6:	4659      	mov	r1, fp
 80038f8:	f7fc fcba 	bl	8000270 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800390a:	d308      	bcc.n	800391e <UART_SetConfig+0x3de>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003912:	d204      	bcs.n	800391e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	e0b6      	b.n	8003a8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003924:	e0b2      	b.n	8003a8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392e:	d15e      	bne.n	80039ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003930:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003934:	2b08      	cmp	r3, #8
 8003936:	d828      	bhi.n	800398a <UART_SetConfig+0x44a>
 8003938:	a201      	add	r2, pc, #4	@ (adr r2, 8003940 <UART_SetConfig+0x400>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003965 	.word	0x08003965
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003975 	.word	0x08003975
 800394c:	0800398b 	.word	0x0800398b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800398b 	.word	0x0800398b
 8003958:	0800398b 	.word	0x0800398b
 800395c:	0800398b 	.word	0x0800398b
 8003960:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003964:	f7fe fb1a 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8003968:	61f8      	str	r0, [r7, #28]
        break;
 800396a:	e014      	b.n	8003996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7fe fb2c 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8003970:	61f8      	str	r0, [r7, #28]
        break;
 8003972:	e010      	b.n	8003996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b4d      	ldr	r3, [pc, #308]	@ (8003aac <UART_SetConfig+0x56c>)
 8003976:	61fb      	str	r3, [r7, #28]
        break;
 8003978:	e00d      	b.n	8003996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7fe fa77 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 800397e:	61f8      	str	r0, [r7, #28]
        break;
 8003980:	e009      	b.n	8003996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003986:	61fb      	str	r3, [r7, #28]
        break;
 8003988:	e005      	b.n	8003996 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d077      	beq.n	8003a8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005a      	lsls	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	441a      	add	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d916      	bls.n	80039e6 <UART_SetConfig+0x4a6>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039be:	d212      	bcs.n	80039e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	8afb      	ldrh	r3, [r7, #22]
 80039d8:	4313      	orrs	r3, r2
 80039da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	8afa      	ldrh	r2, [r7, #22]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	e052      	b.n	8003a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039ec:	e04e      	b.n	8003a8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d827      	bhi.n	8003a46 <UART_SetConfig+0x506>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <UART_SetConfig+0x4bc>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a21 	.word	0x08003a21
 8003a00:	08003a29 	.word	0x08003a29
 8003a04:	08003a31 	.word	0x08003a31
 8003a08:	08003a47 	.word	0x08003a47
 8003a0c:	08003a37 	.word	0x08003a37
 8003a10:	08003a47 	.word	0x08003a47
 8003a14:	08003a47 	.word	0x08003a47
 8003a18:	08003a47 	.word	0x08003a47
 8003a1c:	08003a3f 	.word	0x08003a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a20:	f7fe fabc 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8003a24:	61f8      	str	r0, [r7, #28]
        break;
 8003a26:	e014      	b.n	8003a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a28:	f7fe face 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 8003a2c:	61f8      	str	r0, [r7, #28]
        break;
 8003a2e:	e010      	b.n	8003a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a30:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <UART_SetConfig+0x56c>)
 8003a32:	61fb      	str	r3, [r7, #28]
        break;
 8003a34:	e00d      	b.n	8003a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a36:	f7fe fa19 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8003a3a:	61f8      	str	r0, [r7, #28]
        break;
 8003a3c:	e009      	b.n	8003a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a42:	61fb      	str	r3, [r7, #28]
        break;
 8003a44:	e005      	b.n	8003a52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a50:	bf00      	nop
    }

    if (pclk != 0U)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d019      	beq.n	8003a8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	085a      	lsrs	r2, r3, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	441a      	add	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b0f      	cmp	r3, #15
 8003a70:	d909      	bls.n	8003a86 <UART_SetConfig+0x546>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a78:	d205      	bcs.n	8003a86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
 8003a84:	e002      	b.n	8003a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3728      	adds	r7, #40	@ 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40008000 	.word	0x40008000
 8003aac:	00f42400 	.word	0x00f42400

08003ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bae:	d10a      	bne.n	8003bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b098      	sub	sp, #96	@ 0x60
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c04:	f7fd f8c4 	bl	8000d90 <HAL_GetTick>
 8003c08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d12e      	bne.n	8003c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f88c 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d021      	beq.n	8003c76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e062      	b.n	8003d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d149      	bne.n	8003d18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f856 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03c      	beq.n	8003d18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	623b      	str	r3, [r7, #32]
   return(result);
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e6      	bne.n	8003c9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3308      	adds	r3, #8
 8003cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf0:	61fa      	str	r2, [r7, #28]
 8003cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e011      	b.n	8003d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3758      	adds	r7, #88	@ 0x58
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	e049      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d045      	beq.n	8003dea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fd f817 	bl	8000d90 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e048      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d031      	beq.n	8003dea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d110      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f838 	bl	8003e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2208      	movs	r2, #8
 8003da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e029      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc4:	d111      	bne.n	8003dea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f81e 	bl	8003e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e00f      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4013      	ands	r3, r2
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d0a6      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b095      	sub	sp, #84	@ 0x54
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d118      	bne.n	8003eba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f023 0310 	bic.w	r3, r3, #16
 8003e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6979      	ldr	r1, [r7, #20]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e6      	bne.n	8003e88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ece:	bf00      	nop
 8003ed0:	3754      	adds	r7, #84	@ 0x54
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <std>:
 8003edc:	2300      	movs	r3, #0
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eea:	6083      	str	r3, [r0, #8]
 8003eec:	8181      	strh	r1, [r0, #12]
 8003eee:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ef0:	81c2      	strh	r2, [r0, #14]
 8003ef2:	6183      	str	r3, [r0, #24]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	305c      	adds	r0, #92	@ 0x5c
 8003efa:	f000 fa07 	bl	800430c <memset>
 8003efe:	4b0d      	ldr	r3, [pc, #52]	@ (8003f34 <std+0x58>)
 8003f00:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <std+0x5c>)
 8003f04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <std+0x60>)
 8003f08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <std+0x64>)
 8003f0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <std+0x68>)
 8003f10:	6224      	str	r4, [r4, #32]
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d006      	beq.n	8003f24 <std+0x48>
 8003f16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f1a:	4294      	cmp	r4, r2
 8003f1c:	d002      	beq.n	8003f24 <std+0x48>
 8003f1e:	33d0      	adds	r3, #208	@ 0xd0
 8003f20:	429c      	cmp	r4, r3
 8003f22:	d105      	bne.n	8003f30 <std+0x54>
 8003f24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2c:	f000 ba66 	b.w	80043fc <__retarget_lock_init_recursive>
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	bf00      	nop
 8003f34:	0800415d 	.word	0x0800415d
 8003f38:	0800417f 	.word	0x0800417f
 8003f3c:	080041b7 	.word	0x080041b7
 8003f40:	080041db 	.word	0x080041db
 8003f44:	20000190 	.word	0x20000190

08003f48 <stdio_exit_handler>:
 8003f48:	4a02      	ldr	r2, [pc, #8]	@ (8003f54 <stdio_exit_handler+0xc>)
 8003f4a:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <stdio_exit_handler+0x10>)
 8003f4c:	4803      	ldr	r0, [pc, #12]	@ (8003f5c <stdio_exit_handler+0x14>)
 8003f4e:	f000 b869 	b.w	8004024 <_fwalk_sglue>
 8003f52:	bf00      	nop
 8003f54:	2000000c 	.word	0x2000000c
 8003f58:	08004cc9 	.word	0x08004cc9
 8003f5c:	2000001c 	.word	0x2000001c

08003f60 <cleanup_stdio>:
 8003f60:	6841      	ldr	r1, [r0, #4]
 8003f62:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <cleanup_stdio+0x34>)
 8003f64:	4299      	cmp	r1, r3
 8003f66:	b510      	push	{r4, lr}
 8003f68:	4604      	mov	r4, r0
 8003f6a:	d001      	beq.n	8003f70 <cleanup_stdio+0x10>
 8003f6c:	f000 feac 	bl	8004cc8 <_fflush_r>
 8003f70:	68a1      	ldr	r1, [r4, #8]
 8003f72:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <cleanup_stdio+0x38>)
 8003f74:	4299      	cmp	r1, r3
 8003f76:	d002      	beq.n	8003f7e <cleanup_stdio+0x1e>
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 fea5 	bl	8004cc8 <_fflush_r>
 8003f7e:	68e1      	ldr	r1, [r4, #12]
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <cleanup_stdio+0x3c>)
 8003f82:	4299      	cmp	r1, r3
 8003f84:	d004      	beq.n	8003f90 <cleanup_stdio+0x30>
 8003f86:	4620      	mov	r0, r4
 8003f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8c:	f000 be9c 	b.w	8004cc8 <_fflush_r>
 8003f90:	bd10      	pop	{r4, pc}
 8003f92:	bf00      	nop
 8003f94:	20000190 	.word	0x20000190
 8003f98:	200001f8 	.word	0x200001f8
 8003f9c:	20000260 	.word	0x20000260

08003fa0 <global_stdio_init.part.0>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <global_stdio_init.part.0+0x30>)
 8003fa4:	4c0b      	ldr	r4, [pc, #44]	@ (8003fd4 <global_stdio_init.part.0+0x34>)
 8003fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd8 <global_stdio_init.part.0+0x38>)
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	4620      	mov	r0, r4
 8003fac:	2200      	movs	r2, #0
 8003fae:	2104      	movs	r1, #4
 8003fb0:	f7ff ff94 	bl	8003edc <std>
 8003fb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fb8:	2201      	movs	r2, #1
 8003fba:	2109      	movs	r1, #9
 8003fbc:	f7ff ff8e 	bl	8003edc <std>
 8003fc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fca:	2112      	movs	r1, #18
 8003fcc:	f7ff bf86 	b.w	8003edc <std>
 8003fd0:	200002c8 	.word	0x200002c8
 8003fd4:	20000190 	.word	0x20000190
 8003fd8:	08003f49 	.word	0x08003f49

08003fdc <__sfp_lock_acquire>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	@ (8003fe4 <__sfp_lock_acquire+0x8>)
 8003fde:	f000 ba0e 	b.w	80043fe <__retarget_lock_acquire_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	200002d1 	.word	0x200002d1

08003fe8 <__sfp_lock_release>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	@ (8003ff0 <__sfp_lock_release+0x8>)
 8003fea:	f000 ba09 	b.w	8004400 <__retarget_lock_release_recursive>
 8003fee:	bf00      	nop
 8003ff0:	200002d1 	.word	0x200002d1

08003ff4 <__sinit>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	f7ff fff0 	bl	8003fdc <__sfp_lock_acquire>
 8003ffc:	6a23      	ldr	r3, [r4, #32]
 8003ffe:	b11b      	cbz	r3, 8004008 <__sinit+0x14>
 8004000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004004:	f7ff bff0 	b.w	8003fe8 <__sfp_lock_release>
 8004008:	4b04      	ldr	r3, [pc, #16]	@ (800401c <__sinit+0x28>)
 800400a:	6223      	str	r3, [r4, #32]
 800400c:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <__sinit+0x2c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f5      	bne.n	8004000 <__sinit+0xc>
 8004014:	f7ff ffc4 	bl	8003fa0 <global_stdio_init.part.0>
 8004018:	e7f2      	b.n	8004000 <__sinit+0xc>
 800401a:	bf00      	nop
 800401c:	08003f61 	.word	0x08003f61
 8004020:	200002c8 	.word	0x200002c8

08004024 <_fwalk_sglue>:
 8004024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004028:	4607      	mov	r7, r0
 800402a:	4688      	mov	r8, r1
 800402c:	4614      	mov	r4, r2
 800402e:	2600      	movs	r6, #0
 8004030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004034:	f1b9 0901 	subs.w	r9, r9, #1
 8004038:	d505      	bpl.n	8004046 <_fwalk_sglue+0x22>
 800403a:	6824      	ldr	r4, [r4, #0]
 800403c:	2c00      	cmp	r4, #0
 800403e:	d1f7      	bne.n	8004030 <_fwalk_sglue+0xc>
 8004040:	4630      	mov	r0, r6
 8004042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004046:	89ab      	ldrh	r3, [r5, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d907      	bls.n	800405c <_fwalk_sglue+0x38>
 800404c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004050:	3301      	adds	r3, #1
 8004052:	d003      	beq.n	800405c <_fwalk_sglue+0x38>
 8004054:	4629      	mov	r1, r5
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	4306      	orrs	r6, r0
 800405c:	3568      	adds	r5, #104	@ 0x68
 800405e:	e7e9      	b.n	8004034 <_fwalk_sglue+0x10>

08004060 <_puts_r>:
 8004060:	6a03      	ldr	r3, [r0, #32]
 8004062:	b570      	push	{r4, r5, r6, lr}
 8004064:	6884      	ldr	r4, [r0, #8]
 8004066:	4605      	mov	r5, r0
 8004068:	460e      	mov	r6, r1
 800406a:	b90b      	cbnz	r3, 8004070 <_puts_r+0x10>
 800406c:	f7ff ffc2 	bl	8003ff4 <__sinit>
 8004070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004072:	07db      	lsls	r3, r3, #31
 8004074:	d405      	bmi.n	8004082 <_puts_r+0x22>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	0598      	lsls	r0, r3, #22
 800407a:	d402      	bmi.n	8004082 <_puts_r+0x22>
 800407c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800407e:	f000 f9be 	bl	80043fe <__retarget_lock_acquire_recursive>
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	0719      	lsls	r1, r3, #28
 8004086:	d502      	bpl.n	800408e <_puts_r+0x2e>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d135      	bne.n	80040fa <_puts_r+0x9a>
 800408e:	4621      	mov	r1, r4
 8004090:	4628      	mov	r0, r5
 8004092:	f000 f8e5 	bl	8004260 <__swsetup_r>
 8004096:	b380      	cbz	r0, 80040fa <_puts_r+0x9a>
 8004098:	f04f 35ff 	mov.w	r5, #4294967295
 800409c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800409e:	07da      	lsls	r2, r3, #31
 80040a0:	d405      	bmi.n	80040ae <_puts_r+0x4e>
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	059b      	lsls	r3, r3, #22
 80040a6:	d402      	bmi.n	80040ae <_puts_r+0x4e>
 80040a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040aa:	f000 f9a9 	bl	8004400 <__retarget_lock_release_recursive>
 80040ae:	4628      	mov	r0, r5
 80040b0:	bd70      	pop	{r4, r5, r6, pc}
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da04      	bge.n	80040c0 <_puts_r+0x60>
 80040b6:	69a2      	ldr	r2, [r4, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	dc17      	bgt.n	80040ec <_puts_r+0x8c>
 80040bc:	290a      	cmp	r1, #10
 80040be:	d015      	beq.n	80040ec <_puts_r+0x8c>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	6022      	str	r2, [r4, #0]
 80040c6:	7019      	strb	r1, [r3, #0]
 80040c8:	68a3      	ldr	r3, [r4, #8]
 80040ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ce:	3b01      	subs	r3, #1
 80040d0:	60a3      	str	r3, [r4, #8]
 80040d2:	2900      	cmp	r1, #0
 80040d4:	d1ed      	bne.n	80040b2 <_puts_r+0x52>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da11      	bge.n	80040fe <_puts_r+0x9e>
 80040da:	4622      	mov	r2, r4
 80040dc:	210a      	movs	r1, #10
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 f87f 	bl	80041e2 <__swbuf_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d0d7      	beq.n	8004098 <_puts_r+0x38>
 80040e8:	250a      	movs	r5, #10
 80040ea:	e7d7      	b.n	800409c <_puts_r+0x3c>
 80040ec:	4622      	mov	r2, r4
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 f877 	bl	80041e2 <__swbuf_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d1e7      	bne.n	80040c8 <_puts_r+0x68>
 80040f8:	e7ce      	b.n	8004098 <_puts_r+0x38>
 80040fa:	3e01      	subs	r6, #1
 80040fc:	e7e4      	b.n	80040c8 <_puts_r+0x68>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	6022      	str	r2, [r4, #0]
 8004104:	220a      	movs	r2, #10
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e7ee      	b.n	80040e8 <_puts_r+0x88>
	...

0800410c <puts>:
 800410c:	4b02      	ldr	r3, [pc, #8]	@ (8004118 <puts+0xc>)
 800410e:	4601      	mov	r1, r0
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	f7ff bfa5 	b.w	8004060 <_puts_r>
 8004116:	bf00      	nop
 8004118:	20000018 	.word	0x20000018

0800411c <siprintf>:
 800411c:	b40e      	push	{r1, r2, r3}
 800411e:	b500      	push	{lr}
 8004120:	b09c      	sub	sp, #112	@ 0x70
 8004122:	ab1d      	add	r3, sp, #116	@ 0x74
 8004124:	9002      	str	r0, [sp, #8]
 8004126:	9006      	str	r0, [sp, #24]
 8004128:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800412c:	4809      	ldr	r0, [pc, #36]	@ (8004154 <siprintf+0x38>)
 800412e:	9107      	str	r1, [sp, #28]
 8004130:	9104      	str	r1, [sp, #16]
 8004132:	4909      	ldr	r1, [pc, #36]	@ (8004158 <siprintf+0x3c>)
 8004134:	f853 2b04 	ldr.w	r2, [r3], #4
 8004138:	9105      	str	r1, [sp, #20]
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	a902      	add	r1, sp, #8
 8004140:	f000 fab4 	bl	80046ac <_svfiprintf_r>
 8004144:	9b02      	ldr	r3, [sp, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	b01c      	add	sp, #112	@ 0x70
 800414c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004150:	b003      	add	sp, #12
 8004152:	4770      	bx	lr
 8004154:	20000018 	.word	0x20000018
 8004158:	ffff0208 	.word	0xffff0208

0800415c <__sread>:
 800415c:	b510      	push	{r4, lr}
 800415e:	460c      	mov	r4, r1
 8004160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004164:	f000 f8fc 	bl	8004360 <_read_r>
 8004168:	2800      	cmp	r0, #0
 800416a:	bfab      	itete	ge
 800416c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800416e:	89a3      	ldrhlt	r3, [r4, #12]
 8004170:	181b      	addge	r3, r3, r0
 8004172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004176:	bfac      	ite	ge
 8004178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800417a:	81a3      	strhlt	r3, [r4, #12]
 800417c:	bd10      	pop	{r4, pc}

0800417e <__swrite>:
 800417e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004182:	461f      	mov	r7, r3
 8004184:	898b      	ldrh	r3, [r1, #12]
 8004186:	05db      	lsls	r3, r3, #23
 8004188:	4605      	mov	r5, r0
 800418a:	460c      	mov	r4, r1
 800418c:	4616      	mov	r6, r2
 800418e:	d505      	bpl.n	800419c <__swrite+0x1e>
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	2302      	movs	r3, #2
 8004196:	2200      	movs	r2, #0
 8004198:	f000 f8d0 	bl	800433c <_lseek_r>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	4632      	mov	r2, r6
 80041aa:	463b      	mov	r3, r7
 80041ac:	4628      	mov	r0, r5
 80041ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	f000 b8e7 	b.w	8004384 <_write_r>

080041b6 <__sseek>:
 80041b6:	b510      	push	{r4, lr}
 80041b8:	460c      	mov	r4, r1
 80041ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041be:	f000 f8bd 	bl	800433c <_lseek_r>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	bf15      	itete	ne
 80041c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041d2:	81a3      	strheq	r3, [r4, #12]
 80041d4:	bf18      	it	ne
 80041d6:	81a3      	strhne	r3, [r4, #12]
 80041d8:	bd10      	pop	{r4, pc}

080041da <__sclose>:
 80041da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041de:	f000 b89d 	b.w	800431c <_close_r>

080041e2 <__swbuf_r>:
 80041e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e4:	460e      	mov	r6, r1
 80041e6:	4614      	mov	r4, r2
 80041e8:	4605      	mov	r5, r0
 80041ea:	b118      	cbz	r0, 80041f4 <__swbuf_r+0x12>
 80041ec:	6a03      	ldr	r3, [r0, #32]
 80041ee:	b90b      	cbnz	r3, 80041f4 <__swbuf_r+0x12>
 80041f0:	f7ff ff00 	bl	8003ff4 <__sinit>
 80041f4:	69a3      	ldr	r3, [r4, #24]
 80041f6:	60a3      	str	r3, [r4, #8]
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	071a      	lsls	r2, r3, #28
 80041fc:	d501      	bpl.n	8004202 <__swbuf_r+0x20>
 80041fe:	6923      	ldr	r3, [r4, #16]
 8004200:	b943      	cbnz	r3, 8004214 <__swbuf_r+0x32>
 8004202:	4621      	mov	r1, r4
 8004204:	4628      	mov	r0, r5
 8004206:	f000 f82b 	bl	8004260 <__swsetup_r>
 800420a:	b118      	cbz	r0, 8004214 <__swbuf_r+0x32>
 800420c:	f04f 37ff 	mov.w	r7, #4294967295
 8004210:	4638      	mov	r0, r7
 8004212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	6922      	ldr	r2, [r4, #16]
 8004218:	1a98      	subs	r0, r3, r2
 800421a:	6963      	ldr	r3, [r4, #20]
 800421c:	b2f6      	uxtb	r6, r6
 800421e:	4283      	cmp	r3, r0
 8004220:	4637      	mov	r7, r6
 8004222:	dc05      	bgt.n	8004230 <__swbuf_r+0x4e>
 8004224:	4621      	mov	r1, r4
 8004226:	4628      	mov	r0, r5
 8004228:	f000 fd4e 	bl	8004cc8 <_fflush_r>
 800422c:	2800      	cmp	r0, #0
 800422e:	d1ed      	bne.n	800420c <__swbuf_r+0x2a>
 8004230:	68a3      	ldr	r3, [r4, #8]
 8004232:	3b01      	subs	r3, #1
 8004234:	60a3      	str	r3, [r4, #8]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	6022      	str	r2, [r4, #0]
 800423c:	701e      	strb	r6, [r3, #0]
 800423e:	6962      	ldr	r2, [r4, #20]
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	429a      	cmp	r2, r3
 8004244:	d004      	beq.n	8004250 <__swbuf_r+0x6e>
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	07db      	lsls	r3, r3, #31
 800424a:	d5e1      	bpl.n	8004210 <__swbuf_r+0x2e>
 800424c:	2e0a      	cmp	r6, #10
 800424e:	d1df      	bne.n	8004210 <__swbuf_r+0x2e>
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	f000 fd38 	bl	8004cc8 <_fflush_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	d0d9      	beq.n	8004210 <__swbuf_r+0x2e>
 800425c:	e7d6      	b.n	800420c <__swbuf_r+0x2a>
	...

08004260 <__swsetup_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4b29      	ldr	r3, [pc, #164]	@ (8004308 <__swsetup_r+0xa8>)
 8004264:	4605      	mov	r5, r0
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	460c      	mov	r4, r1
 800426a:	b118      	cbz	r0, 8004274 <__swsetup_r+0x14>
 800426c:	6a03      	ldr	r3, [r0, #32]
 800426e:	b90b      	cbnz	r3, 8004274 <__swsetup_r+0x14>
 8004270:	f7ff fec0 	bl	8003ff4 <__sinit>
 8004274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004278:	0719      	lsls	r1, r3, #28
 800427a:	d422      	bmi.n	80042c2 <__swsetup_r+0x62>
 800427c:	06da      	lsls	r2, r3, #27
 800427e:	d407      	bmi.n	8004290 <__swsetup_r+0x30>
 8004280:	2209      	movs	r2, #9
 8004282:	602a      	str	r2, [r5, #0]
 8004284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	f04f 30ff 	mov.w	r0, #4294967295
 800428e:	e033      	b.n	80042f8 <__swsetup_r+0x98>
 8004290:	0758      	lsls	r0, r3, #29
 8004292:	d512      	bpl.n	80042ba <__swsetup_r+0x5a>
 8004294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004296:	b141      	cbz	r1, 80042aa <__swsetup_r+0x4a>
 8004298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800429c:	4299      	cmp	r1, r3
 800429e:	d002      	beq.n	80042a6 <__swsetup_r+0x46>
 80042a0:	4628      	mov	r0, r5
 80042a2:	f000 f8af 	bl	8004404 <_free_r>
 80042a6:	2300      	movs	r3, #0
 80042a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	2300      	movs	r3, #0
 80042b4:	6063      	str	r3, [r4, #4]
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	81a3      	strh	r3, [r4, #12]
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	b94b      	cbnz	r3, 80042da <__swsetup_r+0x7a>
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d0:	d003      	beq.n	80042da <__swsetup_r+0x7a>
 80042d2:	4621      	mov	r1, r4
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 fd45 	bl	8004d64 <__smakebuf_r>
 80042da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042de:	f013 0201 	ands.w	r2, r3, #1
 80042e2:	d00a      	beq.n	80042fa <__swsetup_r+0x9a>
 80042e4:	2200      	movs	r2, #0
 80042e6:	60a2      	str	r2, [r4, #8]
 80042e8:	6962      	ldr	r2, [r4, #20]
 80042ea:	4252      	negs	r2, r2
 80042ec:	61a2      	str	r2, [r4, #24]
 80042ee:	6922      	ldr	r2, [r4, #16]
 80042f0:	b942      	cbnz	r2, 8004304 <__swsetup_r+0xa4>
 80042f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042f6:	d1c5      	bne.n	8004284 <__swsetup_r+0x24>
 80042f8:	bd38      	pop	{r3, r4, r5, pc}
 80042fa:	0799      	lsls	r1, r3, #30
 80042fc:	bf58      	it	pl
 80042fe:	6962      	ldrpl	r2, [r4, #20]
 8004300:	60a2      	str	r2, [r4, #8]
 8004302:	e7f4      	b.n	80042ee <__swsetup_r+0x8e>
 8004304:	2000      	movs	r0, #0
 8004306:	e7f7      	b.n	80042f8 <__swsetup_r+0x98>
 8004308:	20000018 	.word	0x20000018

0800430c <memset>:
 800430c:	4402      	add	r2, r0
 800430e:	4603      	mov	r3, r0
 8004310:	4293      	cmp	r3, r2
 8004312:	d100      	bne.n	8004316 <memset+0xa>
 8004314:	4770      	bx	lr
 8004316:	f803 1b01 	strb.w	r1, [r3], #1
 800431a:	e7f9      	b.n	8004310 <memset+0x4>

0800431c <_close_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d06      	ldr	r5, [pc, #24]	@ (8004338 <_close_r+0x1c>)
 8004320:	2300      	movs	r3, #0
 8004322:	4604      	mov	r4, r0
 8004324:	4608      	mov	r0, r1
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	f7fc fc1c 	bl	8000b64 <_close>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_close_r+0x1a>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_close_r+0x1a>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	200002cc 	.word	0x200002cc

0800433c <_lseek_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d07      	ldr	r5, [pc, #28]	@ (800435c <_lseek_r+0x20>)
 8004340:	4604      	mov	r4, r0
 8004342:	4608      	mov	r0, r1
 8004344:	4611      	mov	r1, r2
 8004346:	2200      	movs	r2, #0
 8004348:	602a      	str	r2, [r5, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f7fc fc31 	bl	8000bb2 <_lseek>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_lseek_r+0x1e>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_lseek_r+0x1e>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	200002cc 	.word	0x200002cc

08004360 <_read_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4d07      	ldr	r5, [pc, #28]	@ (8004380 <_read_r+0x20>)
 8004364:	4604      	mov	r4, r0
 8004366:	4608      	mov	r0, r1
 8004368:	4611      	mov	r1, r2
 800436a:	2200      	movs	r2, #0
 800436c:	602a      	str	r2, [r5, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f7fc fbc4 	bl	8000afc <_read>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_read_r+0x1e>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_read_r+0x1e>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	200002cc 	.word	0x200002cc

08004384 <_write_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4d07      	ldr	r5, [pc, #28]	@ (80043a4 <_write_r+0x20>)
 8004388:	4604      	mov	r4, r0
 800438a:	4608      	mov	r0, r1
 800438c:	4611      	mov	r1, r2
 800438e:	2200      	movs	r2, #0
 8004390:	602a      	str	r2, [r5, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f7fc fbd0 	bl	8000b38 <_write>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_write_r+0x1e>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_write_r+0x1e>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	200002cc 	.word	0x200002cc

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	@ (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000018 	.word	0x20000018

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	@ (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	@ (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	@ (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	@ (80043f8 <__libc_init_array+0x44>)
 80043c8:	f000 fd98 	bl	8004efc <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08004fe8 	.word	0x08004fe8
 80043f0:	08004fe8 	.word	0x08004fe8
 80043f4:	08004fe8 	.word	0x08004fe8
 80043f8:	08004fec 	.word	0x08004fec

080043fc <__retarget_lock_init_recursive>:
 80043fc:	4770      	bx	lr

080043fe <__retarget_lock_acquire_recursive>:
 80043fe:	4770      	bx	lr

08004400 <__retarget_lock_release_recursive>:
 8004400:	4770      	bx	lr
	...

08004404 <_free_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4605      	mov	r5, r0
 8004408:	2900      	cmp	r1, #0
 800440a:	d041      	beq.n	8004490 <_free_r+0x8c>
 800440c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004410:	1f0c      	subs	r4, r1, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	bfb8      	it	lt
 8004416:	18e4      	addlt	r4, r4, r3
 8004418:	f000 f8e0 	bl	80045dc <__malloc_lock>
 800441c:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <_free_r+0x90>)
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	b933      	cbnz	r3, 8004430 <_free_r+0x2c>
 8004422:	6063      	str	r3, [r4, #4]
 8004424:	6014      	str	r4, [r2, #0]
 8004426:	4628      	mov	r0, r5
 8004428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800442c:	f000 b8dc 	b.w	80045e8 <__malloc_unlock>
 8004430:	42a3      	cmp	r3, r4
 8004432:	d908      	bls.n	8004446 <_free_r+0x42>
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	1821      	adds	r1, r4, r0
 8004438:	428b      	cmp	r3, r1
 800443a:	bf01      	itttt	eq
 800443c:	6819      	ldreq	r1, [r3, #0]
 800443e:	685b      	ldreq	r3, [r3, #4]
 8004440:	1809      	addeq	r1, r1, r0
 8004442:	6021      	streq	r1, [r4, #0]
 8004444:	e7ed      	b.n	8004422 <_free_r+0x1e>
 8004446:	461a      	mov	r2, r3
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b10b      	cbz	r3, 8004450 <_free_r+0x4c>
 800444c:	42a3      	cmp	r3, r4
 800444e:	d9fa      	bls.n	8004446 <_free_r+0x42>
 8004450:	6811      	ldr	r1, [r2, #0]
 8004452:	1850      	adds	r0, r2, r1
 8004454:	42a0      	cmp	r0, r4
 8004456:	d10b      	bne.n	8004470 <_free_r+0x6c>
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	4401      	add	r1, r0
 800445c:	1850      	adds	r0, r2, r1
 800445e:	4283      	cmp	r3, r0
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	d1e0      	bne.n	8004426 <_free_r+0x22>
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	6053      	str	r3, [r2, #4]
 800446a:	4408      	add	r0, r1
 800446c:	6010      	str	r0, [r2, #0]
 800446e:	e7da      	b.n	8004426 <_free_r+0x22>
 8004470:	d902      	bls.n	8004478 <_free_r+0x74>
 8004472:	230c      	movs	r3, #12
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	e7d6      	b.n	8004426 <_free_r+0x22>
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	1821      	adds	r1, r4, r0
 800447c:	428b      	cmp	r3, r1
 800447e:	bf04      	itt	eq
 8004480:	6819      	ldreq	r1, [r3, #0]
 8004482:	685b      	ldreq	r3, [r3, #4]
 8004484:	6063      	str	r3, [r4, #4]
 8004486:	bf04      	itt	eq
 8004488:	1809      	addeq	r1, r1, r0
 800448a:	6021      	streq	r1, [r4, #0]
 800448c:	6054      	str	r4, [r2, #4]
 800448e:	e7ca      	b.n	8004426 <_free_r+0x22>
 8004490:	bd38      	pop	{r3, r4, r5, pc}
 8004492:	bf00      	nop
 8004494:	200002d8 	.word	0x200002d8

08004498 <sbrk_aligned>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4e0f      	ldr	r6, [pc, #60]	@ (80044d8 <sbrk_aligned+0x40>)
 800449c:	460c      	mov	r4, r1
 800449e:	6831      	ldr	r1, [r6, #0]
 80044a0:	4605      	mov	r5, r0
 80044a2:	b911      	cbnz	r1, 80044aa <sbrk_aligned+0x12>
 80044a4:	f000 fcd6 	bl	8004e54 <_sbrk_r>
 80044a8:	6030      	str	r0, [r6, #0]
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 fcd1 	bl	8004e54 <_sbrk_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	d103      	bne.n	80044be <sbrk_aligned+0x26>
 80044b6:	f04f 34ff 	mov.w	r4, #4294967295
 80044ba:	4620      	mov	r0, r4
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
 80044be:	1cc4      	adds	r4, r0, #3
 80044c0:	f024 0403 	bic.w	r4, r4, #3
 80044c4:	42a0      	cmp	r0, r4
 80044c6:	d0f8      	beq.n	80044ba <sbrk_aligned+0x22>
 80044c8:	1a21      	subs	r1, r4, r0
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 fcc2 	bl	8004e54 <_sbrk_r>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d1f2      	bne.n	80044ba <sbrk_aligned+0x22>
 80044d4:	e7ef      	b.n	80044b6 <sbrk_aligned+0x1e>
 80044d6:	bf00      	nop
 80044d8:	200002d4 	.word	0x200002d4

080044dc <_malloc_r>:
 80044dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e0:	1ccd      	adds	r5, r1, #3
 80044e2:	f025 0503 	bic.w	r5, r5, #3
 80044e6:	3508      	adds	r5, #8
 80044e8:	2d0c      	cmp	r5, #12
 80044ea:	bf38      	it	cc
 80044ec:	250c      	movcc	r5, #12
 80044ee:	2d00      	cmp	r5, #0
 80044f0:	4606      	mov	r6, r0
 80044f2:	db01      	blt.n	80044f8 <_malloc_r+0x1c>
 80044f4:	42a9      	cmp	r1, r5
 80044f6:	d904      	bls.n	8004502 <_malloc_r+0x26>
 80044f8:	230c      	movs	r3, #12
 80044fa:	6033      	str	r3, [r6, #0]
 80044fc:	2000      	movs	r0, #0
 80044fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045d8 <_malloc_r+0xfc>
 8004506:	f000 f869 	bl	80045dc <__malloc_lock>
 800450a:	f8d8 3000 	ldr.w	r3, [r8]
 800450e:	461c      	mov	r4, r3
 8004510:	bb44      	cbnz	r4, 8004564 <_malloc_r+0x88>
 8004512:	4629      	mov	r1, r5
 8004514:	4630      	mov	r0, r6
 8004516:	f7ff ffbf 	bl	8004498 <sbrk_aligned>
 800451a:	1c43      	adds	r3, r0, #1
 800451c:	4604      	mov	r4, r0
 800451e:	d158      	bne.n	80045d2 <_malloc_r+0xf6>
 8004520:	f8d8 4000 	ldr.w	r4, [r8]
 8004524:	4627      	mov	r7, r4
 8004526:	2f00      	cmp	r7, #0
 8004528:	d143      	bne.n	80045b2 <_malloc_r+0xd6>
 800452a:	2c00      	cmp	r4, #0
 800452c:	d04b      	beq.n	80045c6 <_malloc_r+0xea>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	4639      	mov	r1, r7
 8004532:	4630      	mov	r0, r6
 8004534:	eb04 0903 	add.w	r9, r4, r3
 8004538:	f000 fc8c 	bl	8004e54 <_sbrk_r>
 800453c:	4581      	cmp	r9, r0
 800453e:	d142      	bne.n	80045c6 <_malloc_r+0xea>
 8004540:	6821      	ldr	r1, [r4, #0]
 8004542:	1a6d      	subs	r5, r5, r1
 8004544:	4629      	mov	r1, r5
 8004546:	4630      	mov	r0, r6
 8004548:	f7ff ffa6 	bl	8004498 <sbrk_aligned>
 800454c:	3001      	adds	r0, #1
 800454e:	d03a      	beq.n	80045c6 <_malloc_r+0xea>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	442b      	add	r3, r5
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	f8d8 3000 	ldr.w	r3, [r8]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	bb62      	cbnz	r2, 80045b8 <_malloc_r+0xdc>
 800455e:	f8c8 7000 	str.w	r7, [r8]
 8004562:	e00f      	b.n	8004584 <_malloc_r+0xa8>
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	1b52      	subs	r2, r2, r5
 8004568:	d420      	bmi.n	80045ac <_malloc_r+0xd0>
 800456a:	2a0b      	cmp	r2, #11
 800456c:	d917      	bls.n	800459e <_malloc_r+0xc2>
 800456e:	1961      	adds	r1, r4, r5
 8004570:	42a3      	cmp	r3, r4
 8004572:	6025      	str	r5, [r4, #0]
 8004574:	bf18      	it	ne
 8004576:	6059      	strne	r1, [r3, #4]
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	bf08      	it	eq
 800457c:	f8c8 1000 	streq.w	r1, [r8]
 8004580:	5162      	str	r2, [r4, r5]
 8004582:	604b      	str	r3, [r1, #4]
 8004584:	4630      	mov	r0, r6
 8004586:	f000 f82f 	bl	80045e8 <__malloc_unlock>
 800458a:	f104 000b 	add.w	r0, r4, #11
 800458e:	1d23      	adds	r3, r4, #4
 8004590:	f020 0007 	bic.w	r0, r0, #7
 8004594:	1ac2      	subs	r2, r0, r3
 8004596:	bf1c      	itt	ne
 8004598:	1a1b      	subne	r3, r3, r0
 800459a:	50a3      	strne	r3, [r4, r2]
 800459c:	e7af      	b.n	80044fe <_malloc_r+0x22>
 800459e:	6862      	ldr	r2, [r4, #4]
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	bf0c      	ite	eq
 80045a4:	f8c8 2000 	streq.w	r2, [r8]
 80045a8:	605a      	strne	r2, [r3, #4]
 80045aa:	e7eb      	b.n	8004584 <_malloc_r+0xa8>
 80045ac:	4623      	mov	r3, r4
 80045ae:	6864      	ldr	r4, [r4, #4]
 80045b0:	e7ae      	b.n	8004510 <_malloc_r+0x34>
 80045b2:	463c      	mov	r4, r7
 80045b4:	687f      	ldr	r7, [r7, #4]
 80045b6:	e7b6      	b.n	8004526 <_malloc_r+0x4a>
 80045b8:	461a      	mov	r2, r3
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	42a3      	cmp	r3, r4
 80045be:	d1fb      	bne.n	80045b8 <_malloc_r+0xdc>
 80045c0:	2300      	movs	r3, #0
 80045c2:	6053      	str	r3, [r2, #4]
 80045c4:	e7de      	b.n	8004584 <_malloc_r+0xa8>
 80045c6:	230c      	movs	r3, #12
 80045c8:	6033      	str	r3, [r6, #0]
 80045ca:	4630      	mov	r0, r6
 80045cc:	f000 f80c 	bl	80045e8 <__malloc_unlock>
 80045d0:	e794      	b.n	80044fc <_malloc_r+0x20>
 80045d2:	6005      	str	r5, [r0, #0]
 80045d4:	e7d6      	b.n	8004584 <_malloc_r+0xa8>
 80045d6:	bf00      	nop
 80045d8:	200002d8 	.word	0x200002d8

080045dc <__malloc_lock>:
 80045dc:	4801      	ldr	r0, [pc, #4]	@ (80045e4 <__malloc_lock+0x8>)
 80045de:	f7ff bf0e 	b.w	80043fe <__retarget_lock_acquire_recursive>
 80045e2:	bf00      	nop
 80045e4:	200002d0 	.word	0x200002d0

080045e8 <__malloc_unlock>:
 80045e8:	4801      	ldr	r0, [pc, #4]	@ (80045f0 <__malloc_unlock+0x8>)
 80045ea:	f7ff bf09 	b.w	8004400 <__retarget_lock_release_recursive>
 80045ee:	bf00      	nop
 80045f0:	200002d0 	.word	0x200002d0

080045f4 <__ssputs_r>:
 80045f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	688e      	ldr	r6, [r1, #8]
 80045fa:	461f      	mov	r7, r3
 80045fc:	42be      	cmp	r6, r7
 80045fe:	680b      	ldr	r3, [r1, #0]
 8004600:	4682      	mov	sl, r0
 8004602:	460c      	mov	r4, r1
 8004604:	4690      	mov	r8, r2
 8004606:	d82d      	bhi.n	8004664 <__ssputs_r+0x70>
 8004608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800460c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004610:	d026      	beq.n	8004660 <__ssputs_r+0x6c>
 8004612:	6965      	ldr	r5, [r4, #20]
 8004614:	6909      	ldr	r1, [r1, #16]
 8004616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800461a:	eba3 0901 	sub.w	r9, r3, r1
 800461e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004622:	1c7b      	adds	r3, r7, #1
 8004624:	444b      	add	r3, r9
 8004626:	106d      	asrs	r5, r5, #1
 8004628:	429d      	cmp	r5, r3
 800462a:	bf38      	it	cc
 800462c:	461d      	movcc	r5, r3
 800462e:	0553      	lsls	r3, r2, #21
 8004630:	d527      	bpl.n	8004682 <__ssputs_r+0x8e>
 8004632:	4629      	mov	r1, r5
 8004634:	f7ff ff52 	bl	80044dc <_malloc_r>
 8004638:	4606      	mov	r6, r0
 800463a:	b360      	cbz	r0, 8004696 <__ssputs_r+0xa2>
 800463c:	6921      	ldr	r1, [r4, #16]
 800463e:	464a      	mov	r2, r9
 8004640:	f000 fc18 	bl	8004e74 <memcpy>
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800464a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	6126      	str	r6, [r4, #16]
 8004652:	6165      	str	r5, [r4, #20]
 8004654:	444e      	add	r6, r9
 8004656:	eba5 0509 	sub.w	r5, r5, r9
 800465a:	6026      	str	r6, [r4, #0]
 800465c:	60a5      	str	r5, [r4, #8]
 800465e:	463e      	mov	r6, r7
 8004660:	42be      	cmp	r6, r7
 8004662:	d900      	bls.n	8004666 <__ssputs_r+0x72>
 8004664:	463e      	mov	r6, r7
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	4632      	mov	r2, r6
 800466a:	4641      	mov	r1, r8
 800466c:	f000 fbb6 	bl	8004ddc <memmove>
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	1b9b      	subs	r3, r3, r6
 8004674:	60a3      	str	r3, [r4, #8]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	4433      	add	r3, r6
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	2000      	movs	r0, #0
 800467e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004682:	462a      	mov	r2, r5
 8004684:	f000 fc04 	bl	8004e90 <_realloc_r>
 8004688:	4606      	mov	r6, r0
 800468a:	2800      	cmp	r0, #0
 800468c:	d1e0      	bne.n	8004650 <__ssputs_r+0x5c>
 800468e:	6921      	ldr	r1, [r4, #16]
 8004690:	4650      	mov	r0, sl
 8004692:	f7ff feb7 	bl	8004404 <_free_r>
 8004696:	230c      	movs	r3, #12
 8004698:	f8ca 3000 	str.w	r3, [sl]
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	e7e9      	b.n	800467e <__ssputs_r+0x8a>
	...

080046ac <_svfiprintf_r>:
 80046ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b0:	4698      	mov	r8, r3
 80046b2:	898b      	ldrh	r3, [r1, #12]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	b09d      	sub	sp, #116	@ 0x74
 80046b8:	4607      	mov	r7, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	4614      	mov	r4, r2
 80046be:	d510      	bpl.n	80046e2 <_svfiprintf_r+0x36>
 80046c0:	690b      	ldr	r3, [r1, #16]
 80046c2:	b973      	cbnz	r3, 80046e2 <_svfiprintf_r+0x36>
 80046c4:	2140      	movs	r1, #64	@ 0x40
 80046c6:	f7ff ff09 	bl	80044dc <_malloc_r>
 80046ca:	6028      	str	r0, [r5, #0]
 80046cc:	6128      	str	r0, [r5, #16]
 80046ce:	b930      	cbnz	r0, 80046de <_svfiprintf_r+0x32>
 80046d0:	230c      	movs	r3, #12
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	b01d      	add	sp, #116	@ 0x74
 80046da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046de:	2340      	movs	r3, #64	@ 0x40
 80046e0:	616b      	str	r3, [r5, #20]
 80046e2:	2300      	movs	r3, #0
 80046e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046e6:	2320      	movs	r3, #32
 80046e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f0:	2330      	movs	r3, #48	@ 0x30
 80046f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004890 <_svfiprintf_r+0x1e4>
 80046f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046fa:	f04f 0901 	mov.w	r9, #1
 80046fe:	4623      	mov	r3, r4
 8004700:	469a      	mov	sl, r3
 8004702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004706:	b10a      	cbz	r2, 800470c <_svfiprintf_r+0x60>
 8004708:	2a25      	cmp	r2, #37	@ 0x25
 800470a:	d1f9      	bne.n	8004700 <_svfiprintf_r+0x54>
 800470c:	ebba 0b04 	subs.w	fp, sl, r4
 8004710:	d00b      	beq.n	800472a <_svfiprintf_r+0x7e>
 8004712:	465b      	mov	r3, fp
 8004714:	4622      	mov	r2, r4
 8004716:	4629      	mov	r1, r5
 8004718:	4638      	mov	r0, r7
 800471a:	f7ff ff6b 	bl	80045f4 <__ssputs_r>
 800471e:	3001      	adds	r0, #1
 8004720:	f000 80a7 	beq.w	8004872 <_svfiprintf_r+0x1c6>
 8004724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004726:	445a      	add	r2, fp
 8004728:	9209      	str	r2, [sp, #36]	@ 0x24
 800472a:	f89a 3000 	ldrb.w	r3, [sl]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 809f 	beq.w	8004872 <_svfiprintf_r+0x1c6>
 8004734:	2300      	movs	r3, #0
 8004736:	f04f 32ff 	mov.w	r2, #4294967295
 800473a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800473e:	f10a 0a01 	add.w	sl, sl, #1
 8004742:	9304      	str	r3, [sp, #16]
 8004744:	9307      	str	r3, [sp, #28]
 8004746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800474a:	931a      	str	r3, [sp, #104]	@ 0x68
 800474c:	4654      	mov	r4, sl
 800474e:	2205      	movs	r2, #5
 8004750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004754:	484e      	ldr	r0, [pc, #312]	@ (8004890 <_svfiprintf_r+0x1e4>)
 8004756:	f7fb fd3b 	bl	80001d0 <memchr>
 800475a:	9a04      	ldr	r2, [sp, #16]
 800475c:	b9d8      	cbnz	r0, 8004796 <_svfiprintf_r+0xea>
 800475e:	06d0      	lsls	r0, r2, #27
 8004760:	bf44      	itt	mi
 8004762:	2320      	movmi	r3, #32
 8004764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004768:	0711      	lsls	r1, r2, #28
 800476a:	bf44      	itt	mi
 800476c:	232b      	movmi	r3, #43	@ 0x2b
 800476e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004772:	f89a 3000 	ldrb.w	r3, [sl]
 8004776:	2b2a      	cmp	r3, #42	@ 0x2a
 8004778:	d015      	beq.n	80047a6 <_svfiprintf_r+0xfa>
 800477a:	9a07      	ldr	r2, [sp, #28]
 800477c:	4654      	mov	r4, sl
 800477e:	2000      	movs	r0, #0
 8004780:	f04f 0c0a 	mov.w	ip, #10
 8004784:	4621      	mov	r1, r4
 8004786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800478a:	3b30      	subs	r3, #48	@ 0x30
 800478c:	2b09      	cmp	r3, #9
 800478e:	d94b      	bls.n	8004828 <_svfiprintf_r+0x17c>
 8004790:	b1b0      	cbz	r0, 80047c0 <_svfiprintf_r+0x114>
 8004792:	9207      	str	r2, [sp, #28]
 8004794:	e014      	b.n	80047c0 <_svfiprintf_r+0x114>
 8004796:	eba0 0308 	sub.w	r3, r0, r8
 800479a:	fa09 f303 	lsl.w	r3, r9, r3
 800479e:	4313      	orrs	r3, r2
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	46a2      	mov	sl, r4
 80047a4:	e7d2      	b.n	800474c <_svfiprintf_r+0xa0>
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	1d19      	adds	r1, r3, #4
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	9103      	str	r1, [sp, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bfbb      	ittet	lt
 80047b2:	425b      	neglt	r3, r3
 80047b4:	f042 0202 	orrlt.w	r2, r2, #2
 80047b8:	9307      	strge	r3, [sp, #28]
 80047ba:	9307      	strlt	r3, [sp, #28]
 80047bc:	bfb8      	it	lt
 80047be:	9204      	strlt	r2, [sp, #16]
 80047c0:	7823      	ldrb	r3, [r4, #0]
 80047c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80047c4:	d10a      	bne.n	80047dc <_svfiprintf_r+0x130>
 80047c6:	7863      	ldrb	r3, [r4, #1]
 80047c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ca:	d132      	bne.n	8004832 <_svfiprintf_r+0x186>
 80047cc:	9b03      	ldr	r3, [sp, #12]
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	9203      	str	r2, [sp, #12]
 80047d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047d8:	3402      	adds	r4, #2
 80047da:	9305      	str	r3, [sp, #20]
 80047dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048a0 <_svfiprintf_r+0x1f4>
 80047e0:	7821      	ldrb	r1, [r4, #0]
 80047e2:	2203      	movs	r2, #3
 80047e4:	4650      	mov	r0, sl
 80047e6:	f7fb fcf3 	bl	80001d0 <memchr>
 80047ea:	b138      	cbz	r0, 80047fc <_svfiprintf_r+0x150>
 80047ec:	9b04      	ldr	r3, [sp, #16]
 80047ee:	eba0 000a 	sub.w	r0, r0, sl
 80047f2:	2240      	movs	r2, #64	@ 0x40
 80047f4:	4082      	lsls	r2, r0
 80047f6:	4313      	orrs	r3, r2
 80047f8:	3401      	adds	r4, #1
 80047fa:	9304      	str	r3, [sp, #16]
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	4824      	ldr	r0, [pc, #144]	@ (8004894 <_svfiprintf_r+0x1e8>)
 8004802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004806:	2206      	movs	r2, #6
 8004808:	f7fb fce2 	bl	80001d0 <memchr>
 800480c:	2800      	cmp	r0, #0
 800480e:	d036      	beq.n	800487e <_svfiprintf_r+0x1d2>
 8004810:	4b21      	ldr	r3, [pc, #132]	@ (8004898 <_svfiprintf_r+0x1ec>)
 8004812:	bb1b      	cbnz	r3, 800485c <_svfiprintf_r+0x1b0>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	3307      	adds	r3, #7
 8004818:	f023 0307 	bic.w	r3, r3, #7
 800481c:	3308      	adds	r3, #8
 800481e:	9303      	str	r3, [sp, #12]
 8004820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004822:	4433      	add	r3, r6
 8004824:	9309      	str	r3, [sp, #36]	@ 0x24
 8004826:	e76a      	b.n	80046fe <_svfiprintf_r+0x52>
 8004828:	fb0c 3202 	mla	r2, ip, r2, r3
 800482c:	460c      	mov	r4, r1
 800482e:	2001      	movs	r0, #1
 8004830:	e7a8      	b.n	8004784 <_svfiprintf_r+0xd8>
 8004832:	2300      	movs	r3, #0
 8004834:	3401      	adds	r4, #1
 8004836:	9305      	str	r3, [sp, #20]
 8004838:	4619      	mov	r1, r3
 800483a:	f04f 0c0a 	mov.w	ip, #10
 800483e:	4620      	mov	r0, r4
 8004840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004844:	3a30      	subs	r2, #48	@ 0x30
 8004846:	2a09      	cmp	r2, #9
 8004848:	d903      	bls.n	8004852 <_svfiprintf_r+0x1a6>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0c6      	beq.n	80047dc <_svfiprintf_r+0x130>
 800484e:	9105      	str	r1, [sp, #20]
 8004850:	e7c4      	b.n	80047dc <_svfiprintf_r+0x130>
 8004852:	fb0c 2101 	mla	r1, ip, r1, r2
 8004856:	4604      	mov	r4, r0
 8004858:	2301      	movs	r3, #1
 800485a:	e7f0      	b.n	800483e <_svfiprintf_r+0x192>
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	462a      	mov	r2, r5
 8004862:	4b0e      	ldr	r3, [pc, #56]	@ (800489c <_svfiprintf_r+0x1f0>)
 8004864:	a904      	add	r1, sp, #16
 8004866:	4638      	mov	r0, r7
 8004868:	f3af 8000 	nop.w
 800486c:	1c42      	adds	r2, r0, #1
 800486e:	4606      	mov	r6, r0
 8004870:	d1d6      	bne.n	8004820 <_svfiprintf_r+0x174>
 8004872:	89ab      	ldrh	r3, [r5, #12]
 8004874:	065b      	lsls	r3, r3, #25
 8004876:	f53f af2d 	bmi.w	80046d4 <_svfiprintf_r+0x28>
 800487a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800487c:	e72c      	b.n	80046d8 <_svfiprintf_r+0x2c>
 800487e:	ab03      	add	r3, sp, #12
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	462a      	mov	r2, r5
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <_svfiprintf_r+0x1f0>)
 8004886:	a904      	add	r1, sp, #16
 8004888:	4638      	mov	r0, r7
 800488a:	f000 f879 	bl	8004980 <_printf_i>
 800488e:	e7ed      	b.n	800486c <_svfiprintf_r+0x1c0>
 8004890:	08004fac 	.word	0x08004fac
 8004894:	08004fb6 	.word	0x08004fb6
 8004898:	00000000 	.word	0x00000000
 800489c:	080045f5 	.word	0x080045f5
 80048a0:	08004fb2 	.word	0x08004fb2

080048a4 <_printf_common>:
 80048a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a8:	4616      	mov	r6, r2
 80048aa:	4698      	mov	r8, r3
 80048ac:	688a      	ldr	r2, [r1, #8]
 80048ae:	690b      	ldr	r3, [r1, #16]
 80048b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	bfb8      	it	lt
 80048b8:	4613      	movlt	r3, r2
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048c0:	4607      	mov	r7, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	b10a      	cbz	r2, 80048ca <_printf_common+0x26>
 80048c6:	3301      	adds	r3, #1
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	0699      	lsls	r1, r3, #26
 80048ce:	bf42      	ittt	mi
 80048d0:	6833      	ldrmi	r3, [r6, #0]
 80048d2:	3302      	addmi	r3, #2
 80048d4:	6033      	strmi	r3, [r6, #0]
 80048d6:	6825      	ldr	r5, [r4, #0]
 80048d8:	f015 0506 	ands.w	r5, r5, #6
 80048dc:	d106      	bne.n	80048ec <_printf_common+0x48>
 80048de:	f104 0a19 	add.w	sl, r4, #25
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	6832      	ldr	r2, [r6, #0]
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	42ab      	cmp	r3, r5
 80048ea:	dc26      	bgt.n	800493a <_printf_common+0x96>
 80048ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048f0:	6822      	ldr	r2, [r4, #0]
 80048f2:	3b00      	subs	r3, #0
 80048f4:	bf18      	it	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	0692      	lsls	r2, r2, #26
 80048fa:	d42b      	bmi.n	8004954 <_printf_common+0xb0>
 80048fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004900:	4641      	mov	r1, r8
 8004902:	4638      	mov	r0, r7
 8004904:	47c8      	blx	r9
 8004906:	3001      	adds	r0, #1
 8004908:	d01e      	beq.n	8004948 <_printf_common+0xa4>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	6922      	ldr	r2, [r4, #16]
 800490e:	f003 0306 	and.w	r3, r3, #6
 8004912:	2b04      	cmp	r3, #4
 8004914:	bf02      	ittt	eq
 8004916:	68e5      	ldreq	r5, [r4, #12]
 8004918:	6833      	ldreq	r3, [r6, #0]
 800491a:	1aed      	subeq	r5, r5, r3
 800491c:	68a3      	ldr	r3, [r4, #8]
 800491e:	bf0c      	ite	eq
 8004920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004924:	2500      	movne	r5, #0
 8004926:	4293      	cmp	r3, r2
 8004928:	bfc4      	itt	gt
 800492a:	1a9b      	subgt	r3, r3, r2
 800492c:	18ed      	addgt	r5, r5, r3
 800492e:	2600      	movs	r6, #0
 8004930:	341a      	adds	r4, #26
 8004932:	42b5      	cmp	r5, r6
 8004934:	d11a      	bne.n	800496c <_printf_common+0xc8>
 8004936:	2000      	movs	r0, #0
 8004938:	e008      	b.n	800494c <_printf_common+0xa8>
 800493a:	2301      	movs	r3, #1
 800493c:	4652      	mov	r2, sl
 800493e:	4641      	mov	r1, r8
 8004940:	4638      	mov	r0, r7
 8004942:	47c8      	blx	r9
 8004944:	3001      	adds	r0, #1
 8004946:	d103      	bne.n	8004950 <_printf_common+0xac>
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004950:	3501      	adds	r5, #1
 8004952:	e7c6      	b.n	80048e2 <_printf_common+0x3e>
 8004954:	18e1      	adds	r1, r4, r3
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	2030      	movs	r0, #48	@ 0x30
 800495a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800495e:	4422      	add	r2, r4
 8004960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004968:	3302      	adds	r3, #2
 800496a:	e7c7      	b.n	80048fc <_printf_common+0x58>
 800496c:	2301      	movs	r3, #1
 800496e:	4622      	mov	r2, r4
 8004970:	4641      	mov	r1, r8
 8004972:	4638      	mov	r0, r7
 8004974:	47c8      	blx	r9
 8004976:	3001      	adds	r0, #1
 8004978:	d0e6      	beq.n	8004948 <_printf_common+0xa4>
 800497a:	3601      	adds	r6, #1
 800497c:	e7d9      	b.n	8004932 <_printf_common+0x8e>
	...

08004980 <_printf_i>:
 8004980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	7e0f      	ldrb	r7, [r1, #24]
 8004986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004988:	2f78      	cmp	r7, #120	@ 0x78
 800498a:	4691      	mov	r9, r2
 800498c:	4680      	mov	r8, r0
 800498e:	460c      	mov	r4, r1
 8004990:	469a      	mov	sl, r3
 8004992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004996:	d807      	bhi.n	80049a8 <_printf_i+0x28>
 8004998:	2f62      	cmp	r7, #98	@ 0x62
 800499a:	d80a      	bhi.n	80049b2 <_printf_i+0x32>
 800499c:	2f00      	cmp	r7, #0
 800499e:	f000 80d2 	beq.w	8004b46 <_printf_i+0x1c6>
 80049a2:	2f58      	cmp	r7, #88	@ 0x58
 80049a4:	f000 80b9 	beq.w	8004b1a <_printf_i+0x19a>
 80049a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049b0:	e03a      	b.n	8004a28 <_printf_i+0xa8>
 80049b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049b6:	2b15      	cmp	r3, #21
 80049b8:	d8f6      	bhi.n	80049a8 <_printf_i+0x28>
 80049ba:	a101      	add	r1, pc, #4	@ (adr r1, 80049c0 <_printf_i+0x40>)
 80049bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049c0:	08004a19 	.word	0x08004a19
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	080049a9 	.word	0x080049a9
 80049cc:	080049a9 	.word	0x080049a9
 80049d0:	080049a9 	.word	0x080049a9
 80049d4:	080049a9 	.word	0x080049a9
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	080049a9 	.word	0x080049a9
 80049e0:	080049a9 	.word	0x080049a9
 80049e4:	080049a9 	.word	0x080049a9
 80049e8:	080049a9 	.word	0x080049a9
 80049ec:	08004b2d 	.word	0x08004b2d
 80049f0:	08004a57 	.word	0x08004a57
 80049f4:	08004ae7 	.word	0x08004ae7
 80049f8:	080049a9 	.word	0x080049a9
 80049fc:	080049a9 	.word	0x080049a9
 8004a00:	08004b4f 	.word	0x08004b4f
 8004a04:	080049a9 	.word	0x080049a9
 8004a08:	08004a57 	.word	0x08004a57
 8004a0c:	080049a9 	.word	0x080049a9
 8004a10:	080049a9 	.word	0x080049a9
 8004a14:	08004aef 	.word	0x08004aef
 8004a18:	6833      	ldr	r3, [r6, #0]
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6032      	str	r2, [r6, #0]
 8004a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e09d      	b.n	8004b68 <_printf_i+0x1e8>
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	6820      	ldr	r0, [r4, #0]
 8004a30:	1d19      	adds	r1, r3, #4
 8004a32:	6031      	str	r1, [r6, #0]
 8004a34:	0606      	lsls	r6, r0, #24
 8004a36:	d501      	bpl.n	8004a3c <_printf_i+0xbc>
 8004a38:	681d      	ldr	r5, [r3, #0]
 8004a3a:	e003      	b.n	8004a44 <_printf_i+0xc4>
 8004a3c:	0645      	lsls	r5, r0, #25
 8004a3e:	d5fb      	bpl.n	8004a38 <_printf_i+0xb8>
 8004a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a44:	2d00      	cmp	r5, #0
 8004a46:	da03      	bge.n	8004a50 <_printf_i+0xd0>
 8004a48:	232d      	movs	r3, #45	@ 0x2d
 8004a4a:	426d      	negs	r5, r5
 8004a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a50:	4859      	ldr	r0, [pc, #356]	@ (8004bb8 <_printf_i+0x238>)
 8004a52:	230a      	movs	r3, #10
 8004a54:	e011      	b.n	8004a7a <_printf_i+0xfa>
 8004a56:	6821      	ldr	r1, [r4, #0]
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	0608      	lsls	r0, r1, #24
 8004a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a60:	d402      	bmi.n	8004a68 <_printf_i+0xe8>
 8004a62:	0649      	lsls	r1, r1, #25
 8004a64:	bf48      	it	mi
 8004a66:	b2ad      	uxthmi	r5, r5
 8004a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a6a:	4853      	ldr	r0, [pc, #332]	@ (8004bb8 <_printf_i+0x238>)
 8004a6c:	6033      	str	r3, [r6, #0]
 8004a6e:	bf14      	ite	ne
 8004a70:	230a      	movne	r3, #10
 8004a72:	2308      	moveq	r3, #8
 8004a74:	2100      	movs	r1, #0
 8004a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a7a:	6866      	ldr	r6, [r4, #4]
 8004a7c:	60a6      	str	r6, [r4, #8]
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	bfa2      	ittt	ge
 8004a82:	6821      	ldrge	r1, [r4, #0]
 8004a84:	f021 0104 	bicge.w	r1, r1, #4
 8004a88:	6021      	strge	r1, [r4, #0]
 8004a8a:	b90d      	cbnz	r5, 8004a90 <_printf_i+0x110>
 8004a8c:	2e00      	cmp	r6, #0
 8004a8e:	d04b      	beq.n	8004b28 <_printf_i+0x1a8>
 8004a90:	4616      	mov	r6, r2
 8004a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a96:	fb03 5711 	mls	r7, r3, r1, r5
 8004a9a:	5dc7      	ldrb	r7, [r0, r7]
 8004a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004aa0:	462f      	mov	r7, r5
 8004aa2:	42bb      	cmp	r3, r7
 8004aa4:	460d      	mov	r5, r1
 8004aa6:	d9f4      	bls.n	8004a92 <_printf_i+0x112>
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d10b      	bne.n	8004ac4 <_printf_i+0x144>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	07df      	lsls	r7, r3, #31
 8004ab0:	d508      	bpl.n	8004ac4 <_printf_i+0x144>
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	6861      	ldr	r1, [r4, #4]
 8004ab6:	4299      	cmp	r1, r3
 8004ab8:	bfde      	ittt	le
 8004aba:	2330      	movle	r3, #48	@ 0x30
 8004abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ac4:	1b92      	subs	r2, r2, r6
 8004ac6:	6122      	str	r2, [r4, #16]
 8004ac8:	f8cd a000 	str.w	sl, [sp]
 8004acc:	464b      	mov	r3, r9
 8004ace:	aa03      	add	r2, sp, #12
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	f7ff fee6 	bl	80048a4 <_printf_common>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d14a      	bne.n	8004b72 <_printf_i+0x1f2>
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	b004      	add	sp, #16
 8004ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	f043 0320 	orr.w	r3, r3, #32
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	4833      	ldr	r0, [pc, #204]	@ (8004bbc <_printf_i+0x23c>)
 8004af0:	2778      	movs	r7, #120	@ 0x78
 8004af2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	6831      	ldr	r1, [r6, #0]
 8004afa:	061f      	lsls	r7, r3, #24
 8004afc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b00:	d402      	bmi.n	8004b08 <_printf_i+0x188>
 8004b02:	065f      	lsls	r7, r3, #25
 8004b04:	bf48      	it	mi
 8004b06:	b2ad      	uxthmi	r5, r5
 8004b08:	6031      	str	r1, [r6, #0]
 8004b0a:	07d9      	lsls	r1, r3, #31
 8004b0c:	bf44      	itt	mi
 8004b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b12:	6023      	strmi	r3, [r4, #0]
 8004b14:	b11d      	cbz	r5, 8004b1e <_printf_i+0x19e>
 8004b16:	2310      	movs	r3, #16
 8004b18:	e7ac      	b.n	8004a74 <_printf_i+0xf4>
 8004b1a:	4827      	ldr	r0, [pc, #156]	@ (8004bb8 <_printf_i+0x238>)
 8004b1c:	e7e9      	b.n	8004af2 <_printf_i+0x172>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f023 0320 	bic.w	r3, r3, #32
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	e7f6      	b.n	8004b16 <_printf_i+0x196>
 8004b28:	4616      	mov	r6, r2
 8004b2a:	e7bd      	b.n	8004aa8 <_printf_i+0x128>
 8004b2c:	6833      	ldr	r3, [r6, #0]
 8004b2e:	6825      	ldr	r5, [r4, #0]
 8004b30:	6961      	ldr	r1, [r4, #20]
 8004b32:	1d18      	adds	r0, r3, #4
 8004b34:	6030      	str	r0, [r6, #0]
 8004b36:	062e      	lsls	r6, r5, #24
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	d501      	bpl.n	8004b40 <_printf_i+0x1c0>
 8004b3c:	6019      	str	r1, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <_printf_i+0x1c6>
 8004b40:	0668      	lsls	r0, r5, #25
 8004b42:	d5fb      	bpl.n	8004b3c <_printf_i+0x1bc>
 8004b44:	8019      	strh	r1, [r3, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	4616      	mov	r6, r2
 8004b4c:	e7bc      	b.n	8004ac8 <_printf_i+0x148>
 8004b4e:	6833      	ldr	r3, [r6, #0]
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	6032      	str	r2, [r6, #0]
 8004b54:	681e      	ldr	r6, [r3, #0]
 8004b56:	6862      	ldr	r2, [r4, #4]
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f7fb fb38 	bl	80001d0 <memchr>
 8004b60:	b108      	cbz	r0, 8004b66 <_printf_i+0x1e6>
 8004b62:	1b80      	subs	r0, r0, r6
 8004b64:	6060      	str	r0, [r4, #4]
 8004b66:	6863      	ldr	r3, [r4, #4]
 8004b68:	6123      	str	r3, [r4, #16]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b70:	e7aa      	b.n	8004ac8 <_printf_i+0x148>
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	4632      	mov	r2, r6
 8004b76:	4649      	mov	r1, r9
 8004b78:	4640      	mov	r0, r8
 8004b7a:	47d0      	blx	sl
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d0ad      	beq.n	8004adc <_printf_i+0x15c>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	079b      	lsls	r3, r3, #30
 8004b84:	d413      	bmi.n	8004bae <_printf_i+0x22e>
 8004b86:	68e0      	ldr	r0, [r4, #12]
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	bfb8      	it	lt
 8004b8e:	4618      	movlt	r0, r3
 8004b90:	e7a6      	b.n	8004ae0 <_printf_i+0x160>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4632      	mov	r2, r6
 8004b96:	4649      	mov	r1, r9
 8004b98:	4640      	mov	r0, r8
 8004b9a:	47d0      	blx	sl
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d09d      	beq.n	8004adc <_printf_i+0x15c>
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	68e3      	ldr	r3, [r4, #12]
 8004ba4:	9903      	ldr	r1, [sp, #12]
 8004ba6:	1a5b      	subs	r3, r3, r1
 8004ba8:	42ab      	cmp	r3, r5
 8004baa:	dcf2      	bgt.n	8004b92 <_printf_i+0x212>
 8004bac:	e7eb      	b.n	8004b86 <_printf_i+0x206>
 8004bae:	2500      	movs	r5, #0
 8004bb0:	f104 0619 	add.w	r6, r4, #25
 8004bb4:	e7f5      	b.n	8004ba2 <_printf_i+0x222>
 8004bb6:	bf00      	nop
 8004bb8:	08004fbd 	.word	0x08004fbd
 8004bbc:	08004fce 	.word	0x08004fce

08004bc0 <__sflush_r>:
 8004bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc8:	0716      	lsls	r6, r2, #28
 8004bca:	4605      	mov	r5, r0
 8004bcc:	460c      	mov	r4, r1
 8004bce:	d454      	bmi.n	8004c7a <__sflush_r+0xba>
 8004bd0:	684b      	ldr	r3, [r1, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	dc02      	bgt.n	8004bdc <__sflush_r+0x1c>
 8004bd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dd48      	ble.n	8004c6e <__sflush_r+0xae>
 8004bdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	d045      	beq.n	8004c6e <__sflush_r+0xae>
 8004be2:	2300      	movs	r3, #0
 8004be4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004be8:	682f      	ldr	r7, [r5, #0]
 8004bea:	6a21      	ldr	r1, [r4, #32]
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	d030      	beq.n	8004c52 <__sflush_r+0x92>
 8004bf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	0759      	lsls	r1, r3, #29
 8004bf6:	d505      	bpl.n	8004c04 <__sflush_r+0x44>
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bfe:	b10b      	cbz	r3, 8004c04 <__sflush_r+0x44>
 8004c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	2300      	movs	r3, #0
 8004c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c08:	6a21      	ldr	r1, [r4, #32]
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b0      	blx	r6
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	d106      	bne.n	8004c22 <__sflush_r+0x62>
 8004c14:	6829      	ldr	r1, [r5, #0]
 8004c16:	291d      	cmp	r1, #29
 8004c18:	d82b      	bhi.n	8004c72 <__sflush_r+0xb2>
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc4 <__sflush_r+0x104>)
 8004c1c:	410a      	asrs	r2, r1
 8004c1e:	07d6      	lsls	r6, r2, #31
 8004c20:	d427      	bmi.n	8004c72 <__sflush_r+0xb2>
 8004c22:	2200      	movs	r2, #0
 8004c24:	6062      	str	r2, [r4, #4]
 8004c26:	04d9      	lsls	r1, r3, #19
 8004c28:	6922      	ldr	r2, [r4, #16]
 8004c2a:	6022      	str	r2, [r4, #0]
 8004c2c:	d504      	bpl.n	8004c38 <__sflush_r+0x78>
 8004c2e:	1c42      	adds	r2, r0, #1
 8004c30:	d101      	bne.n	8004c36 <__sflush_r+0x76>
 8004c32:	682b      	ldr	r3, [r5, #0]
 8004c34:	b903      	cbnz	r3, 8004c38 <__sflush_r+0x78>
 8004c36:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c3a:	602f      	str	r7, [r5, #0]
 8004c3c:	b1b9      	cbz	r1, 8004c6e <__sflush_r+0xae>
 8004c3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c42:	4299      	cmp	r1, r3
 8004c44:	d002      	beq.n	8004c4c <__sflush_r+0x8c>
 8004c46:	4628      	mov	r0, r5
 8004c48:	f7ff fbdc 	bl	8004404 <_free_r>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c50:	e00d      	b.n	8004c6e <__sflush_r+0xae>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b0      	blx	r6
 8004c58:	4602      	mov	r2, r0
 8004c5a:	1c50      	adds	r0, r2, #1
 8004c5c:	d1c9      	bne.n	8004bf2 <__sflush_r+0x32>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0c6      	beq.n	8004bf2 <__sflush_r+0x32>
 8004c64:	2b1d      	cmp	r3, #29
 8004c66:	d001      	beq.n	8004c6c <__sflush_r+0xac>
 8004c68:	2b16      	cmp	r3, #22
 8004c6a:	d11e      	bne.n	8004caa <__sflush_r+0xea>
 8004c6c:	602f      	str	r7, [r5, #0]
 8004c6e:	2000      	movs	r0, #0
 8004c70:	e022      	b.n	8004cb8 <__sflush_r+0xf8>
 8004c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c76:	b21b      	sxth	r3, r3
 8004c78:	e01b      	b.n	8004cb2 <__sflush_r+0xf2>
 8004c7a:	690f      	ldr	r7, [r1, #16]
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	d0f6      	beq.n	8004c6e <__sflush_r+0xae>
 8004c80:	0793      	lsls	r3, r2, #30
 8004c82:	680e      	ldr	r6, [r1, #0]
 8004c84:	bf08      	it	eq
 8004c86:	694b      	ldreq	r3, [r1, #20]
 8004c88:	600f      	str	r7, [r1, #0]
 8004c8a:	bf18      	it	ne
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	eba6 0807 	sub.w	r8, r6, r7
 8004c92:	608b      	str	r3, [r1, #8]
 8004c94:	f1b8 0f00 	cmp.w	r8, #0
 8004c98:	dde9      	ble.n	8004c6e <__sflush_r+0xae>
 8004c9a:	6a21      	ldr	r1, [r4, #32]
 8004c9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c9e:	4643      	mov	r3, r8
 8004ca0:	463a      	mov	r2, r7
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b0      	blx	r6
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	dc08      	bgt.n	8004cbc <__sflush_r+0xfc>
 8004caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cbc:	4407      	add	r7, r0
 8004cbe:	eba8 0800 	sub.w	r8, r8, r0
 8004cc2:	e7e7      	b.n	8004c94 <__sflush_r+0xd4>
 8004cc4:	dfbffffe 	.word	0xdfbffffe

08004cc8 <_fflush_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	690b      	ldr	r3, [r1, #16]
 8004ccc:	4605      	mov	r5, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	b913      	cbnz	r3, 8004cd8 <_fflush_r+0x10>
 8004cd2:	2500      	movs	r5, #0
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	b118      	cbz	r0, 8004ce2 <_fflush_r+0x1a>
 8004cda:	6a03      	ldr	r3, [r0, #32]
 8004cdc:	b90b      	cbnz	r3, 8004ce2 <_fflush_r+0x1a>
 8004cde:	f7ff f989 	bl	8003ff4 <__sinit>
 8004ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f3      	beq.n	8004cd2 <_fflush_r+0xa>
 8004cea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cec:	07d0      	lsls	r0, r2, #31
 8004cee:	d404      	bmi.n	8004cfa <_fflush_r+0x32>
 8004cf0:	0599      	lsls	r1, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_fflush_r+0x32>
 8004cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cf6:	f7ff fb82 	bl	80043fe <__retarget_lock_acquire_recursive>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	f7ff ff5f 	bl	8004bc0 <__sflush_r>
 8004d02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d04:	07da      	lsls	r2, r3, #31
 8004d06:	4605      	mov	r5, r0
 8004d08:	d4e4      	bmi.n	8004cd4 <_fflush_r+0xc>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	059b      	lsls	r3, r3, #22
 8004d0e:	d4e1      	bmi.n	8004cd4 <_fflush_r+0xc>
 8004d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d12:	f7ff fb75 	bl	8004400 <__retarget_lock_release_recursive>
 8004d16:	e7dd      	b.n	8004cd4 <_fflush_r+0xc>

08004d18 <__swhatbuf_r>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d20:	2900      	cmp	r1, #0
 8004d22:	b096      	sub	sp, #88	@ 0x58
 8004d24:	4615      	mov	r5, r2
 8004d26:	461e      	mov	r6, r3
 8004d28:	da0d      	bge.n	8004d46 <__swhatbuf_r+0x2e>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2340      	movne	r3, #64	@ 0x40
 8004d38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	6031      	str	r1, [r6, #0]
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	b016      	add	sp, #88	@ 0x58
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
 8004d46:	466a      	mov	r2, sp
 8004d48:	f000 f862 	bl	8004e10 <_fstat_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	dbec      	blt.n	8004d2a <__swhatbuf_r+0x12>
 8004d50:	9901      	ldr	r1, [sp, #4]
 8004d52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d5a:	4259      	negs	r1, r3
 8004d5c:	4159      	adcs	r1, r3
 8004d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d62:	e7eb      	b.n	8004d3c <__swhatbuf_r+0x24>

08004d64 <__smakebuf_r>:
 8004d64:	898b      	ldrh	r3, [r1, #12]
 8004d66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d68:	079d      	lsls	r5, r3, #30
 8004d6a:	4606      	mov	r6, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	d507      	bpl.n	8004d80 <__smakebuf_r+0x1c>
 8004d70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	2301      	movs	r3, #1
 8004d7a:	6163      	str	r3, [r4, #20]
 8004d7c:	b003      	add	sp, #12
 8004d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d80:	ab01      	add	r3, sp, #4
 8004d82:	466a      	mov	r2, sp
 8004d84:	f7ff ffc8 	bl	8004d18 <__swhatbuf_r>
 8004d88:	9f00      	ldr	r7, [sp, #0]
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f7ff fba4 	bl	80044dc <_malloc_r>
 8004d94:	b948      	cbnz	r0, 8004daa <__smakebuf_r+0x46>
 8004d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d9a:	059a      	lsls	r2, r3, #22
 8004d9c:	d4ee      	bmi.n	8004d7c <__smakebuf_r+0x18>
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	f043 0302 	orr.w	r3, r3, #2
 8004da6:	81a3      	strh	r3, [r4, #12]
 8004da8:	e7e2      	b.n	8004d70 <__smakebuf_r+0xc>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	6020      	str	r0, [r4, #0]
 8004dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	9b01      	ldr	r3, [sp, #4]
 8004db6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dba:	b15b      	cbz	r3, 8004dd4 <__smakebuf_r+0x70>
 8004dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 f837 	bl	8004e34 <_isatty_r>
 8004dc6:	b128      	cbz	r0, 8004dd4 <__smakebuf_r+0x70>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	431d      	orrs	r5, r3
 8004dd8:	81a5      	strh	r5, [r4, #12]
 8004dda:	e7cf      	b.n	8004d7c <__smakebuf_r+0x18>

08004ddc <memmove>:
 8004ddc:	4288      	cmp	r0, r1
 8004dde:	b510      	push	{r4, lr}
 8004de0:	eb01 0402 	add.w	r4, r1, r2
 8004de4:	d902      	bls.n	8004dec <memmove+0x10>
 8004de6:	4284      	cmp	r4, r0
 8004de8:	4623      	mov	r3, r4
 8004dea:	d807      	bhi.n	8004dfc <memmove+0x20>
 8004dec:	1e43      	subs	r3, r0, #1
 8004dee:	42a1      	cmp	r1, r4
 8004df0:	d008      	beq.n	8004e04 <memmove+0x28>
 8004df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dfa:	e7f8      	b.n	8004dee <memmove+0x12>
 8004dfc:	4402      	add	r2, r0
 8004dfe:	4601      	mov	r1, r0
 8004e00:	428a      	cmp	r2, r1
 8004e02:	d100      	bne.n	8004e06 <memmove+0x2a>
 8004e04:	bd10      	pop	{r4, pc}
 8004e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e0e:	e7f7      	b.n	8004e00 <memmove+0x24>

08004e10 <_fstat_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d07      	ldr	r5, [pc, #28]	@ (8004e30 <_fstat_r+0x20>)
 8004e14:	2300      	movs	r3, #0
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	f7fb fead 	bl	8000b7c <_fstat>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d102      	bne.n	8004e2c <_fstat_r+0x1c>
 8004e26:	682b      	ldr	r3, [r5, #0]
 8004e28:	b103      	cbz	r3, 8004e2c <_fstat_r+0x1c>
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
 8004e2e:	bf00      	nop
 8004e30:	200002cc 	.word	0x200002cc

08004e34 <_isatty_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d06      	ldr	r5, [pc, #24]	@ (8004e50 <_isatty_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f7fb feac 	bl	8000b9c <_isatty>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_isatty_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_isatty_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	200002cc 	.word	0x200002cc

08004e54 <_sbrk_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d06      	ldr	r5, [pc, #24]	@ (8004e70 <_sbrk_r+0x1c>)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	f7fb feb4 	bl	8000bcc <_sbrk>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_sbrk_r+0x1a>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_sbrk_r+0x1a>
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	200002cc 	.word	0x200002cc

08004e74 <memcpy>:
 8004e74:	440a      	add	r2, r1
 8004e76:	4291      	cmp	r1, r2
 8004e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	4770      	bx	lr
 8004e80:	b510      	push	{r4, lr}
 8004e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	d1f9      	bne.n	8004e82 <memcpy+0xe>
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <_realloc_r>:
 8004e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e94:	4680      	mov	r8, r0
 8004e96:	4615      	mov	r5, r2
 8004e98:	460c      	mov	r4, r1
 8004e9a:	b921      	cbnz	r1, 8004ea6 <_realloc_r+0x16>
 8004e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	f7ff bb1b 	b.w	80044dc <_malloc_r>
 8004ea6:	b92a      	cbnz	r2, 8004eb4 <_realloc_r+0x24>
 8004ea8:	f7ff faac 	bl	8004404 <_free_r>
 8004eac:	2400      	movs	r4, #0
 8004eae:	4620      	mov	r0, r4
 8004eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb4:	f000 f81a 	bl	8004eec <_malloc_usable_size_r>
 8004eb8:	4285      	cmp	r5, r0
 8004eba:	4606      	mov	r6, r0
 8004ebc:	d802      	bhi.n	8004ec4 <_realloc_r+0x34>
 8004ebe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ec2:	d8f4      	bhi.n	8004eae <_realloc_r+0x1e>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	f7ff fb08 	bl	80044dc <_malloc_r>
 8004ecc:	4607      	mov	r7, r0
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d0ec      	beq.n	8004eac <_realloc_r+0x1c>
 8004ed2:	42b5      	cmp	r5, r6
 8004ed4:	462a      	mov	r2, r5
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	bf28      	it	cs
 8004eda:	4632      	movcs	r2, r6
 8004edc:	f7ff ffca 	bl	8004e74 <memcpy>
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	f7ff fa8e 	bl	8004404 <_free_r>
 8004ee8:	463c      	mov	r4, r7
 8004eea:	e7e0      	b.n	8004eae <_realloc_r+0x1e>

08004eec <_malloc_usable_size_r>:
 8004eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef0:	1f18      	subs	r0, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bfbc      	itt	lt
 8004ef6:	580b      	ldrlt	r3, [r1, r0]
 8004ef8:	18c0      	addlt	r0, r0, r3
 8004efa:	4770      	bx	lr

08004efc <_init>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr

08004f08 <_fini>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr


temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003978  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003b00  08003b00  00004b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003b54  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003b54  00005094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a71e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3e  00000000  00000000  0000f75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00011298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bf  00000000  00000000  00011ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260eb  00000000  00000000  0001249f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aed9  00000000  00000000  0003858a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1c01  00000000  00000000  00043463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e0  00000000  00000000  001350a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00137a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ae8 	.word	0x08003ae8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ae8 	.word	0x08003ae8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa17 	bl	80005fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8d6 	bl	8000384 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f85c 	bl	8000294 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ADC_Enable(&hadc1);
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <main+0x24>)
 80001de:	f001 fd25 	bl	8001c2c <ADC_Enable>
  HAL_ADC_Start_IT(&hadc1);
 80001e2:	4802      	ldr	r0, [pc, #8]	@ (80001ec <main+0x24>)
 80001e4:	f000 fdc6 	bl	8000d74 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e8:	bf00      	nop
 80001ea:	e7fd      	b.n	80001e8 <main+0x20>
 80001ec:	20000028 	.word	0x20000028

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b096      	sub	sp, #88	@ 0x58
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0314 	add.w	r3, r7, #20
 80001fa:	2244      	movs	r2, #68	@ 0x44
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f003 fc46 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	463b      	mov	r3, r7
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000212:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000216:	f002 f961 	bl	80024dc <HAL_PWREx_ControlVoltageScaling>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000220:	f000 f8de 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	2302      	movs	r3, #2
 8000226:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800022c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022e:	2310      	movs	r3, #16
 8000230:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000236:	2302      	movs	r3, #2
 8000238:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800023e:	2308      	movs	r3, #8
 8000240:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000242:	2307      	movs	r3, #7
 8000244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000246:	2302      	movs	r3, #2
 8000248:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800024a:	2302      	movs	r3, #2
 800024c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	4618      	mov	r0, r3
 8000254:	f002 f998 	bl	8002588 <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800025e:	f000 f8bf 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	230f      	movs	r3, #15
 8000264:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000266:	2303      	movs	r3, #3
 8000268:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800026a:	23a0      	movs	r3, #160	@ 0xa0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000276:	463b      	mov	r3, r7
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fd60 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000286:	f000 f8ab 	bl	80003e0 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3758      	adds	r7, #88	@ 0x58
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	@ 0x28
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800029a:	f107 031c 	add.w	r3, r7, #28
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
 80002b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b6:	4b30      	ldr	r3, [pc, #192]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002b8:	4a30      	ldr	r2, [pc, #192]	@ (800037c <MX_ADC1_Init+0xe8>)
 80002ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80002bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80002c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d0:	4b29      	ldr	r3, [pc, #164]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002d6:	4b28      	ldr	r3, [pc, #160]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002d8:	2204      	movs	r2, #4
 80002da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002dc:	4b26      	ldr	r3, [pc, #152]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002de:	2200      	movs	r2, #0
 80002e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002e2:	4b25      	ldr	r3, [pc, #148]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002e8:	4b23      	ldr	r3, [pc, #140]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ee:	4b22      	ldr	r3, [pc, #136]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f6:	4b20      	ldr	r3, [pc, #128]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <MX_ADC1_Init+0xe4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000302:	4b1d      	ldr	r3, [pc, #116]	@ (8000378 <MX_ADC1_Init+0xe4>)
 8000304:	2200      	movs	r2, #0
 8000306:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800030a:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <MX_ADC1_Init+0xe4>)
 800030c:	2200      	movs	r2, #0
 800030e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000310:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <MX_ADC1_Init+0xe4>)
 8000312:	2200      	movs	r2, #0
 8000314:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000318:	4817      	ldr	r0, [pc, #92]	@ (8000378 <MX_ADC1_Init+0xe4>)
 800031a:	f000 fbdb 	bl	8000ad4 <HAL_ADC_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000324:	f000 f85c 	bl	80003e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000328:	2300      	movs	r3, #0
 800032a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800032c:	f107 031c 	add.w	r3, r7, #28
 8000330:	4619      	mov	r1, r3
 8000332:	4811      	ldr	r0, [pc, #68]	@ (8000378 <MX_ADC1_Init+0xe4>)
 8000334:	f001 fd58 	bl	8001de8 <HAL_ADCEx_MultiModeConfigChannel>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800033e:	f000 f84f 	bl	80003e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000342:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <MX_ADC1_Init+0xec>)
 8000344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000346:	2306      	movs	r3, #6
 8000348:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800034e:	237f      	movs	r3, #127	@ 0x7f
 8000350:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000352:	2304      	movs	r3, #4
 8000354:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4619      	mov	r1, r3
 800035e:	4806      	ldr	r0, [pc, #24]	@ (8000378 <MX_ADC1_Init+0xe4>)
 8000360:	f001 f872 	bl	8001448 <HAL_ADC_ConfigChannel>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800036a:	f000 f839 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	3728      	adds	r7, #40	@ 0x28
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000028 	.word	0x20000028
 800037c:	50040000 	.word	0x50040000
 8000380:	14f00020 	.word	0x14f00020

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <MX_GPIO_Init+0x2c>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038e:	4a08      	ldr	r2, [pc, #32]	@ (80003b0 <MX_GPIO_Init+0x2c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <MX_GPIO_Init+0x2c>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  //UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
	Data = HAL_ADC_GetValue(&hadc1);
 80003bc:	4806      	ldr	r0, [pc, #24]	@ (80003d8 <HAL_ADC_ConvCpltCallback+0x24>)
 80003be:	f000 fe07 	bl	8000fd0 <HAL_ADC_GetValue>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4a05      	ldr	r2, [pc, #20]	@ (80003dc <HAL_ADC_ConvCpltCallback+0x28>)
 80003c6:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_IT(&hadc1);
 80003c8:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <HAL_ADC_ConvCpltCallback+0x24>)
 80003ca:	f000 fcd3 	bl	8000d74 <HAL_ADC_Start_IT>
//	flag = 1;

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000028 	.word	0x20000028
 80003dc:	2000008c 	.word	0x2000008c

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <Error_Handler+0x8>

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <HAL_MspInit+0x44>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80003fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <HAL_MspInit+0x44>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <HAL_MspInit+0x44>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800040e:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000414:	6593      	str	r3, [r2, #88]	@ 0x58
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <HAL_MspInit+0x44>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800041a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b0ac      	sub	sp, #176	@ 0xb0
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2288      	movs	r2, #136	@ 0x88
 8000452:	2100      	movs	r1, #0
 8000454:	4618      	mov	r0, r3
 8000456:	f003 fb1b 	bl	8003a90 <memset>
  if(hadc->Instance==ADC1)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a2b      	ldr	r2, [pc, #172]	@ (800050c <HAL_ADC_MspInit+0xd8>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d14f      	bne.n	8000504 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000464:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000468:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800046a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800046e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000472:	2302      	movs	r3, #2
 8000474:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000476:	2301      	movs	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800047a:	2308      	movs	r3, #8
 800047c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800047e:	2307      	movs	r3, #7
 8000480:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000482:	2302      	movs	r3, #2
 8000484:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000486:	2302      	movs	r3, #2
 8000488:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800048a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800048e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4618      	mov	r0, r3
 8000496:	f002 fe3f 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80004a0:	f7ff ff9e 	bl	80003e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <HAL_ADC_MspInit+0xdc>)
 80004a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a8:	4a19      	ldr	r2, [pc, #100]	@ (8000510 <HAL_ADC_MspInit+0xdc>)
 80004aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004b0:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <HAL_ADC_MspInit+0xdc>)
 80004b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004b8:	613b      	str	r3, [r7, #16]
 80004ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <HAL_ADC_MspInit+0xdc>)
 80004be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c0:	4a13      	ldr	r2, [pc, #76]	@ (8000510 <HAL_ADC_MspInit+0xdc>)
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <HAL_ADC_MspInit+0xdc>)
 80004ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004d4:	2301      	movs	r3, #1
 80004d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004da:	230b      	movs	r3, #11
 80004dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80004ea:	4619      	mov	r1, r3
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f0:	f001 fe3c 	bl	800216c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2012      	movs	r0, #18
 80004fa:	f001 fe00 	bl	80020fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004fe:	2012      	movs	r0, #18
 8000500:	f001 fe19 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000504:	bf00      	nop
 8000506:	37b0      	adds	r7, #176	@ 0xb0
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	50040000 	.word	0x50040000
 8000510:	40021000 	.word	0x40021000

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <NMI_Handler+0x4>

0800051c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <MemManage_Handler+0x4>

0800052c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <UsageFault_Handler+0x4>

0800053c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056a:	f000 f89d 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <ADC1_2_IRQHandler+0x10>)
 800057a:	f000 fd37 	bl	8000fec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <SystemInit+0x20>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000592:	4a05      	ldr	r2, [pc, #20]	@ (80005a8 <SystemInit+0x20>)
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b0:	f7ff ffea 	bl	8000588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	@ (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	@ (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005da:	f003 fa61 	bl	8003aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005de:	f7ff fdf3 	bl	80001c8 <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f0:	08003b48 	.word	0x08003b48
  ldr r2, =_sbss
 80005f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f8:	20000094 	.word	0x20000094

080005fc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC3_IRQHandler>

080005fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f001 fd6d 	bl	80020e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060e:	200f      	movs	r0, #15
 8000610:	f000 f80e 	bl	8000630 <HAL_InitTick>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e001      	b.n	8000624 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000620:	f7ff fee4 	bl	80003ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000624:	79fb      	ldrb	r3, [r7, #7]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <HAL_InitTick+0x6c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d023      	beq.n	800068c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <HAL_InitTick+0x70>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <HAL_InitTick+0x6c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000652:	fbb3 f3f1 	udiv	r3, r3, r1
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fd79 	bl	8002152 <HAL_SYSTICK_Config>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d10f      	bne.n	8000686 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d809      	bhi.n	8000680 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	f04f 30ff 	mov.w	r0, #4294967295
 8000674:	f001 fd43 	bl	80020fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000678:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <HAL_InitTick+0x74>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	e007      	b.n	8000690 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000680:	2301      	movs	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e004      	b.n	8000690 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e001      	b.n	8000690 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000008 	.word	0x20000008
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <HAL_IncTick+0x20>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <HAL_IncTick+0x24>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a04      	ldr	r2, [pc, #16]	@ (80006cc <HAL_IncTick+0x24>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000090 	.word	0x20000090

080006d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return uwTick;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <HAL_GetTick+0x14>)
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000090 	.word	0x20000090

080006e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	431a      	orrs	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	609a      	str	r2, [r3, #8]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	609a      	str	r2, [r3, #8]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3360      	adds	r3, #96	@ 0x60
 8000762:	461a      	mov	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <LL_ADC_SetOffset+0x44>)
 8000772:	4013      	ands	r3, r2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	430a      	orrs	r2, r1
 800077e:	4313      	orrs	r3, r2
 8000780:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000788:	bf00      	nop
 800078a:	371c      	adds	r7, #28
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	03fff000 	.word	0x03fff000

08000798 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3360      	adds	r3, #96	@ 0x60
 80007a6:	461a      	mov	r2, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3360      	adds	r3, #96	@ 0x60
 80007d4:	461a      	mov	r2, r3
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	431a      	orrs	r2, r3
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80007ee:	bf00      	nop
 80007f0:	371c      	adds	r7, #28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800080e:	2301      	movs	r3, #1
 8000810:	e000      	b.n	8000814 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3330      	adds	r3, #48	@ 0x30
 8000830:	461a      	mov	r2, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	f003 030c 	and.w	r3, r3, #12
 800083c:	4413      	add	r3, r2
 800083e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	f003 031f 	and.w	r3, r3, #31
 800084a:	211f      	movs	r1, #31
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	401a      	ands	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	0e9b      	lsrs	r3, r3, #26
 8000858:	f003 011f 	and.w	r1, r3, #31
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	431a      	orrs	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800086c:	bf00      	nop
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800089e:	b480      	push	{r7}
 80008a0:	b087      	sub	sp, #28
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3314      	adds	r3, #20
 80008ae:	461a      	mov	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	0e5b      	lsrs	r3, r3, #25
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	4413      	add	r3, r2
 80008bc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	0d1b      	lsrs	r3, r3, #20
 80008c6:	f003 031f 	and.w	r3, r3, #31
 80008ca:	2107      	movs	r1, #7
 80008cc:	fa01 f303 	lsl.w	r3, r1, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	401a      	ands	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	0d1b      	lsrs	r3, r3, #20
 80008d8:	f003 031f 	and.w	r3, r3, #31
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	431a      	orrs	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80008e8:	bf00      	nop
 80008ea:	371c      	adds	r7, #28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800090c:	43db      	mvns	r3, r3
 800090e:	401a      	ands	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0318 	and.w	r3, r3, #24
 8000916:	4908      	ldr	r1, [pc, #32]	@ (8000938 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000918:	40d9      	lsrs	r1, r3
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	400b      	ands	r3, r1
 800091e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000922:	431a      	orrs	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	0007ffff 	.word	0x0007ffff

0800093c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f003 031f 	and.w	r3, r3, #31
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000984:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	6093      	str	r3, [r2, #8]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009ac:	d101      	bne.n	80009b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80009d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80009fc:	d101      	bne.n	8000a02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a24:	f043 0201 	orr.w	r2, r3, #1
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d101      	bne.n	8000a50 <LL_ADC_IsEnabled+0x18>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <LL_ADC_IsEnabled+0x1a>
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a6e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a72:	f043 0204 	orr.w	r2, r3, #4
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d101      	bne.n	8000a9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	d101      	bne.n	8000ac4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e130      	b.n	8000d50 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d109      	bne.n	8000b10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fc99 	bl	8000434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff3f 	bl	8000998 <LL_ADC_IsDeepPowerDownEnabled>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d004      	beq.n	8000b2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff25 	bl	8000974 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff5a 	bl	80009e8 <LL_ADC_IsInternalRegulatorEnabled>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d115      	bne.n	8000b66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff3e 	bl	80009c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b44:	4b84      	ldr	r3, [pc, #528]	@ (8000d58 <HAL_ADC_Init+0x284>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	099b      	lsrs	r3, r3, #6
 8000b4a:	4a84      	ldr	r2, [pc, #528]	@ (8000d5c <HAL_ADC_Init+0x288>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	099b      	lsrs	r3, r3, #6
 8000b52:	3301      	adds	r3, #1
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b58:	e002      	b.n	8000b60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1f9      	bne.n	8000b5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff3c 	bl	80009e8 <LL_ADC_IsInternalRegulatorEnabled>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10d      	bne.n	8000b92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b7a:	f043 0210 	orr.w	r2, r3, #16
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	f043 0201 	orr.w	r2, r3, #1
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff75 	bl	8000a86 <LL_ADC_REG_IsConversionOngoing>
 8000b9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 80c9 	bne.w	8000d3e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c5 	bne.w	8000d3e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000bbc:	f043 0202 	orr.w	r2, r3, #2
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff35 	bl	8000a38 <LL_ADC_IsEnabled>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d115      	bne.n	8000c00 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000bd4:	4862      	ldr	r0, [pc, #392]	@ (8000d60 <HAL_ADC_Init+0x28c>)
 8000bd6:	f7ff ff2f 	bl	8000a38 <LL_ADC_IsEnabled>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4861      	ldr	r0, [pc, #388]	@ (8000d64 <HAL_ADC_Init+0x290>)
 8000bde:	f7ff ff2b 	bl	8000a38 <LL_ADC_IsEnabled>
 8000be2:	4603      	mov	r3, r0
 8000be4:	431c      	orrs	r4, r3
 8000be6:	4860      	ldr	r0, [pc, #384]	@ (8000d68 <HAL_ADC_Init+0x294>)
 8000be8:	f7ff ff26 	bl	8000a38 <LL_ADC_IsEnabled>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4323      	orrs	r3, r4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d105      	bne.n	8000c00 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	485c      	ldr	r0, [pc, #368]	@ (8000d6c <HAL_ADC_Init+0x298>)
 8000bfc:	f7ff fd74 	bl	80006e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7e5b      	ldrb	r3, [r3, #25]
 8000c04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000c10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000c16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c20:	4313      	orrs	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d106      	bne.n	8000c3c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c32:	3b01      	subs	r3, #1
 8000c34:	045b      	lsls	r3, r3, #17
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d009      	beq.n	8000c58 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	4b44      	ldr	r3, [pc, #272]	@ (8000d70 <HAL_ADC_Init+0x29c>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	69b9      	ldr	r1, [r7, #24]
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff1b 	bl	8000aac <LL_ADC_INJ_IsConversionOngoing>
 8000c76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d13d      	bne.n	8000cfa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d13a      	bne.n	8000cfa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000c90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ca0:	f023 0302 	bic.w	r3, r3, #2
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	69b9      	ldr	r1, [r7, #24]
 8000caa:	430b      	orrs	r3, r1
 8000cac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d118      	bne.n	8000cea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000cc2:	f023 0304 	bic.w	r3, r3, #4
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000cce:	4311      	orrs	r1, r2
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000cd4:	4311      	orrs	r1, r2
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0201 	orr.w	r2, r2, #1
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	e007      	b.n	8000cfa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0201 	bic.w	r2, r2, #1
 8000cf8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d10c      	bne.n	8000d1c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	f023 010f 	bic.w	r1, r3, #15
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d1a:	e007      	b.n	8000d2c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 020f 	bic.w	r2, r2, #15
 8000d2a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d30:	f023 0303 	bic.w	r3, r3, #3
 8000d34:	f043 0201 	orr.w	r2, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d3c:	e007      	b.n	8000d4e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d42:	f043 0210 	orr.w	r2, r3, #16
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3724      	adds	r7, #36	@ 0x24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	053e2d63 	.word	0x053e2d63
 8000d60:	50040000 	.word	0x50040000
 8000d64:	50040100 	.word	0x50040100
 8000d68:	50040200 	.word	0x50040200
 8000d6c:	50040300 	.word	0x50040300
 8000d70:	fff0c007 	.word	0xfff0c007

08000d74 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000d7c:	4891      	ldr	r0, [pc, #580]	@ (8000fc4 <HAL_ADC_Start_IT+0x250>)
 8000d7e:	f7ff fddd 	bl	800093c <LL_ADC_GetMultimode>
 8000d82:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fe7c 	bl	8000a86 <LL_ADC_REG_IsConversionOngoing>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f040 8110 	bne.w	8000fb6 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d101      	bne.n	8000da4 <HAL_ADC_Start_IT+0x30>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e10b      	b.n	8000fbc <HAL_ADC_Start_IT+0x248>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2201      	movs	r2, #1
 8000da8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 ff3d 	bl	8001c2c <ADC_Enable>
 8000db2:	4603      	mov	r3, r0
 8000db4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000db6:	7dfb      	ldrb	r3, [r7, #23]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f040 80f7 	bne.w	8000fac <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000dc6:	f023 0301 	bic.w	r3, r3, #1
 8000dca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8000fc8 <HAL_ADC_Start_IT+0x254>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d002      	beq.n	8000de2 <HAL_ADC_Start_IT+0x6e>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <HAL_ADC_Start_IT+0x70>
 8000de2:	4b7a      	ldr	r3, [pc, #488]	@ (8000fcc <HAL_ADC_Start_IT+0x258>)
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d002      	beq.n	8000df2 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0e:	f023 0206 	bic.w	r2, r3, #6
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	659a      	str	r2, [r3, #88]	@ 0x58
 8000e16:	e002      	b.n	8000e1e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	221c      	movs	r2, #28
 8000e24:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 021c 	bic.w	r2, r2, #28
 8000e3c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d108      	bne.n	8000e58 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0208 	orr.w	r2, r2, #8
 8000e54:	605a      	str	r2, [r3, #4]
          break;
 8000e56:	e008      	b.n	8000e6a <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0204 	orr.w	r2, r2, #4
 8000e66:	605a      	str	r2, [r3, #4]
          break;
 8000e68:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d107      	bne.n	8000e82 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0210 	orr.w	r2, r2, #16
 8000e80:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a50      	ldr	r2, [pc, #320]	@ (8000fc8 <HAL_ADC_Start_IT+0x254>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d002      	beq.n	8000e92 <HAL_ADC_Start_IT+0x11e>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	e000      	b.n	8000e94 <HAL_ADC_Start_IT+0x120>
 8000e92:	4b4e      	ldr	r3, [pc, #312]	@ (8000fcc <HAL_ADC_Start_IT+0x258>)
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d008      	beq.n	8000eae <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d002      	beq.n	8000eae <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b09      	cmp	r3, #9
 8000eac:	d13a      	bne.n	8000f24 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d02d      	beq.n	8000f18 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ec0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ec4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d110      	bne.n	8000ef6 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0220 	bic.w	r2, r2, #32
 8000ee2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ef2:	605a      	str	r2, [r3, #4]
              break;
 8000ef4:	e010      	b.n	8000f18 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f04:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0220 	orr.w	r2, r2, #32
 8000f14:	605a      	str	r2, [r3, #4]
              break;
 8000f16:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fd9e 	bl	8000a5e <LL_ADC_REG_StartConversion>
 8000f22:	e04a      	b.n	8000fba <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f28:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a24      	ldr	r2, [pc, #144]	@ (8000fc8 <HAL_ADC_Start_IT+0x254>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d002      	beq.n	8000f40 <HAL_ADC_Start_IT+0x1cc>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	e000      	b.n	8000f42 <HAL_ADC_Start_IT+0x1ce>
 8000f40:	4b22      	ldr	r3, [pc, #136]	@ (8000fcc <HAL_ADC_Start_IT+0x258>)
 8000f42:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d034      	beq.n	8000fba <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d110      	bne.n	8000f8a <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0220 	bic.w	r2, r2, #32
 8000f76:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f86:	605a      	str	r2, [r3, #4]
              break;
 8000f88:	e017      	b.n	8000fba <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f98:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0220 	orr.w	r2, r2, #32
 8000fa8:	605a      	str	r2, [r3, #4]
              break;
 8000faa:	e006      	b.n	8000fba <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000fb4:	e001      	b.n	8000fba <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	50040300 	.word	0x50040300
 8000fc8:	50040100 	.word	0x50040100
 8000fcc:	50040000 	.word	0x50040000

08000fd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001008:	4882      	ldr	r0, [pc, #520]	@ (8001214 <HAL_ADC_IRQHandler+0x228>)
 800100a:	f7ff fc97 	bl	800093c <LL_ADC_GetMultimode>
 800100e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d017      	beq.n	800104a <HAL_ADC_IRQHandler+0x5e>
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d012      	beq.n	800104a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	2b00      	cmp	r3, #0
 800102e:	d105      	bne.n	800103c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001034:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 fec9 	bl	8001dd4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2202      	movs	r2, #2
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <HAL_ADC_IRQHandler+0x72>
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10a      	bne.n	8001074 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 8083 	beq.w	8001170 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d07d      	beq.n	8001170 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	2b00      	cmp	r3, #0
 800107e:	d105      	bne.n	800108c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001084:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fbb2 	bl	80007fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d062      	beq.n	8001162 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001218 <HAL_ADC_IRQHandler+0x22c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d002      	beq.n	80010ac <HAL_ADC_IRQHandler+0xc0>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	e000      	b.n	80010ae <HAL_ADC_IRQHandler+0xc2>
 80010ac:	4b5b      	ldr	r3, [pc, #364]	@ (800121c <HAL_ADC_IRQHandler+0x230>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d008      	beq.n	80010c8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d002      	beq.n	80010c8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d104      	bne.n	80010d2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	623b      	str	r3, [r7, #32]
 80010d0:	e00c      	b.n	80010ec <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a50      	ldr	r2, [pc, #320]	@ (8001218 <HAL_ADC_IRQHandler+0x22c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d002      	beq.n	80010e2 <HAL_ADC_IRQHandler+0xf6>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	e000      	b.n	80010e4 <HAL_ADC_IRQHandler+0xf8>
 80010e2:	4b4e      	ldr	r3, [pc, #312]	@ (800121c <HAL_ADC_IRQHandler+0x230>)
 80010e4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d135      	bne.n	8001162 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b08      	cmp	r3, #8
 8001102:	d12e      	bne.n	8001162 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fcbc 	bl	8000a86 <LL_ADC_REG_IsConversionOngoing>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d11a      	bne.n	800114a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 020c 	bic.w	r2, r2, #12
 8001122:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d112      	bne.n	8001162 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	655a      	str	r2, [r3, #84]	@ 0x54
 8001148:	e00b      	b.n	8001162 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800114e:	f043 0210 	orr.w	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff f926 	bl	80003b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	220c      	movs	r2, #12
 800116e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <HAL_ADC_IRQHandler+0x198>
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10b      	bne.n	800119c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 809f 	beq.w	80012ce <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8099 	beq.w	80012ce <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fb5d 	bl	8000878 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80011be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fb18 	bl	80007fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80011ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <HAL_ADC_IRQHandler+0x22c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d002      	beq.n	80011dc <HAL_ADC_IRQHandler+0x1f0>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e000      	b.n	80011de <HAL_ADC_IRQHandler+0x1f2>
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_ADC_IRQHandler+0x230>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d008      	beq.n	80011f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d002      	beq.n	80011f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d104      	bne.n	8001202 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	e013      	b.n	800122a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_ADC_IRQHandler+0x22c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d009      	beq.n	8001220 <HAL_ADC_IRQHandler+0x234>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	e007      	b.n	8001222 <HAL_ADC_IRQHandler+0x236>
 8001212:	bf00      	nop
 8001214:	50040300 	.word	0x50040300
 8001218:	50040100 	.word	0x50040100
 800121c:	50040000 	.word	0x50040000
 8001220:	4b7d      	ldr	r3, [pc, #500]	@ (8001418 <HAL_ADC_IRQHandler+0x42c>)
 8001222:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d047      	beq.n	80012c0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_ADC_IRQHandler+0x25e>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d03f      	beq.n	80012c0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001246:	2b00      	cmp	r3, #0
 8001248:	d13a      	bne.n	80012c0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001254:	2b40      	cmp	r3, #64	@ 0x40
 8001256:	d133      	bne.n	80012c0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d12e      	bne.n	80012c0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fc20 	bl	8000aac <LL_ADC_INJ_IsConversionOngoing>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d11a      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001280:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001286:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d112      	bne.n	80012c0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80012a6:	e00b      	b.n	80012c0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ac:	f043 0210 	orr.w	r2, r3, #16
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b8:	f043 0201 	orr.w	r2, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fd5f 	bl	8001d84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2260      	movs	r2, #96	@ 0x60
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d011      	beq.n	80012fc <HAL_ADC_IRQHandler+0x310>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f896 	bl	8001420 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2280      	movs	r2, #128	@ 0x80
 80012fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d012      	beq.n	800132c <HAL_ADC_IRQHandler+0x340>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00d      	beq.n	800132c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001314:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fd45 	bl	8001dac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800132a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001332:	2b00      	cmp	r3, #0
 8001334:	d012      	beq.n	800135c <HAL_ADC_IRQHandler+0x370>
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00d      	beq.n	800135c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001344:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fd37 	bl	8001dc0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800135a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	d036      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x3e8>
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d031      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001378:	2301      	movs	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
 800137c:	e014      	b.n	80013a8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001384:	4825      	ldr	r0, [pc, #148]	@ (800141c <HAL_ADC_IRQHandler+0x430>)
 8001386:	f7ff fae7 	bl	8000958 <LL_ADC_GetMultiDMATransfer>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001390:	2301      	movs	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
 8001394:	e008      	b.n	80013a8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80013a4:	2301      	movs	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10e      	bne.n	80013cc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013be:	f043 0202 	orr.w	r2, r3, #2
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f834 	bl	8001434 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2210      	movs	r2, #16
 80013d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d018      	beq.n	8001410 <HAL_ADC_IRQHandler+0x424>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ec:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f8:	f043 0208 	orr.w	r2, r3, #8
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001408:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fcc4 	bl	8001d98 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	@ 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	50040000 	.word	0x50040000
 800141c:	50040300 	.word	0x50040300

08001420 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0b6      	sub	sp, #216	@ 0xd8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_ADC_ConfigChannel+0x22>
 8001466:	2302      	movs	r3, #2
 8001468:	e3c9      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x7b6>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb05 	bl	8000a86 <LL_ADC_REG_IsConversionOngoing>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 83aa 	bne.w	8001bd8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b05      	cmp	r3, #5
 8001492:	d824      	bhi.n	80014de <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	3b02      	subs	r3, #2
 800149a:	2b03      	cmp	r3, #3
 800149c:	d81b      	bhi.n	80014d6 <HAL_ADC_ConfigChannel+0x8e>
 800149e:	a201      	add	r2, pc, #4	@ (adr r2, 80014a4 <HAL_ADC_ConfigChannel+0x5c>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014b5 	.word	0x080014b5
 80014a8:	080014bd 	.word	0x080014bd
 80014ac:	080014c5 	.word	0x080014c5
 80014b0:	080014cd 	.word	0x080014cd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80014b4:	230c      	movs	r3, #12
 80014b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014ba:	e010      	b.n	80014de <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80014bc:	2312      	movs	r3, #18
 80014be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014c2:	e00c      	b.n	80014de <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80014c4:	2318      	movs	r3, #24
 80014c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014ca:	e008      	b.n	80014de <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80014cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014d4:	e003      	b.n	80014de <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80014d6:	2306      	movs	r3, #6
 80014d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014dc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80014ec:	f7ff f998 	bl	8000820 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fac6 	bl	8000a86 <LL_ADC_REG_IsConversionOngoing>
 80014fa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fad2 	bl	8000aac <LL_ADC_INJ_IsConversionOngoing>
 8001508:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800150c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001510:	2b00      	cmp	r3, #0
 8001512:	f040 81a4 	bne.w	800185e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 819f 	bne.w	800185e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	461a      	mov	r2, r3
 800152e:	f7ff f9b6 	bl	800089e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d00a      	beq.n	800156a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001564:	f7ff f8f4 	bl	8000750 <LL_ADC_SetOffset>
 8001568:	e179      	b.n	800185e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f911 	bl	8000798 <LL_ADC_GetOffsetChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10a      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x14e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f906 	bl	8000798 <LL_ADC_GetOffsetChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	0e9b      	lsrs	r3, r3, #26
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	e01e      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x18c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f8fb 	bl	8000798 <LL_ADC_GetOffsetChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e004      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80015c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1a4>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0e9b      	lsrs	r3, r3, #26
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	e018      	b.n	800161e <HAL_ADC_ConfigChannel+0x1d6>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001600:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001610:	2320      	movs	r3, #32
 8001612:	e004      	b.n	800161e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800161e:	429a      	cmp	r2, r3
 8001620:	d106      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f8ca 	bl	80007c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f8ae 	bl	8000798 <LL_ADC_GetOffsetChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10a      	bne.n	800165c <HAL_ADC_ConfigChannel+0x214>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2101      	movs	r1, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff f8a3 	bl	8000798 <LL_ADC_GetOffsetChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	0e9b      	lsrs	r3, r3, #26
 8001656:	f003 021f 	and.w	r2, r3, #31
 800165a:	e01e      	b.n	800169a <HAL_ADC_ConfigChannel+0x252>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f898 	bl	8000798 <LL_ADC_GetOffsetChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800167a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800167e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800168a:	2320      	movs	r3, #32
 800168c:	e004      	b.n	8001698 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800168e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x26a>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0e9b      	lsrs	r3, r3, #26
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	e018      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x29c>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80016c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80016ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80016d6:	2320      	movs	r3, #32
 80016d8:	e004      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80016da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d106      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f867 	bl	80007c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2102      	movs	r1, #2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f84b 	bl	8000798 <LL_ADC_GetOffsetChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10a      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x2da>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2102      	movs	r1, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f840 	bl	8000798 <LL_ADC_GetOffsetChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	0e9b      	lsrs	r3, r3, #26
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	e01e      	b.n	8001760 <HAL_ADC_ConfigChannel+0x318>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2102      	movs	r1, #2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f835 	bl	8000798 <LL_ADC_GetOffsetChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001744:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001750:	2320      	movs	r3, #32
 8001752:	e004      	b.n	800175e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x330>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0e9b      	lsrs	r3, r3, #26
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	e014      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x35a>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800178c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001794:	2320      	movs	r3, #32
 8001796:	e004      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001798:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d106      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2200      	movs	r2, #0
 80017ac:	2102      	movs	r1, #2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f808 	bl	80007c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2103      	movs	r1, #3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe ffec 	bl	8000798 <LL_ADC_GetOffsetChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10a      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x398>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2103      	movs	r1, #3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ffe1 	bl	8000798 <LL_ADC_GetOffsetChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	0e9b      	lsrs	r3, r3, #26
 80017da:	f003 021f 	and.w	r2, r3, #31
 80017de:	e017      	b.n	8001810 <HAL_ADC_ConfigChannel+0x3c8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2103      	movs	r1, #3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe ffd6 	bl	8000798 <LL_ADC_GetOffsetChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80017f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017fa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80017fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001802:	2320      	movs	r3, #32
 8001804:	e003      	b.n	800180e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x3e0>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0e9b      	lsrs	r3, r3, #26
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	e011      	b.n	800184c <HAL_ADC_ConfigChannel+0x404>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001838:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800183a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001840:	2320      	movs	r3, #32
 8001842:	e003      	b.n	800184c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001846:	fab3 f383 	clz	r3, r3
 800184a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800184c:	429a      	cmp	r2, r3
 800184e:	d106      	bne.n	800185e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	2103      	movs	r1, #3
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe ffb3 	bl	80007c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f8e8 	bl	8000a38 <LL_ADC_IsEnabled>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 8140 	bne.w	8001af0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	461a      	mov	r2, r3
 800187e:	f7ff f839 	bl	80008f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4a8f      	ldr	r2, [pc, #572]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x67c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	f040 8131 	bne.w	8001af0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10b      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x46e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0e9b      	lsrs	r3, r3, #26
 80018a4:	3301      	adds	r3, #1
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	bf94      	ite	ls
 80018ae:	2301      	movls	r3, #1
 80018b0:	2300      	movhi	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	e019      	b.n	80018ea <HAL_ADC_ConfigChannel+0x4a2>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80018c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80018c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80018ce:	2320      	movs	r3, #32
 80018d0:	e003      	b.n	80018da <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80018d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	bf94      	ite	ls
 80018e4:	2301      	movls	r3, #1
 80018e6:	2300      	movhi	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d079      	beq.n	80019e2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d107      	bne.n	800190a <HAL_ADC_ConfigChannel+0x4c2>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	0e9b      	lsrs	r3, r3, #26
 8001900:	3301      	adds	r3, #1
 8001902:	069b      	lsls	r3, r3, #26
 8001904:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001908:	e015      	b.n	8001936 <HAL_ADC_ConfigChannel+0x4ee>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800191a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800191c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001922:	2320      	movs	r3, #32
 8001924:	e003      	b.n	800192e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3301      	adds	r3, #1
 8001930:	069b      	lsls	r3, r3, #26
 8001932:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x50e>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0e9b      	lsrs	r3, r3, #26
 8001948:	3301      	adds	r3, #1
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	e017      	b.n	8001986 <HAL_ADC_ConfigChannel+0x53e>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001966:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800196e:	2320      	movs	r3, #32
 8001970:	e003      	b.n	800197a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	3301      	adds	r3, #1
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	ea42 0103 	orr.w	r1, r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10a      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x564>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	3301      	adds	r3, #1
 800199e:	f003 021f 	and.w	r2, r3, #31
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	051b      	lsls	r3, r3, #20
 80019aa:	e018      	b.n	80019de <HAL_ADC_ConfigChannel+0x596>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80019ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80019be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80019c4:	2320      	movs	r3, #32
 80019c6:	e003      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80019c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	f003 021f 	and.w	r2, r3, #31
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019de:	430b      	orrs	r3, r1
 80019e0:	e081      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d107      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x5b6>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0e9b      	lsrs	r3, r3, #26
 80019f4:	3301      	adds	r3, #1
 80019f6:	069b      	lsls	r3, r3, #26
 80019f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019fc:	e015      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x5e2>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001a16:	2320      	movs	r3, #32
 8001a18:	e003      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	069b      	lsls	r3, r3, #26
 8001a26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x602>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	0e9b      	lsrs	r3, r3, #26
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	e017      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x632>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	61bb      	str	r3, [r7, #24]
  return result;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001a62:	2320      	movs	r3, #32
 8001a64:	e003      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	ea42 0103 	orr.w	r1, r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10d      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x65e>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0e9b      	lsrs	r3, r3, #26
 8001a90:	3301      	adds	r3, #1
 8001a92:	f003 021f 	and.w	r2, r3, #31
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b1e      	subs	r3, #30
 8001a9e:	051b      	lsls	r3, r3, #20
 8001aa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	e01e      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x69c>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	60fb      	str	r3, [r7, #12]
  return result;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d104      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	e006      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x688>
 8001ac2:	bf00      	nop
 8001ac4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f003 021f 	and.w	r2, r3, #31
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	3b1e      	subs	r3, #30
 8001ade:	051b      	lsls	r3, r3, #20
 8001ae0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7fe fed7 	bl	800089e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b44      	ldr	r3, [pc, #272]	@ (8001c08 <HAL_ADC_ConfigChannel+0x7c0>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d07a      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001afc:	4843      	ldr	r0, [pc, #268]	@ (8001c0c <HAL_ADC_ConfigChannel+0x7c4>)
 8001afe:	f7fe fe19 	bl	8000734 <LL_ADC_GetCommonPathInternalCh>
 8001b02:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a41      	ldr	r2, [pc, #260]	@ (8001c10 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d12c      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d126      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a3c      	ldr	r2, [pc, #240]	@ (8001c14 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d004      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0x6e8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c18 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d15d      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4834      	ldr	r0, [pc, #208]	@ (8001c0c <HAL_ADC_ConfigChannel+0x7c4>)
 8001b3c:	f7fe fde7 	bl	800070e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b40:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <HAL_ADC_ConfigChannel+0x7d4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	4a36      	ldr	r2, [pc, #216]	@ (8001c20 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b5a:	e002      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f9      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b68:	e040      	b.n	8001bec <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d118      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d112      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0x74c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a22      	ldr	r2, [pc, #136]	@ (8001c18 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d12d      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481b      	ldr	r0, [pc, #108]	@ (8001c0c <HAL_ADC_ConfigChannel+0x7c4>)
 8001ba0:	f7fe fdb5 	bl	800070e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ba4:	e024      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1f      	ldr	r2, [pc, #124]	@ (8001c28 <HAL_ADC_ConfigChannel+0x7e0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d120      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11a      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <HAL_ADC_ConfigChannel+0x7cc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d115      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480e      	ldr	r0, [pc, #56]	@ (8001c0c <HAL_ADC_ConfigChannel+0x7c4>)
 8001bd2:	f7fe fd9c 	bl	800070e <LL_ADC_SetCommonPathInternalCh>
 8001bd6:	e00c      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bdc:	f043 0220 	orr.w	r2, r3, #32
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001bea:	e002      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bec:	bf00      	nop
 8001bee:	e000      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bfa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	37d8      	adds	r7, #216	@ 0xd8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	80080000 	.word	0x80080000
 8001c0c:	50040300 	.word	0x50040300
 8001c10:	c7520000 	.word	0xc7520000
 8001c14:	50040000 	.word	0x50040000
 8001c18:	50040200 	.word	0x50040200
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	053e2d63 	.word	0x053e2d63
 8001c24:	cb840000 	.word	0xcb840000
 8001c28:	80000001 	.word	0x80000001

08001c2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fefb 	bl	8000a38 <LL_ADC_IsEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d169      	bne.n	8001d1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	4b36      	ldr	r3, [pc, #216]	@ (8001d28 <ADC_Enable+0xfc>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00d      	beq.n	8001c72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e055      	b.n	8001d1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe feca 	bl	8000a10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c7c:	482b      	ldr	r0, [pc, #172]	@ (8001d2c <ADC_Enable+0x100>)
 8001c7e:	f7fe fd59 	bl	8000734 <LL_ADC_GetCommonPathInternalCh>
 8001c82:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c8c:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <ADC_Enable+0x104>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	4a28      	ldr	r2, [pc, #160]	@ (8001d34 <ADC_Enable+0x108>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ca6:	e002      	b.n	8001cae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f9      	bne.n	8001ca8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001cb4:	f7fe fd0c 	bl	80006d0 <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cba:	e028      	b.n	8001d0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe feb9 	bl	8000a38 <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d104      	bne.n	8001cd6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fe9d 	bl	8000a10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cd6:	f7fe fcfb 	bl	80006d0 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d914      	bls.n	8001d0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00d      	beq.n	8001d0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf6:	f043 0210 	orr.w	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e007      	b.n	8001d1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d1cf      	bne.n	8001cbc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	8000003f 	.word	0x8000003f
 8001d2c:	50040300 	.word	0x50040300
 8001d30:	20000000 	.word	0x20000000
 8001d34:	053e2d63 	.word	0x053e2d63

08001d38 <LL_ADC_IsEnabled>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <LL_ADC_IsEnabled+0x18>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <LL_ADC_IsEnabled+0x1a>
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_REG_IsConversionOngoing>:
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d101      	bne.n	8001d76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b09f      	sub	sp, #124	@ 0x7c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e093      	b.n	8001f2e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001e12:	2300      	movs	r3, #0
 8001e14:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a47      	ldr	r2, [pc, #284]	@ (8001f38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d102      	bne.n	8001e26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e20:	4b46      	ldr	r3, [pc, #280]	@ (8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	e001      	b.n	8001e2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e34:	f043 0220 	orr.w	r2, r3, #32
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e072      	b.n	8001f2e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff87 	bl	8001d5e <LL_ADC_REG_IsConversionOngoing>
 8001e50:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff81 	bl	8001d5e <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d154      	bne.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d151      	bne.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e68:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d02c      	beq.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e86:	035b      	lsls	r3, r3, #13
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e90:	4829      	ldr	r0, [pc, #164]	@ (8001f38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e92:	f7ff ff51 	bl	8001d38 <LL_ADC_IsEnabled>
 8001e96:	4604      	mov	r4, r0
 8001e98:	4828      	ldr	r0, [pc, #160]	@ (8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e9a:	f7ff ff4d 	bl	8001d38 <LL_ADC_IsEnabled>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	431c      	orrs	r4, r3
 8001ea2:	4828      	ldr	r0, [pc, #160]	@ (8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ea4:	f7ff ff48 	bl	8001d38 <LL_ADC_IsEnabled>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4323      	orrs	r3, r4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d137      	bne.n	8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001eb8:	f023 030f 	bic.w	r3, r3, #15
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	6811      	ldr	r1, [r2, #0]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	6892      	ldr	r2, [r2, #8]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001eca:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ecc:	e028      	b.n	8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ed8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eda:	4817      	ldr	r0, [pc, #92]	@ (8001f38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001edc:	f7ff ff2c 	bl	8001d38 <LL_ADC_IsEnabled>
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	4816      	ldr	r0, [pc, #88]	@ (8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ee4:	f7ff ff28 	bl	8001d38 <LL_ADC_IsEnabled>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	431c      	orrs	r4, r3
 8001eec:	4815      	ldr	r0, [pc, #84]	@ (8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001eee:	f7ff ff23 	bl	8001d38 <LL_ADC_IsEnabled>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4323      	orrs	r3, r4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d112      	bne.n	8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001f02:	f023 030f 	bic.w	r3, r3, #15
 8001f06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f08:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f0a:	e009      	b.n	8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001f1e:	e000      	b.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f2a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	377c      	adds	r7, #124	@ 0x7c
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	50040000 	.word	0x50040000
 8001f3c:	50040100 	.word	0x50040100
 8001f40:	50040300 	.word	0x50040300
 8001f44:	50040200 	.word	0x50040200

08001f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db0b      	blt.n	8001fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4907      	ldr	r1, [pc, #28]	@ (8001fe4 <__NVIC_EnableIRQ+0x38>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2001      	movs	r0, #1
 8001fce:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000e100 	.word	0xe000e100

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	@ (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	@ (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	@ 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	@ 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b4:	d301      	bcc.n	80020ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00f      	b.n	80020da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <SysTick_Config+0x40>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c2:	210f      	movs	r1, #15
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f7ff ff8e 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <SysTick_Config+0x40>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d2:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <SysTick_Config+0x40>)
 80020d4:	2207      	movs	r2, #7
 80020d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff29 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002110:	f7ff ff3e 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 8002114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff ff8e 	bl	800203c <NVIC_EncodePriority>
 8002120:	4602      	mov	r2, r0
 8002122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5d 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff31 	bl	8001fac <__NVIC_EnableIRQ>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffa2 	bl	80020a4 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	e17f      	b.n	800247c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8171 	beq.w	8002476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d005      	beq.n	80021ac <HAL_GPIO_Init+0x40>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d130      	bne.n	800220e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021e2:	2201      	movs	r2, #1
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 0201 	and.w	r2, r3, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b03      	cmp	r3, #3
 8002218:	d118      	bne.n	800224c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d017      	beq.n	8002288 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d123      	bne.n	80022dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	6939      	ldr	r1, [r7, #16]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80ac 	beq.w	8002476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	4b5f      	ldr	r3, [pc, #380]	@ (800249c <HAL_GPIO_Init+0x330>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	4a5e      	ldr	r2, [pc, #376]	@ (800249c <HAL_GPIO_Init+0x330>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6613      	str	r3, [r2, #96]	@ 0x60
 800232a:	4b5c      	ldr	r3, [pc, #368]	@ (800249c <HAL_GPIO_Init+0x330>)
 800232c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002336:	4a5a      	ldr	r2, [pc, #360]	@ (80024a0 <HAL_GPIO_Init+0x334>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x242>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4f      	ldr	r2, [pc, #316]	@ (80024a4 <HAL_GPIO_Init+0x338>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x23e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4e      	ldr	r2, [pc, #312]	@ (80024a8 <HAL_GPIO_Init+0x33c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x23a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4d      	ldr	r2, [pc, #308]	@ (80024ac <HAL_GPIO_Init+0x340>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x236>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4c      	ldr	r2, [pc, #304]	@ (80024b0 <HAL_GPIO_Init+0x344>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x232>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4b      	ldr	r2, [pc, #300]	@ (80024b4 <HAL_GPIO_Init+0x348>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x22e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4a      	ldr	r2, [pc, #296]	@ (80024b8 <HAL_GPIO_Init+0x34c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x22a>
 8002392:	2306      	movs	r3, #6
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 8002396:	2307      	movs	r3, #7
 8002398:	e00a      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 800239a:	2305      	movs	r3, #5
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 800239e:	2304      	movs	r3, #4
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x244>
 80023ae:	2300      	movs	r3, #0
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023c0:	4937      	ldr	r1, [pc, #220]	@ (80024a0 <HAL_GPIO_Init+0x334>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_GPIO_Init+0x350>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023f2:	4a32      	ldr	r2, [pc, #200]	@ (80024bc <HAL_GPIO_Init+0x350>)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023f8:	4b30      	ldr	r3, [pc, #192]	@ (80024bc <HAL_GPIO_Init+0x350>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800241c:	4a27      	ldr	r2, [pc, #156]	@ (80024bc <HAL_GPIO_Init+0x350>)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002422:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <HAL_GPIO_Init+0x350>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002446:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <HAL_GPIO_Init+0x350>)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800244c:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_GPIO_Init+0x350>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002470:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <HAL_GPIO_Init+0x350>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f ae78 	bne.w	800217c <HAL_GPIO_Init+0x10>
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010000 	.word	0x40010000
 80024a4:	48000400 	.word	0x48000400
 80024a8:	48000800 	.word	0x48000800
 80024ac:	48000c00 	.word	0x48000c00
 80024b0:	48001000 	.word	0x48001000
 80024b4:	48001400 	.word	0x48001400
 80024b8:	48001800 	.word	0x48001800
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024c4:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40007000 	.word	0x40007000

080024dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024ea:	d130      	bne.n	800254e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ec:	4b23      	ldr	r3, [pc, #140]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024f8:	d038      	beq.n	800256c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002502:	4a1e      	ldr	r2, [pc, #120]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002504:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800250a:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2232      	movs	r2, #50	@ 0x32
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002520:	e002      	b.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3b01      	subs	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002534:	d102      	bne.n	800253c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f2      	bne.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800253c:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002548:	d110      	bne.n	800256c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e00f      	b.n	800256e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800254e:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255a:	d007      	beq.n	800256c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800255c:	4b07      	ldr	r3, [pc, #28]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002564:	4a05      	ldr	r2, [pc, #20]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800256a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000
 8002580:	20000000 	.word	0x20000000
 8002584:	431bde83 	.word	0x431bde83

08002588 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e3ca      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259a:	4b97      	ldr	r3, [pc, #604]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a4:	4b94      	ldr	r3, [pc, #592]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80e4 	beq.w	8002784 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4a>
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	f040 808b 	bne.w	80026e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	f040 8087 	bne.w	80026e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025d2:	4b89      	ldr	r3, [pc, #548]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e3a2      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	4b82      	ldr	r3, [pc, #520]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_RCC_OscConfig+0x7c>
 80025fa:	4b7f      	ldr	r3, [pc, #508]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002602:	e005      	b.n	8002610 <HAL_RCC_OscConfig+0x88>
 8002604:	4b7c      	ldr	r3, [pc, #496]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002610:	4293      	cmp	r3, r2
 8002612:	d223      	bcs.n	800265c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fd1d 	bl	8003058 <RCC_SetFlashLatencyFromMSIRange>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e383      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002628:	4b73      	ldr	r3, [pc, #460]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a72      	ldr	r2, [pc, #456]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b70      	ldr	r3, [pc, #448]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	496d      	ldr	r1, [pc, #436]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002646:	4b6c      	ldr	r3, [pc, #432]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	4968      	ldr	r1, [pc, #416]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
 800265a:	e025      	b.n	80026a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265c:	4b66      	ldr	r3, [pc, #408]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b63      	ldr	r3, [pc, #396]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4960      	ldr	r1, [pc, #384]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800267a:	4b5f      	ldr	r3, [pc, #380]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	495b      	ldr	r1, [pc, #364]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fcdd 	bl	8003058 <RCC_SetFlashLatencyFromMSIRange>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e343      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a8:	f000 fc4a 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b52      	ldr	r3, [pc, #328]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	4950      	ldr	r1, [pc, #320]	@ (80027fc <HAL_RCC_OscConfig+0x274>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002800 <HAL_RCC_OscConfig+0x278>)
 80026c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002804 <HAL_RCC_OscConfig+0x27c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ffaf 	bl	8000630 <HAL_InitTick>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d052      	beq.n	8002782 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	e327      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d032      	beq.n	800274e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026e8:	4b43      	ldr	r3, [pc, #268]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a42      	ldr	r2, [pc, #264]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f4:	f7fd ffec 	bl	80006d0 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026fc:	f7fd ffe8 	bl	80006d0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e310      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800270e:	4b3a      	ldr	r3, [pc, #232]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271a:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a36      	ldr	r2, [pc, #216]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4931      	ldr	r1, [pc, #196]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002738:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	492c      	ldr	r1, [pc, #176]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e01a      	b.n	8002784 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a29      	ldr	r2, [pc, #164]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800275a:	f7fd ffb9 	bl	80006d0 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002762:	f7fd ffb5 	bl	80006d0 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e2dd      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002774:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x1da>
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002782:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d074      	beq.n	800287a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b08      	cmp	r3, #8
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x21a>
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b0c      	cmp	r3, #12
 800279a:	d10e      	bne.n	80027ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d10b      	bne.n	80027ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d064      	beq.n	8002878 <HAL_RCC_OscConfig+0x2f0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d160      	bne.n	8002878 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e2ba      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x24a>
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	e026      	b.n	8002820 <HAL_RCC_OscConfig+0x298>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027da:	d115      	bne.n	8002808 <HAL_RCC_OscConfig+0x280>
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a05      	ldr	r2, [pc, #20]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a02      	ldr	r2, [pc, #8]	@ (80027f8 <HAL_RCC_OscConfig+0x270>)
 80027ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	e014      	b.n	8002820 <HAL_RCC_OscConfig+0x298>
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08003b00 	.word	0x08003b00
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004
 8002808:	4ba0      	ldr	r3, [pc, #640]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a9f      	ldr	r2, [pc, #636]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b9d      	ldr	r3, [pc, #628]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a9c      	ldr	r2, [pc, #624]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fd ff52 	bl	80006d0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7fd ff4e 	bl	80006d0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e276      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002842:	4b92      	ldr	r3, [pc, #584]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x2a8>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fd ff3e 	bl	80006d0 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7fd ff3a 	bl	80006d0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e262      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800286a:	4b88      	ldr	r3, [pc, #544]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x2d0>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d060      	beq.n	8002948 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d005      	beq.n	8002898 <HAL_RCC_OscConfig+0x310>
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d119      	bne.n	80028c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d116      	bne.n	80028c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002898:	4b7c      	ldr	r3, [pc, #496]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_OscConfig+0x328>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e23f      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b76      	ldr	r3, [pc, #472]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4973      	ldr	r1, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c4:	e040      	b.n	8002948 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d023      	beq.n	8002916 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ce:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fd fef9 	bl	80006d0 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fd fef5 	bl	80006d0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e21d      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f4:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b62      	ldr	r3, [pc, #392]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	495f      	ldr	r1, [pc, #380]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e018      	b.n	8002948 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b5d      	ldr	r3, [pc, #372]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800291c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fd fed5 	bl	80006d0 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292a:	f7fd fed1 	bl	80006d0 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e1f9      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293c:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d03c      	beq.n	80029ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01c      	beq.n	8002996 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002962:	4a4a      	ldr	r2, [pc, #296]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fd feb0 	bl	80006d0 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002974:	f7fd feac 	bl	80006d0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1d4      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002986:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <HAL_RCC_OscConfig+0x3ec>
 8002994:	e01b      	b.n	80029ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002996:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a6:	f7fd fe93 	bl	80006d0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ae:	f7fd fe8f 	bl	80006d0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e1b7      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c0:	4b32      	ldr	r3, [pc, #200]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ef      	bne.n	80029ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80a6 	beq.w	8002b28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029e0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f0:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f8:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a08:	4b21      	ldr	r3, [pc, #132]	@ (8002a90 <HAL_RCC_OscConfig+0x508>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d118      	bne.n	8002a46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a14:	4b1e      	ldr	r3, [pc, #120]	@ (8002a90 <HAL_RCC_OscConfig+0x508>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1d      	ldr	r2, [pc, #116]	@ (8002a90 <HAL_RCC_OscConfig+0x508>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a20:	f7fd fe56 	bl	80006d0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fd fe52 	bl	80006d0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e17a      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_RCC_OscConfig+0x508>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d108      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4d8>
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a54:	4a0d      	ldr	r2, [pc, #52]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a5e:	e029      	b.n	8002ab4 <HAL_RCC_OscConfig+0x52c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d115      	bne.n	8002a94 <HAL_RCC_OscConfig+0x50c>
 8002a68:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6e:	4a07      	ldr	r2, [pc, #28]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	4a03      	ldr	r2, [pc, #12]	@ (8002a8c <HAL_RCC_OscConfig+0x504>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a88:	e014      	b.n	8002ab4 <HAL_RCC_OscConfig+0x52c>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40007000 	.word	0x40007000
 8002a94:	4b9c      	ldr	r3, [pc, #624]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a9b      	ldr	r2, [pc, #620]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aa4:	4b98      	ldr	r3, [pc, #608]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	4a97      	ldr	r2, [pc, #604]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d016      	beq.n	8002aea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fd fe08 	bl	80006d0 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fd fe04 	bl	80006d0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e12a      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ada:	4b8b      	ldr	r3, [pc, #556]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ed      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x53c>
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fd fdf1 	bl	80006d0 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fd fded 	bl	80006d0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e113      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b08:	4b7f      	ldr	r3, [pc, #508]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ed      	bne.n	8002af2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	4a79      	ldr	r2, [pc, #484]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80fe 	beq.w	8002d2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	f040 80d0 	bne.w	8002cdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b3c:	4b72      	ldr	r3, [pc, #456]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d130      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d127      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d11f      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b7c:	2a07      	cmp	r2, #7
 8002b7e:	bf14      	ite	ne
 8002b80:	2201      	movne	r2, #1
 8002b82:	2200      	moveq	r2, #0
 8002b84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d109      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d06e      	beq.n	8002c90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	d069      	beq.n	8002c8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bb8:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bc4:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0ad      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be0:	f7fd fd76 	bl	80006d0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fd fd72 	bl	80006d0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e09a      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfa:	4b43      	ldr	r3, [pc, #268]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c06:	4b40      	ldr	r3, [pc, #256]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	4b40      	ldr	r3, [pc, #256]	@ (8002d0c <HAL_RCC_OscConfig+0x784>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c20:	0212      	lsls	r2, r2, #8
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c28:	0852      	lsrs	r2, r2, #1
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	0552      	lsls	r2, r2, #21
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c34:	0852      	lsrs	r2, r2, #1
 8002c36:	3a01      	subs	r2, #1
 8002c38:	0652      	lsls	r2, r2, #25
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c40:	0912      	lsrs	r2, r2, #4
 8002c42:	0452      	lsls	r2, r2, #17
 8002c44:	430a      	orrs	r2, r1
 8002c46:	4930      	ldr	r1, [pc, #192]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2d      	ldr	r2, [pc, #180]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c58:	4b2b      	ldr	r3, [pc, #172]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c64:	f7fd fd34 	bl	80006d0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fd fd30 	bl	80006d0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e058      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7e:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c8a:	e050      	b.n	8002d2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e04f      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d148      	bne.n	8002d2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca8:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a16      	ldr	r2, [pc, #88]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb4:	f7fd fd0c 	bl	80006d0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fd fd08 	bl	80006d0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e030      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x734>
 8002cda:	e028      	b.n	8002d2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d023      	beq.n	8002d2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_RCC_OscConfig+0x780>)
 8002ce8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fd fcef 	bl	80006d0 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf4:	e00c      	b.n	8002d10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fd fceb 	bl	80006d0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d905      	bls.n	8002d10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e013      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <HAL_RCC_OscConfig+0x7b0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ec      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_RCC_OscConfig+0x7b0>)
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	4905      	ldr	r1, [pc, #20]	@ (8002d38 <HAL_RCC_OscConfig+0x7b0>)
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_OscConfig+0x7b4>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
 8002d28:	e001      	b.n	8002d2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	feeefffc 	.word	0xfeeefffc

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0e7      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b75      	ldr	r3, [pc, #468]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b72      	ldr	r3, [pc, #456]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4970      	ldr	r1, [pc, #448]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b6e      	ldr	r3, [pc, #440]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0cf      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d010      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b66      	ldr	r3, [pc, #408]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d908      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b63      	ldr	r3, [pc, #396]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4960      	ldr	r1, [pc, #384]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d04c      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0a6      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dde:	4b54      	ldr	r3, [pc, #336]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e09a      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e08e      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e06:	4b4a      	ldr	r3, [pc, #296]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e086      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b46      	ldr	r3, [pc, #280]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4943      	ldr	r1, [pc, #268]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e28:	f7fd fc52 	bl	80006d0 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fd fc4e 	bl	80006d0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e06e      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	4b31      	ldr	r3, [pc, #196]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d208      	bcs.n	8002e86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e74:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	492b      	ldr	r1, [pc, #172]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e86:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d210      	bcs.n	8002eb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 0207 	bic.w	r2, r3, #7
 8002e9c:	4923      	ldr	r1, [pc, #140]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea4:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <HAL_RCC_ClockConfig+0x1ec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e036      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4918      	ldr	r1, [pc, #96]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee0:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4910      	ldr	r1, [pc, #64]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef4:	f000 f824 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	490b      	ldr	r1, [pc, #44]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f4>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f10:	4a09      	ldr	r2, [pc, #36]	@ (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002f12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f14:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_RCC_ClockConfig+0x1fc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fb89 	bl	8000630 <HAL_InitTick>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f22:	7afb      	ldrb	r3, [r7, #11]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08003b00 	.word	0x08003b00
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	20000004 	.word	0x20000004

08002f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f58:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x34>
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d121      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d11e      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f74:	4b34      	ldr	r3, [pc, #208]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f80:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e005      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f90:	4b2d      	ldr	r3, [pc, #180]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800304c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10d      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e004      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fc4:	4b23      	ldr	r3, [pc, #140]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d134      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fce:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d003      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xac>
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe8:	617b      	str	r3, [r7, #20]
      break;
 8002fea:	e005      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fec:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fee:	617b      	str	r3, [r7, #20]
      break;
 8002ff0:	e002      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	617b      	str	r3, [r7, #20]
      break;
 8002ff6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	3301      	adds	r3, #1
 8003004:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	fb03 f202 	mul.w	r2, r3, r2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800301e:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	0e5b      	lsrs	r3, r3, #25
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	3301      	adds	r3, #1
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003038:	69bb      	ldr	r3, [r7, #24]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	@ 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	08003b10 	.word	0x08003b10
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200

08003058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003064:	4b2a      	ldr	r3, [pc, #168]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003070:	f7ff fa26 	bl	80024c0 <HAL_PWREx_GetVoltageRange>
 8003074:	6178      	str	r0, [r7, #20]
 8003076:	e014      	b.n	80030a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003078:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307c:	4a24      	ldr	r2, [pc, #144]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003082:	6593      	str	r3, [r2, #88]	@ 0x58
 8003084:	4b22      	ldr	r3, [pc, #136]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003090:	f7ff fa16 	bl	80024c0 <HAL_PWREx_GetVoltageRange>
 8003094:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003096:	4b1e      	ldr	r3, [pc, #120]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a8:	d10b      	bne.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b80      	cmp	r3, #128	@ 0x80
 80030ae:	d919      	bls.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80030b4:	d902      	bls.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030b6:	2302      	movs	r3, #2
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	e013      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e010      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b80      	cmp	r3, #128	@ 0x80
 80030c6:	d902      	bls.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030c8:	2303      	movs	r3, #3
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e00a      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b80      	cmp	r3, #128	@ 0x80
 80030d2:	d102      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030d4:	2302      	movs	r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e004      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b70      	cmp	r3, #112	@ 0x70
 80030de:	d101      	bne.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e0:	2301      	movs	r3, #1
 80030e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 0207 	bic.w	r2, r3, #7
 80030ec:	4909      	ldr	r1, [pc, #36]	@ (8003114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030f4:	4b07      	ldr	r3, [pc, #28]	@ (8003114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	40022000 	.word	0x40022000

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003120:	2300      	movs	r3, #0
 8003122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003124:	2300      	movs	r3, #0
 8003126:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003130:	2b00      	cmp	r3, #0
 8003132:	d041      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003138:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800313c:	d02a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800313e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003142:	d824      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003144:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003148:	d008      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800314a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800314e:	d81e      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003154:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003158:	d010      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800315a:	e018      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800315c:	4b86      	ldr	r3, [pc, #536]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a85      	ldr	r2, [pc, #532]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003166:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003168:	e015      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fabb 	bl	80036ec <RCCEx_PLLSAI1_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800317a:	e00c      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3320      	adds	r3, #32
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fba6 	bl	80038d4 <RCCEx_PLLSAI2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800318c:	e003      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	74fb      	strb	r3, [r7, #19]
      break;
 8003192:	e000      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10b      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800319c:	4b76      	ldr	r3, [pc, #472]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031aa:	4973      	ldr	r1, [pc, #460]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031b2:	e001      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d041      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031cc:	d02a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031d2:	d824      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031d8:	d008      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031de:	d81e      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e8:	d010      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031ea:	e018      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031ec:	4b62      	ldr	r3, [pc, #392]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a61      	ldr	r2, [pc, #388]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f8:	e015      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fa73 	bl	80036ec <RCCEx_PLLSAI1_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800320a:	e00c      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3320      	adds	r3, #32
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fb5e 	bl	80038d4 <RCCEx_PLLSAI2_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800321c:	e003      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	74fb      	strb	r3, [r7, #19]
      break;
 8003222:	e000      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800322c:	4b52      	ldr	r3, [pc, #328]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003232:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800323a:	494f      	ldr	r1, [pc, #316]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003242:	e001      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a0 	beq.w	8003396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800325a:	4b47      	ldr	r3, [pc, #284]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00d      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	4a40      	ldr	r2, [pc, #256]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327a:	6593      	str	r3, [r2, #88]	@ 0x58
 800327c:	4b3e      	ldr	r3, [pc, #248]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328c:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a3a      	ldr	r2, [pc, #232]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003296:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003298:	f7fd fa1a 	bl	80006d0 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800329e:	e009      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fd fa16 	bl	80006d0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d902      	bls.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	74fb      	strb	r3, [r7, #19]
        break;
 80032b2:	e005      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032b4:	4b31      	ldr	r3, [pc, #196]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ef      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d15c      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01f      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d019      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032e4:	4b24      	ldr	r3, [pc, #144]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032f0:	4b21      	ldr	r3, [pc, #132]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f6:	4a20      	ldr	r2, [pc, #128]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003300:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003306:	4a1c      	ldr	r2, [pc, #112]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003310:	4a19      	ldr	r2, [pc, #100]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fd f9d5 	bl	80006d0 <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003328:	e00b      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fd f9d1 	bl	80006d0 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d902      	bls.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	74fb      	strb	r3, [r7, #19]
            break;
 8003340:	e006      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003342:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ec      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003356:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003366:	4904      	ldr	r1, [pc, #16]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800336e:	e009      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	74bb      	strb	r3, [r7, #18]
 8003374:	e006      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003384:	7c7b      	ldrb	r3, [r7, #17]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	4b9e      	ldr	r3, [pc, #632]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	4a9d      	ldr	r2, [pc, #628]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003394:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033a2:	4b98      	ldr	r3, [pc, #608]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f023 0203 	bic.w	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	4994      	ldr	r1, [pc, #592]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	f023 020c 	bic.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d2:	498c      	ldr	r1, [pc, #560]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033e6:	4b87      	ldr	r3, [pc, #540]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	4983      	ldr	r1, [pc, #524]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003408:	4b7e      	ldr	r3, [pc, #504]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	497b      	ldr	r1, [pc, #492]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800342a:	4b76      	ldr	r3, [pc, #472]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003438:	4972      	ldr	r1, [pc, #456]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800344c:	4b6d      	ldr	r3, [pc, #436]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003452:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	496a      	ldr	r1, [pc, #424]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800346e:	4b65      	ldr	r3, [pc, #404]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003474:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	4961      	ldr	r1, [pc, #388]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003490:	4b5c      	ldr	r3, [pc, #368]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349e:	4959      	ldr	r1, [pc, #356]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b2:	4b54      	ldr	r3, [pc, #336]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c0:	4950      	ldr	r1, [pc, #320]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e2:	4948      	ldr	r1, [pc, #288]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f6:	4b43      	ldr	r3, [pc, #268]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	493f      	ldr	r1, [pc, #252]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d028      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003518:	4b3a      	ldr	r3, [pc, #232]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003526:	4937      	ldr	r1, [pc, #220]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003536:	d106      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003538:	4b32      	ldr	r3, [pc, #200]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4a31      	ldr	r2, [pc, #196]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003542:	60d3      	str	r3, [r2, #12]
 8003544:	e011      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800354a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800354e:	d10c      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f8c8 	bl	80036ec <RCCEx_PLLSAI1_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d028      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003576:	4b23      	ldr	r3, [pc, #140]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	491f      	ldr	r1, [pc, #124]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003594:	d106      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003596:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4a1a      	ldr	r2, [pc, #104]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035a0:	60d3      	str	r3, [r2, #12]
 80035a2:	e011      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2101      	movs	r1, #1
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f899 	bl	80036ec <RCCEx_PLLSAI1_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02b      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e2:	4908      	ldr	r1, [pc, #32]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f2:	d109      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f4:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a02      	ldr	r2, [pc, #8]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035fe:	60d3      	str	r3, [r2, #12]
 8003600:	e014      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003610:	d10c      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f867 	bl	80036ec <RCCEx_PLLSAI1_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02f      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003638:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003646:	4928      	ldr	r1, [pc, #160]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003656:	d10d      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	2102      	movs	r1, #2
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f844 	bl	80036ec <RCCEx_PLLSAI1_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d014      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800366e:	7cfb      	ldrb	r3, [r7, #19]
 8003670:	74bb      	strb	r3, [r7, #18]
 8003672:	e011      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800367c:	d10c      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3320      	adds	r3, #32
 8003682:	2102      	movs	r1, #2
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f925 	bl	80038d4 <RCCEx_PLLSAI2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036a4:	4b10      	ldr	r3, [pc, #64]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036aa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b2:	490d      	ldr	r1, [pc, #52]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036c6:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d6:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036de:	7cbb      	ldrb	r3, [r7, #18]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000

080036ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036fa:	4b75      	ldr	r3, [pc, #468]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d018      	beq.n	8003738 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003706:	4b72      	ldr	r3, [pc, #456]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0203 	and.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d10d      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
       ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800371e:	4b6c      	ldr	r3, [pc, #432]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
       ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d047      	beq.n	80037c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e044      	b.n	80037c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d018      	beq.n	8003772 <RCCEx_PLLSAI1_Config+0x86>
 8003740:	2b03      	cmp	r3, #3
 8003742:	d825      	bhi.n	8003790 <RCCEx_PLLSAI1_Config+0xa4>
 8003744:	2b01      	cmp	r3, #1
 8003746:	d002      	beq.n	800374e <RCCEx_PLLSAI1_Config+0x62>
 8003748:	2b02      	cmp	r3, #2
 800374a:	d009      	beq.n	8003760 <RCCEx_PLLSAI1_Config+0x74>
 800374c:	e020      	b.n	8003790 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800374e:	4b60      	ldr	r3, [pc, #384]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11d      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375e:	e01a      	b.n	8003796 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003760:	4b5b      	ldr	r3, [pc, #364]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003770:	e013      	b.n	800379a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003772:	4b57      	ldr	r3, [pc, #348]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800377e:	4b54      	ldr	r3, [pc, #336]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800378e:	e006      	b.n	800379e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e004      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800379e:	bf00      	nop
    }

    if(status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10d      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	430b      	orrs	r3, r1
 80037bc:	4944      	ldr	r1, [pc, #272]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d17d      	bne.n	80038c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037c8:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a40      	ldr	r2, [pc, #256]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fc ff7c 	bl	80006d0 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037da:	e009      	b.n	80037f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037dc:	f7fc ff78 	bl	80006d0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d902      	bls.n	80037f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	73fb      	strb	r3, [r7, #15]
        break;
 80037ee:	e005      	b.n	80037fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037f0:	4b37      	ldr	r3, [pc, #220]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1ef      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d160      	bne.n	80038c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d111      	bne.n	800382c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003808:	4b31      	ldr	r3, [pc, #196]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	0211      	lsls	r1, r2, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	0912      	lsrs	r2, r2, #4
 8003820:	0452      	lsls	r2, r2, #17
 8003822:	430a      	orrs	r2, r1
 8003824:	492a      	ldr	r1, [pc, #168]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	610b      	str	r3, [r1, #16]
 800382a:	e027      	b.n	800387c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d112      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003832:	4b27      	ldr	r3, [pc, #156]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800383a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6892      	ldr	r2, [r2, #8]
 8003842:	0211      	lsls	r1, r2, #8
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6912      	ldr	r2, [r2, #16]
 8003848:	0852      	lsrs	r2, r2, #1
 800384a:	3a01      	subs	r2, #1
 800384c:	0552      	lsls	r2, r2, #21
 800384e:	430a      	orrs	r2, r1
 8003850:	491f      	ldr	r1, [pc, #124]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	610b      	str	r3, [r1, #16]
 8003856:	e011      	b.n	800387c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003858:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003860:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6892      	ldr	r2, [r2, #8]
 8003868:	0211      	lsls	r1, r2, #8
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6952      	ldr	r2, [r2, #20]
 800386e:	0852      	lsrs	r2, r2, #1
 8003870:	3a01      	subs	r2, #1
 8003872:	0652      	lsls	r2, r2, #25
 8003874:	430a      	orrs	r2, r1
 8003876:	4916      	ldr	r1, [pc, #88]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	4313      	orrs	r3, r2
 800387a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800387c:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a13      	ldr	r2, [pc, #76]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003886:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fc ff22 	bl	80006d0 <HAL_GetTick>
 800388c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800388e:	e009      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003890:	f7fc ff1e 	bl	80006d0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d902      	bls.n	80038a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	73fb      	strb	r3, [r7, #15]
          break;
 80038a2:	e005      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038a4:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ef      	beq.n	8003890 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	4904      	ldr	r1, [pc, #16]	@ (80038d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000

080038d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038e2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d018      	beq.n	8003920 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038ee:	4b67      	ldr	r3, [pc, #412]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0203 	and.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d10d      	bne.n	800391a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
       ||
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003906:	4b61      	ldr	r3, [pc, #388]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
       ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d047      	beq.n	80039aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
 800391e:	e044      	b.n	80039aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d018      	beq.n	800395a <RCCEx_PLLSAI2_Config+0x86>
 8003928:	2b03      	cmp	r3, #3
 800392a:	d825      	bhi.n	8003978 <RCCEx_PLLSAI2_Config+0xa4>
 800392c:	2b01      	cmp	r3, #1
 800392e:	d002      	beq.n	8003936 <RCCEx_PLLSAI2_Config+0x62>
 8003930:	2b02      	cmp	r3, #2
 8003932:	d009      	beq.n	8003948 <RCCEx_PLLSAI2_Config+0x74>
 8003934:	e020      	b.n	8003978 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003936:	4b55      	ldr	r3, [pc, #340]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11d      	bne.n	800397e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003946:	e01a      	b.n	800397e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003948:	4b50      	ldr	r3, [pc, #320]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d116      	bne.n	8003982 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003958:	e013      	b.n	8003982 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800395a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003966:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003976:	e006      	b.n	8003986 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      break;
 800397c:	e004      	b.n	8003988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800397e:	bf00      	nop
 8003980:	e002      	b.n	8003988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003986:	bf00      	nop
    }

    if(status == HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800398e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	430b      	orrs	r3, r1
 80039a4:	4939      	ldr	r1, [pc, #228]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d167      	bne.n	8003a80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039b0:	4b36      	ldr	r3, [pc, #216]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a35      	ldr	r2, [pc, #212]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039bc:	f7fc fe88 	bl	80006d0 <HAL_GetTick>
 80039c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039c2:	e009      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039c4:	f7fc fe84 	bl	80006d0 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d902      	bls.n	80039d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	73fb      	strb	r3, [r7, #15]
        break;
 80039d6:	e005      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039d8:	4b2c      	ldr	r3, [pc, #176]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ef      	bne.n	80039c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d14a      	bne.n	8003a80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d111      	bne.n	8003a14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039f0:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6892      	ldr	r2, [r2, #8]
 8003a00:	0211      	lsls	r1, r2, #8
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68d2      	ldr	r2, [r2, #12]
 8003a06:	0912      	lsrs	r2, r2, #4
 8003a08:	0452      	lsls	r2, r2, #17
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	491f      	ldr	r1, [pc, #124]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	614b      	str	r3, [r1, #20]
 8003a12:	e011      	b.n	8003a38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6892      	ldr	r2, [r2, #8]
 8003a24:	0211      	lsls	r1, r2, #8
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6912      	ldr	r2, [r2, #16]
 8003a2a:	0852      	lsrs	r2, r2, #1
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	0652      	lsls	r2, r2, #25
 8003a30:	430a      	orrs	r2, r1
 8003a32:	4916      	ldr	r1, [pc, #88]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a38:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a13      	ldr	r2, [pc, #76]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a44:	f7fc fe44 	bl	80006d0 <HAL_GetTick>
 8003a48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a4a:	e009      	b.n	8003a60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a4c:	f7fc fe40 	bl	80006d0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d902      	bls.n	8003a60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a5e:	e005      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a60:	4b0a      	ldr	r3, [pc, #40]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ef      	beq.n	8003a4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	4904      	ldr	r1, [pc, #16]	@ (8003a8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000

08003a90 <memset>:
 8003a90:	4402      	add	r2, r0
 8003a92:	4603      	mov	r3, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ad8 <__libc_init_array+0x38>)
 8003aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8003adc <__libc_init_array+0x3c>)
 8003aa6:	1b64      	subs	r4, r4, r5
 8003aa8:	10a4      	asrs	r4, r4, #2
 8003aaa:	2600      	movs	r6, #0
 8003aac:	42a6      	cmp	r6, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ae0 <__libc_init_array+0x40>)
 8003ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ae4 <__libc_init_array+0x44>)
 8003ab4:	f000 f818 	bl	8003ae8 <_init>
 8003ab8:	1b64      	subs	r4, r4, r5
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	2600      	movs	r6, #0
 8003abe:	42a6      	cmp	r6, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac8:	4798      	blx	r3
 8003aca:	3601      	adds	r6, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad2:	4798      	blx	r3
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	08003b40 	.word	0x08003b40
 8003adc:	08003b40 	.word	0x08003b40
 8003ae0:	08003b40 	.word	0x08003b40
 8003ae4:	08003b44 	.word	0x08003b44

08003ae8 <_init>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

08003af4 <_fini>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr


4.2_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004180  08004180  00005180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c8  080041c8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d0  080041d0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d0  080041d0  000051d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041d4  080041d4  000051d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080041d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080041e4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080041e4  00006158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2dc  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d89  00000000  00000000  00012318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  000140a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000782  00000000  00000000  00014a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f48  00000000  00000000  000151fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c191  00000000  00000000  0003a142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3e8a  00000000  00000000  000462d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a15d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  0012a1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0012c8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004168 	.word	0x08004168

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004168 	.word	0x08004168

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_UART_TxCpltCallback>:
	  data[i] = 'A';
  }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	for(int i = 5; i<10; i++)
 80004c0:	2305      	movs	r3, #5
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	e007      	b.n	80004d6 <HAL_UART_TxCpltCallback+0x1e>
	{
	  data[i] = 'B';
 80004c6:	4a09      	ldr	r2, [pc, #36]	@ (80004ec <HAL_UART_TxCpltCallback+0x34>)
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	4413      	add	r3, r2
 80004cc:	2242      	movs	r2, #66	@ 0x42
 80004ce:	701a      	strb	r2, [r3, #0]
	for(int i = 5; i<10; i++)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2b09      	cmp	r3, #9
 80004da:	ddf4      	ble.n	80004c6 <HAL_UART_TxCpltCallback+0xe>
	}
}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000140 	.word	0x20000140

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa72 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f816 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8bc 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f894 	bl	800062c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f862 	bl	80005cc <MX_USART2_UART_Init>
//
//	if((count%20) == 0){
//		HAL_UART_Transmit_DMA(&huart2, data, sizeof(data));
//	}

	  HAL_UART_Receive_DMA(&huart2, rx_data, 5);
 8000508:	2205      	movs	r2, #5
 800050a:	4905      	ldr	r1, [pc, #20]	@ (8000520 <main+0x30>)
 800050c:	4805      	ldr	r0, [pc, #20]	@ (8000524 <main+0x34>)
 800050e:	f002 fbd7 	bl	8002cc0 <HAL_UART_Receive_DMA>
	  HAL_Delay(300);
 8000512:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000516:	f000 fadd 	bl	8000ad4 <HAL_Delay>
	  HAL_UART_Receive_DMA(&huart2, rx_data, 5);
 800051a:	bf00      	nop
 800051c:	e7f4      	b.n	8000508 <main+0x18>
 800051e:	bf00      	nop
 8000520:	2000014c 	.word	0x2000014c
 8000524:	20000028 	.word	0x20000028

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	@ 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	@ 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fdea 	bl	8004110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800054e:	f001 f857 	bl	8001600 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f8cb 	bl	80006f2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000576:	2308      	movs	r3, #8
 8000578:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4618      	mov	r0, r3
 800058c:	f001 f88e 	bl	80016ac <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000596:	f000 f8ac 	bl	80006f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005a2:	2390      	movs	r3, #144	@ 0x90
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fc56 	bl	8001e64 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005be:	f000 f898 	bl	80006f2 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3758      	adds	r7, #88	@ 0x58
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 80005d2:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <MX_USART2_UART_Init+0x5c>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_USART2_UART_Init+0x58>)
 8000610:	f002 fb08 	bl	8002c24 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 f86a 	bl	80006f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000028 	.word	0x20000028
 8000628:	40004400 	.word	0x40004400

0800062c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_DMA_Init+0x48>)
 8000634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <MX_DMA_Init+0x48>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6493      	str	r3, [r2, #72]	@ 0x48
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <MX_DMA_Init+0x48>)
 8000640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2010      	movs	r0, #16
 8000650:	f000 fb3f 	bl	8000cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000654:	2010      	movs	r0, #16
 8000656:	f000 fb58 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2011      	movs	r0, #17
 8000660:	f000 fb37 	bl	8000cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000664:	2011      	movs	r0, #17
 8000666:	f000 fb50 	bl	8000d0a <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_GPIO_Init+0x5c>)
 800068e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000690:	4a10      	ldr	r2, [pc, #64]	@ (80006d4 <MX_GPIO_Init+0x5c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000698:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_GPIO_Init+0x5c>)
 800069a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ac:	f000 ff68 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80006b0:	2320      	movs	r3, #32
 80006b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c8:	f000 fdb0 	bl	800122c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */

//  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_SET);
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006e0:	2120      	movs	r1, #32
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f000 ff63 	bl	80015b0 <HAL_GPIO_TogglePin>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f6:	b672      	cpsid	i
}
 80006f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fa:	bf00      	nop
 80006fc:	e7fd      	b.n	80006fa <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800070a:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6613      	str	r3, [r2, #96]	@ 0x60
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000728:	6593      	str	r3, [r2, #88]	@ 0x58
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0ac      	sub	sp, #176	@ 0xb0
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2288      	movs	r2, #136	@ 0x88
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fcd1 	bl	8004110 <memset>
  if(huart->Instance==USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a4f      	ldr	r2, [pc, #316]	@ (80008b0 <HAL_UART_MspInit+0x168>)
 8000774:	4293      	cmp	r3, r2
 8000776:	f040 8096 	bne.w	80008a6 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800077a:	2302      	movs	r3, #2
 800077c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077e:	2300      	movs	r3, #0
 8000780:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fd90 	bl	80022ac <HAL_RCCEx_PeriphCLKConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000792:	f7ff ffae 	bl	80006f2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000796:	4b47      	ldr	r3, [pc, #284]	@ (80008b4 <HAL_UART_MspInit+0x16c>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079a:	4a46      	ldr	r2, [pc, #280]	@ (80008b4 <HAL_UART_MspInit+0x16c>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a2:	4b44      	ldr	r3, [pc, #272]	@ (80008b4 <HAL_UART_MspInit+0x16c>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b41      	ldr	r3, [pc, #260]	@ (80008b4 <HAL_UART_MspInit+0x16c>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a40      	ldr	r2, [pc, #256]	@ (80008b4 <HAL_UART_MspInit+0x16c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b3e      	ldr	r3, [pc, #248]	@ (80008b4 <HAL_UART_MspInit+0x16c>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007c6:	230c      	movs	r3, #12
 80007c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007de:	2307      	movs	r3, #7
 80007e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ee:	f000 fd1d 	bl	800122c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 80007f4:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <HAL_UART_MspInit+0x174>)
 80007f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80007f8:	4b2f      	ldr	r3, [pc, #188]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 8000800:	2210      	movs	r2, #16
 8000802:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000804:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800080a:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000810:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800081c:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000822:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000828:	4823      	ldr	r0, [pc, #140]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 800082a:	f000 fa89 	bl	8000d40 <HAL_DMA_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000834:	f7ff ff5d 	bl	80006f2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a1f      	ldr	r2, [pc, #124]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 800083c:	671a      	str	r2, [r3, #112]	@ 0x70
 800083e:	4a1e      	ldr	r2, [pc, #120]	@ (80008b8 <HAL_UART_MspInit+0x170>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 8000846:	4a1f      	ldr	r2, [pc, #124]	@ (80008c4 <HAL_UART_MspInit+0x17c>)
 8000848:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 800084c:	2202      	movs	r2, #2
 800084e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 800085e:	2280      	movs	r2, #128	@ 0x80
 8000860:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800087a:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 800087c:	f000 fa60 	bl	8000d40 <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000886:	f7ff ff34 	bl	80006f2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 800088e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000890:	4a0b      	ldr	r2, [pc, #44]	@ (80008c0 <HAL_UART_MspInit+0x178>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2026      	movs	r0, #38	@ 0x26
 800089c:	f000 fa19 	bl	8000cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008a0:	2026      	movs	r0, #38	@ 0x26
 80008a2:	f000 fa32 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	37b0      	adds	r7, #176	@ 0xb0
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	200000b0 	.word	0x200000b0
 80008bc:	40020080 	.word	0x40020080
 80008c0:	200000f8 	.word	0x200000f8
 80008c4:	4002006c 	.word	0x4002006c

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <NMI_Handler+0x4>

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <UsageFault_Handler+0x4>

080008f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 f8b9 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800092c:	4802      	ldr	r0, [pc, #8]	@ (8000938 <DMA1_Channel6_IRQHandler+0x10>)
 800092e:	f000 fb9e 	bl	800106e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000f8 	.word	0x200000f8

0800093c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000940:	4802      	ldr	r0, [pc, #8]	@ (800094c <DMA1_Channel7_IRQHandler+0x10>)
 8000942:	f000 fb94 	bl	800106e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000b0 	.word	0x200000b0

08000950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000954:	4802      	ldr	r0, [pc, #8]	@ (8000960 <USART2_IRQHandler+0x10>)
 8000956:	f002 f9ff 	bl	8002d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000028 	.word	0x20000028

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	@ (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800098c:	f7ff ffea 	bl	8000964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000992:	490d      	ldr	r1, [pc, #52]	@ (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000994:	4a0d      	ldr	r2, [pc, #52]	@ (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a8:	4c0a      	ldr	r4, [pc, #40]	@ (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b6:	f003 fbb3 	bl	8004120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ba:	f7ff fd99 	bl	80004f0 <main>

080009be <LoopForever>:

LoopForever:
    b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009cc:	080041d8 	.word	0x080041d8
  ldr r2, =_sbss
 80009d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d4:	20000158 	.word	0x20000158

080009d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_2_IRQHandler>
	...

080009dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_Init+0x3c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <HAL_Init+0x3c>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f2:	2003      	movs	r0, #3
 80009f4:	f000 f962 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f80f 	bl	8000a1c <HAL_InitTick>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	e001      	b.n	8000a0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a0a:	f7ff fe79 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <HAL_InitTick+0x6c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d023      	beq.n	8000a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HAL_InitTick+0x70>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <HAL_InitTick+0x6c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f96d 	bl	8000d26 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10f      	bne.n	8000a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d809      	bhi.n	8000a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f937 	bl	8000cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_InitTick+0x74>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	e007      	b.n	8000a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e004      	b.n	8000a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e001      	b.n	8000a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000154 	.word	0x20000154

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	@ (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000154 	.word	0x20000154

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffde 	bl	8000abc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	@ (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	@ (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	@ (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	@ 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	@ 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff29 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff3e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff31 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffa2 	bl	8000c78 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e098      	b.n	8000e84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b4d      	ldr	r3, [pc, #308]	@ (8000e90 <HAL_DMA_Init+0x150>)
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d80f      	bhi.n	8000d7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b4b      	ldr	r3, [pc, #300]	@ (8000e94 <HAL_DMA_Init+0x154>)
 8000d66:	4413      	add	r3, r2
 8000d68:	4a4b      	ldr	r2, [pc, #300]	@ (8000e98 <HAL_DMA_Init+0x158>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	009a      	lsls	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a48      	ldr	r2, [pc, #288]	@ (8000e9c <HAL_DMA_Init+0x15c>)
 8000d7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d7c:	e00e      	b.n	8000d9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b46      	ldr	r3, [pc, #280]	@ (8000ea0 <HAL_DMA_Init+0x160>)
 8000d86:	4413      	add	r3, r2
 8000d88:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <HAL_DMA_Init+0x158>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	009a      	lsls	r2, r3, #2
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a42      	ldr	r2, [pc, #264]	@ (8000ea4 <HAL_DMA_Init+0x164>)
 8000d9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2202      	movs	r2, #2
 8000da0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000db6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000df6:	d039      	beq.n	8000e6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfc:	4a27      	ldr	r2, [pc, #156]	@ (8000e9c <HAL_DMA_Init+0x15c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d11a      	bne.n	8000e38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e02:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <HAL_DMA_Init+0x168>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f003 031c 	and.w	r3, r3, #28
 8000e0e:	210f      	movs	r1, #15
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4924      	ldr	r1, [pc, #144]	@ (8000ea8 <HAL_DMA_Init+0x168>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <HAL_DMA_Init+0x168>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e28:	f003 031c 	and.w	r3, r3, #28
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	491d      	ldr	r1, [pc, #116]	@ (8000ea8 <HAL_DMA_Init+0x168>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
 8000e36:	e019      	b.n	8000e6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <HAL_DMA_Init+0x16c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e40:	f003 031c 	and.w	r3, r3, #28
 8000e44:	210f      	movs	r1, #15
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	4917      	ldr	r1, [pc, #92]	@ (8000eac <HAL_DMA_Init+0x16c>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <HAL_DMA_Init+0x16c>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6859      	ldr	r1, [r3, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5e:	f003 031c 	and.w	r3, r3, #28
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	4911      	ldr	r1, [pc, #68]	@ (8000eac <HAL_DMA_Init+0x16c>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40020407 	.word	0x40020407
 8000e94:	bffdfff8 	.word	0xbffdfff8
 8000e98:	cccccccd 	.word	0xcccccccd
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	bffdfbf8 	.word	0xbffdfbf8
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	400200a8 	.word	0x400200a8
 8000eac:	400204a8 	.word	0x400204a8

08000eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_DMA_Start_IT+0x20>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e04b      	b.n	8000f68 <HAL_DMA_Start_IT+0xb8>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d13a      	bne.n	8000f5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 f95f 	bl	80011cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 020e 	orr.w	r2, r2, #14
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e00f      	b.n	8000f48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0204 	bic.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 020a 	orr.w	r2, r2, #10
 8000f46:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e005      	b.n	8000f66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f62:	2302      	movs	r3, #2
 8000f64:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d008      	beq.n	8000f9a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e022      	b.n	8000fe0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 020e 	bic.w	r2, r2, #14
 8000fa8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	f003 021c 	and.w	r2, r3, #28
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d005      	beq.n	8001010 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2204      	movs	r2, #4
 8001008:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e029      	b.n	8001064 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 020e 	bic.w	r2, r2, #14
 800101e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001034:	f003 021c 	and.w	r2, r3, #28
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
    }
  }
  return status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f003 031c 	and.w	r3, r3, #28
 800108e:	2204      	movs	r2, #4
 8001090:	409a      	lsls	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d026      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x7a>
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d021      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d107      	bne.n	80010c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0204 	bic.w	r2, r2, #4
 80010c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f003 021c 	and.w	r2, r3, #28
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	2104      	movs	r1, #4
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d071      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010e6:	e06c      	b.n	80011c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ec:	f003 031c 	and.w	r3, r3, #28
 80010f0:	2202      	movs	r2, #2
 80010f2:	409a      	lsls	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d02e      	beq.n	800115a <HAL_DMA_IRQHandler+0xec>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d029      	beq.n	800115a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10b      	bne.n	800112c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 020a 	bic.w	r2, r2, #10
 8001122:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001130:	f003 021c 	and.w	r2, r3, #28
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	2102      	movs	r1, #2
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d038      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001158:	e033      	b.n	80011c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f003 031c 	and.w	r3, r3, #28
 8001162:	2208      	movs	r2, #8
 8001164:	409a      	lsls	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d02a      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x156>
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	2b00      	cmp	r3, #0
 8001176:	d025      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 020e 	bic.w	r2, r2, #14
 8001186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118c:	f003 021c 	and.w	r2, r3, #28
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
}
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f003 021c 	and.w	r2, r3, #28
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d108      	bne.n	8001210 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800120e:	e007      	b.n	8001220 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	60da      	str	r2, [r3, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123a:	e17f      	b.n	800153c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2101      	movs	r1, #1
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8171 	beq.w	8001536 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d005      	beq.n	800126c <HAL_GPIO_Init+0x40>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d130      	bne.n	80012ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a2:	2201      	movs	r2, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f003 0201 	and.w	r2, r3, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d118      	bne.n	800130c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	6939      	ldr	r1, [r7, #16]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80ac 	beq.w	8001536 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4b5f      	ldr	r3, [pc, #380]	@ (800155c <HAL_GPIO_Init+0x330>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e2:	4a5e      	ldr	r2, [pc, #376]	@ (800155c <HAL_GPIO_Init+0x330>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <HAL_GPIO_Init+0x330>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001560 <HAL_GPIO_Init+0x334>)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001420:	d025      	beq.n	800146e <HAL_GPIO_Init+0x242>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4f      	ldr	r2, [pc, #316]	@ (8001564 <HAL_GPIO_Init+0x338>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01f      	beq.n	800146a <HAL_GPIO_Init+0x23e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4e      	ldr	r2, [pc, #312]	@ (8001568 <HAL_GPIO_Init+0x33c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x23a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4d      	ldr	r2, [pc, #308]	@ (800156c <HAL_GPIO_Init+0x340>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x236>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4c      	ldr	r2, [pc, #304]	@ (8001570 <HAL_GPIO_Init+0x344>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x232>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4b      	ldr	r2, [pc, #300]	@ (8001574 <HAL_GPIO_Init+0x348>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x22e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4a      	ldr	r2, [pc, #296]	@ (8001578 <HAL_GPIO_Init+0x34c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x22a>
 8001452:	2306      	movs	r3, #6
 8001454:	e00c      	b.n	8001470 <HAL_GPIO_Init+0x244>
 8001456:	2307      	movs	r3, #7
 8001458:	e00a      	b.n	8001470 <HAL_GPIO_Init+0x244>
 800145a:	2305      	movs	r3, #5
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x244>
 800145e:	2304      	movs	r3, #4
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x244>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x244>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x244>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x244>
 800146e:	2300      	movs	r3, #0
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001480:	4937      	ldr	r1, [pc, #220]	@ (8001560 <HAL_GPIO_Init+0x334>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148e:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <HAL_GPIO_Init+0x350>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b2:	4a32      	ldr	r2, [pc, #200]	@ (800157c <HAL_GPIO_Init+0x350>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014b8:	4b30      	ldr	r3, [pc, #192]	@ (800157c <HAL_GPIO_Init+0x350>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014dc:	4a27      	ldr	r2, [pc, #156]	@ (800157c <HAL_GPIO_Init+0x350>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014e2:	4b26      	ldr	r3, [pc, #152]	@ (800157c <HAL_GPIO_Init+0x350>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001506:	4a1d      	ldr	r2, [pc, #116]	@ (800157c <HAL_GPIO_Init+0x350>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_GPIO_Init+0x350>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <HAL_GPIO_Init+0x350>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa22 f303 	lsr.w	r3, r2, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	f47f ae78 	bne.w	800123c <HAL_GPIO_Init+0x10>
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	48000400 	.word	0x48000400
 8001568:	48000800 	.word	0x48000800
 800156c:	48000c00 	.word	0x48000c00
 8001570:	48001000 	.word	0x48001000
 8001574:	48001400 	.word	0x48001400
 8001578:	48001800 	.word	0x48001800
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43d9      	mvns	r1, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	400b      	ands	r3, r1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <HAL_PWREx_GetVoltageRange+0x18>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40007000 	.word	0x40007000

08001600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800160e:	d130      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800161c:	d038      	beq.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001626:	4a1e      	ldr	r2, [pc, #120]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001628:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2232      	movs	r2, #50	@ 0x32
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	4a1b      	ldr	r2, [pc, #108]	@ (80016a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0c9b      	lsrs	r3, r3, #18
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001644:	e002      	b.n	800164c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3b01      	subs	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001658:	d102      	bne.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x60>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f2      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800166c:	d110      	bne.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e00f      	b.n	8001692 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800167e:	d007      	beq.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001688:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800168e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40007000 	.word	0x40007000
 80016a4:	20000000 	.word	0x20000000
 80016a8:	431bde83 	.word	0x431bde83

080016ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e3ca      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016be:	4b97      	ldr	r3, [pc, #604]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c8:	4b94      	ldr	r3, [pc, #592]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80e4 	beq.w	80018a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_RCC_OscConfig+0x4a>
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	f040 808b 	bne.w	8001804 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	f040 8087 	bne.w	8001804 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f6:	4b89      	ldr	r3, [pc, #548]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x62>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e3a2      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1a      	ldr	r2, [r3, #32]
 8001712:	4b82      	ldr	r3, [pc, #520]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d004      	beq.n	8001728 <HAL_RCC_OscConfig+0x7c>
 800171e:	4b7f      	ldr	r3, [pc, #508]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001726:	e005      	b.n	8001734 <HAL_RCC_OscConfig+0x88>
 8001728:	4b7c      	ldr	r3, [pc, #496]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001734:	4293      	cmp	r3, r2
 8001736:	d223      	bcs.n	8001780 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fd55 	bl	80021ec <RCC_SetFlashLatencyFromMSIRange>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e383      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174c:	4b73      	ldr	r3, [pc, #460]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a72      	ldr	r2, [pc, #456]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b70      	ldr	r3, [pc, #448]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	496d      	ldr	r1, [pc, #436]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176a:	4b6c      	ldr	r3, [pc, #432]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	4968      	ldr	r1, [pc, #416]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
 800177e:	e025      	b.n	80017cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001780:	4b66      	ldr	r3, [pc, #408]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a65      	ldr	r2, [pc, #404]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b63      	ldr	r3, [pc, #396]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4960      	ldr	r1, [pc, #384]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179e:	4b5f      	ldr	r3, [pc, #380]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	495b      	ldr	r1, [pc, #364]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fd15 	bl	80021ec <RCC_SetFlashLatencyFromMSIRange>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e343      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017cc:	f000 fc4a 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b52      	ldr	r3, [pc, #328]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	4950      	ldr	r1, [pc, #320]	@ (8001920 <HAL_RCC_OscConfig+0x274>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001924 <HAL_RCC_OscConfig+0x278>)
 80017ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f913 	bl	8000a1c <HAL_InitTick>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d052      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	e327      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d032      	beq.n	8001872 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800180c:	4b43      	ldr	r3, [pc, #268]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a42      	ldr	r2, [pc, #264]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001818:	f7ff f950 	bl	8000abc <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001820:	f7ff f94c 	bl	8000abc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e310      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001832:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800183e:	4b37      	ldr	r3, [pc, #220]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a36      	ldr	r2, [pc, #216]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b34      	ldr	r3, [pc, #208]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4931      	ldr	r1, [pc, #196]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800185c:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	492c      	ldr	r1, [pc, #176]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	e01a      	b.n	80018a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001872:	4b2a      	ldr	r3, [pc, #168]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a29      	ldr	r2, [pc, #164]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800187e:	f7ff f91d 	bl	8000abc <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001886:	f7ff f919 	bl	8000abc <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e2dd      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001898:	4b20      	ldr	r3, [pc, #128]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x1da>
 80018a4:	e000      	b.n	80018a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d074      	beq.n	800199e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d005      	beq.n	80018c6 <HAL_RCC_OscConfig+0x21a>
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	d10e      	bne.n	80018de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d10b      	bne.n	80018de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d064      	beq.n	800199c <HAL_RCC_OscConfig+0x2f0>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d160      	bne.n	800199c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e2ba      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x24a>
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e026      	b.n	8001944 <HAL_RCC_OscConfig+0x298>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018fe:	d115      	bne.n	800192c <HAL_RCC_OscConfig+0x280>
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a05      	ldr	r2, [pc, #20]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001906:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a02      	ldr	r2, [pc, #8]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e014      	b.n	8001944 <HAL_RCC_OscConfig+0x298>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	08004180 	.word	0x08004180
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004
 800192c:	4ba0      	ldr	r3, [pc, #640]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a9f      	ldr	r2, [pc, #636]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b9d      	ldr	r3, [pc, #628]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a9c      	ldr	r2, [pc, #624]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f8b6 	bl	8000abc <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff f8b2 	bl	8000abc <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	@ 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e276      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001966:	4b92      	ldr	r3, [pc, #584]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x2a8>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f8a2 	bl	8000abc <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff f89e 	bl	8000abc <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	@ 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e262      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198e:	4b88      	ldr	r3, [pc, #544]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x2d0>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d060      	beq.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_OscConfig+0x310>
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d119      	bne.n	80019ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d116      	bne.n	80019ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_OscConfig+0x328>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e23f      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b76      	ldr	r3, [pc, #472]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	4973      	ldr	r1, [pc, #460]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e8:	e040      	b.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d023      	beq.n	8001a3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f2:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f85d 	bl	8000abc <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff f859 	bl	8000abc <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e21d      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a18:	4b65      	ldr	r3, [pc, #404]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b62      	ldr	r3, [pc, #392]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	495f      	ldr	r1, [pc, #380]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
 8001a38:	e018      	b.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f839 	bl	8000abc <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f835 	bl	8000abc <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1f9      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a60:	4b53      	ldr	r3, [pc, #332]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d03c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01c      	beq.n	8001aba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a80:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a86:	4a4a      	ldr	r2, [pc, #296]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f814 	bl	8000abc <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff f810 	bl	8000abc <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1d4      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aaa:	4b41      	ldr	r3, [pc, #260]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ef      	beq.n	8001a98 <HAL_RCC_OscConfig+0x3ec>
 8001ab8:	e01b      	b.n	8001af2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac0:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7fe fff7 	bl	8000abc <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7fe fff3 	bl	8000abc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e1b7      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae4:	4b32      	ldr	r3, [pc, #200]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ef      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80a6 	beq.w	8001c4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b04:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10d      	bne.n	8001b2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <HAL_RCC_OscConfig+0x508>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d118      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <HAL_RCC_OscConfig+0x508>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb4 <HAL_RCC_OscConfig+0x508>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b44:	f7fe ffba 	bl	8000abc <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4c:	f7fe ffb6 	bl	8000abc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e17a      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_RCC_OscConfig+0x508>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4d8>
 8001b72:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b82:	e029      	b.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d115      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x50c>
 8001b8c:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b92:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba2:	4a03      	ldr	r2, [pc, #12]	@ (8001bb0 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bac:	e014      	b.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	4b9c      	ldr	r3, [pc, #624]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbe:	4a9b      	ldr	r2, [pc, #620]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bc8:	4b98      	ldr	r3, [pc, #608]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bce:	4a97      	ldr	r2, [pc, #604]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d016      	beq.n	8001c0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7fe ff6c 	bl	8000abc <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7fe ff68 	bl	8000abc <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e12a      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfe:	4b8b      	ldr	r3, [pc, #556]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ed      	beq.n	8001be8 <HAL_RCC_OscConfig+0x53c>
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7fe ff55 	bl	8000abc <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7fe ff51 	bl	8000abc <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e113      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c2c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ed      	bne.n	8001c16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b7a      	ldr	r3, [pc, #488]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c44:	4a79      	ldr	r2, [pc, #484]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80fe 	beq.w	8001e52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	f040 80d0 	bne.w	8001e00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c60:	4b72      	ldr	r3, [pc, #456]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d130      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d127      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d11f      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ca0:	2a07      	cmp	r2, #7
 8001ca2:	bf14      	ite	ne
 8001ca4:	2201      	movne	r2, #1
 8001ca6:	2200      	moveq	r2, #0
 8001ca8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d113      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d06e      	beq.n	8001db4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b0c      	cmp	r3, #12
 8001cda:	d069      	beq.n	8001db0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cdc:	4b53      	ldr	r3, [pc, #332]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ce8:	4b50      	ldr	r3, [pc, #320]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0ad      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d04:	f7fe feda 	bl	8000abc <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7fe fed6 	bl	8000abc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e09a      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1e:	4b43      	ldr	r3, [pc, #268]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2a:	4b40      	ldr	r3, [pc, #256]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	4b40      	ldr	r3, [pc, #256]	@ (8001e30 <HAL_RCC_OscConfig+0x784>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d3a:	3a01      	subs	r2, #1
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d44:	0212      	lsls	r2, r2, #8
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d4c:	0852      	lsrs	r2, r2, #1
 8001d4e:	3a01      	subs	r2, #1
 8001d50:	0552      	lsls	r2, r2, #21
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d58:	0852      	lsrs	r2, r2, #1
 8001d5a:	3a01      	subs	r2, #1
 8001d5c:	0652      	lsls	r2, r2, #25
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d64:	0912      	lsrs	r2, r2, #4
 8001d66:	0452      	lsls	r2, r2, #17
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	4930      	ldr	r1, [pc, #192]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d70:	4b2e      	ldr	r3, [pc, #184]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2d      	ldr	r2, [pc, #180]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a2a      	ldr	r2, [pc, #168]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d88:	f7fe fe98 	bl	8000abc <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7fe fe94 	bl	8000abc <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e058      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da2:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dae:	e050      	b.n	8001e52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e04f      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d148      	bne.n	8001e52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a16      	ldr	r2, [pc, #88]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dd8:	f7fe fe70 	bl	8000abc <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7fe fe6c 	bl	8000abc <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e030      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x734>
 8001dfe:	e028      	b.n	8001e52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d023      	beq.n	8001e4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <HAL_RCC_OscConfig+0x780>)
 8001e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe fe53 	bl	8000abc <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	e00c      	b.n	8001e34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe fe4f 	bl	8000abc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d905      	bls.n	8001e34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e013      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_RCC_OscConfig+0x7b0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1ec      	bne.n	8001e1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_RCC_OscConfig+0x7b0>)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	4905      	ldr	r1, [pc, #20]	@ (8001e5c <HAL_RCC_OscConfig+0x7b0>)
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_RCC_OscConfig+0x7b4>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60cb      	str	r3, [r1, #12]
 8001e4c:	e001      	b.n	8001e52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	feeefffc 	.word	0xfeeefffc

08001e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0e7      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b75      	ldr	r3, [pc, #468]	@ (8002050 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b72      	ldr	r3, [pc, #456]	@ (8002050 <HAL_RCC_ClockConfig+0x1ec>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	4970      	ldr	r1, [pc, #448]	@ (8002050 <HAL_RCC_ClockConfig+0x1ec>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b6e      	ldr	r3, [pc, #440]	@ (8002050 <HAL_RCC_ClockConfig+0x1ec>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0cf      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d010      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d908      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b63      	ldr	r3, [pc, #396]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4960      	ldr	r1, [pc, #384]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d04c      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eea:	4b5a      	ldr	r3, [pc, #360]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d121      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0a6      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f02:	4b54      	ldr	r3, [pc, #336]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d115      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e09a      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e08e      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e086      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b46      	ldr	r3, [pc, #280]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4943      	ldr	r1, [pc, #268]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fdb6 	bl	8000abc <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7fe fdb2 	bl	8000abc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e06e      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d010      	beq.n	8001faa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b31      	ldr	r3, [pc, #196]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d208      	bcs.n	8001faa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b2e      	ldr	r3, [pc, #184]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	492b      	ldr	r1, [pc, #172]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001faa:	4b29      	ldr	r3, [pc, #164]	@ (8002050 <HAL_RCC_ClockConfig+0x1ec>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d210      	bcs.n	8001fda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb8:	4b25      	ldr	r3, [pc, #148]	@ (8002050 <HAL_RCC_ClockConfig+0x1ec>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 0207 	bic.w	r2, r3, #7
 8001fc0:	4923      	ldr	r1, [pc, #140]	@ (8002050 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc8:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <HAL_RCC_ClockConfig+0x1ec>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e036      	b.n	8002048 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4918      	ldr	r1, [pc, #96]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4910      	ldr	r1, [pc, #64]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002018:	f000 f824 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	490b      	ldr	r1, [pc, #44]	@ (8002058 <HAL_RCC_ClockConfig+0x1f4>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
 8002034:	4a09      	ldr	r2, [pc, #36]	@ (800205c <HAL_RCC_ClockConfig+0x1f8>)
 8002036:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_RCC_ClockConfig+0x1fc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fced 	bl	8000a1c <HAL_InitTick>
 8002042:	4603      	mov	r3, r0
 8002044:	72fb      	strb	r3, [r7, #11]

  return status;
 8002046:	7afb      	ldrb	r3, [r7, #11]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40022000 	.word	0x40022000
 8002054:	40021000 	.word	0x40021000
 8002058:	08004180 	.word	0x08004180
 800205c:	20000000 	.word	0x20000000
 8002060:	20000004 	.word	0x20000004

08002064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002072:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207c:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x34>
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d121      	bne.n	80020d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d11e      	bne.n	80020d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002098:	4b34      	ldr	r3, [pc, #208]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020a4:	4b31      	ldr	r3, [pc, #196]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b4:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020dc:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x110>)
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	e004      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020e8:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x114>)
 80020ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d134      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020f2:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0xa6>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d003      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0xac>
 8002108:	e005      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x110>)
 800210c:	617b      	str	r3, [r7, #20]
      break;
 800210e:	e005      	b.n	800211c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x114>)
 8002112:	617b      	str	r3, [r7, #20]
      break;
 8002114:	e002      	b.n	800211c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	617b      	str	r3, [r7, #20]
      break;
 800211a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	3301      	adds	r3, #1
 8002128:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	fb03 f202 	mul.w	r2, r3, r2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	0e5b      	lsrs	r3, r3, #25
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	3301      	adds	r3, #1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800215c:	69bb      	ldr	r3, [r7, #24]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	08004198 	.word	0x08004198
 8002174:	00f42400 	.word	0x00f42400
 8002178:	007a1200 	.word	0x007a1200

0800217c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <HAL_RCC_GetHCLKFreq+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000000 	.word	0x20000000

08002194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002198:	f7ff fff0 	bl	800217c <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4904      	ldr	r1, [pc, #16]	@ (80021bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08004190 	.word	0x08004190

080021c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021c4:	f7ff ffda 	bl	800217c <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	0adb      	lsrs	r3, r3, #11
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4904      	ldr	r1, [pc, #16]	@ (80021e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08004190 	.word	0x08004190

080021ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021f8:	4b2a      	ldr	r3, [pc, #168]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002204:	f7ff f9ee 	bl	80015e4 <HAL_PWREx_GetVoltageRange>
 8002208:	6178      	str	r0, [r7, #20]
 800220a:	e014      	b.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	4a24      	ldr	r2, [pc, #144]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002216:	6593      	str	r3, [r2, #88]	@ 0x58
 8002218:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002224:	f7ff f9de 	bl	80015e4 <HAL_PWREx_GetVoltageRange>
 8002228:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800223c:	d10b      	bne.n	8002256 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b80      	cmp	r3, #128	@ 0x80
 8002242:	d919      	bls.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2ba0      	cmp	r3, #160	@ 0xa0
 8002248:	d902      	bls.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800224a:	2302      	movs	r3, #2
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e013      	b.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002250:	2301      	movs	r3, #1
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	e010      	b.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b80      	cmp	r3, #128	@ 0x80
 800225a:	d902      	bls.n	8002262 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800225c:	2303      	movs	r3, #3
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	e00a      	b.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b80      	cmp	r3, #128	@ 0x80
 8002266:	d102      	bne.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002268:	2302      	movs	r3, #2
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	e004      	b.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b70      	cmp	r3, #112	@ 0x70
 8002272:	d101      	bne.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002274:	2301      	movs	r3, #1
 8002276:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 0207 	bic.w	r2, r3, #7
 8002280:	4909      	ldr	r1, [pc, #36]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002288:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40022000 	.word	0x40022000

080022ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b4:	2300      	movs	r3, #0
 80022b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b8:	2300      	movs	r3, #0
 80022ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d041      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022d0:	d02a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022d6:	d824      	bhi.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022dc:	d008      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022e2:	d81e      	bhi.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ec:	d010      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ee:	e018      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022f0:	4b86      	ldr	r3, [pc, #536]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a85      	ldr	r2, [pc, #532]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022fc:	e015      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fabb 	bl	8002880 <RCCEx_PLLSAI1_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800230e:	e00c      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3320      	adds	r3, #32
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fba6 	bl	8002a68 <RCCEx_PLLSAI2_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002320:	e003      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	74fb      	strb	r3, [r7, #19]
      break;
 8002326:	e000      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002330:	4b76      	ldr	r3, [pc, #472]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800233e:	4973      	ldr	r1, [pc, #460]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002346:	e001      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d041      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800235c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002360:	d02a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002362:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002366:	d824      	bhi.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002368:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800236c:	d008      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800236e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002372:	d81e      	bhi.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800237c:	d010      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800237e:	e018      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002380:	4b62      	ldr	r3, [pc, #392]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a61      	ldr	r2, [pc, #388]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800238c:	e015      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fa73 	bl	8002880 <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239e:	e00c      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3320      	adds	r3, #32
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fb5e 	bl	8002a68 <RCCEx_PLLSAI2_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b0:	e003      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	74fb      	strb	r3, [r7, #19]
      break;
 80023b6:	e000      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c0:	4b52      	ldr	r3, [pc, #328]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023ce:	494f      	ldr	r1, [pc, #316]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023d6:	e001      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a0 	beq.w	800252a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ee:	4b47      	ldr	r3, [pc, #284]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00d      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002404:	4b41      	ldr	r3, [pc, #260]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002408:	4a40      	ldr	r2, [pc, #256]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002410:	4b3e      	ldr	r3, [pc, #248]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241c:	2301      	movs	r3, #1
 800241e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4b3b      	ldr	r3, [pc, #236]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a3a      	ldr	r2, [pc, #232]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800242c:	f7fe fb46 	bl	8000abc <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002432:	e009      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe fb42 	bl	8000abc <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d902      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	74fb      	strb	r3, [r7, #19]
        break;
 8002446:	e005      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002448:	4b31      	ldr	r3, [pc, #196]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ef      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d15c      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800245a:	4b2c      	ldr	r3, [pc, #176]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002460:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002464:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01f      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	d019      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002484:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248a:	4a20      	ldr	r2, [pc, #128]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002494:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249a:	4a1c      	ldr	r2, [pc, #112]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a4:	4a19      	ldr	r2, [pc, #100]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe fb01 	bl	8000abc <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024bc:	e00b      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fafd 	bl	8000abc <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d902      	bls.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	74fb      	strb	r3, [r7, #19]
            break;
 80024d4:	e006      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ec      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ea:	4b08      	ldr	r3, [pc, #32]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024fa:	4904      	ldr	r1, [pc, #16]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002502:	e009      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
 8002508:	e006      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002518:	7c7b      	ldrb	r3, [r7, #17]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4b9e      	ldr	r3, [pc, #632]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	4a9d      	ldr	r2, [pc, #628]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002536:	4b98      	ldr	r3, [pc, #608]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253c:	f023 0203 	bic.w	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002544:	4994      	ldr	r1, [pc, #592]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002558:	4b8f      	ldr	r3, [pc, #572]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255e:	f023 020c 	bic.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002566:	498c      	ldr	r1, [pc, #560]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800257a:	4b87      	ldr	r3, [pc, #540]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002580:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	4983      	ldr	r1, [pc, #524]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800259c:	4b7e      	ldr	r3, [pc, #504]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	497b      	ldr	r1, [pc, #492]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025be:	4b76      	ldr	r3, [pc, #472]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025cc:	4972      	ldr	r1, [pc, #456]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	496a      	ldr	r1, [pc, #424]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002602:	4b65      	ldr	r3, [pc, #404]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002608:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	4961      	ldr	r1, [pc, #388]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002624:	4b5c      	ldr	r3, [pc, #368]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002632:	4959      	ldr	r1, [pc, #356]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002646:	4b54      	ldr	r3, [pc, #336]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002654:	4950      	ldr	r1, [pc, #320]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002668:	4b4b      	ldr	r3, [pc, #300]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	4948      	ldr	r1, [pc, #288]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800268a:	4b43      	ldr	r3, [pc, #268]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002690:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	493f      	ldr	r1, [pc, #252]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d028      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ba:	4937      	ldr	r1, [pc, #220]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026ca:	d106      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026cc:	4b32      	ldr	r3, [pc, #200]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a31      	ldr	r2, [pc, #196]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026d6:	60d3      	str	r3, [r2, #12]
 80026d8:	e011      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026e2:	d10c      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f8c8 	bl	8002880 <RCCEx_PLLSAI1_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d028      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800270a:	4b23      	ldr	r3, [pc, #140]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002718:	491f      	ldr	r1, [pc, #124]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002728:	d106      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272a:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4a1a      	ldr	r2, [pc, #104]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002734:	60d3      	str	r3, [r2, #12]
 8002736:	e011      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002740:	d10c      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f899 	bl	8002880 <RCCEx_PLLSAI1_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02b      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002776:	4908      	ldr	r1, [pc, #32]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002786:	d109      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b03      	ldr	r3, [pc, #12]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a02      	ldr	r2, [pc, #8]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
 8002794:	e014      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f867 	bl	8002880 <RCCEx_PLLSAI1_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02f      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027da:	4928      	ldr	r1, [pc, #160]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027ea:	d10d      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	2102      	movs	r1, #2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f844 	bl	8002880 <RCCEx_PLLSAI1_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d014      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	74bb      	strb	r3, [r7, #18]
 8002806:	e011      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800280c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3320      	adds	r3, #32
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f925 	bl	8002a68 <RCCEx_PLLSAI2_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002838:	4b10      	ldr	r3, [pc, #64]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002846:	490d      	ldr	r1, [pc, #52]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800285a:	4b08      	ldr	r3, [pc, #32]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002860:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800286a:	4904      	ldr	r1, [pc, #16]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002872:	7cbb      	ldrb	r3, [r7, #18]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000

08002880 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288e:	4b75      	ldr	r3, [pc, #468]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d018      	beq.n	80028cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800289a:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d10d      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
       ||
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
       ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d047      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e044      	b.n	8002956 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d018      	beq.n	8002906 <RCCEx_PLLSAI1_Config+0x86>
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d825      	bhi.n	8002924 <RCCEx_PLLSAI1_Config+0xa4>
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d002      	beq.n	80028e2 <RCCEx_PLLSAI1_Config+0x62>
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d009      	beq.n	80028f4 <RCCEx_PLLSAI1_Config+0x74>
 80028e0:	e020      	b.n	8002924 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028e2:	4b60      	ldr	r3, [pc, #384]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11d      	bne.n	800292a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f2:	e01a      	b.n	800292a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e013      	b.n	800292e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002906:	4b57      	ldr	r3, [pc, #348]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002912:	4b54      	ldr	r3, [pc, #336]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002922:	e006      	b.n	8002932 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      break;
 8002928:	e004      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002932:	bf00      	nop
    }

    if(status == HAL_OK)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10d      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800293a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	430b      	orrs	r3, r1
 8002950:	4944      	ldr	r1, [pc, #272]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d17d      	bne.n	8002a58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800295c:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a40      	ldr	r2, [pc, #256]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002968:	f7fe f8a8 	bl	8000abc <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800296e:	e009      	b.n	8002984 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002970:	f7fe f8a4 	bl	8000abc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d902      	bls.n	8002984 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	73fb      	strb	r3, [r7, #15]
        break;
 8002982:	e005      	b.n	8002990 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002984:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ef      	bne.n	8002970 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d160      	bne.n	8002a58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d111      	bne.n	80029c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800299c:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6892      	ldr	r2, [r2, #8]
 80029ac:	0211      	lsls	r1, r2, #8
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	0912      	lsrs	r2, r2, #4
 80029b4:	0452      	lsls	r2, r2, #17
 80029b6:	430a      	orrs	r2, r1
 80029b8:	492a      	ldr	r1, [pc, #168]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	610b      	str	r3, [r1, #16]
 80029be:	e027      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d112      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c6:	4b27      	ldr	r3, [pc, #156]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	0211      	lsls	r1, r2, #8
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6912      	ldr	r2, [r2, #16]
 80029dc:	0852      	lsrs	r2, r2, #1
 80029de:	3a01      	subs	r2, #1
 80029e0:	0552      	lsls	r2, r2, #21
 80029e2:	430a      	orrs	r2, r1
 80029e4:	491f      	ldr	r1, [pc, #124]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	610b      	str	r3, [r1, #16]
 80029ea:	e011      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6892      	ldr	r2, [r2, #8]
 80029fc:	0211      	lsls	r1, r2, #8
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6952      	ldr	r2, [r2, #20]
 8002a02:	0852      	lsrs	r2, r2, #1
 8002a04:	3a01      	subs	r2, #1
 8002a06:	0652      	lsls	r2, r2, #25
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	4916      	ldr	r1, [pc, #88]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe f84e 	bl	8000abc <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a22:	e009      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a24:	f7fe f84a 	bl	8000abc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d902      	bls.n	8002a38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	73fb      	strb	r3, [r7, #15]
          break;
 8002a36:	e005      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a38:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ef      	beq.n	8002a24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a4a:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	4904      	ldr	r1, [pc, #16]	@ (8002a64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000

08002a68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a76:	4b6a      	ldr	r3, [pc, #424]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d018      	beq.n	8002ab4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a82:	4b67      	ldr	r3, [pc, #412]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0203 	and.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10d      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
       ||
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a9a:	4b61      	ldr	r3, [pc, #388]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d047      	beq.n	8002b3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	e044      	b.n	8002b3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d018      	beq.n	8002aee <RCCEx_PLLSAI2_Config+0x86>
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d825      	bhi.n	8002b0c <RCCEx_PLLSAI2_Config+0xa4>
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d002      	beq.n	8002aca <RCCEx_PLLSAI2_Config+0x62>
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d009      	beq.n	8002adc <RCCEx_PLLSAI2_Config+0x74>
 8002ac8:	e020      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aca:	4b55      	ldr	r3, [pc, #340]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11d      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ada:	e01a      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002adc:	4b50      	ldr	r3, [pc, #320]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d116      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aec:	e013      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aee:	4b4c      	ldr	r3, [pc, #304]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002afa:	4b49      	ldr	r3, [pc, #292]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b0a:	e006      	b.n	8002b1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e004      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b22:	4b3f      	ldr	r3, [pc, #252]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	430b      	orrs	r3, r1
 8002b38:	4939      	ldr	r1, [pc, #228]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d167      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b44:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a35      	ldr	r2, [pc, #212]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b50:	f7fd ffb4 	bl	8000abc <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b56:	e009      	b.n	8002b6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b58:	f7fd ffb0 	bl	8000abc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d902      	bls.n	8002b6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	73fb      	strb	r3, [r7, #15]
        break;
 8002b6a:	e005      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ef      	bne.n	8002b58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d14a      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b84:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6892      	ldr	r2, [r2, #8]
 8002b94:	0211      	lsls	r1, r2, #8
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68d2      	ldr	r2, [r2, #12]
 8002b9a:	0912      	lsrs	r2, r2, #4
 8002b9c:	0452      	lsls	r2, r2, #17
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	491f      	ldr	r1, [pc, #124]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	614b      	str	r3, [r1, #20]
 8002ba6:	e011      	b.n	8002bcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6892      	ldr	r2, [r2, #8]
 8002bb8:	0211      	lsls	r1, r2, #8
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6912      	ldr	r2, [r2, #16]
 8002bbe:	0852      	lsrs	r2, r2, #1
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	0652      	lsls	r2, r2, #25
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	4916      	ldr	r1, [pc, #88]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bcc:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a13      	ldr	r2, [pc, #76]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fd ff70 	bl	8000abc <HAL_GetTick>
 8002bdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bde:	e009      	b.n	8002bf4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002be0:	f7fd ff6c 	bl	8000abc <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	73fb      	strb	r3, [r7, #15]
          break;
 8002bf2:	e005      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ef      	beq.n	8002be0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c06:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	4904      	ldr	r1, [pc, #16]	@ (8002c20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000

08002c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e040      	b.n	8002cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd fd7e 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	@ 0x24
 8002c50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fe36 	bl	80038dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fb7b 	bl	800336c <UART_SetConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e01b      	b.n	8002cb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 feb5 	bl	8003a20 <UART_CheckIdleState>
 8002cb6:	4603      	mov	r3, r0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	@ 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d137      	bne.n	8002d48 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_UART_Receive_DMA+0x24>
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e030      	b.n	8002d4a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <HAL_UART_Receive_DMA+0x94>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d01f      	beq.n	8002d38 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d018      	beq.n	8002d38 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	613b      	str	r3, [r7, #16]
   return(result);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	69f9      	ldr	r1, [r7, #28]
 8002d2a:	6a3a      	ldr	r2, [r7, #32]
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e6      	bne.n	8002d06 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 ff7e 	bl	8003c40 <UART_Start_Receive_DMA>
 8002d44:	4603      	mov	r3, r0
 8002d46:	e000      	b.n	8002d4a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3728      	adds	r7, #40	@ 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40008000 	.word	0x40008000

08002d58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002d82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002d86:	4013      	ands	r3, r2
 8002d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002d8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d115      	bne.n	8002dc0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 82ae 	beq.w	8003312 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
      }
      return;
 8002dbe:	e2a8      	b.n	8003312 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8117 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002dda:	4b85      	ldr	r3, [pc, #532]	@ (8002ff0 <HAL_UART_IRQHandler+0x298>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 810a 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d011      	beq.n	8002e14 <HAL_UART_IRQHandler+0xbc>
 8002df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d011      	beq.n	8002e44 <HAL_UART_IRQHandler+0xec>
 8002e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00b      	beq.n	8002e44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2202      	movs	r2, #2
 8002e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d011      	beq.n	8002e74 <HAL_UART_IRQHandler+0x11c>
 8002e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00b      	beq.n	8002e74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2204      	movs	r2, #4
 8002e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e6a:	f043 0202 	orr.w	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d017      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea6:	f043 0208 	orr.w	r2, r3, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d012      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x18a>
 8002ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8214 	beq.w	8003316 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2a:	2b40      	cmp	r3, #64	@ 0x40
 8002f2c:	d005      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d04f      	beq.n	8002fda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 ff46 	bl	8003dcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d141      	bne.n	8002fd2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3308      	adds	r3, #8
 8002f54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3308      	adds	r3, #8
 8002f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1d9      	bne.n	8002f4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d013      	beq.n	8002fca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa6:	4a13      	ldr	r2, [pc, #76]	@ (8002ff4 <HAL_UART_IRQHandler+0x29c>)
 8002fa8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe f81c 	bl	8000fec <HAL_DMA_Abort_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d017      	beq.n	8002fea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	e00f      	b.n	8002fea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f9b8 	bl	8003340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	e00b      	b.n	8002fea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f9b4 	bl	8003340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	e007      	b.n	8002fea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f9b0 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002fe8:	e195      	b.n	8003316 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fea:	bf00      	nop
    return;
 8002fec:	e193      	b.n	8003316 <HAL_UART_IRQHandler+0x5be>
 8002fee:	bf00      	nop
 8002ff0:	04000120 	.word	0x04000120
 8002ff4:	0800407d 	.word	0x0800407d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	f040 814e 	bne.w	800329e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8147 	beq.w	800329e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8140 	beq.w	800329e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2210      	movs	r2, #16
 8003024:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	f040 80b8 	bne.w	80031a6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003042:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8167 	beq.w	800331a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003056:	429a      	cmp	r2, r3
 8003058:	f080 815f 	bcs.w	800331a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003062:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 8086 	bne.w	8003184 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800308c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1da      	bne.n	8003078 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3308      	adds	r3, #8
 80030e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e1      	bne.n	80030c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800310e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3308      	adds	r3, #8
 800311e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003122:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003124:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003128:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e3      	bne.n	80030fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003154:	f023 0310 	bic.w	r3, r3, #16
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003166:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003168:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800316c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e4      	bne.n	8003144 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fef6 	bl	8000f70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003196:	b29b      	uxth	r3, r3
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	b29b      	uxth	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8d8 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031a4:	e0b9      	b.n	800331a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80ab 	beq.w	800331e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80031c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a6 	beq.w	800331e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e4      	bne.n	80031d2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3308      	adds	r3, #8
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	e853 3f00 	ldrex	r3, [r3]
 8003216:	623b      	str	r3, [r7, #32]
   return(result);
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800322c:	633a      	str	r2, [r7, #48]	@ 0x30
 800322e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e3      	bne.n	8003208 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	60fb      	str	r3, [r7, #12]
   return(result);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f023 0310 	bic.w	r3, r3, #16
 8003268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	617b      	str	r3, [r7, #20]
   return(result);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e4      	bne.n	8003254 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f85c 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800329c:	e03f      	b.n	800331e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00e      	beq.n	80032c8 <HAL_UART_IRQHandler+0x570>
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80032be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 ff1b 	bl	80040fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032c6:	e02d      	b.n	8003324 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01c      	beq.n	8003322 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
    }
    return;
 80032f0:	e017      	b.n	8003322 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <HAL_UART_IRQHandler+0x5cc>
 80032fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fecc 	bl	80040a8 <UART_EndTransmit_IT>
    return;
 8003310:	e008      	b.n	8003324 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003312:	bf00      	nop
 8003314:	e006      	b.n	8003324 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003316:	bf00      	nop
 8003318:	e004      	b.n	8003324 <HAL_UART_IRQHandler+0x5cc>
      return;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <HAL_UART_IRQHandler+0x5cc>
      return;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003322:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003324:	37e8      	adds	r7, #232	@ 0xe8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop

0800332c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800336c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003370:	b08a      	sub	sp, #40	@ 0x28
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	431a      	orrs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4313      	orrs	r3, r2
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4ba4      	ldr	r3, [pc, #656]	@ (800362c <UART_SetConfig+0x2c0>)
 800339c:	4013      	ands	r3, r2
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a99      	ldr	r2, [pc, #612]	@ (8003630 <UART_SetConfig+0x2c4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d4:	4313      	orrs	r3, r2
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a90      	ldr	r2, [pc, #576]	@ (8003634 <UART_SetConfig+0x2c8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d126      	bne.n	8003444 <UART_SetConfig+0xd8>
 80033f6:	4b90      	ldr	r3, [pc, #576]	@ (8003638 <UART_SetConfig+0x2cc>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b03      	cmp	r3, #3
 8003402:	d81b      	bhi.n	800343c <UART_SetConfig+0xd0>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <UART_SetConfig+0xa0>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	0800341d 	.word	0x0800341d
 8003410:	0800342d 	.word	0x0800342d
 8003414:	08003425 	.word	0x08003425
 8003418:	08003435 	.word	0x08003435
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003422:	e116      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003424:	2302      	movs	r3, #2
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342a:	e112      	b.n	8003652 <UART_SetConfig+0x2e6>
 800342c:	2304      	movs	r3, #4
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003432:	e10e      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003434:	2308      	movs	r3, #8
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343a:	e10a      	b.n	8003652 <UART_SetConfig+0x2e6>
 800343c:	2310      	movs	r3, #16
 800343e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003442:	e106      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a7c      	ldr	r2, [pc, #496]	@ (800363c <UART_SetConfig+0x2d0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d138      	bne.n	80034c0 <UART_SetConfig+0x154>
 800344e:	4b7a      	ldr	r3, [pc, #488]	@ (8003638 <UART_SetConfig+0x2cc>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d82d      	bhi.n	80034b8 <UART_SetConfig+0x14c>
 800345c:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <UART_SetConfig+0xf8>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003499 	.word	0x08003499
 8003468:	080034b9 	.word	0x080034b9
 800346c:	080034b9 	.word	0x080034b9
 8003470:	080034b9 	.word	0x080034b9
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080034b9 	.word	0x080034b9
 800347c:	080034b9 	.word	0x080034b9
 8003480:	080034b9 	.word	0x080034b9
 8003484:	080034a1 	.word	0x080034a1
 8003488:	080034b9 	.word	0x080034b9
 800348c:	080034b9 	.word	0x080034b9
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034b1 	.word	0x080034b1
 8003498:	2300      	movs	r3, #0
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349e:	e0d8      	b.n	8003652 <UART_SetConfig+0x2e6>
 80034a0:	2302      	movs	r3, #2
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e0d4      	b.n	8003652 <UART_SetConfig+0x2e6>
 80034a8:	2304      	movs	r3, #4
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e0d0      	b.n	8003652 <UART_SetConfig+0x2e6>
 80034b0:	2308      	movs	r3, #8
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e0cc      	b.n	8003652 <UART_SetConfig+0x2e6>
 80034b8:	2310      	movs	r3, #16
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034be:	e0c8      	b.n	8003652 <UART_SetConfig+0x2e6>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003640 <UART_SetConfig+0x2d4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d125      	bne.n	8003516 <UART_SetConfig+0x1aa>
 80034ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003638 <UART_SetConfig+0x2cc>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034d4:	2b30      	cmp	r3, #48	@ 0x30
 80034d6:	d016      	beq.n	8003506 <UART_SetConfig+0x19a>
 80034d8:	2b30      	cmp	r3, #48	@ 0x30
 80034da:	d818      	bhi.n	800350e <UART_SetConfig+0x1a2>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d00a      	beq.n	80034f6 <UART_SetConfig+0x18a>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d814      	bhi.n	800350e <UART_SetConfig+0x1a2>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <UART_SetConfig+0x182>
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d008      	beq.n	80034fe <UART_SetConfig+0x192>
 80034ec:	e00f      	b.n	800350e <UART_SetConfig+0x1a2>
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f4:	e0ad      	b.n	8003652 <UART_SetConfig+0x2e6>
 80034f6:	2302      	movs	r3, #2
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fc:	e0a9      	b.n	8003652 <UART_SetConfig+0x2e6>
 80034fe:	2304      	movs	r3, #4
 8003500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003504:	e0a5      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003506:	2308      	movs	r3, #8
 8003508:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350c:	e0a1      	b.n	8003652 <UART_SetConfig+0x2e6>
 800350e:	2310      	movs	r3, #16
 8003510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003514:	e09d      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4a      	ldr	r2, [pc, #296]	@ (8003644 <UART_SetConfig+0x2d8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d125      	bne.n	800356c <UART_SetConfig+0x200>
 8003520:	4b45      	ldr	r3, [pc, #276]	@ (8003638 <UART_SetConfig+0x2cc>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003526:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800352a:	2bc0      	cmp	r3, #192	@ 0xc0
 800352c:	d016      	beq.n	800355c <UART_SetConfig+0x1f0>
 800352e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003530:	d818      	bhi.n	8003564 <UART_SetConfig+0x1f8>
 8003532:	2b80      	cmp	r3, #128	@ 0x80
 8003534:	d00a      	beq.n	800354c <UART_SetConfig+0x1e0>
 8003536:	2b80      	cmp	r3, #128	@ 0x80
 8003538:	d814      	bhi.n	8003564 <UART_SetConfig+0x1f8>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <UART_SetConfig+0x1d8>
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d008      	beq.n	8003554 <UART_SetConfig+0x1e8>
 8003542:	e00f      	b.n	8003564 <UART_SetConfig+0x1f8>
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354a:	e082      	b.n	8003652 <UART_SetConfig+0x2e6>
 800354c:	2302      	movs	r3, #2
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003552:	e07e      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003554:	2304      	movs	r3, #4
 8003556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800355a:	e07a      	b.n	8003652 <UART_SetConfig+0x2e6>
 800355c:	2308      	movs	r3, #8
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003562:	e076      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003564:	2310      	movs	r3, #16
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800356a:	e072      	b.n	8003652 <UART_SetConfig+0x2e6>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a35      	ldr	r2, [pc, #212]	@ (8003648 <UART_SetConfig+0x2dc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d12a      	bne.n	80035cc <UART_SetConfig+0x260>
 8003576:	4b30      	ldr	r3, [pc, #192]	@ (8003638 <UART_SetConfig+0x2cc>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003580:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003584:	d01a      	beq.n	80035bc <UART_SetConfig+0x250>
 8003586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800358a:	d81b      	bhi.n	80035c4 <UART_SetConfig+0x258>
 800358c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003590:	d00c      	beq.n	80035ac <UART_SetConfig+0x240>
 8003592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003596:	d815      	bhi.n	80035c4 <UART_SetConfig+0x258>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <UART_SetConfig+0x238>
 800359c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a0:	d008      	beq.n	80035b4 <UART_SetConfig+0x248>
 80035a2:	e00f      	b.n	80035c4 <UART_SetConfig+0x258>
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035aa:	e052      	b.n	8003652 <UART_SetConfig+0x2e6>
 80035ac:	2302      	movs	r3, #2
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b2:	e04e      	b.n	8003652 <UART_SetConfig+0x2e6>
 80035b4:	2304      	movs	r3, #4
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ba:	e04a      	b.n	8003652 <UART_SetConfig+0x2e6>
 80035bc:	2308      	movs	r3, #8
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c2:	e046      	b.n	8003652 <UART_SetConfig+0x2e6>
 80035c4:	2310      	movs	r3, #16
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ca:	e042      	b.n	8003652 <UART_SetConfig+0x2e6>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a17      	ldr	r2, [pc, #92]	@ (8003630 <UART_SetConfig+0x2c4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d13a      	bne.n	800364c <UART_SetConfig+0x2e0>
 80035d6:	4b18      	ldr	r3, [pc, #96]	@ (8003638 <UART_SetConfig+0x2cc>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035e4:	d01a      	beq.n	800361c <UART_SetConfig+0x2b0>
 80035e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035ea:	d81b      	bhi.n	8003624 <UART_SetConfig+0x2b8>
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f0:	d00c      	beq.n	800360c <UART_SetConfig+0x2a0>
 80035f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f6:	d815      	bhi.n	8003624 <UART_SetConfig+0x2b8>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <UART_SetConfig+0x298>
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003600:	d008      	beq.n	8003614 <UART_SetConfig+0x2a8>
 8003602:	e00f      	b.n	8003624 <UART_SetConfig+0x2b8>
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e022      	b.n	8003652 <UART_SetConfig+0x2e6>
 800360c:	2302      	movs	r3, #2
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e01e      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003614:	2304      	movs	r3, #4
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361a:	e01a      	b.n	8003652 <UART_SetConfig+0x2e6>
 800361c:	2308      	movs	r3, #8
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003622:	e016      	b.n	8003652 <UART_SetConfig+0x2e6>
 8003624:	2310      	movs	r3, #16
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800362a:	e012      	b.n	8003652 <UART_SetConfig+0x2e6>
 800362c:	efff69f3 	.word	0xefff69f3
 8003630:	40008000 	.word	0x40008000
 8003634:	40013800 	.word	0x40013800
 8003638:	40021000 	.word	0x40021000
 800363c:	40004400 	.word	0x40004400
 8003640:	40004800 	.word	0x40004800
 8003644:	40004c00 	.word	0x40004c00
 8003648:	40005000 	.word	0x40005000
 800364c:	2310      	movs	r3, #16
 800364e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a9f      	ldr	r2, [pc, #636]	@ (80038d4 <UART_SetConfig+0x568>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d17a      	bne.n	8003752 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800365c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003660:	2b08      	cmp	r3, #8
 8003662:	d824      	bhi.n	80036ae <UART_SetConfig+0x342>
 8003664:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <UART_SetConfig+0x300>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	08003691 	.word	0x08003691
 8003670:	080036af 	.word	0x080036af
 8003674:	08003699 	.word	0x08003699
 8003678:	080036af 	.word	0x080036af
 800367c:	0800369f 	.word	0x0800369f
 8003680:	080036af 	.word	0x080036af
 8003684:	080036af 	.word	0x080036af
 8003688:	080036af 	.word	0x080036af
 800368c:	080036a7 	.word	0x080036a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003690:	f7fe fd80 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 8003694:	61f8      	str	r0, [r7, #28]
        break;
 8003696:	e010      	b.n	80036ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003698:	4b8f      	ldr	r3, [pc, #572]	@ (80038d8 <UART_SetConfig+0x56c>)
 800369a:	61fb      	str	r3, [r7, #28]
        break;
 800369c:	e00d      	b.n	80036ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800369e:	f7fe fce1 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 80036a2:	61f8      	str	r0, [r7, #28]
        break;
 80036a4:	e009      	b.n	80036ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036aa:	61fb      	str	r3, [r7, #28]
        break;
 80036ac:	e005      	b.n	80036ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80fb 	beq.w	80038b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d305      	bcc.n	80036de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d903      	bls.n	80036e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036e4:	e0e8      	b.n	80038b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2200      	movs	r2, #0
 80036ea:	461c      	mov	r4, r3
 80036ec:	4615      	mov	r5, r2
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	022b      	lsls	r3, r5, #8
 80036f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036fc:	0222      	lsls	r2, r4, #8
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	6849      	ldr	r1, [r1, #4]
 8003702:	0849      	lsrs	r1, r1, #1
 8003704:	2000      	movs	r0, #0
 8003706:	4688      	mov	r8, r1
 8003708:	4681      	mov	r9, r0
 800370a:	eb12 0a08 	adds.w	sl, r2, r8
 800370e:	eb43 0b09 	adc.w	fp, r3, r9
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003720:	4650      	mov	r0, sl
 8003722:	4659      	mov	r1, fp
 8003724:	f7fc fd50 	bl	80001c8 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4613      	mov	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003736:	d308      	bcc.n	800374a <UART_SetConfig+0x3de>
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800373e:	d204      	bcs.n	800374a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	e0b6      	b.n	80038b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003750:	e0b2      	b.n	80038b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375a:	d15e      	bne.n	800381a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800375c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003760:	2b08      	cmp	r3, #8
 8003762:	d828      	bhi.n	80037b6 <UART_SetConfig+0x44a>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <UART_SetConfig+0x400>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	08003791 	.word	0x08003791
 8003770:	08003799 	.word	0x08003799
 8003774:	080037a1 	.word	0x080037a1
 8003778:	080037b7 	.word	0x080037b7
 800377c:	080037a7 	.word	0x080037a7
 8003780:	080037b7 	.word	0x080037b7
 8003784:	080037b7 	.word	0x080037b7
 8003788:	080037b7 	.word	0x080037b7
 800378c:	080037af 	.word	0x080037af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003790:	f7fe fd00 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 8003794:	61f8      	str	r0, [r7, #28]
        break;
 8003796:	e014      	b.n	80037c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003798:	f7fe fd12 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 800379c:	61f8      	str	r0, [r7, #28]
        break;
 800379e:	e010      	b.n	80037c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a0:	4b4d      	ldr	r3, [pc, #308]	@ (80038d8 <UART_SetConfig+0x56c>)
 80037a2:	61fb      	str	r3, [r7, #28]
        break;
 80037a4:	e00d      	b.n	80037c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a6:	f7fe fc5d 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 80037aa:	61f8      	str	r0, [r7, #28]
        break;
 80037ac:	e009      	b.n	80037c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b2:	61fb      	str	r3, [r7, #28]
        break;
 80037b4:	e005      	b.n	80037c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d077      	beq.n	80038b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005a      	lsls	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	441a      	add	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b0f      	cmp	r3, #15
 80037e2:	d916      	bls.n	8003812 <UART_SetConfig+0x4a6>
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ea:	d212      	bcs.n	8003812 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f023 030f 	bic.w	r3, r3, #15
 80037f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	b29a      	uxth	r2, r3
 8003802:	8afb      	ldrh	r3, [r7, #22]
 8003804:	4313      	orrs	r3, r2
 8003806:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	8afa      	ldrh	r2, [r7, #22]
 800380e:	60da      	str	r2, [r3, #12]
 8003810:	e052      	b.n	80038b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003818:	e04e      	b.n	80038b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800381a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800381e:	2b08      	cmp	r3, #8
 8003820:	d827      	bhi.n	8003872 <UART_SetConfig+0x506>
 8003822:	a201      	add	r2, pc, #4	@ (adr r2, 8003828 <UART_SetConfig+0x4bc>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	0800384d 	.word	0x0800384d
 800382c:	08003855 	.word	0x08003855
 8003830:	0800385d 	.word	0x0800385d
 8003834:	08003873 	.word	0x08003873
 8003838:	08003863 	.word	0x08003863
 800383c:	08003873 	.word	0x08003873
 8003840:	08003873 	.word	0x08003873
 8003844:	08003873 	.word	0x08003873
 8003848:	0800386b 	.word	0x0800386b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe fca2 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 8003850:	61f8      	str	r0, [r7, #28]
        break;
 8003852:	e014      	b.n	800387e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003854:	f7fe fcb4 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 8003858:	61f8      	str	r0, [r7, #28]
        break;
 800385a:	e010      	b.n	800387e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800385c:	4b1e      	ldr	r3, [pc, #120]	@ (80038d8 <UART_SetConfig+0x56c>)
 800385e:	61fb      	str	r3, [r7, #28]
        break;
 8003860:	e00d      	b.n	800387e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003862:	f7fe fbff 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8003866:	61f8      	str	r0, [r7, #28]
        break;
 8003868:	e009      	b.n	800387e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800386a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800386e:	61fb      	str	r3, [r7, #28]
        break;
 8003870:	e005      	b.n	800387e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800387c:	bf00      	nop
    }

    if (pclk != 0U)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d019      	beq.n	80038b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	085a      	lsrs	r2, r3, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	441a      	add	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	d909      	bls.n	80038b2 <UART_SetConfig+0x546>
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a4:	d205      	bcs.n	80038b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	e002      	b.n	80038b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3728      	adds	r7, #40	@ 0x28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	40008000 	.word	0x40008000
 80038d8:	00f42400 	.word	0x00f42400

080038dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039da:	d10a      	bne.n	80039f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b098      	sub	sp, #96	@ 0x60
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a30:	f7fd f844 	bl	8000abc <HAL_GetTick>
 8003a34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d12e      	bne.n	8003aa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f88c 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d021      	beq.n	8003aa2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e6      	bne.n	8003a5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e062      	b.n	8003b68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d149      	bne.n	8003b44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f856 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d03c      	beq.n	8003b44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b1c:	61fa      	str	r2, [r7, #28]
 8003b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	617b      	str	r3, [r7, #20]
   return(result);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e5      	bne.n	8003afc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e011      	b.n	8003b68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3758      	adds	r7, #88	@ 0x58
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b80:	e049      	b.n	8003c16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d045      	beq.n	8003c16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fc ff97 	bl	8000abc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e048      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d031      	beq.n	8003c16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d110      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f8ff 	bl	8003dcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e029      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf0:	d111      	bne.n	8003c16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f8e5 	bl	8003dcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e00f      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	bf0c      	ite	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	2300      	movne	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d0a6      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b096      	sub	sp, #88	@ 0x58
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2222      	movs	r2, #34	@ 0x22
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d028      	beq.n	8003cc6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c78:	4a3e      	ldr	r2, [pc, #248]	@ (8003d74 <UART_Start_Receive_DMA+0x134>)
 8003c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c80:	4a3d      	ldr	r2, [pc, #244]	@ (8003d78 <UART_Start_Receive_DMA+0x138>)
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c88:	4a3c      	ldr	r2, [pc, #240]	@ (8003d7c <UART_Start_Receive_DMA+0x13c>)
 8003c8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c90:	2200      	movs	r2, #0
 8003c92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3324      	adds	r3, #36	@ 0x24
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	f7fd f902 	bl	8000eb0 <HAL_DMA_Start_IT>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e051      	b.n	8003d6a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cee:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3308      	adds	r3, #8
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003d20:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d22:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e5      	bne.n	8003d00 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	613b      	str	r3, [r7, #16]
   return(result);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d54:	623a      	str	r2, [r7, #32]
 8003d56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	69f9      	ldr	r1, [r7, #28]
 8003d5a:	6a3a      	ldr	r2, [r7, #32]
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3758      	adds	r7, #88	@ 0x58
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	08003e95 	.word	0x08003e95
 8003d78:	08003fc1 	.word	0x08003fc1
 8003d7c:	08003fff 	.word	0x08003fff

08003d80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	@ 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	613b      	str	r3, [r7, #16]
   return(result);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e6      	bne.n	8003d88 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003dc0:	bf00      	nop
 8003dc2:	3724      	adds	r7, #36	@ 0x24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b095      	sub	sp, #84	@ 0x54
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003df2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003df4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003df8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e6      	bne.n	8003dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3308      	adds	r3, #8
 8003e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e5      	bne.n	8003e06 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d118      	bne.n	8003e74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f023 0310 	bic.w	r3, r3, #16
 8003e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6979      	ldr	r1, [r7, #20]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e6      	bne.n	8003e42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e88:	bf00      	nop
 8003e8a:	3754      	adds	r7, #84	@ 0x54
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b09c      	sub	sp, #112	@ 0x70
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d171      	bne.n	8003f94 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ed8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003edc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e6      	bne.n	8003eb8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3308      	adds	r3, #8
 8003f08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e5      	bne.n	8003eea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f34:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e5      	bne.n	8003f1e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f54:	2220      	movs	r2, #32
 8003f56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d118      	bne.n	8003f94 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	69b9      	ldr	r1, [r7, #24]
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e6      	bne.n	8003f62 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f96:	2200      	movs	r2, #0
 8003f98:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fac:	f7ff f9d2 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fb0:	e002      	b.n	8003fb8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003fb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fb4:	f7fc fb90 	bl	80006d8 <HAL_UART_RxCpltCallback>
}
 8003fb8:	bf00      	nop
 8003fba:	3770      	adds	r7, #112	@ 0x70
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d109      	bne.n	8003ff0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff f9b3 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fee:	e002      	b.n	8003ff6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff f99b 	bl	800332c <HAL_UART_RxHalfCpltCallback>
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004010:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004018:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b80      	cmp	r3, #128	@ 0x80
 8004026:	d109      	bne.n	800403c <UART_DMAError+0x3e>
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b21      	cmp	r3, #33	@ 0x21
 800402c:	d106      	bne.n	800403c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff fea2 	bl	8003d80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004046:	2b40      	cmp	r3, #64	@ 0x40
 8004048:	d109      	bne.n	800405e <UART_DMAError+0x60>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b22      	cmp	r3, #34	@ 0x22
 800404e:	d106      	bne.n	800405e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2200      	movs	r2, #0
 8004054:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004058:	6978      	ldr	r0, [r7, #20]
 800405a:	f7ff feb7 	bl	8003dcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004064:	f043 0210 	orr.w	r2, r3, #16
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff f966 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004074:	bf00      	nop
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff f950 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	6979      	ldr	r1, [r7, #20]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	613b      	str	r3, [r7, #16]
   return(result);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e6      	bne.n	80040b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fc f9e2 	bl	80004b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <memset>:
 8004110:	4402      	add	r2, r0
 8004112:	4603      	mov	r3, r0
 8004114:	4293      	cmp	r3, r2
 8004116:	d100      	bne.n	800411a <memset+0xa>
 8004118:	4770      	bx	lr
 800411a:	f803 1b01 	strb.w	r1, [r3], #1
 800411e:	e7f9      	b.n	8004114 <memset+0x4>

08004120 <__libc_init_array>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	4d0d      	ldr	r5, [pc, #52]	@ (8004158 <__libc_init_array+0x38>)
 8004124:	4c0d      	ldr	r4, [pc, #52]	@ (800415c <__libc_init_array+0x3c>)
 8004126:	1b64      	subs	r4, r4, r5
 8004128:	10a4      	asrs	r4, r4, #2
 800412a:	2600      	movs	r6, #0
 800412c:	42a6      	cmp	r6, r4
 800412e:	d109      	bne.n	8004144 <__libc_init_array+0x24>
 8004130:	4d0b      	ldr	r5, [pc, #44]	@ (8004160 <__libc_init_array+0x40>)
 8004132:	4c0c      	ldr	r4, [pc, #48]	@ (8004164 <__libc_init_array+0x44>)
 8004134:	f000 f818 	bl	8004168 <_init>
 8004138:	1b64      	subs	r4, r4, r5
 800413a:	10a4      	asrs	r4, r4, #2
 800413c:	2600      	movs	r6, #0
 800413e:	42a6      	cmp	r6, r4
 8004140:	d105      	bne.n	800414e <__libc_init_array+0x2e>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	f855 3b04 	ldr.w	r3, [r5], #4
 8004148:	4798      	blx	r3
 800414a:	3601      	adds	r6, #1
 800414c:	e7ee      	b.n	800412c <__libc_init_array+0xc>
 800414e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004152:	4798      	blx	r3
 8004154:	3601      	adds	r6, #1
 8004156:	e7f2      	b.n	800413e <__libc_init_array+0x1e>
 8004158:	080041d0 	.word	0x080041d0
 800415c:	080041d0 	.word	0x080041d0
 8004160:	080041d0 	.word	0x080041d0
 8004164:	080041d4 	.word	0x080041d4

08004168 <_init>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	bf00      	nop
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr

08004174 <_fini>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	bf00      	nop
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr


8.3_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005348  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005544  08005544  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005544  08005544  00006544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800554c  0800554c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800554c  0800554c  0000654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005550  08005550  00006550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005554  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022a4  20000068  080055bc  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000230c  080055bc  0000730c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc17  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a5  00000000  00000000  00016caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00019058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa9  00000000  00000000  00019e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002879b  00000000  00000000  0001a8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104a7  00000000  00000000  0004307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7ea  00000000  00000000  00053523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fd0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004018  00000000  00000000  0014fd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00153d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080054b8 	.word	0x080054b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080054b8 	.word	0x080054b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fb93 	bl	8000be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f814 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f92a 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f90a 	bl	80006e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80004cc:	f000 f860 	bl	8000590 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f8d6 	bl	8000680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buf, sizeof(adc_buf));
 80004d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004d8:	4902      	ldr	r1, [pc, #8]	@ (80004e4 <main+0x2c>)
 80004da:	4803      	ldr	r0, [pc, #12]	@ (80004e8 <main+0x30>)
 80004dc:	f000 ff1e 	bl	800131c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <main+0x28>
 80004e4:	200001b8 	.word	0x200001b8
 80004e8:	20000084 	.word	0x20000084

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b096      	sub	sp, #88	@ 0x58
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	2244      	movs	r2, #68	@ 0x44
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f004 fd28 	bl	8004f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000512:	f002 fa6d 	bl	80029f0 <HAL_PWREx_ControlVoltageScaling>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800051c:	f000 f932 	bl	8000784 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000520:	2302      	movs	r3, #2
 8000522:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000528:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	2310      	movs	r3, #16
 800052c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	2302      	movs	r3, #2
 8000534:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800053a:	230a      	movs	r3, #10
 800053c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800053e:	2307      	movs	r3, #7
 8000540:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000546:	2302      	movs	r3, #2
 8000548:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4618      	mov	r0, r3
 8000550:	f002 faa4 	bl	8002a9c <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800055a:	f000 f913 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2303      	movs	r3, #3
 8000564:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	2104      	movs	r1, #4
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fe6c 	bl	8003254 <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000582:	f000 f8ff 	bl	8000784 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3758      	adds	r7, #88	@ 0x58
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
 80005b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b2:	4b30      	ldr	r3, [pc, #192]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005b4:	4a30      	ldr	r2, [pc, #192]	@ (8000678 <MX_ADC1_Init+0xe8>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80005b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005cc:	4b29      	ldr	r3, [pc, #164]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d2:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005d4:	2204      	movs	r2, #4
 80005d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d8:	4b26      	ldr	r3, [pc, #152]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005de:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ea:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f2:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_ADC1_Init+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0xe4>)
 8000600:	2201      	movs	r2, #1
 8000602:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_ADC1_Init+0xe4>)
 8000608:	2200      	movs	r2, #0
 800060a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0xe4>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	4817      	ldr	r0, [pc, #92]	@ (8000674 <MX_ADC1_Init+0xe4>)
 8000616:	f000 fd31 	bl	800107c <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000620:	f000 f8b0 	bl	8000784 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4811      	ldr	r0, [pc, #68]	@ (8000674 <MX_ADC1_Init+0xe4>)
 8000630:	f001 fc6c 	bl	8001f0c <HAL_ADCEx_MultiModeConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800063a:	f000 f8a3 	bl	8000784 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_ADC1_Init+0xec>)
 8000640:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000642:	2306      	movs	r3, #6
 8000644:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064a:	237f      	movs	r3, #127	@ 0x7f
 800064c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800064e:	2304      	movs	r3, #4
 8000650:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	@ (8000674 <MX_ADC1_Init+0xe4>)
 800065c:	f000 ff24 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000666:	f000 f88d 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3728      	adds	r7, #40	@ 0x28
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000084 	.word	0x20000084
 8000678:	50040000 	.word	0x50040000
 800067c:	14f00020 	.word	0x14f00020

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	f003 fca6 	bl	8004014 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f859 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000130 	.word	0x20000130
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_DMA_Init+0x38>)
 80006e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000718 <MX_DMA_Init+0x38>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_DMA_Init+0x38>)
 80006f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200b      	movs	r0, #11
 8000704:	f001 fd8d 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000708:	200b      	movs	r0, #11
 800070a:	f001 fda6 	bl	800225a <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_GPIO_Init+0x2c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a08      	ldr	r2, [pc, #32]	@ (8000748 <MX_GPIO_Init+0x2c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_GPIO_Init+0x2c>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_ADC_ConvHalfCpltCallback>:
//	printf("%d \r\n",(int)port_value);
//
//	  HAL_ADC_Start_DMA(&hadc1, &ra, sizeof(ra));
//
//}
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	printf("HALF DATA IS STORED\r\n");
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000756:	f004 fb1b 	bl	8004d90 <puts>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	080054d0 	.word	0x080054d0

08000768 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	printf("ALL DATA IS STORED\r\n");
 8000770:	4803      	ldr	r0, [pc, #12]	@ (8000780 <HAL_ADC_ConvCpltCallback+0x18>)
 8000772:	f004 fb0d 	bl	8004d90 <puts>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	080054e8 	.word	0x080054e8

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <Error_Handler+0x8>

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079a:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b2:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0ac      	sub	sp, #176	@ 0xb0
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2288      	movs	r2, #136	@ 0x88
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 fba9 	bl	8004f50 <memset>
  if(hadc->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a3d      	ldr	r2, [pc, #244]	@ (80008f8 <HAL_ADC_MspInit+0x120>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d172      	bne.n	80008ee <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000808:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800080c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800080e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800081e:	2308      	movs	r3, #8
 8000820:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000822:	2307      	movs	r3, #7
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800082e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000832:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f002 ff2f 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000844:	f7ff ff9e 	bl	8000784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000848:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <HAL_ADC_MspInit+0x124>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	4a2b      	ldr	r2, [pc, #172]	@ (80008fc <HAL_ADC_MspInit+0x124>)
 800084e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <HAL_ADC_MspInit+0x124>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <HAL_ADC_MspInit+0x124>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000864:	4a25      	ldr	r2, [pc, #148]	@ (80008fc <HAL_ADC_MspInit+0x124>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086c:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <HAL_ADC_MspInit+0x124>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000878:	2301      	movs	r3, #1
 800087a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800087e:	230b      	movs	r3, #11
 8000880:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f001 fef4 	bl	8002680 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000898:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 800089a:	4a1a      	ldr	r2, [pc, #104]	@ (8000904 <HAL_ADC_MspInit+0x12c>)
 800089c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008c8:	2220      	movs	r2, #32
 80008ca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008d4:	f001 fcdc 	bl	8002290 <HAL_DMA_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80008de:	f7ff ff51 	bl	8000784 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008e8:	4a05      	ldr	r2, [pc, #20]	@ (8000900 <HAL_ADC_MspInit+0x128>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	37b0      	adds	r7, #176	@ 0xb0
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	50040000 	.word	0x50040000
 80008fc:	40021000 	.word	0x40021000
 8000900:	200000e8 	.word	0x200000e8
 8000904:	40020008 	.word	0x40020008

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b0ac      	sub	sp, #176	@ 0xb0
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2288      	movs	r2, #136	@ 0x88
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fb11 	bl	8004f50 <memset>
  if(huart->Instance==USART2)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <HAL_UART_MspInit+0xb0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d13b      	bne.n	80009b0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800093c:	2300      	movs	r3, #0
 800093e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fea9 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000950:	f7ff ff18 	bl	8000784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <HAL_UART_MspInit+0xb4>)
 8000956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000958:	4a18      	ldr	r2, [pc, #96]	@ (80009bc <HAL_UART_MspInit+0xb4>)
 800095a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800095e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000960:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <HAL_UART_MspInit+0xb4>)
 8000962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <HAL_UART_MspInit+0xb4>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000970:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <HAL_UART_MspInit+0xb4>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000978:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <HAL_UART_MspInit+0xb4>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000984:	230c      	movs	r3, #12
 8000986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099c:	2307      	movs	r3, #7
 800099e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ac:	f001 fe68 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	37b0      	adds	r7, #176	@ 0xb0
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f000 f93b 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <DMA1_Channel1_IRQHandler+0x10>)
 8000a26:	f001 fd4b 	bl	80024c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000e8 	.word	0x200000e8

08000a34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
  }

  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart2, (const unsigned char *)ptr, len, 1000);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <_write+0x28>)
 8000a88:	f003 fb12 	bl	80040b0 <HAL_UART_Transmit>
  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000130 	.word	0x20000130

08000a9c <_close>:

int _close(int file)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_isatty>:

int _isatty(int file)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	@ (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f004 fa5a 	bl	8004fec <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20018000 	.word	0x20018000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	200021b8 	.word	0x200021b8
 8000b6c:	20002310 	.word	0x20002310

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f004 fa19 	bl	8004ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fc77 	bl	80004b8 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bd8:	08005554 	.word	0x08005554
  ldr r2, =_sbss
 8000bdc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000be0:	2000230c 	.word	0x2000230c

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>

08000be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f001 fb0b 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f80e 	bl	8000c18 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c08:	f7ff fdc2 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fb17 	bl	8002276 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f001 fae1 	bl	8002222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	200021bc 	.word	0x200021bc

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200021bc 	.word	0x200021bc

08000cd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3360      	adds	r3, #96	@ 0x60
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <LL_ADC_SetOffset+0x44>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	4313      	orrs	r3, r2
 8000d68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	03fff000 	.word	0x03fff000

08000d80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3360      	adds	r3, #96	@ 0x60
 8000d8e:	461a      	mov	r2, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3360      	adds	r3, #96	@ 0x60
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dd6:	bf00      	nop
 8000dd8:	371c      	adds	r7, #28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3330      	adds	r3, #48	@ 0x30
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	f003 030c 	and.w	r3, r3, #12
 8000e24:	4413      	add	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	211f      	movs	r1, #31
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	0e9b      	lsrs	r3, r3, #26
 8000e40:	f003 011f 	and.w	r1, r3, #31
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3314      	adds	r3, #20
 8000e70:	461a      	mov	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	0e5b      	lsrs	r3, r3, #25
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	4413      	add	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	0d1b      	lsrs	r3, r3, #20
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	401a      	ands	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	0d1b      	lsrs	r3, r3, #20
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000eaa:	bf00      	nop
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0318 	and.w	r3, r3, #24
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000edc:	40d9      	lsrs	r1, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	0007ffff 	.word	0x0007ffff

08000f00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6093      	str	r3, [r2, #8]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f54:	d101      	bne.n	8000f5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000fa4:	d101      	bne.n	8000faa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fcc:	f043 0201 	orr.w	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <LL_ADC_IsEnabled+0x18>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <LL_ADC_IsEnabled+0x1a>
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001016:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800101a:	f043 0204 	orr.w	r2, r3, #4
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	2b04      	cmp	r3, #4
 8001040:	d101      	bne.n	8001046 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b08      	cmp	r3, #8
 8001066:	d101      	bne.n	800106c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e130      	b.n	80012f8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d109      	bne.n	80010b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fb97 	bl	80007d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff3f 	bl	8000f40 <LL_ADC_IsDeepPowerDownEnabled>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff25 	bl	8000f1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff5a 	bl	8000f90 <LL_ADC_IsInternalRegulatorEnabled>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d115      	bne.n	800110e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff3e 	bl	8000f68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010ec:	4b84      	ldr	r3, [pc, #528]	@ (8001300 <HAL_ADC_Init+0x284>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	099b      	lsrs	r3, r3, #6
 80010f2:	4a84      	ldr	r2, [pc, #528]	@ (8001304 <HAL_ADC_Init+0x288>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	3301      	adds	r3, #1
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001100:	e002      	b.n	8001108 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3b01      	subs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f9      	bne.n	8001102 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff3c 	bl	8000f90 <LL_ADC_IsInternalRegulatorEnabled>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10d      	bne.n	800113a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001122:	f043 0210 	orr.w	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff75 	bl	800102e <LL_ADC_REG_IsConversionOngoing>
 8001144:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 80c9 	bne.w	80012e6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f040 80c5 	bne.w	80012e6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001160:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001164:	f043 0202 	orr.w	r2, r3, #2
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff35 	bl	8000fe0 <LL_ADC_IsEnabled>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d115      	bne.n	80011a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800117c:	4862      	ldr	r0, [pc, #392]	@ (8001308 <HAL_ADC_Init+0x28c>)
 800117e:	f7ff ff2f 	bl	8000fe0 <LL_ADC_IsEnabled>
 8001182:	4604      	mov	r4, r0
 8001184:	4861      	ldr	r0, [pc, #388]	@ (800130c <HAL_ADC_Init+0x290>)
 8001186:	f7ff ff2b 	bl	8000fe0 <LL_ADC_IsEnabled>
 800118a:	4603      	mov	r3, r0
 800118c:	431c      	orrs	r4, r3
 800118e:	4860      	ldr	r0, [pc, #384]	@ (8001310 <HAL_ADC_Init+0x294>)
 8001190:	f7ff ff26 	bl	8000fe0 <LL_ADC_IsEnabled>
 8001194:	4603      	mov	r3, r0
 8001196:	4323      	orrs	r3, r4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d105      	bne.n	80011a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4619      	mov	r1, r3
 80011a2:	485c      	ldr	r0, [pc, #368]	@ (8001314 <HAL_ADC_Init+0x298>)
 80011a4:	f7ff fd94 	bl	8000cd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e5b      	ldrb	r3, [r3, #25]
 80011ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d106      	bne.n	80011e4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011da:	3b01      	subs	r3, #1
 80011dc:	045b      	lsls	r3, r3, #17
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d009      	beq.n	8001200 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	4b44      	ldr	r3, [pc, #272]	@ (8001318 <HAL_ADC_Init+0x29c>)
 8001208:	4013      	ands	r3, r2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	430b      	orrs	r3, r1
 8001212:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff1b 	bl	8001054 <LL_ADC_INJ_IsConversionOngoing>
 800121e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d13d      	bne.n	80012a2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d13a      	bne.n	80012a2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001230:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001238:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001248:	f023 0302 	bic.w	r3, r3, #2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	69b9      	ldr	r1, [r7, #24]
 8001252:	430b      	orrs	r3, r1
 8001254:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800125c:	2b01      	cmp	r3, #1
 800125e:	d118      	bne.n	8001292 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800126a:	f023 0304 	bic.w	r3, r3, #4
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001276:	4311      	orrs	r1, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800127c:	4311      	orrs	r1, r2
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001282:	430a      	orrs	r2, r1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0201 	orr.w	r2, r2, #1
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	e007      	b.n	80012a2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10c      	bne.n	80012c4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b0:	f023 010f 	bic.w	r1, r3, #15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80012c2:	e007      	b.n	80012d4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 020f 	bic.w	r2, r2, #15
 80012d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d8:	f023 0303 	bic.w	r3, r3, #3
 80012dc:	f043 0201 	orr.w	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80012e4:	e007      	b.n	80012f6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ea:	f043 0210 	orr.w	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3724      	adds	r7, #36	@ 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	20000000 	.word	0x20000000
 8001304:	053e2d63 	.word	0x053e2d63
 8001308:	50040000 	.word	0x50040000
 800130c:	50040100 	.word	0x50040100
 8001310:	50040200 	.word	0x50040200
 8001314:	50040300 	.word	0x50040300
 8001318:	fff0c007 	.word	0xfff0c007

0800131c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001328:	4853      	ldr	r0, [pc, #332]	@ (8001478 <HAL_ADC_Start_DMA+0x15c>)
 800132a:	f7ff fde9 	bl	8000f00 <LL_ADC_GetMultimode>
 800132e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe7a 	bl	800102e <LL_ADC_REG_IsConversionOngoing>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	f040 8093 	bne.w	8001468 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_ADC_Start_DMA+0x34>
 800134c:	2302      	movs	r3, #2
 800134e:	e08e      	b.n	800146e <HAL_ADC_Start_DMA+0x152>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a47      	ldr	r2, [pc, #284]	@ (800147c <HAL_ADC_Start_DMA+0x160>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d008      	beq.n	8001374 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d002      	beq.n	8001374 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d172      	bne.n	800145a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 fc89 	bl	8001c8c <ADC_Enable>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d165      	bne.n	8001450 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001388:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a38      	ldr	r2, [pc, #224]	@ (8001480 <HAL_ADC_Start_DMA+0x164>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d002      	beq.n	80013a8 <HAL_ADC_Start_DMA+0x8c>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	e000      	b.n	80013aa <HAL_ADC_Start_DMA+0x8e>
 80013a8:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <HAL_ADC_Start_DMA+0x168>)
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d002      	beq.n	80013b8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d105      	bne.n	80013c4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d4:	f023 0206 	bic.w	r2, r3, #6
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	659a      	str	r2, [r3, #88]	@ 0x58
 80013dc:	e002      	b.n	80013e4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e8:	4a27      	ldr	r2, [pc, #156]	@ (8001488 <HAL_ADC_Start_DMA+0x16c>)
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a26      	ldr	r2, [pc, #152]	@ (800148c <HAL_ADC_Start_DMA+0x170>)
 80013f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f8:	4a25      	ldr	r2, [pc, #148]	@ (8001490 <HAL_ADC_Start_DMA+0x174>)
 80013fa:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	221c      	movs	r2, #28
 8001402:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0210 	orr.w	r2, r2, #16
 800141a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3340      	adds	r3, #64	@ 0x40
 8001436:	4619      	mov	r1, r3
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f000 ffe0 	bl	8002400 <HAL_DMA_Start_IT>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fddc 	bl	8001006 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800144e:	e00d      	b.n	800146c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001458:	e008      	b.n	800146c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001466:	e001      	b.n	800146c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001468:	2302      	movs	r3, #2
 800146a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	50040300 	.word	0x50040300
 800147c:	50040200 	.word	0x50040200
 8001480:	50040100 	.word	0x50040100
 8001484:	50040000 	.word	0x50040000
 8001488:	08001d99 	.word	0x08001d99
 800148c:	08001e71 	.word	0x08001e71
 8001490:	08001e8d 	.word	0x08001e8d

08001494 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0b6      	sub	sp, #216	@ 0xd8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x22>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e3c9      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x7b6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fda9 	bl	800102e <LL_ADC_REG_IsConversionOngoing>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 83aa 	bne.w	8001c38 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d824      	bhi.n	800153e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	3b02      	subs	r3, #2
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d81b      	bhi.n	8001536 <HAL_ADC_ConfigChannel+0x8e>
 80014fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001504 <HAL_ADC_ConfigChannel+0x5c>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	08001515 	.word	0x08001515
 8001508:	0800151d 	.word	0x0800151d
 800150c:	08001525 	.word	0x08001525
 8001510:	0800152d 	.word	0x0800152d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001514:	230c      	movs	r3, #12
 8001516:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800151a:	e010      	b.n	800153e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800151c:	2312      	movs	r3, #18
 800151e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001522:	e00c      	b.n	800153e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001524:	2318      	movs	r3, #24
 8001526:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800152a:	e008      	b.n	800153e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800152c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001534:	e003      	b.n	800153e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001536:	2306      	movs	r3, #6
 8001538:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800153c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800154c:	f7ff fc5c 	bl	8000e08 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fd6a 	bl	800102e <LL_ADC_REG_IsConversionOngoing>
 800155a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fd76 	bl	8001054 <LL_ADC_INJ_IsConversionOngoing>
 8001568:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800156c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001570:	2b00      	cmp	r3, #0
 8001572:	f040 81a4 	bne.w	80018be <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 819f 	bne.w	80018be <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	461a      	mov	r2, r3
 800158e:	f7ff fc67 	bl	8000e60 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d00a      	beq.n	80015ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6919      	ldr	r1, [r3, #16]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80015c4:	f7ff fbb8 	bl	8000d38 <LL_ADC_SetOffset>
 80015c8:	e179      	b.n	80018be <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fbd5 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10a      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x14e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fbca 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	0e9b      	lsrs	r3, r3, #26
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	e01e      	b.n	8001634 <HAL_ADC_ConfigChannel+0x18c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fbbf 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001618:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800161c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001624:	2320      	movs	r3, #32
 8001626:	e004      	b.n	8001632 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1a4>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0e9b      	lsrs	r3, r3, #26
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	e018      	b.n	800167e <HAL_ADC_ConfigChannel+0x1d6>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001668:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001670:	2320      	movs	r3, #32
 8001672:	e004      	b.n	800167e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800167e:	429a      	cmp	r2, r3
 8001680:	d106      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fb8e 	bl	8000dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb72 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10a      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x214>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2101      	movs	r1, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fb67 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	0e9b      	lsrs	r3, r3, #26
 80016b6:	f003 021f 	and.w	r2, r3, #31
 80016ba:	e01e      	b.n	80016fa <HAL_ADC_ConfigChannel+0x252>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2101      	movs	r1, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fb5c 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80016da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80016e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80016ea:	2320      	movs	r3, #32
 80016ec:	e004      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80016ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x26a>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0e9b      	lsrs	r3, r3, #26
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	e018      	b.n	8001744 <HAL_ADC_ConfigChannel+0x29c>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001726:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800172a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800172e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001736:	2320      	movs	r3, #32
 8001738:	e004      	b.n	8001744 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800173a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001744:	429a      	cmp	r2, r3
 8001746:	d106      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	2101      	movs	r1, #1
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fb2b 	bl	8000dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2102      	movs	r1, #2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fb0f 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x2da>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fb04 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	0e9b      	lsrs	r3, r3, #26
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	e01e      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x318>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2102      	movs	r1, #2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff faf9 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80017a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80017a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80017b0:	2320      	movs	r3, #32
 80017b2:	e004      	b.n	80017be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80017b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x330>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0e9b      	lsrs	r3, r3, #26
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	e014      	b.n	8001802 <HAL_ADC_ConfigChannel+0x35a>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80017e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80017ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80017f4:	2320      	movs	r3, #32
 80017f6:	e004      	b.n	8001802 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80017f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001802:	429a      	cmp	r2, r3
 8001804:	d106      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff facc 	bl	8000dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2103      	movs	r1, #3
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fab0 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10a      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x398>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2103      	movs	r1, #3
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff faa5 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	0e9b      	lsrs	r3, r3, #26
 800183a:	f003 021f 	and.w	r2, r3, #31
 800183e:	e017      	b.n	8001870 <HAL_ADC_ConfigChannel+0x3c8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2103      	movs	r1, #3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa9a 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800185a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800185c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001862:	2320      	movs	r3, #32
 8001864:	e003      	b.n	800186e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	2b00      	cmp	r3, #0
 800187a:	d105      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x3e0>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0e9b      	lsrs	r3, r3, #26
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	e011      	b.n	80018ac <HAL_ADC_ConfigChannel+0x404>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001898:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800189a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80018a0:	2320      	movs	r3, #32
 80018a2:	e003      	b.n	80018ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80018a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2103      	movs	r1, #3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa77 	bl	8000dac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb8c 	bl	8000fe0 <LL_ADC_IsEnabled>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 8140 	bne.w	8001b50 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	461a      	mov	r2, r3
 80018de:	f7ff faeb 	bl	8000eb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4a8f      	ldr	r2, [pc, #572]	@ (8001b24 <HAL_ADC_ConfigChannel+0x67c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f040 8131 	bne.w	8001b50 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10b      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x46e>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	3301      	adds	r3, #1
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2b09      	cmp	r3, #9
 800190c:	bf94      	ite	ls
 800190e:	2301      	movls	r3, #1
 8001910:	2300      	movhi	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	e019      	b.n	800194a <HAL_ADC_ConfigChannel+0x4a2>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001926:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800192e:	2320      	movs	r3, #32
 8001930:	e003      	b.n	800193a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2b09      	cmp	r3, #9
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800194a:	2b00      	cmp	r3, #0
 800194c:	d079      	beq.n	8001a42 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <HAL_ADC_ConfigChannel+0x4c2>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0e9b      	lsrs	r3, r3, #26
 8001960:	3301      	adds	r3, #1
 8001962:	069b      	lsls	r3, r3, #26
 8001964:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001968:	e015      	b.n	8001996 <HAL_ADC_ConfigChannel+0x4ee>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800197a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800197c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001982:	2320      	movs	r3, #32
 8001984:	e003      	b.n	800198e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3301      	adds	r3, #1
 8001990:	069b      	lsls	r3, r3, #26
 8001992:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x50e>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0e9b      	lsrs	r3, r3, #26
 80019a8:	3301      	adds	r3, #1
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	e017      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x53e>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80019c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80019c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80019ce:	2320      	movs	r3, #32
 80019d0:	e003      	b.n	80019da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80019d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	ea42 0103 	orr.w	r1, r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x564>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	0e9b      	lsrs	r3, r3, #26
 80019fc:	3301      	adds	r3, #1
 80019fe:	f003 021f 	and.w	r2, r3, #31
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	051b      	lsls	r3, r3, #20
 8001a0a:	e018      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x596>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001a24:	2320      	movs	r3, #32
 8001a26:	e003      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	f003 021f 	and.w	r2, r3, #31
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	e081      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d107      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x5b6>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e9b      	lsrs	r3, r3, #26
 8001a54:	3301      	adds	r3, #1
 8001a56:	069b      	lsls	r3, r3, #26
 8001a58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a5c:	e015      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x5e2>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001a76:	2320      	movs	r3, #32
 8001a78:	e003      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	069b      	lsls	r3, r3, #26
 8001a86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x602>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0e9b      	lsrs	r3, r3, #26
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	e017      	b.n	8001ada <HAL_ADC_ConfigChannel+0x632>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e003      	b.n	8001ace <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	ea42 0103 	orr.w	r1, r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10d      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x65e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0e9b      	lsrs	r3, r3, #26
 8001af0:	3301      	adds	r3, #1
 8001af2:	f003 021f 	and.w	r2, r3, #31
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	3b1e      	subs	r3, #30
 8001afe:	051b      	lsls	r3, r3, #20
 8001b00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	e01e      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x69c>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	60fb      	str	r3, [r7, #12]
  return result;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d104      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e006      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x688>
 8001b22:	bf00      	nop
 8001b24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f003 021f 	and.w	r2, r3, #31
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b1e      	subs	r3, #30
 8001b3e:	051b      	lsls	r3, r3, #20
 8001b40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f988 	bl	8000e60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b44      	ldr	r3, [pc, #272]	@ (8001c68 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d07a      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b5c:	4843      	ldr	r0, [pc, #268]	@ (8001c6c <HAL_ADC_ConfigChannel+0x7c4>)
 8001b5e:	f7ff f8dd 	bl	8000d1c <LL_ADC_GetCommonPathInternalCh>
 8001b62:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a41      	ldr	r2, [pc, #260]	@ (8001c70 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d12c      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d126      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a3c      	ldr	r2, [pc, #240]	@ (8001c74 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d004      	beq.n	8001b90 <HAL_ADC_ConfigChannel+0x6e8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c78 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d15d      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4834      	ldr	r0, [pc, #208]	@ (8001c6c <HAL_ADC_ConfigChannel+0x7c4>)
 8001b9c:	f7ff f8ab 	bl	8000cf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba0:	4b36      	ldr	r3, [pc, #216]	@ (8001c7c <HAL_ADC_ConfigChannel+0x7d4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	4a36      	ldr	r2, [pc, #216]	@ (8001c80 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001bba:	e002      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f9      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bc8:	e040      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2d      	ldr	r2, [pc, #180]	@ (8001c84 <HAL_ADC_ConfigChannel+0x7dc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d118      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d112      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a23      	ldr	r2, [pc, #140]	@ (8001c74 <HAL_ADC_ConfigChannel+0x7cc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d004      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0x74c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_ADC_ConfigChannel+0x7d0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d12d      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481b      	ldr	r0, [pc, #108]	@ (8001c6c <HAL_ADC_ConfigChannel+0x7c4>)
 8001c00:	f7ff f879 	bl	8000cf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c04:	e024      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c88 <HAL_ADC_ConfigChannel+0x7e0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d120      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d11a      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d115      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480e      	ldr	r0, [pc, #56]	@ (8001c6c <HAL_ADC_ConfigChannel+0x7c4>)
 8001c32:	f7ff f860 	bl	8000cf6 <LL_ADC_SetCommonPathInternalCh>
 8001c36:	e00c      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001c4a:	e002      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c4c:	bf00      	nop
 8001c4e:	e000      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	37d8      	adds	r7, #216	@ 0xd8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	80080000 	.word	0x80080000
 8001c6c:	50040300 	.word	0x50040300
 8001c70:	c7520000 	.word	0xc7520000
 8001c74:	50040000 	.word	0x50040000
 8001c78:	50040200 	.word	0x50040200
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	053e2d63 	.word	0x053e2d63
 8001c84:	cb840000 	.word	0xcb840000
 8001c88:	80000001 	.word	0x80000001

08001c8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f99f 	bl	8000fe0 <LL_ADC_IsEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d169      	bne.n	8001d7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	4b36      	ldr	r3, [pc, #216]	@ (8001d88 <ADC_Enable+0xfc>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00d      	beq.n	8001cd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cba:	f043 0210 	orr.w	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e055      	b.n	8001d7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f96e 	bl	8000fb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001cdc:	482b      	ldr	r0, [pc, #172]	@ (8001d8c <ADC_Enable+0x100>)
 8001cde:	f7ff f81d 	bl	8000d1c <LL_ADC_GetCommonPathInternalCh>
 8001ce2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ce4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cec:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <ADC_Enable+0x104>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	4a28      	ldr	r2, [pc, #160]	@ (8001d94 <ADC_Enable+0x108>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d06:	e002      	b.n	8001d0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d14:	f7fe ffd0 	bl	8000cb8 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d1a:	e028      	b.n	8001d6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f95d 	bl	8000fe0 <LL_ADC_IsEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f941 	bl	8000fb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d36:	f7fe ffbf 	bl	8000cb8 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d914      	bls.n	8001d6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d00d      	beq.n	8001d6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e007      	b.n	8001d7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d1cf      	bne.n	8001d1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	8000003f 	.word	0x8000003f
 8001d8c:	50040300 	.word	0x50040300
 8001d90:	20000000 	.word	0x20000000
 8001d94:	053e2d63 	.word	0x053e2d63

08001d98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001daa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d14b      	bne.n	8001e4a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d021      	beq.n	8001e10 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f806 	bl	8000de2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d032      	beq.n	8001e42 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d12b      	bne.n	8001e42 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11f      	bne.n	8001e42 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e0e:	e018      	b.n	8001e42 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d111      	bne.n	8001e42 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7fe fc90 	bl	8000768 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e48:	e00e      	b.n	8001e68 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7ff fb1c 	bl	8001494 <HAL_ADC_ErrorCallback>
}
 8001e5c:	e004      	b.n	8001e68 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7fe fc64 	bl	800074c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	f043 0204 	orr.w	r2, r3, #4
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff faee 	bl	8001494 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <LL_ADC_IsEnabled>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <LL_ADC_IsEnabled+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_ADC_IsEnabled+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b09f      	sub	sp, #124	@ 0x7c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e093      	b.n	8002052 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001f32:	2300      	movs	r3, #0
 8001f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001f36:	2300      	movs	r3, #0
 8001f38:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a47      	ldr	r2, [pc, #284]	@ (800205c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d102      	bne.n	8001f4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f44:	4b46      	ldr	r3, [pc, #280]	@ (8002060 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	e001      	b.n	8001f4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e072      	b.n	8002052 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ffb9 	bl	8001ee6 <LL_ADC_REG_IsConversionOngoing>
 8001f74:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ffb3 	bl	8001ee6 <LL_ADC_REG_IsConversionOngoing>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d154      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001f86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d151      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f8c:	4b35      	ldr	r3, [pc, #212]	@ (8002064 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d02c      	beq.n	8001ff2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001faa:	035b      	lsls	r3, r3, #13
 8001fac:	430b      	orrs	r3, r1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fb4:	4829      	ldr	r0, [pc, #164]	@ (800205c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fb6:	f7ff ff83 	bl	8001ec0 <LL_ADC_IsEnabled>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4828      	ldr	r0, [pc, #160]	@ (8002060 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001fbe:	f7ff ff7f 	bl	8001ec0 <LL_ADC_IsEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	431c      	orrs	r4, r3
 8001fc6:	4828      	ldr	r0, [pc, #160]	@ (8002068 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001fc8:	f7ff ff7a 	bl	8001ec0 <LL_ADC_IsEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d137      	bne.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001fdc:	f023 030f 	bic.w	r3, r3, #15
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	6811      	ldr	r1, [r2, #0]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	6892      	ldr	r2, [r2, #8]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ff0:	e028      	b.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ffc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ffe:	4817      	ldr	r0, [pc, #92]	@ (800205c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002000:	f7ff ff5e 	bl	8001ec0 <LL_ADC_IsEnabled>
 8002004:	4604      	mov	r4, r0
 8002006:	4816      	ldr	r0, [pc, #88]	@ (8002060 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002008:	f7ff ff5a 	bl	8001ec0 <LL_ADC_IsEnabled>
 800200c:	4603      	mov	r3, r0
 800200e:	431c      	orrs	r4, r3
 8002010:	4815      	ldr	r0, [pc, #84]	@ (8002068 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002012:	f7ff ff55 	bl	8001ec0 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	4323      	orrs	r3, r4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d112      	bne.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800201e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002026:	f023 030f 	bic.w	r3, r3, #15
 800202a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800202c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800202e:	e009      	b.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002042:	e000      	b.n	8002046 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002044:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800204e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002052:	4618      	mov	r0, r3
 8002054:	377c      	adds	r7, #124	@ 0x7c
 8002056:	46bd      	mov	sp, r7
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	bf00      	nop
 800205c:	50040000 	.word	0x50040000
 8002060:	50040100 	.word	0x50040100
 8002064:	50040300 	.word	0x50040300
 8002068:	50040200 	.word	0x50040200

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	@ (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e098      	b.n	80023d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b4d      	ldr	r3, [pc, #308]	@ (80023e0 <HAL_DMA_Init+0x150>)
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d80f      	bhi.n	80022ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b4b      	ldr	r3, [pc, #300]	@ (80023e4 <HAL_DMA_Init+0x154>)
 80022b6:	4413      	add	r3, r2
 80022b8:	4a4b      	ldr	r2, [pc, #300]	@ (80023e8 <HAL_DMA_Init+0x158>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	009a      	lsls	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a48      	ldr	r2, [pc, #288]	@ (80023ec <HAL_DMA_Init+0x15c>)
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80022cc:	e00e      	b.n	80022ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b46      	ldr	r3, [pc, #280]	@ (80023f0 <HAL_DMA_Init+0x160>)
 80022d6:	4413      	add	r3, r2
 80022d8:	4a43      	ldr	r2, [pc, #268]	@ (80023e8 <HAL_DMA_Init+0x158>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	009a      	lsls	r2, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a42      	ldr	r2, [pc, #264]	@ (80023f4 <HAL_DMA_Init+0x164>)
 80022ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002306:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002346:	d039      	beq.n	80023bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <HAL_DMA_Init+0x15c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d11a      	bne.n	8002388 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002352:	4b29      	ldr	r3, [pc, #164]	@ (80023f8 <HAL_DMA_Init+0x168>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	f003 031c 	and.w	r3, r3, #28
 800235e:	210f      	movs	r1, #15
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	4924      	ldr	r1, [pc, #144]	@ (80023f8 <HAL_DMA_Init+0x168>)
 8002368:	4013      	ands	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800236c:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <HAL_DMA_Init+0x168>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	f003 031c 	and.w	r3, r3, #28
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	491d      	ldr	r1, [pc, #116]	@ (80023f8 <HAL_DMA_Init+0x168>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
 8002386:	e019      	b.n	80023bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002388:	4b1c      	ldr	r3, [pc, #112]	@ (80023fc <HAL_DMA_Init+0x16c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	f003 031c 	and.w	r3, r3, #28
 8002394:	210f      	movs	r1, #15
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	4917      	ldr	r1, [pc, #92]	@ (80023fc <HAL_DMA_Init+0x16c>)
 800239e:	4013      	ands	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <HAL_DMA_Init+0x16c>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f003 031c 	and.w	r3, r3, #28
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	4911      	ldr	r1, [pc, #68]	@ (80023fc <HAL_DMA_Init+0x16c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40020407 	.word	0x40020407
 80023e4:	bffdfff8 	.word	0xbffdfff8
 80023e8:	cccccccd 	.word	0xcccccccd
 80023ec:	40020000 	.word	0x40020000
 80023f0:	bffdfbf8 	.word	0xbffdfbf8
 80023f4:	40020400 	.word	0x40020400
 80023f8:	400200a8 	.word	0x400200a8
 80023fc:	400204a8 	.word	0x400204a8

08002400 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_DMA_Start_IT+0x20>
 800241c:	2302      	movs	r3, #2
 800241e:	e04b      	b.n	80024b8 <HAL_DMA_Start_IT+0xb8>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d13a      	bne.n	80024aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f8e0 	bl	800261e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 020e 	orr.w	r2, r2, #14
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e00f      	b.n	8002498 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 020a 	orr.w	r2, r2, #10
 8002496:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e005      	b.n	80024b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
 80024b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024dc:	f003 031c 	and.w	r3, r3, #28
 80024e0:	2204      	movs	r2, #4
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d026      	beq.n	800253a <HAL_DMA_IRQHandler+0x7a>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d021      	beq.n	800253a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	f003 021c 	and.w	r2, r3, #28
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	2104      	movs	r1, #4
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	2b00      	cmp	r3, #0
 800252e:	d071      	beq.n	8002614 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002538:	e06c      	b.n	8002614 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f003 031c 	and.w	r3, r3, #28
 8002542:	2202      	movs	r2, #2
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d02e      	beq.n	80025ac <HAL_DMA_IRQHandler+0xec>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d029      	beq.n	80025ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 020a 	bic.w	r2, r2, #10
 8002574:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f003 021c 	and.w	r2, r3, #28
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	2102      	movs	r1, #2
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d038      	beq.n	8002614 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025aa:	e033      	b.n	8002614 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b0:	f003 031c 	and.w	r3, r3, #28
 80025b4:	2208      	movs	r2, #8
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02a      	beq.n	8002616 <HAL_DMA_IRQHandler+0x156>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d025      	beq.n	8002616 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 020e 	bic.w	r2, r2, #14
 80025d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f003 021c 	and.w	r2, r3, #28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002614:	bf00      	nop
 8002616:	bf00      	nop
}
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002630:	f003 021c 	and.w	r2, r3, #28
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f202 	lsl.w	r2, r1, r2
 800263e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b10      	cmp	r3, #16
 800264e:	d108      	bne.n	8002662 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002660:	e007      	b.n	8002672 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	60da      	str	r2, [r3, #12]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268e:	e17f      	b.n	8002990 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2101      	movs	r1, #1
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8171 	beq.w	800298a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d005      	beq.n	80026c0 <HAL_GPIO_Init+0x40>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d130      	bne.n	8002722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026f6:	2201      	movs	r2, #1
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0201 	and.w	r2, r3, #1
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b03      	cmp	r3, #3
 800272c:	d118      	bne.n	8002760 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	6939      	ldr	r1, [r7, #16]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80ac 	beq.w	800298a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	4b5f      	ldr	r3, [pc, #380]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	4a5e      	ldr	r2, [pc, #376]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6613      	str	r3, [r2, #96]	@ 0x60
 800283e:	4b5c      	ldr	r3, [pc, #368]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800284a:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_GPIO_Init+0x334>)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002874:	d025      	beq.n	80028c2 <HAL_GPIO_Init+0x242>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4f      	ldr	r2, [pc, #316]	@ (80029b8 <HAL_GPIO_Init+0x338>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01f      	beq.n	80028be <HAL_GPIO_Init+0x23e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4e      	ldr	r2, [pc, #312]	@ (80029bc <HAL_GPIO_Init+0x33c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d019      	beq.n	80028ba <HAL_GPIO_Init+0x23a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4d      	ldr	r2, [pc, #308]	@ (80029c0 <HAL_GPIO_Init+0x340>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0x236>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4c      	ldr	r2, [pc, #304]	@ (80029c4 <HAL_GPIO_Init+0x344>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_GPIO_Init+0x232>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4b      	ldr	r2, [pc, #300]	@ (80029c8 <HAL_GPIO_Init+0x348>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <HAL_GPIO_Init+0x22e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4a      	ldr	r2, [pc, #296]	@ (80029cc <HAL_GPIO_Init+0x34c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_GPIO_Init+0x22a>
 80028a6:	2306      	movs	r3, #6
 80028a8:	e00c      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028aa:	2307      	movs	r3, #7
 80028ac:	e00a      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x244>
 80028c2:	2300      	movs	r3, #0
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028d4:	4937      	ldr	r1, [pc, #220]	@ (80029b4 <HAL_GPIO_Init+0x334>)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e2:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002906:	4a32      	ldr	r2, [pc, #200]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800290c:	4b30      	ldr	r3, [pc, #192]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002930:	4a27      	ldr	r2, [pc, #156]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002936:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800295a:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002984:	4a12      	ldr	r2, [pc, #72]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	f47f ae78 	bne.w	8002690 <HAL_GPIO_Init+0x10>
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010000 	.word	0x40010000
 80029b8:	48000400 	.word	0x48000400
 80029bc:	48000800 	.word	0x48000800
 80029c0:	48000c00 	.word	0x48000c00
 80029c4:	48001000 	.word	0x48001000
 80029c8:	48001400 	.word	0x48001400
 80029cc:	48001800 	.word	0x48001800
 80029d0:	40010400 	.word	0x40010400

080029d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <HAL_PWREx_GetVoltageRange+0x18>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000

080029f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029fe:	d130      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a00:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0c:	d038      	beq.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a16:	4a1e      	ldr	r2, [pc, #120]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2232      	movs	r2, #50	@ 0x32
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	3301      	adds	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a34:	e002      	b.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a3c:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a48:	d102      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f2      	bne.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5c:	d110      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e00f      	b.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a62:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6e:	d007      	beq.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a70:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a78:	4a05      	ldr	r2, [pc, #20]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40007000 	.word	0x40007000
 8002a94:	20000000 	.word	0x20000000
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e3ca      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	4b97      	ldr	r3, [pc, #604]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab8:	4b94      	ldr	r3, [pc, #592]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80e4 	beq.w	8002c98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x4a>
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	f040 808b 	bne.w	8002bf4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 8087 	bne.w	8002bf4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae6:	4b89      	ldr	r3, [pc, #548]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e3a2      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	4b82      	ldr	r3, [pc, #520]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_RCC_OscConfig+0x7c>
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b16:	e005      	b.n	8002b24 <HAL_RCC_OscConfig+0x88>
 8002b18:	4b7c      	ldr	r3, [pc, #496]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d223      	bcs.n	8002b70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fd55 	bl	80035dc <RCC_SetFlashLatencyFromMSIRange>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e383      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3c:	4b73      	ldr	r3, [pc, #460]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a72      	ldr	r2, [pc, #456]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b70      	ldr	r3, [pc, #448]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	496d      	ldr	r1, [pc, #436]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	4968      	ldr	r1, [pc, #416]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
 8002b6e:	e025      	b.n	8002bbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b70:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a65      	ldr	r2, [pc, #404]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b63      	ldr	r3, [pc, #396]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4960      	ldr	r1, [pc, #384]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	495b      	ldr	r1, [pc, #364]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fd15 	bl	80035dc <RCC_SetFlashLatencyFromMSIRange>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e343      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bbc:	f000 fc4a 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b52      	ldr	r3, [pc, #328]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	4950      	ldr	r1, [pc, #320]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8002d14 <HAL_RCC_OscConfig+0x278>)
 8002bda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe f819 	bl	8000c18 <HAL_InitTick>
 8002be6:	4603      	mov	r3, r0
 8002be8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d052      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	e327      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d032      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bfc:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a42      	ldr	r2, [pc, #264]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c08:	f7fe f856 	bl	8000cb8 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c10:	f7fe f852 	bl	8000cb8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e310      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c22:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a36      	ldr	r2, [pc, #216]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b34      	ldr	r3, [pc, #208]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4931      	ldr	r1, [pc, #196]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	492c      	ldr	r1, [pc, #176]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e01a      	b.n	8002c98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c62:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a29      	ldr	r2, [pc, #164]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe f823 	bl	8000cb8 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c76:	f7fe f81f 	bl	8000cb8 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e2dd      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c88:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x1da>
 8002c94:	e000      	b.n	8002c98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d074      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x21a>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d10e      	bne.n	8002cce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d10b      	bne.n	8002cce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d064      	beq.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d160      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e2ba      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x24a>
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e026      	b.n	8002d34 <HAL_RCC_OscConfig+0x298>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cee:	d115      	bne.n	8002d1c <HAL_RCC_OscConfig+0x280>
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a05      	ldr	r2, [pc, #20]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a02      	ldr	r2, [pc, #8]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x298>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	080054fc 	.word	0x080054fc
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004
 8002d1c:	4ba0      	ldr	r3, [pc, #640]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a9f      	ldr	r2, [pc, #636]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b9d      	ldr	r3, [pc, #628]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a9c      	ldr	r2, [pc, #624]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fd ffbc 	bl	8000cb8 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fd ffb8 	bl	8000cb8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e276      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d56:	4b92      	ldr	r3, [pc, #584]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2a8>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fd ffa8 	bl	8000cb8 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fd ffa4 	bl	8000cb8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e262      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7e:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2d0>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d060      	beq.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_OscConfig+0x310>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d119      	bne.n	8002dda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d116      	bne.n	8002dda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dac:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x328>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e23f      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	4973      	ldr	r1, [pc, #460]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd8:	e040      	b.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d023      	beq.n	8002e2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de2:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fd ff63 	bl	8000cb8 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fd ff5f 	bl	8000cb8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e21d      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e08:	4b65      	ldr	r3, [pc, #404]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b62      	ldr	r3, [pc, #392]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	495f      	ldr	r1, [pc, #380]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
 8002e28:	e018      	b.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fd ff3f 	bl	8000cb8 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fd ff3b 	bl	8000cb8 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1f9      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e50:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d03c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e70:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e76:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fd ff1a 	bl	8000cb8 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fd ff16 	bl	8000cb8 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1d4      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3ec>
 8002ea8:	e01b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fd fefd 	bl	8000cb8 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec2:	f7fd fef9 	bl	8000cb8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1b7      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed4:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ef      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80a6 	beq.w	800303c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b27      	ldr	r3, [pc, #156]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	4a26      	ldr	r2, [pc, #152]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f0c:	4b24      	ldr	r3, [pc, #144]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1c:	4b21      	ldr	r3, [pc, #132]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d118      	bne.n	8002f5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f28:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f34:	f7fd fec0 	bl	8000cb8 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3c:	f7fd febc 	bl	8000cb8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e17a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4d8>
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f68:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f72:	e029      	b.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d115      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x50c>
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	4a03      	ldr	r2, [pc, #12]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	4a9b      	ldr	r2, [pc, #620]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fb8:	4b98      	ldr	r3, [pc, #608]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	4a97      	ldr	r2, [pc, #604]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d016      	beq.n	8002ffe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fd fe72 	bl	8000cb8 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fd fe6e 	bl	8000cb8 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e12a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fee:	4b8b      	ldr	r3, [pc, #556]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ed      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x53c>
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fd fe5b 	bl	8000cb8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fd fe57 	bl	8000cb8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e113      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800301c:	4b7f      	ldr	r3, [pc, #508]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ed      	bne.n	8003006 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	7ffb      	ldrb	r3, [r7, #31]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b7a      	ldr	r3, [pc, #488]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	4a79      	ldr	r2, [pc, #484]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80fe 	beq.w	8003242 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	2b02      	cmp	r3, #2
 800304c:	f040 80d0 	bne.w	80031f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003050:	4b72      	ldr	r3, [pc, #456]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0203 	and.w	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	429a      	cmp	r2, r3
 8003062:	d130      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	3b01      	subs	r3, #1
 8003070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d127      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003080:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11f      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003090:	2a07      	cmp	r2, #7
 8003092:	bf14      	ite	ne
 8003094:	2201      	movne	r2, #1
 8003096:	2200      	moveq	r2, #0
 8003098:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	4293      	cmp	r3, r2
 800309c:	d113      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	3b01      	subs	r3, #1
 80030c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d06e      	beq.n	80031a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d069      	beq.n	80031a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030cc:	4b53      	ldr	r3, [pc, #332]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030d8:	4b50      	ldr	r3, [pc, #320]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0ad      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030e8:	4b4c      	ldr	r3, [pc, #304]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4b      	ldr	r2, [pc, #300]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f4:	f7fd fde0 	bl	8000cb8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd fddc 	bl	8000cb8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e09a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310e:	4b43      	ldr	r3, [pc, #268]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311a:	4b40      	ldr	r3, [pc, #256]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b40      	ldr	r3, [pc, #256]	@ (8003220 <HAL_RCC_OscConfig+0x784>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800312a:	3a01      	subs	r2, #1
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003134:	0212      	lsls	r2, r2, #8
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800313c:	0852      	lsrs	r2, r2, #1
 800313e:	3a01      	subs	r2, #1
 8003140:	0552      	lsls	r2, r2, #21
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003148:	0852      	lsrs	r2, r2, #1
 800314a:	3a01      	subs	r2, #1
 800314c:	0652      	lsls	r2, r2, #25
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003154:	0912      	lsrs	r2, r2, #4
 8003156:	0452      	lsls	r2, r2, #17
 8003158:	430a      	orrs	r2, r1
 800315a:	4930      	ldr	r1, [pc, #192]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800315c:	4313      	orrs	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003160:	4b2e      	ldr	r3, [pc, #184]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2d      	ldr	r2, [pc, #180]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800316c:	4b2b      	ldr	r3, [pc, #172]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003178:	f7fd fd9e 	bl	8000cb8 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7fd fd9a 	bl	8000cb8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e058      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b22      	ldr	r3, [pc, #136]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800319e:	e050      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e04f      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a4:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d148      	bne.n	8003242 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031b0:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a19      	ldr	r2, [pc, #100]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031bc:	4b17      	ldr	r3, [pc, #92]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4a16      	ldr	r2, [pc, #88]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c8:	f7fd fd76 	bl	8000cb8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fd fd72 	bl	8000cb8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e030      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x734>
 80031ee:	e028      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d023      	beq.n	800323e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a08      	ldr	r2, [pc, #32]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fd fd59 	bl	8000cb8 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	e00c      	b.n	8003224 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fd fd55 	bl	8000cb8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d905      	bls.n	8003224 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e013      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
 800321c:	40021000 	.word	0x40021000
 8003220:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ec      	bne.n	800320a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	4905      	ldr	r1, [pc, #20]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_OscConfig+0x7b4>)
 8003238:	4013      	ands	r3, r2
 800323a:	60cb      	str	r3, [r1, #12]
 800323c:	e001      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	feeefffc 	.word	0xfeeefffc

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0e7      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b75      	ldr	r3, [pc, #468]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b72      	ldr	r3, [pc, #456]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 0207 	bic.w	r2, r3, #7
 800327e:	4970      	ldr	r1, [pc, #448]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b6e      	ldr	r3, [pc, #440]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0cf      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b66      	ldr	r3, [pc, #408]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d908      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b4:	4b63      	ldr	r3, [pc, #396]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4960      	ldr	r1, [pc, #384]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04c      	beq.n	800336c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032da:	4b5a      	ldr	r3, [pc, #360]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d121      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0a6      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f2:	4b54      	ldr	r3, [pc, #336]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e09a      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800330a:	4b4e      	ldr	r3, [pc, #312]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e08e      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331a:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e086      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b46      	ldr	r3, [pc, #280]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4943      	ldr	r1, [pc, #268]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333c:	f7fd fcbc 	bl	8000cb8 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fd fcb8 	bl	8000cb8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e06e      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	4b31      	ldr	r3, [pc, #196]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003384:	429a      	cmp	r2, r3
 8003386:	d208      	bcs.n	800339a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b2e      	ldr	r3, [pc, #184]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	492b      	ldr	r1, [pc, #172]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339a:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d210      	bcs.n	80033ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a8:	4b25      	ldr	r3, [pc, #148]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 0207 	bic.w	r2, r3, #7
 80033b0:	4923      	ldr	r1, [pc, #140]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b8:	4b21      	ldr	r3, [pc, #132]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e036      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4918      	ldr	r1, [pc, #96]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f4:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4910      	ldr	r1, [pc, #64]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003408:	f000 f824 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	490b      	ldr	r1, [pc, #44]	@ (8003448 <HAL_RCC_ClockConfig+0x1f4>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	4a09      	ldr	r2, [pc, #36]	@ (800344c <HAL_RCC_ClockConfig+0x1f8>)
 8003426:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003428:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <HAL_RCC_ClockConfig+0x1fc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fbf3 	bl	8000c18 <HAL_InitTick>
 8003432:	4603      	mov	r3, r0
 8003434:	72fb      	strb	r3, [r7, #11]

  return status;
 8003436:	7afb      	ldrb	r3, [r7, #11]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40022000 	.word	0x40022000
 8003444:	40021000 	.word	0x40021000
 8003448:	080054fc 	.word	0x080054fc
 800344c:	20000000 	.word	0x20000000
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	@ 0x24
 8003458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4b3e      	ldr	r3, [pc, #248]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b3b      	ldr	r3, [pc, #236]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d121      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d11e      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003488:	4b34      	ldr	r3, [pc, #208]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003494:	4b31      	ldr	r3, [pc, #196]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e005      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a4:	4b2d      	ldr	r3, [pc, #180]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d102      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034cc:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e004      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034d8:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x114>)
 80034da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d134      	bne.n	800354c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e2:	4b1e      	ldr	r3, [pc, #120]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0xa6>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d003      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0xac>
 80034f8:	e005      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x110>)
 80034fc:	617b      	str	r3, [r7, #20]
      break;
 80034fe:	e005      	b.n	800350c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x114>)
 8003502:	617b      	str	r3, [r7, #20]
      break;
 8003504:	e002      	b.n	800350c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	617b      	str	r3, [r7, #20]
      break;
 800350a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	fb03 f202 	mul.w	r2, r3, r2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	0e5b      	lsrs	r3, r3, #25
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	3301      	adds	r3, #1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800354c:	69bb      	ldr	r3, [r7, #24]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3724      	adds	r7, #36	@ 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	08005514 	.word	0x08005514
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000000 	.word	0x20000000

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003588:	f7ff fff0 	bl	800356c <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4904      	ldr	r1, [pc, #16]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	0800550c 	.word	0x0800550c

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035b4:	f7ff ffda 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0adb      	lsrs	r3, r3, #11
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	0800550c 	.word	0x0800550c

080035dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f4:	f7ff f9ee 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 80035f8:	6178      	str	r0, [r7, #20]
 80035fa:	e014      	b.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035fc:	4b25      	ldr	r3, [pc, #148]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	4a24      	ldr	r2, [pc, #144]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003606:	6593      	str	r3, [r2, #88]	@ 0x58
 8003608:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003614:	f7ff f9de 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 8003618:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800361a:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800362c:	d10b      	bne.n	8003646 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b80      	cmp	r3, #128	@ 0x80
 8003632:	d919      	bls.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2ba0      	cmp	r3, #160	@ 0xa0
 8003638:	d902      	bls.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800363a:	2302      	movs	r3, #2
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	e013      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003640:	2301      	movs	r3, #1
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	e010      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b80      	cmp	r3, #128	@ 0x80
 800364a:	d902      	bls.n	8003652 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800364c:	2303      	movs	r3, #3
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	e00a      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b80      	cmp	r3, #128	@ 0x80
 8003656:	d102      	bne.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003658:	2302      	movs	r3, #2
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e004      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b70      	cmp	r3, #112	@ 0x70
 8003662:	d101      	bne.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 0207 	bic.w	r2, r3, #7
 8003670:	4909      	ldr	r1, [pc, #36]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	429a      	cmp	r2, r3
 8003684:	d001      	beq.n	800368a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	40022000 	.word	0x40022000

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a8:	2300      	movs	r3, #0
 80036aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d041      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036c0:	d02a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036c6:	d824      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036cc:	d008      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036d2:	d81e      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036dc:	d010      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036de:	e018      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e0:	4b86      	ldr	r3, [pc, #536]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a85      	ldr	r2, [pc, #532]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036ec:	e015      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fabb 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fe:	e00c      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3320      	adds	r3, #32
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fba6 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	74fb      	strb	r3, [r7, #19]
      break;
 8003716:	e000      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003720:	4b76      	ldr	r3, [pc, #472]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372e:	4973      	ldr	r1, [pc, #460]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003736:	e001      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d041      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003750:	d02a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003752:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003756:	d824      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800375e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003762:	d81e      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800376c:	d010      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800376e:	e018      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003770:	4b62      	ldr	r3, [pc, #392]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a61      	ldr	r2, [pc, #388]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800377c:	e015      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fa73 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800378e:	e00c      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3320      	adds	r3, #32
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fb5e 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a0:	e003      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	74fb      	strb	r3, [r7, #19]
      break;
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037b0:	4b52      	ldr	r3, [pc, #328]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037be:	494f      	ldr	r1, [pc, #316]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037c6:	e001      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a0 	beq.w	800391a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037de:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	4a40      	ldr	r2, [pc, #256]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003800:	4b3e      	ldr	r3, [pc, #248]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4b3b      	ldr	r3, [pc, #236]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3a      	ldr	r2, [pc, #232]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800381c:	f7fd fa4c 	bl	8000cb8 <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003822:	e009      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fd fa48 	bl	8000cb8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	74fb      	strb	r3, [r7, #19]
        break;
 8003836:	e005      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003838:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ef      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d15c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003854:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01f      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	d019      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003868:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003872:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003874:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a20      	ldr	r2, [pc, #128]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003884:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003894:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d016      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fd fa07 	bl	8000cb8 <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ac:	e00b      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fd fa03 	bl	8000cb8 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d902      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	74fb      	strb	r3, [r7, #19]
            break;
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c6:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ec      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038da:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ea:	4904      	ldr	r1, [pc, #16]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038f2:	e009      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
 80038f8:	e006      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003908:	7c7b      	ldrb	r3, [r7, #17]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390e:	4b9e      	ldr	r3, [pc, #632]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	4a9d      	ldr	r2, [pc, #628]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003918:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003926:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f023 0203 	bic.w	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	4994      	ldr	r1, [pc, #592]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003948:	4b8f      	ldr	r3, [pc, #572]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f023 020c 	bic.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	498c      	ldr	r1, [pc, #560]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396a:	4b87      	ldr	r3, [pc, #540]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	4983      	ldr	r1, [pc, #524]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800398c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003992:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	497b      	ldr	r1, [pc, #492]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ae:	4b76      	ldr	r3, [pc, #472]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	4972      	ldr	r1, [pc, #456]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039de:	496a      	ldr	r1, [pc, #424]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f2:	4b65      	ldr	r3, [pc, #404]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a00:	4961      	ldr	r1, [pc, #388]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a14:	4b5c      	ldr	r3, [pc, #368]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	4959      	ldr	r1, [pc, #356]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a36:	4b54      	ldr	r3, [pc, #336]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	4950      	ldr	r1, [pc, #320]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a58:	4b4b      	ldr	r3, [pc, #300]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a66:	4948      	ldr	r1, [pc, #288]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7a:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a88:	493f      	ldr	r1, [pc, #252]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d028      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aaa:	4937      	ldr	r1, [pc, #220]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aba:	d106      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b32      	ldr	r3, [pc, #200]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a31      	ldr	r2, [pc, #196]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
 8003ac8:	e011      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f8c8 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d028      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003afa:	4b23      	ldr	r3, [pc, #140]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	491f      	ldr	r1, [pc, #124]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b24:	60d3      	str	r3, [r2, #12]
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2101      	movs	r1, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f899 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02b      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b66:	4908      	ldr	r1, [pc, #32]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b76:	d109      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a02      	ldr	r2, [pc, #8]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b82:	60d3      	str	r3, [r2, #12]
 8003b84:	e014      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f867 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d02f      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bca:	4928      	ldr	r1, [pc, #160]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	2102      	movs	r1, #2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f844 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d014      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	74bb      	strb	r3, [r7, #18]
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3320      	adds	r3, #32
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f925 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c36:	490d      	ldr	r1, [pc, #52]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c5a:	4904      	ldr	r1, [pc, #16]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c62:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000

08003c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c7e:	4b75      	ldr	r3, [pc, #468]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d018      	beq.n	8003cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c8a:	4b72      	ldr	r3, [pc, #456]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0203 	and.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d10d      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d047      	beq.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	e044      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d018      	beq.n	8003cf6 <RCCEx_PLLSAI1_Config+0x86>
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d825      	bhi.n	8003d14 <RCCEx_PLLSAI1_Config+0xa4>
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d002      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0x62>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d009      	beq.n	8003ce4 <RCCEx_PLLSAI1_Config+0x74>
 8003cd0:	e020      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd2:	4b60      	ldr	r3, [pc, #384]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11d      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce2:	e01a      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d116      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf4:	e013      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf6:	4b57      	ldr	r3, [pc, #348]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d02:	4b54      	ldr	r3, [pc, #336]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d12:	e006      	b.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      break;
 8003d18:	e004      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10d      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	4944      	ldr	r1, [pc, #272]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d17d      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d4c:	4b41      	ldr	r3, [pc, #260]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a40      	ldr	r2, [pc, #256]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fc ffae 	bl	8000cb8 <HAL_GetTick>
 8003d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d5e:	e009      	b.n	8003d74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d60:	f7fc ffaa 	bl	8000cb8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d902      	bls.n	8003d74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	73fb      	strb	r3, [r7, #15]
        break;
 8003d72:	e005      	b.n	8003d80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d74:	4b37      	ldr	r3, [pc, #220]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ef      	bne.n	8003d60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d160      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d8c:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6892      	ldr	r2, [r2, #8]
 8003d9c:	0211      	lsls	r1, r2, #8
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	0912      	lsrs	r2, r2, #4
 8003da4:	0452      	lsls	r2, r2, #17
 8003da6:	430a      	orrs	r2, r1
 8003da8:	492a      	ldr	r1, [pc, #168]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	610b      	str	r3, [r1, #16]
 8003dae:	e027      	b.n	8003e00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d112      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db6:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dbe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	0211      	lsls	r1, r2, #8
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6912      	ldr	r2, [r2, #16]
 8003dcc:	0852      	lsrs	r2, r2, #1
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	0552      	lsls	r2, r2, #21
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	491f      	ldr	r1, [pc, #124]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	610b      	str	r3, [r1, #16]
 8003dda:	e011      	b.n	8003e00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003de4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6892      	ldr	r2, [r2, #8]
 8003dec:	0211      	lsls	r1, r2, #8
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6952      	ldr	r2, [r2, #20]
 8003df2:	0852      	lsrs	r2, r2, #1
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0652      	lsls	r2, r2, #25
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	4916      	ldr	r1, [pc, #88]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e00:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fc ff54 	bl	8000cb8 <HAL_GetTick>
 8003e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e12:	e009      	b.n	8003e28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e14:	f7fc ff50 	bl	8000cb8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d902      	bls.n	8003e28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73fb      	strb	r3, [r7, #15]
          break;
 8003e26:	e005      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e28:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ef      	beq.n	8003e14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4904      	ldr	r1, [pc, #16]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000

08003e58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e66:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e72:	4b67      	ldr	r3, [pc, #412]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
       ||
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e8a:	4b61      	ldr	r3, [pc, #388]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
       ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d047      	beq.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e044      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d018      	beq.n	8003ede <RCCEx_PLLSAI2_Config+0x86>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d825      	bhi.n	8003efc <RCCEx_PLLSAI2_Config+0xa4>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <RCCEx_PLLSAI2_Config+0x62>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d009      	beq.n	8003ecc <RCCEx_PLLSAI2_Config+0x74>
 8003eb8:	e020      	b.n	8003efc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eba:	4b55      	ldr	r3, [pc, #340]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eca:	e01a      	b.n	8003f02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ecc:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003edc:	e013      	b.n	8003f06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ede:	4b4c      	ldr	r3, [pc, #304]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eea:	4b49      	ldr	r3, [pc, #292]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efa:	e006      	b.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      break;
 8003f00:	e004      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f12:	4b3f      	ldr	r3, [pc, #252]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	430b      	orrs	r3, r1
 8003f28:	4939      	ldr	r1, [pc, #228]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d167      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a35      	ldr	r2, [pc, #212]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fc feba 	bl	8000cb8 <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f48:	f7fc feb6 	bl	8000cb8 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ef      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d14a      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d111      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f74:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	0211      	lsls	r1, r2, #8
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	0912      	lsrs	r2, r2, #4
 8003f8c:	0452      	lsls	r2, r2, #17
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	491f      	ldr	r1, [pc, #124]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	614b      	str	r3, [r1, #20]
 8003f96:	e011      	b.n	8003fbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f98:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fa0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6892      	ldr	r2, [r2, #8]
 8003fa8:	0211      	lsls	r1, r2, #8
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6912      	ldr	r2, [r2, #16]
 8003fae:	0852      	lsrs	r2, r2, #1
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0652      	lsls	r2, r2, #25
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	4916      	ldr	r1, [pc, #88]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fbc:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fc fe76 	bl	8000cb8 <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fce:	e009      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fd0:	f7fc fe72 	bl	8000cb8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d902      	bls.n	8003fe4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8003fe2:	e005      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ef      	beq.n	8003fd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4904      	ldr	r1, [pc, #16]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e040      	b.n	80040a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc fc66 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	@ 0x24
 8004040:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fb6a 	bl	8004734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f8af 	bl	80041c4 <UART_SetConfig>
 8004066:	4603      	mov	r3, r0
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e01b      	b.n	80040a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800407e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800408e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fbe9 	bl	8004878 <UART_CheckIdleState>
 80040a6:	4603      	mov	r3, r0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	@ 0x28
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d177      	bne.n	80041b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_UART_Transmit+0x24>
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e070      	b.n	80041ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2221      	movs	r2, #33	@ 0x21
 80040e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e6:	f7fc fde7 	bl	8000cb8 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004104:	d108      	bne.n	8004118 <HAL_UART_Transmit+0x68>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d104      	bne.n	8004118 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	e003      	b.n	8004120 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004120:	e02f      	b.n	8004182 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	2180      	movs	r1, #128	@ 0x80
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fc4b 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e03b      	b.n	80041ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	881a      	ldrh	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004154:	b292      	uxth	r2, r2
 8004156:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	3302      	adds	r3, #2
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e007      	b.n	8004170 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1c9      	bne.n	8004122 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	2140      	movs	r1, #64	@ 0x40
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fc15 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e005      	b.n	80041ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c8:	b08a      	sub	sp, #40	@ 0x28
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4ba4      	ldr	r3, [pc, #656]	@ (8004484 <UART_SetConfig+0x2c0>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a99      	ldr	r2, [pc, #612]	@ (8004488 <UART_SetConfig+0x2c4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422c:	4313      	orrs	r3, r2
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a90      	ldr	r2, [pc, #576]	@ (800448c <UART_SetConfig+0x2c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d126      	bne.n	800429c <UART_SetConfig+0xd8>
 800424e:	4b90      	ldr	r3, [pc, #576]	@ (8004490 <UART_SetConfig+0x2cc>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b03      	cmp	r3, #3
 800425a:	d81b      	bhi.n	8004294 <UART_SetConfig+0xd0>
 800425c:	a201      	add	r2, pc, #4	@ (adr r2, 8004264 <UART_SetConfig+0xa0>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004275 	.word	0x08004275
 8004268:	08004285 	.word	0x08004285
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800428d 	.word	0x0800428d
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427a:	e116      	b.n	80044aa <UART_SetConfig+0x2e6>
 800427c:	2302      	movs	r3, #2
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004282:	e112      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004284:	2304      	movs	r3, #4
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428a:	e10e      	b.n	80044aa <UART_SetConfig+0x2e6>
 800428c:	2308      	movs	r3, #8
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004292:	e10a      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004294:	2310      	movs	r3, #16
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429a:	e106      	b.n	80044aa <UART_SetConfig+0x2e6>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7c      	ldr	r2, [pc, #496]	@ (8004494 <UART_SetConfig+0x2d0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d138      	bne.n	8004318 <UART_SetConfig+0x154>
 80042a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004490 <UART_SetConfig+0x2cc>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d82d      	bhi.n	8004310 <UART_SetConfig+0x14c>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <UART_SetConfig+0xf8>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	08004311 	.word	0x08004311
 80042c4:	08004311 	.word	0x08004311
 80042c8:	08004311 	.word	0x08004311
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004311 	.word	0x08004311
 80042d8:	08004311 	.word	0x08004311
 80042dc:	080042f9 	.word	0x080042f9
 80042e0:	08004311 	.word	0x08004311
 80042e4:	08004311 	.word	0x08004311
 80042e8:	08004311 	.word	0x08004311
 80042ec:	08004309 	.word	0x08004309
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f6:	e0d8      	b.n	80044aa <UART_SetConfig+0x2e6>
 80042f8:	2302      	movs	r3, #2
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042fe:	e0d4      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004300:	2304      	movs	r3, #4
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004306:	e0d0      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004308:	2308      	movs	r3, #8
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430e:	e0cc      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004310:	2310      	movs	r3, #16
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004316:	e0c8      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a5e      	ldr	r2, [pc, #376]	@ (8004498 <UART_SetConfig+0x2d4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d125      	bne.n	800436e <UART_SetConfig+0x1aa>
 8004322:	4b5b      	ldr	r3, [pc, #364]	@ (8004490 <UART_SetConfig+0x2cc>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800432c:	2b30      	cmp	r3, #48	@ 0x30
 800432e:	d016      	beq.n	800435e <UART_SetConfig+0x19a>
 8004330:	2b30      	cmp	r3, #48	@ 0x30
 8004332:	d818      	bhi.n	8004366 <UART_SetConfig+0x1a2>
 8004334:	2b20      	cmp	r3, #32
 8004336:	d00a      	beq.n	800434e <UART_SetConfig+0x18a>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d814      	bhi.n	8004366 <UART_SetConfig+0x1a2>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <UART_SetConfig+0x182>
 8004340:	2b10      	cmp	r3, #16
 8004342:	d008      	beq.n	8004356 <UART_SetConfig+0x192>
 8004344:	e00f      	b.n	8004366 <UART_SetConfig+0x1a2>
 8004346:	2300      	movs	r3, #0
 8004348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434c:	e0ad      	b.n	80044aa <UART_SetConfig+0x2e6>
 800434e:	2302      	movs	r3, #2
 8004350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004354:	e0a9      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004356:	2304      	movs	r3, #4
 8004358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435c:	e0a5      	b.n	80044aa <UART_SetConfig+0x2e6>
 800435e:	2308      	movs	r3, #8
 8004360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004364:	e0a1      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004366:	2310      	movs	r3, #16
 8004368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436c:	e09d      	b.n	80044aa <UART_SetConfig+0x2e6>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a4a      	ldr	r2, [pc, #296]	@ (800449c <UART_SetConfig+0x2d8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d125      	bne.n	80043c4 <UART_SetConfig+0x200>
 8004378:	4b45      	ldr	r3, [pc, #276]	@ (8004490 <UART_SetConfig+0x2cc>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004382:	2bc0      	cmp	r3, #192	@ 0xc0
 8004384:	d016      	beq.n	80043b4 <UART_SetConfig+0x1f0>
 8004386:	2bc0      	cmp	r3, #192	@ 0xc0
 8004388:	d818      	bhi.n	80043bc <UART_SetConfig+0x1f8>
 800438a:	2b80      	cmp	r3, #128	@ 0x80
 800438c:	d00a      	beq.n	80043a4 <UART_SetConfig+0x1e0>
 800438e:	2b80      	cmp	r3, #128	@ 0x80
 8004390:	d814      	bhi.n	80043bc <UART_SetConfig+0x1f8>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <UART_SetConfig+0x1d8>
 8004396:	2b40      	cmp	r3, #64	@ 0x40
 8004398:	d008      	beq.n	80043ac <UART_SetConfig+0x1e8>
 800439a:	e00f      	b.n	80043bc <UART_SetConfig+0x1f8>
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a2:	e082      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043aa:	e07e      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b2:	e07a      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ba:	e076      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e072      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a35      	ldr	r2, [pc, #212]	@ (80044a0 <UART_SetConfig+0x2dc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d12a      	bne.n	8004424 <UART_SetConfig+0x260>
 80043ce:	4b30      	ldr	r3, [pc, #192]	@ (8004490 <UART_SetConfig+0x2cc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043dc:	d01a      	beq.n	8004414 <UART_SetConfig+0x250>
 80043de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e2:	d81b      	bhi.n	800441c <UART_SetConfig+0x258>
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e8:	d00c      	beq.n	8004404 <UART_SetConfig+0x240>
 80043ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ee:	d815      	bhi.n	800441c <UART_SetConfig+0x258>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <UART_SetConfig+0x238>
 80043f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f8:	d008      	beq.n	800440c <UART_SetConfig+0x248>
 80043fa:	e00f      	b.n	800441c <UART_SetConfig+0x258>
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004402:	e052      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440a:	e04e      	b.n	80044aa <UART_SetConfig+0x2e6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004412:	e04a      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441a:	e046      	b.n	80044aa <UART_SetConfig+0x2e6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004422:	e042      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	@ (8004488 <UART_SetConfig+0x2c4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d13a      	bne.n	80044a4 <UART_SetConfig+0x2e0>
 800442e:	4b18      	ldr	r3, [pc, #96]	@ (8004490 <UART_SetConfig+0x2cc>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004438:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800443c:	d01a      	beq.n	8004474 <UART_SetConfig+0x2b0>
 800443e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004442:	d81b      	bhi.n	800447c <UART_SetConfig+0x2b8>
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004448:	d00c      	beq.n	8004464 <UART_SetConfig+0x2a0>
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800444e:	d815      	bhi.n	800447c <UART_SetConfig+0x2b8>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <UART_SetConfig+0x298>
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004458:	d008      	beq.n	800446c <UART_SetConfig+0x2a8>
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x2b8>
 800445c:	2300      	movs	r3, #0
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004462:	e022      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004464:	2302      	movs	r3, #2
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446a:	e01e      	b.n	80044aa <UART_SetConfig+0x2e6>
 800446c:	2304      	movs	r3, #4
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004472:	e01a      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004474:	2308      	movs	r3, #8
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447a:	e016      	b.n	80044aa <UART_SetConfig+0x2e6>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004482:	e012      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004484:	efff69f3 	.word	0xefff69f3
 8004488:	40008000 	.word	0x40008000
 800448c:	40013800 	.word	0x40013800
 8004490:	40021000 	.word	0x40021000
 8004494:	40004400 	.word	0x40004400
 8004498:	40004800 	.word	0x40004800
 800449c:	40004c00 	.word	0x40004c00
 80044a0:	40005000 	.word	0x40005000
 80044a4:	2310      	movs	r3, #16
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a9f      	ldr	r2, [pc, #636]	@ (800472c <UART_SetConfig+0x568>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d17a      	bne.n	80045aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d824      	bhi.n	8004506 <UART_SetConfig+0x342>
 80044bc:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0x300>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	08004507 	.word	0x08004507
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	08004507 	.word	0x08004507
 80044d4:	080044f7 	.word	0x080044f7
 80044d8:	08004507 	.word	0x08004507
 80044dc:	08004507 	.word	0x08004507
 80044e0:	08004507 	.word	0x08004507
 80044e4:	080044ff 	.word	0x080044ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7ff f84c 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 80044ec:	61f8      	str	r0, [r7, #28]
        break;
 80044ee:	e010      	b.n	8004512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004730 <UART_SetConfig+0x56c>)
 80044f2:	61fb      	str	r3, [r7, #28]
        break;
 80044f4:	e00d      	b.n	8004512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f6:	f7fe ffad 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 80044fa:	61f8      	str	r0, [r7, #28]
        break;
 80044fc:	e009      	b.n	8004512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004502:	61fb      	str	r3, [r7, #28]
        break;
 8004504:	e005      	b.n	8004512 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80fb 	beq.w	8004710 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	429a      	cmp	r2, r3
 8004528:	d305      	bcc.n	8004536 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	429a      	cmp	r2, r3
 8004534:	d903      	bls.n	800453e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800453c:	e0e8      	b.n	8004710 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2200      	movs	r2, #0
 8004542:	461c      	mov	r4, r3
 8004544:	4615      	mov	r5, r2
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	022b      	lsls	r3, r5, #8
 8004550:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004554:	0222      	lsls	r2, r4, #8
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	6849      	ldr	r1, [r1, #4]
 800455a:	0849      	lsrs	r1, r1, #1
 800455c:	2000      	movs	r0, #0
 800455e:	4688      	mov	r8, r1
 8004560:	4681      	mov	r9, r0
 8004562:	eb12 0a08 	adds.w	sl, r2, r8
 8004566:	eb43 0b09 	adc.w	fp, r3, r9
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004578:	4650      	mov	r0, sl
 800457a:	4659      	mov	r1, fp
 800457c:	f7fb fe24 	bl	80001c8 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800458e:	d308      	bcc.n	80045a2 <UART_SetConfig+0x3de>
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004596:	d204      	bcs.n	80045a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	e0b6      	b.n	8004710 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045a8:	e0b2      	b.n	8004710 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b2:	d15e      	bne.n	8004672 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d828      	bhi.n	800460e <UART_SetConfig+0x44a>
 80045bc:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <UART_SetConfig+0x400>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	0800460f 	.word	0x0800460f
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	0800460f 	.word	0x0800460f
 80045e0:	0800460f 	.word	0x0800460f
 80045e4:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7fe ffcc 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 80045ec:	61f8      	str	r0, [r7, #28]
        break;
 80045ee:	e014      	b.n	800461a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7fe ffde 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 80045f4:	61f8      	str	r0, [r7, #28]
        break;
 80045f6:	e010      	b.n	800461a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004730 <UART_SetConfig+0x56c>)
 80045fa:	61fb      	str	r3, [r7, #28]
        break;
 80045fc:	e00d      	b.n	800461a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7fe ff29 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8004602:	61f8      	str	r0, [r7, #28]
        break;
 8004604:	e009      	b.n	800461a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800460a:	61fb      	str	r3, [r7, #28]
        break;
 800460c:	e005      	b.n	800461a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d077      	beq.n	8004710 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	005a      	lsls	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	441a      	add	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b0f      	cmp	r3, #15
 800463a:	d916      	bls.n	800466a <UART_SetConfig+0x4a6>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004642:	d212      	bcs.n	800466a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f023 030f 	bic.w	r3, r3, #15
 800464c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	b29b      	uxth	r3, r3
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	b29a      	uxth	r2, r3
 800465a:	8afb      	ldrh	r3, [r7, #22]
 800465c:	4313      	orrs	r3, r2
 800465e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	8afa      	ldrh	r2, [r7, #22]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e052      	b.n	8004710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004670:	e04e      	b.n	8004710 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004676:	2b08      	cmp	r3, #8
 8004678:	d827      	bhi.n	80046ca <UART_SetConfig+0x506>
 800467a:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <UART_SetConfig+0x4bc>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	080046cb 	.word	0x080046cb
 8004690:	080046bb 	.word	0x080046bb
 8004694:	080046cb 	.word	0x080046cb
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046cb 	.word	0x080046cb
 80046a0:	080046c3 	.word	0x080046c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe ff6e 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 80046a8:	61f8      	str	r0, [r7, #28]
        break;
 80046aa:	e014      	b.n	80046d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ac:	f7fe ff80 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 80046b0:	61f8      	str	r0, [r7, #28]
        break;
 80046b2:	e010      	b.n	80046d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004730 <UART_SetConfig+0x56c>)
 80046b6:	61fb      	str	r3, [r7, #28]
        break;
 80046b8:	e00d      	b.n	80046d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ba:	f7fe fecb 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 80046be:	61f8      	str	r0, [r7, #28]
        break;
 80046c0:	e009      	b.n	80046d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c6:	61fb      	str	r3, [r7, #28]
        break;
 80046c8:	e005      	b.n	80046d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046d4:	bf00      	nop
    }

    if (pclk != 0U)
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d019      	beq.n	8004710 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	085a      	lsrs	r2, r3, #1
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	441a      	add	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d909      	bls.n	800470a <UART_SetConfig+0x546>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046fc:	d205      	bcs.n	800470a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e002      	b.n	8004710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800471c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004720:	4618      	mov	r0, r3
 8004722:	3728      	adds	r7, #40	@ 0x28
 8004724:	46bd      	mov	sp, r7
 8004726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472a:	bf00      	nop
 800472c:	40008000 	.word	0x40008000
 8004730:	00f42400 	.word	0x00f42400

08004734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01a      	beq.n	800484a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004832:	d10a      	bne.n	800484a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b098      	sub	sp, #96	@ 0x60
 800487c:	af02      	add	r7, sp, #8
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004888:	f7fc fa16 	bl	8000cb8 <HAL_GetTick>
 800488c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d12e      	bne.n	80048fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800489c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a4:	2200      	movs	r2, #0
 80048a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f88c 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d021      	beq.n	80048fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e6      	bne.n	80048b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e062      	b.n	80049c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d149      	bne.n	800499c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004910:	2200      	movs	r2, #0
 8004912:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f856 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03c      	beq.n	800499c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	623b      	str	r3, [r7, #32]
   return(result);
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004940:	633b      	str	r3, [r7, #48]	@ 0x30
 8004942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800494e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e6      	bne.n	8004922 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3308      	adds	r3, #8
 800495a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	60fb      	str	r3, [r7, #12]
   return(result);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004974:	61fa      	str	r2, [r7, #28]
 8004976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	69b9      	ldr	r1, [r7, #24]
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	617b      	str	r3, [r7, #20]
   return(result);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e5      	bne.n	8004954 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e011      	b.n	80049c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3758      	adds	r7, #88	@ 0x58
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d8:	e049      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d045      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e2:	f7fc f969 	bl	8000cb8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e048      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d031      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d110      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f838 	bl	8004a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e029      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a48:	d111      	bne.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f81e 	bl	8004a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e00f      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4013      	ands	r3, r2
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	bf0c      	ite	eq
 8004a7e:	2301      	moveq	r3, #1
 8004a80:	2300      	movne	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d0a6      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b095      	sub	sp, #84	@ 0x54
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004abe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d118      	bne.n	8004b3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f023 0310 	bic.w	r3, r3, #16
 8004b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6979      	ldr	r1, [r7, #20]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	613b      	str	r3, [r7, #16]
   return(result);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e6      	bne.n	8004b0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b52:	bf00      	nop
 8004b54:	3754      	adds	r7, #84	@ 0x54
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <std>:
 8004b60:	2300      	movs	r3, #0
 8004b62:	b510      	push	{r4, lr}
 8004b64:	4604      	mov	r4, r0
 8004b66:	e9c0 3300 	strd	r3, r3, [r0]
 8004b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b6e:	6083      	str	r3, [r0, #8]
 8004b70:	8181      	strh	r1, [r0, #12]
 8004b72:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b74:	81c2      	strh	r2, [r0, #14]
 8004b76:	6183      	str	r3, [r0, #24]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	305c      	adds	r0, #92	@ 0x5c
 8004b7e:	f000 f9e7 	bl	8004f50 <memset>
 8004b82:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <std+0x58>)
 8004b84:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <std+0x5c>)
 8004b88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <std+0x60>)
 8004b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <std+0x64>)
 8004b90:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b92:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <std+0x68>)
 8004b94:	6224      	str	r4, [r4, #32]
 8004b96:	429c      	cmp	r4, r3
 8004b98:	d006      	beq.n	8004ba8 <std+0x48>
 8004b9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b9e:	4294      	cmp	r4, r2
 8004ba0:	d002      	beq.n	8004ba8 <std+0x48>
 8004ba2:	33d0      	adds	r3, #208	@ 0xd0
 8004ba4:	429c      	cmp	r4, r3
 8004ba6:	d105      	bne.n	8004bb4 <std+0x54>
 8004ba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb0:	f000 ba46 	b.w	8005040 <__retarget_lock_init_recursive>
 8004bb4:	bd10      	pop	{r4, pc}
 8004bb6:	bf00      	nop
 8004bb8:	08004da1 	.word	0x08004da1
 8004bbc:	08004dc3 	.word	0x08004dc3
 8004bc0:	08004dfb 	.word	0x08004dfb
 8004bc4:	08004e1f 	.word	0x08004e1f
 8004bc8:	200021c0 	.word	0x200021c0

08004bcc <stdio_exit_handler>:
 8004bcc:	4a02      	ldr	r2, [pc, #8]	@ (8004bd8 <stdio_exit_handler+0xc>)
 8004bce:	4903      	ldr	r1, [pc, #12]	@ (8004bdc <stdio_exit_handler+0x10>)
 8004bd0:	4803      	ldr	r0, [pc, #12]	@ (8004be0 <stdio_exit_handler+0x14>)
 8004bd2:	f000 b869 	b.w	8004ca8 <_fwalk_sglue>
 8004bd6:	bf00      	nop
 8004bd8:	2000000c 	.word	0x2000000c
 8004bdc:	08005341 	.word	0x08005341
 8004be0:	2000001c 	.word	0x2000001c

08004be4 <cleanup_stdio>:
 8004be4:	6841      	ldr	r1, [r0, #4]
 8004be6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <cleanup_stdio+0x34>)
 8004be8:	4299      	cmp	r1, r3
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	d001      	beq.n	8004bf4 <cleanup_stdio+0x10>
 8004bf0:	f000 fba6 	bl	8005340 <_fflush_r>
 8004bf4:	68a1      	ldr	r1, [r4, #8]
 8004bf6:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <cleanup_stdio+0x38>)
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	d002      	beq.n	8004c02 <cleanup_stdio+0x1e>
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f000 fb9f 	bl	8005340 <_fflush_r>
 8004c02:	68e1      	ldr	r1, [r4, #12]
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <cleanup_stdio+0x3c>)
 8004c06:	4299      	cmp	r1, r3
 8004c08:	d004      	beq.n	8004c14 <cleanup_stdio+0x30>
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c10:	f000 bb96 	b.w	8005340 <_fflush_r>
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	bf00      	nop
 8004c18:	200021c0 	.word	0x200021c0
 8004c1c:	20002228 	.word	0x20002228
 8004c20:	20002290 	.word	0x20002290

08004c24 <global_stdio_init.part.0>:
 8004c24:	b510      	push	{r4, lr}
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <global_stdio_init.part.0+0x30>)
 8004c28:	4c0b      	ldr	r4, [pc, #44]	@ (8004c58 <global_stdio_init.part.0+0x34>)
 8004c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c5c <global_stdio_init.part.0+0x38>)
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	4620      	mov	r0, r4
 8004c30:	2200      	movs	r2, #0
 8004c32:	2104      	movs	r1, #4
 8004c34:	f7ff ff94 	bl	8004b60 <std>
 8004c38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	2109      	movs	r1, #9
 8004c40:	f7ff ff8e 	bl	8004b60 <std>
 8004c44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c48:	2202      	movs	r2, #2
 8004c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c4e:	2112      	movs	r1, #18
 8004c50:	f7ff bf86 	b.w	8004b60 <std>
 8004c54:	200022f8 	.word	0x200022f8
 8004c58:	200021c0 	.word	0x200021c0
 8004c5c:	08004bcd 	.word	0x08004bcd

08004c60 <__sfp_lock_acquire>:
 8004c60:	4801      	ldr	r0, [pc, #4]	@ (8004c68 <__sfp_lock_acquire+0x8>)
 8004c62:	f000 b9ee 	b.w	8005042 <__retarget_lock_acquire_recursive>
 8004c66:	bf00      	nop
 8004c68:	20002301 	.word	0x20002301

08004c6c <__sfp_lock_release>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	@ (8004c74 <__sfp_lock_release+0x8>)
 8004c6e:	f000 b9e9 	b.w	8005044 <__retarget_lock_release_recursive>
 8004c72:	bf00      	nop
 8004c74:	20002301 	.word	0x20002301

08004c78 <__sinit>:
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	f7ff fff0 	bl	8004c60 <__sfp_lock_acquire>
 8004c80:	6a23      	ldr	r3, [r4, #32]
 8004c82:	b11b      	cbz	r3, 8004c8c <__sinit+0x14>
 8004c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c88:	f7ff bff0 	b.w	8004c6c <__sfp_lock_release>
 8004c8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ca0 <__sinit+0x28>)
 8004c8e:	6223      	str	r3, [r4, #32]
 8004c90:	4b04      	ldr	r3, [pc, #16]	@ (8004ca4 <__sinit+0x2c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f5      	bne.n	8004c84 <__sinit+0xc>
 8004c98:	f7ff ffc4 	bl	8004c24 <global_stdio_init.part.0>
 8004c9c:	e7f2      	b.n	8004c84 <__sinit+0xc>
 8004c9e:	bf00      	nop
 8004ca0:	08004be5 	.word	0x08004be5
 8004ca4:	200022f8 	.word	0x200022f8

08004ca8 <_fwalk_sglue>:
 8004ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cac:	4607      	mov	r7, r0
 8004cae:	4688      	mov	r8, r1
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	2600      	movs	r6, #0
 8004cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8004cbc:	d505      	bpl.n	8004cca <_fwalk_sglue+0x22>
 8004cbe:	6824      	ldr	r4, [r4, #0]
 8004cc0:	2c00      	cmp	r4, #0
 8004cc2:	d1f7      	bne.n	8004cb4 <_fwalk_sglue+0xc>
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cca:	89ab      	ldrh	r3, [r5, #12]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d907      	bls.n	8004ce0 <_fwalk_sglue+0x38>
 8004cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	d003      	beq.n	8004ce0 <_fwalk_sglue+0x38>
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4638      	mov	r0, r7
 8004cdc:	47c0      	blx	r8
 8004cde:	4306      	orrs	r6, r0
 8004ce0:	3568      	adds	r5, #104	@ 0x68
 8004ce2:	e7e9      	b.n	8004cb8 <_fwalk_sglue+0x10>

08004ce4 <_puts_r>:
 8004ce4:	6a03      	ldr	r3, [r0, #32]
 8004ce6:	b570      	push	{r4, r5, r6, lr}
 8004ce8:	6884      	ldr	r4, [r0, #8]
 8004cea:	4605      	mov	r5, r0
 8004cec:	460e      	mov	r6, r1
 8004cee:	b90b      	cbnz	r3, 8004cf4 <_puts_r+0x10>
 8004cf0:	f7ff ffc2 	bl	8004c78 <__sinit>
 8004cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cf6:	07db      	lsls	r3, r3, #31
 8004cf8:	d405      	bmi.n	8004d06 <_puts_r+0x22>
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	0598      	lsls	r0, r3, #22
 8004cfe:	d402      	bmi.n	8004d06 <_puts_r+0x22>
 8004d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d02:	f000 f99e 	bl	8005042 <__retarget_lock_acquire_recursive>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	0719      	lsls	r1, r3, #28
 8004d0a:	d502      	bpl.n	8004d12 <_puts_r+0x2e>
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d135      	bne.n	8004d7e <_puts_r+0x9a>
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 f8c5 	bl	8004ea4 <__swsetup_r>
 8004d1a:	b380      	cbz	r0, 8004d7e <_puts_r+0x9a>
 8004d1c:	f04f 35ff 	mov.w	r5, #4294967295
 8004d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d22:	07da      	lsls	r2, r3, #31
 8004d24:	d405      	bmi.n	8004d32 <_puts_r+0x4e>
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	059b      	lsls	r3, r3, #22
 8004d2a:	d402      	bmi.n	8004d32 <_puts_r+0x4e>
 8004d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d2e:	f000 f989 	bl	8005044 <__retarget_lock_release_recursive>
 8004d32:	4628      	mov	r0, r5
 8004d34:	bd70      	pop	{r4, r5, r6, pc}
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da04      	bge.n	8004d44 <_puts_r+0x60>
 8004d3a:	69a2      	ldr	r2, [r4, #24]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	dc17      	bgt.n	8004d70 <_puts_r+0x8c>
 8004d40:	290a      	cmp	r1, #10
 8004d42:	d015      	beq.n	8004d70 <_puts_r+0x8c>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	6022      	str	r2, [r4, #0]
 8004d4a:	7019      	strb	r1, [r3, #0]
 8004d4c:	68a3      	ldr	r3, [r4, #8]
 8004d4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d52:	3b01      	subs	r3, #1
 8004d54:	60a3      	str	r3, [r4, #8]
 8004d56:	2900      	cmp	r1, #0
 8004d58:	d1ed      	bne.n	8004d36 <_puts_r+0x52>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da11      	bge.n	8004d82 <_puts_r+0x9e>
 8004d5e:	4622      	mov	r2, r4
 8004d60:	210a      	movs	r1, #10
 8004d62:	4628      	mov	r0, r5
 8004d64:	f000 f85f 	bl	8004e26 <__swbuf_r>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d0d7      	beq.n	8004d1c <_puts_r+0x38>
 8004d6c:	250a      	movs	r5, #10
 8004d6e:	e7d7      	b.n	8004d20 <_puts_r+0x3c>
 8004d70:	4622      	mov	r2, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 f857 	bl	8004e26 <__swbuf_r>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d1e7      	bne.n	8004d4c <_puts_r+0x68>
 8004d7c:	e7ce      	b.n	8004d1c <_puts_r+0x38>
 8004d7e:	3e01      	subs	r6, #1
 8004d80:	e7e4      	b.n	8004d4c <_puts_r+0x68>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	6022      	str	r2, [r4, #0]
 8004d88:	220a      	movs	r2, #10
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e7ee      	b.n	8004d6c <_puts_r+0x88>
	...

08004d90 <puts>:
 8004d90:	4b02      	ldr	r3, [pc, #8]	@ (8004d9c <puts+0xc>)
 8004d92:	4601      	mov	r1, r0
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	f7ff bfa5 	b.w	8004ce4 <_puts_r>
 8004d9a:	bf00      	nop
 8004d9c:	20000018 	.word	0x20000018

08004da0 <__sread>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	460c      	mov	r4, r1
 8004da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da8:	f000 f8fc 	bl	8004fa4 <_read_r>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	bfab      	itete	ge
 8004db0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004db2:	89a3      	ldrhlt	r3, [r4, #12]
 8004db4:	181b      	addge	r3, r3, r0
 8004db6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dba:	bfac      	ite	ge
 8004dbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004dbe:	81a3      	strhlt	r3, [r4, #12]
 8004dc0:	bd10      	pop	{r4, pc}

08004dc2 <__swrite>:
 8004dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc6:	461f      	mov	r7, r3
 8004dc8:	898b      	ldrh	r3, [r1, #12]
 8004dca:	05db      	lsls	r3, r3, #23
 8004dcc:	4605      	mov	r5, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4616      	mov	r6, r2
 8004dd2:	d505      	bpl.n	8004de0 <__swrite+0x1e>
 8004dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd8:	2302      	movs	r3, #2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f000 f8d0 	bl	8004f80 <_lseek_r>
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	4632      	mov	r2, r6
 8004dee:	463b      	mov	r3, r7
 8004df0:	4628      	mov	r0, r5
 8004df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	f000 b8e7 	b.w	8004fc8 <_write_r>

08004dfa <__sseek>:
 8004dfa:	b510      	push	{r4, lr}
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e02:	f000 f8bd 	bl	8004f80 <_lseek_r>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	bf15      	itete	ne
 8004e0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e16:	81a3      	strheq	r3, [r4, #12]
 8004e18:	bf18      	it	ne
 8004e1a:	81a3      	strhne	r3, [r4, #12]
 8004e1c:	bd10      	pop	{r4, pc}

08004e1e <__sclose>:
 8004e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e22:	f000 b89d 	b.w	8004f60 <_close_r>

08004e26 <__swbuf_r>:
 8004e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e28:	460e      	mov	r6, r1
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	b118      	cbz	r0, 8004e38 <__swbuf_r+0x12>
 8004e30:	6a03      	ldr	r3, [r0, #32]
 8004e32:	b90b      	cbnz	r3, 8004e38 <__swbuf_r+0x12>
 8004e34:	f7ff ff20 	bl	8004c78 <__sinit>
 8004e38:	69a3      	ldr	r3, [r4, #24]
 8004e3a:	60a3      	str	r3, [r4, #8]
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	071a      	lsls	r2, r3, #28
 8004e40:	d501      	bpl.n	8004e46 <__swbuf_r+0x20>
 8004e42:	6923      	ldr	r3, [r4, #16]
 8004e44:	b943      	cbnz	r3, 8004e58 <__swbuf_r+0x32>
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f82b 	bl	8004ea4 <__swsetup_r>
 8004e4e:	b118      	cbz	r0, 8004e58 <__swbuf_r+0x32>
 8004e50:	f04f 37ff 	mov.w	r7, #4294967295
 8004e54:	4638      	mov	r0, r7
 8004e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	6922      	ldr	r2, [r4, #16]
 8004e5c:	1a98      	subs	r0, r3, r2
 8004e5e:	6963      	ldr	r3, [r4, #20]
 8004e60:	b2f6      	uxtb	r6, r6
 8004e62:	4283      	cmp	r3, r0
 8004e64:	4637      	mov	r7, r6
 8004e66:	dc05      	bgt.n	8004e74 <__swbuf_r+0x4e>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 fa68 	bl	8005340 <_fflush_r>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d1ed      	bne.n	8004e50 <__swbuf_r+0x2a>
 8004e74:	68a3      	ldr	r3, [r4, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	60a3      	str	r3, [r4, #8]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	6022      	str	r2, [r4, #0]
 8004e80:	701e      	strb	r6, [r3, #0]
 8004e82:	6962      	ldr	r2, [r4, #20]
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d004      	beq.n	8004e94 <__swbuf_r+0x6e>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	07db      	lsls	r3, r3, #31
 8004e8e:	d5e1      	bpl.n	8004e54 <__swbuf_r+0x2e>
 8004e90:	2e0a      	cmp	r6, #10
 8004e92:	d1df      	bne.n	8004e54 <__swbuf_r+0x2e>
 8004e94:	4621      	mov	r1, r4
 8004e96:	4628      	mov	r0, r5
 8004e98:	f000 fa52 	bl	8005340 <_fflush_r>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d0d9      	beq.n	8004e54 <__swbuf_r+0x2e>
 8004ea0:	e7d6      	b.n	8004e50 <__swbuf_r+0x2a>
	...

08004ea4 <__swsetup_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4b29      	ldr	r3, [pc, #164]	@ (8004f4c <__swsetup_r+0xa8>)
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	460c      	mov	r4, r1
 8004eae:	b118      	cbz	r0, 8004eb8 <__swsetup_r+0x14>
 8004eb0:	6a03      	ldr	r3, [r0, #32]
 8004eb2:	b90b      	cbnz	r3, 8004eb8 <__swsetup_r+0x14>
 8004eb4:	f7ff fee0 	bl	8004c78 <__sinit>
 8004eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ebc:	0719      	lsls	r1, r3, #28
 8004ebe:	d422      	bmi.n	8004f06 <__swsetup_r+0x62>
 8004ec0:	06da      	lsls	r2, r3, #27
 8004ec2:	d407      	bmi.n	8004ed4 <__swsetup_r+0x30>
 8004ec4:	2209      	movs	r2, #9
 8004ec6:	602a      	str	r2, [r5, #0]
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed2:	e033      	b.n	8004f3c <__swsetup_r+0x98>
 8004ed4:	0758      	lsls	r0, r3, #29
 8004ed6:	d512      	bpl.n	8004efe <__swsetup_r+0x5a>
 8004ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eda:	b141      	cbz	r1, 8004eee <__swsetup_r+0x4a>
 8004edc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d002      	beq.n	8004eea <__swsetup_r+0x46>
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 f8af 	bl	8005048 <_free_r>
 8004eea:	2300      	movs	r3, #0
 8004eec:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	b94b      	cbnz	r3, 8004f1e <__swsetup_r+0x7a>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f14:	d003      	beq.n	8004f1e <__swsetup_r+0x7a>
 8004f16:	4621      	mov	r1, r4
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f000 fa5f 	bl	80053dc <__smakebuf_r>
 8004f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f22:	f013 0201 	ands.w	r2, r3, #1
 8004f26:	d00a      	beq.n	8004f3e <__swsetup_r+0x9a>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60a2      	str	r2, [r4, #8]
 8004f2c:	6962      	ldr	r2, [r4, #20]
 8004f2e:	4252      	negs	r2, r2
 8004f30:	61a2      	str	r2, [r4, #24]
 8004f32:	6922      	ldr	r2, [r4, #16]
 8004f34:	b942      	cbnz	r2, 8004f48 <__swsetup_r+0xa4>
 8004f36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f3a:	d1c5      	bne.n	8004ec8 <__swsetup_r+0x24>
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
 8004f3e:	0799      	lsls	r1, r3, #30
 8004f40:	bf58      	it	pl
 8004f42:	6962      	ldrpl	r2, [r4, #20]
 8004f44:	60a2      	str	r2, [r4, #8]
 8004f46:	e7f4      	b.n	8004f32 <__swsetup_r+0x8e>
 8004f48:	2000      	movs	r0, #0
 8004f4a:	e7f7      	b.n	8004f3c <__swsetup_r+0x98>
 8004f4c:	20000018 	.word	0x20000018

08004f50 <memset>:
 8004f50:	4402      	add	r2, r0
 8004f52:	4603      	mov	r3, r0
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d100      	bne.n	8004f5a <memset+0xa>
 8004f58:	4770      	bx	lr
 8004f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5e:	e7f9      	b.n	8004f54 <memset+0x4>

08004f60 <_close_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d06      	ldr	r5, [pc, #24]	@ (8004f7c <_close_r+0x1c>)
 8004f64:	2300      	movs	r3, #0
 8004f66:	4604      	mov	r4, r0
 8004f68:	4608      	mov	r0, r1
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	f7fb fd96 	bl	8000a9c <_close>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d102      	bne.n	8004f7a <_close_r+0x1a>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b103      	cbz	r3, 8004f7a <_close_r+0x1a>
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	200022fc 	.word	0x200022fc

08004f80 <_lseek_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d07      	ldr	r5, [pc, #28]	@ (8004fa0 <_lseek_r+0x20>)
 8004f84:	4604      	mov	r4, r0
 8004f86:	4608      	mov	r0, r1
 8004f88:	4611      	mov	r1, r2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	602a      	str	r2, [r5, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7fb fdab 	bl	8000aea <_lseek>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_lseek_r+0x1e>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_lseek_r+0x1e>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	200022fc 	.word	0x200022fc

08004fa4 <_read_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d07      	ldr	r5, [pc, #28]	@ (8004fc4 <_read_r+0x20>)
 8004fa8:	4604      	mov	r4, r0
 8004faa:	4608      	mov	r0, r1
 8004fac:	4611      	mov	r1, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	602a      	str	r2, [r5, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7fb fd3e 	bl	8000a34 <_read>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_read_r+0x1e>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_read_r+0x1e>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	200022fc 	.word	0x200022fc

08004fc8 <_write_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d07      	ldr	r5, [pc, #28]	@ (8004fe8 <_write_r+0x20>)
 8004fcc:	4604      	mov	r4, r0
 8004fce:	4608      	mov	r0, r1
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	602a      	str	r2, [r5, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f7fb fd4a 	bl	8000a70 <_write>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_write_r+0x1e>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_write_r+0x1e>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	200022fc 	.word	0x200022fc

08004fec <__errno>:
 8004fec:	4b01      	ldr	r3, [pc, #4]	@ (8004ff4 <__errno+0x8>)
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000018 	.word	0x20000018

08004ff8 <__libc_init_array>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	4d0d      	ldr	r5, [pc, #52]	@ (8005030 <__libc_init_array+0x38>)
 8004ffc:	4c0d      	ldr	r4, [pc, #52]	@ (8005034 <__libc_init_array+0x3c>)
 8004ffe:	1b64      	subs	r4, r4, r5
 8005000:	10a4      	asrs	r4, r4, #2
 8005002:	2600      	movs	r6, #0
 8005004:	42a6      	cmp	r6, r4
 8005006:	d109      	bne.n	800501c <__libc_init_array+0x24>
 8005008:	4d0b      	ldr	r5, [pc, #44]	@ (8005038 <__libc_init_array+0x40>)
 800500a:	4c0c      	ldr	r4, [pc, #48]	@ (800503c <__libc_init_array+0x44>)
 800500c:	f000 fa54 	bl	80054b8 <_init>
 8005010:	1b64      	subs	r4, r4, r5
 8005012:	10a4      	asrs	r4, r4, #2
 8005014:	2600      	movs	r6, #0
 8005016:	42a6      	cmp	r6, r4
 8005018:	d105      	bne.n	8005026 <__libc_init_array+0x2e>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005020:	4798      	blx	r3
 8005022:	3601      	adds	r6, #1
 8005024:	e7ee      	b.n	8005004 <__libc_init_array+0xc>
 8005026:	f855 3b04 	ldr.w	r3, [r5], #4
 800502a:	4798      	blx	r3
 800502c:	3601      	adds	r6, #1
 800502e:	e7f2      	b.n	8005016 <__libc_init_array+0x1e>
 8005030:	0800554c 	.word	0x0800554c
 8005034:	0800554c 	.word	0x0800554c
 8005038:	0800554c 	.word	0x0800554c
 800503c:	08005550 	.word	0x08005550

08005040 <__retarget_lock_init_recursive>:
 8005040:	4770      	bx	lr

08005042 <__retarget_lock_acquire_recursive>:
 8005042:	4770      	bx	lr

08005044 <__retarget_lock_release_recursive>:
 8005044:	4770      	bx	lr
	...

08005048 <_free_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4605      	mov	r5, r0
 800504c:	2900      	cmp	r1, #0
 800504e:	d041      	beq.n	80050d4 <_free_r+0x8c>
 8005050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005054:	1f0c      	subs	r4, r1, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	bfb8      	it	lt
 800505a:	18e4      	addlt	r4, r4, r3
 800505c:	f000 f8e0 	bl	8005220 <__malloc_lock>
 8005060:	4a1d      	ldr	r2, [pc, #116]	@ (80050d8 <_free_r+0x90>)
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	b933      	cbnz	r3, 8005074 <_free_r+0x2c>
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	6014      	str	r4, [r2, #0]
 800506a:	4628      	mov	r0, r5
 800506c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005070:	f000 b8dc 	b.w	800522c <__malloc_unlock>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d908      	bls.n	800508a <_free_r+0x42>
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	1821      	adds	r1, r4, r0
 800507c:	428b      	cmp	r3, r1
 800507e:	bf01      	itttt	eq
 8005080:	6819      	ldreq	r1, [r3, #0]
 8005082:	685b      	ldreq	r3, [r3, #4]
 8005084:	1809      	addeq	r1, r1, r0
 8005086:	6021      	streq	r1, [r4, #0]
 8005088:	e7ed      	b.n	8005066 <_free_r+0x1e>
 800508a:	461a      	mov	r2, r3
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b10b      	cbz	r3, 8005094 <_free_r+0x4c>
 8005090:	42a3      	cmp	r3, r4
 8005092:	d9fa      	bls.n	800508a <_free_r+0x42>
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	1850      	adds	r0, r2, r1
 8005098:	42a0      	cmp	r0, r4
 800509a:	d10b      	bne.n	80050b4 <_free_r+0x6c>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	4401      	add	r1, r0
 80050a0:	1850      	adds	r0, r2, r1
 80050a2:	4283      	cmp	r3, r0
 80050a4:	6011      	str	r1, [r2, #0]
 80050a6:	d1e0      	bne.n	800506a <_free_r+0x22>
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6053      	str	r3, [r2, #4]
 80050ae:	4408      	add	r0, r1
 80050b0:	6010      	str	r0, [r2, #0]
 80050b2:	e7da      	b.n	800506a <_free_r+0x22>
 80050b4:	d902      	bls.n	80050bc <_free_r+0x74>
 80050b6:	230c      	movs	r3, #12
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	e7d6      	b.n	800506a <_free_r+0x22>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	1821      	adds	r1, r4, r0
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf04      	itt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	6063      	str	r3, [r4, #4]
 80050ca:	bf04      	itt	eq
 80050cc:	1809      	addeq	r1, r1, r0
 80050ce:	6021      	streq	r1, [r4, #0]
 80050d0:	6054      	str	r4, [r2, #4]
 80050d2:	e7ca      	b.n	800506a <_free_r+0x22>
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	20002308 	.word	0x20002308

080050dc <sbrk_aligned>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	4e0f      	ldr	r6, [pc, #60]	@ (800511c <sbrk_aligned+0x40>)
 80050e0:	460c      	mov	r4, r1
 80050e2:	6831      	ldr	r1, [r6, #0]
 80050e4:	4605      	mov	r5, r0
 80050e6:	b911      	cbnz	r1, 80050ee <sbrk_aligned+0x12>
 80050e8:	f000 f9d6 	bl	8005498 <_sbrk_r>
 80050ec:	6030      	str	r0, [r6, #0]
 80050ee:	4621      	mov	r1, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	f000 f9d1 	bl	8005498 <_sbrk_r>
 80050f6:	1c43      	adds	r3, r0, #1
 80050f8:	d103      	bne.n	8005102 <sbrk_aligned+0x26>
 80050fa:	f04f 34ff 	mov.w	r4, #4294967295
 80050fe:	4620      	mov	r0, r4
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	1cc4      	adds	r4, r0, #3
 8005104:	f024 0403 	bic.w	r4, r4, #3
 8005108:	42a0      	cmp	r0, r4
 800510a:	d0f8      	beq.n	80050fe <sbrk_aligned+0x22>
 800510c:	1a21      	subs	r1, r4, r0
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f9c2 	bl	8005498 <_sbrk_r>
 8005114:	3001      	adds	r0, #1
 8005116:	d1f2      	bne.n	80050fe <sbrk_aligned+0x22>
 8005118:	e7ef      	b.n	80050fa <sbrk_aligned+0x1e>
 800511a:	bf00      	nop
 800511c:	20002304 	.word	0x20002304

08005120 <_malloc_r>:
 8005120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005124:	1ccd      	adds	r5, r1, #3
 8005126:	f025 0503 	bic.w	r5, r5, #3
 800512a:	3508      	adds	r5, #8
 800512c:	2d0c      	cmp	r5, #12
 800512e:	bf38      	it	cc
 8005130:	250c      	movcc	r5, #12
 8005132:	2d00      	cmp	r5, #0
 8005134:	4606      	mov	r6, r0
 8005136:	db01      	blt.n	800513c <_malloc_r+0x1c>
 8005138:	42a9      	cmp	r1, r5
 800513a:	d904      	bls.n	8005146 <_malloc_r+0x26>
 800513c:	230c      	movs	r3, #12
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	2000      	movs	r0, #0
 8005142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800521c <_malloc_r+0xfc>
 800514a:	f000 f869 	bl	8005220 <__malloc_lock>
 800514e:	f8d8 3000 	ldr.w	r3, [r8]
 8005152:	461c      	mov	r4, r3
 8005154:	bb44      	cbnz	r4, 80051a8 <_malloc_r+0x88>
 8005156:	4629      	mov	r1, r5
 8005158:	4630      	mov	r0, r6
 800515a:	f7ff ffbf 	bl	80050dc <sbrk_aligned>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	4604      	mov	r4, r0
 8005162:	d158      	bne.n	8005216 <_malloc_r+0xf6>
 8005164:	f8d8 4000 	ldr.w	r4, [r8]
 8005168:	4627      	mov	r7, r4
 800516a:	2f00      	cmp	r7, #0
 800516c:	d143      	bne.n	80051f6 <_malloc_r+0xd6>
 800516e:	2c00      	cmp	r4, #0
 8005170:	d04b      	beq.n	800520a <_malloc_r+0xea>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	4639      	mov	r1, r7
 8005176:	4630      	mov	r0, r6
 8005178:	eb04 0903 	add.w	r9, r4, r3
 800517c:	f000 f98c 	bl	8005498 <_sbrk_r>
 8005180:	4581      	cmp	r9, r0
 8005182:	d142      	bne.n	800520a <_malloc_r+0xea>
 8005184:	6821      	ldr	r1, [r4, #0]
 8005186:	1a6d      	subs	r5, r5, r1
 8005188:	4629      	mov	r1, r5
 800518a:	4630      	mov	r0, r6
 800518c:	f7ff ffa6 	bl	80050dc <sbrk_aligned>
 8005190:	3001      	adds	r0, #1
 8005192:	d03a      	beq.n	800520a <_malloc_r+0xea>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	442b      	add	r3, r5
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	f8d8 3000 	ldr.w	r3, [r8]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	bb62      	cbnz	r2, 80051fc <_malloc_r+0xdc>
 80051a2:	f8c8 7000 	str.w	r7, [r8]
 80051a6:	e00f      	b.n	80051c8 <_malloc_r+0xa8>
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	1b52      	subs	r2, r2, r5
 80051ac:	d420      	bmi.n	80051f0 <_malloc_r+0xd0>
 80051ae:	2a0b      	cmp	r2, #11
 80051b0:	d917      	bls.n	80051e2 <_malloc_r+0xc2>
 80051b2:	1961      	adds	r1, r4, r5
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	6025      	str	r5, [r4, #0]
 80051b8:	bf18      	it	ne
 80051ba:	6059      	strne	r1, [r3, #4]
 80051bc:	6863      	ldr	r3, [r4, #4]
 80051be:	bf08      	it	eq
 80051c0:	f8c8 1000 	streq.w	r1, [r8]
 80051c4:	5162      	str	r2, [r4, r5]
 80051c6:	604b      	str	r3, [r1, #4]
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 f82f 	bl	800522c <__malloc_unlock>
 80051ce:	f104 000b 	add.w	r0, r4, #11
 80051d2:	1d23      	adds	r3, r4, #4
 80051d4:	f020 0007 	bic.w	r0, r0, #7
 80051d8:	1ac2      	subs	r2, r0, r3
 80051da:	bf1c      	itt	ne
 80051dc:	1a1b      	subne	r3, r3, r0
 80051de:	50a3      	strne	r3, [r4, r2]
 80051e0:	e7af      	b.n	8005142 <_malloc_r+0x22>
 80051e2:	6862      	ldr	r2, [r4, #4]
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	bf0c      	ite	eq
 80051e8:	f8c8 2000 	streq.w	r2, [r8]
 80051ec:	605a      	strne	r2, [r3, #4]
 80051ee:	e7eb      	b.n	80051c8 <_malloc_r+0xa8>
 80051f0:	4623      	mov	r3, r4
 80051f2:	6864      	ldr	r4, [r4, #4]
 80051f4:	e7ae      	b.n	8005154 <_malloc_r+0x34>
 80051f6:	463c      	mov	r4, r7
 80051f8:	687f      	ldr	r7, [r7, #4]
 80051fa:	e7b6      	b.n	800516a <_malloc_r+0x4a>
 80051fc:	461a      	mov	r2, r3
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	42a3      	cmp	r3, r4
 8005202:	d1fb      	bne.n	80051fc <_malloc_r+0xdc>
 8005204:	2300      	movs	r3, #0
 8005206:	6053      	str	r3, [r2, #4]
 8005208:	e7de      	b.n	80051c8 <_malloc_r+0xa8>
 800520a:	230c      	movs	r3, #12
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	4630      	mov	r0, r6
 8005210:	f000 f80c 	bl	800522c <__malloc_unlock>
 8005214:	e794      	b.n	8005140 <_malloc_r+0x20>
 8005216:	6005      	str	r5, [r0, #0]
 8005218:	e7d6      	b.n	80051c8 <_malloc_r+0xa8>
 800521a:	bf00      	nop
 800521c:	20002308 	.word	0x20002308

08005220 <__malloc_lock>:
 8005220:	4801      	ldr	r0, [pc, #4]	@ (8005228 <__malloc_lock+0x8>)
 8005222:	f7ff bf0e 	b.w	8005042 <__retarget_lock_acquire_recursive>
 8005226:	bf00      	nop
 8005228:	20002300 	.word	0x20002300

0800522c <__malloc_unlock>:
 800522c:	4801      	ldr	r0, [pc, #4]	@ (8005234 <__malloc_unlock+0x8>)
 800522e:	f7ff bf09 	b.w	8005044 <__retarget_lock_release_recursive>
 8005232:	bf00      	nop
 8005234:	20002300 	.word	0x20002300

08005238 <__sflush_r>:
 8005238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	0716      	lsls	r6, r2, #28
 8005242:	4605      	mov	r5, r0
 8005244:	460c      	mov	r4, r1
 8005246:	d454      	bmi.n	80052f2 <__sflush_r+0xba>
 8005248:	684b      	ldr	r3, [r1, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dc02      	bgt.n	8005254 <__sflush_r+0x1c>
 800524e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	dd48      	ble.n	80052e6 <__sflush_r+0xae>
 8005254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005256:	2e00      	cmp	r6, #0
 8005258:	d045      	beq.n	80052e6 <__sflush_r+0xae>
 800525a:	2300      	movs	r3, #0
 800525c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005260:	682f      	ldr	r7, [r5, #0]
 8005262:	6a21      	ldr	r1, [r4, #32]
 8005264:	602b      	str	r3, [r5, #0]
 8005266:	d030      	beq.n	80052ca <__sflush_r+0x92>
 8005268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	0759      	lsls	r1, r3, #29
 800526e:	d505      	bpl.n	800527c <__sflush_r+0x44>
 8005270:	6863      	ldr	r3, [r4, #4]
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005276:	b10b      	cbz	r3, 800527c <__sflush_r+0x44>
 8005278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	2300      	movs	r3, #0
 800527e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005280:	6a21      	ldr	r1, [r4, #32]
 8005282:	4628      	mov	r0, r5
 8005284:	47b0      	blx	r6
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	d106      	bne.n	800529a <__sflush_r+0x62>
 800528c:	6829      	ldr	r1, [r5, #0]
 800528e:	291d      	cmp	r1, #29
 8005290:	d82b      	bhi.n	80052ea <__sflush_r+0xb2>
 8005292:	4a2a      	ldr	r2, [pc, #168]	@ (800533c <__sflush_r+0x104>)
 8005294:	410a      	asrs	r2, r1
 8005296:	07d6      	lsls	r6, r2, #31
 8005298:	d427      	bmi.n	80052ea <__sflush_r+0xb2>
 800529a:	2200      	movs	r2, #0
 800529c:	6062      	str	r2, [r4, #4]
 800529e:	04d9      	lsls	r1, r3, #19
 80052a0:	6922      	ldr	r2, [r4, #16]
 80052a2:	6022      	str	r2, [r4, #0]
 80052a4:	d504      	bpl.n	80052b0 <__sflush_r+0x78>
 80052a6:	1c42      	adds	r2, r0, #1
 80052a8:	d101      	bne.n	80052ae <__sflush_r+0x76>
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	b903      	cbnz	r3, 80052b0 <__sflush_r+0x78>
 80052ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80052b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052b2:	602f      	str	r7, [r5, #0]
 80052b4:	b1b9      	cbz	r1, 80052e6 <__sflush_r+0xae>
 80052b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052ba:	4299      	cmp	r1, r3
 80052bc:	d002      	beq.n	80052c4 <__sflush_r+0x8c>
 80052be:	4628      	mov	r0, r5
 80052c0:	f7ff fec2 	bl	8005048 <_free_r>
 80052c4:	2300      	movs	r3, #0
 80052c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80052c8:	e00d      	b.n	80052e6 <__sflush_r+0xae>
 80052ca:	2301      	movs	r3, #1
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b0      	blx	r6
 80052d0:	4602      	mov	r2, r0
 80052d2:	1c50      	adds	r0, r2, #1
 80052d4:	d1c9      	bne.n	800526a <__sflush_r+0x32>
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0c6      	beq.n	800526a <__sflush_r+0x32>
 80052dc:	2b1d      	cmp	r3, #29
 80052de:	d001      	beq.n	80052e4 <__sflush_r+0xac>
 80052e0:	2b16      	cmp	r3, #22
 80052e2:	d11e      	bne.n	8005322 <__sflush_r+0xea>
 80052e4:	602f      	str	r7, [r5, #0]
 80052e6:	2000      	movs	r0, #0
 80052e8:	e022      	b.n	8005330 <__sflush_r+0xf8>
 80052ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ee:	b21b      	sxth	r3, r3
 80052f0:	e01b      	b.n	800532a <__sflush_r+0xf2>
 80052f2:	690f      	ldr	r7, [r1, #16]
 80052f4:	2f00      	cmp	r7, #0
 80052f6:	d0f6      	beq.n	80052e6 <__sflush_r+0xae>
 80052f8:	0793      	lsls	r3, r2, #30
 80052fa:	680e      	ldr	r6, [r1, #0]
 80052fc:	bf08      	it	eq
 80052fe:	694b      	ldreq	r3, [r1, #20]
 8005300:	600f      	str	r7, [r1, #0]
 8005302:	bf18      	it	ne
 8005304:	2300      	movne	r3, #0
 8005306:	eba6 0807 	sub.w	r8, r6, r7
 800530a:	608b      	str	r3, [r1, #8]
 800530c:	f1b8 0f00 	cmp.w	r8, #0
 8005310:	dde9      	ble.n	80052e6 <__sflush_r+0xae>
 8005312:	6a21      	ldr	r1, [r4, #32]
 8005314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005316:	4643      	mov	r3, r8
 8005318:	463a      	mov	r2, r7
 800531a:	4628      	mov	r0, r5
 800531c:	47b0      	blx	r6
 800531e:	2800      	cmp	r0, #0
 8005320:	dc08      	bgt.n	8005334 <__sflush_r+0xfc>
 8005322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005334:	4407      	add	r7, r0
 8005336:	eba8 0800 	sub.w	r8, r8, r0
 800533a:	e7e7      	b.n	800530c <__sflush_r+0xd4>
 800533c:	dfbffffe 	.word	0xdfbffffe

08005340 <_fflush_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	690b      	ldr	r3, [r1, #16]
 8005344:	4605      	mov	r5, r0
 8005346:	460c      	mov	r4, r1
 8005348:	b913      	cbnz	r3, 8005350 <_fflush_r+0x10>
 800534a:	2500      	movs	r5, #0
 800534c:	4628      	mov	r0, r5
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	b118      	cbz	r0, 800535a <_fflush_r+0x1a>
 8005352:	6a03      	ldr	r3, [r0, #32]
 8005354:	b90b      	cbnz	r3, 800535a <_fflush_r+0x1a>
 8005356:	f7ff fc8f 	bl	8004c78 <__sinit>
 800535a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f3      	beq.n	800534a <_fflush_r+0xa>
 8005362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005364:	07d0      	lsls	r0, r2, #31
 8005366:	d404      	bmi.n	8005372 <_fflush_r+0x32>
 8005368:	0599      	lsls	r1, r3, #22
 800536a:	d402      	bmi.n	8005372 <_fflush_r+0x32>
 800536c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800536e:	f7ff fe68 	bl	8005042 <__retarget_lock_acquire_recursive>
 8005372:	4628      	mov	r0, r5
 8005374:	4621      	mov	r1, r4
 8005376:	f7ff ff5f 	bl	8005238 <__sflush_r>
 800537a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800537c:	07da      	lsls	r2, r3, #31
 800537e:	4605      	mov	r5, r0
 8005380:	d4e4      	bmi.n	800534c <_fflush_r+0xc>
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	059b      	lsls	r3, r3, #22
 8005386:	d4e1      	bmi.n	800534c <_fflush_r+0xc>
 8005388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800538a:	f7ff fe5b 	bl	8005044 <__retarget_lock_release_recursive>
 800538e:	e7dd      	b.n	800534c <_fflush_r+0xc>

08005390 <__swhatbuf_r>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	460c      	mov	r4, r1
 8005394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005398:	2900      	cmp	r1, #0
 800539a:	b096      	sub	sp, #88	@ 0x58
 800539c:	4615      	mov	r5, r2
 800539e:	461e      	mov	r6, r3
 80053a0:	da0d      	bge.n	80053be <__swhatbuf_r+0x2e>
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	bf14      	ite	ne
 80053ae:	2340      	movne	r3, #64	@ 0x40
 80053b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053b4:	2000      	movs	r0, #0
 80053b6:	6031      	str	r1, [r6, #0]
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	b016      	add	sp, #88	@ 0x58
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
 80053be:	466a      	mov	r2, sp
 80053c0:	f000 f848 	bl	8005454 <_fstat_r>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	dbec      	blt.n	80053a2 <__swhatbuf_r+0x12>
 80053c8:	9901      	ldr	r1, [sp, #4]
 80053ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053d2:	4259      	negs	r1, r3
 80053d4:	4159      	adcs	r1, r3
 80053d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053da:	e7eb      	b.n	80053b4 <__swhatbuf_r+0x24>

080053dc <__smakebuf_r>:
 80053dc:	898b      	ldrh	r3, [r1, #12]
 80053de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e0:	079d      	lsls	r5, r3, #30
 80053e2:	4606      	mov	r6, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	d507      	bpl.n	80053f8 <__smakebuf_r+0x1c>
 80053e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	2301      	movs	r3, #1
 80053f2:	6163      	str	r3, [r4, #20]
 80053f4:	b003      	add	sp, #12
 80053f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f8:	ab01      	add	r3, sp, #4
 80053fa:	466a      	mov	r2, sp
 80053fc:	f7ff ffc8 	bl	8005390 <__swhatbuf_r>
 8005400:	9f00      	ldr	r7, [sp, #0]
 8005402:	4605      	mov	r5, r0
 8005404:	4639      	mov	r1, r7
 8005406:	4630      	mov	r0, r6
 8005408:	f7ff fe8a 	bl	8005120 <_malloc_r>
 800540c:	b948      	cbnz	r0, 8005422 <__smakebuf_r+0x46>
 800540e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005412:	059a      	lsls	r2, r3, #22
 8005414:	d4ee      	bmi.n	80053f4 <__smakebuf_r+0x18>
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	e7e2      	b.n	80053e8 <__smakebuf_r+0xc>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	6020      	str	r0, [r4, #0]
 8005426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005432:	b15b      	cbz	r3, 800544c <__smakebuf_r+0x70>
 8005434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005438:	4630      	mov	r0, r6
 800543a:	f000 f81d 	bl	8005478 <_isatty_r>
 800543e:	b128      	cbz	r0, 800544c <__smakebuf_r+0x70>
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	431d      	orrs	r5, r3
 8005450:	81a5      	strh	r5, [r4, #12]
 8005452:	e7cf      	b.n	80053f4 <__smakebuf_r+0x18>

08005454 <_fstat_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	@ (8005474 <_fstat_r+0x20>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	602b      	str	r3, [r5, #0]
 8005462:	f7fb fb27 	bl	8000ab4 <_fstat>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d102      	bne.n	8005470 <_fstat_r+0x1c>
 800546a:	682b      	ldr	r3, [r5, #0]
 800546c:	b103      	cbz	r3, 8005470 <_fstat_r+0x1c>
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	bf00      	nop
 8005474:	200022fc 	.word	0x200022fc

08005478 <_isatty_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	@ (8005494 <_isatty_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fb fb26 	bl	8000ad4 <_isatty>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_isatty_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_isatty_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	200022fc 	.word	0x200022fc

08005498 <_sbrk_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4d06      	ldr	r5, [pc, #24]	@ (80054b4 <_sbrk_r+0x1c>)
 800549c:	2300      	movs	r3, #0
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	f7fb fb2e 	bl	8000b04 <_sbrk>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_sbrk_r+0x1a>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_sbrk_r+0x1a>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	200022fc 	.word	0x200022fc

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr

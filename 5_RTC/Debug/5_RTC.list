
5_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bdc  08004bdc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bdc  08004bdc  00005bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be4  08004be4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be4  08004be4  00005be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004be8  08004be8  00005be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004bec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08004c48  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004c48  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e129  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002204  00000000  00000000  000141b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  000163c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a8  00000000  00000000  00016f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b1c  00000000  00000000  000177c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5c2  00000000  00000000  0003e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edee1  00000000  00000000  0004c89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a77f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003268  00000000  00000000  0013a7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0013da2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b18 	.word	0x08004b18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004b18 	.word	0x08004b18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 faf5 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f851 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f93b 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f909 	bl	8000788 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000576:	f000 f8ab 	bl	80006d0 <MX_RTC_Init>
    /* USER CODE BEGIN 3 */

//	  printf("Hello, Dishant!!\r\n");
//	  HAL_Delay(500);

	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800057a:	2200      	movs	r2, #0
 800057c:	491c      	ldr	r1, [pc, #112]	@ (80005f0 <main+0x90>)
 800057e:	481d      	ldr	r0, [pc, #116]	@ (80005f4 <main+0x94>)
 8000580:	f002 fb2f 	bl	8002be2 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000584:	2200      	movs	r2, #0
 8000586:	491c      	ldr	r1, [pc, #112]	@ (80005f8 <main+0x98>)
 8000588:	481a      	ldr	r0, [pc, #104]	@ (80005f4 <main+0x94>)
 800058a:	f002 fc0d 	bl	8002da8 <HAL_RTC_GetDate>


	  sprintf(date , "Date : %02d.%02d.%02d \t", sDate.Date, sDate.Month, sDate.Year);
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <main+0x98>)
 8000590:	789b      	ldrb	r3, [r3, #2]
 8000592:	461a      	mov	r2, r3
 8000594:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <main+0x98>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	4619      	mov	r1, r3
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <main+0x98>)
 800059c:	78db      	ldrb	r3, [r3, #3]
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	460b      	mov	r3, r1
 80005a2:	4916      	ldr	r1, [pc, #88]	@ (80005fc <main+0x9c>)
 80005a4:	4816      	ldr	r0, [pc, #88]	@ (8000600 <main+0xa0>)
 80005a6:	f003 fe17 	bl	80041d8 <siprintf>
	  sprintf(time , "Time : %02d.%02d.%02d\r\n",sTime.Hours, sTime.Minutes, sTime.Seconds );
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <main+0x90>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <main+0x90>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <main+0x90>)
 80005b8:	789b      	ldrb	r3, [r3, #2]
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	460b      	mov	r3, r1
 80005be:	4911      	ldr	r1, [pc, #68]	@ (8000604 <main+0xa4>)
 80005c0:	4811      	ldr	r0, [pc, #68]	@ (8000608 <main+0xa8>)
 80005c2:	f003 fe09 	bl	80041d8 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t *)date, sizeof(date), 300);
 80005c6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005ca:	221e      	movs	r2, #30
 80005cc:	490c      	ldr	r1, [pc, #48]	@ (8000600 <main+0xa0>)
 80005ce:	480f      	ldr	r0, [pc, #60]	@ (800060c <main+0xac>)
 80005d0:	f002 fd56 	bl	8003080 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)time, sizeof(time), 300);
 80005d4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005d8:	221e      	movs	r2, #30
 80005da:	490b      	ldr	r1, [pc, #44]	@ (8000608 <main+0xa8>)
 80005dc:	480b      	ldr	r0, [pc, #44]	@ (800060c <main+0xac>)
 80005de:	f002 fd4f 	bl	8003080 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e6:	f000 fb31 	bl	8000c4c <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005ea:	bf00      	nop
 80005ec:	e7c5      	b.n	800057a <main+0x1a>
 80005ee:	bf00      	nop
 80005f0:	20000124 	.word	0x20000124
 80005f4:	20000078 	.word	0x20000078
 80005f8:	20000138 	.word	0x20000138
 80005fc:	08004b30 	.word	0x08004b30
 8000600:	2000013c 	.word	0x2000013c
 8000604:	08004b48 	.word	0x08004b48
 8000608:	2000015c 	.word	0x2000015c
 800060c:	2000009c 	.word	0x2000009c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	@ 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	@ 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fdfa 	bl	8004218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000636:	f000 fe9d 	bl	8001374 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 f91c 	bl	800087c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f000 fe78 	bl	8001338 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemClock_Config+0xbc>)
 800064a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800064e:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <SystemClock_Config+0xbc>)
 8000650:	f023 0318 	bic.w	r3, r3, #24
 8000654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000658:	2306      	movs	r3, #6
 800065a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2310      	movs	r3, #16
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000676:	230a      	movs	r3, #10
 8000678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fec8 	bl	8001420 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000696:	f000 f8f1 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2303      	movs	r3, #3
 80006a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	2104      	movs	r1, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fa90 	bl	8001bd8 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006be:	f000 f8dd 	bl	800087c <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3758      	adds	r7, #88	@ 0x58
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <MX_RTC_Init+0xb0>)
 80006ea:	4a26      	ldr	r2, [pc, #152]	@ (8000784 <MX_RTC_Init+0xb4>)
 80006ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ee:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_RTC_Init+0xb0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006f4:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <MX_RTC_Init+0xb0>)
 80006f6:	227f      	movs	r2, #127	@ 0x7f
 80006f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006fa:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_RTC_Init+0xb0>)
 80006fc:	22ff      	movs	r2, #255	@ 0xff
 80006fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_RTC_Init+0xb0>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_RTC_Init+0xb0>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_RTC_Init+0xb0>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000712:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_RTC_Init+0xb0>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000718:	4819      	ldr	r0, [pc, #100]	@ (8000780 <MX_RTC_Init+0xb0>)
 800071a:	f002 f93d 	bl	8002998 <HAL_RTC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000724:	f000 f8aa 	bl	800087c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 8000728:	2302      	movs	r3, #2
 800072a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x5;
 800072c:	2305      	movs	r3, #5
 800072e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000730:	2300      	movs	r3, #0
 8000732:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	480f      	ldr	r0, [pc, #60]	@ (8000780 <MX_RTC_Init+0xb0>)
 8000744:	f002 f9b0 	bl	8002aa8 <HAL_RTC_SetTime>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800074e:	f000 f895 	bl	800087c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000752:	2302      	movs	r3, #2
 8000754:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000756:	2304      	movs	r3, #4
 8000758:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x9;
 800075a:	2309      	movs	r3, #9
 800075c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 800075e:	2324      	movs	r3, #36	@ 0x24
 8000760:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_RTC_Init+0xb0>)
 800076a:	f002 fa96 	bl	8002c9a <HAL_RTC_SetDate>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000774:	f000 f882 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000078 	.word	0x20000078
 8000784:	40002800 	.word	0x40002800

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <MX_USART2_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007cc:	f002 fc0a 	bl	8002fe4 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f851 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000009c 	.word	0x2000009c
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_GPIO_Init+0x90>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a1d      	ldr	r2, [pc, #116]	@ (8000878 <MX_GPIO_Init+0x90>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_GPIO_Init+0x90>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_GPIO_Init+0x90>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a17      	ldr	r2, [pc, #92]	@ (8000878 <MX_GPIO_Init+0x90>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_GPIO_Init+0x90>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_GPIO_Init+0x90>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a11      	ldr	r2, [pc, #68]	@ (8000878 <MX_GPIO_Init+0x90>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_GPIO_Init+0x90>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f000 fd5b 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000852:	2320      	movs	r3, #32
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086c:	f000 fba2 	bl	8000fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	4a0e      	ldr	r2, [pc, #56]	@ (80008cc <HAL_MspInit+0x44>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6613      	str	r3, [r2, #96]	@ 0x60
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <HAL_MspInit+0x44>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_MspInit+0x44>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_MspInit+0x44>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0a4      	sub	sp, #144	@ 0x90
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2288      	movs	r2, #136	@ 0x88
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 fc99 	bl	8004218 <memset>
  if(hrtc->Instance==RTC)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a10      	ldr	r2, [pc, #64]	@ (800092c <HAL_RTC_MspInit+0x5c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d118      	bne.n	8000922 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fb8c 	bl	8002020 <HAL_RCCEx_PeriphCLKConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800090e:	f7ff ffb5 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000912:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <HAL_RTC_MspInit+0x60>)
 8000914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000918:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <HAL_RTC_MspInit+0x60>)
 800091a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800091e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3790      	adds	r7, #144	@ 0x90
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40002800 	.word	0x40002800
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0ac      	sub	sp, #176	@ 0xb0
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2288      	movs	r2, #136	@ 0x88
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f003 fc5f 	bl	8004218 <memset>
  if(huart->Instance==USART2)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a25      	ldr	r2, [pc, #148]	@ (80009f4 <HAL_UART_MspInit+0xc0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d143      	bne.n	80009ec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000964:	2302      	movs	r3, #2
 8000966:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000968:	2300      	movs	r3, #0
 800096a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fb55 	bl	8002020 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800097c:	f7ff ff7e 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <HAL_UART_MspInit+0xc4>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000984:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <HAL_UART_MspInit+0xc4>)
 8000986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800098a:	6593      	str	r3, [r2, #88]	@ 0x58
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <HAL_UART_MspInit+0xc4>)
 800098e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_UART_MspInit+0xc4>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099c:	4a16      	ldr	r2, [pc, #88]	@ (80009f8 <HAL_UART_MspInit+0xc4>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_UART_MspInit+0xc4>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BSP_UART_TX_Pin|BSP_UART_RX_Pin;
 80009b0:	230c      	movs	r3, #12
 80009b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c8:	2307      	movs	r3, #7
 80009ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d8:	f000 faec 	bl	8000fb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2026      	movs	r0, #38	@ 0x26
 80009e2:	f000 fa32 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009e6:	2026      	movs	r0, #38	@ 0x26
 80009e8:	f000 fa4b 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	37b0      	adds	r7, #176	@ 0xb0
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004400 	.word	0x40004400
 80009f8:	40021000 	.word	0x40021000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 f8db 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <USART2_IRQHandler+0x10>)
 8000a62:	f002 fb97 	bl	8003194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000009c 	.word	0x2000009c

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f003 fbc2 	bl	8004228 <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20018000 	.word	0x20018000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	2000017c 	.word	0x2000017c
 8000ad8:	200002d0 	.word	0x200002d0

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff ffea 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f003 fb81 	bl	8004234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fd15 	bl	8000560 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b44:	08004bec 	.word	0x08004bec
  ldr r2, =_sbss
 8000b48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b4c:	200002cc 	.word	0x200002cc

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_Init+0x3c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <HAL_Init+0x3c>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f000 f962 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 f80f 	bl	8000b94 <HAL_InitTick>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	e001      	b.n	8000b86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b82:	f7ff fe81 	bl	8000888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d023      	beq.n	8000bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba8:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <HAL_InitTick+0x70>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f96d 	bl	8000e9e <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10f      	bne.n	8000bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d809      	bhi.n	8000be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f937 	bl	8000e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <HAL_InitTick+0x74>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e007      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e004      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e001      	b.n	8000bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000180 	.word	0x20000180

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000180 	.word	0x20000180

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	@ (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff3e 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff31 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa2 	bl	8000df0 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d008      	beq.n	8000ee0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e022      	b.n	8000f26 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 020e 	bic.w	r2, r2, #14
 8000eee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0201 	bic.w	r2, r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f04:	f003 021c 	and.w	r2, r3, #28
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d005      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e029      	b.n	8000faa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 020e 	bic.w	r2, r2, #14
 8000f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f003 021c 	and.w	r2, r3, #28
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	4798      	blx	r3
    }
  }
  return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e17f      	b.n	80012c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8171 	beq.w	80012be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x40>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d118      	bne.n	8001094 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	6939      	ldr	r1, [r7, #16]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80ac 	beq.w	80012be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b5f      	ldr	r3, [pc, #380]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116a:	4a5e      	ldr	r2, [pc, #376]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6613      	str	r3, [r2, #96]	@ 0x60
 8001172:	4b5c      	ldr	r3, [pc, #368]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800117e:	4a5a      	ldr	r2, [pc, #360]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011a8:	d025      	beq.n	80011f6 <HAL_GPIO_Init+0x242>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	@ (80012ec <HAL_GPIO_Init+0x338>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <HAL_GPIO_Init+0x23e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	@ (80012f0 <HAL_GPIO_Init+0x33c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x23a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	@ (80012f4 <HAL_GPIO_Init+0x340>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x236>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	@ (80012f8 <HAL_GPIO_Init+0x344>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x232>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	@ (80012fc <HAL_GPIO_Init+0x348>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x22e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001300 <HAL_GPIO_Init+0x34c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x22a>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011f6:	2300      	movs	r3, #0
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001208:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123a:	4a32      	ldr	r2, [pc, #200]	@ (8001304 <HAL_GPIO_Init+0x350>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001240:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001264:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126a:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <HAL_GPIO_Init+0x350>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b8:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <HAL_GPIO_Init+0x350>)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f47f ae78 	bne.w	8000fc4 <HAL_GPIO_Init+0x10>
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	48001000 	.word	0x48001000
 80012fc:	48001400 	.word	0x48001400
 8001300:	48001800 	.word	0x48001800
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001324:	e002      	b.n	800132c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40007000 	.word	0x40007000

08001358 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <HAL_PWREx_GetVoltageRange+0x18>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40007000 	.word	0x40007000

08001374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001382:	d130      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001384:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800138c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001390:	d038      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800139a:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2232      	movs	r2, #50	@ 0x32
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	4a1b      	ldr	r2, [pc, #108]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0c9b      	lsrs	r3, r3, #18
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b8:	e002      	b.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013cc:	d102      	bne.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f2      	bne.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e0:	d110      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e00f      	b.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f2:	d007      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013fc:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001402:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40007000 	.word	0x40007000
 8001418:	20000000 	.word	0x20000000
 800141c:	431bde83 	.word	0x431bde83

08001420 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e3ca      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001432:	4b97      	ldr	r3, [pc, #604]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143c:	4b94      	ldr	r3, [pc, #592]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80e4 	beq.w	800161c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_RCC_OscConfig+0x4a>
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	f040 808b 	bne.w	8001578 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 8087 	bne.w	8001578 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800146a:	4b89      	ldr	r3, [pc, #548]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x62>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e3a2      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	4b82      	ldr	r3, [pc, #520]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_RCC_OscConfig+0x7c>
 8001492:	4b7f      	ldr	r3, [pc, #508]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800149a:	e005      	b.n	80014a8 <HAL_RCC_OscConfig+0x88>
 800149c:	4b7c      	ldr	r3, [pc, #496]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d223      	bcs.n	80014f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd55 	bl	8001f60 <RCC_SetFlashLatencyFromMSIRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e383      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b73      	ldr	r3, [pc, #460]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a72      	ldr	r2, [pc, #456]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b70      	ldr	r3, [pc, #448]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	496d      	ldr	r1, [pc, #436]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b6c      	ldr	r3, [pc, #432]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	4968      	ldr	r1, [pc, #416]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
 80014f2:	e025      	b.n	8001540 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f4:	4b66      	ldr	r3, [pc, #408]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a65      	ldr	r2, [pc, #404]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b63      	ldr	r3, [pc, #396]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4960      	ldr	r1, [pc, #384]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001512:	4b5f      	ldr	r3, [pc, #380]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	495b      	ldr	r1, [pc, #364]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fd15 	bl	8001f60 <RCC_SetFlashLatencyFromMSIRange>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e343      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001540:	f000 fc4a 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b52      	ldr	r3, [pc, #328]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4950      	ldr	r1, [pc, #320]	@ (8001694 <HAL_RCC_OscConfig+0x274>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	4a4e      	ldr	r2, [pc, #312]	@ (8001698 <HAL_RCC_OscConfig+0x278>)
 800155e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001560:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fb15 	bl	8000b94 <HAL_InitTick>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d052      	beq.n	800161a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	e327      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d032      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001580:	4b43      	ldr	r3, [pc, #268]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a42      	ldr	r2, [pc, #264]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb52 	bl	8000c34 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001594:	f7ff fb4e 	bl	8000c34 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e310      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b2:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a36      	ldr	r2, [pc, #216]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4931      	ldr	r1, [pc, #196]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	492c      	ldr	r1, [pc, #176]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e01a      	b.n	800161c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a29      	ldr	r2, [pc, #164]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb1f 	bl	8000c34 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fa:	f7ff fb1b 	bl	8000c34 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e2dd      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160c:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x1da>
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d074      	beq.n	8001712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x21a>
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b0c      	cmp	r3, #12
 8001632:	d10e      	bne.n	8001652 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d10b      	bne.n	8001652 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d064      	beq.n	8001710 <HAL_RCC_OscConfig+0x2f0>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d160      	bne.n	8001710 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2ba      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x24a>
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e026      	b.n	80016b8 <HAL_RCC_OscConfig+0x298>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001672:	d115      	bne.n	80016a0 <HAL_RCC_OscConfig+0x280>
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 800167a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a02      	ldr	r2, [pc, #8]	@ (8001690 <HAL_RCC_OscConfig+0x270>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x298>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	08004b60 	.word	0x08004b60
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004
 80016a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a9c      	ldr	r2, [pc, #624]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fab8 	bl	8000c34 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fab4 	bl	8000c34 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	@ 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e276      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4b92      	ldr	r3, [pc, #584]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2a8>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff faa4 	bl	8000c34 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff faa0 	bl	8000c34 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	@ 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e262      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	4b88      	ldr	r3, [pc, #544]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d0>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d060      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d005      	beq.n	8001730 <HAL_RCC_OscConfig+0x310>
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d119      	bne.n	800175e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	4b7c      	ldr	r3, [pc, #496]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x328>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e23f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b76      	ldr	r3, [pc, #472]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	4973      	ldr	r1, [pc, #460]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	e040      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001766:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fa5f 	bl	8000c34 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff fa5b 	bl	8000c34 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e21d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	4b65      	ldr	r3, [pc, #404]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b62      	ldr	r3, [pc, #392]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	495f      	ldr	r1, [pc, #380]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e018      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fa3b 	bl	8000c34 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fa37 	bl	8000c34 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1f9      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	4b53      	ldr	r3, [pc, #332]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03c      	beq.n	8001866 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01c      	beq.n	800182e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fa16 	bl	8000c34 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fa12 	bl	8000c34 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1d4      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	4b41      	ldr	r3, [pc, #260]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ef      	beq.n	800180c <HAL_RCC_OscConfig+0x3ec>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001834:	4a3b      	ldr	r2, [pc, #236]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff f9f9 	bl	8000c34 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff f9f5 	bl	8000c34 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1b7      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80a6 	beq.w	80019c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001878:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10d      	bne.n	80018a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	4a26      	ldr	r2, [pc, #152]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001890:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189c:	2301      	movs	r3, #1
 800189e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a0:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <HAL_RCC_OscConfig+0x508>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d118      	bne.n	80018de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001928 <HAL_RCC_OscConfig+0x508>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <HAL_RCC_OscConfig+0x508>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b8:	f7ff f9bc 	bl	8000c34 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff f9b8 	bl	8000c34 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e17a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_RCC_OscConfig+0x508>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d108      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4d8>
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f6:	e029      	b.n	800194c <HAL_RCC_OscConfig+0x52c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d115      	bne.n	800192c <HAL_RCC_OscConfig+0x50c>
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001906:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001916:	4a03      	ldr	r2, [pc, #12]	@ (8001924 <HAL_RCC_OscConfig+0x504>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001920:	e014      	b.n	800194c <HAL_RCC_OscConfig+0x52c>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
 800192c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	4a9b      	ldr	r2, [pc, #620]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800193c:	4b98      	ldr	r3, [pc, #608]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001942:	4a97      	ldr	r2, [pc, #604]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d016      	beq.n	8001982 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f96e 	bl	8000c34 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f96a 	bl	8000c34 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e12a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001972:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ed      	beq.n	800195c <HAL_RCC_OscConfig+0x53c>
 8001980:	e015      	b.n	80019ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff f957 	bl	8000c34 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff f953 	bl	8000c34 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e113      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ed      	bne.n	800198a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	4a79      	ldr	r2, [pc, #484]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80fe 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f040 80d0 	bne.w	8001b74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019d4:	4b72      	ldr	r3, [pc, #456]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d130      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	3b01      	subs	r3, #1
 80019f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d127      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d11f      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a14:	2a07      	cmp	r2, #7
 8001a16:	bf14      	ite	ne
 8001a18:	2201      	movne	r2, #1
 8001a1a:	2200      	moveq	r2, #0
 8001a1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d113      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d06e      	beq.n	8001b28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d069      	beq.n	8001b24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a50:	4b53      	ldr	r3, [pc, #332]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0ad      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a78:	f7ff f8dc 	bl	8000c34 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f8d8 	bl	8000c34 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e09a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	4b43      	ldr	r3, [pc, #268]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b40      	ldr	r3, [pc, #256]	@ (8001ba4 <HAL_RCC_OscConfig+0x784>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001aae:	3a01      	subs	r2, #1
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ab8:	0212      	lsls	r2, r2, #8
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ac0:	0852      	lsrs	r2, r2, #1
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0552      	lsls	r2, r2, #21
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	0652      	lsls	r2, r2, #25
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ad8:	0912      	lsrs	r2, r2, #4
 8001ada:	0452      	lsls	r2, r2, #17
 8001adc:	430a      	orrs	r2, r1
 8001ade:	4930      	ldr	r1, [pc, #192]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a2a      	ldr	r2, [pc, #168]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afc:	f7ff f89a 	bl	8000c34 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f896 	bl	8000c34 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e058      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	4b22      	ldr	r3, [pc, #136]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b22:	e050      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e04f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d148      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b40:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a16      	ldr	r2, [pc, #88]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b4c:	f7ff f872 	bl	8000c34 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f86e 	bl	8000c34 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e030      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x734>
 8001b72:	e028      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d023      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f855 	bl	8000c34 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	e00c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f851 	bl	8000c34 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d905      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e013      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ec      	bne.n	8001b8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4905      	ldr	r1, [pc, #20]	@ (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_RCC_OscConfig+0x7b4>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e001      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	feeefffc 	.word	0xfeeefffc

08001bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0e7      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b75      	ldr	r3, [pc, #468]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b72      	ldr	r3, [pc, #456]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	4970      	ldr	r1, [pc, #448]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0cf      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b66      	ldr	r3, [pc, #408]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d908      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b63      	ldr	r3, [pc, #396]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4960      	ldr	r1, [pc, #384]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d04c      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d121      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0a6      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c76:	4b54      	ldr	r3, [pc, #336]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d115      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e09a      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e08e      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e086      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cae:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 0203 	bic.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4943      	ldr	r1, [pc, #268]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc0:	f7fe ffb8 	bl	8000c34 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f7fe ffb4 	bl	8000c34 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e06e      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 020c 	and.w	r2, r3, #12
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d1eb      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d208      	bcs.n	8001d1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	492b      	ldr	r1, [pc, #172]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1e:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d210      	bcs.n	8001d4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 0207 	bic.w	r2, r3, #7
 8001d34:	4923      	ldr	r1, [pc, #140]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3c:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e036      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4918      	ldr	r1, [pc, #96]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d78:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4910      	ldr	r1, [pc, #64]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d8c:	f000 f824 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	490b      	ldr	r1, [pc, #44]	@ (8001dcc <HAL_RCC_ClockConfig+0x1f4>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1f8>)
 8001daa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1fc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe feef 	bl	8000b94 <HAL_InitTick>
 8001db6:	4603      	mov	r3, r0
 8001db8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dba:	7afb      	ldrb	r3, [r7, #11]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08004b60 	.word	0x08004b60
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d11e      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e18:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10d      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	e004      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e5c:	4b23      	ldr	r3, [pc, #140]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d134      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d003      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0xac>
 8001e7c:	e005      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e80:	617b      	str	r3, [r7, #20]
      break;
 8001e82:	e005      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x114>)
 8001e86:	617b      	str	r3, [r7, #20]
      break;
 8001e88:	e002      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	617b      	str	r3, [r7, #20]
      break;
 8001e8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	fb03 f202 	mul.w	r2, r3, r2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	0e5b      	lsrs	r3, r3, #25
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08004b78 	.word	0x08004b78
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4904      	ldr	r1, [pc, #16]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08004b70 	.word	0x08004b70

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f38:	f7ff ffda 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0adb      	lsrs	r3, r3, #11
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4904      	ldr	r1, [pc, #16]	@ (8001f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08004b70 	.word	0x08004b70

08001f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f78:	f7ff f9ee 	bl	8001358 <HAL_PWREx_GetVoltageRange>
 8001f7c:	6178      	str	r0, [r7, #20]
 8001f7e:	e014      	b.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	4b25      	ldr	r3, [pc, #148]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	4a24      	ldr	r2, [pc, #144]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f98:	f7ff f9de 	bl	8001358 <HAL_PWREx_GetVoltageRange>
 8001f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb0:	d10b      	bne.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b80      	cmp	r3, #128	@ 0x80
 8001fb6:	d919      	bls.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fbc:	d902      	bls.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e013      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e010      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b80      	cmp	r3, #128	@ 0x80
 8001fce:	d902      	bls.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e00a      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b80      	cmp	r3, #128	@ 0x80
 8001fda:	d102      	bne.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fdc:	2302      	movs	r3, #2
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e004      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b70      	cmp	r3, #112	@ 0x70
 8001fe6:	d101      	bne.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe8:	2301      	movs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0207 	bic.w	r2, r3, #7
 8001ff4:	4909      	ldr	r1, [pc, #36]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	40022000 	.word	0x40022000

08002020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002028:	2300      	movs	r3, #0
 800202a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800202c:	2300      	movs	r3, #0
 800202e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002038:	2b00      	cmp	r3, #0
 800203a:	d041      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002040:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002044:	d02a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002046:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800204a:	d824      	bhi.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800204c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002050:	d008      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002052:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002056:	d81e      	bhi.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800205c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002060:	d010      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002062:	e018      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002064:	4b86      	ldr	r3, [pc, #536]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a85      	ldr	r2, [pc, #532]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002070:	e015      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3304      	adds	r3, #4
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fabb 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 800207e:	4603      	mov	r3, r0
 8002080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002082:	e00c      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3320      	adds	r3, #32
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fba6 	bl	80027dc <RCCEx_PLLSAI2_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002094:	e003      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	74fb      	strb	r3, [r7, #19]
      break;
 800209a:	e000      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800209c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020a4:	4b76      	ldr	r3, [pc, #472]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020b2:	4973      	ldr	r1, [pc, #460]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020ba:	e001      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d041      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020d4:	d02a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020da:	d824      	bhi.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020e0:	d008      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020e6:	d81e      	bhi.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f0:	d010      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020f2:	e018      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020f4:	4b62      	ldr	r3, [pc, #392]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a61      	ldr	r2, [pc, #388]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002100:	e015      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fa73 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 800210e:	4603      	mov	r3, r0
 8002110:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002112:	e00c      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3320      	adds	r3, #32
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fb5e 	bl	80027dc <RCCEx_PLLSAI2_Config>
 8002120:	4603      	mov	r3, r0
 8002122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002124:	e003      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	74fb      	strb	r3, [r7, #19]
      break;
 800212a:	e000      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800212c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002134:	4b52      	ldr	r3, [pc, #328]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002142:	494f      	ldr	r1, [pc, #316]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800214a:	e001      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a0 	beq.w	800229e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002162:	4b47      	ldr	r3, [pc, #284]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002178:	4b41      	ldr	r3, [pc, #260]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217c:	4a40      	ldr	r2, [pc, #256]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002182:	6593      	str	r3, [r2, #88]	@ 0x58
 8002184:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002190:	2301      	movs	r3, #1
 8002192:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002194:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a3a      	ldr	r2, [pc, #232]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a0:	f7fe fd48 	bl	8000c34 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021a6:	e009      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a8:	f7fe fd44 	bl	8000c34 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d902      	bls.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	74fb      	strb	r3, [r7, #19]
        break;
 80021ba:	e005      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021bc:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d15c      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01f      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d019      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021ec:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021f8:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fe:	4a20      	ldr	r2, [pc, #128]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002208:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220e:	4a1c      	ldr	r2, [pc, #112]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002218:	4a19      	ldr	r2, [pc, #100]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fd03 	bl	8000c34 <HAL_GetTick>
 800222e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002230:	e00b      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe fcff 	bl	8000c34 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d902      	bls.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	74fb      	strb	r3, [r7, #19]
            break;
 8002248:	e006      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ec      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800225e:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800226e:	4904      	ldr	r1, [pc, #16]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002276:	e009      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
 800227c:	e006      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800228c:	7c7b      	ldrb	r3, [r7, #17]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4b9e      	ldr	r3, [pc, #632]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	4a9d      	ldr	r2, [pc, #628]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022aa:	4b98      	ldr	r3, [pc, #608]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b0:	f023 0203 	bic.w	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	4994      	ldr	r1, [pc, #592]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022cc:	4b8f      	ldr	r3, [pc, #572]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 020c 	bic.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022da:	498c      	ldr	r1, [pc, #560]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ee:	4b87      	ldr	r3, [pc, #540]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	4983      	ldr	r1, [pc, #524]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002310:	4b7e      	ldr	r3, [pc, #504]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	497b      	ldr	r1, [pc, #492]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002332:	4b76      	ldr	r3, [pc, #472]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002340:	4972      	ldr	r1, [pc, #456]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002354:	4b6d      	ldr	r3, [pc, #436]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002362:	496a      	ldr	r1, [pc, #424]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002376:	4b65      	ldr	r3, [pc, #404]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	4961      	ldr	r1, [pc, #388]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002398:	4b5c      	ldr	r3, [pc, #368]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a6:	4959      	ldr	r1, [pc, #356]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ba:	4b54      	ldr	r3, [pc, #336]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c8:	4950      	ldr	r1, [pc, #320]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023dc:	4b4b      	ldr	r3, [pc, #300]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ea:	4948      	ldr	r1, [pc, #288]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023fe:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002404:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240c:	493f      	ldr	r1, [pc, #252]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d028      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002420:	4b3a      	ldr	r3, [pc, #232]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800242e:	4937      	ldr	r1, [pc, #220]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800243a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800243e:	d106      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002440:	4b32      	ldr	r3, [pc, #200]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a31      	ldr	r2, [pc, #196]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800244a:	60d3      	str	r3, [r2, #12]
 800244c:	e011      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002452:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002456:	d10c      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	2101      	movs	r1, #1
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f8c8 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d028      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800247e:	4b23      	ldr	r3, [pc, #140]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002484:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	491f      	ldr	r1, [pc, #124]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800249c:	d106      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249e:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	4a1a      	ldr	r2, [pc, #104]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024a8:	60d3      	str	r3, [r2, #12]
 80024aa:	e011      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f899 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 80024c2:	4603      	mov	r3, r0
 80024c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02b      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ea:	4908      	ldr	r1, [pc, #32]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024fa:	d109      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a02      	ldr	r2, [pc, #8]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002506:	60d3      	str	r3, [r2, #12]
 8002508:	e014      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002518:	d10c      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	2101      	movs	r1, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f867 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 8002526:	4603      	mov	r3, r0
 8002528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d02f      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002540:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800254e:	4928      	ldr	r1, [pc, #160]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800255a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800255e:	d10d      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f844 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d014      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	74bb      	strb	r3, [r7, #18]
 800257a:	e011      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3320      	adds	r3, #32
 800258a:	2102      	movs	r1, #2
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f925 	bl	80027dc <RCCEx_PLLSAI2_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025ac:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025ba:	490d      	ldr	r1, [pc, #52]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ce:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025de:	4904      	ldr	r1, [pc, #16]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002602:	4b75      	ldr	r3, [pc, #468]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800260e:	4b72      	ldr	r3, [pc, #456]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d10d      	bne.n	800263a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
       ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002626:	4b6c      	ldr	r3, [pc, #432]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
       ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d047      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e044      	b.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d018      	beq.n	800267a <RCCEx_PLLSAI1_Config+0x86>
 8002648:	2b03      	cmp	r3, #3
 800264a:	d825      	bhi.n	8002698 <RCCEx_PLLSAI1_Config+0xa4>
 800264c:	2b01      	cmp	r3, #1
 800264e:	d002      	beq.n	8002656 <RCCEx_PLLSAI1_Config+0x62>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d009      	beq.n	8002668 <RCCEx_PLLSAI1_Config+0x74>
 8002654:	e020      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002656:	4b60      	ldr	r3, [pc, #384]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11d      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e01a      	b.n	800269e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002668:	4b5b      	ldr	r3, [pc, #364]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e013      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800267a:	4b57      	ldr	r3, [pc, #348]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002686:	4b54      	ldr	r3, [pc, #336]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002696:	e006      	b.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e004      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ae:	4b4a      	ldr	r3, [pc, #296]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	430b      	orrs	r3, r1
 80026c4:	4944      	ldr	r1, [pc, #272]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d17d      	bne.n	80027cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d0:	4b41      	ldr	r3, [pc, #260]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a40      	ldr	r2, [pc, #256]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe faaa 	bl	8000c34 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e4:	f7fe faa6 	bl	8000c34 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
        break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f8:	4b37      	ldr	r3, [pc, #220]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ef      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d160      	bne.n	80027cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002710:	4b31      	ldr	r3, [pc, #196]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6892      	ldr	r2, [r2, #8]
 8002720:	0211      	lsls	r1, r2, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	0912      	lsrs	r2, r2, #4
 8002728:	0452      	lsls	r2, r2, #17
 800272a:	430a      	orrs	r2, r1
 800272c:	492a      	ldr	r1, [pc, #168]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	610b      	str	r3, [r1, #16]
 8002732:	e027      	b.n	8002784 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d112      	bne.n	8002760 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800273a:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002742:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6892      	ldr	r2, [r2, #8]
 800274a:	0211      	lsls	r1, r2, #8
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6912      	ldr	r2, [r2, #16]
 8002750:	0852      	lsrs	r2, r2, #1
 8002752:	3a01      	subs	r2, #1
 8002754:	0552      	lsls	r2, r2, #21
 8002756:	430a      	orrs	r2, r1
 8002758:	491f      	ldr	r1, [pc, #124]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	610b      	str	r3, [r1, #16]
 800275e:	e011      	b.n	8002784 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002760:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002768:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6892      	ldr	r2, [r2, #8]
 8002770:	0211      	lsls	r1, r2, #8
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6952      	ldr	r2, [r2, #20]
 8002776:	0852      	lsrs	r2, r2, #1
 8002778:	3a01      	subs	r2, #1
 800277a:	0652      	lsls	r2, r2, #25
 800277c:	430a      	orrs	r2, r1
 800277e:	4916      	ldr	r1, [pc, #88]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002784:	4b14      	ldr	r3, [pc, #80]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a13      	ldr	r2, [pc, #76]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800278e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fa50 	bl	8000c34 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002796:	e009      	b.n	80027ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002798:	f7fe fa4c 	bl	8000c34 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d902      	bls.n	80027ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	73fb      	strb	r3, [r7, #15]
          break;
 80027aa:	e005      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ac:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027be:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	4904      	ldr	r1, [pc, #16]	@ (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000

080027dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d018      	beq.n	8002828 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027f6:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0203 	and.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d10d      	bne.n	8002822 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
       ||
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800280e:	4b61      	ldr	r3, [pc, #388]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
       ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d047      	beq.n	80028b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e044      	b.n	80028b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d018      	beq.n	8002862 <RCCEx_PLLSAI2_Config+0x86>
 8002830:	2b03      	cmp	r3, #3
 8002832:	d825      	bhi.n	8002880 <RCCEx_PLLSAI2_Config+0xa4>
 8002834:	2b01      	cmp	r3, #1
 8002836:	d002      	beq.n	800283e <RCCEx_PLLSAI2_Config+0x62>
 8002838:	2b02      	cmp	r3, #2
 800283a:	d009      	beq.n	8002850 <RCCEx_PLLSAI2_Config+0x74>
 800283c:	e020      	b.n	8002880 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800283e:	4b55      	ldr	r3, [pc, #340]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11d      	bne.n	8002886 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284e:	e01a      	b.n	8002886 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002850:	4b50      	ldr	r3, [pc, #320]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e013      	b.n	800288a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002862:	4b4c      	ldr	r3, [pc, #304]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800286e:	4b49      	ldr	r3, [pc, #292]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800287e:	e006      	b.n	800288e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e004      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800288e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002896:	4b3f      	ldr	r3, [pc, #252]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	430b      	orrs	r3, r1
 80028ac:	4939      	ldr	r1, [pc, #228]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d167      	bne.n	8002988 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028b8:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a35      	ldr	r2, [pc, #212]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe f9b6 	bl	8000c34 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ca:	e009      	b.n	80028e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028cc:	f7fe f9b2 	bl	8000c34 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d902      	bls.n	80028e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	73fb      	strb	r3, [r7, #15]
        break;
 80028de:	e005      	b.n	80028ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ef      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d14a      	bne.n	8002988 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f8:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	0211      	lsls	r1, r2, #8
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	0912      	lsrs	r2, r2, #4
 8002910:	0452      	lsls	r2, r2, #17
 8002912:	430a      	orrs	r2, r1
 8002914:	491f      	ldr	r1, [pc, #124]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	614b      	str	r3, [r1, #20]
 800291a:	e011      	b.n	8002940 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800291c:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002924:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6892      	ldr	r2, [r2, #8]
 800292c:	0211      	lsls	r1, r2, #8
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6912      	ldr	r2, [r2, #16]
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	3a01      	subs	r2, #1
 8002936:	0652      	lsls	r2, r2, #25
 8002938:	430a      	orrs	r2, r1
 800293a:	4916      	ldr	r1, [pc, #88]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293c:	4313      	orrs	r3, r2
 800293e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a13      	ldr	r2, [pc, #76]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe f972 	bl	8000c34 <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002952:	e009      	b.n	8002968 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002954:	f7fe f96e 	bl	8000c34 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	73fb      	strb	r3, [r7, #15]
          break;
 8002966:	e005      	b.n	8002974 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002968:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4904      	ldr	r1, [pc, #16]	@ (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	4313      	orrs	r3, r2
 8002986:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d079      	beq.n	8002a9e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fd ff86 	bl	80008d0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d058      	beq.n	8002a8c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	22ca      	movs	r2, #202	@ 0xca
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2253      	movs	r2, #83	@ 0x53
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa4e 	bl	8002e8c <RTC_EnterInitMode>
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d127      	bne.n	8002a4a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a0c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68d2      	ldr	r2, [r2, #12]
 8002a34:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6919      	ldr	r1, [r3, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	041a      	lsls	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa52 	bl	8002ef4 <RTC_ExitInitMode>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d113      	bne.n	8002a82 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0203 	bic.w	r2, r2, #3
 8002a68:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	22ff      	movs	r2, #255	@ 0xff
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a8a:	e001      	b.n	8002a90 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_RTC_SetTime+0x1a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e08b      	b.n	8002bda <HAL_RTC_SetTime+0x132>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	22ca      	movs	r2, #202	@ 0xca
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2253      	movs	r2, #83	@ 0x53
 8002ae0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f9d2 	bl	8002e8c <RTC_EnterInitMode>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d163      	bne.n	8002bba <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d126      	bne.n	8002b46 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fa2d 	bl	8002f70 <RTC_ByteToBcd2>
 8002b16:	4603      	mov	r3, r0
 8002b18:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fa26 	bl	8002f70 <RTC_ByteToBcd2>
 8002b24:	4603      	mov	r3, r0
 8002b26:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b28:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	789b      	ldrb	r3, [r3, #2]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fa1e 	bl	8002f70 <RTC_ByteToBcd2>
 8002b34:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b36:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	78db      	ldrb	r3, [r3, #3]
 8002b3e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e018      	b.n	8002b78 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b66:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b6c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	78db      	ldrb	r3, [r3, #3]
 8002b72:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002b82:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002b86:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f99f 	bl	8002ef4 <RTC_ExitInitMode>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	22ff      	movs	r2, #255	@ 0xff
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002c10:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002c14:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	0d9b      	lsrs	r3, r3, #22
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11a      	bne.n	8002c90 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f9a6 	bl	8002fb0 <RTC_Bcd2ToByte>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	785b      	ldrb	r3, [r3, #1]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f99d 	bl	8002fb0 <RTC_Bcd2ToByte>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	789b      	ldrb	r3, [r3, #2]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f994 	bl	8002fb0 <RTC_Bcd2ToByte>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c9a:	b590      	push	{r4, r7, lr}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_RTC_SetDate+0x1a>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e075      	b.n	8002da0 <HAL_RTC_SetDate+0x106>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_RTC_SetDate+0x4e>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	785b      	ldrb	r3, [r3, #1]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	f023 0310 	bic.w	r3, r3, #16
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	330a      	adds	r3, #10
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11c      	bne.n	8002d28 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	78db      	ldrb	r3, [r3, #3]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f93c 	bl	8002f70 <RTC_ByteToBcd2>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	785b      	ldrb	r3, [r3, #1]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f935 	bl	8002f70 <RTC_ByteToBcd2>
 8002d06:	4603      	mov	r3, r0
 8002d08:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d0a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	789b      	ldrb	r3, [r3, #2]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f92d 	bl	8002f70 <RTC_ByteToBcd2>
 8002d16:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d18:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e00e      	b.n	8002d46 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	78db      	ldrb	r3, [r3, #3]
 8002d2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d34:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002d3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	22ca      	movs	r2, #202	@ 0xca
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2253      	movs	r2, #83	@ 0x53
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f898 	bl	8002e8c <RTC_EnterInitMode>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f8bc 	bl	8002ef4 <RTC_ExitInitMode>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	22ff      	movs	r2, #255	@ 0xff
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd90      	pop	{r4, r7, pc}

08002da8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dbe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	0b5b      	lsrs	r3, r3, #13
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11a      	bne.n	8002e38 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	78db      	ldrb	r3, [r3, #3]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f8d2 	bl	8002fb0 <RTC_Bcd2ToByte>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f8c9 	bl	8002fb0 <RTC_Bcd2ToByte>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	789b      	ldrb	r3, [r3, #2]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f8c0 	bl	8002fb0 <RTC_Bcd2ToByte>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0d      	ldr	r2, [pc, #52]	@ (8002e88 <HAL_RTC_WaitForSynchro+0x44>)
 8002e52:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002e54:	f7fd feee 	bl	8000c34 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e5a:	e009      	b.n	8002e70 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e5c:	f7fd feea 	bl	8000c34 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e6a:	d901      	bls.n	8002e70 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e007      	b.n	8002e80 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ee      	beq.n	8002e5c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	0003ff5f 	.word	0x0003ff5f

08002e8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d120      	bne.n	8002ee8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8002eae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002eb0:	f7fd fec0 	bl	8000c34 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002eb6:	e00d      	b.n	8002ed4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002eb8:	f7fd febc 	bl	8000c34 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ec6:	d905      	bls.n	8002ed4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2203      	movs	r2, #3
 8002ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <RTC_EnterInitMode+0x5c>
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d1e7      	bne.n	8002eb8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <RTC_ExitInitMode+0x78>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a19      	ldr	r2, [pc, #100]	@ (8002f6c <RTC_ExitInitMode+0x78>)
 8002f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f0a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f0c:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <RTC_ExitInitMode+0x78>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10c      	bne.n	8002f32 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff93 	bl	8002e44 <HAL_RTC_WaitForSynchro>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01e      	beq.n	8002f62 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2203      	movs	r2, #3
 8002f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	e017      	b.n	8002f62 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f32:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <RTC_ExitInitMode+0x78>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <RTC_ExitInitMode+0x78>)
 8002f38:	f023 0320 	bic.w	r3, r3, #32
 8002f3c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff80 	bl	8002e44 <HAL_RTC_WaitForSynchro>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f56:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <RTC_ExitInitMode+0x78>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <RTC_ExitInitMode+0x78>)
 8002f5c:	f043 0320 	orr.w	r3, r3, #32
 8002f60:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40002800 	.word	0x40002800

08002f70 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002f82:	e005      	b.n	8002f90 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	3b0a      	subs	r3, #10
 8002f8e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002f90:	7afb      	ldrb	r3, [r7, #11]
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	d8f6      	bhi.n	8002f84 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	7afb      	ldrb	r3, [r7, #11]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b2db      	uxtb	r3, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e040      	b.n	8003078 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fc94 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	@ 0x24
 8003010:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fe74 	bl	8003d18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fbb9 	bl	80037a8 <UART_SetConfig>
 8003036:	4603      	mov	r3, r0
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e01b      	b.n	8003078 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800304e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800305e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fef3 	bl	8003e5c <UART_CheckIdleState>
 8003076:	4603      	mov	r3, r0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003094:	2b20      	cmp	r3, #32
 8003096:	d177      	bne.n	8003188 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_Transmit+0x24>
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e070      	b.n	800318a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2221      	movs	r2, #33	@ 0x21
 80030b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b6:	f7fd fdbd 	bl	8000c34 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d4:	d108      	bne.n	80030e8 <HAL_UART_Transmit+0x68>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	e003      	b.n	80030f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030f0:	e02f      	b.n	8003152 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2180      	movs	r1, #128	@ 0x80
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 ff55 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e03b      	b.n	800318a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	881a      	ldrh	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003124:	b292      	uxth	r2, r2
 8003126:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	3302      	adds	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e007      	b.n	8003140 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3301      	adds	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1c9      	bne.n	80030f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2140      	movs	r1, #64	@ 0x40
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 ff1f 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e005      	b.n	800318a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b0ba      	sub	sp, #232	@ 0xe8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80031be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80031c2:	4013      	ands	r3, r2
 80031c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80031c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d115      	bne.n	80031fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00f      	beq.n	80031fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 82ae 	beq.w	800374e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
      }
      return;
 80031fa:	e2a8      	b.n	800374e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80031fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8117 	beq.w	8003434 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003216:	4b85      	ldr	r3, [pc, #532]	@ (800342c <HAL_UART_IRQHandler+0x298>)
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 810a 	beq.w	8003434 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d011      	beq.n	8003250 <HAL_UART_IRQHandler+0xbc>
 800322c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d011      	beq.n	8003280 <HAL_UART_IRQHandler+0xec>
 800325c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2202      	movs	r2, #2
 800326e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d011      	beq.n	80032b0 <HAL_UART_IRQHandler+0x11c>
 800328c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2204      	movs	r2, #4
 800329e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d017      	beq.n	80032ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2208      	movs	r2, #8
 80032da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032e2:	f043 0208 	orr.w	r2, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d012      	beq.n	800331e <HAL_UART_IRQHandler+0x18a>
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800330c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8214 	beq.w	8003752 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003358:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003366:	2b40      	cmp	r3, #64	@ 0x40
 8003368:	d005      	beq.n	8003376 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800336a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800336e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003372:	2b00      	cmp	r3, #0
 8003374:	d04f      	beq.n	8003416 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fe7f 	bl	800407a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b40      	cmp	r3, #64	@ 0x40
 8003388:	d141      	bne.n	800340e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3308      	adds	r3, #8
 8003390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1d9      	bne.n	800338a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d013      	beq.n	8003406 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e2:	4a13      	ldr	r2, [pc, #76]	@ (8003430 <HAL_UART_IRQHandler+0x29c>)
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fda1 	bl	8000f32 <HAL_DMA_Abort_IT>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003400:	4610      	mov	r0, r2
 8003402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	e00f      	b.n	8003426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f9b8 	bl	800377c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	e00b      	b.n	8003426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9b4 	bl	800377c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	e007      	b.n	8003426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f9b0 	bl	800377c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003424:	e195      	b.n	8003752 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003426:	bf00      	nop
    return;
 8003428:	e193      	b.n	8003752 <HAL_UART_IRQHandler+0x5be>
 800342a:	bf00      	nop
 800342c:	04000120 	.word	0x04000120
 8003430:	08004143 	.word	0x08004143

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003438:	2b01      	cmp	r3, #1
 800343a:	f040 814e 	bne.w	80036da <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8147 	beq.w	80036da <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8140 	beq.w	80036da <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2210      	movs	r2, #16
 8003460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346c:	2b40      	cmp	r3, #64	@ 0x40
 800346e:	f040 80b8 	bne.w	80035e2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800347e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8167 	beq.w	8003756 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800348e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003492:	429a      	cmp	r2, r3
 8003494:	f080 815f 	bcs.w	8003756 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800349e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 8086 	bne.w	80035c0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1da      	bne.n	80034b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800350e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3308      	adds	r3, #8
 800351e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003522:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003526:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800352a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e1      	bne.n	80034fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3308      	adds	r3, #8
 8003540:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800354a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800354c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3308      	adds	r3, #8
 800355a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800355e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003560:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003564:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800356c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e3      	bne.n	800353a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800358e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003590:	f023 0310 	bic.w	r3, r3, #16
 8003594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e4      	bne.n	8003580 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd fc7b 	bl	8000eb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8d8 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035e0:	e0b9      	b.n	8003756 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80ab 	beq.w	800375a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a6 	beq.w	800375a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003630:	647b      	str	r3, [r7, #68]	@ 0x44
 8003632:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800363e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e4      	bne.n	800360e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3308      	adds	r3, #8
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	623b      	str	r3, [r7, #32]
   return(result);
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3308      	adds	r3, #8
 8003664:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003668:	633a      	str	r2, [r7, #48]	@ 0x30
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800366e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e3      	bne.n	8003644 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	60fb      	str	r3, [r7, #12]
   return(result);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f023 0310 	bic.w	r3, r3, #16
 80036a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	617b      	str	r3, [r7, #20]
   return(result);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e4      	bne.n	8003690 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f85c 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036d8:	e03f      	b.n	800375a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <HAL_UART_IRQHandler+0x570>
 80036e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fd60 	bl	80041c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003702:	e02d      	b.n	8003760 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00e      	beq.n	800372e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
    }
    return;
 800372c:	e017      	b.n	800375e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d012      	beq.n	8003760 <HAL_UART_IRQHandler+0x5cc>
 800373a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fd11 	bl	800416e <UART_EndTransmit_IT>
    return;
 800374c:	e008      	b.n	8003760 <HAL_UART_IRQHandler+0x5cc>
      return;
 800374e:	bf00      	nop
 8003750:	e006      	b.n	8003760 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003752:	bf00      	nop
 8003754:	e004      	b.n	8003760 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <HAL_UART_IRQHandler+0x5cc>
      return;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <HAL_UART_IRQHandler+0x5cc>
    return;
 800375e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003760:	37e8      	adds	r7, #232	@ 0xe8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop

08003768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b08a      	sub	sp, #40	@ 0x28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4ba4      	ldr	r3, [pc, #656]	@ (8003a68 <UART_SetConfig+0x2c0>)
 80037d8:	4013      	ands	r3, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a99      	ldr	r2, [pc, #612]	@ (8003a6c <UART_SetConfig+0x2c4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003810:	4313      	orrs	r3, r2
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003824:	430a      	orrs	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a90      	ldr	r2, [pc, #576]	@ (8003a70 <UART_SetConfig+0x2c8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d126      	bne.n	8003880 <UART_SetConfig+0xd8>
 8003832:	4b90      	ldr	r3, [pc, #576]	@ (8003a74 <UART_SetConfig+0x2cc>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b03      	cmp	r3, #3
 800383e:	d81b      	bhi.n	8003878 <UART_SetConfig+0xd0>
 8003840:	a201      	add	r2, pc, #4	@ (adr r2, 8003848 <UART_SetConfig+0xa0>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	08003859 	.word	0x08003859
 800384c:	08003869 	.word	0x08003869
 8003850:	08003861 	.word	0x08003861
 8003854:	08003871 	.word	0x08003871
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385e:	e116      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003860:	2302      	movs	r3, #2
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e112      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003868:	2304      	movs	r3, #4
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386e:	e10e      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003870:	2308      	movs	r3, #8
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003876:	e10a      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003878:	2310      	movs	r3, #16
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387e:	e106      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a7c      	ldr	r2, [pc, #496]	@ (8003a78 <UART_SetConfig+0x2d0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d138      	bne.n	80038fc <UART_SetConfig+0x154>
 800388a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a74 <UART_SetConfig+0x2cc>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d82d      	bhi.n	80038f4 <UART_SetConfig+0x14c>
 8003898:	a201      	add	r2, pc, #4	@ (adr r2, 80038a0 <UART_SetConfig+0xf8>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	080038f5 	.word	0x080038f5
 80038a8:	080038f5 	.word	0x080038f5
 80038ac:	080038f5 	.word	0x080038f5
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	080038f5 	.word	0x080038f5
 80038b8:	080038f5 	.word	0x080038f5
 80038bc:	080038f5 	.word	0x080038f5
 80038c0:	080038dd 	.word	0x080038dd
 80038c4:	080038f5 	.word	0x080038f5
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038ed 	.word	0x080038ed
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038da:	e0d8      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038dc:	2302      	movs	r3, #2
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e2:	e0d4      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038e4:	2304      	movs	r3, #4
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ea:	e0d0      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038ec:	2308      	movs	r3, #8
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f2:	e0cc      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038f4:	2310      	movs	r3, #16
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038fa:	e0c8      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5e      	ldr	r2, [pc, #376]	@ (8003a7c <UART_SetConfig+0x2d4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d125      	bne.n	8003952 <UART_SetConfig+0x1aa>
 8003906:	4b5b      	ldr	r3, [pc, #364]	@ (8003a74 <UART_SetConfig+0x2cc>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003910:	2b30      	cmp	r3, #48	@ 0x30
 8003912:	d016      	beq.n	8003942 <UART_SetConfig+0x19a>
 8003914:	2b30      	cmp	r3, #48	@ 0x30
 8003916:	d818      	bhi.n	800394a <UART_SetConfig+0x1a2>
 8003918:	2b20      	cmp	r3, #32
 800391a:	d00a      	beq.n	8003932 <UART_SetConfig+0x18a>
 800391c:	2b20      	cmp	r3, #32
 800391e:	d814      	bhi.n	800394a <UART_SetConfig+0x1a2>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <UART_SetConfig+0x182>
 8003924:	2b10      	cmp	r3, #16
 8003926:	d008      	beq.n	800393a <UART_SetConfig+0x192>
 8003928:	e00f      	b.n	800394a <UART_SetConfig+0x1a2>
 800392a:	2300      	movs	r3, #0
 800392c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003930:	e0ad      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003932:	2302      	movs	r3, #2
 8003934:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003938:	e0a9      	b.n	8003a8e <UART_SetConfig+0x2e6>
 800393a:	2304      	movs	r3, #4
 800393c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003940:	e0a5      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003942:	2308      	movs	r3, #8
 8003944:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003948:	e0a1      	b.n	8003a8e <UART_SetConfig+0x2e6>
 800394a:	2310      	movs	r3, #16
 800394c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003950:	e09d      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a4a      	ldr	r2, [pc, #296]	@ (8003a80 <UART_SetConfig+0x2d8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d125      	bne.n	80039a8 <UART_SetConfig+0x200>
 800395c:	4b45      	ldr	r3, [pc, #276]	@ (8003a74 <UART_SetConfig+0x2cc>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003962:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003966:	2bc0      	cmp	r3, #192	@ 0xc0
 8003968:	d016      	beq.n	8003998 <UART_SetConfig+0x1f0>
 800396a:	2bc0      	cmp	r3, #192	@ 0xc0
 800396c:	d818      	bhi.n	80039a0 <UART_SetConfig+0x1f8>
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d00a      	beq.n	8003988 <UART_SetConfig+0x1e0>
 8003972:	2b80      	cmp	r3, #128	@ 0x80
 8003974:	d814      	bhi.n	80039a0 <UART_SetConfig+0x1f8>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <UART_SetConfig+0x1d8>
 800397a:	2b40      	cmp	r3, #64	@ 0x40
 800397c:	d008      	beq.n	8003990 <UART_SetConfig+0x1e8>
 800397e:	e00f      	b.n	80039a0 <UART_SetConfig+0x1f8>
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003986:	e082      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003988:	2302      	movs	r3, #2
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398e:	e07e      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003990:	2304      	movs	r3, #4
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003996:	e07a      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003998:	2308      	movs	r3, #8
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399e:	e076      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039a0:	2310      	movs	r3, #16
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039a6:	e072      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a35      	ldr	r2, [pc, #212]	@ (8003a84 <UART_SetConfig+0x2dc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d12a      	bne.n	8003a08 <UART_SetConfig+0x260>
 80039b2:	4b30      	ldr	r3, [pc, #192]	@ (8003a74 <UART_SetConfig+0x2cc>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039c0:	d01a      	beq.n	80039f8 <UART_SetConfig+0x250>
 80039c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039c6:	d81b      	bhi.n	8003a00 <UART_SetConfig+0x258>
 80039c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039cc:	d00c      	beq.n	80039e8 <UART_SetConfig+0x240>
 80039ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d2:	d815      	bhi.n	8003a00 <UART_SetConfig+0x258>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <UART_SetConfig+0x238>
 80039d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039dc:	d008      	beq.n	80039f0 <UART_SetConfig+0x248>
 80039de:	e00f      	b.n	8003a00 <UART_SetConfig+0x258>
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e6:	e052      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039e8:	2302      	movs	r3, #2
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ee:	e04e      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039f0:	2304      	movs	r3, #4
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f6:	e04a      	b.n	8003a8e <UART_SetConfig+0x2e6>
 80039f8:	2308      	movs	r3, #8
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039fe:	e046      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a00:	2310      	movs	r3, #16
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a06:	e042      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <UART_SetConfig+0x2c4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d13a      	bne.n	8003a88 <UART_SetConfig+0x2e0>
 8003a12:	4b18      	ldr	r3, [pc, #96]	@ (8003a74 <UART_SetConfig+0x2cc>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a20:	d01a      	beq.n	8003a58 <UART_SetConfig+0x2b0>
 8003a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a26:	d81b      	bhi.n	8003a60 <UART_SetConfig+0x2b8>
 8003a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a2c:	d00c      	beq.n	8003a48 <UART_SetConfig+0x2a0>
 8003a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a32:	d815      	bhi.n	8003a60 <UART_SetConfig+0x2b8>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <UART_SetConfig+0x298>
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3c:	d008      	beq.n	8003a50 <UART_SetConfig+0x2a8>
 8003a3e:	e00f      	b.n	8003a60 <UART_SetConfig+0x2b8>
 8003a40:	2300      	movs	r3, #0
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a46:	e022      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4e:	e01e      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a50:	2304      	movs	r3, #4
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a56:	e01a      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a58:	2308      	movs	r3, #8
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a5e:	e016      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a60:	2310      	movs	r3, #16
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a66:	e012      	b.n	8003a8e <UART_SetConfig+0x2e6>
 8003a68:	efff69f3 	.word	0xefff69f3
 8003a6c:	40008000 	.word	0x40008000
 8003a70:	40013800 	.word	0x40013800
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40004400 	.word	0x40004400
 8003a7c:	40004800 	.word	0x40004800
 8003a80:	40004c00 	.word	0x40004c00
 8003a84:	40005000 	.word	0x40005000
 8003a88:	2310      	movs	r3, #16
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a9f      	ldr	r2, [pc, #636]	@ (8003d10 <UART_SetConfig+0x568>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d17a      	bne.n	8003b8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d824      	bhi.n	8003aea <UART_SetConfig+0x342>
 8003aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa8 <UART_SetConfig+0x300>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003acd 	.word	0x08003acd
 8003aac:	08003aeb 	.word	0x08003aeb
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003aeb 	.word	0x08003aeb
 8003ab8:	08003adb 	.word	0x08003adb
 8003abc:	08003aeb 	.word	0x08003aeb
 8003ac0:	08003aeb 	.word	0x08003aeb
 8003ac4:	08003aeb 	.word	0x08003aeb
 8003ac8:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003acc:	f7fe fa1c 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	61f8      	str	r0, [r7, #28]
        break;
 8003ad2:	e010      	b.n	8003af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b8f      	ldr	r3, [pc, #572]	@ (8003d14 <UART_SetConfig+0x56c>)
 8003ad6:	61fb      	str	r3, [r7, #28]
        break;
 8003ad8:	e00d      	b.n	8003af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7fe f97d 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8003ade:	61f8      	str	r0, [r7, #28]
        break;
 8003ae0:	e009      	b.n	8003af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ae6:	61fb      	str	r3, [r7, #28]
        break;
 8003ae8:	e005      	b.n	8003af6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80fb 	beq.w	8003cf4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4413      	add	r3, r2
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d305      	bcc.n	8003b1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d903      	bls.n	8003b22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b20:	e0e8      	b.n	8003cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2200      	movs	r2, #0
 8003b26:	461c      	mov	r4, r3
 8003b28:	4615      	mov	r5, r2
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	022b      	lsls	r3, r5, #8
 8003b34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b38:	0222      	lsls	r2, r4, #8
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	6849      	ldr	r1, [r1, #4]
 8003b3e:	0849      	lsrs	r1, r1, #1
 8003b40:	2000      	movs	r0, #0
 8003b42:	4688      	mov	r8, r1
 8003b44:	4681      	mov	r9, r0
 8003b46:	eb12 0a08 	adds.w	sl, r2, r8
 8003b4a:	eb43 0b09 	adc.w	fp, r3, r9
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b5c:	4650      	mov	r0, sl
 8003b5e:	4659      	mov	r1, fp
 8003b60:	f7fc fb86 	bl	8000270 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b72:	d308      	bcc.n	8003b86 <UART_SetConfig+0x3de>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b7a:	d204      	bcs.n	8003b86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	60da      	str	r2, [r3, #12]
 8003b84:	e0b6      	b.n	8003cf4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b8c:	e0b2      	b.n	8003cf4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b96:	d15e      	bne.n	8003c56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d828      	bhi.n	8003bf2 <UART_SetConfig+0x44a>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <UART_SetConfig+0x400>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bcd 	.word	0x08003bcd
 8003bac:	08003bd5 	.word	0x08003bd5
 8003bb0:	08003bdd 	.word	0x08003bdd
 8003bb4:	08003bf3 	.word	0x08003bf3
 8003bb8:	08003be3 	.word	0x08003be3
 8003bbc:	08003bf3 	.word	0x08003bf3
 8003bc0:	08003bf3 	.word	0x08003bf3
 8003bc4:	08003bf3 	.word	0x08003bf3
 8003bc8:	08003beb 	.word	0x08003beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7fe f99c 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	61f8      	str	r0, [r7, #28]
        break;
 8003bd2:	e014      	b.n	8003bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd4:	f7fe f9ae 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8003bd8:	61f8      	str	r0, [r7, #28]
        break;
 8003bda:	e010      	b.n	8003bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8003d14 <UART_SetConfig+0x56c>)
 8003bde:	61fb      	str	r3, [r7, #28]
        break;
 8003be0:	e00d      	b.n	8003bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be2:	f7fe f8f9 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8003be6:	61f8      	str	r0, [r7, #28]
        break;
 8003be8:	e009      	b.n	8003bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bee:	61fb      	str	r3, [r7, #28]
        break;
 8003bf0:	e005      	b.n	8003bfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d077      	beq.n	8003cf4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005a      	lsls	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b0f      	cmp	r3, #15
 8003c1e:	d916      	bls.n	8003c4e <UART_SetConfig+0x4a6>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c26:	d212      	bcs.n	8003c4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f023 030f 	bic.w	r3, r3, #15
 8003c30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	8afb      	ldrh	r3, [r7, #22]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	8afa      	ldrh	r2, [r7, #22]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	e052      	b.n	8003cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c54:	e04e      	b.n	8003cf4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d827      	bhi.n	8003cae <UART_SetConfig+0x506>
 8003c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c64 <UART_SetConfig+0x4bc>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003c99 	.word	0x08003c99
 8003c70:	08003caf 	.word	0x08003caf
 8003c74:	08003c9f 	.word	0x08003c9f
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003caf 	.word	0x08003caf
 8003c80:	08003caf 	.word	0x08003caf
 8003c84:	08003ca7 	.word	0x08003ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe f93e 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	61f8      	str	r0, [r7, #28]
        break;
 8003c8e:	e014      	b.n	8003cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7fe f950 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8003c94:	61f8      	str	r0, [r7, #28]
        break;
 8003c96:	e010      	b.n	8003cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c98:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <UART_SetConfig+0x56c>)
 8003c9a:	61fb      	str	r3, [r7, #28]
        break;
 8003c9c:	e00d      	b.n	8003cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9e:	f7fe f89b 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8003ca2:	61f8      	str	r0, [r7, #28]
        break;
 8003ca4:	e009      	b.n	8003cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003caa:	61fb      	str	r3, [r7, #28]
        break;
 8003cac:	e005      	b.n	8003cba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cb8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d019      	beq.n	8003cf4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	085a      	lsrs	r2, r3, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	441a      	add	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d909      	bls.n	8003cee <UART_SetConfig+0x546>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce0:	d205      	bcs.n	8003cee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e002      	b.n	8003cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3728      	adds	r7, #40	@ 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d0e:	bf00      	nop
 8003d10:	40008000 	.word	0x40008000
 8003d14:	00f42400 	.word	0x00f42400

08003d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e16:	d10a      	bne.n	8003e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b098      	sub	sp, #96	@ 0x60
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e6c:	f7fc fee2 	bl	8000c34 <HAL_GetTick>
 8003e70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d12e      	bne.n	8003ede <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f88c 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d021      	beq.n	8003ede <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e6      	bne.n	8003e9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e062      	b.n	8003fa4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d149      	bne.n	8003f80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f856 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d03c      	beq.n	8003f80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	623b      	str	r3, [r7, #32]
   return(result);
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e6      	bne.n	8003f06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3308      	adds	r3, #8
 8003f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f58:	61fa      	str	r2, [r7, #28]
 8003f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	617b      	str	r3, [r7, #20]
   return(result);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e011      	b.n	8003fa4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3758      	adds	r7, #88	@ 0x58
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbc:	e049      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d045      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc6:	f7fc fe35 	bl	8000c34 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e048      	b.n	8004072 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d031      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d110      	bne.n	800401e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2208      	movs	r2, #8
 8004002:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f838 	bl	800407a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2208      	movs	r2, #8
 800400e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e029      	b.n	8004072 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800402c:	d111      	bne.n	8004052 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004036:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f81e 	bl	800407a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e00f      	b.n	8004072 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4013      	ands	r3, r2
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	bf0c      	ite	eq
 8004062:	2301      	moveq	r3, #1
 8004064:	2300      	movne	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	429a      	cmp	r2, r3
 800406e:	d0a6      	beq.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407a:	b480      	push	{r7}
 800407c:	b095      	sub	sp, #84	@ 0x54
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004092:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e6      	bne.n	8004082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3308      	adds	r3, #8
 80040ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3308      	adds	r3, #8
 80040d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e5      	bne.n	80040b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d118      	bne.n	8004122 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f023 0310 	bic.w	r3, r3, #16
 8004104:	647b      	str	r3, [r7, #68]	@ 0x44
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6979      	ldr	r1, [r7, #20]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	613b      	str	r3, [r7, #16]
   return(result);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e6      	bne.n	80040f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004136:	bf00      	nop
 8004138:	3754      	adds	r7, #84	@ 0x54
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff fb0b 	bl	800377c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b088      	sub	sp, #32
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60bb      	str	r3, [r7, #8]
   return(result);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6979      	ldr	r1, [r7, #20]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	613b      	str	r3, [r7, #16]
   return(result);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff fad7 	bl	8003768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ba:	bf00      	nop
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <siprintf>:
 80041d8:	b40e      	push	{r1, r2, r3}
 80041da:	b500      	push	{lr}
 80041dc:	b09c      	sub	sp, #112	@ 0x70
 80041de:	ab1d      	add	r3, sp, #116	@ 0x74
 80041e0:	9002      	str	r0, [sp, #8]
 80041e2:	9006      	str	r0, [sp, #24]
 80041e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041e8:	4809      	ldr	r0, [pc, #36]	@ (8004210 <siprintf+0x38>)
 80041ea:	9107      	str	r1, [sp, #28]
 80041ec:	9104      	str	r1, [sp, #16]
 80041ee:	4909      	ldr	r1, [pc, #36]	@ (8004214 <siprintf+0x3c>)
 80041f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80041f4:	9105      	str	r1, [sp, #20]
 80041f6:	6800      	ldr	r0, [r0, #0]
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	a902      	add	r1, sp, #8
 80041fc:	f000 f994 	bl	8004528 <_svfiprintf_r>
 8004200:	9b02      	ldr	r3, [sp, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	b01c      	add	sp, #112	@ 0x70
 8004208:	f85d eb04 	ldr.w	lr, [sp], #4
 800420c:	b003      	add	sp, #12
 800420e:	4770      	bx	lr
 8004210:	2000000c 	.word	0x2000000c
 8004214:	ffff0208 	.word	0xffff0208

08004218 <memset>:
 8004218:	4402      	add	r2, r0
 800421a:	4603      	mov	r3, r0
 800421c:	4293      	cmp	r3, r2
 800421e:	d100      	bne.n	8004222 <memset+0xa>
 8004220:	4770      	bx	lr
 8004222:	f803 1b01 	strb.w	r1, [r3], #1
 8004226:	e7f9      	b.n	800421c <memset+0x4>

08004228 <__errno>:
 8004228:	4b01      	ldr	r3, [pc, #4]	@ (8004230 <__errno+0x8>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	2000000c 	.word	0x2000000c

08004234 <__libc_init_array>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	4d0d      	ldr	r5, [pc, #52]	@ (800426c <__libc_init_array+0x38>)
 8004238:	4c0d      	ldr	r4, [pc, #52]	@ (8004270 <__libc_init_array+0x3c>)
 800423a:	1b64      	subs	r4, r4, r5
 800423c:	10a4      	asrs	r4, r4, #2
 800423e:	2600      	movs	r6, #0
 8004240:	42a6      	cmp	r6, r4
 8004242:	d109      	bne.n	8004258 <__libc_init_array+0x24>
 8004244:	4d0b      	ldr	r5, [pc, #44]	@ (8004274 <__libc_init_array+0x40>)
 8004246:	4c0c      	ldr	r4, [pc, #48]	@ (8004278 <__libc_init_array+0x44>)
 8004248:	f000 fc66 	bl	8004b18 <_init>
 800424c:	1b64      	subs	r4, r4, r5
 800424e:	10a4      	asrs	r4, r4, #2
 8004250:	2600      	movs	r6, #0
 8004252:	42a6      	cmp	r6, r4
 8004254:	d105      	bne.n	8004262 <__libc_init_array+0x2e>
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	f855 3b04 	ldr.w	r3, [r5], #4
 800425c:	4798      	blx	r3
 800425e:	3601      	adds	r6, #1
 8004260:	e7ee      	b.n	8004240 <__libc_init_array+0xc>
 8004262:	f855 3b04 	ldr.w	r3, [r5], #4
 8004266:	4798      	blx	r3
 8004268:	3601      	adds	r6, #1
 800426a:	e7f2      	b.n	8004252 <__libc_init_array+0x1e>
 800426c:	08004be4 	.word	0x08004be4
 8004270:	08004be4 	.word	0x08004be4
 8004274:	08004be4 	.word	0x08004be4
 8004278:	08004be8 	.word	0x08004be8

0800427c <__retarget_lock_acquire_recursive>:
 800427c:	4770      	bx	lr

0800427e <__retarget_lock_release_recursive>:
 800427e:	4770      	bx	lr

08004280 <_free_r>:
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	4605      	mov	r5, r0
 8004284:	2900      	cmp	r1, #0
 8004286:	d041      	beq.n	800430c <_free_r+0x8c>
 8004288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800428c:	1f0c      	subs	r4, r1, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	bfb8      	it	lt
 8004292:	18e4      	addlt	r4, r4, r3
 8004294:	f000 f8e0 	bl	8004458 <__malloc_lock>
 8004298:	4a1d      	ldr	r2, [pc, #116]	@ (8004310 <_free_r+0x90>)
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	b933      	cbnz	r3, 80042ac <_free_r+0x2c>
 800429e:	6063      	str	r3, [r4, #4]
 80042a0:	6014      	str	r4, [r2, #0]
 80042a2:	4628      	mov	r0, r5
 80042a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a8:	f000 b8dc 	b.w	8004464 <__malloc_unlock>
 80042ac:	42a3      	cmp	r3, r4
 80042ae:	d908      	bls.n	80042c2 <_free_r+0x42>
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	1821      	adds	r1, r4, r0
 80042b4:	428b      	cmp	r3, r1
 80042b6:	bf01      	itttt	eq
 80042b8:	6819      	ldreq	r1, [r3, #0]
 80042ba:	685b      	ldreq	r3, [r3, #4]
 80042bc:	1809      	addeq	r1, r1, r0
 80042be:	6021      	streq	r1, [r4, #0]
 80042c0:	e7ed      	b.n	800429e <_free_r+0x1e>
 80042c2:	461a      	mov	r2, r3
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	b10b      	cbz	r3, 80042cc <_free_r+0x4c>
 80042c8:	42a3      	cmp	r3, r4
 80042ca:	d9fa      	bls.n	80042c2 <_free_r+0x42>
 80042cc:	6811      	ldr	r1, [r2, #0]
 80042ce:	1850      	adds	r0, r2, r1
 80042d0:	42a0      	cmp	r0, r4
 80042d2:	d10b      	bne.n	80042ec <_free_r+0x6c>
 80042d4:	6820      	ldr	r0, [r4, #0]
 80042d6:	4401      	add	r1, r0
 80042d8:	1850      	adds	r0, r2, r1
 80042da:	4283      	cmp	r3, r0
 80042dc:	6011      	str	r1, [r2, #0]
 80042de:	d1e0      	bne.n	80042a2 <_free_r+0x22>
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	6053      	str	r3, [r2, #4]
 80042e6:	4408      	add	r0, r1
 80042e8:	6010      	str	r0, [r2, #0]
 80042ea:	e7da      	b.n	80042a2 <_free_r+0x22>
 80042ec:	d902      	bls.n	80042f4 <_free_r+0x74>
 80042ee:	230c      	movs	r3, #12
 80042f0:	602b      	str	r3, [r5, #0]
 80042f2:	e7d6      	b.n	80042a2 <_free_r+0x22>
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	1821      	adds	r1, r4, r0
 80042f8:	428b      	cmp	r3, r1
 80042fa:	bf04      	itt	eq
 80042fc:	6819      	ldreq	r1, [r3, #0]
 80042fe:	685b      	ldreq	r3, [r3, #4]
 8004300:	6063      	str	r3, [r4, #4]
 8004302:	bf04      	itt	eq
 8004304:	1809      	addeq	r1, r1, r0
 8004306:	6021      	streq	r1, [r4, #0]
 8004308:	6054      	str	r4, [r2, #4]
 800430a:	e7ca      	b.n	80042a2 <_free_r+0x22>
 800430c:	bd38      	pop	{r3, r4, r5, pc}
 800430e:	bf00      	nop
 8004310:	200002c8 	.word	0x200002c8

08004314 <sbrk_aligned>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4e0f      	ldr	r6, [pc, #60]	@ (8004354 <sbrk_aligned+0x40>)
 8004318:	460c      	mov	r4, r1
 800431a:	6831      	ldr	r1, [r6, #0]
 800431c:	4605      	mov	r5, r0
 800431e:	b911      	cbnz	r1, 8004326 <sbrk_aligned+0x12>
 8004320:	f000 fba6 	bl	8004a70 <_sbrk_r>
 8004324:	6030      	str	r0, [r6, #0]
 8004326:	4621      	mov	r1, r4
 8004328:	4628      	mov	r0, r5
 800432a:	f000 fba1 	bl	8004a70 <_sbrk_r>
 800432e:	1c43      	adds	r3, r0, #1
 8004330:	d103      	bne.n	800433a <sbrk_aligned+0x26>
 8004332:	f04f 34ff 	mov.w	r4, #4294967295
 8004336:	4620      	mov	r0, r4
 8004338:	bd70      	pop	{r4, r5, r6, pc}
 800433a:	1cc4      	adds	r4, r0, #3
 800433c:	f024 0403 	bic.w	r4, r4, #3
 8004340:	42a0      	cmp	r0, r4
 8004342:	d0f8      	beq.n	8004336 <sbrk_aligned+0x22>
 8004344:	1a21      	subs	r1, r4, r0
 8004346:	4628      	mov	r0, r5
 8004348:	f000 fb92 	bl	8004a70 <_sbrk_r>
 800434c:	3001      	adds	r0, #1
 800434e:	d1f2      	bne.n	8004336 <sbrk_aligned+0x22>
 8004350:	e7ef      	b.n	8004332 <sbrk_aligned+0x1e>
 8004352:	bf00      	nop
 8004354:	200002c4 	.word	0x200002c4

08004358 <_malloc_r>:
 8004358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800435c:	1ccd      	adds	r5, r1, #3
 800435e:	f025 0503 	bic.w	r5, r5, #3
 8004362:	3508      	adds	r5, #8
 8004364:	2d0c      	cmp	r5, #12
 8004366:	bf38      	it	cc
 8004368:	250c      	movcc	r5, #12
 800436a:	2d00      	cmp	r5, #0
 800436c:	4606      	mov	r6, r0
 800436e:	db01      	blt.n	8004374 <_malloc_r+0x1c>
 8004370:	42a9      	cmp	r1, r5
 8004372:	d904      	bls.n	800437e <_malloc_r+0x26>
 8004374:	230c      	movs	r3, #12
 8004376:	6033      	str	r3, [r6, #0]
 8004378:	2000      	movs	r0, #0
 800437a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800437e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004454 <_malloc_r+0xfc>
 8004382:	f000 f869 	bl	8004458 <__malloc_lock>
 8004386:	f8d8 3000 	ldr.w	r3, [r8]
 800438a:	461c      	mov	r4, r3
 800438c:	bb44      	cbnz	r4, 80043e0 <_malloc_r+0x88>
 800438e:	4629      	mov	r1, r5
 8004390:	4630      	mov	r0, r6
 8004392:	f7ff ffbf 	bl	8004314 <sbrk_aligned>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	4604      	mov	r4, r0
 800439a:	d158      	bne.n	800444e <_malloc_r+0xf6>
 800439c:	f8d8 4000 	ldr.w	r4, [r8]
 80043a0:	4627      	mov	r7, r4
 80043a2:	2f00      	cmp	r7, #0
 80043a4:	d143      	bne.n	800442e <_malloc_r+0xd6>
 80043a6:	2c00      	cmp	r4, #0
 80043a8:	d04b      	beq.n	8004442 <_malloc_r+0xea>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	4639      	mov	r1, r7
 80043ae:	4630      	mov	r0, r6
 80043b0:	eb04 0903 	add.w	r9, r4, r3
 80043b4:	f000 fb5c 	bl	8004a70 <_sbrk_r>
 80043b8:	4581      	cmp	r9, r0
 80043ba:	d142      	bne.n	8004442 <_malloc_r+0xea>
 80043bc:	6821      	ldr	r1, [r4, #0]
 80043be:	1a6d      	subs	r5, r5, r1
 80043c0:	4629      	mov	r1, r5
 80043c2:	4630      	mov	r0, r6
 80043c4:	f7ff ffa6 	bl	8004314 <sbrk_aligned>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d03a      	beq.n	8004442 <_malloc_r+0xea>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	442b      	add	r3, r5
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	f8d8 3000 	ldr.w	r3, [r8]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	bb62      	cbnz	r2, 8004434 <_malloc_r+0xdc>
 80043da:	f8c8 7000 	str.w	r7, [r8]
 80043de:	e00f      	b.n	8004400 <_malloc_r+0xa8>
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	1b52      	subs	r2, r2, r5
 80043e4:	d420      	bmi.n	8004428 <_malloc_r+0xd0>
 80043e6:	2a0b      	cmp	r2, #11
 80043e8:	d917      	bls.n	800441a <_malloc_r+0xc2>
 80043ea:	1961      	adds	r1, r4, r5
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	6025      	str	r5, [r4, #0]
 80043f0:	bf18      	it	ne
 80043f2:	6059      	strne	r1, [r3, #4]
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	bf08      	it	eq
 80043f8:	f8c8 1000 	streq.w	r1, [r8]
 80043fc:	5162      	str	r2, [r4, r5]
 80043fe:	604b      	str	r3, [r1, #4]
 8004400:	4630      	mov	r0, r6
 8004402:	f000 f82f 	bl	8004464 <__malloc_unlock>
 8004406:	f104 000b 	add.w	r0, r4, #11
 800440a:	1d23      	adds	r3, r4, #4
 800440c:	f020 0007 	bic.w	r0, r0, #7
 8004410:	1ac2      	subs	r2, r0, r3
 8004412:	bf1c      	itt	ne
 8004414:	1a1b      	subne	r3, r3, r0
 8004416:	50a3      	strne	r3, [r4, r2]
 8004418:	e7af      	b.n	800437a <_malloc_r+0x22>
 800441a:	6862      	ldr	r2, [r4, #4]
 800441c:	42a3      	cmp	r3, r4
 800441e:	bf0c      	ite	eq
 8004420:	f8c8 2000 	streq.w	r2, [r8]
 8004424:	605a      	strne	r2, [r3, #4]
 8004426:	e7eb      	b.n	8004400 <_malloc_r+0xa8>
 8004428:	4623      	mov	r3, r4
 800442a:	6864      	ldr	r4, [r4, #4]
 800442c:	e7ae      	b.n	800438c <_malloc_r+0x34>
 800442e:	463c      	mov	r4, r7
 8004430:	687f      	ldr	r7, [r7, #4]
 8004432:	e7b6      	b.n	80043a2 <_malloc_r+0x4a>
 8004434:	461a      	mov	r2, r3
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	42a3      	cmp	r3, r4
 800443a:	d1fb      	bne.n	8004434 <_malloc_r+0xdc>
 800443c:	2300      	movs	r3, #0
 800443e:	6053      	str	r3, [r2, #4]
 8004440:	e7de      	b.n	8004400 <_malloc_r+0xa8>
 8004442:	230c      	movs	r3, #12
 8004444:	6033      	str	r3, [r6, #0]
 8004446:	4630      	mov	r0, r6
 8004448:	f000 f80c 	bl	8004464 <__malloc_unlock>
 800444c:	e794      	b.n	8004378 <_malloc_r+0x20>
 800444e:	6005      	str	r5, [r0, #0]
 8004450:	e7d6      	b.n	8004400 <_malloc_r+0xa8>
 8004452:	bf00      	nop
 8004454:	200002c8 	.word	0x200002c8

08004458 <__malloc_lock>:
 8004458:	4801      	ldr	r0, [pc, #4]	@ (8004460 <__malloc_lock+0x8>)
 800445a:	f7ff bf0f 	b.w	800427c <__retarget_lock_acquire_recursive>
 800445e:	bf00      	nop
 8004460:	200002c0 	.word	0x200002c0

08004464 <__malloc_unlock>:
 8004464:	4801      	ldr	r0, [pc, #4]	@ (800446c <__malloc_unlock+0x8>)
 8004466:	f7ff bf0a 	b.w	800427e <__retarget_lock_release_recursive>
 800446a:	bf00      	nop
 800446c:	200002c0 	.word	0x200002c0

08004470 <__ssputs_r>:
 8004470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004474:	688e      	ldr	r6, [r1, #8]
 8004476:	461f      	mov	r7, r3
 8004478:	42be      	cmp	r6, r7
 800447a:	680b      	ldr	r3, [r1, #0]
 800447c:	4682      	mov	sl, r0
 800447e:	460c      	mov	r4, r1
 8004480:	4690      	mov	r8, r2
 8004482:	d82d      	bhi.n	80044e0 <__ssputs_r+0x70>
 8004484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004488:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800448c:	d026      	beq.n	80044dc <__ssputs_r+0x6c>
 800448e:	6965      	ldr	r5, [r4, #20]
 8004490:	6909      	ldr	r1, [r1, #16]
 8004492:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004496:	eba3 0901 	sub.w	r9, r3, r1
 800449a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800449e:	1c7b      	adds	r3, r7, #1
 80044a0:	444b      	add	r3, r9
 80044a2:	106d      	asrs	r5, r5, #1
 80044a4:	429d      	cmp	r5, r3
 80044a6:	bf38      	it	cc
 80044a8:	461d      	movcc	r5, r3
 80044aa:	0553      	lsls	r3, r2, #21
 80044ac:	d527      	bpl.n	80044fe <__ssputs_r+0x8e>
 80044ae:	4629      	mov	r1, r5
 80044b0:	f7ff ff52 	bl	8004358 <_malloc_r>
 80044b4:	4606      	mov	r6, r0
 80044b6:	b360      	cbz	r0, 8004512 <__ssputs_r+0xa2>
 80044b8:	6921      	ldr	r1, [r4, #16]
 80044ba:	464a      	mov	r2, r9
 80044bc:	f000 fae8 	bl	8004a90 <memcpy>
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ca:	81a3      	strh	r3, [r4, #12]
 80044cc:	6126      	str	r6, [r4, #16]
 80044ce:	6165      	str	r5, [r4, #20]
 80044d0:	444e      	add	r6, r9
 80044d2:	eba5 0509 	sub.w	r5, r5, r9
 80044d6:	6026      	str	r6, [r4, #0]
 80044d8:	60a5      	str	r5, [r4, #8]
 80044da:	463e      	mov	r6, r7
 80044dc:	42be      	cmp	r6, r7
 80044de:	d900      	bls.n	80044e2 <__ssputs_r+0x72>
 80044e0:	463e      	mov	r6, r7
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	4632      	mov	r2, r6
 80044e6:	4641      	mov	r1, r8
 80044e8:	f000 faa8 	bl	8004a3c <memmove>
 80044ec:	68a3      	ldr	r3, [r4, #8]
 80044ee:	1b9b      	subs	r3, r3, r6
 80044f0:	60a3      	str	r3, [r4, #8]
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	4433      	add	r3, r6
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fe:	462a      	mov	r2, r5
 8004500:	f000 fad4 	bl	8004aac <_realloc_r>
 8004504:	4606      	mov	r6, r0
 8004506:	2800      	cmp	r0, #0
 8004508:	d1e0      	bne.n	80044cc <__ssputs_r+0x5c>
 800450a:	6921      	ldr	r1, [r4, #16]
 800450c:	4650      	mov	r0, sl
 800450e:	f7ff feb7 	bl	8004280 <_free_r>
 8004512:	230c      	movs	r3, #12
 8004514:	f8ca 3000 	str.w	r3, [sl]
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	e7e9      	b.n	80044fa <__ssputs_r+0x8a>
	...

08004528 <_svfiprintf_r>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	4698      	mov	r8, r3
 800452e:	898b      	ldrh	r3, [r1, #12]
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	b09d      	sub	sp, #116	@ 0x74
 8004534:	4607      	mov	r7, r0
 8004536:	460d      	mov	r5, r1
 8004538:	4614      	mov	r4, r2
 800453a:	d510      	bpl.n	800455e <_svfiprintf_r+0x36>
 800453c:	690b      	ldr	r3, [r1, #16]
 800453e:	b973      	cbnz	r3, 800455e <_svfiprintf_r+0x36>
 8004540:	2140      	movs	r1, #64	@ 0x40
 8004542:	f7ff ff09 	bl	8004358 <_malloc_r>
 8004546:	6028      	str	r0, [r5, #0]
 8004548:	6128      	str	r0, [r5, #16]
 800454a:	b930      	cbnz	r0, 800455a <_svfiprintf_r+0x32>
 800454c:	230c      	movs	r3, #12
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	b01d      	add	sp, #116	@ 0x74
 8004556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455a:	2340      	movs	r3, #64	@ 0x40
 800455c:	616b      	str	r3, [r5, #20]
 800455e:	2300      	movs	r3, #0
 8004560:	9309      	str	r3, [sp, #36]	@ 0x24
 8004562:	2320      	movs	r3, #32
 8004564:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004568:	f8cd 800c 	str.w	r8, [sp, #12]
 800456c:	2330      	movs	r3, #48	@ 0x30
 800456e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800470c <_svfiprintf_r+0x1e4>
 8004572:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004576:	f04f 0901 	mov.w	r9, #1
 800457a:	4623      	mov	r3, r4
 800457c:	469a      	mov	sl, r3
 800457e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004582:	b10a      	cbz	r2, 8004588 <_svfiprintf_r+0x60>
 8004584:	2a25      	cmp	r2, #37	@ 0x25
 8004586:	d1f9      	bne.n	800457c <_svfiprintf_r+0x54>
 8004588:	ebba 0b04 	subs.w	fp, sl, r4
 800458c:	d00b      	beq.n	80045a6 <_svfiprintf_r+0x7e>
 800458e:	465b      	mov	r3, fp
 8004590:	4622      	mov	r2, r4
 8004592:	4629      	mov	r1, r5
 8004594:	4638      	mov	r0, r7
 8004596:	f7ff ff6b 	bl	8004470 <__ssputs_r>
 800459a:	3001      	adds	r0, #1
 800459c:	f000 80a7 	beq.w	80046ee <_svfiprintf_r+0x1c6>
 80045a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045a2:	445a      	add	r2, fp
 80045a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80045a6:	f89a 3000 	ldrb.w	r3, [sl]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 809f 	beq.w	80046ee <_svfiprintf_r+0x1c6>
 80045b0:	2300      	movs	r3, #0
 80045b2:	f04f 32ff 	mov.w	r2, #4294967295
 80045b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ba:	f10a 0a01 	add.w	sl, sl, #1
 80045be:	9304      	str	r3, [sp, #16]
 80045c0:	9307      	str	r3, [sp, #28]
 80045c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80045c8:	4654      	mov	r4, sl
 80045ca:	2205      	movs	r2, #5
 80045cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d0:	484e      	ldr	r0, [pc, #312]	@ (800470c <_svfiprintf_r+0x1e4>)
 80045d2:	f7fb fdfd 	bl	80001d0 <memchr>
 80045d6:	9a04      	ldr	r2, [sp, #16]
 80045d8:	b9d8      	cbnz	r0, 8004612 <_svfiprintf_r+0xea>
 80045da:	06d0      	lsls	r0, r2, #27
 80045dc:	bf44      	itt	mi
 80045de:	2320      	movmi	r3, #32
 80045e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045e4:	0711      	lsls	r1, r2, #28
 80045e6:	bf44      	itt	mi
 80045e8:	232b      	movmi	r3, #43	@ 0x2b
 80045ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045ee:	f89a 3000 	ldrb.w	r3, [sl]
 80045f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045f4:	d015      	beq.n	8004622 <_svfiprintf_r+0xfa>
 80045f6:	9a07      	ldr	r2, [sp, #28]
 80045f8:	4654      	mov	r4, sl
 80045fa:	2000      	movs	r0, #0
 80045fc:	f04f 0c0a 	mov.w	ip, #10
 8004600:	4621      	mov	r1, r4
 8004602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004606:	3b30      	subs	r3, #48	@ 0x30
 8004608:	2b09      	cmp	r3, #9
 800460a:	d94b      	bls.n	80046a4 <_svfiprintf_r+0x17c>
 800460c:	b1b0      	cbz	r0, 800463c <_svfiprintf_r+0x114>
 800460e:	9207      	str	r2, [sp, #28]
 8004610:	e014      	b.n	800463c <_svfiprintf_r+0x114>
 8004612:	eba0 0308 	sub.w	r3, r0, r8
 8004616:	fa09 f303 	lsl.w	r3, r9, r3
 800461a:	4313      	orrs	r3, r2
 800461c:	9304      	str	r3, [sp, #16]
 800461e:	46a2      	mov	sl, r4
 8004620:	e7d2      	b.n	80045c8 <_svfiprintf_r+0xa0>
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	1d19      	adds	r1, r3, #4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	9103      	str	r1, [sp, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	bfbb      	ittet	lt
 800462e:	425b      	neglt	r3, r3
 8004630:	f042 0202 	orrlt.w	r2, r2, #2
 8004634:	9307      	strge	r3, [sp, #28]
 8004636:	9307      	strlt	r3, [sp, #28]
 8004638:	bfb8      	it	lt
 800463a:	9204      	strlt	r2, [sp, #16]
 800463c:	7823      	ldrb	r3, [r4, #0]
 800463e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004640:	d10a      	bne.n	8004658 <_svfiprintf_r+0x130>
 8004642:	7863      	ldrb	r3, [r4, #1]
 8004644:	2b2a      	cmp	r3, #42	@ 0x2a
 8004646:	d132      	bne.n	80046ae <_svfiprintf_r+0x186>
 8004648:	9b03      	ldr	r3, [sp, #12]
 800464a:	1d1a      	adds	r2, r3, #4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	9203      	str	r2, [sp, #12]
 8004650:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004654:	3402      	adds	r4, #2
 8004656:	9305      	str	r3, [sp, #20]
 8004658:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800471c <_svfiprintf_r+0x1f4>
 800465c:	7821      	ldrb	r1, [r4, #0]
 800465e:	2203      	movs	r2, #3
 8004660:	4650      	mov	r0, sl
 8004662:	f7fb fdb5 	bl	80001d0 <memchr>
 8004666:	b138      	cbz	r0, 8004678 <_svfiprintf_r+0x150>
 8004668:	9b04      	ldr	r3, [sp, #16]
 800466a:	eba0 000a 	sub.w	r0, r0, sl
 800466e:	2240      	movs	r2, #64	@ 0x40
 8004670:	4082      	lsls	r2, r0
 8004672:	4313      	orrs	r3, r2
 8004674:	3401      	adds	r4, #1
 8004676:	9304      	str	r3, [sp, #16]
 8004678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467c:	4824      	ldr	r0, [pc, #144]	@ (8004710 <_svfiprintf_r+0x1e8>)
 800467e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004682:	2206      	movs	r2, #6
 8004684:	f7fb fda4 	bl	80001d0 <memchr>
 8004688:	2800      	cmp	r0, #0
 800468a:	d036      	beq.n	80046fa <_svfiprintf_r+0x1d2>
 800468c:	4b21      	ldr	r3, [pc, #132]	@ (8004714 <_svfiprintf_r+0x1ec>)
 800468e:	bb1b      	cbnz	r3, 80046d8 <_svfiprintf_r+0x1b0>
 8004690:	9b03      	ldr	r3, [sp, #12]
 8004692:	3307      	adds	r3, #7
 8004694:	f023 0307 	bic.w	r3, r3, #7
 8004698:	3308      	adds	r3, #8
 800469a:	9303      	str	r3, [sp, #12]
 800469c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800469e:	4433      	add	r3, r6
 80046a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046a2:	e76a      	b.n	800457a <_svfiprintf_r+0x52>
 80046a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046a8:	460c      	mov	r4, r1
 80046aa:	2001      	movs	r0, #1
 80046ac:	e7a8      	b.n	8004600 <_svfiprintf_r+0xd8>
 80046ae:	2300      	movs	r3, #0
 80046b0:	3401      	adds	r4, #1
 80046b2:	9305      	str	r3, [sp, #20]
 80046b4:	4619      	mov	r1, r3
 80046b6:	f04f 0c0a 	mov.w	ip, #10
 80046ba:	4620      	mov	r0, r4
 80046bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046c0:	3a30      	subs	r2, #48	@ 0x30
 80046c2:	2a09      	cmp	r2, #9
 80046c4:	d903      	bls.n	80046ce <_svfiprintf_r+0x1a6>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0c6      	beq.n	8004658 <_svfiprintf_r+0x130>
 80046ca:	9105      	str	r1, [sp, #20]
 80046cc:	e7c4      	b.n	8004658 <_svfiprintf_r+0x130>
 80046ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80046d2:	4604      	mov	r4, r0
 80046d4:	2301      	movs	r3, #1
 80046d6:	e7f0      	b.n	80046ba <_svfiprintf_r+0x192>
 80046d8:	ab03      	add	r3, sp, #12
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	462a      	mov	r2, r5
 80046de:	4b0e      	ldr	r3, [pc, #56]	@ (8004718 <_svfiprintf_r+0x1f0>)
 80046e0:	a904      	add	r1, sp, #16
 80046e2:	4638      	mov	r0, r7
 80046e4:	f3af 8000 	nop.w
 80046e8:	1c42      	adds	r2, r0, #1
 80046ea:	4606      	mov	r6, r0
 80046ec:	d1d6      	bne.n	800469c <_svfiprintf_r+0x174>
 80046ee:	89ab      	ldrh	r3, [r5, #12]
 80046f0:	065b      	lsls	r3, r3, #25
 80046f2:	f53f af2d 	bmi.w	8004550 <_svfiprintf_r+0x28>
 80046f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046f8:	e72c      	b.n	8004554 <_svfiprintf_r+0x2c>
 80046fa:	ab03      	add	r3, sp, #12
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	462a      	mov	r2, r5
 8004700:	4b05      	ldr	r3, [pc, #20]	@ (8004718 <_svfiprintf_r+0x1f0>)
 8004702:	a904      	add	r1, sp, #16
 8004704:	4638      	mov	r0, r7
 8004706:	f000 f879 	bl	80047fc <_printf_i>
 800470a:	e7ed      	b.n	80046e8 <_svfiprintf_r+0x1c0>
 800470c:	08004ba8 	.word	0x08004ba8
 8004710:	08004bb2 	.word	0x08004bb2
 8004714:	00000000 	.word	0x00000000
 8004718:	08004471 	.word	0x08004471
 800471c:	08004bae 	.word	0x08004bae

08004720 <_printf_common>:
 8004720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	4616      	mov	r6, r2
 8004726:	4698      	mov	r8, r3
 8004728:	688a      	ldr	r2, [r1, #8]
 800472a:	690b      	ldr	r3, [r1, #16]
 800472c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004730:	4293      	cmp	r3, r2
 8004732:	bfb8      	it	lt
 8004734:	4613      	movlt	r3, r2
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800473c:	4607      	mov	r7, r0
 800473e:	460c      	mov	r4, r1
 8004740:	b10a      	cbz	r2, 8004746 <_printf_common+0x26>
 8004742:	3301      	adds	r3, #1
 8004744:	6033      	str	r3, [r6, #0]
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	0699      	lsls	r1, r3, #26
 800474a:	bf42      	ittt	mi
 800474c:	6833      	ldrmi	r3, [r6, #0]
 800474e:	3302      	addmi	r3, #2
 8004750:	6033      	strmi	r3, [r6, #0]
 8004752:	6825      	ldr	r5, [r4, #0]
 8004754:	f015 0506 	ands.w	r5, r5, #6
 8004758:	d106      	bne.n	8004768 <_printf_common+0x48>
 800475a:	f104 0a19 	add.w	sl, r4, #25
 800475e:	68e3      	ldr	r3, [r4, #12]
 8004760:	6832      	ldr	r2, [r6, #0]
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	42ab      	cmp	r3, r5
 8004766:	dc26      	bgt.n	80047b6 <_printf_common+0x96>
 8004768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	3b00      	subs	r3, #0
 8004770:	bf18      	it	ne
 8004772:	2301      	movne	r3, #1
 8004774:	0692      	lsls	r2, r2, #26
 8004776:	d42b      	bmi.n	80047d0 <_printf_common+0xb0>
 8004778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800477c:	4641      	mov	r1, r8
 800477e:	4638      	mov	r0, r7
 8004780:	47c8      	blx	r9
 8004782:	3001      	adds	r0, #1
 8004784:	d01e      	beq.n	80047c4 <_printf_common+0xa4>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	6922      	ldr	r2, [r4, #16]
 800478a:	f003 0306 	and.w	r3, r3, #6
 800478e:	2b04      	cmp	r3, #4
 8004790:	bf02      	ittt	eq
 8004792:	68e5      	ldreq	r5, [r4, #12]
 8004794:	6833      	ldreq	r3, [r6, #0]
 8004796:	1aed      	subeq	r5, r5, r3
 8004798:	68a3      	ldr	r3, [r4, #8]
 800479a:	bf0c      	ite	eq
 800479c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047a0:	2500      	movne	r5, #0
 80047a2:	4293      	cmp	r3, r2
 80047a4:	bfc4      	itt	gt
 80047a6:	1a9b      	subgt	r3, r3, r2
 80047a8:	18ed      	addgt	r5, r5, r3
 80047aa:	2600      	movs	r6, #0
 80047ac:	341a      	adds	r4, #26
 80047ae:	42b5      	cmp	r5, r6
 80047b0:	d11a      	bne.n	80047e8 <_printf_common+0xc8>
 80047b2:	2000      	movs	r0, #0
 80047b4:	e008      	b.n	80047c8 <_printf_common+0xa8>
 80047b6:	2301      	movs	r3, #1
 80047b8:	4652      	mov	r2, sl
 80047ba:	4641      	mov	r1, r8
 80047bc:	4638      	mov	r0, r7
 80047be:	47c8      	blx	r9
 80047c0:	3001      	adds	r0, #1
 80047c2:	d103      	bne.n	80047cc <_printf_common+0xac>
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	3501      	adds	r5, #1
 80047ce:	e7c6      	b.n	800475e <_printf_common+0x3e>
 80047d0:	18e1      	adds	r1, r4, r3
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	2030      	movs	r0, #48	@ 0x30
 80047d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047da:	4422      	add	r2, r4
 80047dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047e4:	3302      	adds	r3, #2
 80047e6:	e7c7      	b.n	8004778 <_printf_common+0x58>
 80047e8:	2301      	movs	r3, #1
 80047ea:	4622      	mov	r2, r4
 80047ec:	4641      	mov	r1, r8
 80047ee:	4638      	mov	r0, r7
 80047f0:	47c8      	blx	r9
 80047f2:	3001      	adds	r0, #1
 80047f4:	d0e6      	beq.n	80047c4 <_printf_common+0xa4>
 80047f6:	3601      	adds	r6, #1
 80047f8:	e7d9      	b.n	80047ae <_printf_common+0x8e>
	...

080047fc <_printf_i>:
 80047fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	7e0f      	ldrb	r7, [r1, #24]
 8004802:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004804:	2f78      	cmp	r7, #120	@ 0x78
 8004806:	4691      	mov	r9, r2
 8004808:	4680      	mov	r8, r0
 800480a:	460c      	mov	r4, r1
 800480c:	469a      	mov	sl, r3
 800480e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004812:	d807      	bhi.n	8004824 <_printf_i+0x28>
 8004814:	2f62      	cmp	r7, #98	@ 0x62
 8004816:	d80a      	bhi.n	800482e <_printf_i+0x32>
 8004818:	2f00      	cmp	r7, #0
 800481a:	f000 80d2 	beq.w	80049c2 <_printf_i+0x1c6>
 800481e:	2f58      	cmp	r7, #88	@ 0x58
 8004820:	f000 80b9 	beq.w	8004996 <_printf_i+0x19a>
 8004824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800482c:	e03a      	b.n	80048a4 <_printf_i+0xa8>
 800482e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004832:	2b15      	cmp	r3, #21
 8004834:	d8f6      	bhi.n	8004824 <_printf_i+0x28>
 8004836:	a101      	add	r1, pc, #4	@ (adr r1, 800483c <_printf_i+0x40>)
 8004838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800483c:	08004895 	.word	0x08004895
 8004840:	080048a9 	.word	0x080048a9
 8004844:	08004825 	.word	0x08004825
 8004848:	08004825 	.word	0x08004825
 800484c:	08004825 	.word	0x08004825
 8004850:	08004825 	.word	0x08004825
 8004854:	080048a9 	.word	0x080048a9
 8004858:	08004825 	.word	0x08004825
 800485c:	08004825 	.word	0x08004825
 8004860:	08004825 	.word	0x08004825
 8004864:	08004825 	.word	0x08004825
 8004868:	080049a9 	.word	0x080049a9
 800486c:	080048d3 	.word	0x080048d3
 8004870:	08004963 	.word	0x08004963
 8004874:	08004825 	.word	0x08004825
 8004878:	08004825 	.word	0x08004825
 800487c:	080049cb 	.word	0x080049cb
 8004880:	08004825 	.word	0x08004825
 8004884:	080048d3 	.word	0x080048d3
 8004888:	08004825 	.word	0x08004825
 800488c:	08004825 	.word	0x08004825
 8004890:	0800496b 	.word	0x0800496b
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	1d1a      	adds	r2, r3, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6032      	str	r2, [r6, #0]
 800489c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048a4:	2301      	movs	r3, #1
 80048a6:	e09d      	b.n	80049e4 <_printf_i+0x1e8>
 80048a8:	6833      	ldr	r3, [r6, #0]
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	1d19      	adds	r1, r3, #4
 80048ae:	6031      	str	r1, [r6, #0]
 80048b0:	0606      	lsls	r6, r0, #24
 80048b2:	d501      	bpl.n	80048b8 <_printf_i+0xbc>
 80048b4:	681d      	ldr	r5, [r3, #0]
 80048b6:	e003      	b.n	80048c0 <_printf_i+0xc4>
 80048b8:	0645      	lsls	r5, r0, #25
 80048ba:	d5fb      	bpl.n	80048b4 <_printf_i+0xb8>
 80048bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	da03      	bge.n	80048cc <_printf_i+0xd0>
 80048c4:	232d      	movs	r3, #45	@ 0x2d
 80048c6:	426d      	negs	r5, r5
 80048c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048cc:	4859      	ldr	r0, [pc, #356]	@ (8004a34 <_printf_i+0x238>)
 80048ce:	230a      	movs	r3, #10
 80048d0:	e011      	b.n	80048f6 <_printf_i+0xfa>
 80048d2:	6821      	ldr	r1, [r4, #0]
 80048d4:	6833      	ldr	r3, [r6, #0]
 80048d6:	0608      	lsls	r0, r1, #24
 80048d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80048dc:	d402      	bmi.n	80048e4 <_printf_i+0xe8>
 80048de:	0649      	lsls	r1, r1, #25
 80048e0:	bf48      	it	mi
 80048e2:	b2ad      	uxthmi	r5, r5
 80048e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80048e6:	4853      	ldr	r0, [pc, #332]	@ (8004a34 <_printf_i+0x238>)
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	bf14      	ite	ne
 80048ec:	230a      	movne	r3, #10
 80048ee:	2308      	moveq	r3, #8
 80048f0:	2100      	movs	r1, #0
 80048f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048f6:	6866      	ldr	r6, [r4, #4]
 80048f8:	60a6      	str	r6, [r4, #8]
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	bfa2      	ittt	ge
 80048fe:	6821      	ldrge	r1, [r4, #0]
 8004900:	f021 0104 	bicge.w	r1, r1, #4
 8004904:	6021      	strge	r1, [r4, #0]
 8004906:	b90d      	cbnz	r5, 800490c <_printf_i+0x110>
 8004908:	2e00      	cmp	r6, #0
 800490a:	d04b      	beq.n	80049a4 <_printf_i+0x1a8>
 800490c:	4616      	mov	r6, r2
 800490e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004912:	fb03 5711 	mls	r7, r3, r1, r5
 8004916:	5dc7      	ldrb	r7, [r0, r7]
 8004918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800491c:	462f      	mov	r7, r5
 800491e:	42bb      	cmp	r3, r7
 8004920:	460d      	mov	r5, r1
 8004922:	d9f4      	bls.n	800490e <_printf_i+0x112>
 8004924:	2b08      	cmp	r3, #8
 8004926:	d10b      	bne.n	8004940 <_printf_i+0x144>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	07df      	lsls	r7, r3, #31
 800492c:	d508      	bpl.n	8004940 <_printf_i+0x144>
 800492e:	6923      	ldr	r3, [r4, #16]
 8004930:	6861      	ldr	r1, [r4, #4]
 8004932:	4299      	cmp	r1, r3
 8004934:	bfde      	ittt	le
 8004936:	2330      	movle	r3, #48	@ 0x30
 8004938:	f806 3c01 	strble.w	r3, [r6, #-1]
 800493c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004940:	1b92      	subs	r2, r2, r6
 8004942:	6122      	str	r2, [r4, #16]
 8004944:	f8cd a000 	str.w	sl, [sp]
 8004948:	464b      	mov	r3, r9
 800494a:	aa03      	add	r2, sp, #12
 800494c:	4621      	mov	r1, r4
 800494e:	4640      	mov	r0, r8
 8004950:	f7ff fee6 	bl	8004720 <_printf_common>
 8004954:	3001      	adds	r0, #1
 8004956:	d14a      	bne.n	80049ee <_printf_i+0x1f2>
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	b004      	add	sp, #16
 800495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	f043 0320 	orr.w	r3, r3, #32
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	4833      	ldr	r0, [pc, #204]	@ (8004a38 <_printf_i+0x23c>)
 800496c:	2778      	movs	r7, #120	@ 0x78
 800496e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	6831      	ldr	r1, [r6, #0]
 8004976:	061f      	lsls	r7, r3, #24
 8004978:	f851 5b04 	ldr.w	r5, [r1], #4
 800497c:	d402      	bmi.n	8004984 <_printf_i+0x188>
 800497e:	065f      	lsls	r7, r3, #25
 8004980:	bf48      	it	mi
 8004982:	b2ad      	uxthmi	r5, r5
 8004984:	6031      	str	r1, [r6, #0]
 8004986:	07d9      	lsls	r1, r3, #31
 8004988:	bf44      	itt	mi
 800498a:	f043 0320 	orrmi.w	r3, r3, #32
 800498e:	6023      	strmi	r3, [r4, #0]
 8004990:	b11d      	cbz	r5, 800499a <_printf_i+0x19e>
 8004992:	2310      	movs	r3, #16
 8004994:	e7ac      	b.n	80048f0 <_printf_i+0xf4>
 8004996:	4827      	ldr	r0, [pc, #156]	@ (8004a34 <_printf_i+0x238>)
 8004998:	e7e9      	b.n	800496e <_printf_i+0x172>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	f023 0320 	bic.w	r3, r3, #32
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	e7f6      	b.n	8004992 <_printf_i+0x196>
 80049a4:	4616      	mov	r6, r2
 80049a6:	e7bd      	b.n	8004924 <_printf_i+0x128>
 80049a8:	6833      	ldr	r3, [r6, #0]
 80049aa:	6825      	ldr	r5, [r4, #0]
 80049ac:	6961      	ldr	r1, [r4, #20]
 80049ae:	1d18      	adds	r0, r3, #4
 80049b0:	6030      	str	r0, [r6, #0]
 80049b2:	062e      	lsls	r6, r5, #24
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	d501      	bpl.n	80049bc <_printf_i+0x1c0>
 80049b8:	6019      	str	r1, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <_printf_i+0x1c6>
 80049bc:	0668      	lsls	r0, r5, #25
 80049be:	d5fb      	bpl.n	80049b8 <_printf_i+0x1bc>
 80049c0:	8019      	strh	r1, [r3, #0]
 80049c2:	2300      	movs	r3, #0
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	4616      	mov	r6, r2
 80049c8:	e7bc      	b.n	8004944 <_printf_i+0x148>
 80049ca:	6833      	ldr	r3, [r6, #0]
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	6032      	str	r2, [r6, #0]
 80049d0:	681e      	ldr	r6, [r3, #0]
 80049d2:	6862      	ldr	r2, [r4, #4]
 80049d4:	2100      	movs	r1, #0
 80049d6:	4630      	mov	r0, r6
 80049d8:	f7fb fbfa 	bl	80001d0 <memchr>
 80049dc:	b108      	cbz	r0, 80049e2 <_printf_i+0x1e6>
 80049de:	1b80      	subs	r0, r0, r6
 80049e0:	6060      	str	r0, [r4, #4]
 80049e2:	6863      	ldr	r3, [r4, #4]
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	2300      	movs	r3, #0
 80049e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ec:	e7aa      	b.n	8004944 <_printf_i+0x148>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	4632      	mov	r2, r6
 80049f2:	4649      	mov	r1, r9
 80049f4:	4640      	mov	r0, r8
 80049f6:	47d0      	blx	sl
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0ad      	beq.n	8004958 <_printf_i+0x15c>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	079b      	lsls	r3, r3, #30
 8004a00:	d413      	bmi.n	8004a2a <_printf_i+0x22e>
 8004a02:	68e0      	ldr	r0, [r4, #12]
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	4298      	cmp	r0, r3
 8004a08:	bfb8      	it	lt
 8004a0a:	4618      	movlt	r0, r3
 8004a0c:	e7a6      	b.n	800495c <_printf_i+0x160>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4632      	mov	r2, r6
 8004a12:	4649      	mov	r1, r9
 8004a14:	4640      	mov	r0, r8
 8004a16:	47d0      	blx	sl
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d09d      	beq.n	8004958 <_printf_i+0x15c>
 8004a1c:	3501      	adds	r5, #1
 8004a1e:	68e3      	ldr	r3, [r4, #12]
 8004a20:	9903      	ldr	r1, [sp, #12]
 8004a22:	1a5b      	subs	r3, r3, r1
 8004a24:	42ab      	cmp	r3, r5
 8004a26:	dcf2      	bgt.n	8004a0e <_printf_i+0x212>
 8004a28:	e7eb      	b.n	8004a02 <_printf_i+0x206>
 8004a2a:	2500      	movs	r5, #0
 8004a2c:	f104 0619 	add.w	r6, r4, #25
 8004a30:	e7f5      	b.n	8004a1e <_printf_i+0x222>
 8004a32:	bf00      	nop
 8004a34:	08004bb9 	.word	0x08004bb9
 8004a38:	08004bca 	.word	0x08004bca

08004a3c <memmove>:
 8004a3c:	4288      	cmp	r0, r1
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	eb01 0402 	add.w	r4, r1, r2
 8004a44:	d902      	bls.n	8004a4c <memmove+0x10>
 8004a46:	4284      	cmp	r4, r0
 8004a48:	4623      	mov	r3, r4
 8004a4a:	d807      	bhi.n	8004a5c <memmove+0x20>
 8004a4c:	1e43      	subs	r3, r0, #1
 8004a4e:	42a1      	cmp	r1, r4
 8004a50:	d008      	beq.n	8004a64 <memmove+0x28>
 8004a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a5a:	e7f8      	b.n	8004a4e <memmove+0x12>
 8004a5c:	4402      	add	r2, r0
 8004a5e:	4601      	mov	r1, r0
 8004a60:	428a      	cmp	r2, r1
 8004a62:	d100      	bne.n	8004a66 <memmove+0x2a>
 8004a64:	bd10      	pop	{r4, pc}
 8004a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a6e:	e7f7      	b.n	8004a60 <memmove+0x24>

08004a70 <_sbrk_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4d06      	ldr	r5, [pc, #24]	@ (8004a8c <_sbrk_r+0x1c>)
 8004a74:	2300      	movs	r3, #0
 8004a76:	4604      	mov	r4, r0
 8004a78:	4608      	mov	r0, r1
 8004a7a:	602b      	str	r3, [r5, #0]
 8004a7c:	f7fb fff8 	bl	8000a70 <_sbrk>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_sbrk_r+0x1a>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_sbrk_r+0x1a>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	200002bc 	.word	0x200002bc

08004a90 <memcpy>:
 8004a90:	440a      	add	r2, r1
 8004a92:	4291      	cmp	r1, r2
 8004a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a98:	d100      	bne.n	8004a9c <memcpy+0xc>
 8004a9a:	4770      	bx	lr
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aa6:	4291      	cmp	r1, r2
 8004aa8:	d1f9      	bne.n	8004a9e <memcpy+0xe>
 8004aaa:	bd10      	pop	{r4, pc}

08004aac <_realloc_r>:
 8004aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4615      	mov	r5, r2
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	b921      	cbnz	r1, 8004ac2 <_realloc_r+0x16>
 8004ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004abc:	4611      	mov	r1, r2
 8004abe:	f7ff bc4b 	b.w	8004358 <_malloc_r>
 8004ac2:	b92a      	cbnz	r2, 8004ad0 <_realloc_r+0x24>
 8004ac4:	f7ff fbdc 	bl	8004280 <_free_r>
 8004ac8:	2400      	movs	r4, #0
 8004aca:	4620      	mov	r0, r4
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	f000 f81a 	bl	8004b08 <_malloc_usable_size_r>
 8004ad4:	4285      	cmp	r5, r0
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	d802      	bhi.n	8004ae0 <_realloc_r+0x34>
 8004ada:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ade:	d8f4      	bhi.n	8004aca <_realloc_r+0x1e>
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	f7ff fc38 	bl	8004358 <_malloc_r>
 8004ae8:	4607      	mov	r7, r0
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d0ec      	beq.n	8004ac8 <_realloc_r+0x1c>
 8004aee:	42b5      	cmp	r5, r6
 8004af0:	462a      	mov	r2, r5
 8004af2:	4621      	mov	r1, r4
 8004af4:	bf28      	it	cs
 8004af6:	4632      	movcs	r2, r6
 8004af8:	f7ff ffca 	bl	8004a90 <memcpy>
 8004afc:	4621      	mov	r1, r4
 8004afe:	4640      	mov	r0, r8
 8004b00:	f7ff fbbe 	bl	8004280 <_free_r>
 8004b04:	463c      	mov	r4, r7
 8004b06:	e7e0      	b.n	8004aca <_realloc_r+0x1e>

08004b08 <_malloc_usable_size_r>:
 8004b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b0c:	1f18      	subs	r0, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfbc      	itt	lt
 8004b12:	580b      	ldrlt	r3, [r1, r0]
 8004b14:	18c0      	addlt	r0, r0, r3
 8004b16:	4770      	bx	lr

08004b18 <_init>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	bf00      	nop
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr

08004b24 <_fini>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr
